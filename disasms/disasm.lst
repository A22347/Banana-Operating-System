
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b2 fb 00 00       	call   c000fbd2 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 88 6c 02 c0       	mov    eax,0xc0026c88
c0000025:	3d 88 6c 02 c0       	cmp    eax,0xc0026c88
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 88 6c 02 c0       	push   0xc0026c88
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 88 6c 02 c0       	mov    eax,0xc0026c88
c0000051:	2d 88 6c 02 c0       	sub    eax,0xc0026c88
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 88 6c 02 c0       	push   0xc0026c88
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb c0 26 02 c0       	mov    ebx,0xc00226c0
c0000097:	81 eb bc 26 02 c0    	sub    ebx,0xc00226bc
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be bc 26 02 c0       	mov    esi,0xc00226bc
c00000a6:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 88 6c 02 c0       	push   0xc0026c88
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 80 02 c0       	push   0xc00280c8
c0000108:	68 88 6c 02 c0       	push   0xc0026c88
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 cf 62 01 00       	call   c001657c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 36 42 01 00       	call   c00144fb <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 ad 62 01 00       	call   c001657c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 0e 68 01 00       	call   c0016afc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 7d 6d 01 00       	call   c0017074 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 c1 02 c0 	lgdtd  ds:0xc002c118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 6a ec 00 00       	jmp    c000efe9 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 80 02 c0       	mov    ds:0xc00280e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 e0 26 02 c0 02 	test   BYTE PTR [edx-0x3ffdd920],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 e0 26 02 c0 01 	test   BYTE PTR [edx-0x3ffdd920],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 e0 26 02 c0 08 	test   BYTE PTR [edx-0x3ffdd920],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 e0 26 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd920],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 e0 26 02 c0 01 	test   BYTE PTR [edx-0x3ffdd920],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 81 02 c0    	mov    ecx,DWORD PTR ds:0xc002813c
c0000df7:	c7 42 0c 34 81 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 81 02 c0 02 	test   BYTE PTR ds:0xc0028100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 84 02 c0    	dec    DWORD PTR ds:0xc0028450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 84 02 c0    	sub    DWORD PTR ds:0xc0028464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 b5 e9 00 00       	call   c000f815 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 c2 e8 00 00       	call   c000f7b7 <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 a1 e7 00 00       	call   c000f781 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 9c e7 00 00       	call   c000f7b7 <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 48 e6 00 00       	call   c000f781 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 2e e6 00 00       	call   c000f781 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 04 e6 00 00       	call   c000f781 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 81 02 c0    	mov    edi,DWORD PTR ds:0xc0028100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 81 02 c0       	mov    eax,0xc0028100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 81 02 c0 	lea    edx,[eax*8-0x3ffd7ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028140
c00012e5:	81 fb 34 81 02 c0    	cmp    ebx,0xc0028134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 81 02 c0       	cmp    eax,0xc0028134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 81 02 c0    	cmp    DWORD PTR ds:0xc0028130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 81 02 c0       	mov    ds:0xc002813c,eax
c0001321:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001326:	a3 30 81 02 c0       	mov    ds:0xc0028130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c0001334:	c7 40 0c 34 81 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 80 02 c0 	lea    ebp,[edx*4-0x3ffd7f08]
c0001385:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 81 02 c0 	lea    ecx,[edx*4-0x3ffd7f00]
c00013a0:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 84 02 c0 	or     DWORD PTR [edi*4-0x3ffd7bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 81 02 c0 	lea    eax,[eax*8-0x3ffd7ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,ecx
c000145a:	89 0d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,ecx
c0001460:	c7 41 08 34 81 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028134
c0001467:	c7 41 0c 34 81 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 81 02 c0 	lea    edx,[ecx*8-0x3ffd7ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 81 02 c0 	lea    edx,[eax*4-0x3ffd7ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 84 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edi
c000152d:	89 3d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edi
c0001533:	c7 47 08 34 81 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028134
c000153a:	c7 47 0c 34 81 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 81 02 c0    	mov    DWORD PTR ds:0xc0028130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 81 02 c0       	mov    edx,0xc0028100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 84 02 c0    	push   DWORD PTR ds:0xc002845c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 84 02 c0       	mov    eax,ds:0xc002845c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 81 02 c0 00 	cmp    DWORD PTR ds:0xc002812c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 81 02 c0       	mov    eax,0xc0028134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 84 02 c0       	cmp    eax,0xc002842c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 84 02 c0       	mov    eax,ds:0xc0028468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 e4 27 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd81c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 84 02 c0    	mov    DWORD PTR ds:0xc0028444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 84 02 c0    	mov    DWORD PTR ds:0xc0028448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 60 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd13a0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 e5 a3 01 00       	jmp    c001c370 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 60 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd13a0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 0f a4 01 00       	jmp    c001c3b0 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 60 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd13a0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 30 a4 01 00       	jmp    c001c3f0 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 40 29 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd6c0]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 40 29 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd6c0]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 58 58 02 c0       	mov    edx,0xc0025858
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba fc 27 02 c0       	mov    edx,0xc00227fc
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 84 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 84 02 c0    	mov    ax,ds:0xc0028480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 84 02 c0    	mov    ds:0xc0028480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 02 28 02 c0       	mov    eax,0xc0022802
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf c0 28 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd740]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 0b 28 02 c0       	mov    eax,0xc002280b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 40 29 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd6c0]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 90 28 02 c0       	mov    eax,0xc0022890
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 80 28 02 c0       	mov    ebx,0xc0022880
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 60 28 02 c0       	mov    eax,0xc0022860
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 70 28 02 c0       	mov    eax,0xc0022870
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 12 28 02 c0       	mov    edx,0xc0022812
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 1e 28 02 c0       	mov    edx,0xc002281e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 32 28 02 c0       	mov    edx,0xc0022832
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 80 9a 00 00       	call   c000f897 <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 78 9a 00 00       	call   c000f8a7 <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 60 2c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022c60
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 60 2c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022c60
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 a0 29 02 c0       	mov    eax,0xc00229a0
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 60 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd6a0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 60 2d 02 c0       	push   0xc0022d60
c0006303:	e8 04 6a 01 00       	call   c001cd0c <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 6e 2d 02 c0       	push   0xc0022d6e
c000633b:	e8 cc 69 01 00       	call   c001cd0c <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 85 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd7a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 35 69 01 00       	call   c001ccb0 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 80 02 c0       	mov    eax,0xc0028080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 80 02 c0       	mov    eax,0xc0028020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 8e 02 c0    	mov    ebp,DWORD PTR ds:0xc0028eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 7d 2d 02 c0       	push   0xc0022d7d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 8e 02 c0       	mov    ecx,0xc0028e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 85 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd7ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd7ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7abc],esi
c0006746:	89 87 40 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ac0],eax
c000674c:	c7 87 48 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7a30],0x0
c0006768:	89 87 4c 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 85 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd7a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c00067e1:	8b 8d 4c 85 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd7ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 85 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd7ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 85 02 c0    	add    DWORD PTR [ebp-0x3ffd7ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 85 02 c0    	lea    ecx,[ebp-0x3ffd7ac0]
c00068d9:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 85 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd7ab4]
c0006917:	05 40 85 02 c0       	add    eax,0xc0028540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 85 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd7ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 85 02 c0    	lea    edi,[eax-0x3ffd7ac0]
c00069d6:	83 b8 40 85 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd7ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 80 2d 02 c0       	push   0xc0022d80
c00069fa:	e8 0d 63 01 00       	call   c001cd0c <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 21 63 01 00       	call   c001cd28 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 85 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d85
c0006a14:	e8 f3 62 01 00       	call   c001cd0c <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7ac0]
c0006a20:	e8 03 63 01 00       	call   c001cd28 <iso_kprintfd>
c0006a25:	c7 04 24 8b 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d8b
c0006a2c:	e8 db 62 01 00       	call   c001cd0c <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7abc]
c0006a38:	e8 eb 62 01 00       	call   c001cd28 <iso_kprintfd>
c0006a3d:	c7 04 24 91 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d91
c0006a44:	e8 c3 62 01 00       	call   c001cd0c <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7a30]
c0006a50:	e8 d3 62 01 00       	call   c001cd28 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 85 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd7ab8]
c0006ab6:	81 c2 40 85 02 c0    	add    edx,0xc0028540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 85 02 c0    	lea    ebp,[eax-0x3ffd7aa8]
c0006b12:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 85 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd7aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 7d 2d 02 c0       	push   0xc0022d7d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 85 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd7aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7ab0],eax
c0006bee:	89 93 54 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7aac],edx
c0006bf4:	81 c3 40 85 02 c0    	add    ebx,0xc0028540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 85 02 c0       	add    eax,0xc0028550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 9a 2d 02 c0       	push   0xc0022d9a
c0006c19:	e8 ee 60 01 00       	call   c001cd0c <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 80 02 c0       	mov    ds:0xc0028060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb4,0x0
c0006c4e:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 a5 2d 02 c0       	push   0xc0022da5
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 8e 02 c0       	mov    ds:0xc0028eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 ac 2d 02 c0       	push   0xc0022dac
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 80 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd7f80]
c0006cec:	bf 80 8e 02 c0       	mov    edi,0xc0028e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 8e 02 c0       	mov    eax,0xc0028e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 8e 02 c0       	mov    ds:0xc0028ea8,eax
c0006d0f:	b8 8a 8e 02 c0       	mov    eax,0xc0028e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 b3 2d 02 c0       	push   0xc0022db3
c0006d30:	e8 d7 5f 01 00       	call   c001cd0c <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 be 2d 02 c0       	push   0xc0022dbe
c0006d4b:	e8 bc 5f 01 00       	call   c001cd0c <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 85 02 c0       	push   0xc0028540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0028540,0xffffffff
c0006d75:	e8 1d 8b 00 00       	call   c000f897 <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 8e 02 c0       	mov    ds:0xc0028eb0,eax
c0006d86:	e8 0c 8b 00 00       	call   c000f897 <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 f7 8a 00 00       	call   c000f897 <malloc>
c0006da0:	89 04 9d 80 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 de 8a 00 00       	call   c000f897 <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7f80]
c0006de6:	e8 bc 8a 00 00       	call   c000f8a7 <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 ae 8a 00 00       	call   c000f8a7 <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 8e 02 c0       	mov    eax,ds:0xc0028eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 94 8a 00 00       	call   c000f8a7 <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 7f 8a 00 00       	call   c000f8a7 <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028520,0x0
c0006e35:	c7 05 b0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be d0 2d 02 c0       	mov    esi,0xc0022dd0
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 cf 2d 02 c0       	mov    al,ds:0xc0022dcf
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	53                   	push   ebx
c0006ee7:	83 ec 14             	sub    esp,0x14
c0006eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006eee:	6a 10                	push   0x10
c0006ef0:	e8 c3 63 00 00       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006ef5:	83 c4 10             	add    esp,0x10
c0006ef8:	84 c0                	test   al,al
c0006efa:	75 12                	jne    c0006f0e <Dbg::logc(char)+0x28>
c0006efc:	ba fd 03 00 00       	mov    edx,0x3fd
c0006f01:	ec                   	in     al,dx
c0006f02:	a8 20                	test   al,0x20
c0006f04:	74 fb                	je     c0006f01 <Dbg::logc(char)+0x1b>
c0006f06:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f0b:	88 d8                	mov    al,bl
c0006f0d:	ee                   	out    dx,al
c0006f0e:	83 c4 08             	add    esp,0x8
c0006f11:	5b                   	pop    ebx
c0006f12:	c3                   	ret    

c0006f13 <Dbg::logs(char*)>:
c0006f13:	53                   	push   ebx
c0006f14:	83 ec 08             	sub    esp,0x8
c0006f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	74 16                	je     c0006f38 <Dbg::logs(char*)+0x25>
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	83 c3 01             	add    ebx,0x1
c0006f28:	50                   	push   eax
c0006f29:	e8 b8 ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f2e:	83 c4 10             	add    esp,0x10
c0006f31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f34:	85 c0                	test   eax,eax
c0006f36:	75 ea                	jne    c0006f22 <Dbg::logs(char*)+0xf>
c0006f38:	83 c4 08             	add    esp,0x8
c0006f3b:	5b                   	pop    ebx
c0006f3c:	c3                   	ret    

c0006f3d <Dbg::logWriteInt(unsigned int)>:
c0006f3d:	83 ec 1c             	sub    esp,0x1c
c0006f40:	6a 0a                	push   0xa
c0006f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f46:	50                   	push   eax
c0006f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f4b:	50                   	push   eax
c0006f4c:	e8 f5 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f51:	50                   	push   eax
c0006f52:	e8 bc ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f57:	83 c4 2c             	add    esp,0x2c
c0006f5a:	c3                   	ret    

c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f5b:	83 ec 1c             	sub    esp,0x1c
c0006f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f62:	50                   	push   eax
c0006f63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f67:	50                   	push   eax
c0006f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f6c:	52                   	push   edx
c0006f6d:	e8 d4 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f72:	50                   	push   eax
c0006f73:	e8 9b ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f78:	83 c4 2c             	add    esp,0x2c
c0006f7b:	c3                   	ret    

c0006f7c <Dbg::kprintf(char const*, ...)>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 1c             	sub    esp,0x1c
c0006f83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f87:	85 db                	test   ebx,ebx
c0006f89:	0f 84 4c 01 00 00    	je     c00070db <Dbg::kprintf(char const*, ...)+0x15f>
c0006f8f:	83 ec 0c             	sub    esp,0xc
c0006f92:	6a 10                	push   0x10
c0006f94:	e8 1f 63 00 00       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f99:	83 c4 10             	add    esp,0x10
c0006f9c:	84 c0                	test   al,al
c0006f9e:	74 08                	je     c0006fa8 <Dbg::kprintf(char const*, ...)+0x2c>
c0006fa0:	83 c4 1c             	add    esp,0x1c
c0006fa3:	5b                   	pop    ebx
c0006fa4:	5e                   	pop    esi
c0006fa5:	5f                   	pop    edi
c0006fa6:	5d                   	pop    ebp
c0006fa7:	c3                   	ret    
c0006fa8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006fac:	31 ff                	xor    edi,edi
c0006fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fb5:	85 c0                	test   eax,eax
c0006fb7:	74 e7                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0006fb9:	8d 77 01             	lea    esi,[edi+0x1]
c0006fbc:	83 f8 25             	cmp    eax,0x25
c0006fbf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fc2:	75 4c                	jne    c0007010 <Dbg::kprintf(char const*, ...)+0x94>
c0006fc4:	83 c7 02             	add    edi,0x2
c0006fc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fca:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fcd:	83 e8 25             	sub    eax,0x25
c0006fd0:	0f b6 c0             	movzx  eax,al
c0006fd3:	83 f8 53             	cmp    eax,0x53
c0006fd6:	0f 87 e1 00 00 00    	ja     c00070bd <Dbg::kprintf(char const*, ...)+0x141>
c0006fdc:	ff 24 85 18 2e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd1e8]
c0006fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fe7:	83 ec 0c             	sub    esp,0xc
c0006fea:	89 c8                	mov    eax,ecx
c0006fec:	83 c1 04             	add    ecx,0x4
c0006fef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ff5:	50                   	push   eax
c0006ff6:	e8 42 ff ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0006ffb:	83 c4 10             	add    esp,0x10
c0006ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007001:	85 c0                	test   eax,eax
c0007003:	74 9b                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0007005:	8d 77 01             	lea    esi,[edi+0x1]
c0007008:	83 f8 25             	cmp    eax,0x25
c000700b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000700e:	74 b4                	je     c0006fc4 <Dbg::kprintf(char const*, ...)+0x48>
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 f7                	mov    edi,esi
c0007015:	50                   	push   eax
c0007016:	89 ee                	mov    esi,ebp
c0007018:	e8 c9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	eb dc                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c0007022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007026:	83 ec 0c             	sub    esp,0xc
c0007029:	89 c8                	mov    eax,ecx
c000702b:	83 c1 04             	add    ecx,0x4
c000702e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007030:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007034:	55                   	push   ebp
c0007035:	e8 d9 fe ff ff       	call   c0006f13 <Dbg::logs(char*)>
c000703a:	83 c4 10             	add    esp,0x10
c000703d:	eb bf                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	89 d0                	mov    eax,edx
c0007048:	83 c2 04             	add    edx,0x4
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007051:	51                   	push   ecx
c0007052:	e8 e6 fe ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	eb a2                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000705c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007060:	83 ec 0c             	sub    esp,0xc
c0007063:	89 d0                	mov    eax,edx
c0007065:	83 c2 04             	add    edx,0x4
c0007068:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000706b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000706f:	50                   	push   eax
c0007070:	e8 71 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007075:	83 c4 10             	add    esp,0x10
c0007078:	eb 84                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000707a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707e:	89 c8                	mov    eax,ecx
c0007080:	83 c1 04             	add    ecx,0x4
c0007083:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	6a 10                	push   0x10
c000708c:	8b 10                	mov    edx,DWORD PTR [eax]
c000708e:	52                   	push   edx
c000708f:	e8 c7 fe ff ff       	call   c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	e9 62 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000709c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070a0:	89 d0                	mov    eax,edx
c00070a2:	83 c2 08             	add    edx,0x8
c00070a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a9:	eb dc                	jmp    c0007087 <Dbg::kprintf(char const*, ...)+0x10b>
c00070ab:	83 ec 0c             	sub    esp,0xc
c00070ae:	6a 25                	push   0x25
c00070b0:	e8 31 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b5:	83 c4 10             	add    esp,0x10
c00070b8:	e9 41 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 25                	push   0x25
c00070c2:	e8 1f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ce:	e8 13 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	e9 23 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070db:	83 ec 0c             	sub    esp,0xc
c00070de:	68 e0 2d 02 c0       	push   0xc0022de0
c00070e3:	e8 94 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00070e8:	83 c4 10             	add    esp,0x10
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	5b                   	pop    ebx
c00070ef:	5e                   	pop    esi
c00070f0:	5f                   	pop    edi
c00070f1:	5d                   	pop    ebp
c00070f2:	c3                   	ret    
c00070f3:	90                   	nop

c00070f4 <KiUbsanPrintDetails(char const*, void*)>:
c00070f4:	83 ec 1c             	sub    esp,0x1c
c00070f7:	83 ec 08             	sub    esp,0x8
c00070fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070fe:	68 68 2f 02 c0       	push   0xc0022f68
c0007103:	e8 74 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007108:	83 c4 10             	add    esp,0x10
c000710b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000710f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007117:	8b 00                	mov    eax,DWORD PTR [eax]
c0007119:	83 ec 08             	sub    esp,0x8
c000711c:	50                   	push   eax
c000711d:	68 7c 2f 02 c0       	push   0xc0022f7c
c0007122:	e8 55 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007131:	83 ec 08             	sub    esp,0x8
c0007134:	50                   	push   eax
c0007135:	68 86 2f 02 c0       	push   0xc0022f86
c000713a:	e8 3d fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000713f:	83 c4 10             	add    esp,0x10
c0007142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007149:	83 ec 08             	sub    esp,0x8
c000714c:	50                   	push   eax
c000714d:	68 90 2f 02 c0       	push   0xc0022f90
c0007152:	e8 25 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007157:	83 c4 10             	add    esp,0x10
c000715a:	90                   	nop
c000715b:	83 c4 1c             	add    esp,0x1c
c000715e:	c3                   	ret    
c000715f:	90                   	nop

c0007160 <__ubsan_handle_type_mismatch_v1>:
c0007160:	83 ec 0c             	sub    esp,0xc
c0007163:	83 ec 08             	sub    esp,0x8
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	68 d4 30 02 c0       	push   0xc00230d4
c000716f:	e8 80 ff ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007174:	83 c4 10             	add    esp,0x10
c0007177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000717c:	75 16                	jne    c0007194 <__ubsan_handle_type_mismatch_v1+0x34>
c000717e:	83 ec 0c             	sub    esp,0xc
c0007181:	68 9a 2f 02 c0       	push   0xc0022f9a
c0007186:	e8 f1 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000718b:	83 c4 10             	add    esp,0x10
c000718e:	e9 91 00 00 00       	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007193:	90                   	nop
c0007194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000719b:	85 c0                	test   eax,eax
c000719d:	74 29                	je     c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c000719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00071a6:	83 e8 01             	sub    eax,0x1
c00071a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00071ad:	75 19                	jne    c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00071af:	83 ec 08             	sub    esp,0x8
c00071b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071b6:	68 f4 30 02 c0       	push   0xc00230f4
c00071bb:	e8 bc fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071c0:	83 c4 10             	add    esp,0x10
c00071c3:	eb 5f                	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071c5:	8d 76 00             	lea    esi,[esi+0x0]
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	68 af 2f 02 c0       	push   0xc0022faf
c00071d0:	e8 a7 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071df:	0f b6 c0             	movzx  eax,al
c00071e2:	83 ec 08             	sub    esp,0x8
c00071e5:	50                   	push   eax
c00071e6:	68 c9 2f 02 c0       	push   0xc0022fc9
c00071eb:	e8 8c fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007208:	0f b6 c0             	movzx  eax,al
c000720b:	8b 04 85 20 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9de0]
c0007212:	51                   	push   ecx
c0007213:	52                   	push   edx
c0007214:	50                   	push   eax
c0007215:	68 1c 31 02 c0       	push   0xc002311c
c000721a:	e8 5d fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	66 90                	xchg   ax,ax
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	68 d4 30 02 c0       	push   0xc00230d4
c000722c:	e8 c3 8a 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007231:	83 c4 10             	add    esp,0x10
c0007234:	90                   	nop
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	c3                   	ret    
c0007239:	8d 76 00             	lea    esi,[esi+0x0]

c000723c <__ubsan_handle_pointer_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 64 31 02 c0       	push   0xc0023164
c000724b:	e8 a4 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 64 31 02 c0       	push   0xc0023164
c000725b:	e8 94 8a 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_out_of_bounds>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 d4 2f 02 c0       	push   0xc0022fd4
c0007277:	e8 78 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 d4 2f 02 c0       	push   0xc0022fd4
c0007287:	e8 68 8a 00 00       	call   c000fcf4 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_add_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 f1 2f 02 c0       	push   0xc0022ff1
c00072a3:	e8 4c fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 f1 2f 02 c0       	push   0xc0022ff1
c00072b3:	e8 3c 8a 00 00       	call   c000fcf4 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_load_invalid_value>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 84 31 02 c0       	push   0xc0023184
c00072cf:	e8 20 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 84 31 02 c0       	push   0xc0023184
c00072df:	e8 10 8a 00 00       	call   c000fcf4 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_divrem_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 a8 31 02 c0       	push   0xc00231a8
c00072fb:	e8 f4 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 a8 31 02 c0       	push   0xc00231a8
c000730b:	e8 e4 89 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_mul_overflow>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 0d 30 02 c0       	push   0xc002300d
c0007327:	e8 c8 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 0d 30 02 c0       	push   0xc002300d
c0007337:	e8 b8 89 00 00       	call   c000fcf4 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_sub_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 29 30 02 c0       	push   0xc0023029
c0007353:	e8 9c fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 29 30 02 c0       	push   0xc0023029
c0007363:	e8 8c 89 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <__ubsan_handle_shift_out_of_bounds>:
c0007370:	83 ec 0c             	sub    esp,0xc
c0007373:	83 ec 08             	sub    esp,0x8
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	68 c8 31 02 c0       	push   0xc00231c8
c000737f:	e8 70 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007384:	83 c4 10             	add    esp,0x10
c0007387:	83 ec 0c             	sub    esp,0xc
c000738a:	68 c8 31 02 c0       	push   0xc00231c8
c000738f:	e8 60 89 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	90                   	nop
c0007398:	83 c4 0c             	add    esp,0xc
c000739b:	c3                   	ret    

c000739c <__ubsan_handle_negate_overflow>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	83 ec 08             	sub    esp,0x8
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	68 ec 31 02 c0       	push   0xc00231ec
c00073ab:	e8 44 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00073b0:	83 c4 10             	add    esp,0x10
c00073b3:	83 ec 0c             	sub    esp,0xc
c00073b6:	68 ec 31 02 c0       	push   0xc00231ec
c00073bb:	e8 34 89 00 00       	call   c000fcf4 <KePanic(char const*)>
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	90                   	nop
c00073c4:	83 c4 0c             	add    esp,0xc
c00073c7:	c3                   	ret    

c00073c8 <KiIsHashInTable(unsigned short)>:
c00073c8:	0f b7 d0             	movzx  edx,ax
c00073cb:	83 e0 07             	and    eax,0x7
c00073ce:	c1 fa 03             	sar    edx,0x3
c00073d1:	88 c1                	mov    cl,al
c00073d3:	0f b6 92 00 93 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd6d00]
c00073da:	d3 fa                	sar    edx,cl
c00073dc:	89 d0                	mov    eax,edx
c00073de:	83 e0 01             	and    eax,0x1
c00073e1:	c3                   	ret    

c00073e2 <KiSetHashInTable(unsigned short, bool)>:
c00073e2:	56                   	push   esi
c00073e3:	53                   	push   ebx
c00073e4:	0f b7 d8             	movzx  ebx,ax
c00073e7:	83 e0 07             	and    eax,0x7
c00073ea:	c1 fb 03             	sar    ebx,0x3
c00073ed:	89 c1                	mov    ecx,eax
c00073ef:	0f b6 b3 00 93 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd6d00]
c00073f6:	b8 01 00 00 00       	mov    eax,0x1
c00073fb:	d3 e0                	shl    eax,cl
c00073fd:	84 d2                	test   dl,dl
c00073ff:	74 04                	je     c0007405 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007401:	09 f0                	or     eax,esi
c0007403:	eb 04                	jmp    c0007409 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007405:	f7 d0                	not    eax
c0007407:	21 f0                	and    eax,esi
c0007409:	88 83 00 93 02 c0    	mov    BYTE PTR [ebx-0x3ffd6d00],al
c000740f:	5b                   	pop    ebx
c0007410:	5e                   	pop    esi
c0007411:	c3                   	ret    

c0007412 <KiFlushSymlinkChanges()>:
c0007412:	57                   	push   edi
c0007413:	56                   	push   esi
c0007414:	53                   	push   ebx
c0007415:	83 ec 1c             	sub    esp,0x1c
c0007418:	68 14 01 00 00       	push   0x114
c000741d:	e8 75 84 00 00       	call   c000f897 <malloc>
c0007422:	83 c4 0c             	add    esp,0xc
c0007425:	89 c3                	mov    ebx,eax
c0007427:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000742d:	68 0b 32 02 c0       	push   0xc002320b
c0007432:	50                   	push   eax
c0007433:	e8 52 0d 00 00       	call   c000818a <File::File(char const*, Process*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	85 db                	test   ebx,ebx
c000743d:	75 10                	jne    c000744f <KiFlushSymlinkChanges()+0x3d>
c000743f:	83 ec 0c             	sub    esp,0xc
c0007442:	68 29 32 02 c0       	push   0xc0023229
c0007447:	e8 a8 88 00 00       	call   c000fcf4 <KePanic(char const*)>
c000744c:	83 c4 10             	add    esp,0x10
c000744f:	50                   	push   eax
c0007450:	50                   	push   eax
c0007451:	6a 06                	push   0x6
c0007453:	53                   	push   ebx
c0007454:	e8 4f 0d 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	85 c0                	test   eax,eax
c000745e:	74 10                	je     c0007470 <KiFlushSymlinkChanges()+0x5e>
c0007460:	83 ec 0c             	sub    esp,0xc
c0007463:	68 43 32 02 c0       	push   0xc0023243
c0007468:	e8 87 88 00 00       	call   c000fcf4 <KePanic(char const*)>
c000746d:	83 c4 10             	add    esp,0x10
c0007470:	31 f6                	xor    esi,esi
c0007472:	39 35 c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,esi
c0007478:	7e 70                	jle    c00074ea <KiFlushSymlinkChanges()+0xd8>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000747f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007483:	89 f0                	mov    eax,esi
c0007485:	57                   	push   edi
c0007486:	c1 e0 08             	shl    eax,0x8
c0007489:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000748e:	50                   	push   eax
c000748f:	6a 00                	push   0x0
c0007491:	68 00 01 00 00       	push   0x100
c0007496:	53                   	push   ebx
c0007497:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000749a:	83 c4 20             	add    esp,0x20
c000749d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00074a5:	74 10                	je     c00074b7 <KiFlushSymlinkChanges()+0xa5>
c00074a7:	83 ec 0c             	sub    esp,0xc
c00074aa:	68 5d 32 02 c0       	push   0xc002325d
c00074af:	e8 40 88 00 00       	call   c000fcf4 <KePanic(char const*)>
c00074b4:	83 c4 10             	add    esp,0x10
c00074b7:	83 ec 0c             	sub    esp,0xc
c00074ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074bc:	8d 14 f5 e0 8e 02 c0 	lea    edx,[esi*8-0x3ffd7120]
c00074c3:	57                   	push   edi
c00074c4:	52                   	push   edx
c00074c5:	6a 00                	push   0x0
c00074c7:	6a 08                	push   0x8
c00074c9:	53                   	push   ebx
c00074ca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074cd:	83 c4 20             	add    esp,0x20
c00074d0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074d5:	74 10                	je     c00074e7 <KiFlushSymlinkChanges()+0xd5>
c00074d7:	83 ec 0c             	sub    esp,0xc
c00074da:	68 77 32 02 c0       	push   0xc0023277
c00074df:	e8 10 88 00 00       	call   c000fcf4 <KePanic(char const*)>
c00074e4:	83 c4 10             	add    esp,0x10
c00074e7:	46                   	inc    esi
c00074e8:	eb 88                	jmp    c0007472 <KiFlushSymlinkChanges()+0x60>
c00074ea:	83 ec 0c             	sub    esp,0xc
c00074ed:	53                   	push   ebx
c00074ee:	e8 13 0d 00 00       	call   c0008206 <File::close()>
c00074f3:	83 c4 10             	add    esp,0x10
c00074f6:	85 db                	test   ebx,ebx
c00074f8:	74 0c                	je     c0007506 <KiFlushSymlinkChanges()+0xf4>
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074ff:	53                   	push   ebx
c0007500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007503:	83 c4 10             	add    esp,0x10
c0007506:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c0007510:	83 c4 10             	add    esp,0x10
c0007513:	5b                   	pop    ebx
c0007514:	5e                   	pop    esi
c0007515:	5f                   	pop    edi
c0007516:	c3                   	ret    

c0007517 <KiDeinitialiseSymlinks(void*)>:
c0007517:	e9 f6 fe ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>

c000751c <KiGetSymlinkHash(char const*)>:
c000751c:	53                   	push   ebx
c000751d:	89 c3                	mov    ebx,eax
c000751f:	83 ec 14             	sub    esp,0x14
c0007522:	50                   	push   eax
c0007523:	e8 48 90 ff ff       	call   c0000570 <strlen>
c0007528:	5a                   	pop    edx
c0007529:	59                   	pop    ecx
c000752a:	50                   	push   eax
c000752b:	53                   	push   ebx
c000752c:	e8 38 6c 00 00       	call   c000e169 <KeCalculateCRC32(unsigned char*, int)>
c0007531:	83 c4 18             	add    esp,0x18
c0007534:	89 c2                	mov    edx,eax
c0007536:	5b                   	pop    ebx
c0007537:	c1 ea 10             	shr    edx,0x10
c000753a:	31 d0                	xor    eax,edx
c000753c:	c3                   	ret    

c000753d <KiCreateSymlinkID()>:
c000753d:	55                   	push   ebp
c000753e:	57                   	push   edi
c000753f:	56                   	push   esi
c0007540:	53                   	push   ebx
c0007541:	31 db                	xor    ebx,ebx
c0007543:	83 ec 1c             	sub    esp,0x1c
c0007546:	e8 27 92 00 00       	call   c0010772 <KeRand()>
c000754b:	43                   	inc    ebx
c000754c:	8b 2d 00 b3 02 c0    	mov    ebp,DWORD PTR ds:0xc002b300
c0007552:	31 d2                	xor    edx,edx
c0007554:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007557:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000755b:	89 0d 00 b3 02 c0    	mov    DWORD PTR ds:0xc002b300,ecx
c0007561:	c1 e0 1f             	shl    eax,0x1f
c0007564:	89 d7                	mov    edi,edx
c0007566:	89 c6                	mov    esi,eax
c0007568:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000756c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007574:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000757a:	75 10                	jne    c000758c <KiCreateSymlinkID()+0x4f>
c000757c:	83 ec 0c             	sub    esp,0xc
c000757f:	68 91 32 02 c0       	push   0xc0023291
c0007584:	e8 6b 87 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007589:	83 c4 10             	add    esp,0x10
c000758c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007590:	75 04                	jne    c0007596 <KiCreateSymlinkID()+0x59>
c0007592:	39 f5                	cmp    ebp,esi
c0007594:	74 b0                	je     c0007546 <KiCreateSymlinkID()+0x9>
c0007596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000759e:	31 f0                	xor    eax,esi
c00075a0:	83 c4 1c             	add    esp,0x1c
c00075a3:	31 fa                	xor    edx,edi
c00075a5:	5b                   	pop    ebx
c00075a6:	5e                   	pop    esi
c00075a7:	5f                   	pop    edi
c00075a8:	5d                   	pop    ebp
c00075a9:	c3                   	ret    

c00075aa <KeRegisterSymlink(char const*, unsigned long long)>:
c00075aa:	53                   	push   ebx
c00075ab:	83 ec 0c             	sub    esp,0xc
c00075ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00075b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075ba:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075bf:	68 00 01 00 00       	push   0x100
c00075c4:	89 0c c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],ecx
c00075cb:	6a 00                	push   0x0
c00075cd:	89 14 c5 e0 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7120],edx
c00075d4:	c1 e0 08             	shl    eax,0x8
c00075d7:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00075dc:	50                   	push   eax
c00075dd:	e8 0e 8f ff ff       	call   c00004f0 <memset>
c00075e2:	58                   	pop    eax
c00075e3:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075e8:	5a                   	pop    edx
c00075e9:	c1 e0 08             	shl    eax,0x8
c00075ec:	53                   	push   ebx
c00075ed:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00075f2:	50                   	push   eax
c00075f3:	e8 48 90 ff ff       	call   c0000640 <strcpy>
c00075f8:	89 d8                	mov    eax,ebx
c00075fa:	e8 1d ff ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00075ff:	ba 01 00 00 00       	mov    edx,0x1
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	e8 d6 fd ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000760c:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007611:	83 c4 10             	add    esp,0x10
c0007614:	40                   	inc    eax
c0007615:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c000761a:	83 f8 03             	cmp    eax,0x3
c000761d:	7e 09                	jle    c0007628 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000761f:	83 c4 08             	add    esp,0x8
c0007622:	5b                   	pop    ebx
c0007623:	e9 ea fd ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>
c0007628:	83 c4 08             	add    esp,0x8
c000762b:	5b                   	pop    ebx
c000762c:	c3                   	ret    

c000762d <KeInitialiseSymlinks()>:
c000762d:	57                   	push   edi
c000762e:	56                   	push   esi
c000762f:	53                   	push   ebx
c0007630:	81 ec 14 01 00 00    	sub    esp,0x114
c0007636:	c7 05 00 b3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b300,0x0
c0007640:	68 00 20 00 00       	push   0x2000
c0007645:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c000764f:	6a 00                	push   0x0
c0007651:	68 00 93 02 c0       	push   0xc0029300
c0007656:	e8 95 8e ff ff       	call   c00004f0 <memset>
c000765b:	59                   	pop    ecx
c000765c:	5b                   	pop    ebx
c000765d:	6a 00                	push   0x0
c000765f:	68 17 75 00 c0       	push   0xc0007517
c0007664:	e8 df 5b 00 00       	call   c000d248 <KeRegisterAtexit(void (*)(void*), void*)>
c0007669:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007670:	e8 22 82 00 00       	call   c000f897 <malloc>
c0007675:	83 c4 0c             	add    esp,0xc
c0007678:	89 c3                	mov    ebx,eax
c000767a:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0007680:	68 0b 32 02 c0       	push   0xc002320b
c0007685:	50                   	push   eax
c0007686:	e8 ff 0a 00 00       	call   c000818a <File::File(char const*, Process*)>
c000768b:	83 c4 10             	add    esp,0x10
c000768e:	85 db                	test   ebx,ebx
c0007690:	75 10                	jne    c00076a2 <KeInitialiseSymlinks()+0x75>
c0007692:	83 ec 0c             	sub    esp,0xc
c0007695:	68 9a 32 02 c0       	push   0xc002329a
c000769a:	e8 55 86 00 00       	call   c000fcf4 <KePanic(char const*)>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	83 ec 0c             	sub    esp,0xc
c00076a5:	53                   	push   ebx
c00076a6:	e8 c1 0d 00 00       	call   c000846c <File::exists()>
c00076ab:	83 c4 10             	add    esp,0x10
c00076ae:	84 c0                	test   al,al
c00076b0:	75 3a                	jne    c00076ec <KeInitialiseSymlinks()+0xbf>
c00076b2:	52                   	push   edx
c00076b3:	52                   	push   edx
c00076b4:	6a 12                	push   0x12
c00076b6:	53                   	push   ebx
c00076b7:	e8 ec 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076bc:	83 c4 10             	add    esp,0x10
c00076bf:	85 c0                	test   eax,eax
c00076c1:	74 10                	je     c00076d3 <KeInitialiseSymlinks()+0xa6>
c00076c3:	83 ec 0c             	sub    esp,0xc
c00076c6:	68 b7 32 02 c0       	push   0xc00232b7
c00076cb:	e8 24 86 00 00       	call   c000fcf4 <KePanic(char const*)>
c00076d0:	83 c4 10             	add    esp,0x10
c00076d3:	83 ec 0c             	sub    esp,0xc
c00076d6:	53                   	push   ebx
c00076d7:	e8 2a 0b 00 00       	call   c0008206 <File::close()>
c00076dc:	83 c4 10             	add    esp,0x10
c00076df:	85 db                	test   ebx,ebx
c00076e1:	0f 84 9e 00 00 00    	je     c0007785 <KeInitialiseSymlinks()+0x158>
c00076e7:	e9 8d 00 00 00       	jmp    c0007779 <KeInitialiseSymlinks()+0x14c>
c00076ec:	50                   	push   eax
c00076ed:	50                   	push   eax
c00076ee:	6a 01                	push   0x1
c00076f0:	53                   	push   ebx
c00076f1:	e8 b2 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076f6:	83 c4 10             	add    esp,0x10
c00076f9:	85 c0                	test   eax,eax
c00076fb:	74 10                	je     c000770d <KeInitialiseSymlinks()+0xe0>
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	68 d4 32 02 c0       	push   0xc00232d4
c0007705:	e8 ea 85 00 00       	call   c000fcf4 <KePanic(char const*)>
c000770a:	83 c4 10             	add    esp,0x10
c000770d:	83 ec 0c             	sub    esp,0xc
c0007710:	ff 05 00 b3 02 c0    	inc    DWORD PTR ds:0xc002b300
c0007716:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000771a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000771c:	57                   	push   edi
c000771d:	8d 74 24 20          	lea    esi,[esp+0x20]
c0007721:	56                   	push   esi
c0007722:	6a 00                	push   0x0
c0007724:	68 00 01 00 00       	push   0x100
c0007729:	53                   	push   ebx
c000772a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000772d:	83 c4 20             	add    esp,0x20
c0007730:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007738:	75 33                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c000773a:	83 ec 0c             	sub    esp,0xc
c000773d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000773f:	57                   	push   edi
c0007740:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007744:	52                   	push   edx
c0007745:	6a 00                	push   0x0
c0007747:	6a 08                	push   0x8
c0007749:	53                   	push   ebx
c000774a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000774d:	83 c4 20             	add    esp,0x20
c0007750:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007755:	75 16                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c0007757:	89 f0                	mov    eax,esi
c0007759:	e8 be fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c000775e:	ba 01 00 00 00       	mov    edx,0x1
c0007763:	0f b7 c0             	movzx  eax,ax
c0007766:	e8 77 fc ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000776b:	eb a0                	jmp    c000770d <KeInitialiseSymlinks()+0xe0>
c000776d:	83 ec 0c             	sub    esp,0xc
c0007770:	53                   	push   ebx
c0007771:	e8 90 0a 00 00       	call   c0008206 <File::close()>
c0007776:	83 c4 10             	add    esp,0x10
c0007779:	83 ec 0c             	sub    esp,0xc
c000777c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000777e:	53                   	push   ebx
c000777f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	81 c4 10 01 00 00    	add    esp,0x110
c000778b:	5b                   	pop    ebx
c000778c:	5e                   	pop    esi
c000778d:	5f                   	pop    edi
c000778e:	c3                   	ret    

c000778f <KiIsSymlinkRegistered(char const*)>:
c000778f:	55                   	push   ebp
c0007790:	57                   	push   edi
c0007791:	56                   	push   esi
c0007792:	53                   	push   ebx
c0007793:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007799:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00077a0:	89 f0                	mov    eax,esi
c00077a2:	e8 75 fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00077a7:	0f b7 c0             	movzx  eax,ax
c00077aa:	e8 19 fc ff ff       	call   c00073c8 <KiIsHashInTable(unsigned short)>
c00077af:	31 d2                	xor    edx,edx
c00077b1:	88 c1                	mov    cl,al
c00077b3:	31 c0                	xor    eax,eax
c00077b5:	84 c9                	test   cl,cl
c00077b7:	0f 84 31 01 00 00    	je     c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077bd:	31 db                	xor    ebx,ebx
c00077bf:	39 1d c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,ebx
c00077c5:	7e 30                	jle    c00077f7 <KiIsSymlinkRegistered(char const*)+0x68>
c00077c7:	89 d8                	mov    eax,ebx
c00077c9:	51                   	push   ecx
c00077ca:	c1 e0 08             	shl    eax,0x8
c00077cd:	51                   	push   ecx
c00077ce:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00077d3:	50                   	push   eax
c00077d4:	56                   	push   esi
c00077d5:	e8 76 8f ff ff       	call   c0000750 <strcmp>
c00077da:	83 c4 10             	add    esp,0x10
c00077dd:	85 c0                	test   eax,eax
c00077df:	75 13                	jne    c00077f4 <KiIsSymlinkRegistered(char const*)+0x65>
c00077e1:	8b 04 dd e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd7120]
c00077e8:	8b 14 dd e4 8e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd711c]
c00077ef:	e9 fa 00 00 00       	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077f4:	43                   	inc    ebx
c00077f5:	eb c8                	jmp    c00077bf <KiIsSymlinkRegistered(char const*)+0x30>
c00077f7:	83 ec 0c             	sub    esp,0xc
c00077fa:	68 14 01 00 00       	push   0x114
c00077ff:	e8 93 80 00 00       	call   c000f897 <malloc>
c0007804:	83 c4 0c             	add    esp,0xc
c0007807:	89 c3                	mov    ebx,eax
c0007809:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000780f:	68 0b 32 02 c0       	push   0xc002320b
c0007814:	50                   	push   eax
c0007815:	e8 70 09 00 00       	call   c000818a <File::File(char const*, Process*)>
c000781a:	83 c4 10             	add    esp,0x10
c000781d:	85 db                	test   ebx,ebx
c000781f:	75 12                	jne    c0007833 <KiIsSymlinkRegistered(char const*)+0xa4>
c0007821:	83 ec 0c             	sub    esp,0xc
c0007824:	68 ef 32 02 c0       	push   0xc00232ef
c0007829:	e8 c6 84 00 00       	call   c000fcf4 <KePanic(char const*)>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	eb 10                	jmp    c0007843 <KiIsSymlinkRegistered(char const*)+0xb4>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	53                   	push   ebx
c0007837:	e8 30 0c 00 00       	call   c000846c <File::exists()>
c000783c:	83 c4 10             	add    esp,0x10
c000783f:	84 c0                	test   al,al
c0007841:	74 de                	je     c0007821 <KiIsSymlinkRegistered(char const*)+0x92>
c0007843:	52                   	push   edx
c0007844:	52                   	push   edx
c0007845:	6a 01                	push   0x1
c0007847:	53                   	push   ebx
c0007848:	e8 5b 09 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c000784d:	83 c4 10             	add    esp,0x10
c0007850:	85 c0                	test   eax,eax
c0007852:	74 10                	je     c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007854:	83 ec 0c             	sub    esp,0xc
c0007857:	68 0a 33 02 c0       	push   0xc002330a
c000785c:	e8 93 84 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007861:	83 c4 10             	add    esp,0x10
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007869:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000786d:	55                   	push   ebp
c000786e:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007872:	57                   	push   edi
c0007873:	6a 00                	push   0x0
c0007875:	68 00 01 00 00       	push   0x100
c000787a:	53                   	push   ebx
c000787b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000787e:	83 c4 20             	add    esp,0x20
c0007881:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007889:	75 4b                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c000788b:	83 ec 0c             	sub    esp,0xc
c000788e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007890:	55                   	push   ebp
c0007891:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007895:	52                   	push   edx
c0007896:	6a 00                	push   0x0
c0007898:	6a 08                	push   0x8
c000789a:	53                   	push   ebx
c000789b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000789e:	83 c4 20             	add    esp,0x20
c00078a1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00078a6:	75 2e                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c00078a8:	50                   	push   eax
c00078a9:	50                   	push   eax
c00078aa:	57                   	push   edi
c00078ab:	56                   	push   esi
c00078ac:	e8 9f 8e ff ff       	call   c0000750 <strcmp>
c00078b1:	83 c4 10             	add    esp,0x10
c00078b4:	85 c0                	test   eax,eax
c00078b6:	75 ac                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c00078b8:	83 ec 0c             	sub    esp,0xc
c00078bb:	53                   	push   ebx
c00078bc:	e8 45 09 00 00       	call   c0008206 <File::close()>
c00078c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	eb 18                	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00078d6:	83 ec 0c             	sub    esp,0xc
c00078d9:	53                   	push   ebx
c00078da:	e8 27 09 00 00       	call   c0008206 <File::close()>
c00078df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078e7:	83 c4 10             	add    esp,0x10
c00078ea:	31 c0                	xor    eax,eax
c00078ec:	31 d2                	xor    edx,edx
c00078ee:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078f4:	5b                   	pop    ebx
c00078f5:	5e                   	pop    esi
c00078f6:	5f                   	pop    edi
c00078f7:	5d                   	pop    ebp
c00078f8:	c3                   	ret    

c00078f9 <KeDereferenceSymlink(char const*, char*)>:
c00078f9:	55                   	push   ebp
c00078fa:	57                   	push   edi
c00078fb:	56                   	push   esi
c00078fc:	53                   	push   ebx
c00078fd:	83 ec 48             	sub    esp,0x48
c0007900:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007904:	56                   	push   esi
c0007905:	e8 85 fe ff ff       	call   c000778f <KiIsSymlinkRegistered(char const*)>
c000790a:	83 c4 10             	add    esp,0x10
c000790d:	89 c7                	mov    edi,eax
c000790f:	89 d0                	mov    eax,edx
c0007911:	09 f8                	or     eax,edi
c0007913:	75 07                	jne    c000791c <KeDereferenceSymlink(char const*, char*)+0x23>
c0007915:	31 c0                	xor    eax,eax
c0007917:	e9 7c 01 00 00       	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000791c:	83 ec 0c             	sub    esp,0xc
c000791f:	89 d5                	mov    ebp,edx
c0007921:	68 14 01 00 00       	push   0x114
c0007926:	e8 6c 7f 00 00       	call   c000f897 <malloc>
c000792b:	83 c4 0c             	add    esp,0xc
c000792e:	89 c3                	mov    ebx,eax
c0007930:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0007936:	56                   	push   esi
c0007937:	50                   	push   eax
c0007938:	e8 4d 08 00 00       	call   c000818a <File::File(char const*, Process*)>
c000793d:	83 c4 10             	add    esp,0x10
c0007940:	85 db                	test   ebx,ebx
c0007942:	0f 84 32 01 00 00    	je     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007948:	56                   	push   esi
c0007949:	56                   	push   esi
c000794a:	6a 01                	push   0x1
c000794c:	53                   	push   ebx
c000794d:	e8 56 08 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007952:	83 c4 10             	add    esp,0x10
c0007955:	85 c0                	test   eax,eax
c0007957:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007959:	74 09                	je     c0007964 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000795b:	83 ec 0c             	sub    esp,0xc
c000795e:	53                   	push   ebx
c000795f:	e9 10 01 00 00       	jmp    c0007a74 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0007964:	83 ec 0c             	sub    esp,0xc
c0007967:	8d 74 24 18          	lea    esi,[esp+0x18]
c000796b:	56                   	push   esi
c000796c:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007970:	52                   	push   edx
c0007971:	6a 00                	push   0x0
c0007973:	6a 08                	push   0x8
c0007975:	53                   	push   ebx
c0007976:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 e2 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007984:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007989:	0f 85 d7 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007994:	56                   	push   esi
c0007995:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007999:	52                   	push   edx
c000799a:	6a 00                	push   0x0
c000799c:	6a 08                	push   0x8
c000799e:	53                   	push   ebx
c000799f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079a2:	83 c4 20             	add    esp,0x20
c00079a5:	85 c0                	test   eax,eax
c00079a7:	0f 85 b9 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ad:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00079b2:	0f 85 ae 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b8:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079bc:	0f 85 53 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079c2:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079c6:	0f 85 49 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079d4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079dc:	51                   	push   ecx
c00079dd:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079e1:	50                   	push   eax
c00079e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079e6:	50                   	push   eax
c00079e7:	53                   	push   ebx
c00079e8:	e8 bd 0a 00 00       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00079ed:	83 c4 10             	add    esp,0x10
c00079f0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079f5:	75 6f                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f7:	31 c9                	xor    ecx,ecx
c00079f9:	bf 0f 00 00 00       	mov    edi,0xf
c00079fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a06:	39 c7                	cmp    edi,eax
c0007a08:	89 cf                	mov    edi,ecx
c0007a0a:	19 d7                	sbb    edi,edx
c0007a0c:	73 58                	jae    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a0e:	83 c0 f0             	add    eax,0xfffffff0
c0007a11:	bf ff 00 00 00       	mov    edi,0xff
c0007a16:	83 d2 ff             	adc    edx,0xffffffff
c0007a19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a1d:	39 c7                	cmp    edi,eax
c0007a1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a23:	19 d1                	sbb    ecx,edx
c0007a25:	72 53                	jb     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a27:	40                   	inc    eax
c0007a28:	52                   	push   edx
c0007a29:	50                   	push   eax
c0007a2a:	6a 00                	push   0x0
c0007a2c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a30:	e8 bb 8a ff ff       	call   c00004f0 <memset>
c0007a35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a37:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a3a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a46:	53                   	push   ebx
c0007a47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a4a:	83 c4 20             	add    esp,0x20
c0007a4d:	85 c0                	test   eax,eax
c0007a4f:	75 15                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a55:	89 c7                	mov    edi,eax
c0007a57:	c1 ff 1f             	sar    edi,0x1f
c0007a5a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a5e:	75 06                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a60:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a64:	74 19                	je     c0007a7f <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a66:	83 ec 0c             	sub    esp,0xc
c0007a69:	53                   	push   ebx
c0007a6a:	e8 97 07 00 00       	call   c0008206 <File::close()>
c0007a6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a77:	83 c4 10             	add    esp,0x10
c0007a7a:	83 c8 ff             	or     eax,0xffffffff
c0007a7d:	eb 19                	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a7f:	83 ec 0c             	sub    esp,0xc
c0007a82:	53                   	push   ebx
c0007a83:	e8 7e 07 00 00       	call   c0008206 <File::close()>
c0007a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a90:	83 c4 10             	add    esp,0x10
c0007a93:	b8 01 00 00 00       	mov    eax,0x1
c0007a98:	83 c4 3c             	add    esp,0x3c
c0007a9b:	5b                   	pop    ebx
c0007a9c:	5e                   	pop    esi
c0007a9d:	5f                   	pop    edi
c0007a9e:	5d                   	pop    ebp
c0007a9f:	c3                   	ret    

c0007aa0 <KeCreateSymlink(char const*, char const*)>:
c0007aa0:	55                   	push   ebp
c0007aa1:	57                   	push   edi
c0007aa2:	56                   	push   esi
c0007aa3:	53                   	push   ebx
c0007aa4:	83 ec 38             	sub    esp,0x38
c0007aa7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007aab:	68 14 01 00 00       	push   0x114
c0007ab0:	e8 e2 7d 00 00       	call   c000f897 <malloc>
c0007ab5:	6a 00                	push   0x0
c0007ab7:	89 c3                	mov    ebx,eax
c0007ab9:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0007abf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007ac3:	50                   	push   eax
c0007ac4:	e8 c3 05 00 00       	call   c000808c <File::File(char const*, Process*, bool)>
c0007ac9:	83 c4 20             	add    esp,0x20
c0007acc:	b8 01 00 00 00       	mov    eax,0x1
c0007ad1:	85 db                	test   ebx,ebx
c0007ad3:	0f 84 fb 00 00 00    	je     c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007ad9:	52                   	push   edx
c0007ada:	52                   	push   edx
c0007adb:	6a 12                	push   0x12
c0007add:	53                   	push   ebx
c0007ade:	e8 c5 06 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007ae3:	83 c4 10             	add    esp,0x10
c0007ae6:	85 c0                	test   eax,eax
c0007ae8:	74 0b                	je     c0007af5 <KeCreateSymlink(char const*, char const*)+0x55>
c0007aea:	83 ec 0c             	sub    esp,0xc
c0007aed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aef:	53                   	push   ebx
c0007af0:	e9 d4 00 00 00       	jmp    c0007bc9 <KeCreateSymlink(char const*, char const*)+0x129>
c0007af5:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007af9:	be 25 33 02 c0       	mov    esi,0xc0023325
c0007afe:	b9 09 00 00 00       	mov    ecx,0x9
c0007b03:	fc                   	cld    
c0007b04:	83 ec 0c             	sub    esp,0xc
c0007b07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007b09:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007b0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0f:	56                   	push   esi
c0007b10:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007b14:	52                   	push   edx
c0007b15:	6a 00                	push   0x0
c0007b17:	6a 08                	push   0x8
c0007b19:	53                   	push   ebx
c0007b1a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b1d:	83 c4 20             	add    esp,0x20
c0007b20:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b25:	0f 85 90 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b2b:	85 c0                	test   eax,eax
c0007b2d:	0f 85 88 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b33:	e8 05 fa ff ff       	call   c000753d <KiCreateSymlinkID()>
c0007b38:	83 ec 0c             	sub    esp,0xc
c0007b3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b3f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b45:	56                   	push   esi
c0007b46:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b4a:	52                   	push   edx
c0007b4b:	6a 00                	push   0x0
c0007b4d:	6a 08                	push   0x8
c0007b4f:	53                   	push   ebx
c0007b50:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b53:	83 c4 20             	add    esp,0x20
c0007b56:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b5b:	75 5e                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b5d:	85 c0                	test   eax,eax
c0007b5f:	75 5a                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b61:	83 ec 0c             	sub    esp,0xc
c0007b64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b66:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b69:	55                   	push   ebp
c0007b6a:	e8 01 8a ff ff       	call   c0000570 <strlen>
c0007b6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b72:	31 d2                	xor    edx,edx
c0007b74:	55                   	push   ebp
c0007b75:	52                   	push   edx
c0007b76:	50                   	push   eax
c0007b77:	53                   	push   ebx
c0007b78:	ff d7                	call   edi
c0007b7a:	83 c4 14             	add    esp,0x14
c0007b7d:	89 c6                	mov    esi,eax
c0007b7f:	55                   	push   ebp
c0007b80:	e8 eb 89 ff ff       	call   c0000570 <strlen>
c0007b85:	83 c4 10             	add    esp,0x10
c0007b88:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b8c:	75 2d                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b8e:	85 f6                	test   esi,esi
c0007b90:	75 29                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b92:	50                   	push   eax
c0007b93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b9b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b9f:	e8 06 fa ff ff       	call   c00075aa <KeRegisterSymlink(char const*, unsigned long long)>
c0007ba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ba7:	e8 5a 06 00 00       	call   c0008206 <File::close()>
c0007bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb4:	83 c4 10             	add    esp,0x10
c0007bb7:	31 c0                	xor    eax,eax
c0007bb9:	eb 19                	jmp    c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007bbb:	83 ec 0c             	sub    esp,0xc
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 42 06 00 00       	call   c0008206 <File::close()>
c0007bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bcc:	83 c4 10             	add    esp,0x10
c0007bcf:	b8 01 00 00 00       	mov    eax,0x1
c0007bd4:	83 c4 2c             	add    esp,0x2c
c0007bd7:	5b                   	pop    ebx
c0007bd8:	5e                   	pop    esi
c0007bd9:	5f                   	pop    edi
c0007bda:	5d                   	pop    ebp
c0007bdb:	c3                   	ret    

c0007bdc <File::read(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::read(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::read(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <File::write(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <File::write(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <File::write(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::read(unsigned long long, void*, int*)>:
c0007c8c:	53                   	push   ebx
c0007c8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c95:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c9c:	83 f8 19             	cmp    eax,0x19
c0007c9f:	77 35                	ja     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca1:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007ca8:	85 c0                	test   eax,eax
c0007caa:	74 2a                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007cb2:	85 c0                	test   eax,eax
c0007cb4:	74 20                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007cba:	74 21                	je     c0007cdd <Directory::read(unsigned long long, void*, int*)+0x51>
c0007cbc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007cbe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cc2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ccc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cd0:	5b                   	pop    ebx
c0007cd1:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cd4:	ff e0                	jmp    eax
c0007cd6:	b8 0b 00 00 00       	mov    eax,0xb
c0007cdb:	eb 05                	jmp    c0007ce2 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cdd:	b8 05 00 00 00       	mov    eax,0x5
c0007ce2:	5b                   	pop    ebx
c0007ce3:	c3                   	ret    

c0007ce4 <Directory::write(unsigned long long, void*, int*)>:
c0007ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ce8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cef:	b8 0b 00 00 00       	mov    eax,0xb
c0007cf4:	83 fa 19             	cmp    edx,0x19
c0007cf7:	77 18                	ja     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cf9:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0007d00:	85 d2                	test   edx,edx
c0007d02:	74 0d                	je     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007d04:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007d0b:	19 c0                	sbb    eax,eax
c0007d0d:	83 e0 0a             	and    eax,0xa
c0007d10:	40                   	inc    eax
c0007d11:	c3                   	ret    

c0007d12 <File::isAtty()>:
c0007d12:	31 c0                	xor    eax,eax
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <Directory::isAtty()>:
c0007d16:	31 c0                	xor    eax,eax
c0007d18:	c3                   	ret    
c0007d19:	90                   	nop

c0007d1a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d1a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d1f:	c3                   	ret    

c0007d20 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d20:	b8 0a 00 00 00       	mov    eax,0xa
c0007d25:	c3                   	ret    

c0007d26 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d26:	31 c0                	xor    eax,eax
c0007d28:	31 d2                	xor    edx,edx
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <File::~File()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	ba fc 33 02 c0       	mov    edx,0xc00233fc
c0007d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d38:	89 10                	mov    DWORD PTR [eax],edx
c0007d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d3e:	83 ec 0c             	sub    esp,0xc
c0007d41:	50                   	push   eax
c0007d42:	e8 73 b3 00 00       	call   c00130ba <UnixFile::~UnixFile()>
c0007d47:	83 c4 10             	add    esp,0x10
c0007d4a:	90                   	nop
c0007d4b:	83 c4 0c             	add    esp,0xc
c0007d4e:	c3                   	ret    
c0007d4f:	90                   	nop

c0007d50 <File::~File()>:
c0007d50:	83 ec 0c             	sub    esp,0xc
c0007d53:	83 ec 0c             	sub    esp,0xc
c0007d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d5a:	e8 cd ff ff ff       	call   c0007d2c <File::~File()>
c0007d5f:	83 c4 10             	add    esp,0x10
c0007d62:	83 ec 08             	sub    esp,0x8
c0007d65:	68 14 01 00 00       	push   0x114
c0007d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d6e:	e8 3d 56 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0007d73:	83 c4 10             	add    esp,0x10
c0007d76:	83 c4 0c             	add    esp,0xc
c0007d79:	c3                   	ret    

c0007d7a <Directory::~Directory()>:
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	ba 18 34 02 c0       	mov    edx,0xc0023418
c0007d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d86:	89 10                	mov    DWORD PTR [eax],edx
c0007d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	50                   	push   eax
c0007d90:	e8 25 b3 00 00       	call   c00130ba <UnixFile::~UnixFile()>
c0007d95:	83 c4 10             	add    esp,0x10
c0007d98:	90                   	nop
c0007d99:	83 c4 0c             	add    esp,0xc
c0007d9c:	c3                   	ret    
c0007d9d:	90                   	nop

c0007d9e <Directory::~Directory()>:
c0007d9e:	83 ec 0c             	sub    esp,0xc
c0007da1:	83 ec 0c             	sub    esp,0xc
c0007da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da8:	e8 cd ff ff ff       	call   c0007d7a <Directory::~Directory()>
c0007dad:	83 c4 10             	add    esp,0x10
c0007db0:	83 ec 08             	sub    esp,0x8
c0007db3:	68 14 01 00 00       	push   0x114
c0007db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dbc:	e8 ef 55 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	83 c4 0c             	add    esp,0xc
c0007dc7:	c3                   	ret    

c0007dc8 <Filesystem::Filesystem()>:
c0007dc8:	ba 90 33 02 c0       	mov    edx,0xc0023390
c0007dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dd1:	89 10                	mov    DWORD PTR [eax],edx
c0007dd3:	8b 15 04 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b304
c0007dd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007de4:	a3 04 b3 02 c0       	mov    ds:0xc002b304,eax
c0007de9:	90                   	nop
c0007dea:	c3                   	ret    
c0007deb:	90                   	nop

c0007dec <Filesystem::~Filesystem()>:
c0007dec:	ba 90 33 02 c0       	mov    edx,0xc0023390
c0007df1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007df5:	89 10                	mov    DWORD PTR [eax],edx
c0007df7:	90                   	nop
c0007df8:	c3                   	ret    
c0007df9:	90                   	nop

c0007dfa <Filesystem::~Filesystem()>:
c0007dfa:	83 ec 0c             	sub    esp,0xc
c0007dfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007e01:	e8 e6 ff ff ff       	call   c0007dec <Filesystem::~Filesystem()>
c0007e06:	83 c4 04             	add    esp,0x4
c0007e09:	83 ec 08             	sub    esp,0x8
c0007e0c:	6a 08                	push   0x8
c0007e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e12:	e8 99 55 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0007e17:	83 c4 10             	add    esp,0x10
c0007e1a:	83 c4 0c             	add    esp,0xc
c0007e1d:	c3                   	ret    

c0007e1e <Fs::getcwd(Process*, char*, int)>:
c0007e1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e22:	31 c0                	xor    eax,eax
c0007e24:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e27:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e2b:	7d 15                	jge    c0007e42 <Fs::getcwd(Process*, char*, int)+0x24>
c0007e2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e31:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e38:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e3b:	84 c9                	test   cl,cl
c0007e3d:	74 06                	je     c0007e45 <Fs::getcwd(Process*, char*, int)+0x27>
c0007e3f:	40                   	inc    eax
c0007e40:	eb e2                	jmp    c0007e24 <Fs::getcwd(Process*, char*, int)+0x6>
c0007e42:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e45:	31 c0                	xor    eax,eax
c0007e47:	c3                   	ret    

c0007e48 <Fs::initVFS()>:
c0007e48:	83 ec 18             	sub    esp,0x18
c0007e4b:	6a 08                	push   0x8
c0007e4d:	e8 45 7a 00 00       	call   c000f897 <malloc>
c0007e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e55:	e8 b2 46 01 00       	call   c001c50c <FAT::FAT()>
c0007e5a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e61:	e8 31 7a 00 00       	call   c000f897 <malloc>
c0007e66:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e69:	e8 ca 55 01 00       	call   c001d438 <ISO9660::ISO9660()>
c0007e6e:	83 c4 1c             	add    esp,0x1c
c0007e71:	c3                   	ret    

c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e72:	55                   	push   ebp
c0007e73:	57                   	push   edi
c0007e74:	56                   	push   esi
c0007e75:	53                   	push   ebx
c0007e76:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e7c:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e83:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e8a:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e92:	68 00 04 00 00       	push   0x400
c0007e97:	6a 00                	push   0x0
c0007e99:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e9d:	57                   	push   edi
c0007e9e:	e8 4d 86 ff ff       	call   c00004f0 <memset>
c0007ea3:	83 c4 10             	add    esp,0x10
c0007ea6:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007eaa:	75 0b                	jne    c0007eb7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007eac:	50                   	push   eax
c0007ead:	50                   	push   eax
c0007eae:	55                   	push   ebp
c0007eaf:	57                   	push   edi
c0007eb0:	e8 8b 87 ff ff       	call   c0000640 <strcpy>
c0007eb5:	eb 51                	jmp    c0007f08 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007eb7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007ebb:	83 f8 5c             	cmp    eax,0x5c
c0007ebe:	74 05                	je     c0007ec5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007ec0:	83 f8 2f             	cmp    eax,0x2f
c0007ec3:	75 1e                	jne    c0007ee3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007ec5:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0007ece:	3c 60                	cmp    al,0x60
c0007ed0:	7e 03                	jle    c0007ed5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007ed2:	83 e8 20             	sub    eax,0x20
c0007ed5:	88 04 24             	mov    BYTE PTR [esp],al
c0007ed8:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007edf:	50                   	push   eax
c0007ee0:	50                   	push   eax
c0007ee1:	eb 1e                	jmp    c0007f01 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007ee3:	50                   	push   eax
c0007ee4:	50                   	push   eax
c0007ee5:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007eec:	57                   	push   edi
c0007eed:	e8 4e 87 ff ff       	call   c0000640 <strcpy>
c0007ef2:	58                   	pop    eax
c0007ef3:	5a                   	pop    edx
c0007ef4:	68 c5 4d 02 c0       	push   0xc0024dc5
c0007ef9:	57                   	push   edi
c0007efa:	e8 41 89 ff ff       	call   c0000840 <strcat>
c0007eff:	59                   	pop    ecx
c0007f00:	58                   	pop    eax
c0007f01:	55                   	push   ebp
c0007f02:	57                   	push   edi
c0007f03:	e8 38 89 ff ff       	call   c0000840 <strcat>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007f0e:	3c 60                	cmp    al,0x60
c0007f10:	7e 03                	jle    c0007f15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007f12:	83 e8 20             	sub    eax,0x20
c0007f15:	88 04 24             	mov    BYTE PTR [esp],al
c0007f18:	88 06                	mov    BYTE PTR [esi],al
c0007f1a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007f21:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007f27:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007f2b:	bf 03 00 00 00       	mov    edi,0x3
c0007f30:	b8 03 00 00 00       	mov    eax,0x3
c0007f35:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007f39:	89 e9                	mov    ecx,ebp
c0007f3b:	85 ed                	test   ebp,ebp
c0007f3d:	0f 84 97 00 00 00    	je     c0007fda <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007f43:	8d 57 01             	lea    edx,[edi+0x1]
c0007f46:	83 fd 5c             	cmp    ebp,0x5c
c0007f49:	74 05                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007f4b:	83 fd 2f             	cmp    ebp,0x2f
c0007f4e:	75 12                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f50:	89 c5                	mov    ebp,eax
c0007f52:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007f57:	74 09                	je     c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f59:	40                   	inc    eax
c0007f5a:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f5e:	89 d7                	mov    edi,edx
c0007f60:	eb d3                	jmp    c0007f35 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f62:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f67:	0f be e9             	movsx  ebp,cl
c0007f6a:	75 5e                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f6c:	83 fd 2e             	cmp    ebp,0x2e
c0007f6f:	75 59                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f71:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f75:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f7a:	74 18                	je     c0007f94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f7c:	83 fd 2e             	cmp    ebp,0x2e
c0007f7f:	74 53                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f81:	89 fa                	mov    edx,edi
c0007f83:	42                   	inc    edx
c0007f84:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f88:	83 f9 2f             	cmp    ecx,0x2f
c0007f8b:	74 f6                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f8d:	83 f9 5c             	cmp    ecx,0x5c
c0007f90:	74 f1                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f92:	eb ca                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f94:	83 fd 2e             	cmp    ebp,0x2e
c0007f97:	74 3b                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f99:	83 f8 03             	cmp    eax,0x3
c0007f9c:	74 c0                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f9e:	42                   	inc    edx
c0007f9f:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007fa3:	83 f9 5c             	cmp    ecx,0x5c
c0007fa6:	74 f6                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fa8:	83 f9 2f             	cmp    ecx,0x2f
c0007fab:	74 f1                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fad:	48                   	dec    eax
c0007fae:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fb2:	75 06                	jne    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fb4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007fba:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fbe:	74 07                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007fc0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fc4:	48                   	dec    eax
c0007fc5:	eb f3                	jmp    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fc7:	40                   	inc    eax
c0007fc8:	eb 94                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fca:	83 fd 5c             	cmp    ebp,0x5c
c0007fcd:	74 8f                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fcf:	83 fd 2f             	cmp    ebp,0x2f
c0007fd2:	74 8a                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fd4:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007fd7:	40                   	inc    eax
c0007fd8:	eb 84                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fda:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	56                   	push   esi
c0007fe2:	e8 89 85 ff ff       	call   c0000570 <strlen>
c0007fe7:	83 c4 10             	add    esp,0x10
c0007fea:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007fef:	74 17                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007ff1:	83 ec 0c             	sub    esp,0xc
c0007ff4:	56                   	push   esi
c0007ff5:	e8 76 85 ff ff       	call   c0000570 <strlen>
c0007ffa:	83 c4 10             	add    esp,0x10
c0007ffd:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0008002:	74 04                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008004:	31 ff                	xor    edi,edi
c0008006:	eb 5c                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008008:	83 ec 0c             	sub    esp,0xc
c000800b:	56                   	push   esi
c000800c:	e8 5f 85 ff ff       	call   c0000570 <strlen>
c0008011:	83 c4 10             	add    esp,0x10
c0008014:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0008019:	74 e9                	je     c0008004 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000801b:	83 ec 0c             	sub    esp,0xc
c000801e:	56                   	push   esi
c000801f:	e8 4c 85 ff ff       	call   c0000570 <strlen>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000802c:	eb b0                	jmp    c0007fde <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000802e:	52                   	push   edx
c000802f:	52                   	push   edx
c0008030:	56                   	push   esi
c0008031:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0008035:	55                   	push   ebp
c0008036:	e8 05 86 ff ff       	call   c0000640 <strcpy>
c000803b:	59                   	pop    ecx
c000803c:	58                   	pop    eax
c000803d:	56                   	push   esi
c000803e:	55                   	push   ebp
c000803f:	e8 b5 f8 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0008044:	83 c4 10             	add    esp,0x10
c0008047:	48                   	dec    eax
c0008048:	75 37                	jne    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000804a:	50                   	push   eax
c000804b:	56                   	push   esi
c000804c:	55                   	push   ebp
c000804d:	68 2e 33 02 c0       	push   0xc002332e
c0008052:	e8 25 ef ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	8d 47 01             	lea    eax,[edi+0x1]
c000805d:	83 ff 14             	cmp    edi,0x14
c0008060:	74 08                	je     c000806a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c0008062:	89 c7                	mov    edi,eax
c0008064:	85 db                	test   ebx,ebx
c0008066:	75 c6                	jne    c000802e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008068:	eb 17                	jmp    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000806a:	83 ec 0c             	sub    esp,0xc
c000806d:	bf 15 00 00 00       	mov    edi,0x15
c0008072:	68 49 33 02 c0       	push   0xc0023349
c0008077:	e8 78 7c 00 00       	call   c000fcf4 <KePanic(char const*)>
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	eb e3                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008081:	81 c4 0c 04 00 00    	add    esp,0x40c
c0008087:	5b                   	pop    ebx
c0008088:	5e                   	pop    esi
c0008089:	5f                   	pop    edi
c000808a:	5d                   	pop    ebp
c000808b:	c3                   	ret    

c000808c <File::File(char const*, Process*, bool)>:
c000808c:	83 ec 1c             	sub    esp,0x1c
c000808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008093:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809b:	83 ec 08             	sub    esp,0x8
c000809e:	6a 00                	push   0x0
c00080a0:	50                   	push   eax
c00080a1:	e8 2e ae 00 00       	call   c0012ed4 <UnixFile::UnixFile(int)>
c00080a6:	83 c4 10             	add    esp,0x10
c00080a9:	ba fc 33 02 c0       	mov    edx,0xc00233fc
c00080ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b2:	89 10                	mov    DWORD PTR [eax],edx
c00080b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b9:	85 c0                	test   eax,eax
c00080bb:	74 0f                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080bd:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00080c2:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c6:	74 04                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080c8:	b0 01                	mov    al,0x1
c00080ca:	eb 02                	jmp    c00080ce <File::File(char const*, Process*, bool)+0x42>
c00080cc:	b0 00                	mov    al,0x0
c00080ce:	0f b6 c0             	movzx  eax,al
c00080d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d5:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080df:	83 c2 0d             	add    edx,0xd
c00080e2:	50                   	push   eax
c00080e3:	51                   	push   ecx
c00080e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e8:	52                   	push   edx
c00080e9:	e8 84 fd ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ee:	83 c4 10             	add    esp,0x10
c00080f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fc:	83 c2 0d             	add    edx,0xd
c00080ff:	83 ec 04             	sub    esp,0x4
c0008102:	50                   	push   eax
c0008103:	52                   	push   edx
c0008104:	68 6f 33 02 c0       	push   0xc002336f
c0008109:	e8 6e ee ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000810e:	83 c4 10             	add    esp,0x10
c0008111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008115:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008118:	83 e8 41             	sub    eax,0x41
c000811b:	88 c2                	mov    dl,al
c000811d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008121:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000812b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008133:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008139:	0f b6 c0             	movzx  eax,al
c000813c:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008143:	85 c0                	test   eax,eax
c0008145:	74 3e                	je     c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000814b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008151:	0f b6 c0             	movzx  eax,al
c0008154:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c000815b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008161:	85 c0                	test   eax,eax
c0008163:	75 20                	jne    c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008169:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816f:	0f b6 c0             	movzx  eax,al
c0008172:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008179:	83 ec 0c             	sub    esp,0xc
c000817c:	50                   	push   eax
c000817d:	e8 64 28 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c0008182:	83 c4 10             	add    esp,0x10
c0008185:	90                   	nop
c0008186:	83 c4 1c             	add    esp,0x1c
c0008189:	c3                   	ret    

c000818a <File::File(char const*, Process*)>:
c000818a:	83 ec 0c             	sub    esp,0xc
c000818d:	6a 01                	push   0x1
c000818f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000819b:	e8 ec fe ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00081a0:	83 c4 10             	add    esp,0x10
c00081a3:	90                   	nop
c00081a4:	83 c4 0c             	add    esp,0xc
c00081a7:	c3                   	ret    

c00081a8 <File::open(FileOpenMode)>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081bc:	83 fa 19             	cmp    edx,0x19
c00081bf:	77 40                	ja     c0008201 <File::open(FileOpenMode)+0x59>
c00081c1:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00081c8:	85 d2                	test   edx,edx
c00081ca:	74 35                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081cc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d2:	85 d2                	test   edx,edx
c00081d4:	74 2b                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081d6:	b8 06 00 00 00       	mov    eax,0x6
c00081db:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081df:	75 20                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081ed:	51                   	push   ecx
c00081ee:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081f1:	51                   	push   ecx
c00081f2:	52                   	push   edx
c00081f3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f6:	83 c4 10             	add    esp,0x10
c00081f9:	85 c0                	test   eax,eax
c00081fb:	75 04                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081fd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008201:	83 c4 08             	add    esp,0x8
c0008204:	5b                   	pop    ebx
c0008205:	c3                   	ret    

c0008206 <File::close()>:
c0008206:	53                   	push   ebx
c0008207:	b8 0b 00 00 00       	mov    eax,0xb
c000820c:	83 ec 08             	sub    esp,0x8
c000820f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008213:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000821a:	83 f9 19             	cmp    ecx,0x19
c000821d:	77 41                	ja     c0008260 <File::close()+0x5a>
c000821f:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c0008226:	85 db                	test   ebx,ebx
c0008228:	74 36                	je     c0008260 <File::close()+0x5a>
c000822a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008231:	74 2d                	je     c0008260 <File::close()+0x5a>
c0008233:	b8 05 00 00 00       	mov    eax,0x5
c0008238:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000823c:	74 22                	je     c0008260 <File::close()+0x5a>
c000823e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008242:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c0008249:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824f:	53                   	push   ebx
c0008250:	53                   	push   ebx
c0008251:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008253:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008259:	50                   	push   eax
c000825a:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825d:	83 c4 10             	add    esp,0x10
c0008260:	83 c4 08             	add    esp,0x8
c0008263:	5b                   	pop    ebx
c0008264:	c3                   	ret    
c0008265:	90                   	nop

c0008266 <File::seek(unsigned long long)>:
c0008266:	56                   	push   esi
c0008267:	53                   	push   ebx
c0008268:	b8 0b 00 00 00       	mov    eax,0xb
c000826d:	51                   	push   ecx
c000826e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008272:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008276:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008281:	83 fa 19             	cmp    edx,0x19
c0008284:	77 31                	ja     c00082b7 <File::seek(unsigned long long)+0x51>
c0008286:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000828d:	85 d2                	test   edx,edx
c000828f:	74 26                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c0008291:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008297:	85 d2                	test   edx,edx
c0008299:	74 1c                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c000829b:	b8 05 00 00 00       	mov    eax,0x5
c00082a0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a4:	74 11                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c00082a6:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a8:	53                   	push   ebx
c00082a9:	51                   	push   ecx
c00082aa:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082b0:	52                   	push   edx
c00082b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b4:	83 c4 10             	add    esp,0x10
c00082b7:	5a                   	pop    edx
c00082b8:	5b                   	pop    ebx
c00082b9:	5e                   	pop    esi
c00082ba:	c3                   	ret    
c00082bb:	90                   	nop

c00082bc <File::truncate(unsigned long long)>:
c00082bc:	56                   	push   esi
c00082bd:	53                   	push   ebx
c00082be:	b8 0b 00 00 00       	mov    eax,0xb
c00082c3:	51                   	push   ecx
c00082c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082cc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082d7:	83 fa 19             	cmp    edx,0x19
c00082da:	77 31                	ja     c000830d <File::truncate(unsigned long long)+0x51>
c00082dc:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 26                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082e7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082ed:	85 d2                	test   edx,edx
c00082ef:	74 1c                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082f1:	b8 05 00 00 00       	mov    eax,0x5
c00082f6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082fa:	74 11                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fe:	53                   	push   ebx
c00082ff:	51                   	push   ecx
c0008300:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008306:	52                   	push   edx
c0008307:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000830a:	83 c4 10             	add    esp,0x10
c000830d:	5a                   	pop    edx
c000830e:	5b                   	pop    ebx
c000830f:	5e                   	pop    esi
c0008310:	c3                   	ret    
c0008311:	90                   	nop

c0008312 <File::tell(unsigned long long*)>:
c0008312:	83 ec 0c             	sub    esp,0xc
c0008315:	b8 0b 00 00 00       	mov    eax,0xb
c000831a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008325:	83 fa 19             	cmp    edx,0x19
c0008328:	77 34                	ja     c000835e <File::tell(unsigned long long*)+0x4c>
c000832a:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008331:	85 d2                	test   edx,edx
c0008333:	74 29                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c0008335:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000833b:	85 d2                	test   edx,edx
c000833d:	74 1f                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000833f:	b8 05 00 00 00       	mov    eax,0x5
c0008344:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008348:	74 14                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000834a:	50                   	push   eax
c000834b:	8b 02                	mov    eax,DWORD PTR [edx]
c000834d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008351:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008357:	52                   	push   edx
c0008358:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000835b:	83 c4 10             	add    esp,0x10
c000835e:	83 c4 0c             	add    esp,0xc
c0008361:	c3                   	ret    

c0008362 <File::rewind()>:
c0008362:	83 ec 10             	sub    esp,0x10
c0008365:	6a 00                	push   0x0
c0008367:	6a 00                	push   0x0
c0008369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836d:	e8 f4 fe ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0008372:	83 c4 1c             	add    esp,0x1c
c0008375:	c3                   	ret    

c0008376 <File::unlink()>:
c0008376:	83 ec 0c             	sub    esp,0xc
c0008379:	b8 0b 00 00 00       	mov    eax,0xb
c000837e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008382:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008389:	83 f9 19             	cmp    ecx,0x19
c000838c:	77 2f                	ja     c00083bd <File::unlink()+0x47>
c000838e:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008395:	85 c9                	test   ecx,ecx
c0008397:	74 24                	je     c00083bd <File::unlink()+0x47>
c0008399:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839f:	85 c9                	test   ecx,ecx
c00083a1:	74 1a                	je     c00083bd <File::unlink()+0x47>
c00083a3:	b8 06 00 00 00       	mov    eax,0x6
c00083a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083ac:	75 0f                	jne    c00083bd <File::unlink()+0x47>
c00083ae:	83 c2 0d             	add    edx,0xd
c00083b1:	50                   	push   eax
c00083b2:	50                   	push   eax
c00083b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b5:	52                   	push   edx
c00083b6:	51                   	push   ecx
c00083b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083ba:	83 c4 10             	add    esp,0x10
c00083bd:	83 c4 0c             	add    esp,0xc
c00083c0:	c3                   	ret    
c00083c1:	90                   	nop

c00083c2 <File::rename(char const*)>:
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	b8 0b 00 00 00       	mov    eax,0xb
c00083ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d5:	83 f9 19             	cmp    ecx,0x19
c00083d8:	77 32                	ja     c000840c <File::rename(char const*)+0x4a>
c00083da:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00083e1:	85 c9                	test   ecx,ecx
c00083e3:	74 27                	je     c000840c <File::rename(char const*)+0x4a>
c00083e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083eb:	85 c9                	test   ecx,ecx
c00083ed:	74 1d                	je     c000840c <File::rename(char const*)+0x4a>
c00083ef:	b8 06 00 00 00       	mov    eax,0x6
c00083f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f8:	75 12                	jne    c000840c <File::rename(char const*)+0x4a>
c00083fa:	83 c2 0d             	add    edx,0xd
c00083fd:	50                   	push   eax
c00083fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008404:	52                   	push   edx
c0008405:	51                   	push   ecx
c0008406:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008409:	83 c4 10             	add    esp,0x10
c000840c:	83 c4 0c             	add    esp,0xc
c000840f:	c3                   	ret    

c0008410 <File::chfatattr(unsigned char, unsigned char)>:
c0008410:	57                   	push   edi
c0008411:	b8 0b 00 00 00       	mov    eax,0xb
c0008416:	56                   	push   esi
c0008417:	53                   	push   ebx
c0008418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008420:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008427:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000842b:	83 f9 19             	cmp    ecx,0x19
c000842e:	77 37                	ja     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008430:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008437:	85 c9                	test   ecx,ecx
c0008439:	74 2c                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000843b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008441:	85 c9                	test   ecx,ecx
c0008443:	74 22                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008445:	b8 06 00 00 00       	mov    eax,0x6
c000844a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000844e:	75 17                	jne    c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	89 f0                	mov    eax,esi
c0008454:	83 c2 0d             	add    edx,0xd
c0008457:	0f b6 f0             	movzx  esi,al
c000845a:	0f b6 db             	movzx  ebx,bl
c000845d:	56                   	push   esi
c000845e:	53                   	push   ebx
c000845f:	52                   	push   edx
c0008460:	51                   	push   ecx
c0008461:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008464:	83 c4 10             	add    esp,0x10
c0008467:	5b                   	pop    ebx
c0008468:	5e                   	pop    esi
c0008469:	5f                   	pop    edi
c000846a:	c3                   	ret    
c000846b:	90                   	nop

c000846c <File::exists()>:
c000846c:	83 ec 0c             	sub    esp,0xc
c000846f:	31 c0                	xor    eax,eax
c0008471:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008475:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847c:	83 f9 19             	cmp    ecx,0x19
c000847f:	77 24                	ja     c00084a5 <File::exists()+0x39>
c0008481:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008488:	85 c9                	test   ecx,ecx
c000848a:	74 19                	je     c00084a5 <File::exists()+0x39>
c000848c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008492:	85 c9                	test   ecx,ecx
c0008494:	74 0f                	je     c00084a5 <File::exists()+0x39>
c0008496:	83 c2 0d             	add    edx,0xd
c0008499:	50                   	push   eax
c000849a:	50                   	push   eax
c000849b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849d:	52                   	push   edx
c000849e:	51                   	push   ecx
c000849f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a2:	83 c4 10             	add    esp,0x10
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <File::stat(unsigned long long*, bool*)>:
c00084aa:	56                   	push   esi
c00084ab:	53                   	push   ebx
c00084ac:	50                   	push   eax
c00084ad:	b8 0b 00 00 00       	mov    eax,0xb
c00084b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084c5:	83 f9 19             	cmp    ecx,0x19
c00084c8:	77 3d                	ja     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084ca:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00084d1:	85 c9                	test   ecx,ecx
c00084d3:	74 32                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084db:	85 c9                	test   ecx,ecx
c00084dd:	74 28                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e5:	74 13                	je     c00084fa <File::stat(unsigned long long*, bool*)+0x50>
c00084e7:	83 ec 04             	sub    esp,0x4
c00084ea:	56                   	push   esi
c00084eb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084f1:	51                   	push   ecx
c00084f2:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f8:	eb 0a                	jmp    c0008504 <File::stat(unsigned long long*, bool*)+0x5a>
c00084fa:	53                   	push   ebx
c00084fb:	83 c2 0d             	add    edx,0xd
c00084fe:	56                   	push   esi
c00084ff:	52                   	push   edx
c0008500:	51                   	push   ecx
c0008501:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008504:	83 c4 10             	add    esp,0x10
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	c3                   	ret    

c000850b <Fs::setcwd(Process*, char*)>:
c000850b:	55                   	push   ebp
c000850c:	57                   	push   edi
c000850d:	56                   	push   esi
c000850e:	53                   	push   ebx
c000850f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008515:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851c:	6a 00                	push   0x0
c000851e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008524:	57                   	push   edi
c0008525:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008530:	56                   	push   esi
c0008531:	e8 3c f9 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008536:	89 34 24             	mov    DWORD PTR [esp],esi
c0008539:	e8 32 80 ff ff       	call   c0000570 <strlen>
c000853e:	83 c4 10             	add    esp,0x10
c0008541:	83 f8 02             	cmp    eax,0x2
c0008544:	77 15                	ja     c000855b <Fs::setcwd(Process*, char*)+0x50>
c0008546:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000854b:	83 eb 41             	sub    ebx,0x41
c000854e:	8b 04 9d e0 ba 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4520]
c0008555:	85 c0                	test   eax,eax
c0008557:	75 1c                	jne    c0008575 <Fs::setcwd(Process*, char*)+0x6a>
c0008559:	eb 2f                	jmp    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000855b:	83 ec 0c             	sub    esp,0xc
c000855e:	56                   	push   esi
c000855f:	e8 0c 80 ff ff       	call   c0000570 <strlen>
c0008564:	83 c4 10             	add    esp,0x10
c0008567:	83 f8 03             	cmp    eax,0x3
c000856a:	75 57                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c000856c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008571:	75 50                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c0008573:	eb d1                	jmp    c0008546 <Fs::setcwd(Process*, char*)+0x3b>
c0008575:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857c:	75 0c                	jne    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000857e:	83 ec 0c             	sub    esp,0xc
c0008581:	50                   	push   eax
c0008582:	e8 5f 24 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c0008587:	83 c4 10             	add    esp,0x10
c000858a:	b8 03 00 00 00       	mov    eax,0x3
c000858f:	83 fb 19             	cmp    ebx,0x19
c0008592:	0f 87 c6 00 00 00    	ja     c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008598:	8b 14 9d e0 ba 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4520]
c000859f:	b8 05 00 00 00       	mov    eax,0x5
c00085a4:	85 d2                	test   edx,edx
c00085a6:	0f 84 b2 00 00 00    	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085ac:	b8 06 00 00 00       	mov    eax,0x6
c00085b1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b8:	0f 85 92 00 00 00    	jne    c0008650 <Fs::setcwd(Process*, char*)+0x145>
c00085be:	e9 9b 00 00 00       	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085c3:	83 ec 0c             	sub    esp,0xc
c00085c6:	68 14 01 00 00       	push   0x114
c00085cb:	e8 c7 72 00 00       	call   c000f897 <malloc>
c00085d0:	83 c4 0c             	add    esp,0xc
c00085d3:	89 c3                	mov    ebx,eax
c00085d5:	55                   	push   ebp
c00085d6:	56                   	push   esi
c00085d7:	50                   	push   eax
c00085d8:	e8 ad fb ff ff       	call   c000818a <File::File(char const*, Process*)>
c00085dd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e2:	83 c4 0c             	add    esp,0xc
c00085e5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e9:	50                   	push   eax
c00085ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ee:	50                   	push   eax
c00085ef:	53                   	push   ebx
c00085f0:	e8 b5 fe ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	83 f8 02             	cmp    eax,0x2
c00085fb:	74 27                	je     c0008624 <Fs::setcwd(Process*, char*)+0x119>
c00085fd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008602:	75 1c                	jne    c0008620 <Fs::setcwd(Process*, char*)+0x115>
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	85 db                	test   ebx,ebx
c000860b:	74 51                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008612:	53                   	push   ebx
c0008613:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008616:	83 c4 10             	add    esp,0x10
c0008619:	b8 02 00 00 00       	mov    eax,0x2
c000861e:	eb 3e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008620:	85 c0                	test   eax,eax
c0008622:	74 1c                	je     c0008640 <Fs::setcwd(Process*, char*)+0x135>
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	85 db                	test   ebx,ebx
c000862b:	74 31                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008632:	53                   	push   ebx
c0008633:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008636:	83 c4 10             	add    esp,0x10
c0008639:	b8 01 00 00 00       	mov    eax,0x1
c000863e:	eb 1e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008640:	85 db                	test   ebx,ebx
c0008642:	74 0c                	je     c0008650 <Fs::setcwd(Process*, char*)+0x145>
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008649:	53                   	push   ebx
c000864a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864d:	83 c4 10             	add    esp,0x10
c0008650:	50                   	push   eax
c0008651:	50                   	push   eax
c0008652:	56                   	push   esi
c0008653:	57                   	push   edi
c0008654:	e8 e7 7f ff ff       	call   c0000640 <strcpy>
c0008659:	83 c4 10             	add    esp,0x10
c000865c:	31 c0                	xor    eax,eax
c000865e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008664:	5b                   	pop    ebx
c0008665:	5e                   	pop    esi
c0008666:	5f                   	pop    edi
c0008667:	5d                   	pop    ebp
c0008668:	c3                   	ret    
c0008669:	90                   	nop

c000866a <Directory::Directory(char const*, Process*)>:
c000866a:	83 ec 0c             	sub    esp,0xc
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	83 ec 08             	sub    esp,0x8
c0008674:	6a 00                	push   0x0
c0008676:	50                   	push   eax
c0008677:	e8 58 a8 00 00       	call   c0012ed4 <UnixFile::UnixFile(int)>
c000867c:	83 c4 10             	add    esp,0x10
c000867f:	ba 18 34 02 c0       	mov    edx,0xc0023418
c0008684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008688:	89 10                	mov    DWORD PTR [eax],edx
c000868a:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000868f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008693:	0f 95 c0             	setne  al
c0008696:	0f b6 c0             	movzx  eax,al
c0008699:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a7:	83 c2 0d             	add    edx,0xd
c00086aa:	50                   	push   eax
c00086ab:	51                   	push   ecx
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	52                   	push   edx
c00086b1:	e8 bc f7 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b6:	83 c4 10             	add    esp,0x10
c00086b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086c0:	83 e8 41             	sub    eax,0x41
c00086c3:	88 c2                	mov    dl,al
c00086c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086e1:	0f b6 c0             	movzx  eax,al
c00086e4:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086eb:	85 c0                	test   eax,eax
c00086ed:	74 3e                	je     c000872d <Directory::Directory(char const*, Process*)+0xc3>
c00086ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f9:	0f b6 c0             	movzx  eax,al
c00086fc:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008703:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008709:	85 c0                	test   eax,eax
c000870b:	75 20                	jne    c000872d <Directory::Directory(char const*, Process*)+0xc3>
c000870d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008711:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008717:	0f b6 c0             	movzx  eax,al
c000871a:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008721:	83 ec 0c             	sub    esp,0xc
c0008724:	50                   	push   eax
c0008725:	e8 bc 22 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c000872a:	83 c4 10             	add    esp,0x10
c000872d:	90                   	nop
c000872e:	83 c4 0c             	add    esp,0xc
c0008731:	c3                   	ret    

c0008732 <Directory::open()>:
c0008732:	53                   	push   ebx
c0008733:	b8 0b 00 00 00       	mov    eax,0xb
c0008738:	83 ec 08             	sub    esp,0x8
c000873b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008746:	83 fa 19             	cmp    edx,0x19
c0008749:	77 3d                	ja     c0008788 <Directory::open()+0x56>
c000874b:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008752:	85 d2                	test   edx,edx
c0008754:	74 32                	je     c0008788 <Directory::open()+0x56>
c0008756:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875c:	85 d2                	test   edx,edx
c000875e:	74 28                	je     c0008788 <Directory::open()+0x56>
c0008760:	b8 06 00 00 00       	mov    eax,0x6
c0008765:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008769:	75 1d                	jne    c0008788 <Directory::open()+0x56>
c000876b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008771:	50                   	push   eax
c0008772:	8b 02                	mov    eax,DWORD PTR [edx]
c0008774:	51                   	push   ecx
c0008775:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008778:	51                   	push   ecx
c0008779:	52                   	push   edx
c000877a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	75 04                	jne    c0008788 <Directory::open()+0x56>
c0008784:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008788:	83 c4 08             	add    esp,0x8
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <Directory::close()>:
c000878e:	53                   	push   ebx
c000878f:	b8 0b 00 00 00       	mov    eax,0xb
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a2:	83 f9 19             	cmp    ecx,0x19
c00087a5:	77 41                	ja     c00087e8 <Directory::close()+0x5a>
c00087a7:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c00087ae:	85 db                	test   ebx,ebx
c00087b0:	74 36                	je     c00087e8 <Directory::close()+0x5a>
c00087b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b9:	74 2d                	je     c00087e8 <Directory::close()+0x5a>
c00087bb:	b8 05 00 00 00       	mov    eax,0x5
c00087c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c4:	74 22                	je     c00087e8 <Directory::close()+0x5a>
c00087c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087ca:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c00087d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d7:	53                   	push   ebx
c00087d8:	53                   	push   ebx
c00087d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087e1:	50                   	push   eax
c00087e2:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	83 c4 08             	add    esp,0x8
c00087eb:	5b                   	pop    ebx
c00087ec:	c3                   	ret    
c00087ed:	90                   	nop

c00087ee <Directory::unlink()>:
c00087ee:	83 ec 0c             	sub    esp,0xc
c00087f1:	b8 0b 00 00 00       	mov    eax,0xb
c00087f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008801:	83 f9 19             	cmp    ecx,0x19
c0008804:	77 2f                	ja     c0008835 <Directory::unlink()+0x47>
c0008806:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000880d:	85 c9                	test   ecx,ecx
c000880f:	74 24                	je     c0008835 <Directory::unlink()+0x47>
c0008811:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008817:	85 c9                	test   ecx,ecx
c0008819:	74 1a                	je     c0008835 <Directory::unlink()+0x47>
c000881b:	b8 06 00 00 00       	mov    eax,0x6
c0008820:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008824:	75 0f                	jne    c0008835 <Directory::unlink()+0x47>
c0008826:	83 c2 0d             	add    edx,0xd
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882d:	52                   	push   edx
c000882e:	51                   	push   ecx
c000882f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	83 c4 0c             	add    esp,0xc
c0008838:	c3                   	ret    
c0008839:	90                   	nop

c000883a <Directory::rename(char const*)>:
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	b8 0b 00 00 00       	mov    eax,0xb
c0008842:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008846:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884d:	83 f9 19             	cmp    ecx,0x19
c0008850:	77 32                	ja     c0008884 <Directory::rename(char const*)+0x4a>
c0008852:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008859:	85 c9                	test   ecx,ecx
c000885b:	74 27                	je     c0008884 <Directory::rename(char const*)+0x4a>
c000885d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008863:	85 c9                	test   ecx,ecx
c0008865:	74 1d                	je     c0008884 <Directory::rename(char const*)+0x4a>
c0008867:	b8 06 00 00 00       	mov    eax,0x6
c000886c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008870:	75 12                	jne    c0008884 <Directory::rename(char const*)+0x4a>
c0008872:	83 c2 0d             	add    edx,0xd
c0008875:	50                   	push   eax
c0008876:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008878:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887c:	52                   	push   edx
c000887d:	51                   	push   ecx
c000887e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008881:	83 c4 10             	add    esp,0x10
c0008884:	83 c4 0c             	add    esp,0xc
c0008887:	c3                   	ret    

c0008888 <Directory::exists()>:
c0008888:	83 ec 0c             	sub    esp,0xc
c000888b:	31 c0                	xor    eax,eax
c000888d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008891:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008898:	83 f9 19             	cmp    ecx,0x19
c000889b:	77 24                	ja     c00088c1 <Directory::exists()+0x39>
c000889d:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088a4:	85 c9                	test   ecx,ecx
c00088a6:	74 19                	je     c00088c1 <Directory::exists()+0x39>
c00088a8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ae:	85 c9                	test   ecx,ecx
c00088b0:	74 0f                	je     c00088c1 <Directory::exists()+0x39>
c00088b2:	83 c2 0d             	add    edx,0xd
c00088b5:	50                   	push   eax
c00088b6:	50                   	push   eax
c00088b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b9:	52                   	push   edx
c00088ba:	51                   	push   ecx
c00088bb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088be:	83 c4 10             	add    esp,0x10
c00088c1:	83 c4 0c             	add    esp,0xc
c00088c4:	c3                   	ret    
c00088c5:	90                   	nop

c00088c6 <Directory::read(dirent*)>:
c00088c6:	83 ec 1c             	sub    esp,0x1c
c00088c9:	b8 0b 00 00 00       	mov    eax,0xb
c00088ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d9:	83 f9 19             	cmp    ecx,0x19
c00088dc:	77 30                	ja     c000890e <Directory::read(dirent*)+0x48>
c00088de:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088e5:	85 c9                	test   ecx,ecx
c00088e7:	74 25                	je     c000890e <Directory::read(dirent*)+0x48>
c00088e9:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088f0:	74 1c                	je     c000890e <Directory::read(dirent*)+0x48>
c00088f2:	83 ec 0c             	sub    esp,0xc
c00088f5:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088fb:	51                   	push   ecx
c00088fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008900:	6a 00                	push   0x0
c0008902:	68 10 01 00 00       	push   0x110
c0008907:	52                   	push   edx
c0008908:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000890b:	83 c4 20             	add    esp,0x20
c000890e:	83 c4 1c             	add    esp,0x1c
c0008911:	c3                   	ret    

c0008912 <Directory::create()>:
c0008912:	83 ec 0c             	sub    esp,0xc
c0008915:	b8 0b 00 00 00       	mov    eax,0xb
c000891a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008925:	83 f9 19             	cmp    ecx,0x19
c0008928:	77 2f                	ja     c0008959 <Directory::create()+0x47>
c000892a:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008931:	85 c9                	test   ecx,ecx
c0008933:	74 24                	je     c0008959 <Directory::create()+0x47>
c0008935:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000893b:	85 c9                	test   ecx,ecx
c000893d:	74 1a                	je     c0008959 <Directory::create()+0x47>
c000893f:	b8 06 00 00 00       	mov    eax,0x6
c0008944:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008948:	75 0f                	jne    c0008959 <Directory::create()+0x47>
c000894a:	83 c2 0d             	add    edx,0xd
c000894d:	50                   	push   eax
c000894e:	50                   	push   eax
c000894f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008951:	52                   	push   edx
c0008952:	51                   	push   ecx
c0008953:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008956:	83 c4 10             	add    esp,0x10
c0008959:	83 c4 0c             	add    esp,0xc
c000895c:	c3                   	ret    
c000895d:	90                   	nop

c000895e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895e:	b8 0a 00 00 00       	mov    eax,0xa
c0008963:	c3                   	ret    

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 3e 12 00 00       	call   c0009bb6 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba 34 34 02 c0       	mov    edx,0xc0023434
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba 34 34 02 c0       	mov    edx,0xc0023434
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 9f 0f 00 00       	call   c0009956 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 cd 49 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00089f8:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 f5 e5 00 00       	call   c0017004 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 72 1c 01 00       	call   c001a68d <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 a5 e4 00 00       	jmp    c0016ed0 <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 4c 1c 01 00       	call   c001a68d <HalMakeBeep(int)>
c0008a41:	83 c4 10             	add    esp,0x10
c0008a44:	89 f0                	mov    eax,esi
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 ad e5 00 00       	call   c0017004 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 24 1c 01 00       	jmp    c001a68d <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0008a7a:	e8 d1 e0 00 00       	call   c0016b50 <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 f1 6d 00 00       	call   c000f897 <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 60 34 02 c0       	push   0xc0023460
c0008ab9:	53                   	push   ebx
c0008aba:	e8 cb f6 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 7f 34 02 c0       	push   0xc002347f
c0008ad3:	e8 1c 72 00 00       	call   c000fcf4 <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 c0 f6 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 ac f9 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 95 34 02 c0       	push   0xc0023495
c0008b10:	e8 67 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 6d 6d 00 00       	call   c000f897 <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 a5 34 02 c0       	push   0xc00234a5
c0008b77:	e8 00 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7c f6 ff ff       	call   c0008206 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 ce 6c 00 00       	call   c000f897 <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 ae 34 02 c0       	push   0xc00234ae
c0008bea:	50                   	push   eax
c0008beb:	e8 50 7a ff ff       	call   c0000640 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 2a 79 ff ff       	call   c0000570 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 ae 34 02 c0       	push   0xc00234ae
c0008c6c:	50                   	push   eax
c0008c6d:	e8 ce 7b ff ff       	call   c0000840 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 d7 78 ff ff       	call   c0000570 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 ae 34 02 c0       	push   0xc00234ae
c0008cbb:	50                   	push   eax
c0008cbc:	e8 7f 7b ff ff       	call   c0000840 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 b3 02 c0       	mov    ds:0xc002b324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 b0 34 02 c0       	push   0xc00234b0
c0008cf7:	e8 80 e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 c5 34 02 c0       	push   0xc00234c5
c0008d0d:	e8 6a e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 3c 78 ff ff       	call   c0000570 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 e5 7a ff ff       	call   c0000840 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 fa 77 ff ff       	call   c0000570 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 c9 34 02 c0       	push   0xc00234c9
c0008d9c:	50                   	push   eax
c0008d9d:	e8 9e 7a ff ff       	call   c0000840 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 ce 34 02 c0       	push   0xc00234ce
c0008de3:	e8 94 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 dc 34 02 c0       	push   0xc00234dc
c0008e01:	e8 76 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 e5 34 02 c0       	push   0xc00234e5
c0008e26:	e8 51 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 03 35 02 c0       	push   0xc0023503
c0008e4a:	e8 2d e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 14 35 02 c0       	push   0xc0023514
c0008e63:	e8 14 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 27 35 02 c0       	push   0xc0023527
c0008e9b:	e8 dc e0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 b6 02 c0       	mov    ds:0xc002b661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	01 c0                	add    eax,eax
c0008f57:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008f98:	c6 05 61 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b661,0x0
c0008f9f:	c7 05 64 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 34 35 02 c0       	push   0xc0023534
c0008fba:	e8 45 44 00 00       	call   c000d404 <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 59 35 02 c0       	push   0xc0023559
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 2f 50 00 00       	call   c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 ef 48 00 00       	call   c000d8d6 <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 2d 45 00 00       	call   c000d522 <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 34 35 02 c0       	push   0xc0023534
c0009054:	e8 ab 43 00 00       	call   c000d404 <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 59 35 02 c0       	push   0xc0023559
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 95 4f 00 00       	call   c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 e4 44 00 00       	call   c000d574 <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 84 44 00 00       	call   c000d522 <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 ec 0a 00 00       	call   c0009bb6 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba b8 35 02 c0       	mov    edx,0xc00235b8
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba b8 35 02 c0       	mov    edx,0xc00235b8
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 4f 08 00 00       	call   c0009956 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 7d 42 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009167:	01 c2                	add    edx,eax
c0009169:	89 d0                	mov    eax,edx
c000916b:	01 c0                	add    eax,eax
c000916d:	01 d0                	add    eax,edx
c000916f:	01 c0                	add    eax,eax
c0009171:	01 d0                	add    eax,edx
c0009173:	c1 e0 05             	shl    eax,0x5
c0009176:	01 d0                	add    eax,edx
c0009178:	c1 e0 04             	shl    eax,0x4
c000917b:	89 c2                	mov    edx,eax
c000917d:	c1 fa 1f             	sar    edx,0x1f
c0009180:	01 c1                	add    ecx,eax
c0009182:	11 d3                	adc    ebx,edx
c0009184:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c0009189:	0f b6 c0             	movzx  eax,al
c000918c:	85 c0                	test   eax,eax
c000918e:	74 0c                	je     c000919c <Clock::timeInSecondsLocal()+0x62>
c0009190:	b8 08 07 00 00       	mov    eax,0x708
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	eb 0a                	jmp    c00091a6 <Clock::timeInSecondsLocal()+0x6c>
c000919c:	b8 00 00 00 00       	mov    eax,0x0
c00091a1:	ba 00 00 00 00       	mov    edx,0x0
c00091a6:	01 c8                	add    eax,ecx
c00091a8:	11 da                	adc    edx,ebx
c00091aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091ad:	c9                   	leave  
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091b0:	55                   	push   ebp
c00091b1:	89 e5                	mov    ebp,esp
c00091b3:	56                   	push   esi
c00091b4:	53                   	push   ebx
c00091b5:	83 ec 10             	sub    esp,0x10
c00091b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00091c9:	83 c0 2c             	add    eax,0x2c
c00091cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00091ce:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c00091d3:	0f b6 d0             	movzx  edx,al
c00091d6:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c00091db:	01 c2                	add    edx,eax
c00091dd:	89 d0                	mov    eax,edx
c00091df:	01 c0                	add    eax,eax
c00091e1:	01 d0                	add    eax,edx
c00091e3:	01 c0                	add    eax,eax
c00091e5:	01 d0                	add    eax,edx
c00091e7:	c1 e0 05             	shl    eax,0x5
c00091ea:	01 d0                	add    eax,edx
c00091ec:	c1 e0 04             	shl    eax,0x4
c00091ef:	89 c2                	mov    edx,eax
c00091f1:	c1 fa 1f             	sar    edx,0x1f
c00091f4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091f7:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091fa:	29 c1                	sub    ecx,eax
c00091fc:	19 d3                	sbb    ebx,edx
c00091fe:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c0009203:	0f b6 c0             	movzx  eax,al
c0009206:	85 c0                	test   eax,eax
c0009208:	74 0c                	je     c0009216 <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c000920a:	b8 08 07 00 00       	mov    eax,0x708
c000920f:	ba 00 00 00 00       	mov    edx,0x0
c0009214:	eb 0a                	jmp    c0009220 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c0009216:	b8 00 00 00 00       	mov    eax,0x0
c000921b:	ba 00 00 00 00       	mov    edx,0x0
c0009220:	29 c1                	sub    ecx,eax
c0009222:	19 d3                	sbb    ebx,edx
c0009224:	89 c8                	mov    eax,ecx
c0009226:	89 da                	mov    edx,ebx
c0009228:	83 ec 04             	sub    esp,0x4
c000922b:	52                   	push   edx
c000922c:	50                   	push   eax
c000922d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009230:	ff d6                	call   esi
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009238:	5b                   	pop    ebx
c0009239:	5e                   	pop    esi
c000923a:	5d                   	pop    ebp
c000923b:	c3                   	ret    

c000923c <KeDatetimeToSeconds(datetime_t)>:
c000923c:	55                   	push   ebp
c000923d:	89 e5                	mov    ebp,esp
c000923f:	53                   	push   ebx
c0009240:	83 ec 24             	sub    esp,0x24
c0009243:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009247:	2d 6c 07 00 00       	sub    eax,0x76c
c000924c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009250:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009253:	83 e8 01             	sub    eax,0x1
c0009256:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009259:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009260:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009267:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000926e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009275:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009278:	0f b6 c8             	movzx  ecx,al
c000927b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000927e:	0f b6 d0             	movzx  edx,al
c0009281:	89 d0                	mov    eax,edx
c0009283:	01 c0                	add    eax,eax
c0009285:	01 d0                	add    eax,edx
c0009287:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000928e:	01 d0                	add    eax,edx
c0009290:	c1 e0 02             	shl    eax,0x2
c0009293:	01 c1                	add    ecx,eax
c0009295:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009298:	0f b6 d0             	movzx  edx,al
c000929b:	89 d0                	mov    eax,edx
c000929d:	01 c0                	add    eax,eax
c000929f:	01 d0                	add    eax,edx
c00092a1:	01 c0                	add    eax,eax
c00092a3:	01 d0                	add    eax,edx
c00092a5:	c1 e0 05             	shl    eax,0x5
c00092a8:	01 d0                	add    eax,edx
c00092aa:	c1 e0 04             	shl    eax,0x4
c00092ad:	01 c8                	add    eax,ecx
c00092af:	89 c2                	mov    edx,eax
c00092b1:	c1 fa 1f             	sar    edx,0x1f
c00092b4:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c00092b7:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c00092ba:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c00092bd:	0f b6 c0             	movzx  eax,al
c00092c0:	83 e8 01             	sub    eax,0x1
c00092c3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092c6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092c9:	0f b6 c0             	movzx  eax,al
c00092cc:	8b 04 85 80 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdca80]
c00092d3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092d6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092d9:	0f b6 c0             	movzx  eax,al
c00092dc:	83 f8 01             	cmp    eax,0x1
c00092df:	76 7c                	jbe    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092e1:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092e5:	0f b7 c0             	movzx  eax,ax
c00092e8:	83 e0 03             	and    eax,0x3
c00092eb:	85 c0                	test   eax,eax
c00092ed:	75 6e                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092ef:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f3:	0f b7 c8             	movzx  ecx,ax
c00092f6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092fb:	89 c8                	mov    eax,ecx
c00092fd:	f7 e2                	mul    edx
c00092ff:	c1 ea 05             	shr    edx,0x5
c0009302:	89 d0                	mov    eax,edx
c0009304:	c1 e0 02             	shl    eax,0x2
c0009307:	01 d0                	add    eax,edx
c0009309:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009310:	01 d0                	add    eax,edx
c0009312:	c1 e0 02             	shl    eax,0x2
c0009315:	29 c1                	sub    ecx,eax
c0009317:	89 c8                	mov    eax,ecx
c0009319:	0f b7 c0             	movzx  eax,ax
c000931c:	85 c0                	test   eax,eax
c000931e:	75 39                	jne    c0009359 <KeDatetimeToSeconds(datetime_t)+0x11d>
c0009320:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009324:	0f b7 c0             	movzx  eax,ax
c0009327:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000932d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009332:	f7 e9                	imul   ecx
c0009334:	c1 fa 07             	sar    edx,0x7
c0009337:	89 c8                	mov    eax,ecx
c0009339:	c1 f8 1f             	sar    eax,0x1f
c000933c:	29 c2                	sub    edx,eax
c000933e:	89 d0                	mov    eax,edx
c0009340:	c1 e0 02             	shl    eax,0x2
c0009343:	01 d0                	add    eax,edx
c0009345:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000934c:	01 d0                	add    eax,edx
c000934e:	c1 e0 04             	shl    eax,0x4
c0009351:	29 c1                	sub    ecx,eax
c0009353:	89 ca                	mov    edx,ecx
c0009355:	85 d2                	test   edx,edx
c0009357:	75 04                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c0009359:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000935d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009361:	0f b7 c0             	movzx  eax,ax
c0009364:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009367:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936a:	83 f8 46             	cmp    eax,0x46
c000936d:	0f 9f c0             	setg   al
c0009370:	0f b6 c0             	movzx  eax,al
c0009373:	85 c0                	test   eax,eax
c0009375:	0f 84 a4 00 00 00    	je     c000941f <KeDatetimeToSeconds(datetime_t)+0x1e3>
c000937b:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009382:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009386:	0f b7 d0             	movzx  edx,ax
c0009389:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000938c:	39 c2                	cmp    edx,eax
c000938e:	0f 8e b8 01 00 00    	jle    c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c0009394:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009397:	83 e0 03             	and    eax,0x3
c000939a:	85 c0                	test   eax,eax
c000939c:	75 6b                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c000939e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093a1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093a6:	f7 e9                	imul   ecx
c00093a8:	c1 fa 05             	sar    edx,0x5
c00093ab:	89 c8                	mov    eax,ecx
c00093ad:	c1 f8 1f             	sar    eax,0x1f
c00093b0:	29 c2                	sub    edx,eax
c00093b2:	89 d0                	mov    eax,edx
c00093b4:	c1 e0 02             	shl    eax,0x2
c00093b7:	01 d0                	add    eax,edx
c00093b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093c0:	01 d0                	add    eax,edx
c00093c2:	c1 e0 02             	shl    eax,0x2
c00093c5:	29 c1                	sub    ecx,eax
c00093c7:	89 ca                	mov    edx,ecx
c00093c9:	85 d2                	test   edx,edx
c00093cb:	75 35                	jne    c0009402 <KeDatetimeToSeconds(datetime_t)+0x1c6>
c00093cd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093d0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093d6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093db:	f7 e9                	imul   ecx
c00093dd:	c1 fa 07             	sar    edx,0x7
c00093e0:	89 c8                	mov    eax,ecx
c00093e2:	c1 f8 1f             	sar    eax,0x1f
c00093e5:	29 c2                	sub    edx,eax
c00093e7:	89 d0                	mov    eax,edx
c00093e9:	c1 e0 02             	shl    eax,0x2
c00093ec:	01 d0                	add    eax,edx
c00093ee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093f5:	01 d0                	add    eax,edx
c00093f7:	c1 e0 04             	shl    eax,0x4
c00093fa:	29 c1                	sub    ecx,eax
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	85 d2                	test   edx,edx
c0009400:	75 07                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009402:	b8 6e 01 00 00       	mov    eax,0x16e
c0009407:	eb 05                	jmp    c000940e <KeDatetimeToSeconds(datetime_t)+0x1d2>
c0009409:	b8 6d 01 00 00       	mov    eax,0x16d
c000940e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009411:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009414:	83 c0 01             	add    eax,0x1
c0009417:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000941a:	e9 63 ff ff ff       	jmp    c0009382 <KeDatetimeToSeconds(datetime_t)+0x146>
c000941f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009422:	83 f8 45             	cmp    eax,0x45
c0009425:	0f 8f 21 01 00 00    	jg     c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c000942b:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009432:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009436:	0f b7 d0             	movzx  edx,ax
c0009439:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000943c:	39 c2                	cmp    edx,eax
c000943e:	0f 8d 8b 00 00 00    	jge    c00094cf <KeDatetimeToSeconds(datetime_t)+0x293>
c0009444:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009447:	83 e0 03             	and    eax,0x3
c000944a:	85 c0                	test   eax,eax
c000944c:	75 6b                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000944e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009451:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009456:	f7 e9                	imul   ecx
c0009458:	c1 fa 05             	sar    edx,0x5
c000945b:	89 c8                	mov    eax,ecx
c000945d:	c1 f8 1f             	sar    eax,0x1f
c0009460:	29 c2                	sub    edx,eax
c0009462:	89 d0                	mov    eax,edx
c0009464:	c1 e0 02             	shl    eax,0x2
c0009467:	01 d0                	add    eax,edx
c0009469:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009470:	01 d0                	add    eax,edx
c0009472:	c1 e0 02             	shl    eax,0x2
c0009475:	29 c1                	sub    ecx,eax
c0009477:	89 ca                	mov    edx,ecx
c0009479:	85 d2                	test   edx,edx
c000947b:	75 35                	jne    c00094b2 <KeDatetimeToSeconds(datetime_t)+0x276>
c000947d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009480:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009486:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000948b:	f7 e9                	imul   ecx
c000948d:	c1 fa 07             	sar    edx,0x7
c0009490:	89 c8                	mov    eax,ecx
c0009492:	c1 f8 1f             	sar    eax,0x1f
c0009495:	29 c2                	sub    edx,eax
c0009497:	89 d0                	mov    eax,edx
c0009499:	c1 e0 02             	shl    eax,0x2
c000949c:	01 d0                	add    eax,edx
c000949e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a5:	01 d0                	add    eax,edx
c00094a7:	c1 e0 04             	shl    eax,0x4
c00094aa:	29 c1                	sub    ecx,eax
c00094ac:	89 ca                	mov    edx,ecx
c00094ae:	85 d2                	test   edx,edx
c00094b0:	75 07                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c00094b2:	b8 6e 01 00 00       	mov    eax,0x16e
c00094b7:	eb 05                	jmp    c00094be <KeDatetimeToSeconds(datetime_t)+0x282>
c00094b9:	b8 6d 01 00 00       	mov    eax,0x16d
c00094be:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094c4:	83 e8 01             	sub    eax,0x1
c00094c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00094ca:	e9 63 ff ff ff       	jmp    c0009432 <KeDatetimeToSeconds(datetime_t)+0x1f6>
c00094cf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094d2:	83 e0 03             	and    eax,0x3
c00094d5:	85 c0                	test   eax,eax
c00094d7:	75 6b                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c00094d9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094dc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094e1:	f7 e9                	imul   ecx
c00094e3:	c1 fa 05             	sar    edx,0x5
c00094e6:	89 c8                	mov    eax,ecx
c00094e8:	c1 f8 1f             	sar    eax,0x1f
c00094eb:	29 c2                	sub    edx,eax
c00094ed:	89 d0                	mov    eax,edx
c00094ef:	c1 e0 02             	shl    eax,0x2
c00094f2:	01 d0                	add    eax,edx
c00094f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094fb:	01 d0                	add    eax,edx
c00094fd:	c1 e0 02             	shl    eax,0x2
c0009500:	29 c1                	sub    ecx,eax
c0009502:	89 ca                	mov    edx,ecx
c0009504:	85 d2                	test   edx,edx
c0009506:	75 35                	jne    c000953d <KeDatetimeToSeconds(datetime_t)+0x301>
c0009508:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000950b:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009511:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009516:	f7 e9                	imul   ecx
c0009518:	c1 fa 07             	sar    edx,0x7
c000951b:	89 c8                	mov    eax,ecx
c000951d:	c1 f8 1f             	sar    eax,0x1f
c0009520:	29 c2                	sub    edx,eax
c0009522:	89 d0                	mov    eax,edx
c0009524:	c1 e0 02             	shl    eax,0x2
c0009527:	01 d0                	add    eax,edx
c0009529:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009530:	01 d0                	add    eax,edx
c0009532:	c1 e0 04             	shl    eax,0x4
c0009535:	29 c1                	sub    ecx,eax
c0009537:	89 ca                	mov    edx,ecx
c0009539:	85 d2                	test   edx,edx
c000953b:	75 07                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c000953d:	b8 6e 01 00 00       	mov    eax,0x16e
c0009542:	eb 05                	jmp    c0009549 <KeDatetimeToSeconds(datetime_t)+0x30d>
c0009544:	b8 6d 01 00 00       	mov    eax,0x16d
c0009549:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000954c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000954f:	89 c2                	mov    edx,eax
c0009551:	c1 fa 1f             	sar    edx,0x1f
c0009554:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000955a:	6b c8 00             	imul   ecx,eax,0x0
c000955d:	01 d9                	add    ecx,ebx
c000955f:	bb 80 51 01 00       	mov    ebx,0x15180
c0009564:	f7 e3                	mul    ebx
c0009566:	01 d1                	add    ecx,edx
c0009568:	89 ca                	mov    edx,ecx
c000956a:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000956d:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009570:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009573:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009576:	83 c4 24             	add    esp,0x24
c0009579:	5b                   	pop    ebx
c000957a:	5d                   	pop    ebp
c000957b:	c3                   	ret    

c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000957c:	55                   	push   ebp
c000957d:	89 e5                	mov    ebp,esp
c000957f:	56                   	push   esi
c0009580:	53                   	push   ebx
c0009581:	83 ec 20             	sub    esp,0x20
c0009584:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009587:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000958a:	e8 ad fc ff ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c000958f:	83 c4 08             	add    esp,0x8
c0009592:	89 c3                	mov    ebx,eax
c0009594:	89 d6                	mov    esi,edx
c0009596:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c000959b:	0f b6 d0             	movzx  edx,al
c000959e:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c00095a3:	01 c2                	add    edx,eax
c00095a5:	89 d0                	mov    eax,edx
c00095a7:	01 c0                	add    eax,eax
c00095a9:	01 d0                	add    eax,edx
c00095ab:	01 c0                	add    eax,eax
c00095ad:	01 d0                	add    eax,edx
c00095af:	c1 e0 05             	shl    eax,0x5
c00095b2:	01 d0                	add    eax,edx
c00095b4:	c1 e0 04             	shl    eax,0x4
c00095b7:	89 c2                	mov    edx,eax
c00095b9:	c1 fa 1f             	sar    edx,0x1f
c00095bc:	29 c3                	sub    ebx,eax
c00095be:	19 d6                	sbb    esi,edx
c00095c0:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c00095c5:	0f b6 c0             	movzx  eax,al
c00095c8:	85 c0                	test   eax,eax
c00095ca:	74 0c                	je     c00095d8 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c00095cc:	b8 08 07 00 00       	mov    eax,0x708
c00095d1:	ba 00 00 00 00       	mov    edx,0x0
c00095d6:	eb 0a                	jmp    c00095e2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c00095d8:	b8 00 00 00 00       	mov    eax,0x0
c00095dd:	ba 00 00 00 00       	mov    edx,0x0
c00095e2:	29 c3                	sub    ebx,eax
c00095e4:	19 d6                	sbb    esi,edx
c00095e6:	89 d8                	mov    eax,ebx
c00095e8:	89 f2                	mov    edx,esi
c00095ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095ed:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095f6:	89 d0                	mov    eax,edx
c00095f8:	31 d2                	xor    edx,edx
c00095fa:	89 c3                	mov    ebx,eax
c00095fc:	89 d6                	mov    esi,edx
c00095fe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009601:	80 e5 ff             	and    ch,0xff
c0009604:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009607:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000960a:	83 e1 00             	and    ecx,0x0
c000960d:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0009610:	83 ec 0c             	sub    esp,0xc
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009618:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000961b:	68 6e 35 02 c0       	push   0xc002356e
c0009620:	e8 57 d9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009625:	83 c4 20             	add    esp,0x20
c0009628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000962b:	8b 00                	mov    eax,DWORD PTR [eax]
c000962d:	83 c0 2c             	add    eax,0x2c
c0009630:	8b 00                	mov    eax,DWORD PTR [eax]
c0009632:	83 ec 04             	sub    esp,0x4
c0009635:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009638:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000963b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000963e:	ff d0                	call   eax
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009646:	5b                   	pop    ebx
c0009647:	5e                   	pop    esi
c0009648:	5d                   	pop    ebp
c0009649:	c3                   	ret    

c000964a <KeSecondsToDatetime(unsigned long long)>:
c000964a:	55                   	push   ebp
c000964b:	89 e5                	mov    ebp,esp
c000964d:	83 ec 48             	sub    esp,0x48
c0009650:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009653:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009656:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009659:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c000965c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000965f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009662:	6a 00                	push   0x0
c0009664:	68 80 51 01 00       	push   0x15180
c0009669:	52                   	push   edx
c000966a:	50                   	push   eax
c000966b:	e8 84 83 01 00       	call   c00219f4 <__udivdi3>
c0009670:	83 c4 10             	add    esp,0x10
c0009673:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009678:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000967b:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000967e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009681:	6a 00                	push   0x0
c0009683:	68 80 51 01 00       	push   0x15180
c0009688:	52                   	push   edx
c0009689:	50                   	push   eax
c000968a:	e8 65 84 01 00       	call   c0021af4 <__umoddi3>
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009695:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009699:	79 0b                	jns    c00096a6 <KeSecondsToDatetime(unsigned long long)+0x5c>
c000969b:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c00096a2:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c00096a6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096a9:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096ae:	89 c8                	mov    eax,ecx
c00096b0:	f7 ea                	imul   edx
c00096b2:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b5:	c1 f8 0b             	sar    eax,0xb
c00096b8:	89 c2                	mov    edx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	c1 f8 1f             	sar    eax,0x1f
c00096bf:	29 c2                	sub    edx,eax
c00096c1:	89 d0                	mov    eax,edx
c00096c3:	88 c2                	mov    dl,al
c00096c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c8:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00096cb:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096ce:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	f7 ea                	imul   edx
c00096d7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096da:	c1 f8 0b             	sar    eax,0xb
c00096dd:	89 c2                	mov    edx,eax
c00096df:	89 c8                	mov    eax,ecx
c00096e1:	c1 f8 1f             	sar    eax,0x1f
c00096e4:	29 c2                	sub    edx,eax
c00096e6:	89 d0                	mov    eax,edx
c00096e8:	01 c0                	add    eax,eax
c00096ea:	01 d0                	add    eax,edx
c00096ec:	01 c0                	add    eax,eax
c00096ee:	01 d0                	add    eax,edx
c00096f0:	c1 e0 05             	shl    eax,0x5
c00096f3:	01 d0                	add    eax,edx
c00096f5:	c1 e0 04             	shl    eax,0x4
c00096f8:	29 c1                	sub    ecx,eax
c00096fa:	89 c8                	mov    eax,ecx
c00096fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096ff:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009702:	ba 89 88 88 88       	mov    edx,0x88888889
c0009707:	89 c8                	mov    eax,ecx
c0009709:	f7 ea                	imul   edx
c000970b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000970e:	c1 f8 05             	sar    eax,0x5
c0009711:	89 c2                	mov    edx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	c1 f8 1f             	sar    eax,0x1f
c0009718:	29 c2                	sub    edx,eax
c000971a:	89 d0                	mov    eax,edx
c000971c:	88 c2                	mov    dl,al
c000971e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009721:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009724:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009727:	ba 89 88 88 88       	mov    edx,0x88888889
c000972c:	89 c8                	mov    eax,ecx
c000972e:	f7 ea                	imul   edx
c0009730:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009733:	c1 f8 05             	sar    eax,0x5
c0009736:	89 c2                	mov    edx,eax
c0009738:	89 c8                	mov    eax,ecx
c000973a:	c1 f8 1f             	sar    eax,0x1f
c000973d:	29 c2                	sub    edx,eax
c000973f:	89 d0                	mov    eax,edx
c0009741:	01 c0                	add    eax,eax
c0009743:	01 d0                	add    eax,edx
c0009745:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000974c:	01 d0                	add    eax,edx
c000974e:	c1 e0 02             	shl    eax,0x2
c0009751:	29 c1                	sub    ecx,eax
c0009753:	89 ca                	mov    edx,ecx
c0009755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009758:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c000975b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000975f:	79 20                	jns    c0009781 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009764:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c000976a:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000976f:	89 c8                	mov    eax,ecx
c0009771:	f7 ea                	imul   edx
c0009773:	c1 fa 0f             	sar    edx,0xf
c0009776:	89 c8                	mov    eax,ecx
c0009778:	c1 f8 1f             	sar    eax,0x1f
c000977b:	29 c2                	sub    edx,eax
c000977d:	89 d0                	mov    eax,edx
c000977f:	eb 18                	jmp    c0009799 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009781:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009784:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009789:	89 c8                	mov    eax,ecx
c000978b:	f7 ea                	imul   edx
c000978d:	c1 fa 0f             	sar    edx,0xf
c0009790:	89 c8                	mov    eax,ecx
c0009792:	c1 f8 1f             	sar    eax,0x1f
c0009795:	29 c2                	sub    edx,eax
c0009797:	89 d0                	mov    eax,edx
c0009799:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000979c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000979f:	89 d0                	mov    eax,edx
c00097a1:	c1 e0 03             	shl    eax,0x3
c00097a4:	01 d0                	add    eax,edx
c00097a6:	c1 e0 04             	shl    eax,0x4
c00097a9:	01 d0                	add    eax,edx
c00097ab:	c1 e0 04             	shl    eax,0x4
c00097ae:	29 d0                	sub    eax,edx
c00097b0:	89 c2                	mov    edx,eax
c00097b2:	c1 e2 06             	shl    edx,0x6
c00097b5:	29 c2                	sub    edx,eax
c00097b7:	89 d0                	mov    eax,edx
c00097b9:	f7 d8                	neg    eax
c00097bb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00097be:	01 d0                	add    eax,edx
c00097c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00097c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097c6:	c1 e8 02             	shr    eax,0x2
c00097c9:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c00097ce:	f7 e2                	mul    edx
c00097d0:	c1 ea 07             	shr    edx,0x7
c00097d3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097d6:	29 d0                	sub    eax,edx
c00097d8:	89 c1                	mov    ecx,eax
c00097da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097dd:	c1 e8 02             	shr    eax,0x2
c00097e0:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c00097e5:	f7 e2                	mul    edx
c00097e7:	89 d0                	mov    eax,edx
c00097e9:	c1 e8 0b             	shr    eax,0xb
c00097ec:	01 c1                	add    ecx,eax
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	c1 e8 04             	shr    eax,0x4
c00097f4:	ba 41 d6 72 00       	mov    edx,0x72d641
c00097f9:	f7 e2                	mul    edx
c00097fb:	89 d0                	mov    eax,edx
c00097fd:	c1 e8 04             	shr    eax,0x4
c0009800:	29 c1                	sub    ecx,eax
c0009802:	ba 61 f3 19 67       	mov    edx,0x6719f361
c0009807:	89 c8                	mov    eax,ecx
c0009809:	f7 e2                	mul    edx
c000980b:	89 c8                	mov    eax,ecx
c000980d:	29 d0                	sub    eax,edx
c000980f:	d1 e8                	shr    eax,1
c0009811:	01 d0                	add    eax,edx
c0009813:	c1 e8 08             	shr    eax,0x8
c0009816:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0009819:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000981c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009821:	f7 e2                	mul    edx
c0009823:	89 d1                	mov    ecx,edx
c0009825:	c1 e9 05             	shr    ecx,0x5
c0009828:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000982b:	89 d0                	mov    eax,edx
c000982d:	c1 e0 03             	shl    eax,0x3
c0009830:	01 d0                	add    eax,edx
c0009832:	c1 e0 03             	shl    eax,0x3
c0009835:	01 d0                	add    eax,edx
c0009837:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000983e:	01 c2                	add    edx,eax
c0009840:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009843:	c1 e8 02             	shr    eax,0x2
c0009846:	01 d0                	add    eax,edx
c0009848:	29 c1                	sub    ecx,eax
c000984a:	89 ca                	mov    edx,ecx
c000984c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000984f:	01 d0                	add    eax,edx
c0009851:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009854:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0009857:	89 d0                	mov    eax,edx
c0009859:	c1 e0 02             	shl    eax,0x2
c000985c:	01 d0                	add    eax,edx
c000985e:	83 c0 02             	add    eax,0x2
c0009861:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009866:	f7 e2                	mul    edx
c0009868:	89 d0                	mov    eax,edx
c000986a:	c1 e8 07             	shr    eax,0x7
c000986d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009870:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009873:	89 d0                	mov    eax,edx
c0009875:	c1 e0 03             	shl    eax,0x3
c0009878:	01 d0                	add    eax,edx
c000987a:	01 c0                	add    eax,eax
c000987c:	01 d0                	add    eax,edx
c000987e:	c1 e0 03             	shl    eax,0x3
c0009881:	01 d0                	add    eax,edx
c0009883:	83 c0 02             	add    eax,0x2
c0009886:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000988b:	f7 e2                	mul    edx
c000988d:	c1 ea 02             	shr    edx,0x2
c0009890:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009893:	29 d0                	sub    eax,edx
c0009895:	83 c0 01             	add    eax,0x1
c0009898:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000989b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000989f:	77 07                	ja     c00098a8 <KeSecondsToDatetime(unsigned long long)+0x25e>
c00098a1:	b8 02 00 00 00       	mov    eax,0x2
c00098a6:	eb 05                	jmp    c00098ad <KeSecondsToDatetime(unsigned long long)+0x263>
c00098a8:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c00098ad:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c00098b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00098b3:	89 d0                	mov    eax,edx
c00098b5:	c1 e0 02             	shl    eax,0x2
c00098b8:	01 d0                	add    eax,edx
c00098ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00098c1:	01 d0                	add    eax,edx
c00098c3:	c1 e0 04             	shl    eax,0x4
c00098c6:	89 c2                	mov    edx,eax
c00098c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00098cb:	01 c2                	add    edx,eax
c00098cd:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c00098d1:	0f 96 c0             	setbe  al
c00098d4:	0f b6 c0             	movzx  eax,al
c00098d7:	01 d0                	add    eax,edx
c00098d9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00098dc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00098df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00098e2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00098e6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00098e9:	83 c0 01             	add    eax,0x1
c00098ec:	88 c2                	mov    dl,al
c00098ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098f1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00098f4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00098f7:	88 c2                	mov    dl,al
c00098f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098fc:	88 10                	mov    BYTE PTR [eax],dl
c00098fe:	90                   	nop
c00098ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009902:	c9                   	leave  
c0009903:	c2 04 00             	ret    0x4

c0009906 <Clock::timeInDatetimeLocal()>:
c0009906:	55                   	push   ebp
c0009907:	89 e5                	mov    ebp,esp
c0009909:	83 ec 08             	sub    esp,0x8
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009912:	e8 23 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0009917:	83 c4 10             	add    esp,0x10
c000991a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000991d:	83 ec 04             	sub    esp,0x4
c0009920:	52                   	push   edx
c0009921:	50                   	push   eax
c0009922:	51                   	push   ecx
c0009923:	e8 22 fd ff ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c0009928:	83 c4 0c             	add    esp,0xc
c000992b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000992e:	c9                   	leave  
c000992f:	c2 04 00             	ret    0x4

c0009932 <Device::hibernate()>:
c0009932:	c3                   	ret    
c0009933:	90                   	nop

c0009934 <Device::wake()>:
c0009934:	c3                   	ret    
c0009935:	90                   	nop

c0009936 <Device::detect()>:
c0009936:	c3                   	ret    
c0009937:	90                   	nop

c0009938 <Device::disableLegacy()>:
c0009938:	c3                   	ret    
c0009939:	90                   	nop

c000993a <Device::powerSaving(PowerSavingLevel)>:
c000993a:	c3                   	ret    
c000993b:	90                   	nop

c000993c <DriverlessDevice::close(int, int, void*)>:
c000993c:	31 c0                	xor    eax,eax
c000993e:	c3                   	ret    
c000993f:	90                   	nop

c0009940 <DriverlessDevice::detect()>:
c0009940:	c3                   	ret    
c0009941:	90                   	nop

c0009942 <DriverlessDevice::open(int, int, void*)>:
c0009942:	83 ec 18             	sub    esp,0x18
c0009945:	68 ec 35 02 c0       	push   0xc00235ec
c000994a:	e8 a5 63 00 00       	call   c000fcf4 <KePanic(char const*)>
c000994f:	83 c8 ff             	or     eax,0xffffffff
c0009952:	83 c4 1c             	add    esp,0x1c
c0009955:	c3                   	ret    

c0009956 <Device::~Device()>:
c0009956:	ba 90 36 02 c0       	mov    edx,0xc0023690
c000995b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000995f:	89 10                	mov    DWORD PTR [eax],edx
c0009961:	90                   	nop
c0009962:	c3                   	ret    
c0009963:	90                   	nop

c0009964 <Device::~Device()>:
c0009964:	83 ec 0c             	sub    esp,0xc
c0009967:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000996b:	e8 e6 ff ff ff       	call   c0009956 <Device::~Device()>
c0009970:	83 c4 04             	add    esp,0x4
c0009973:	83 ec 08             	sub    esp,0x8
c0009976:	68 58 01 00 00       	push   0x158
c000997b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997f:	e8 2c 3a 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0009984:	83 c4 10             	add    esp,0x10
c0009987:	83 c4 0c             	add    esp,0xc
c000998a:	c3                   	ret    
c000998b:	90                   	nop

c000998c <Device::findAndLoadDriver()>:
c000998c:	c7 44 24 04 0a 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc002360a
c0009994:	e9 e3 d5 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c0009999:	90                   	nop

c000999a <Device::preOpenPCI(PCIDeviceInfo)>:
c000999a:	57                   	push   edi
c000999b:	b9 09 00 00 00       	mov    ecx,0x9
c00099a0:	56                   	push   esi
c00099a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00099a5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00099a9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00099b3:	81 c7 18 01 00 00    	add    edi,0x118
c00099b9:	fc                   	cld    
c00099ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00099bc:	5e                   	pop    esi
c00099bd:	5f                   	pop    edi
c00099be:	c3                   	ret    
c00099bf:	90                   	nop

c00099c0 <Device::preOpenACPI(void*, char*, char*)>:
c00099c0:	57                   	push   edi
c00099c1:	b9 1e 00 00 00       	mov    ecx,0x1e
c00099c6:	56                   	push   esi
c00099c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099cf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00099d9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00099df:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00099e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00099e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099eb:	b9 0e 00 00 00       	mov    ecx,0xe
c00099f0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00099f6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099fc:	5e                   	pop    esi
c00099fd:	5f                   	pop    edi
c00099fe:	c3                   	ret    
c00099ff:	90                   	nop

c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009a00:	53                   	push   ebx
c0009a01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009a09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009a11:	0f b6 c0             	movzx  eax,al
c0009a14:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009a18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a24:	5b                   	pop    ebx
c0009a25:	e9 17 11 01 00       	jmp    c001ab41 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009a2a <Device::getParent()>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009a34:	c3                   	ret    
c0009a35:	90                   	nop

c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009a36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a3e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009a43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a4f:	e9 4f 12 01 00       	jmp    c001aca3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009a54 <Device::addChild(Device*)>:
c0009a54:	53                   	push   ebx
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a60:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a66:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a6c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a6e:	85 d2                	test   edx,edx
c0009a70:	74 04                	je     c0009a76 <Device::addChild(Device*)+0x22>
c0009a72:	89 d3                	mov    ebx,edx
c0009a74:	eb f6                	jmp    c0009a6c <Device::addChild(Device*)+0x18>
c0009a76:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a79:	83 ec 0c             	sub    esp,0xc
c0009a7c:	6a 08                	push   0x8
c0009a7e:	e8 14 5e 00 00       	call   c000f897 <malloc>
c0009a83:	89 03                	mov    DWORD PTR [ebx],eax
c0009a85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a92:	83 c4 18             	add    esp,0x18
c0009a95:	5b                   	pop    ebx
c0009a96:	c3                   	ret    
c0009a97:	90                   	nop

c0009a98 <Device::removeAllChildren()>:
c0009a98:	56                   	push   esi
c0009a99:	53                   	push   ebx
c0009a9a:	52                   	push   edx
c0009a9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a9f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009aa5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aa8:	74 17                	je     c0009ac1 <Device::removeAllChildren()+0x29>
c0009aaa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009aad:	85 c0                	test   eax,eax
c0009aaf:	74 0c                	je     c0009abd <Device::removeAllChildren()+0x25>
c0009ab1:	83 ec 0c             	sub    esp,0xc
c0009ab4:	8b 10                	mov    edx,DWORD PTR [eax]
c0009ab6:	50                   	push   eax
c0009ab7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009aba:	83 c4 10             	add    esp,0x10
c0009abd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009abf:	eb e4                	jmp    c0009aa5 <Device::removeAllChildren()+0xd>
c0009ac1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ac7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009acd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ad3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ada:	58                   	pop    eax
c0009adb:	5b                   	pop    ebx
c0009adc:	5e                   	pop    esi
c0009add:	c3                   	ret    

c0009ade <Device::hibernateAll()>:
c0009ade:	53                   	push   ebx
c0009adf:	83 ec 14             	sub    esp,0x14
c0009ae2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ae8:	53                   	push   ebx
c0009ae9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009aec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af2:	83 c4 10             	add    esp,0x10
c0009af5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009af8:	74 0f                	je     c0009b09 <Device::hibernateAll()+0x2b>
c0009afa:	83 ec 0c             	sub    esp,0xc
c0009afd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b00:	e8 d9 ff ff ff       	call   c0009ade <Device::hibernateAll()>
c0009b05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b07:	eb e9                	jmp    c0009af2 <Device::hibernateAll()+0x14>
c0009b09:	83 c4 08             	add    esp,0x8
c0009b0c:	5b                   	pop    ebx
c0009b0d:	c3                   	ret    

c0009b0e <Device::wakeAll()>:
c0009b0e:	53                   	push   ebx
c0009b0f:	83 ec 14             	sub    esp,0x14
c0009b12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b18:	53                   	push   ebx
c0009b19:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009b1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b28:	74 0f                	je     c0009b39 <Device::wakeAll()+0x2b>
c0009b2a:	83 ec 0c             	sub    esp,0xc
c0009b2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b30:	e8 d9 ff ff ff       	call   c0009b0e <Device::wakeAll()>
c0009b35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b37:	eb e9                	jmp    c0009b22 <Device::wakeAll()+0x14>
c0009b39:	83 c4 08             	add    esp,0x8
c0009b3c:	5b                   	pop    ebx
c0009b3d:	c3                   	ret    

c0009b3e <Device::detectAll()>:
c0009b3e:	53                   	push   ebx
c0009b3f:	83 ec 14             	sub    esp,0x14
c0009b42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b48:	53                   	push   ebx
c0009b49:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009b4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b52:	83 c4 10             	add    esp,0x10
c0009b55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b58:	74 0f                	je     c0009b69 <Device::detectAll()+0x2b>
c0009b5a:	83 ec 0c             	sub    esp,0xc
c0009b5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b60:	e8 d9 ff ff ff       	call   c0009b3e <Device::detectAll()>
c0009b65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b67:	eb e9                	jmp    c0009b52 <Device::detectAll()+0x14>
c0009b69:	83 c4 08             	add    esp,0x8
c0009b6c:	5b                   	pop    ebx
c0009b6d:	c3                   	ret    

c0009b6e <Device::disableLegacyAll()>:
c0009b6e:	c3                   	ret    
c0009b6f:	90                   	nop

c0009b70 <Device::loadDriversForAll()>:
c0009b70:	c3                   	ret    
c0009b71:	90                   	nop

c0009b72 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b72:	56                   	push   esi
c0009b73:	53                   	push   ebx
c0009b74:	83 ec 0c             	sub    esp,0xc
c0009b77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b7b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b81:	56                   	push   esi
c0009b82:	53                   	push   ebx
c0009b83:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b92:	74 0f                	je     c0009ba3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b94:	52                   	push   edx
c0009b95:	52                   	push   edx
c0009b96:	56                   	push   esi
c0009b97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b9a:	e8 d3 ff ff ff       	call   c0009b72 <Device::powerSavingAll(PowerSavingLevel)>
c0009b9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ba1:	eb e9                	jmp    c0009b8c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009ba3:	58                   	pop    eax
c0009ba4:	5b                   	pop    ebx
c0009ba5:	5e                   	pop    esi
c0009ba6:	c3                   	ret    
c0009ba7:	90                   	nop

c0009ba8 <Device::setName(char const*)>:
c0009ba8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009bb0:	e9 8b 6a ff ff       	jmp    c0000640 <strcpy>
c0009bb5:	90                   	nop

c0009bb6 <Device::Device(char const*)>:
c0009bb6:	83 ec 1c             	sub    esp,0x1c
c0009bb9:	ba 90 36 02 c0       	mov    edx,0xc0023690
c0009bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc2:	89 10                	mov    DWORD PTR [eax],edx
c0009bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009bfc:	83 ec 08             	sub    esp,0x8
c0009bff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c07:	e8 9c ff ff ff       	call   c0009ba8 <Device::setName(char const*)>
c0009c0c:	83 c4 10             	add    esp,0x10
c0009c0f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009c17:	83 ec 0c             	sub    esp,0xc
c0009c1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c1e:	e8 74 5c 00 00       	call   c000f897 <malloc>
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c37:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c41:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c51:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c62:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c6d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c78:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c86:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c94:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ca2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009cac:	90                   	nop
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	c3                   	ret    
c0009cb1:	90                   	nop

c0009cb2 <Device::getName()>:
c0009cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cb6:	05 d0 00 00 00       	add    eax,0xd0
c0009cbb:	c3                   	ret    

c0009cbc <Device::closeAll()>:
c0009cbc:	53                   	push   ebx
c0009cbd:	83 ec 08             	sub    esp,0x8
c0009cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009cc4:	53                   	push   ebx
c0009cc5:	e8 e8 ff ff ff       	call   c0009cb2 <Device::getName()>
c0009cca:	52                   	push   edx
c0009ccb:	50                   	push   eax
c0009ccc:	68 44 36 02 c0       	push   0xc0023644
c0009cd1:	e8 a6 d2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009cd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009cd8:	6a 00                	push   0x0
c0009cda:	6a 00                	push   0x0
c0009cdc:	6a 00                	push   0x0
c0009cde:	53                   	push   ebx
c0009cdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009ce2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ce8:	83 c4 20             	add    esp,0x20
c0009ceb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009cee:	74 12                	je     c0009d02 <Device::closeAll()+0x46>
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cf6:	e8 c1 ff ff ff       	call   c0009cbc <Device::closeAll()>
c0009cfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	eb e9                	jmp    c0009ceb <Device::closeAll()+0x2f>
c0009d02:	83 c4 08             	add    esp,0x8
c0009d05:	5b                   	pop    ebx
c0009d06:	c3                   	ret    
c0009d07:	90                   	nop

c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009d08:	83 ec 0c             	sub    esp,0xc
c0009d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d0f:	83 ec 08             	sub    esp,0x8
c0009d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d16:	50                   	push   eax
c0009d17:	e8 9a fe ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009d1c:	83 c4 10             	add    esp,0x10
c0009d1f:	ba bc 36 02 c0       	mov    edx,0xc00236bc
c0009d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d28:	89 10                	mov    DWORD PTR [eax],edx
c0009d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009d38:	90                   	nop
c0009d39:	83 c4 0c             	add    esp,0xc
c0009d3c:	c3                   	ret    
c0009d3d:	90                   	nop

c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009d3e:	57                   	push   edi
c0009d3f:	56                   	push   esi
c0009d40:	53                   	push   ebx
c0009d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009d49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009d4d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009d53:	75 0c                	jne    c0009d61 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	53                   	push   ebx
c0009d58:	56                   	push   esi
c0009d59:	e8 0e 7f 01 00       	call   c0021c6c <LinkedList<Device>::addElement(Device*)>
c0009d5e:	83 c4 10             	add    esp,0x10
c0009d61:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d6a:	74 12                	je     c0009d7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d6c:	50                   	push   eax
c0009d6d:	57                   	push   edi
c0009d6e:	56                   	push   esi
c0009d6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d72:	e8 c7 ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d79:	83 c4 10             	add    esp,0x10
c0009d7c:	eb e9                	jmp    c0009d67 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d7e:	5b                   	pop    ebx
c0009d7f:	5e                   	pop    esi
c0009d80:	5f                   	pop    edi
c0009d81:	c3                   	ret    

c0009d82 <getDevicesOfType(DeviceType)>:
c0009d82:	53                   	push   ebx
c0009d83:	83 ec 14             	sub    esp,0x14
c0009d86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d8a:	53                   	push   ebx
c0009d8b:	e8 b8 7f 01 00       	call   c0021d48 <LinkedList<Device>::LinkedList()>
c0009d90:	83 c4 0c             	add    esp,0xc
c0009d93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d97:	53                   	push   ebx
c0009d98:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c0009d9e:	e8 9b ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009da3:	89 d8                	mov    eax,ebx
c0009da5:	83 c4 18             	add    esp,0x18
c0009da8:	5b                   	pop    ebx
c0009da9:	c2 04 00             	ret    0x4

c0009dac <HardDiskController::HardDiskController(char const*)>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009db3:	83 ec 08             	sub    esp,0x8
c0009db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dba:	50                   	push   eax
c0009dbb:	e8 f6 fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	ba e8 36 02 c0       	mov    edx,0xc00236e8
c0009dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dcc:	89 10                	mov    DWORD PTR [eax],edx
c0009dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009ddc:	90                   	nop
c0009ddd:	83 c4 0c             	add    esp,0xc
c0009de0:	c3                   	ret    
c0009de1:	90                   	nop
c0009de2:	66 90                	xchg   ax,ax

c0009de4 <HardDiskController::~HardDiskController()>:
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	ba e8 36 02 c0       	mov    edx,0xc00236e8
c0009dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df0:	89 10                	mov    DWORD PTR [eax],edx
c0009df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df6:	83 ec 0c             	sub    esp,0xc
c0009df9:	50                   	push   eax
c0009dfa:	e8 57 fb ff ff       	call   c0009956 <Device::~Device()>
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	90                   	nop
c0009e03:	83 c4 0c             	add    esp,0xc
c0009e06:	c3                   	ret    
c0009e07:	90                   	nop

c0009e08 <HardDiskController::~HardDiskController()>:
c0009e08:	83 ec 0c             	sub    esp,0xc
c0009e0b:	83 ec 0c             	sub    esp,0xc
c0009e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e12:	e8 cd ff ff ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0009e17:	83 c4 10             	add    esp,0x10
c0009e1a:	83 ec 08             	sub    esp,0x8
c0009e1d:	68 58 01 00 00       	push   0x158
c0009e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e26:	e8 85 35 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0009e2b:	83 c4 10             	add    esp,0x10
c0009e2e:	83 c4 0c             	add    esp,0xc
c0009e31:	c3                   	ret    

c0009e32 <PhysicalDisk::eject()>:
c0009e32:	83 c8 ff             	or     eax,0xffffffff
c0009e35:	c3                   	ret    

c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009e36:	83 ec 0c             	sub    esp,0xc
c0009e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e3d:	83 ec 08             	sub    esp,0x8
c0009e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e44:	50                   	push   eax
c0009e45:	e8 6c fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009e4a:	83 c4 10             	add    esp,0x10
c0009e4d:	ba 14 37 02 c0       	mov    edx,0xc0023714
c0009e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e56:	89 10                	mov    DWORD PTR [eax],edx
c0009e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e5c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e67:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e72:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e84:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e98:	90                   	nop
c0009e99:	83 c4 0c             	add    esp,0xc
c0009e9c:	c3                   	ret    
c0009e9d:	90                   	nop

c0009e9e <PhysicalDisk::startCache()>:
c0009e9e:	56                   	push   esi
c0009e9f:	53                   	push   ebx
c0009ea0:	83 ec 10             	sub    esp,0x10
c0009ea3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ea7:	6a 44                	push   0x44
c0009ea9:	e8 e9 59 00 00       	call   c000f897 <malloc>
c0009eae:	89 c6                	mov    esi,eax
c0009eb0:	58                   	pop    eax
c0009eb1:	5a                   	pop    edx
c0009eb2:	53                   	push   ebx
c0009eb3:	56                   	push   esi
c0009eb4:	e8 d3 13 00 00       	call   c000b28c <VCache::VCache(PhysicalDisk*)>
c0009eb9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009ebf:	83 c4 14             	add    esp,0x14
c0009ec2:	5b                   	pop    ebx
c0009ec3:	5e                   	pop    esi
c0009ec4:	c3                   	ret    
c0009ec5:	90                   	nop

c0009ec6 <PhysicalDisk::~PhysicalDisk()>:
c0009ec6:	83 ec 0c             	sub    esp,0xc
c0009ec9:	ba 14 37 02 c0       	mov    edx,0xc0023714
c0009ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed2:	89 10                	mov    DWORD PTR [eax],edx
c0009ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed8:	83 ec 0c             	sub    esp,0xc
c0009edb:	50                   	push   eax
c0009edc:	e8 75 fa ff ff       	call   c0009956 <Device::~Device()>
c0009ee1:	83 c4 10             	add    esp,0x10
c0009ee4:	90                   	nop
c0009ee5:	83 c4 0c             	add    esp,0xc
c0009ee8:	c3                   	ret    
c0009ee9:	90                   	nop

c0009eea <PhysicalDisk::~PhysicalDisk()>:
c0009eea:	83 ec 0c             	sub    esp,0xc
c0009eed:	83 ec 0c             	sub    esp,0xc
c0009ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef4:	e8 cd ff ff ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0009ef9:	83 c4 10             	add    esp,0x10
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	68 6c 01 00 00       	push   0x16c
c0009f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f08:	e8 a3 34 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	83 c4 0c             	add    esp,0xc
c0009f13:	c3                   	ret    

c0009f14 <startGUI(void*)>:
c0009f14:	55                   	push   ebp
c0009f15:	89 e5                	mov    ebp,esp
c0009f17:	53                   	push   ebx
c0009f18:	83 ec 04             	sub    esp,0x4
c0009f1b:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0009f23:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0009f28:	85 c0                	test   eax,eax
c0009f2a:	75 01                	jne    c0009f2d <startGUI(void*)+0x19>
c0009f2c:	fb                   	sti    
c0009f2d:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009f33:	83 ec 08             	sub    esp,0x8
c0009f36:	6a 01                	push   0x1
c0009f38:	68 44 37 02 c0       	push   0xc0023744
c0009f3d:	e8 28 c3 00 00       	call   c001626a <Thr::loadDLL(char const*, bool)>
c0009f42:	83 c4 10             	add    esp,0x10
c0009f45:	83 ec 08             	sub    esp,0x8
c0009f48:	53                   	push   ebx
c0009f49:	50                   	push   eax
c0009f4a:	e8 6d c5 00 00       	call   c00164bc <Thr::executeDLL(unsigned long, void*)>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009f58:	83 ec 08             	sub    esp,0x8
c0009f5b:	6a 01                	push   0x1
c0009f5d:	68 5e 37 02 c0       	push   0xc002375e
c0009f62:	e8 03 c3 00 00       	call   c001626a <Thr::loadDLL(char const*, bool)>
c0009f67:	83 c4 10             	add    esp,0x10
c0009f6a:	83 ec 08             	sub    esp,0x8
c0009f6d:	53                   	push   ebx
c0009f6e:	50                   	push   eax
c0009f6f:	e8 48 c5 00 00       	call   c00164bc <Thr::executeDLL(unsigned long, void*)>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	eb fe                	jmp    c0009f77 <startGUI(void*)+0x63>

c0009f79 <startGUIVESA(void*)>:
c0009f79:	55                   	push   ebp
c0009f7a:	89 e5                	mov    ebp,esp
c0009f7c:	53                   	push   ebx
c0009f7d:	83 ec 04             	sub    esp,0x4
c0009f80:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0009f88:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0009f8d:	85 c0                	test   eax,eax
c0009f8f:	75 01                	jne    c0009f92 <startGUIVESA(void*)+0x19>
c0009f91:	fb                   	sti    
c0009f92:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009f98:	83 ec 08             	sub    esp,0x8
c0009f9b:	6a 01                	push   0x1
c0009f9d:	68 7c 37 02 c0       	push   0xc002377c
c0009fa2:	e8 c3 c2 00 00       	call   c001626a <Thr::loadDLL(char const*, bool)>
c0009fa7:	83 c4 10             	add    esp,0x10
c0009faa:	83 ec 08             	sub    esp,0x8
c0009fad:	53                   	push   ebx
c0009fae:	50                   	push   eax
c0009faf:	e8 08 c5 00 00       	call   c00164bc <Thr::executeDLL(unsigned long, void*)>
c0009fb4:	83 c4 10             	add    esp,0x10
c0009fb7:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009fbd:	83 ec 08             	sub    esp,0x8
c0009fc0:	6a 01                	push   0x1
c0009fc2:	68 5e 37 02 c0       	push   0xc002375e
c0009fc7:	e8 9e c2 00 00       	call   c001626a <Thr::loadDLL(char const*, bool)>
c0009fcc:	83 c4 10             	add    esp,0x10
c0009fcf:	83 ec 08             	sub    esp,0x8
c0009fd2:	53                   	push   ebx
c0009fd3:	50                   	push   eax
c0009fd4:	e8 e3 c4 00 00       	call   c00164bc <Thr::executeDLL(unsigned long, void*)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	eb fe                	jmp    c0009fdc <startGUIVESA(void*)+0x63>

c0009fde <sendKeyToTerminal(unsigned char)>:
c0009fde:	55                   	push   ebp
c0009fdf:	89 e5                	mov    ebp,esp
c0009fe1:	83 ec 28             	sub    esp,0x28
c0009fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009fe7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009fea:	a1 f4 c1 02 c0       	mov    eax,ds:0xc002c1f4
c0009fef:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009ff3:	83 ec 08             	sub    esp,0x8
c0009ff6:	52                   	push   edx
c0009ff7:	50                   	push   eax
c0009ff8:	e8 4b 8a 00 00       	call   c0012a48 <VgaText::receiveKey(unsigned char)>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a004:	83 f8 0a             	cmp    eax,0xa
c000a007:	74 16                	je     c000a01f <sendKeyToTerminal(unsigned char)+0x41>
c000a009:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a00d:	83 f8 03             	cmp    eax,0x3
c000a010:	74 0d                	je     c000a01f <sendKeyToTerminal(unsigned char)+0x41>
c000a012:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a016:	83 f8 1c             	cmp    eax,0x1c
c000a019:	0f 85 92 00 00 00    	jne    c000a0b1 <sendKeyToTerminal(unsigned char)+0xd3>
c000a01f:	fa                   	cli    
c000a020:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a025:	83 c0 01             	add    eax,0x1
c000a028:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000a02d:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000a032:	83 c0 01             	add    eax,0x1
c000a035:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c000a03a:	a1 80 b6 02 c0       	mov    eax,ds:0xc002b680
c000a03f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a042:	c7 05 80 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b680,0x0
c000a04c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a050:	74 1f                	je     c000a071 <sendKeyToTerminal(unsigned char)+0x93>
c000a052:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a055:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a058:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a05b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a05e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a061:	83 ec 0c             	sub    esp,0xc
c000a064:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a067:	e8 00 d1 00 00       	call   c001716c <unblockTask(ThreadControlBlock*)>
c000a06c:	83 c4 10             	add    esp,0x10
c000a06f:	eb db                	jmp    c000a04c <sendKeyToTerminal(unsigned char)+0x6e>
c000a071:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000a076:	83 e8 01             	sub    eax,0x1
c000a079:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c000a07e:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000a083:	85 c0                	test   eax,eax
c000a085:	75 18                	jne    c000a09f <sendKeyToTerminal(unsigned char)+0xc1>
c000a087:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c000a08c:	85 c0                	test   eax,eax
c000a08e:	74 0f                	je     c000a09f <sendKeyToTerminal(unsigned char)+0xc1>
c000a090:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c000a09a:	e8 71 cd 00 00       	call   c0016e10 <schedule()>
c000a09f:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000a0a7:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a0ac:	85 c0                	test   eax,eax
c000a0ae:	75 01                	jne    c000a0b1 <sendKeyToTerminal(unsigned char)+0xd3>
c000a0b0:	fb                   	sti    
c000a0b1:	90                   	nop
c000a0b2:	c9                   	leave  
c000a0b3:	c3                   	ret    

c000a0b4 <sendKeyboardToken(KeyboardToken)>:
c000a0b4:	55                   	push   ebp
c000a0b5:	89 e5                	mov    ebp,esp
c000a0b7:	83 ec 18             	sub    esp,0x18
c000a0ba:	e8 58 65 00 00       	call   c0010617 <KeUserIOReceived()>
c000a0bf:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a0c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0c5:	0f b7 c0             	movzx  eax,ax
c000a0c8:	83 f2 01             	xor    edx,0x1
c000a0cb:	88 90 a0 b6 02 c0    	mov    BYTE PTR [eax-0x3ffd4960],dl
c000a0d1:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a0d6:	85 c0                	test   eax,eax
c000a0d8:	74 24                	je     c000a0fe <sendKeyboardToken(KeyboardToken)+0x4a>
c000a0da:	8b 0d 88 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b688
c000a0e0:	83 ec 04             	sub    esp,0x4
c000a0e3:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a0e8:	83 ec 08             	sub    esp,0x8
c000a0eb:	89 e2                	mov    edx,esp
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	89 02                	mov    DWORD PTR [edx],eax
c000a0f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a0f5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0f9:	ff d1                	call   ecx
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a102:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a105:	0f b6 c0             	movzx  eax,al
c000a108:	85 c0                	test   eax,eax
c000a10a:	0f 84 da 00 00 00    	je     c000a1ea <sendKeyboardToken(KeyboardToken)+0x136>
c000a110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a113:	0f b7 c0             	movzx  eax,ax
c000a116:	3d 18 03 00 00       	cmp    eax,0x318
c000a11b:	75 06                	jne    c000a123 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a11d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a126:	0f b7 c0             	movzx  eax,ax
c000a129:	3d 19 03 00 00       	cmp    eax,0x319
c000a12e:	75 06                	jne    c000a136 <sendKeyboardToken(KeyboardToken)+0x82>
c000a130:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a139:	0f b7 c0             	movzx  eax,ax
c000a13c:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a141:	75 06                	jne    c000a149 <sendKeyboardToken(KeyboardToken)+0x95>
c000a143:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14c:	0f b7 c0             	movzx  eax,ax
c000a14f:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a154:	75 06                	jne    c000a15c <sendKeyboardToken(KeyboardToken)+0xa8>
c000a156:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a15c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a15f:	0f b7 c0             	movzx  eax,ax
c000a162:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a167:	75 06                	jne    c000a16f <sendKeyboardToken(KeyboardToken)+0xbb>
c000a169:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a172:	0f b7 c0             	movzx  eax,ax
c000a175:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a17a:	75 06                	jne    c000a182 <sendKeyboardToken(KeyboardToken)+0xce>
c000a17c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a185:	0f b7 c0             	movzx  eax,ax
c000a188:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a18d:	75 06                	jne    c000a195 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a18f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a198:	0f b7 c0             	movzx  eax,ax
c000a19b:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a1a0:	75 06                	jne    c000a1a8 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a1a2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a1a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ab:	0f b7 c0             	movzx  eax,ax
c000a1ae:	3d 20 03 00 00       	cmp    eax,0x320
c000a1b3:	75 06                	jne    c000a1bb <sendKeyboardToken(KeyboardToken)+0x107>
c000a1b5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a1bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1be:	0f b7 c0             	movzx  eax,ax
c000a1c1:	3d 21 03 00 00       	cmp    eax,0x321
c000a1c6:	75 06                	jne    c000a1ce <sendKeyboardToken(KeyboardToken)+0x11a>
c000a1c8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a1ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d1:	0f b7 c0             	movzx  eax,ax
c000a1d4:	3d 22 03 00 00       	cmp    eax,0x322
c000a1d9:	0f 85 f1 00 00 00    	jne    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1df:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a1e5:	e9 e6 00 00 00       	jmp    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ed:	0f b7 c0             	movzx  eax,ax
c000a1f0:	3d 18 03 00 00       	cmp    eax,0x318
c000a1f5:	75 0a                	jne    c000a201 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a1f7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a204:	0f b7 c0             	movzx  eax,ax
c000a207:	3d 19 03 00 00       	cmp    eax,0x319
c000a20c:	75 0a                	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x164>
c000a20e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a214:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21b:	0f b7 c0             	movzx  eax,ax
c000a21e:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a223:	75 0a                	jne    c000a22f <sendKeyboardToken(KeyboardToken)+0x17b>
c000a225:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a22b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a232:	0f b7 c0             	movzx  eax,ax
c000a235:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a23a:	75 0a                	jne    c000a246 <sendKeyboardToken(KeyboardToken)+0x192>
c000a23c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a242:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a249:	0f b7 c0             	movzx  eax,ax
c000a24c:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a251:	75 0a                	jne    c000a25d <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a253:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a259:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a260:	0f b7 c0             	movzx  eax,ax
c000a263:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a268:	75 0a                	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a26a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a270:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a277:	0f b7 c0             	movzx  eax,ax
c000a27a:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a27f:	75 0a                	jne    c000a28b <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a281:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a287:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a28b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a28e:	0f b7 c0             	movzx  eax,ax
c000a291:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a296:	75 0a                	jne    c000a2a2 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a298:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a29e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2a5:	0f b7 c0             	movzx  eax,ax
c000a2a8:	3d 20 03 00 00       	cmp    eax,0x320
c000a2ad:	75 0a                	jne    c000a2b9 <sendKeyboardToken(KeyboardToken)+0x205>
c000a2af:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a2b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2bc:	0f b7 c0             	movzx  eax,ax
c000a2bf:	3d 21 03 00 00       	cmp    eax,0x321
c000a2c4:	75 0a                	jne    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a2c6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a2cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2d3:	0f b7 c0             	movzx  eax,ax
c000a2d6:	3d 00 02 00 00       	cmp    eax,0x200
c000a2db:	75 2f                	jne    c000a30c <sendKeyboardToken(KeyboardToken)+0x258>
c000a2dd:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a2e2:	83 f0 01             	xor    eax,0x1
c000a2e5:	0f b6 c0             	movzx  eax,al
c000a2e8:	85 c0                	test   eax,eax
c000a2ea:	74 20                	je     c000a30c <sendKeyboardToken(KeyboardToken)+0x258>
c000a2ec:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000a2f1:	6a 01                	push   0x1
c000a2f3:	6a 00                	push   0x0
c000a2f5:	68 14 9f 00 c0       	push   0xc0009f14
c000a2fa:	50                   	push   eax
c000a2fb:	e8 50 c8 00 00       	call   c0016b50 <Process::createThread(void (*)(void*), void*, int)>
c000a300:	83 c4 10             	add    esp,0x10
c000a303:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a30a:	eb 3a                	jmp    c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a30c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a30f:	0f b7 c0             	movzx  eax,ax
c000a312:	3d 01 02 00 00       	cmp    eax,0x201
c000a317:	75 2d                	jne    c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a319:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a31e:	83 f0 01             	xor    eax,0x1
c000a321:	0f b6 c0             	movzx  eax,al
c000a324:	85 c0                	test   eax,eax
c000a326:	74 1e                	je     c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a328:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000a32d:	6a 01                	push   0x1
c000a32f:	6a 00                	push   0x0
c000a331:	68 79 9f 00 c0       	push   0xc0009f79
c000a336:	50                   	push   eax
c000a337:	e8 14 c8 00 00       	call   c0016b50 <Process::createThread(void (*)(void*), void*, int)>
c000a33c:	83 c4 10             	add    esp,0x10
c000a33f:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a349:	0f b7 c0             	movzx  eax,ax
c000a34c:	3d 25 03 00 00       	cmp    eax,0x325
c000a351:	75 06                	jne    c000a359 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a353:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a35c:	0f b7 c0             	movzx  eax,ax
c000a35f:	3d 24 03 00 00       	cmp    eax,0x324
c000a364:	75 06                	jne    c000a36c <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a366:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a36c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a36f:	0f b7 c0             	movzx  eax,ax
c000a372:	3d 23 03 00 00       	cmp    eax,0x323
c000a377:	75 06                	jne    c000a37f <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a379:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a37f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a382:	0f b7 c0             	movzx  eax,ax
c000a385:	3d 26 03 00 00       	cmp    eax,0x326
c000a38a:	75 06                	jne    c000a392 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a38c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a395:	0f b7 c0             	movzx  eax,ax
c000a398:	3d 27 03 00 00       	cmp    eax,0x327
c000a39d:	75 06                	jne    c000a3a5 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a39f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3a8:	0f b7 c0             	movzx  eax,ax
c000a3ab:	3d 22 03 00 00       	cmp    eax,0x322
c000a3b0:	75 06                	jne    c000a3b8 <sendKeyboardToken(KeyboardToken)+0x304>
c000a3b2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a3b8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a3bc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a3bf:	83 f0 01             	xor    eax,0x1
c000a3c2:	0f b6 c0             	movzx  eax,al
c000a3c5:	85 c0                	test   eax,eax
c000a3c7:	74 7c                	je     c000a445 <sendKeyboardToken(KeyboardToken)+0x391>
c000a3c9:	a0 a1 b7 02 c0       	mov    al,ds:0xc002b7a1
c000a3ce:	0f b6 c0             	movzx  eax,al
c000a3d1:	85 c0                	test   eax,eax
c000a3d3:	74 43                	je     c000a418 <sendKeyboardToken(KeyboardToken)+0x364>
c000a3d5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3d9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a3dd:	85 c0                	test   eax,eax
c000a3df:	74 2b                	je     c000a40c <sendKeyboardToken(KeyboardToken)+0x358>
c000a3e1:	8b 15 a4 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002baa4
c000a3e7:	89 d0                	mov    eax,edx
c000a3e9:	c1 e0 02             	shl    eax,0x2
c000a3ec:	01 d0                	add    eax,edx
c000a3ee:	01 c0                	add    eax,eax
c000a3f0:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a3f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f8:	0f b7 c0             	movzx  eax,ax
c000a3fb:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3fe:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a403:	01 d0                	add    eax,edx
c000a405:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a40a:	eb 71                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a40c:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a416:	eb 65                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a418:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a41d:	85 c0                	test   eax,eax
c000a41f:	74 18                	je     c000a439 <sendKeyboardToken(KeyboardToken)+0x385>
c000a421:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a426:	0f b6 c0             	movzx  eax,al
c000a429:	83 ec 0c             	sub    esp,0xc
c000a42c:	50                   	push   eax
c000a42d:	e8 ac fb ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a432:	83 c4 10             	add    esp,0x10
c000a435:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a439:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a443:	eb 38                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a448:	0f b7 c0             	movzx  eax,ax
c000a44b:	3d 01 01 00 00       	cmp    eax,0x101
c000a450:	75 2b                	jne    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a452:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a457:	85 c0                	test   eax,eax
c000a459:	74 18                	je     c000a473 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a45b:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a460:	0f b6 c0             	movzx  eax,al
c000a463:	83 ec 0c             	sub    esp,0xc
c000a466:	50                   	push   eax
c000a467:	e8 72 fb ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a46c:	83 c4 10             	add    esp,0x10
c000a46f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a473:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a47d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a480:	83 f0 01             	xor    eax,0x1
c000a483:	0f b6 c0             	movzx  eax,al
c000a486:	85 c0                	test   eax,eax
c000a488:	74 5a                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a48a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a48d:	83 f0 01             	xor    eax,0x1
c000a490:	0f b6 c0             	movzx  eax,al
c000a493:	85 c0                	test   eax,eax
c000a495:	74 4d                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a497:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a49c:	83 f0 01             	xor    eax,0x1
c000a49f:	0f b6 c0             	movzx  eax,al
c000a4a2:	85 c0                	test   eax,eax
c000a4a4:	74 3e                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4a9:	0f b7 c0             	movzx  eax,ax
c000a4ac:	83 f8 1f             	cmp    eax,0x1f
c000a4af:	76 0b                	jbe    c000a4bc <sendKeyboardToken(KeyboardToken)+0x408>
c000a4b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b4:	0f b7 c0             	movzx  eax,ax
c000a4b7:	83 f8 7e             	cmp    eax,0x7e
c000a4ba:	76 16                	jbe    c000a4d2 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bf:	0f b7 c0             	movzx  eax,ax
c000a4c2:	83 f8 0a             	cmp    eax,0xa
c000a4c5:	74 0b                	je     c000a4d2 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4ca:	0f b7 c0             	movzx  eax,ax
c000a4cd:	83 f8 08             	cmp    eax,0x8
c000a4d0:	75 12                	jne    c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d5:	0f b6 c0             	movzx  eax,al
c000a4d8:	83 ec 0c             	sub    esp,0xc
c000a4db:	50                   	push   eax
c000a4dc:	e8 fd fa ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a4e1:	83 c4 10             	add    esp,0x10
c000a4e4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a4e7:	83 f0 01             	xor    eax,0x1
c000a4ea:	0f b6 c0             	movzx  eax,al
c000a4ed:	85 c0                	test   eax,eax
c000a4ef:	74 5d                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4f4:	83 f0 01             	xor    eax,0x1
c000a4f7:	0f b6 c0             	movzx  eax,al
c000a4fa:	85 c0                	test   eax,eax
c000a4fc:	74 50                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4fe:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a503:	0f b6 c0             	movzx  eax,al
c000a506:	85 c0                	test   eax,eax
c000a508:	74 44                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a50a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a50d:	0f b7 c0             	movzx  eax,ax
c000a510:	83 f8 3f             	cmp    eax,0x3f
c000a513:	76 39                	jbe    c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a518:	0f b7 c0             	movzx  eax,ax
c000a51b:	83 f8 7f             	cmp    eax,0x7f
c000a51e:	77 2e                	ja     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a523:	88 c2                	mov    dl,al
c000a525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a528:	0f b7 c0             	movzx  eax,ax
c000a52b:	83 f8 5f             	cmp    eax,0x5f
c000a52e:	76 04                	jbe    c000a534 <sendKeyboardToken(KeyboardToken)+0x480>
c000a530:	b0 20                	mov    al,0x20
c000a532:	eb 02                	jmp    c000a536 <sendKeyboardToken(KeyboardToken)+0x482>
c000a534:	b0 00                	mov    al,0x0
c000a536:	89 d1                	mov    ecx,edx
c000a538:	29 c1                	sub    ecx,eax
c000a53a:	89 c8                	mov    eax,ecx
c000a53c:	83 e8 40             	sub    eax,0x40
c000a53f:	0f b6 c0             	movzx  eax,al
c000a542:	83 ec 0c             	sub    esp,0xc
c000a545:	50                   	push   eax
c000a546:	e8 93 fa ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a551:	0f b7 c0             	movzx  eax,ax
c000a554:	3d 00 03 00 00       	cmp    eax,0x300
c000a559:	75 12                	jne    c000a56d <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a55b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a55e:	83 f0 01             	xor    eax,0x1
c000a561:	0f b6 c0             	movzx  eax,al
c000a564:	85 c0                	test   eax,eax
c000a566:	74 05                	je     c000a56d <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a568:	e8 d0 7b 00 00       	call   c001213d <doTerminalCycle()>
c000a56d:	90                   	nop
c000a56e:	c9                   	leave  
c000a56f:	c3                   	ret    

c000a570 <clearInternalKeybuffer(VgaText*)>:
c000a570:	55                   	push   ebp
c000a571:	89 e5                	mov    ebp,esp
c000a573:	83 ec 08             	sub    esp,0x8
c000a576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a579:	05 02 01 00 00       	add    eax,0x102
c000a57e:	83 ec 0c             	sub    esp,0xc
c000a581:	50                   	push   eax
c000a582:	e8 e9 5f ff ff       	call   c0000570 <strlen>
c000a587:	83 c4 10             	add    esp,0x10
c000a58a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a58d:	81 c2 02 01 00 00    	add    edx,0x102
c000a593:	83 ec 04             	sub    esp,0x4
c000a596:	50                   	push   eax
c000a597:	6a 00                	push   0x0
c000a599:	52                   	push   edx
c000a59a:	e8 51 5f ff ff       	call   c00004f0 <memset>
c000a59f:	83 c4 10             	add    esp,0x10
c000a5a2:	90                   	nop
c000a5a3:	c9                   	leave  
c000a5a4:	c3                   	ret    

c000a5a5 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a5a5:	55                   	push   ebp
c000a5a6:	89 e5                	mov    ebp,esp
c000a5a8:	83 ec 18             	sub    esp,0x18
c000a5ab:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a5b0:	85 c0                	test   eax,eax
c000a5b2:	74 2a                	je     c000a5de <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a5b4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a5ba:	8b 0d 88 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b688
c000a5c0:	83 ec 04             	sub    esp,0x4
c000a5c3:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a5c8:	83 ec 08             	sub    esp,0x8
c000a5cb:	89 e2                	mov    edx,esp
c000a5cd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a5d0:	89 02                	mov    DWORD PTR [edx],eax
c000a5d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a5d5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a5d9:	ff d1                	call   ecx
c000a5db:	83 c4 10             	add    esp,0x10
c000a5de:	fb                   	sti    
c000a5df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a5e6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a5ea:	0f 84 08 01 00 00    	je     c000a6f8 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a5f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5f3:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5f9:	0f be c0             	movsx  eax,al
c000a5fc:	85 c0                	test   eax,eax
c000a5fe:	75 27                	jne    c000a627 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a600:	fa                   	cli    
c000a601:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a606:	83 c0 01             	add    eax,0x1
c000a609:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000a60e:	e8 fd c7 00 00       	call   c0016e10 <schedule()>
c000a613:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000a61b:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a620:	85 c0                	test   eax,eax
c000a622:	75 cc                	jne    c000a5f0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a624:	fb                   	sti    
c000a625:	eb c9                	jmp    c000a5f0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a627:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a62a:	8d 50 01             	lea    edx,[eax+0x1]
c000a62d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a630:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a633:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a639:	88 10                	mov    BYTE PTR [eax],dl
c000a63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a63e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a644:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a647:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a64b:	83 f8 03             	cmp    eax,0x3
c000a64e:	75 1e                	jne    c000a66e <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a650:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a655:	8b 00                	mov    eax,DWORD PTR [eax]
c000a657:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a65a:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a660:	83 ec 08             	sub    esp,0x8
c000a663:	6a 02                	push   0x2
c000a665:	50                   	push   eax
c000a666:	e8 40 69 00 00       	call   c0010fab <KeRaiseSignal(SigHandlerBlock*, int)>
c000a66b:	83 c4 10             	add    esp,0x10
c000a66e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a672:	83 f8 1c             	cmp    eax,0x1c
c000a675:	75 1e                	jne    c000a695 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a677:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a67c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a67e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a681:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a687:	83 ec 08             	sub    esp,0x8
c000a68a:	6a 09                	push   0x9
c000a68c:	50                   	push   eax
c000a68d:	e8 19 69 00 00       	call   c0010fab <KeRaiseSignal(SigHandlerBlock*, int)>
c000a692:	83 c4 10             	add    esp,0x10
c000a695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a698:	05 02 01 00 00       	add    eax,0x102
c000a69d:	83 ec 0c             	sub    esp,0xc
c000a6a0:	50                   	push   eax
c000a6a1:	e8 ca 5e ff ff       	call   c0000570 <strlen>
c000a6a6:	83 c4 10             	add    esp,0x10
c000a6a9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a6ac:	81 c2 02 01 00 00    	add    edx,0x102
c000a6b2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a6b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a6b8:	81 c2 02 01 00 00    	add    edx,0x102
c000a6be:	83 ec 04             	sub    esp,0x4
c000a6c1:	50                   	push   eax
c000a6c2:	51                   	push   ecx
c000a6c3:	52                   	push   edx
c000a6c4:	e8 07 5d ff ff       	call   c00003d0 <memmove>
c000a6c9:	83 c4 10             	add    esp,0x10
c000a6cc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a6d0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a6d4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6d8:	83 f8 0a             	cmp    eax,0xa
c000a6db:	74 16                	je     c000a6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6dd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6e1:	83 f8 03             	cmp    eax,0x3
c000a6e4:	74 0d                	je     c000a6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6e6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6ea:	83 f8 1c             	cmp    eax,0x1c
c000a6ed:	0f 85 f3 fe ff ff    	jne    c000a5e6 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a6f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6f6:	eb 03                	jmp    c000a6fb <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6fb:	c9                   	leave  
c000a6fc:	c3                   	ret    
c000a6fd:	90                   	nop

c000a6fe <Keyboard::Keyboard(char const*)>:
c000a6fe:	83 ec 0c             	sub    esp,0xc
c000a701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a705:	83 ec 08             	sub    esp,0x8
c000a708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70c:	50                   	push   eax
c000a70d:	e8 a4 f4 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a712:	83 c4 10             	add    esp,0x10
c000a715:	ba a0 37 02 c0       	mov    edx,0xc00237a0
c000a71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a71e:	89 10                	mov    DWORD PTR [eax],edx
c000a720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a724:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a72e:	c6 05 84 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b684,0x1
c000a735:	90                   	nop
c000a736:	83 c4 0c             	add    esp,0xc
c000a739:	c3                   	ret    

c000a73a <Keyboard::~Keyboard()>:
c000a73a:	83 ec 0c             	sub    esp,0xc
c000a73d:	ba a0 37 02 c0       	mov    edx,0xc00237a0
c000a742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a746:	89 10                	mov    DWORD PTR [eax],edx
c000a748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74c:	83 ec 0c             	sub    esp,0xc
c000a74f:	50                   	push   eax
c000a750:	e8 01 f2 ff ff       	call   c0009956 <Device::~Device()>
c000a755:	83 c4 10             	add    esp,0x10
c000a758:	90                   	nop
c000a759:	83 c4 0c             	add    esp,0xc
c000a75c:	c3                   	ret    
c000a75d:	90                   	nop

c000a75e <Keyboard::~Keyboard()>:
c000a75e:	83 ec 0c             	sub    esp,0xc
c000a761:	83 ec 0c             	sub    esp,0xc
c000a764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a768:	e8 cd ff ff ff       	call   c000a73a <Keyboard::~Keyboard()>
c000a76d:	83 c4 10             	add    esp,0x10
c000a770:	83 ec 08             	sub    esp,0x8
c000a773:	68 5c 01 00 00       	push   0x15c
c000a778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a77c:	e8 2f 2c 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	83 c4 0c             	add    esp,0xc
c000a787:	c3                   	ret    

c000a788 <LogicalDisk::close(int, int, void*)>:
c000a788:	83 c8 ff             	or     eax,0xffffffff
c000a78b:	c3                   	ret    

c000a78c <LogicalDisk::~LogicalDisk()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba 18 38 02 c0       	mov    edx,0xc0023818
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 af f1 ff ff       	call   c0009956 <Device::~Device()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <LogicalDisk::~LogicalDisk()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <LogicalDisk::~LogicalDisk()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 78 01 00 00       	push   0x178
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 dd 2b 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <LogicalDisk::open(int, int, void*)>:
c000a7da:	83 ec 18             	sub    esp,0x18
c000a7dd:	68 cc 37 02 c0       	push   0xc00237cc
c000a7e2:	e8 0d 55 00 00       	call   c000fcf4 <KePanic(char const*)>
c000a7e7:	83 c8 ff             	or     eax,0xffffffff
c000a7ea:	83 c4 1c             	add    esp,0x1c
c000a7ed:	c3                   	ret    

c000a7ee <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a7ee:	53                   	push   ebx
c000a7ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a7f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a7f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7fb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a801:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a807:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a80d:	77 10                	ja     c000a81f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a80f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a815:	89 d3                	mov    ebx,edx
c000a817:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a81d:	72 05                	jb     c000a824 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a81f:	83 c8 ff             	or     eax,0xffffffff
c000a822:	89 c2                	mov    edx,eax
c000a824:	5b                   	pop    ebx
c000a825:	c3                   	ret    

c000a826 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a826:	56                   	push   esi
c000a827:	83 c8 ff             	or     eax,0xffffffff
c000a82a:	53                   	push   ebx
c000a82b:	89 c2                	mov    edx,eax
c000a82d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a831:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a835:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a839:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a83f:	77 27                	ja     c000a868 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a841:	89 d8                	mov    eax,ebx
c000a843:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a849:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a84f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a854:	89 c2                	mov    edx,eax
c000a856:	73 10                	jae    c000a868 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a858:	89 c8                	mov    eax,ecx
c000a85a:	89 da                	mov    edx,ebx
c000a85c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a862:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a868:	5b                   	pop    ebx
c000a869:	5e                   	pop    esi
c000a86a:	c3                   	ret    
c000a86b:	90                   	nop

c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a86c:	83 ec 1c             	sub    esp,0x1c
c000a86f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a87b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a87f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a883:	89 04 24             	mov    DWORD PTR [esp],eax
c000a886:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a88a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a88e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a892:	83 ec 08             	sub    esp,0x8
c000a895:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a899:	50                   	push   eax
c000a89a:	e8 17 f3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a89f:	83 c4 10             	add    esp,0x10
c000a8a2:	ba 18 38 02 c0       	mov    edx,0xc0023818
c000a8a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ab:	89 10                	mov    DWORD PTR [eax],edx
c000a8ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8bc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d2:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a8dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a8e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a8e8:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a8ee:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a8f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8ff:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a905:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a90f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a913:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a927:	90                   	nop
c000a928:	83 c4 1c             	add    esp,0x1c
c000a92b:	c3                   	ret    

c000a92c <LogicalDisk::assignDriveLetter()>:
c000a92c:	55                   	push   ebp
c000a92d:	57                   	push   edi
c000a92e:	56                   	push   esi
c000a92f:	53                   	push   ebx
c000a930:	83 ec 14             	sub    esp,0x14
c000a933:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a937:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a93d:	b0 41                	mov    al,0x41
c000a93f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a945:	84 d2                	test   dl,dl
c000a947:	75 02                	jne    c000a94b <LogicalDisk::assignDriveLetter()+0x1f>
c000a949:	b0 43                	mov    al,0x43
c000a94b:	8b 3d c0 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac0
c000a951:	0f b6 ca             	movzx  ecx,dl
c000a954:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a958:	0f be e8             	movsx  ebp,al
c000a95b:	8b 3d c4 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac4
c000a961:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a965:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a969:	3c 43                	cmp    al,0x43
c000a96b:	75 10                	jne    c000a97d <LogicalDisk::assignDriveLetter()+0x51>
c000a96d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a974:	75 5a                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a976:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a97b:	75 53                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a97d:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a980:	ba 01 00 00 00       	mov    edx,0x1
c000a985:	89 34 24             	mov    DWORD PTR [esp],esi
c000a988:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a98b:	d3 e2                	shl    edx,cl
c000a98d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a991:	89 d7                	mov    edi,edx
c000a993:	89 d6                	mov    esi,edx
c000a995:	c1 ff 1f             	sar    edi,0x1f
c000a998:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a99c:	21 f9                	and    ecx,edi
c000a99e:	09 d1                	or     ecx,edx
c000a9a0:	75 2e                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a9a2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a9a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9aa:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a9b0:	09 f2                	or     edx,esi
c000a9b2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a9b5:	89 15 c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,edx
c000a9bb:	89 1c b5 e0 ba 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4520],ebx
c000a9c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9c6:	09 fa                	or     edx,edi
c000a9c8:	89 15 c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,edx
c000a9ce:	eb 0d                	jmp    c000a9dd <LogicalDisk::assignDriveLetter()+0xb1>
c000a9d0:	8d 50 01             	lea    edx,[eax+0x1]
c000a9d3:	45                   	inc    ebp
c000a9d4:	88 d0                	mov    al,dl
c000a9d6:	80 fa 5b             	cmp    dl,0x5b
c000a9d9:	75 8e                	jne    c000a969 <LogicalDisk::assignDriveLetter()+0x3d>
c000a9db:	31 c0                	xor    eax,eax
c000a9dd:	83 c4 14             	add    esp,0x14
c000a9e0:	5b                   	pop    ebx
c000a9e1:	5e                   	pop    esi
c000a9e2:	5f                   	pop    edi
c000a9e3:	5d                   	pop    ebp
c000a9e4:	c3                   	ret    
c000a9e5:	90                   	nop

c000a9e6 <LogicalDisk::mount()>:
c000a9e6:	56                   	push   esi
c000a9e7:	53                   	push   ebx
c000a9e8:	53                   	push   ebx
c000a9e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a9ed:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c000a9f3:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9fd:	85 db                	test   ebx,ebx
c000a9ff:	74 27                	je     c000aa28 <LogicalDisk::mount()+0x42>
c000aa01:	51                   	push   ecx
c000aa02:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000aa09:	8b 13                	mov    edx,DWORD PTR [ebx]
c000aa0b:	83 e8 41             	sub    eax,0x41
c000aa0e:	50                   	push   eax
c000aa0f:	56                   	push   esi
c000aa10:	53                   	push   ebx
c000aa11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	84 c0                	test   al,al
c000aa19:	74 08                	je     c000aa23 <LogicalDisk::mount()+0x3d>
c000aa1b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000aa21:	eb 07                	jmp    c000aa2a <LogicalDisk::mount()+0x44>
c000aa23:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000aa26:	eb d5                	jmp    c000a9fd <LogicalDisk::mount()+0x17>
c000aa28:	31 c0                	xor    eax,eax
c000aa2a:	5a                   	pop    edx
c000aa2b:	5b                   	pop    ebx
c000aa2c:	5e                   	pop    esi
c000aa2d:	c3                   	ret    

c000aa2e <LogicalDisk::unmount()>:
c000aa2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa32:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000aa3c:	c3                   	ret    
c000aa3d:	90                   	nop

c000aa3e <LogicalDisk::eject()>:
c000aa3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000aa48:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa4e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000aa51:	90                   	nop

c000aa52 <LogicalDisk::unassignDriveLetter()>:
c000aa52:	57                   	push   edi
c000aa53:	56                   	push   esi
c000aa54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa58:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa5f:	85 c9                	test   ecx,ecx
c000aa61:	75 0f                	jne    c000aa72 <LogicalDisk::unassignDriveLetter()+0x20>
c000aa63:	c7 44 24 0c f0 37 02 c0 	mov    DWORD PTR [esp+0xc],0xc00237f0
c000aa6b:	5e                   	pop    esi
c000aa6c:	5f                   	pop    edi
c000aa6d:	e9 82 52 00 00       	jmp    c000fcf4 <KePanic(char const*)>
c000aa72:	83 e9 41             	sub    ecx,0x41
c000aa75:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa7c:	b8 01 00 00 00       	mov    eax,0x1
c000aa81:	c7 04 8d e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4520],0x0
c000aa8c:	d3 e0                	shl    eax,cl
c000aa8e:	89 c7                	mov    edi,eax
c000aa90:	f7 d0                	not    eax
c000aa92:	c1 ff 1f             	sar    edi,0x1f
c000aa95:	21 05 c0 ba 02 c0    	and    DWORD PTR ds:0xc002bac0,eax
c000aa9b:	89 fe                	mov    esi,edi
c000aa9d:	f7 d6                	not    esi
c000aa9f:	21 35 c4 ba 02 c0    	and    DWORD PTR ds:0xc002bac4,esi
c000aaa5:	5e                   	pop    esi
c000aaa6:	5f                   	pop    edi
c000aaa7:	c3                   	ret    

c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aaa8:	57                   	push   edi
c000aaa9:	56                   	push   esi
c000aaaa:	53                   	push   ebx
c000aaab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aaaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aab3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aabb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aac1:	77 41                	ja     c000ab04 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aac3:	99                   	cdq    
c000aac4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aaca:	01 c8                	add    eax,ecx
c000aacc:	11 da                	adc    edx,ebx
c000aace:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aad4:	19 d7                	sbb    edi,edx
c000aad6:	72 33                	jb     c000ab0b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aad8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aade:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aae4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aae8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aaec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aaf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafc:	5b                   	pop    ebx
c000aafd:	5e                   	pop    esi
c000aafe:	5f                   	pop    edi
c000aaff:	e9 a2 0b 00 00       	jmp    c000b6a6 <VCache::read(unsigned long long, int, void*)>
c000ab04:	b8 05 00 00 00       	mov    eax,0x5
c000ab09:	eb 05                	jmp    c000ab10 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ab0b:	b8 07 00 00 00       	mov    eax,0x7
c000ab10:	5b                   	pop    ebx
c000ab11:	5e                   	pop    esi
c000ab12:	5f                   	pop    edi
c000ab13:	c3                   	ret    

c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ab14:	57                   	push   edi
c000ab15:	56                   	push   esi
c000ab16:	53                   	push   ebx
c000ab17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ab1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ab23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ab2d:	77 41                	ja     c000ab70 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ab2f:	99                   	cdq    
c000ab30:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ab36:	01 c8                	add    eax,ecx
c000ab38:	11 da                	adc    edx,ebx
c000ab3a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ab40:	19 d7                	sbb    edi,edx
c000ab42:	72 33                	jb     c000ab77 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ab44:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ab4a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ab50:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ab54:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab58:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab68:	5b                   	pop    ebx
c000ab69:	5e                   	pop    esi
c000ab6a:	5f                   	pop    edi
c000ab6b:	e9 68 09 00 00       	jmp    c000b4d8 <VCache::write(unsigned long long, int, void*)>
c000ab70:	b8 05 00 00 00       	mov    eax,0x5
c000ab75:	eb 05                	jmp    c000ab7c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab77:	b8 07 00 00 00       	mov    eax,0x7
c000ab7c:	5b                   	pop    ebx
c000ab7d:	5e                   	pop    esi
c000ab7e:	5f                   	pop    edi
c000ab7f:	c3                   	ret    

c000ab80 <Mouse::Mouse(char const*)>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab87:	83 ec 08             	sub    esp,0x8
c000ab8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8e:	50                   	push   eax
c000ab8f:	e8 22 f0 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ab94:	83 c4 10             	add    esp,0x10
c000ab97:	ba 44 38 02 c0       	mov    edx,0xc0023844
c000ab9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba0:	89 10                	mov    DWORD PTR [eax],edx
c000aba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000abb0:	90                   	nop
c000abb1:	83 c4 0c             	add    esp,0xc
c000abb4:	c3                   	ret    
c000abb5:	90                   	nop
c000abb6:	66 90                	xchg   ax,ax

c000abb8 <Mouse::~Mouse()>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	ba 44 38 02 c0       	mov    edx,0xc0023844
c000abc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc4:	89 10                	mov    DWORD PTR [eax],edx
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	83 ec 0c             	sub    esp,0xc
c000abcd:	50                   	push   eax
c000abce:	e8 83 ed ff ff       	call   c0009956 <Device::~Device()>
c000abd3:	83 c4 10             	add    esp,0x10
c000abd6:	90                   	nop
c000abd7:	83 c4 0c             	add    esp,0xc
c000abda:	c3                   	ret    
c000abdb:	90                   	nop

c000abdc <Mouse::~Mouse()>:
c000abdc:	83 ec 0c             	sub    esp,0xc
c000abdf:	83 ec 0c             	sub    esp,0xc
c000abe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abe6:	e8 cd ff ff ff       	call   c000abb8 <Mouse::~Mouse()>
c000abeb:	83 c4 10             	add    esp,0x10
c000abee:	83 ec 08             	sub    esp,0x8
c000abf1:	68 58 01 00 00       	push   0x158
c000abf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abfa:	e8 b1 27 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000abff:	83 c4 10             	add    esp,0x10
c000ac02:	83 c4 0c             	add    esp,0xc
c000ac05:	c3                   	ret    

c000ac06 <NIC::getMAC()>:
c000ac06:	31 c0                	xor    eax,eax
c000ac08:	31 d2                	xor    edx,edx
c000ac0a:	c3                   	ret    
c000ac0b:	90                   	nop

c000ac0c <NIC::write(int, unsigned char*, int*)>:
c000ac0c:	b8 01 00 00 00       	mov    eax,0x1
c000ac11:	c3                   	ret    

c000ac12 <NIC::NIC(char const*)>:
c000ac12:	83 ec 0c             	sub    esp,0xc
c000ac15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac19:	83 ec 08             	sub    esp,0x8
c000ac1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac20:	50                   	push   eax
c000ac21:	e8 90 ef ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ac26:	83 c4 10             	add    esp,0x10
c000ac29:	ba 70 38 02 c0       	mov    edx,0xc0023870
c000ac2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac32:	89 10                	mov    DWORD PTR [eax],edx
c000ac34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac38:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ac42:	90                   	nop
c000ac43:	83 c4 0c             	add    esp,0xc
c000ac46:	c3                   	ret    
c000ac47:	90                   	nop

c000ac48 <NIC::~NIC()>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	ba 70 38 02 c0       	mov    edx,0xc0023870
c000ac50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac54:	89 10                	mov    DWORD PTR [eax],edx
c000ac56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac5a:	83 ec 0c             	sub    esp,0xc
c000ac5d:	50                   	push   eax
c000ac5e:	e8 f3 ec ff ff       	call   c0009956 <Device::~Device()>
c000ac63:	83 c4 10             	add    esp,0x10
c000ac66:	90                   	nop
c000ac67:	83 c4 0c             	add    esp,0xc
c000ac6a:	c3                   	ret    
c000ac6b:	90                   	nop

c000ac6c <NIC::~NIC()>:
c000ac6c:	83 ec 0c             	sub    esp,0xc
c000ac6f:	83 ec 0c             	sub    esp,0xc
c000ac72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac76:	e8 cd ff ff ff       	call   c000ac48 <NIC::~NIC()>
c000ac7b:	83 c4 10             	add    esp,0x10
c000ac7e:	83 ec 08             	sub    esp,0x8
c000ac81:	68 58 01 00 00       	push   0x158
c000ac86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac8a:	e8 21 27 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000ac8f:	83 c4 10             	add    esp,0x10
c000ac92:	83 c4 0c             	add    esp,0xc
c000ac95:	c3                   	ret    

c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac96:	55                   	push   ebp
c000ac97:	57                   	push   edi
c000ac98:	56                   	push   esi
c000ac99:	53                   	push   ebx
c000ac9a:	81 ec 28 01 00 00    	sub    esp,0x128
c000aca0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000aca7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000acae:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000acb5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000acbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000acc0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000acc4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000accb:	e8 e2 ef ff ff       	call   c0009cb2 <Device::getName()>
c000acd0:	5a                   	pop    edx
c000acd1:	59                   	pop    ecx
c000acd2:	50                   	push   eax
c000acd3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000acd7:	55                   	push   ebp
c000acd8:	e8 63 59 ff ff       	call   c0000640 <strcpy>
c000acdd:	5b                   	pop    ebx
c000acde:	58                   	pop    eax
c000acdf:	68 9c 38 02 c0       	push   0xc002389c
c000ace4:	55                   	push   ebp
c000ace5:	e8 56 5b ff ff       	call   c0000840 <strcat>
c000acea:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000acf1:	e8 a1 4b 00 00       	call   c000f897 <malloc>
c000acf6:	83 c4 0c             	add    esp,0xc
c000acf9:	89 c3                	mov    ebx,eax
c000acfb:	57                   	push   edi
c000acfc:	56                   	push   esi
c000acfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad05:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ad0c:	55                   	push   ebp
c000ad0d:	50                   	push   eax
c000ad0e:	e8 59 fb ff ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ad13:	83 c4 14             	add    esp,0x14
c000ad16:	53                   	push   ebx
c000ad17:	e8 10 fc ff ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c000ad1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ad1f:	e8 c2 fc ff ff       	call   c000a9e6 <LogicalDisk::mount()>
c000ad24:	58                   	pop    eax
c000ad25:	5a                   	pop    edx
c000ad26:	53                   	push   ebx
c000ad27:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ad2e:	e8 21 ed ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000ad33:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ad39:	5b                   	pop    ebx
c000ad3a:	5e                   	pop    esi
c000ad3b:	5f                   	pop    edi
c000ad3c:	5d                   	pop    ebp
c000ad3d:	c3                   	ret    

c000ad3e <createPartitionsForDisk(PhysicalDisk*)>:
c000ad3e:	55                   	push   ebp
c000ad3f:	57                   	push   edi
c000ad40:	56                   	push   esi
c000ad41:	53                   	push   ebx
c000ad42:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ad48:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ad4f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ad55:	3d 00 02 00 00       	cmp    eax,0x200
c000ad5a:	74 27                	je     c000ad83 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad5c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad62:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad68:	83 ec 10             	sub    esp,0x10
c000ad6b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad6f:	99                   	cdq    
c000ad70:	c1 e6 0a             	shl    esi,0xa
c000ad73:	52                   	push   edx
c000ad74:	89 fd                	mov    ebp,edi
c000ad76:	50                   	push   eax
c000ad77:	55                   	push   ebp
c000ad78:	56                   	push   esi
c000ad79:	e8 76 6c 01 00       	call   c00219f4 <__udivdi3>
c000ad7e:	e9 b9 00 00 00       	jmp    c000ae3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad83:	83 ec 0c             	sub    esp,0xc
c000ad86:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad88:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad8c:	56                   	push   esi
c000ad8d:	6a 01                	push   0x1
c000ad8f:	6a 00                	push   0x0
c000ad91:	6a 00                	push   0x0
c000ad93:	53                   	push   ebx
c000ad94:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad97:	83 c4 20             	add    esp,0x20
c000ad9a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ada2:	75 0a                	jne    c000adae <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ada4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000adac:	74 2c                	je     c000adda <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000adae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adb4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adc0:	83 ec 10             	sub    esp,0x10
c000adc3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000adc7:	89 f7                	mov    edi,esi
c000adc9:	c1 e0 0a             	shl    eax,0xa
c000adcc:	c1 ff 1f             	sar    edi,0x1f
c000adcf:	57                   	push   edi
c000add0:	56                   	push   esi
c000add1:	52                   	push   edx
c000add2:	50                   	push   eax
c000add3:	e8 1c 6c 01 00       	call   c00219f4 <__udivdi3>
c000add8:	eb 62                	jmp    c000ae3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000adda:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ade1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ade8:	89 cf                	mov    edi,ecx
c000adea:	83 e2 7f             	and    edx,0x7f
c000aded:	83 e7 7f             	and    edi,0x7f
c000adf0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000adf7:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000adfa:	83 e0 7f             	and    eax,0x7f
c000adfd:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ae00:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ae07:	83 e0 7f             	and    eax,0x7f
c000ae0a:	01 d0                	add    eax,edx
c000ae0c:	89 c5                	mov    ebp,eax
c000ae0e:	84 c0                	test   al,al
c000ae10:	74 41                	je     c000ae53 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000ae12:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ae18:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ae1e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae24:	83 ec 10             	sub    esp,0x10
c000ae27:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ae2b:	89 f7                	mov    edi,esi
c000ae2d:	c1 e0 0a             	shl    eax,0xa
c000ae30:	c1 ff 1f             	sar    edi,0x1f
c000ae33:	57                   	push   edi
c000ae34:	56                   	push   esi
c000ae35:	52                   	push   edx
c000ae36:	50                   	push   eax
c000ae37:	e8 b8 6b 01 00       	call   c00219f4 <__udivdi3>
c000ae3c:	83 c4 14             	add    esp,0x14
c000ae3f:	52                   	push   edx
c000ae40:	50                   	push   eax
c000ae41:	6a 00                	push   0x0
c000ae43:	6a 00                	push   0x0
c000ae45:	53                   	push   ebx
c000ae46:	e8 4b fe ff ff       	call   c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ae4b:	83 c4 20             	add    esp,0x20
c000ae4e:	e9 73 01 00 00       	jmp    c000afc6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ae53:	89 f0                	mov    eax,esi
c000ae55:	31 c9                	xor    ecx,ecx
c000ae57:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae5e:	75 02                	jne    c000ae62 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae60:	89 cd                	mov    ebp,ecx
c000ae62:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae69:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae70:	c1 e2 08             	shl    edx,0x8
c000ae73:	c1 e6 10             	shl    esi,0x10
c000ae76:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae7e:	09 f2                	or     edx,esi
c000ae80:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae88:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae8f:	83 c0 10             	add    eax,0x10
c000ae92:	09 f2                	or     edx,esi
c000ae94:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae9b:	c1 e6 18             	shl    esi,0x18
c000ae9e:	09 f2                	or     edx,esi
c000aea0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000aea7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000aeab:	c1 e6 10             	shl    esi,0x10
c000aeae:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000aeb5:	c1 e2 08             	shl    edx,0x8
c000aeb8:	09 f2                	or     edx,esi
c000aeba:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000aec1:	09 f2                	or     edx,esi
c000aec3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000aeca:	c1 e6 18             	shl    esi,0x18
c000aecd:	09 f2                	or     edx,esi
c000aecf:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000aed3:	41                   	inc    ecx
c000aed4:	83 f9 04             	cmp    ecx,0x4
c000aed7:	0f 85 7a ff ff ff    	jne    c000ae57 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000aedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee1:	83 f0 01             	xor    eax,0x1
c000aee4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000aee8:	75 4f                	jne    c000af39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aeea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeee:	83 f0 01             	xor    eax,0x1
c000aef1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000aef5:	75 42                	jne    c000af39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aef7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aeff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000af07:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000af0d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000af13:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000af19:	0f a4 c2 0a          	shld   edx,eax,0xa
c000af1d:	89 f7                	mov    edi,esi
c000af1f:	c1 e0 0a             	shl    eax,0xa
c000af22:	c1 ff 1f             	sar    edi,0x1f
c000af25:	57                   	push   edi
c000af26:	56                   	push   esi
c000af27:	52                   	push   edx
c000af28:	50                   	push   eax
c000af29:	e8 c6 6a 01 00       	call   c00219f4 <__udivdi3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000af35:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000af39:	89 e8                	mov    eax,ebp
c000af3b:	0f b6 e8             	movzx  ebp,al
c000af3e:	85 ed                	test   ebp,ebp
c000af40:	74 50                	je     c000af92 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000af42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000af4e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000af52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af5a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af5e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af66:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af6e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af72:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af76:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af7a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af82:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af86:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af8a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af8e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af92:	31 ed                	xor    ebp,ebp
c000af94:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af98:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af9c:	89 f8                	mov    eax,edi
c000af9e:	09 f0                	or     eax,esi
c000afa0:	74 1e                	je     c000afc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000afa2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000afa6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000afaa:	89 d1                	mov    ecx,edx
c000afac:	09 c1                	or     ecx,eax
c000afae:	74 10                	je     c000afc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	57                   	push   edi
c000afb4:	56                   	push   esi
c000afb5:	52                   	push   edx
c000afb6:	50                   	push   eax
c000afb7:	53                   	push   ebx
c000afb8:	e8 d9 fc ff ff       	call   c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000afbd:	83 c4 20             	add    esp,0x20
c000afc0:	45                   	inc    ebp
c000afc1:	83 fd 04             	cmp    ebp,0x4
c000afc4:	75 ce                	jne    c000af94 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000afc6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000afcc:	5b                   	pop    ebx
c000afcd:	5e                   	pop    esi
c000afce:	5f                   	pop    edi
c000afcf:	5d                   	pop    ebp
c000afd0:	c3                   	ret    
c000afd1:	66 90                	xchg   ax,ax
c000afd3:	90                   	nop

c000afd4 <Serial::Serial(char const*)>:
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afdb:	83 ec 08             	sub    esp,0x8
c000afde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe2:	50                   	push   eax
c000afe3:	e8 ce eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000afe8:	83 c4 10             	add    esp,0x10
c000afeb:	ba b0 38 02 c0       	mov    edx,0xc00238b0
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	89 10                	mov    DWORD PTR [eax],edx
c000aff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affa:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000b004:	90                   	nop
c000b005:	83 c4 0c             	add    esp,0xc
c000b008:	c3                   	ret    
c000b009:	90                   	nop
c000b00a:	66 90                	xchg   ax,ax

c000b00c <Serial::~Serial()>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	ba b0 38 02 c0       	mov    edx,0xc00238b0
c000b014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b018:	89 10                	mov    DWORD PTR [eax],edx
c000b01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	50                   	push   eax
c000b022:	e8 2f e9 ff ff       	call   c0009956 <Device::~Device()>
c000b027:	83 c4 10             	add    esp,0x10
c000b02a:	90                   	nop
c000b02b:	83 c4 0c             	add    esp,0xc
c000b02e:	c3                   	ret    
c000b02f:	90                   	nop

c000b030 <Serial::~Serial()>:
c000b030:	83 ec 0c             	sub    esp,0xc
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b03a:	e8 cd ff ff ff       	call   c000b00c <Serial::~Serial()>
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	83 ec 08             	sub    esp,0x8
c000b045:	68 58 01 00 00       	push   0x158
c000b04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b04e:	e8 5d 23 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	83 c4 0c             	add    esp,0xc
c000b059:	c3                   	ret    
c000b05a:	66 90                	xchg   ax,ax

c000b05c <Timer::Timer(char const*)>:
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b063:	83 ec 08             	sub    esp,0x8
c000b066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b06a:	50                   	push   eax
c000b06b:	e8 46 eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	ba 90 39 02 c0       	mov    edx,0xc0023990
c000b078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07c:	89 10                	mov    DWORD PTR [eax],edx
c000b07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b082:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b08c:	90                   	nop
c000b08d:	83 c4 0c             	add    esp,0xc
c000b090:	c3                   	ret    
c000b091:	90                   	nop
c000b092:	66 90                	xchg   ax,ax

c000b094 <Timer::~Timer()>:
c000b094:	83 ec 0c             	sub    esp,0xc
c000b097:	ba 90 39 02 c0       	mov    edx,0xc0023990
c000b09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a0:	89 10                	mov    DWORD PTR [eax],edx
c000b0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	50                   	push   eax
c000b0aa:	e8 a7 e8 ff ff       	call   c0009956 <Device::~Device()>
c000b0af:	83 c4 10             	add    esp,0x10
c000b0b2:	90                   	nop
c000b0b3:	83 c4 0c             	add    esp,0xc
c000b0b6:	c3                   	ret    
c000b0b7:	90                   	nop

c000b0b8 <Timer::~Timer()>:
c000b0b8:	83 ec 0c             	sub    esp,0xc
c000b0bb:	83 ec 0c             	sub    esp,0xc
c000b0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0c2:	e8 cd ff ff ff       	call   c000b094 <Timer::~Timer()>
c000b0c7:	83 c4 10             	add    esp,0x10
c000b0ca:	83 ec 08             	sub    esp,0x8
c000b0cd:	68 5c 01 00 00       	push   0x15c
c000b0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d6:	e8 d5 22 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 c4 0c             	add    esp,0xc
c000b0e1:	c3                   	ret    

c000b0e2 <Timer::read()>:
c000b0e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0ec:	c3                   	ret    

c000b0ed <setupTimer(int)>:
c000b0ed:	53                   	push   ebx
c000b0ee:	83 ec 14             	sub    esp,0x14
c000b0f1:	68 5c 01 00 00       	push   0x15c
c000b0f6:	e8 9c 47 00 00       	call   c000f897 <malloc>
c000b0fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0fe:	89 c3                	mov    ebx,eax
c000b100:	e8 a7 61 01 00       	call   c00212ac <PIT::PIT()>
c000b105:	58                   	pop    eax
c000b106:	5a                   	pop    edx
c000b107:	53                   	push   ebx
c000b108:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c000b10e:	e8 41 e9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000b113:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b115:	6a 00                	push   0x0
c000b117:	6a 00                	push   0x0
c000b119:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b11d:	53                   	push   ebx
c000b11e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b121:	89 d8                	mov    eax,ebx
c000b123:	83 c4 28             	add    esp,0x28
c000b126:	5b                   	pop    ebx
c000b127:	c3                   	ret    

c000b128 <timerHandler(unsigned int)>:
c000b128:	57                   	push   edi
c000b129:	31 d2                	xor    edx,edx
c000b12b:	56                   	push   esi
c000b12c:	53                   	push   ebx
c000b12d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b131:	01 1d 50 bb 02 c0    	add    DWORD PTR ds:0xc002bb50,ebx
c000b137:	11 15 54 bb 02 c0    	adc    DWORD PTR ds:0xc002bb54,edx
c000b13d:	80 3d 0d c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c10d,0x0
c000b144:	75 12                	jne    c000b158 <timerHandler(unsigned int)+0x30>
c000b146:	c7 44 24 10 3f 39 02 c0 	mov    DWORD PTR [esp+0x10],0xc002393f
c000b14e:	5b                   	pop    ebx
c000b14f:	5e                   	pop    esi
c000b150:	5f                   	pop    edi
c000b151:	e9 26 be ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000b156:	66 90                	xchg   ax,ax
c000b158:	fa                   	cli    
c000b159:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	68 80 ca 02 c0       	push   0xc002ca80
c000b167:	e8 20 6c 01 00       	call   c0021d8c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	84 c0                	test   al,al
c000b171:	0f 85 a9 00 00 00    	jne    c000b220 <timerHandler(unsigned int)+0xf8>
c000b177:	83 ec 0c             	sub    esp,0xc
c000b17a:	68 80 ca 02 c0       	push   0xc002ca80
c000b17f:	e8 24 6c 01 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	89 c6                	mov    esi,eax
c000b189:	8d 76 00             	lea    esi,[esi+0x0]
c000b18c:	83 ec 0c             	sub    esp,0xc
c000b18f:	68 80 ca 02 c0       	push   0xc002ca80
c000b194:	e8 0f 6c 01 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b199:	c7 04 24 80 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca80
c000b1a0:	89 c7                	mov    edi,eax
c000b1a2:	e8 09 6c 01 00       	call   c0021db0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b1a7:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b1b0:	39 15 50 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb50,edx
c000b1b6:	a1 54 bb 02 c0       	mov    eax,ds:0xc002bb54
c000b1bb:	19 c8                	sbb    eax,ecx
c000b1bd:	72 21                	jb     c000b1e0 <timerHandler(unsigned int)+0xb8>
c000b1bf:	83 ec 0c             	sub    esp,0xc
c000b1c2:	57                   	push   edi
c000b1c3:	e8 a4 bf 00 00       	call   c001716c <unblockTask(ThreadControlBlock*)>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	39 fe                	cmp    esi,edi
c000b1cd:	75 25                	jne    c000b1f4 <timerHandler(unsigned int)+0xcc>
c000b1cf:	83 ec 0c             	sub    esp,0xc
c000b1d2:	68 80 ca 02 c0       	push   0xc002ca80
c000b1d7:	e8 cc 6b 01 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1dc:	89 c6                	mov    esi,eax
c000b1de:	eb 10                	jmp    c000b1f0 <timerHandler(unsigned int)+0xc8>
c000b1e0:	51                   	push   ecx
c000b1e1:	51                   	push   ecx
c000b1e2:	57                   	push   edi
c000b1e3:	68 80 ca 02 c0       	push   0xc002ca80
c000b1e8:	e8 7f 6c 01 00       	call   c0021e6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	90                   	nop
c000b1f4:	83 ec 0c             	sub    esp,0xc
c000b1f7:	68 80 ca 02 c0       	push   0xc002ca80
c000b1fc:	e8 8b 6b 01 00       	call   c0021d8c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	84 c0                	test   al,al
c000b206:	75 18                	jne    c000b220 <timerHandler(unsigned int)+0xf8>
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	68 80 ca 02 c0       	push   0xc002ca80
c000b210:	e8 93 6b 01 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	39 f0                	cmp    eax,esi
c000b21a:	0f 85 6c ff ff ff    	jne    c000b18c <timerHandler(unsigned int)+0x64>
c000b220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b225:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b228:	85 c0                	test   eax,eax
c000b22a:	74 48                	je     c000b274 <timerHandler(unsigned int)+0x14c>
c000b22c:	80 3d 0c c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c10c,0x0
c000b233:	74 3f                	je     c000b274 <timerHandler(unsigned int)+0x14c>
c000b235:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b23a:	76 1c                	jbe    c000b258 <timerHandler(unsigned int)+0x130>
c000b23c:	52                   	push   edx
c000b23d:	52                   	push   edx
c000b23e:	50                   	push   eax
c000b23f:	68 55 39 02 c0       	push   0xc0023955
c000b244:	e8 33 bd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b24e:	83 c4 10             	add    esp,0x10
c000b251:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b258:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b25e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b261:	89 c1                	mov    ecx,eax
c000b263:	29 d9                	sub    ecx,ebx
c000b265:	39 d8                	cmp    eax,ebx
c000b267:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b26a:	77 08                	ja     c000b274 <timerHandler(unsigned int)+0x14c>
c000b26c:	e8 9f bb 00 00       	call   c0016e10 <schedule()>
c000b271:	8d 76 00             	lea    esi,[esi+0x0]
c000b274:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000b27b:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000b282:	75 04                	jne    c000b288 <timerHandler(unsigned int)+0x160>
c000b284:	fb                   	sti    
c000b285:	8d 76 00             	lea    esi,[esi+0x0]
c000b288:	5b                   	pop    ebx
c000b289:	5e                   	pop    esi
c000b28a:	5f                   	pop    edi
c000b28b:	c3                   	ret    

c000b28c <VCache::VCache(PhysicalDisk*)>:
c000b28c:	53                   	push   ebx
c000b28d:	83 ec 18             	sub    esp,0x18
c000b290:	ba 00 3a 02 c0       	mov    edx,0xc0023a00
c000b295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b299:	89 10                	mov    DWORD PTR [eax],edx
c000b29b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b29f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b2b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b2bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b2c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b2ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b2e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b2e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b2f3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b306:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b30e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b316:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b31d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b325:	83 ec 0c             	sub    esp,0xc
c000b328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b32c:	e8 66 45 00 00       	call   c000f897 <malloc>
c000b331:	83 c4 10             	add    esp,0x10
c000b334:	89 c3                	mov    ebx,eax
c000b336:	83 ec 0c             	sub    esp,0xc
c000b339:	53                   	push   ebx
c000b33a:	e8 95 49 00 00       	call   c000fcd4 <Mutex::Mutex()>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b346:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b34d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b351:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b358:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b35f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b363:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b374:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b37a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b380:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b384:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b387:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b38e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b392:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b396:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b39c:	05 00 01 00 00       	add    eax,0x100
c000b3a1:	c1 e0 04             	shl    eax,0x4
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	50                   	push   eax
c000b3a8:	e8 ea 44 00 00       	call   c000f897 <malloc>
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	89 c2                	mov    edx,eax
c000b3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3bd:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b3c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b3cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b3d6:	89 d0                	mov    eax,edx
c000b3d8:	c1 e0 02             	shl    eax,0x2
c000b3db:	01 d0                	add    eax,edx
c000b3dd:	c1 e0 04             	shl    eax,0x4
c000b3e0:	83 ec 0c             	sub    esp,0xc
c000b3e3:	50                   	push   eax
c000b3e4:	e8 ae 44 00 00       	call   c000f897 <malloc>
c000b3e9:	83 c4 10             	add    esp,0x10
c000b3ec:	89 c2                	mov    edx,eax
c000b3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3f2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b3f5:	90                   	nop
c000b3f6:	83 c4 18             	add    esp,0x18
c000b3f9:	5b                   	pop    ebx
c000b3fa:	c3                   	ret    
c000b3fb:	90                   	nop

c000b3fc <VCache::invalidateReadBuffer()>:
c000b3fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b400:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b406:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b40a:	c3                   	ret    
c000b40b:	90                   	nop

c000b40c <VCache::writeWriteBuffer()>:
c000b40c:	53                   	push   ebx
c000b40d:	83 ec 08             	sub    esp,0x8
c000b410:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b414:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b418:	74 1e                	je     c000b438 <VCache::writeWriteBuffer()+0x2c>
c000b41a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b41d:	83 ec 0c             	sub    esp,0xc
c000b420:	8b 10                	mov    edx,DWORD PTR [eax]
c000b422:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b425:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b428:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b42b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b42e:	50                   	push   eax
c000b42f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b432:	83 c4 20             	add    esp,0x20
c000b435:	8d 76 00             	lea    esi,[esi+0x0]
c000b438:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b43f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b446:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b44a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b451:	83 c4 08             	add    esp,0x8
c000b454:	5b                   	pop    ebx
c000b455:	c3                   	ret    
c000b456:	66 90                	xchg   ax,ax

c000b458 <VCache::~VCache()>:
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	ba 00 3a 02 c0       	mov    edx,0xc0023a00
c000b460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b464:	89 10                	mov    DWORD PTR [eax],edx
c000b466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b46d:	0f b6 c0             	movzx  eax,al
c000b470:	85 c0                	test   eax,eax
c000b472:	74 10                	je     c000b484 <VCache::~VCache()+0x2c>
c000b474:	83 ec 0c             	sub    esp,0xc
c000b477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47b:	e8 8c ff ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	90                   	nop
c000b484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b488:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b48b:	83 ec 0c             	sub    esp,0xc
c000b48e:	50                   	push   eax
c000b48f:	e8 13 44 00 00       	call   c000f8a7 <free>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b49e:	83 ec 0c             	sub    esp,0xc
c000b4a1:	50                   	push   eax
c000b4a2:	e8 00 44 00 00       	call   c000f8a7 <free>
c000b4a7:	83 c4 10             	add    esp,0x10
c000b4aa:	90                   	nop
c000b4ab:	83 c4 0c             	add    esp,0xc
c000b4ae:	c3                   	ret    
c000b4af:	90                   	nop

c000b4b0 <VCache::~VCache()>:
c000b4b0:	83 ec 0c             	sub    esp,0xc
c000b4b3:	83 ec 0c             	sub    esp,0xc
c000b4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ba:	e8 99 ff ff ff       	call   c000b458 <VCache::~VCache()>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	83 ec 08             	sub    esp,0x8
c000b4c5:	6a 44                	push   0x44
c000b4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cb:	e8 e0 1e 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000b4d0:	83 c4 10             	add    esp,0x10
c000b4d3:	83 c4 0c             	add    esp,0xc
c000b4d6:	c3                   	ret    
c000b4d7:	90                   	nop

c000b4d8 <VCache::write(unsigned long long, int, void*)>:
c000b4d8:	55                   	push   ebp
c000b4d9:	57                   	push   edi
c000b4da:	56                   	push   esi
c000b4db:	53                   	push   ebx
c000b4dc:	83 ec 1c             	sub    esp,0x1c
c000b4df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b4e3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b4e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b4eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b4ef:	e8 14 b6 00 00       	call   c0016b08 <KeDisablePreemption()>
c000b4f4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4f9:	50                   	push   eax
c000b4fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4fd:	0f af c3             	imul   eax,ebx
c000b500:	05 ff 0f 00 00       	add    eax,0xfff
c000b505:	99                   	cdq    
c000b506:	f7 f9                	idiv   ecx
c000b508:	50                   	push   eax
c000b509:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b50d:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b513:	e8 64 8b 00 00       	call   c001407c <VAS::canLockPages(unsigned long, int)>
c000b518:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b524:	74 2a                	je     c000b550 <VCache::write(unsigned long long, int, void*)+0x78>
c000b526:	b9 00 10 00 00       	mov    ecx,0x1000
c000b52b:	50                   	push   eax
c000b52c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b52f:	0f af c3             	imul   eax,ebx
c000b532:	05 ff 0f 00 00       	add    eax,0xfff
c000b537:	99                   	cdq    
c000b538:	f7 f9                	idiv   ecx
c000b53a:	50                   	push   eax
c000b53b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b53f:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b545:	e8 9c 8d 00 00       	call   c00142e6 <VAS::lockPages(unsigned long, int)>
c000b54a:	83 c4 10             	add    esp,0x10
c000b54d:	8d 76 00             	lea    esi,[esi+0x0]
c000b550:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b554:	74 0e                	je     c000b564 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b556:	83 ec 0c             	sub    esp,0xc
c000b559:	55                   	push   ebp
c000b55a:	e8 9d fe ff ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	66 90                	xchg   ax,ax
c000b564:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b568:	74 72                	je     c000b5dc <VCache::write(unsigned long long, int, void*)+0x104>
c000b56a:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b56d:	89 c8                	mov    eax,ecx
c000b56f:	99                   	cdq    
c000b570:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b573:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b576:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b582:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b586:	31 f0                	xor    eax,esi
c000b588:	31 fa                	xor    edx,edi
c000b58a:	09 d0                	or     eax,edx
c000b58c:	75 42                	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b58e:	83 fb 01             	cmp    ebx,0x1
c000b591:	75 3d                	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b596:	89 cf                	mov    edi,ecx
c000b598:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b59e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5a2:	0f af f8             	imul   edi,eax
c000b5a5:	89 c1                	mov    ecx,eax
c000b5a7:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b5aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5ac:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b5af:	40                   	inc    eax
c000b5b0:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b5b3:	83 f8 50             	cmp    eax,0x50
c000b5b6:	0f 85 a8 00 00 00    	jne    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	55                   	push   ebp
c000b5c0:	e8 47 fe ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b5c5:	83 c4 10             	add    esp,0x10
c000b5c8:	e9 97 00 00 00       	jmp    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b5d0:	83 ec 0c             	sub    esp,0xc
c000b5d3:	55                   	push   ebp
c000b5d4:	e8 33 fe ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5df:	83 fb 4f             	cmp    ebx,0x4f
c000b5e2:	7f 20                	jg     c000b604 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b5e4:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b5e7:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b5ea:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b5ed:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b5f1:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b5f4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5fa:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b600:	eb 62                	jmp    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b602:	66 90                	xchg   ax,ax
c000b604:	83 ec 0c             	sub    esp,0xc
c000b607:	8b 10                	mov    edx,DWORD PTR [eax]
c000b609:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b60d:	53                   	push   ebx
c000b60e:	57                   	push   edi
c000b60f:	56                   	push   esi
c000b610:	50                   	push   eax
c000b611:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b614:	83 c4 20             	add    esp,0x20
c000b617:	89 c6                	mov    esi,eax
c000b619:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b61e:	74 28                	je     c000b648 <VCache::write(unsigned long long, int, void*)+0x170>
c000b620:	b9 00 10 00 00       	mov    ecx,0x1000
c000b625:	52                   	push   edx
c000b626:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b62a:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b630:	99                   	cdq    
c000b631:	f7 f9                	idiv   ecx
c000b633:	50                   	push   eax
c000b634:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b638:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b63e:	e8 75 8a 00 00       	call   c00140b8 <VAS::unlockPages(unsigned long, int)>
c000b643:	83 c4 10             	add    esp,0x10
c000b646:	66 90                	xchg   ax,ax
c000b648:	e8 e3 b4 00 00       	call   c0016b30 <KeRestorePreemption()>
c000b64d:	85 f6                	test   esi,esi
c000b64f:	74 4b                	je     c000b69c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b651:	83 ec 0c             	sub    esp,0xc
c000b654:	68 b8 39 02 c0       	push   0xc00239b8
c000b659:	e8 1e b9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	eb 39                	jmp    c000b69c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b663:	90                   	nop
c000b664:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b669:	74 29                	je     c000b694 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b66b:	b9 00 10 00 00       	mov    ecx,0x1000
c000b670:	50                   	push   eax
c000b671:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b675:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b67b:	99                   	cdq    
c000b67c:	f7 f9                	idiv   ecx
c000b67e:	50                   	push   eax
c000b67f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b683:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b689:	e8 2a 8a 00 00       	call   c00140b8 <VAS::unlockPages(unsigned long, int)>
c000b68e:	83 c4 10             	add    esp,0x10
c000b691:	8d 76 00             	lea    esi,[esi+0x0]
c000b694:	e8 97 b4 00 00       	call   c0016b30 <KeRestorePreemption()>
c000b699:	31 f6                	xor    esi,esi
c000b69b:	90                   	nop
c000b69c:	83 c4 1c             	add    esp,0x1c
c000b69f:	89 f0                	mov    eax,esi
c000b6a1:	5b                   	pop    ebx
c000b6a2:	5e                   	pop    esi
c000b6a3:	5f                   	pop    edi
c000b6a4:	5d                   	pop    ebp
c000b6a5:	c3                   	ret    

c000b6a6 <VCache::read(unsigned long long, int, void*)>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	bf 00 10 00 00       	mov    edi,0x1000
c000b6ad:	56                   	push   esi
c000b6ae:	53                   	push   ebx
c000b6af:	83 ec 2c             	sub    esp,0x2c
c000b6b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b6b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b6ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6be:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b6c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b6ca:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b6ce:	e8 35 b4 00 00       	call   c0016b08 <KeDisablePreemption()>
c000b6d3:	50                   	push   eax
c000b6d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6d7:	0f af c6             	imul   eax,esi
c000b6da:	05 ff 0f 00 00       	add    eax,0xfff
c000b6df:	99                   	cdq    
c000b6e0:	f7 ff                	idiv   edi
c000b6e2:	50                   	push   eax
c000b6e3:	55                   	push   ebp
c000b6e4:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b6ea:	e8 8d 89 00 00       	call   c001407c <VAS::canLockPages(unsigned long, int)>
c000b6ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b6f3:	83 c4 10             	add    esp,0x10
c000b6f6:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b6fb:	74 1f                	je     c000b71c <VCache::read(unsigned long long, int, void*)+0x76>
c000b6fd:	50                   	push   eax
c000b6fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b701:	0f af c6             	imul   eax,esi
c000b704:	05 ff 0f 00 00       	add    eax,0xfff
c000b709:	99                   	cdq    
c000b70a:	f7 ff                	idiv   edi
c000b70c:	50                   	push   eax
c000b70d:	55                   	push   ebp
c000b70e:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b714:	e8 cd 8b 00 00       	call   c00142e6 <VAS::lockPages(unsigned long, int)>
c000b719:	83 c4 10             	add    esp,0x10
c000b71c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b720:	74 0e                	je     c000b730 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b722:	83 ec 0c             	sub    esp,0xc
c000b725:	53                   	push   ebx
c000b726:	e8 e1 fc ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b72b:	83 c4 10             	add    esp,0x10
c000b72e:	66 90                	xchg   ax,ax
c000b730:	83 fe 01             	cmp    esi,0x1
c000b733:	0f 85 ef 00 00 00    	jne    c000b828 <VCache::read(unsigned long long, int, void*)+0x182>
c000b739:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b73c:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b743:	0f 85 df 00 00 00    	jne    c000b828 <VCache::read(unsigned long long, int, void*)+0x182>
c000b749:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b74c:	89 fe                	mov    esi,edi
c000b74e:	f7 de                	neg    esi
c000b750:	89 f0                	mov    eax,esi
c000b752:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b756:	c1 f8 1f             	sar    eax,0x1f
c000b759:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b75d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b761:	89 f0                	mov    eax,esi
c000b763:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b767:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b76b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b76f:	89 f2                	mov    edx,esi
c000b771:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b776:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b77a:	74 0c                	je     c000b788 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b77c:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b77f:	75 07                	jne    c000b788 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b781:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b784:	74 4e                	je     c000b7d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b786:	66 90                	xchg   ax,ax
c000b788:	83 ec 0c             	sub    esp,0xc
c000b78b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b78f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b792:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b795:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b797:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b79a:	57                   	push   edi
c000b79b:	52                   	push   edx
c000b79c:	50                   	push   eax
c000b79d:	51                   	push   ecx
c000b79e:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b7a1:	83 c4 20             	add    esp,0x20
c000b7a4:	89 c7                	mov    edi,eax
c000b7a6:	85 c0                	test   eax,eax
c000b7a8:	74 2a                	je     c000b7d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	68 d0 39 02 c0       	push   0xc00239d0
c000b7b2:	e8 c5 b7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7bf:	0f 84 b3 00 00 00    	je     c000b878 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7c5:	51                   	push   ecx
c000b7c6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7c9:	05 ff 0f 00 00       	add    eax,0xfff
c000b7ce:	e9 8d 00 00 00       	jmp    c000b860 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b7d3:	90                   	nop
c000b7d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7d7:	89 ef                	mov    edi,ebp
c000b7d9:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b7df:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7e2:	8d 70 ff             	lea    esi,[eax-0x1]
c000b7e5:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b7e9:	0f af f1             	imul   esi,ecx
c000b7ec:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b7ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b7f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7f6:	74 24                	je     c000b81c <VCache::read(unsigned long long, int, void*)+0x176>
c000b7f8:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7fd:	52                   	push   edx
c000b7fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b801:	05 ff 0f 00 00       	add    eax,0xfff
c000b806:	99                   	cdq    
c000b807:	f7 f9                	idiv   ecx
c000b809:	50                   	push   eax
c000b80a:	55                   	push   ebp
c000b80b:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b811:	e8 a2 88 00 00       	call   c00140b8 <VAS::unlockPages(unsigned long, int)>
c000b816:	83 c4 10             	add    esp,0x10
c000b819:	8d 76 00             	lea    esi,[esi+0x0]
c000b81c:	e8 0f b3 00 00       	call   c0016b30 <KeRestorePreemption()>
c000b821:	31 ff                	xor    edi,edi
c000b823:	eb 5b                	jmp    c000b880 <VCache::read(unsigned long long, int, void*)+0x1da>
c000b825:	8d 76 00             	lea    esi,[esi+0x0]
c000b828:	83 ec 0c             	sub    esp,0xc
c000b82b:	53                   	push   ebx
c000b82c:	e8 cb fb ff ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c000b831:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b834:	8b 10                	mov    edx,DWORD PTR [eax]
c000b836:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b839:	56                   	push   esi
c000b83a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b83e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b842:	50                   	push   eax
c000b843:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b846:	83 c4 20             	add    esp,0x20
c000b849:	89 c7                	mov    edi,eax
c000b84b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b850:	74 26                	je     c000b878 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b852:	50                   	push   eax
c000b853:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b857:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b85d:	8d 76 00             	lea    esi,[esi+0x0]
c000b860:	b9 00 10 00 00       	mov    ecx,0x1000
c000b865:	99                   	cdq    
c000b866:	f7 f9                	idiv   ecx
c000b868:	50                   	push   eax
c000b869:	55                   	push   ebp
c000b86a:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b870:	e8 43 88 00 00       	call   c00140b8 <VAS::unlockPages(unsigned long, int)>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	e8 b3 b2 00 00       	call   c0016b30 <KeRestorePreemption()>
c000b87d:	8d 76 00             	lea    esi,[esi+0x0]
c000b880:	83 c4 2c             	add    esp,0x2c
c000b883:	89 f8                	mov    eax,edi
c000b885:	5b                   	pop    ebx
c000b886:	5e                   	pop    esi
c000b887:	5f                   	pop    edi
c000b888:	5d                   	pop    ebp
c000b889:	c3                   	ret    

c000b88a <Video::putrect(int, int, int, int, unsigned int)>:
c000b88a:	55                   	push   ebp
c000b88b:	57                   	push   edi
c000b88c:	56                   	push   esi
c000b88d:	53                   	push   ebx
c000b88e:	83 ec 1c             	sub    esp,0x1c
c000b891:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b895:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b899:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b89d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b8a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b8a9:	01 df                	add    edi,ebx
c000b8ab:	39 fb                	cmp    ebx,edi
c000b8ad:	7d 1f                	jge    c000b8ce <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b8af:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b8b3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b8b7:	7d 12                	jge    c000b8cb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b8b9:	8b 16                	mov    edx,DWORD PTR [esi]
c000b8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b8bf:	53                   	push   ebx
c000b8c0:	55                   	push   ebp
c000b8c1:	45                   	inc    ebp
c000b8c2:	56                   	push   esi
c000b8c3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8c6:	83 c4 10             	add    esp,0x10
c000b8c9:	eb e8                	jmp    c000b8b3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b8cb:	43                   	inc    ebx
c000b8cc:	eb dd                	jmp    c000b8ab <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b8ce:	83 c4 1c             	add    esp,0x1c
c000b8d1:	5b                   	pop    ebx
c000b8d2:	5e                   	pop    esi
c000b8d3:	5f                   	pop    edi
c000b8d4:	5d                   	pop    ebp
c000b8d5:	c3                   	ret    

c000b8d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b8d6:	55                   	push   ebp
c000b8d7:	57                   	push   edi
c000b8d8:	31 ff                	xor    edi,edi
c000b8da:	56                   	push   esi
c000b8db:	53                   	push   ebx
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b8e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b8e7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8ee:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8f7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8ff:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b902:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b906:	01 f9                	add    ecx,edi
c000b908:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b90c:	7d 2f                	jge    c000b93d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b90e:	31 f6                	xor    esi,esi
c000b910:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b914:	01 f2                	add    edx,esi
c000b916:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b91a:	7d 1a                	jge    c000b936 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b91c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b91f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b922:	46                   	inc    esi
c000b923:	51                   	push   ecx
c000b924:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b928:	52                   	push   edx
c000b929:	55                   	push   ebp
c000b92a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b92d:	83 c4 10             	add    esp,0x10
c000b930:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b934:	eb da                	jmp    c000b910 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b936:	47                   	inc    edi
c000b937:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b93b:	eb c5                	jmp    c000b902 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b93d:	83 c4 1c             	add    esp,0x1c
c000b940:	5b                   	pop    ebx
c000b941:	5e                   	pop    esi
c000b942:	5f                   	pop    edi
c000b943:	5d                   	pop    ebp
c000b944:	c3                   	ret    
c000b945:	90                   	nop

c000b946 <Video::blit(unsigned int*, int, int, int, int)>:
c000b946:	55                   	push   ebp
c000b947:	57                   	push   edi
c000b948:	56                   	push   esi
c000b949:	53                   	push   ebx
c000b94a:	83 ec 1c             	sub    esp,0x1c
c000b94d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b951:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b955:	85 c0                	test   eax,eax
c000b957:	79 02                	jns    c000b95b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b959:	31 c0                	xor    eax,eax
c000b95b:	c1 e0 02             	shl    eax,0x2
c000b95e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b962:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b966:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b96a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b96e:	39 d8                	cmp    eax,ebx
c000b970:	7e 49                	jle    c000b9bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b972:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b978:	7c 41                	jl     c000b9bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b97a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b97e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b982:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b986:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b98a:	39 f9                	cmp    ecx,edi
c000b98c:	7e 22                	jle    c000b9b0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b98e:	83 c5 04             	add    ebp,0x4
c000b991:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b997:	7c 14                	jl     c000b9ad <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b999:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b99b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b99e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b9a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b9a6:	56                   	push   esi
c000b9a7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b9aa:	83 c4 10             	add    esp,0x10
c000b9ad:	47                   	inc    edi
c000b9ae:	eb d2                	jmp    c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b9b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9b4:	43                   	inc    ebx
c000b9b5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b9b9:	eb ab                	jmp    c000b966 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b9bb:	83 c4 1c             	add    esp,0x1c
c000b9be:	5b                   	pop    ebx
c000b9bf:	5e                   	pop    esi
c000b9c0:	5f                   	pop    edi
c000b9c1:	5d                   	pop    ebp
c000b9c2:	c3                   	ret    
c000b9c3:	90                   	nop

c000b9c4 <Video::clearScreen(unsigned int)>:
c000b9c4:	57                   	push   edi
c000b9c5:	56                   	push   esi
c000b9c6:	53                   	push   ebx
c000b9c7:	31 db                	xor    ebx,ebx
c000b9c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9cd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b9d3:	7e 1f                	jle    c000b9f4 <Video::clearScreen(unsigned int)+0x30>
c000b9d5:	31 ff                	xor    edi,edi
c000b9d7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b9dd:	7e 12                	jle    c000b9f1 <Video::clearScreen(unsigned int)+0x2d>
c000b9df:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9e5:	53                   	push   ebx
c000b9e6:	57                   	push   edi
c000b9e7:	47                   	inc    edi
c000b9e8:	56                   	push   esi
c000b9e9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	eb e6                	jmp    c000b9d7 <Video::clearScreen(unsigned int)+0x13>
c000b9f1:	43                   	inc    ebx
c000b9f2:	eb d9                	jmp    c000b9cd <Video::clearScreen(unsigned int)+0x9>
c000b9f4:	5b                   	pop    ebx
c000b9f5:	5e                   	pop    esi
c000b9f6:	5f                   	pop    edi
c000b9f7:	c3                   	ret    

c000b9f8 <Video::putpixel(int, int, unsigned int)>:
c000b9f8:	c7 44 24 04 08 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023a08
c000ba00:	e9 ef 42 00 00       	jmp    c000fcf4 <KePanic(char const*)>
c000ba05:	90                   	nop

c000ba06 <Video::readPixelApprox(int, int)>:
c000ba06:	83 ec 18             	sub    esp,0x18
c000ba09:	68 29 3a 02 c0       	push   0xc0023a29
c000ba0e:	e8 e1 42 00 00       	call   c000fcf4 <KePanic(char const*)>
c000ba13:	31 c0                	xor    eax,eax
c000ba15:	83 c4 1c             	add    esp,0x1c
c000ba18:	c3                   	ret    
c000ba19:	90                   	nop

c000ba1a <Video::Video(char const*)>:
c000ba1a:	83 ec 0c             	sub    esp,0xc
c000ba1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba21:	83 ec 08             	sub    esp,0x8
c000ba24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba28:	50                   	push   eax
c000ba29:	e8 88 e1 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	ba cc 3a 02 c0       	mov    edx,0xc0023acc
c000ba36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba3a:	89 10                	mov    DWORD PTR [eax],edx
c000ba3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba40:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba4a:	90                   	nop
c000ba4b:	83 c4 0c             	add    esp,0xc
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <Video::~Video()>:
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	ba cc 3a 02 c0       	mov    edx,0xc0023acc
c000ba58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba5c:	89 10                	mov    DWORD PTR [eax],edx
c000ba5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba62:	83 ec 0c             	sub    esp,0xc
c000ba65:	50                   	push   eax
c000ba66:	e8 eb de ff ff       	call   c0009956 <Device::~Device()>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	90                   	nop
c000ba6f:	83 c4 0c             	add    esp,0xc
c000ba72:	c3                   	ret    
c000ba73:	90                   	nop

c000ba74 <Video::~Video()>:
c000ba74:	83 ec 0c             	sub    esp,0xc
c000ba77:	83 ec 0c             	sub    esp,0xc
c000ba7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba7e:	e8 cd ff ff ff       	call   c000ba50 <Video::~Video()>
c000ba83:	83 c4 10             	add    esp,0x10
c000ba86:	83 ec 08             	sub    esp,0x8
c000ba89:	68 64 01 00 00       	push   0x164
c000ba8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba92:	e8 19 19 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000ba97:	83 c4 10             	add    esp,0x10
c000ba9a:	83 c4 0c             	add    esp,0xc
c000ba9d:	c3                   	ret    

c000ba9e <Video::isMonochrome()>:
c000ba9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baa2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000baa8:	c3                   	ret    
c000baa9:	90                   	nop

c000baaa <Video::getWidth()>:
c000baaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bab4:	c3                   	ret    
c000bab5:	90                   	nop

c000bab6 <Video::getHeight()>:
c000bab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bac0:	c3                   	ret    
c000bac1:	90                   	nop

c000bac2 <Video::drawCursor(int, int, unsigned int*, int)>:
c000bac2:	55                   	push   ebp
c000bac3:	57                   	push   edi
c000bac4:	56                   	push   esi
c000bac5:	53                   	push   ebx
c000bac6:	83 ec 2c             	sub    esp,0x2c
c000bac9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bacd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bad1:	83 f8 01             	cmp    eax,0x1
c000bad4:	19 c9                	sbb    ecx,ecx
c000bad6:	31 db                	xor    ebx,ebx
c000bad8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000badc:	89 cd                	mov    ebp,ecx
c000bade:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000bae6:	f7 d5                	not    ebp
c000bae8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000baee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000baf2:	01 d8                	add    eax,ebx
c000baf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baf8:	56                   	push   esi
c000baf9:	e8 b8 ff ff ff       	call   c000bab6 <Video::getHeight()>
c000bafe:	59                   	pop    ecx
c000baff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000bb03:	7e 70                	jle    c000bb75 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000bb05:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb09:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bb0d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bb10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb18:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bb1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb23:	89 f8                	mov    eax,edi
c000bb25:	83 c0 20             	add    eax,0x20
c000bb28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb2c:	56                   	push   esi
c000bb2d:	e8 78 ff ff ff       	call   c000baaa <Video::getWidth()>
c000bb32:	5a                   	pop    edx
c000bb33:	39 c7                	cmp    edi,eax
c000bb35:	7d 34                	jge    c000bb6b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bb37:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb3c:	74 05                	je     c000bb43 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb3e:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb40:	55                   	push   ebp
c000bb41:	eb 0d                	jmp    c000bb50 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb43:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb48:	74 12                	je     c000bb5c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb4a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb54:	57                   	push   edi
c000bb55:	56                   	push   esi
c000bb56:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb59:	83 c4 10             	add    esp,0x10
c000bb5c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb60:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb64:	47                   	inc    edi
c000bb65:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bb69:	75 c1                	jne    c000bb2c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb6b:	43                   	inc    ebx
c000bb6c:	83 fb 20             	cmp    ebx,0x20
c000bb6f:	0f 85 79 ff ff ff    	jne    c000baee <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb75:	83 c4 2c             	add    esp,0x2c
c000bb78:	5b                   	pop    ebx
c000bb79:	5e                   	pop    esi
c000bb7a:	5f                   	pop    edi
c000bb7b:	5d                   	pop    ebp
c000bb7c:	c3                   	ret    
c000bb7d:	90                   	nop

c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb7e:	55                   	push   ebp
c000bb7f:	57                   	push   edi
c000bb80:	56                   	push   esi
c000bb81:	53                   	push   ebx
c000bb82:	83 ec 48             	sub    esp,0x48
c000bb85:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb89:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb8d:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb91:	c1 e0 08             	shl    eax,0x8
c000bb94:	01 d0                	add    eax,edx
c000bb96:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb9e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bba2:	c1 e0 08             	shl    eax,0x8
c000bba5:	01 d0                	add    eax,edx
c000bba7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bbaf:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bbb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bbb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbbc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bbc3:	50                   	push   eax
c000bbc4:	e8 ce 3c 00 00       	call   c000f897 <malloc>
c000bbc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbcd:	83 c4 10             	add    esp,0x10
c000bbd0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbd5:	75 10                	jne    c000bbe7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bbd7:	83 ec 0c             	sub    esp,0xc
c000bbda:	68 54 3a 02 c0       	push   0xc0023a54
c000bbdf:	e8 10 41 00 00       	call   c000fcf4 <KePanic(char const*)>
c000bbe4:	83 c4 10             	add    esp,0x10
c000bbe7:	51                   	push   ecx
c000bbe8:	51                   	push   ecx
c000bbe9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbed:	50                   	push   eax
c000bbee:	68 64 3a 02 c0       	push   0xc0023a64
c000bbf3:	e8 84 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bbf8:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbfb:	83 e0 20             	and    eax,0x20
c000bbfe:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bc02:	85 c0                	test   eax,eax
c000bc04:	5e                   	pop    esi
c000bc05:	0f 94 c0             	sete   al
c000bc08:	5f                   	pop    edi
c000bc09:	0f b6 c0             	movzx  eax,al
c000bc0c:	be 12 00 00 00       	mov    esi,0x12
c000bc11:	50                   	push   eax
c000bc12:	68 6e 3a 02 c0       	push   0xc0023a6e
c000bc17:	e8 60 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc1c:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bc20:	83 c4 10             	add    esp,0x10
c000bc23:	89 d0                	mov    eax,edx
c000bc25:	85 d2                	test   edx,edx
c000bc27:	74 11                	je     c000bc3a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bc29:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bc2d:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bc31:	c1 fe 03             	sar    esi,0x3
c000bc34:	0f af f1             	imul   esi,ecx
c000bc37:	83 c6 12             	add    esi,0x12
c000bc3a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc3f:	74 07                	je     c000bc48 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bc41:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bc46:	75 12                	jne    c000bc5a <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bc48:	83 ec 0c             	sub    esp,0xc
c000bc4b:	68 7c 3a 02 c0       	push   0xc0023a7c
c000bc50:	e8 27 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc55:	e9 a0 02 00 00       	jmp    c000befa <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bc5a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc5e:	83 f9 02             	cmp    ecx,0x2
c000bc61:	74 0e                	je     c000bc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bc63:	83 f9 0a             	cmp    ecx,0xa
c000bc66:	0f 84 c8 00 00 00    	je     c000bd34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bc6c:	e9 72 02 00 00       	jmp    c000bee3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bc71:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc76:	75 0e                	jne    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc78:	84 c0                	test   al,al
c000bc7a:	75 0a                	jne    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc7c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc7f:	83 e8 18             	sub    eax,0x18
c000bc82:	a8 f7                	test   al,0xf7
c000bc84:	74 0d                	je     c000bc93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bc86:	83 ec 0c             	sub    esp,0xc
c000bc89:	68 91 3a 02 c0       	push   0xc0023a91
c000bc8e:	e9 58 02 00 00       	jmp    c000beeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bc93:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc98:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bca0:	31 c0                	xor    eax,eax
c000bca2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bca6:	89 c7                	mov    edi,eax
c000bca8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bcb0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bcb5:	75 15                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcb7:	99                   	cdq    
c000bcb8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bcbc:	85 d2                	test   edx,edx
c000bcbe:	75 0c                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcc0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bcc4:	29 c7                	sub    edi,eax
c000bcc6:	4f                   	dec    edi
c000bcc7:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bccc:	31 d2                	xor    edx,edx
c000bcce:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bcd2:	75 08                	jne    c000bcdc <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bcd4:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bcd9:	c1 e2 18             	shl    edx,0x18
c000bcdc:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bce1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bce5:	c1 e1 10             	shl    ecx,0x10
c000bce8:	8d 47 01             	lea    eax,[edi+0x1]
c000bceb:	89 cd                	mov    ebp,ecx
c000bced:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bcf2:	c1 e1 08             	shl    ecx,0x8
c000bcf5:	09 e9                	or     ecx,ebp
c000bcf7:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bcfb:	09 e9                	or     ecx,ebp
c000bcfd:	09 d1                	or     ecx,edx
c000bcff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bd03:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bd06:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bd0a:	c1 fa 03             	sar    edx,0x3
c000bd0d:	01 d6                	add    esi,edx
c000bd0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd13:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bd17:	7e 04                	jle    c000bd1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bd19:	89 c7                	mov    edi,eax
c000bd1b:	eb 93                	jmp    c000bcb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bd1d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd25:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bd29:	0f 8f 77 ff ff ff    	jg     c000bca6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bd2f:	e9 d3 01 00 00       	jmp    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd34:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd39:	75 0e                	jne    c000bd49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd3b:	85 d2                	test   edx,edx
c000bd3d:	75 0a                	jne    c000bd49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd3f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd42:	83 e8 18             	sub    eax,0x18
c000bd45:	a8 f7                	test   al,0xf7
c000bd47:	74 0d                	je     c000bd56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bd49:	83 ec 0c             	sub    esp,0xc
c000bd4c:	68 9f 3a 02 c0       	push   0xc0023a9f
c000bd51:	e9 95 01 00 00       	jmp    c000beeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bd56:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd5e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bd66:	31 c9                	xor    ecx,ecx
c000bd68:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd6c:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bd70:	0f 8e 91 01 00 00    	jle    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd76:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bd7a:	0f 8d 87 01 00 00    	jge    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd80:	8d 46 01             	lea    eax,[esi+0x1]
c000bd83:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd8b:	83 fd 7f             	cmp    ebp,0x7f
c000bd8e:	89 e8                	mov    eax,ebp
c000bd90:	0f 8e 9d 00 00 00    	jle    c000be33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd96:	83 e0 7f             	and    eax,0x7f
c000bd99:	31 d2                	xor    edx,edx
c000bd9b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd9f:	40                   	inc    eax
c000bda0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bda4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bda8:	75 0a                	jne    c000bdb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bdaa:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bdaf:	89 ea                	mov    edx,ebp
c000bdb1:	c1 e2 18             	shl    edx,0x18
c000bdb4:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bdb9:	c1 e0 10             	shl    eax,0x10
c000bdbc:	89 c7                	mov    edi,eax
c000bdbe:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bdc3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bdc7:	c1 e0 08             	shl    eax,0x8
c000bdca:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bdce:	09 f8                	or     eax,edi
c000bdd0:	31 f6                	xor    esi,esi
c000bdd2:	09 c5                	or     ebp,eax
c000bdd4:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bdd9:	09 d5                	or     ebp,edx
c000bddb:	85 ff                	test   edi,edi
c000bddd:	75 1d                	jne    c000bdfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bddf:	89 c8                	mov    eax,ecx
c000bde1:	99                   	cdq    
c000bde2:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bde6:	85 d2                	test   edx,edx
c000bde8:	75 12                	jne    c000bdfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdee:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bdf2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bdf6:	49                   	dec    ecx
c000bdf7:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bdfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be00:	8d 51 01             	lea    edx,[ecx+0x1]
c000be03:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000be06:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000be0a:	8d 46 01             	lea    eax,[esi+0x1]
c000be0d:	7e 06                	jle    c000be15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000be0f:	89 c6                	mov    esi,eax
c000be11:	89 d1                	mov    ecx,edx
c000be13:	eb c6                	jmp    c000bddb <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000be15:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000be19:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be1d:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000be21:	c1 f8 03             	sar    eax,0x3
c000be24:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be28:	89 d1                	mov    ecx,edx
c000be2a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000be2e:	e9 35 ff ff ff       	jmp    c000bd68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000be33:	8d 45 01             	lea    eax,[ebp+0x1]
c000be36:	31 f6                	xor    esi,esi
c000be38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000be41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be45:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be4a:	75 1d                	jne    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be4c:	89 c8                	mov    eax,ecx
c000be4e:	99                   	cdq    
c000be4f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000be53:	85 d2                	test   edx,edx
c000be55:	75 12                	jne    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be5b:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000be5f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000be63:	49                   	dec    ecx
c000be64:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000be69:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be71:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be75:	75 10                	jne    c000be87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000be77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be7b:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000be80:	c1 e7 18             	shl    edi,0x18
c000be83:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be8b:	8d 51 01             	lea    edx,[ecx+0x1]
c000be8e:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000be93:	c1 e0 10             	shl    eax,0x10
c000be96:	89 c7                	mov    edi,eax
c000be98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be9c:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000bea1:	c1 e0 08             	shl    eax,0x8
c000bea4:	09 f8                	or     eax,edi
c000bea6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000beaa:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000beae:	09 f8                	or     eax,edi
c000beb0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000beb4:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000beb8:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000bebb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bebf:	c1 f8 03             	sar    eax,0x3
c000bec2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000bec6:	8d 46 01             	lea    eax,[esi+0x1]
c000bec9:	39 f5                	cmp    ebp,esi
c000becb:	7e 09                	jle    c000bed6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000becd:	89 c6                	mov    esi,eax
c000becf:	89 d1                	mov    ecx,edx
c000bed1:	e9 6f ff ff ff       	jmp    c000be45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000bed6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000beda:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bede:	e9 45 ff ff ff       	jmp    c000be28 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000bee3:	52                   	push   edx
c000bee4:	52                   	push   edx
c000bee5:	51                   	push   ecx
c000bee6:	68 ae 3a 02 c0       	push   0xc0023aae
c000beeb:	e8 8c b0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bef0:	58                   	pop    eax
c000bef1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bef5:	e8 ad 39 00 00       	call   c000f8a7 <free>
c000befa:	83 c4 10             	add    esp,0x10
c000befd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bf05:	eb 14                	jmp    c000bf1b <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000bf07:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf0b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bf0f:	89 18                	mov    DWORD PTR [eax],ebx
c000bf11:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000bf15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf19:	89 18                	mov    DWORD PTR [eax],ebx
c000bf1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf1f:	83 c4 3c             	add    esp,0x3c
c000bf22:	5b                   	pop    ebx
c000bf23:	5e                   	pop    esi
c000bf24:	5f                   	pop    edi
c000bf25:	5d                   	pop    ebp
c000bf26:	c3                   	ret    
c000bf27:	90                   	nop

c000bf28 <Video::putTGA(int, int, unsigned char*, int)>:
c000bf28:	55                   	push   ebp
c000bf29:	57                   	push   edi
c000bf2a:	56                   	push   esi
c000bf2b:	53                   	push   ebx
c000bf2c:	83 ec 28             	sub    esp,0x28
c000bf2f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000bf33:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf37:	50                   	push   eax
c000bf38:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf3c:	50                   	push   eax
c000bf3d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf41:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf45:	57                   	push   edi
c000bf46:	e8 33 fc ff ff       	call   c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf4b:	83 c4 20             	add    esp,0x20
c000bf4e:	85 c0                	test   eax,eax
c000bf50:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf54:	74 3a                	je     c000bf90 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf56:	89 c6                	mov    esi,eax
c000bf58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf5c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf60:	39 d8                	cmp    eax,ebx
c000bf62:	7e 2c                	jle    c000bf90 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf6c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf70:	39 e8                	cmp    eax,ebp
c000bf72:	7e 19                	jle    c000bf8d <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bf74:	83 c6 04             	add    esi,0x4
c000bf77:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf7a:	85 c0                	test   eax,eax
c000bf7c:	79 0c                	jns    c000bf8a <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000bf7e:	8b 17                	mov    edx,DWORD PTR [edi]
c000bf80:	50                   	push   eax
c000bf81:	53                   	push   ebx
c000bf82:	55                   	push   ebp
c000bf83:	57                   	push   edi
c000bf84:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	45                   	inc    ebp
c000bf8b:	eb db                	jmp    c000bf68 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf8d:	43                   	inc    ebx
c000bf8e:	eb c8                	jmp    c000bf58 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf90:	83 c4 1c             	add    esp,0x1c
c000bf93:	5b                   	pop    ebx
c000bf94:	5e                   	pop    esi
c000bf95:	5f                   	pop    edi
c000bf96:	5d                   	pop    ebp
c000bf97:	c3                   	ret    

c000bf98 <ACPI::close(int, int, void*)>:
c000bf98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf9d:	c3                   	ret    
c000bf9e:	66 90                	xchg   ax,ax

c000bfa0 <loadACPITables(unsigned char*)>:
c000bfa0:	57                   	push   edi
c000bfa1:	56                   	push   esi
c000bfa2:	53                   	push   ebx
c000bfa3:	83 ec 60             	sub    esp,0x60
c000bfa6:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bfab:	0f 84 43 02 00 00    	je     c000c1f4 <loadACPITables(unsigned char*)+0x254>
c000bfb1:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c000bfb6:	0f b6 c0             	movzx  eax,al
c000bfb9:	85 c0                	test   eax,eax
c000bfbb:	74 7b                	je     c000c038 <loadACPITables(unsigned char*)+0x98>
c000bfbd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfc1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bfc5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bfc9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfcc:	83 e8 24             	sub    eax,0x24
c000bfcf:	c1 e8 03             	shr    eax,0x3
c000bfd2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfd6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfde:	66 90                	xchg   ax,ax
c000bfe0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfe4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfe8:	0f 8d ba 00 00 00    	jge    c000c0a8 <loadACPITables(unsigned char*)+0x108>
c000bfee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bff2:	83 c0 24             	add    eax,0x24
c000bff5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bffd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c001:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c005:	c1 e0 03             	shl    eax,0x3
c000c008:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000c00c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c010:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c013:	8b 00                	mov    eax,DWORD PTR [eax]
c000c015:	89 c1                	mov    ecx,eax
c000c017:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c01c:	8d 50 01             	lea    edx,[eax+0x1]
c000c01f:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c025:	89 ca                	mov    edx,ecx
c000c027:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c02e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c033:	eb ab                	jmp    c000bfe0 <loadACPITables(unsigned char*)+0x40>
c000c035:	8d 76 00             	lea    esi,[esi+0x0]
c000c038:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c03c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c040:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c047:	83 e8 24             	sub    eax,0x24
c000c04a:	c1 e8 02             	shr    eax,0x2
c000c04d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c051:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c059:	8d 76 00             	lea    esi,[esi+0x0]
c000c05c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c060:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c064:	7d 42                	jge    c000c0a8 <loadACPITables(unsigned char*)+0x108>
c000c066:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c06a:	83 c0 24             	add    eax,0x24
c000c06d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c071:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c075:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c079:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c07d:	c1 e0 02             	shl    eax,0x2
c000c080:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c084:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c088:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c08a:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c08f:	8d 50 01             	lea    edx,[eax+0x1]
c000c092:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c098:	89 ca                	mov    edx,ecx
c000c09a:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c0a1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c0a6:	eb b4                	jmp    c000c05c <loadACPITables(unsigned char*)+0xbc>
c000c0a8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c0b0:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c0b5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c0b9:	0f 8d 39 01 00 00    	jge    c000c1f8 <loadACPITables(unsigned char*)+0x258>
c000c0bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0c3:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c0ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0da:	25 ff 0f 00 00       	and    eax,0xfff
c000c0df:	89 c6                	mov    esi,eax
c000c0e1:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c0e7:	83 ec 0c             	sub    esp,0xc
c000c0ea:	6a 01                	push   0x1
c000c0ec:	e8 36 72 00 00       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c000c0f1:	83 c4 10             	add    esp,0x10
c000c0f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0fe:	83 ec 0c             	sub    esp,0xc
c000c101:	6a 01                	push   0x1
c000c103:	6a 01                	push   0x1
c000c105:	50                   	push   eax
c000c106:	52                   	push   edx
c000c107:	53                   	push   ebx
c000c108:	e8 e7 7a 00 00       	call   c0013bf4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c10d:	83 c4 20             	add    esp,0x20
c000c110:	09 f0                	or     eax,esi
c000c112:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c116:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c11a:	c1 e0 03             	shl    eax,0x3
c000c11d:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c122:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c12a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c12e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c136:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c13a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c13e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c142:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c146:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c14a:	89 c6                	mov    esi,eax
c000c14c:	89 d7                	mov    edi,edx
c000c14e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c150:	89 c8                	mov    eax,ecx
c000c152:	89 fa                	mov    edx,edi
c000c154:	89 f3                	mov    ebx,esi
c000c156:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c15a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c15e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c162:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c166:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c169:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c16d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c171:	05 00 10 00 00       	add    eax,0x1000
c000c176:	c1 e8 0c             	shr    eax,0xc
c000c179:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c17d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c181:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c185:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c189:	25 ff 0f 00 00       	and    eax,0xfff
c000c18e:	89 c6                	mov    esi,eax
c000c190:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c196:	83 ec 0c             	sub    esp,0xc
c000c199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c19d:	e8 85 71 00 00       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c000c1a2:	83 c4 10             	add    esp,0x10
c000c1a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c1a9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c1af:	83 ec 0c             	sub    esp,0xc
c000c1b2:	6a 01                	push   0x1
c000c1b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b8:	50                   	push   eax
c000c1b9:	52                   	push   edx
c000c1ba:	53                   	push   ebx
c000c1bb:	e8 34 7a 00 00       	call   c0013bf4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1c0:	83 c4 20             	add    esp,0x20
c000c1c3:	09 f0                	or     eax,esi
c000c1c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1cd:	83 ec 0c             	sub    esp,0xc
c000c1d0:	50                   	push   eax
c000c1d1:	e8 59 74 00 00       	call   c001362f <Virt::freeKernelVirtualPages(unsigned long)>
c000c1d6:	83 c4 10             	add    esp,0x10
c000c1d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1e1:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c1e8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1ed:	e9 be fe ff ff       	jmp    c000c0b0 <loadACPITables(unsigned char*)+0x110>
c000c1f2:	66 90                	xchg   ax,ax
c000c1f4:	90                   	nop
c000c1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1f8:	83 c4 60             	add    esp,0x60
c000c1fb:	5b                   	pop    ebx
c000c1fc:	5e                   	pop    esi
c000c1fd:	5f                   	pop    edi
c000c1fe:	c3                   	ret    
c000c1ff:	90                   	nop

c000c200 <findRSDT(unsigned char*)>:
c000c200:	57                   	push   edi
c000c201:	56                   	push   esi
c000c202:	53                   	push   ebx
c000c203:	83 ec 50             	sub    esp,0x50
c000c206:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c20b:	85 c0                	test   eax,eax
c000c20d:	75 0d                	jne    c000c21c <findRSDT(unsigned char*)+0x1c>
c000c20f:	b8 00 00 00 00       	mov    eax,0x0
c000c214:	e9 2b 01 00 00       	jmp    c000c344 <findRSDT(unsigned char*)+0x144>
c000c219:	8d 76 00             	lea    esi,[esi+0x0]
c000c21c:	89 e0                	mov    eax,esp
c000c21e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c222:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c226:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c22a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c232:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c236:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c23a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c23e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c242:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c246:	89 c6                	mov    esi,eax
c000c248:	89 d7                	mov    edi,edx
c000c24a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c24c:	89 c8                	mov    eax,ecx
c000c24e:	89 fa                	mov    edx,edi
c000c250:	89 f3                	mov    ebx,esi
c000c252:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c256:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c25a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c25e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c262:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c266:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c26e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c276:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c282:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c286:	25 ff 0f 00 00       	and    eax,0xfff
c000c28b:	89 c6                	mov    esi,eax
c000c28d:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c293:	83 ec 0c             	sub    esp,0xc
c000c296:	6a 02                	push   0x2
c000c298:	e8 8a 70 00 00       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c000c29d:	83 c4 10             	add    esp,0x10
c000c2a0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c2a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2aa:	83 ec 0c             	sub    esp,0xc
c000c2ad:	6a 01                	push   0x1
c000c2af:	6a 02                	push   0x2
c000c2b1:	50                   	push   eax
c000c2b2:	52                   	push   edx
c000c2b3:	53                   	push   ebx
c000c2b4:	e8 3b 79 00 00       	call   c0013bf4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2b9:	83 c4 20             	add    esp,0x20
c000c2bc:	09 f0                	or     eax,esi
c000c2be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c2c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c6:	25 ff 0f 00 00       	and    eax,0xfff
c000c2cb:	89 c6                	mov    esi,eax
c000c2cd:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c2d3:	83 ec 0c             	sub    esp,0xc
c000c2d6:	6a 02                	push   0x2
c000c2d8:	e8 4a 70 00 00       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2e4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2ea:	83 ec 0c             	sub    esp,0xc
c000c2ed:	6a 01                	push   0x1
c000c2ef:	6a 02                	push   0x2
c000c2f1:	50                   	push   eax
c000c2f2:	52                   	push   edx
c000c2f3:	53                   	push   ebx
c000c2f4:	e8 fb 78 00 00       	call   c0013bf4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2f9:	83 c4 20             	add    esp,0x20
c000c2fc:	09 f0                	or     eax,esi
c000c2fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c302:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c307:	85 c0                	test   eax,eax
c000c309:	75 11                	jne    c000c31c <findRSDT(unsigned char*)+0x11c>
c000c30b:	c6 05 80 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bd80,0x0
c000c312:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c316:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c31a:	eb 24                	jmp    c000c340 <findRSDT(unsigned char*)+0x140>
c000c31c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c321:	83 f8 02             	cmp    eax,0x2
c000c324:	75 12                	jne    c000c338 <findRSDT(unsigned char*)+0x138>
c000c326:	c6 05 80 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd80,0x1
c000c32d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c331:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c335:	eb 09                	jmp    c000c340 <findRSDT(unsigned char*)+0x140>
c000c337:	90                   	nop
c000c338:	b8 00 00 00 00       	mov    eax,0x0
c000c33d:	eb 05                	jmp    c000c344 <findRSDT(unsigned char*)+0x144>
c000c33f:	90                   	nop
c000c340:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c344:	83 c4 50             	add    esp,0x50
c000c347:	5b                   	pop    ebx
c000c348:	5e                   	pop    esi
c000c349:	5f                   	pop    edi
c000c34a:	c3                   	ret    
c000c34b:	90                   	nop

c000c34c <findDataTable(unsigned char*, char*)>:
c000c34c:	83 ec 1c             	sub    esp,0x1c
c000c34f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c354:	75 0a                	jne    c000c360 <findDataTable(unsigned char*, char*)+0x14>
c000c356:	b8 00 00 00 00       	mov    eax,0x0
c000c35b:	eb 5f                	jmp    c000c3bc <findDataTable(unsigned char*, char*)+0x70>
c000c35d:	8d 76 00             	lea    esi,[esi+0x0]
c000c360:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c368:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c36d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c371:	7d 41                	jge    c000c3b4 <findDataTable(unsigned char*, char*)+0x68>
c000c373:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c377:	c1 e0 03             	shl    eax,0x3
c000c37a:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c37f:	83 ec 04             	sub    esp,0x4
c000c382:	6a 04                	push   0x4
c000c384:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c388:	50                   	push   eax
c000c389:	e8 f2 3f ff ff       	call   c0000380 <memcmp>
c000c38e:	83 c4 10             	add    esp,0x10
c000c391:	85 c0                	test   eax,eax
c000c393:	0f 94 c0             	sete   al
c000c396:	0f b6 c0             	movzx  eax,al
c000c399:	85 c0                	test   eax,eax
c000c39b:	74 0f                	je     c000c3ac <findDataTable(unsigned char*, char*)+0x60>
c000c39d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c3a1:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c3a8:	eb 12                	jmp    c000c3bc <findDataTable(unsigned char*, char*)+0x70>
c000c3aa:	66 90                	xchg   ax,ax
c000c3ac:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c3b1:	eb b5                	jmp    c000c368 <findDataTable(unsigned char*, char*)+0x1c>
c000c3b3:	90                   	nop
c000c3b4:	b8 00 00 00 00       	mov    eax,0x0
c000c3b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3bc:	83 c4 1c             	add    esp,0x1c
c000c3bf:	c3                   	ret    

c000c3c0 <scanMADT()>:
c000c3c0:	53                   	push   ebx
c000c3c1:	83 ec 38             	sub    esp,0x38
c000c3c4:	c7 05 88 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd88,0x0
c000c3ce:	c7 05 84 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd84,0x0
c000c3d8:	83 ec 0c             	sub    esp,0xc
c000c3db:	68 10 3b 02 c0       	push   0xc0023b10
c000c3e0:	e8 97 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c3e5:	83 c4 10             	add    esp,0x10
c000c3e8:	e8 75 d8 00 00       	call   c0019c62 <HalFindRSDP()>
c000c3ed:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c000c3f2:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c3f7:	85 c0                	test   eax,eax
c000c3f9:	0f 84 59 04 00 00    	je     c000c858 <scanMADT()+0x498>
c000c3ff:	83 ec 0c             	sub    esp,0xc
c000c402:	68 1e 3b 02 c0       	push   0xc0023b1e
c000c407:	e8 70 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c40c:	83 c4 10             	add    esp,0x10
c000c40f:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c414:	83 ec 0c             	sub    esp,0xc
c000c417:	50                   	push   eax
c000c418:	e8 e3 fd ff ff       	call   c000c200 <findRSDT(unsigned char*)>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c000c425:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c42a:	85 c0                	test   eax,eax
c000c42c:	0f 84 2a 04 00 00    	je     c000c85c <scanMADT()+0x49c>
c000c432:	8b 15 84 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd84
c000c438:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c43d:	83 ec 04             	sub    esp,0x4
c000c440:	52                   	push   edx
c000c441:	50                   	push   eax
c000c442:	68 c8 3c 02 c0       	push   0xc0023cc8
c000c447:	e8 30 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c454:	83 ec 0c             	sub    esp,0xc
c000c457:	50                   	push   eax
c000c458:	e8 43 fb ff ff       	call   c000bfa0 <loadACPITables(unsigned char*)>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c465:	83 ec 08             	sub    esp,0x8
c000c468:	68 2d 3b 02 c0       	push   0xc0023b2d
c000c46d:	50                   	push   eax
c000c46e:	e8 d9 fe ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000c473:	83 c4 10             	add    esp,0x10
c000c476:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c47a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c47f:	0f 84 db 03 00 00    	je     c000c860 <scanMADT()+0x4a0>
c000c485:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c48d:	8d 76 00             	lea    esi,[esi+0x0]
c000c490:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c494:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c497:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c49b:	0f 87 c7 03 00 00    	ja     c000c868 <scanMADT()+0x4a8>
c000c4a1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c4a9:	0f 87 b9 03 00 00    	ja     c000c868 <scanMADT()+0x4a8>
c000c4af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c4b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4bb:	8d 50 01             	lea    edx,[eax+0x1]
c000c4be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4c6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4ca:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c4ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4d2:	8d 50 01             	lea    edx,[eax+0x1]
c000c4d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4dd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4e1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4e5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4ea:	83 f8 02             	cmp    eax,0x2
c000c4ed:	0f 86 71 03 00 00    	jbe    c000c864 <scanMADT()+0x4a4>
c000c4f3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4f8:	85 c0                	test   eax,eax
c000c4fa:	75 58                	jne    c000c554 <scanMADT()+0x194>
c000c4fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c500:	8d 50 01             	lea    edx,[eax+0x1]
c000c503:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c507:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c50d:	0f b6 d2             	movzx  edx,dl
c000c510:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c514:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c518:	88 82 c0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4040],al
c000c51e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c522:	8d 50 01             	lea    edx,[eax+0x1]
c000c525:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c529:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c52f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c532:	88 0d 80 bf 02 c0    	mov    BYTE PTR ds:0xc002bf80,cl
c000c538:	0f b6 d2             	movzx  edx,dl
c000c53b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c53f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c543:	88 82 a0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4060],al
c000c549:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c54e:	e9 f1 02 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c553:	90                   	nop
c000c554:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c559:	83 f8 01             	cmp    eax,0x1
c000c55c:	0f 85 32 01 00 00    	jne    c000c694 <scanMADT()+0x2d4>
c000c562:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c566:	8d 50 01             	lea    edx,[eax+0x1]
c000c569:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56d:	8a 15 40 be 02 c0    	mov    dl,BYTE PTR ds:0xc002be40
c000c573:	0f b6 d2             	movzx  edx,dl
c000c576:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c57a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c57e:	88 82 60 be 02 c0    	mov    BYTE PTR [edx-0x3ffd41a0],al
c000c584:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c589:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c58d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c591:	01 d0                	add    eax,edx
c000c593:	83 c0 2c             	add    eax,0x2c
c000c596:	8a 00                	mov    al,BYTE PTR [eax]
c000c598:	0f b6 d0             	movzx  edx,al
c000c59b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c59f:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5a6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5aa:	0f b6 c0             	movzx  eax,al
c000c5ad:	c1 e0 08             	shl    eax,0x8
c000c5b0:	89 d1                	mov    ecx,edx
c000c5b2:	09 c1                	or     ecx,eax
c000c5b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5b8:	8d 50 02             	lea    edx,[eax+0x2]
c000c5bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5c3:	0f b6 c0             	movzx  eax,al
c000c5c6:	c1 e0 10             	shl    eax,0x10
c000c5c9:	09 c1                	or     ecx,eax
c000c5cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5cf:	8d 50 03             	lea    edx,[eax+0x3]
c000c5d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5da:	0f b6 c0             	movzx  eax,al
c000c5dd:	c1 e0 18             	shl    eax,0x18
c000c5e0:	09 c1                	or     ecx,eax
c000c5e2:	89 ca                	mov    edx,ecx
c000c5e4:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c5e9:	0f b6 c0             	movzx  eax,al
c000c5ec:	89 14 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],edx
c000c5f3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c600:	01 d0                	add    eax,edx
c000c602:	83 c0 2c             	add    eax,0x2c
c000c605:	8a 00                	mov    al,BYTE PTR [eax]
c000c607:	0f b6 d0             	movzx  edx,al
c000c60a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c60e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c611:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c615:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c619:	0f b6 c0             	movzx  eax,al
c000c61c:	c1 e0 08             	shl    eax,0x8
c000c61f:	89 d1                	mov    ecx,edx
c000c621:	09 c1                	or     ecx,eax
c000c623:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c627:	8d 50 02             	lea    edx,[eax+0x2]
c000c62a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c62e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c632:	0f b6 c0             	movzx  eax,al
c000c635:	c1 e0 10             	shl    eax,0x10
c000c638:	09 c1                	or     ecx,eax
c000c63a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c63e:	8d 50 03             	lea    edx,[eax+0x3]
c000c641:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c645:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c649:	0f b6 c0             	movzx  eax,al
c000c64c:	c1 e0 18             	shl    eax,0x18
c000c64f:	09 c1                	or     ecx,eax
c000c651:	89 ca                	mov    edx,ecx
c000c653:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c658:	0f b6 c0             	movzx  eax,al
c000c65b:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c000c662:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c667:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c66c:	83 c0 01             	add    eax,0x1
c000c66f:	a2 40 be 02 c0       	mov    ds:0xc002be40,al
c000c674:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c679:	0f b6 c0             	movzx  eax,al
c000c67c:	83 ec 08             	sub    esp,0x8
c000c67f:	50                   	push   eax
c000c680:	68 32 3b 02 c0       	push   0xc0023b32
c000c685:	e8 f2 a8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	e9 b2 01 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c692:	66 90                	xchg   ax,ax
c000c694:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c699:	83 f8 02             	cmp    eax,0x2
c000c69c:	0f 85 ea 00 00 00    	jne    c000c78c <scanMADT()+0x3cc>
c000c6a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6a6:	8d 50 01             	lea    edx,[eax+0x1]
c000c6a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6b5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c6b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6bd:	8d 50 01             	lea    edx,[eax+0x1]
c000c6c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6c8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6cc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c6d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6d8:	01 d0                	add    eax,edx
c000c6da:	83 c0 2c             	add    eax,0x2c
c000c6dd:	8a 00                	mov    al,BYTE PTR [eax]
c000c6df:	0f b6 d0             	movzx  edx,al
c000c6e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6e6:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6f1:	0f b6 c0             	movzx  eax,al
c000c6f4:	c1 e0 08             	shl    eax,0x8
c000c6f7:	89 d1                	mov    ecx,edx
c000c6f9:	09 c1                	or     ecx,eax
c000c6fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ff:	8d 50 02             	lea    edx,[eax+0x2]
c000c702:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c706:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c70a:	0f b6 c0             	movzx  eax,al
c000c70d:	c1 e0 10             	shl    eax,0x10
c000c710:	09 c1                	or     ecx,eax
c000c712:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c716:	8d 50 03             	lea    edx,[eax+0x3]
c000c719:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c71d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c721:	0f b6 c0             	movzx  eax,al
c000c724:	c1 e0 18             	shl    eax,0x18
c000c727:	09 c8                	or     eax,ecx
c000c729:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c72d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c732:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c736:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c73a:	01 d0                	add    eax,edx
c000c73c:	83 c0 2c             	add    eax,0x2c
c000c73f:	8a 00                	mov    al,BYTE PTR [eax]
c000c741:	0f b6 c0             	movzx  eax,al
c000c744:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c748:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c74b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c74f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c753:	0f b6 d2             	movzx  edx,dl
c000c756:	c1 e2 08             	shl    edx,0x8
c000c759:	09 d0                	or     eax,edx
c000c75b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c760:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c765:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c76a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c76e:	88 90 48 62 02 c0    	mov    BYTE PTR [eax-0x3ffd9db8],dl
c000c774:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c779:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c77e:	66 89 84 12 20 be 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd41e0],ax
c000c786:	e9 b9 00 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c78b:	90                   	nop
c000c78c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c791:	83 f8 04             	cmp    eax,0x4
c000c794:	0f 85 9a 00 00 00    	jne    c000c834 <scanMADT()+0x474>
c000c79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c79e:	8d 50 01             	lea    edx,[eax+0x1]
c000c7a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7ad:	0f b6 c0             	movzx  eax,al
c000c7b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7bc:	01 d0                	add    eax,edx
c000c7be:	83 c0 2c             	add    eax,0x2c
c000c7c1:	8a 00                	mov    al,BYTE PTR [eax]
c000c7c3:	0f b6 d0             	movzx  edx,al
c000c7c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ca:	8d 48 01             	lea    ecx,[eax+0x1]
c000c7cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c7d1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c7d5:	0f b6 c0             	movzx  eax,al
c000c7d8:	c1 e0 08             	shl    eax,0x8
c000c7db:	09 d0                	or     eax,edx
c000c7dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7e1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ea:	8d 50 01             	lea    edx,[eax+0x1]
c000c7ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7f9:	0f b6 c0             	movzx  eax,al
c000c7fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c804:	c1 e0 08             	shl    eax,0x8
c000c807:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c80b:	89 c1                	mov    ecx,eax
c000c80d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c811:	c1 e0 18             	shl    eax,0x18
c000c814:	89 c3                	mov    ebx,eax
c000c816:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c000c81b:	8d 50 01             	lea    edx,[eax+0x1]
c000c81e:	89 15 8c bd 02 c0    	mov    DWORD PTR ds:0xc002bd8c,edx
c000c824:	09 d9                	or     ecx,ebx
c000c826:	89 ca                	mov    edx,ecx
c000c828:	89 14 85 a0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4260],edx
c000c82f:	eb 13                	jmp    c000c844 <scanMADT()+0x484>
c000c831:	8d 76 00             	lea    esi,[esi+0x0]
c000c834:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c839:	83 f8 05             	cmp    eax,0x5
c000c83c:	75 06                	jne    c000c844 <scanMADT()+0x484>
c000c83e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c843:	90                   	nop
c000c844:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c849:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c84d:	01 d0                	add    eax,edx
c000c84f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c853:	e9 38 fc ff ff       	jmp    c000c490 <scanMADT()+0xd0>
c000c858:	90                   	nop
c000c859:	eb 0d                	jmp    c000c868 <scanMADT()+0x4a8>
c000c85b:	90                   	nop
c000c85c:	90                   	nop
c000c85d:	eb 09                	jmp    c000c868 <scanMADT()+0x4a8>
c000c85f:	90                   	nop
c000c860:	90                   	nop
c000c861:	eb 05                	jmp    c000c868 <scanMADT()+0x4a8>
c000c863:	90                   	nop
c000c864:	90                   	nop
c000c865:	8d 76 00             	lea    esi,[esi+0x0]
c000c868:	83 c4 38             	add    esp,0x38
c000c86b:	5b                   	pop    ebx
c000c86c:	c3                   	ret    
c000c86d:	90                   	nop
c000c86e:	66 90                	xchg   ax,ax

c000c870 <ACPI::ACPI()>:
c000c870:	83 ec 0c             	sub    esp,0xc
c000c873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c877:	83 ec 08             	sub    esp,0x8
c000c87a:	68 4e 3b 02 c0       	push   0xc0023b4e
c000c87f:	50                   	push   eax
c000c880:	e8 31 d3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000c885:	83 c4 10             	add    esp,0x10
c000c888:	ba 6c 3d 02 c0       	mov    edx,0xc0023d6c
c000c88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c891:	89 10                	mov    DWORD PTR [eax],edx
c000c893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c897:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c8ba:	90                   	nop
c000c8bb:	83 c4 0c             	add    esp,0xc
c000c8be:	c3                   	ret    
c000c8bf:	90                   	nop

c000c8c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c8c0:	83 ec 2c             	sub    esp,0x2c
c000c8c3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c8c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c8cb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c8cf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c8d3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c8d8:	88 d0                	mov    al,dl
c000c8da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8e3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8eb:	90                   	nop
c000c8ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8f0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8fa:	0f 8d b0 00 00 00    	jge    c000c9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c900:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c904:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c908:	83 c2 2a             	add    edx,0x2a
c000c90b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c90f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c914:	0f b7 c0             	movzx  eax,ax
c000c917:	39 c2                	cmp    edx,eax
c000c919:	0f 85 85 00 00 00    	jne    c000c9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c91f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c923:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c927:	83 c2 2a             	add    edx,0x2a
c000c92a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c92e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c933:	0f b6 c0             	movzx  eax,al
c000c936:	39 c2                	cmp    edx,eax
c000c938:	75 6a                	jne    c000c9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c93a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c93f:	85 c0                	test   eax,eax
c000c941:	74 3d                	je     c000c980 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c943:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c947:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c94b:	83 c2 2a             	add    edx,0x2a
c000c94e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c952:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c959:	39 c2                	cmp    edx,eax
c000c95b:	74 13                	je     c000c970 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c95d:	83 ec 0c             	sub    esp,0xc
c000c960:	68 ec 3c 02 c0       	push   0xc0023cec
c000c965:	e8 8a 33 00 00       	call   c000fcf4 <KePanic(char const*)>
c000c96a:	83 c4 10             	add    esp,0x10
c000c96d:	8d 76 00             	lea    esi,[esi+0x0]
c000c970:	83 ec 0c             	sub    esp,0xc
c000c973:	68 53 3b 02 c0       	push   0xc0023b53
c000c978:	e8 77 33 00 00       	call   c000fcf4 <KePanic(char const*)>
c000c97d:	83 c4 10             	add    esp,0x10
c000c980:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c984:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c988:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c98c:	83 c2 2a             	add    edx,0x2a
c000c98f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c993:	8b 02                	mov    eax,DWORD PTR [edx]
c000c995:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c998:	89 01                	mov    DWORD PTR [ecx],eax
c000c99a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c99d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c9a2:	66 90                	xchg   ax,ax
c000c9a4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c9a9:	e9 3e ff ff ff       	jmp    c000c8ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c9ae:	66 90                	xchg   ax,ax
c000c9b0:	90                   	nop
c000c9b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9b5:	83 c4 2c             	add    esp,0x2c
c000c9b8:	c2 04 00             	ret    0x4
c000c9bb:	90                   	nop

c000c9bc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c9bc:	83 ec 1c             	sub    esp,0x1c
c000c9bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c9c3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c9c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c9d0:	88 c8                	mov    al,cl
c000c9d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c9d6:	88 d0                	mov    al,dl
c000c9d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ea:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9ed:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c9f1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ca03:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ca06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca0a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ca0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca13:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca19:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ca1d:	83 c0 01             	add    eax,0x1
c000ca20:	88 c1                	mov    cl,al
c000ca22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca26:	83 c2 2a             	add    edx,0x2a
c000ca29:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ca2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca31:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca3b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca3e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca42:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca4a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca50:	8d 50 01             	lea    edx,[eax+0x1]
c000ca53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca57:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca61:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca67:	3d 00 02 00 00       	cmp    eax,0x200
c000ca6c:	75 12                	jne    c000ca80 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca6e:	83 ec 0c             	sub    esp,0xc
c000ca71:	68 62 3b 02 c0       	push   0xc0023b62
c000ca76:	e8 79 32 00 00       	call   c000fcf4 <KePanic(char const*)>
c000ca7b:	83 c4 10             	add    esp,0x10
c000ca7e:	66 90                	xchg   ax,ax
c000ca80:	90                   	nop
c000ca81:	83 c4 1c             	add    esp,0x1c
c000ca84:	c3                   	ret    
c000ca85:	90                   	nop
c000ca86:	66 90                	xchg   ax,ax

c000ca88 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca88:	b8 00 00 00 00       	mov    eax,0x0
c000ca8d:	c3                   	ret    
c000ca8e:	66 90                	xchg   ax,ax

c000ca90 <ACPI::detectPCI()>:
c000ca90:	53                   	push   ebx
c000ca91:	83 ec 28             	sub    esp,0x28
c000ca94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca99:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca9e:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000caa3:	83 ec 08             	sub    esp,0x8
c000caa6:	68 7f 3b 02 c0       	push   0xc0023b7f
c000caab:	50                   	push   eax
c000caac:	e8 9b f8 ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000cab1:	83 c4 10             	add    esp,0x10
c000cab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cab8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000cabd:	74 0d                	je     c000cacc <ACPI::detectPCI()+0x3c>
c000cabf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cac4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cac9:	8d 76 00             	lea    esi,[esi+0x0]
c000cacc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000cad4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cad8:	8a 00                	mov    al,BYTE PTR [eax]
c000cada:	0f b6 c0             	movzx  eax,al
c000cadd:	83 f8 01             	cmp    eax,0x1
c000cae0:	75 0e                	jne    c000caf0 <ACPI::detectPCI()+0x60>
c000cae2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cae7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000caec:	eb 2e                	jmp    c000cb1c <ACPI::detectPCI()+0x8c>
c000caee:	66 90                	xchg   ax,ax
c000caf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000caf4:	8a 00                	mov    al,BYTE PTR [eax]
c000caf6:	0f b6 c0             	movzx  eax,al
c000caf9:	83 f8 02             	cmp    eax,0x2
c000cafc:	75 1e                	jne    c000cb1c <ACPI::detectPCI()+0x8c>
c000cafe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb03:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb08:	85 c0                	test   eax,eax
c000cb0a:	74 10                	je     c000cb1c <ACPI::detectPCI()+0x8c>
c000cb0c:	83 ec 0c             	sub    esp,0xc
c000cb0f:	68 1c 3d 02 c0       	push   0xc0023d1c
c000cb14:	e8 db 31 00 00       	call   c000fcf4 <KePanic(char const*)>
c000cb19:	83 c4 10             	add    esp,0x10
c000cb1c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cb20:	83 f0 01             	xor    eax,0x1
c000cb23:	0f b6 c0             	movzx  eax,al
c000cb26:	85 c0                	test   eax,eax
c000cb28:	74 46                	je     c000cb70 <ACPI::detectPCI()+0xe0>
c000cb2a:	e8 01 36 ff ff       	call   c0000130 <manualPCIProbe>
c000cb2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb33:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cb38:	75 0e                	jne    c000cb48 <ACPI::detectPCI()+0xb8>
c000cb3a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb3f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb44:	eb 2a                	jmp    c000cb70 <ACPI::detectPCI()+0xe0>
c000cb46:	66 90                	xchg   ax,ax
c000cb48:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb4d:	75 21                	jne    c000cb70 <ACPI::detectPCI()+0xe0>
c000cb4f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb54:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb59:	85 c0                	test   eax,eax
c000cb5b:	74 13                	je     c000cb70 <ACPI::detectPCI()+0xe0>
c000cb5d:	83 ec 0c             	sub    esp,0xc
c000cb60:	68 1c 3d 02 c0       	push   0xc0023d1c
c000cb65:	e8 8a 31 00 00       	call   c000fcf4 <KePanic(char const*)>
c000cb6a:	83 c4 10             	add    esp,0x10
c000cb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb70:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb75:	85 c0                	test   eax,eax
c000cb77:	0f 84 87 00 00 00    	je     c000cc04 <ACPI::detectPCI()+0x174>
c000cb7d:	83 ec 0c             	sub    esp,0xc
c000cb80:	68 84 3b 02 c0       	push   0xc0023b84
c000cb85:	e8 7b 07 00 00       	call   c000d305 <KeSetBootMessage(char const*)>
c000cb8a:	83 c4 10             	add    esp,0x10
c000cb8d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb95:	83 ec 0c             	sub    esp,0xc
c000cb98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb9c:	e8 f6 2c 00 00       	call   c000f897 <malloc>
c000cba1:	83 c4 10             	add    esp,0x10
c000cba4:	89 c3                	mov    ebx,eax
c000cba6:	83 ec 0c             	sub    esp,0xc
c000cba9:	53                   	push   ebx
c000cbaa:	e8 65 0f 01 00       	call   c001db14 <PCI::PCI()>
c000cbaf:	83 c4 10             	add    esp,0x10
c000cbb2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cbb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbba:	83 ec 08             	sub    esp,0x8
c000cbbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbc1:	50                   	push   eax
c000cbc2:	e8 8d ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cbc7:	83 c4 10             	add    esp,0x10
c000cbca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbce:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd0:	83 c0 08             	add    eax,0x8
c000cbd3:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cbda:	85 d2                	test   edx,edx
c000cbdc:	74 0a                	je     c000cbe8 <ACPI::detectPCI()+0x158>
c000cbde:	ba 01 00 00 00       	mov    edx,0x1
c000cbe3:	eb 0b                	jmp    c000cbf0 <ACPI::detectPCI()+0x160>
c000cbe5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbe8:	ba 02 00 00 00       	mov    edx,0x2
c000cbed:	8d 76 00             	lea    esi,[esi+0x0]
c000cbf0:	6a 00                	push   0x0
c000cbf2:	6a 00                	push   0x0
c000cbf4:	52                   	push   edx
c000cbf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbf9:	ff d0                	call   eax
c000cbfb:	83 c4 10             	add    esp,0x10
c000cbfe:	e9 91 00 00 00       	jmp    c000cc94 <ACPI::detectPCI()+0x204>
c000cc03:	90                   	nop
c000cc04:	83 ec 0c             	sub    esp,0xc
c000cc07:	68 9c 3b 02 c0       	push   0xc0023b9c
c000cc0c:	e8 f4 06 00 00       	call   c000d305 <KeSetBootMessage(char const*)>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cc1b:	83 ec 0c             	sub    esp,0xc
c000cc1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cc22:	e8 70 2c 00 00       	call   c000f897 <malloc>
c000cc27:	83 c4 10             	add    esp,0x10
c000cc2a:	89 c3                	mov    ebx,eax
c000cc2c:	83 ec 0c             	sub    esp,0xc
c000cc2f:	53                   	push   ebx
c000cc30:	e8 e5 1a 01 00       	call   c001e71a <IDE::IDE()>
c000cc35:	83 c4 10             	add    esp,0x10
c000cc38:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc40:	83 ec 08             	sub    esp,0x8
c000cc43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc47:	50                   	push   eax
c000cc48:	e8 07 ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cc4d:	83 c4 10             	add    esp,0x10
c000cc50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc54:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc62:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc6f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc7e:	83 c0 08             	add    eax,0x8
c000cc81:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc83:	6a 00                	push   0x0
c000cc85:	6a 00                	push   0x0
c000cc87:	6a 00                	push   0x0
c000cc89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8d:	ff d0                	call   eax
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	66 90                	xchg   ax,ax
c000cc94:	90                   	nop
c000cc95:	83 c4 28             	add    esp,0x28
c000cc98:	5b                   	pop    ebx
c000cc99:	c3                   	ret    
c000cc9a:	66 90                	xchg   ax,ax

c000cc9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc9c:	83 ec 0c             	sub    esp,0xc
c000cc9f:	83 ec 0c             	sub    esp,0xc
c000cca2:	68 b1 3b 02 c0       	push   0xc0023bb1
c000cca7:	e8 48 30 00 00       	call   c000fcf4 <KePanic(char const*)>
c000ccac:	83 c4 10             	add    esp,0x10
c000ccaf:	90                   	nop
c000ccb0:	83 c4 0c             	add    esp,0xc
c000ccb3:	c3                   	ret    

c000ccb4 <ACPI::open(int, int, void*)>:
c000ccb4:	57                   	push   edi
c000ccb5:	56                   	push   esi
c000ccb6:	53                   	push   ebx
c000ccb7:	81 ec 70 01 00 00    	sub    esp,0x170
c000ccbd:	83 ec 0c             	sub    esp,0xc
c000ccc0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ccc7:	e8 c4 fd ff ff       	call   c000ca90 <ACPI::detectPCI()>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	83 ec 0c             	sub    esp,0xc
c000ccd2:	68 44 3d 02 c0       	push   0xc0023d44
c000ccd7:	e8 29 06 00 00       	call   c000d305 <KeSetBootMessage(char const*)>
c000ccdc:	83 c4 10             	add    esp,0x10
c000ccdf:	b8 4c 05 00 00       	mov    eax,0x54c
c000cce4:	8a 00                	mov    al,BYTE PTR [eax]
c000cce6:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000cced:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000ccf5:	83 f8 01             	cmp    eax,0x1
c000ccf8:	75 12                	jne    c000cd0c <ACPI::open(int, int, void*)+0x58>
c000ccfa:	83 ec 0c             	sub    esp,0xc
c000ccfd:	68 c2 3b 02 c0       	push   0xc0023bc2
c000cd02:	e8 da 8a 00 00       	call   c00157e1 <Thr::loadKernelSymbolTable(char const*)>
c000cd07:	83 c4 10             	add    esp,0x10
c000cd0a:	eb 34                	jmp    c000cd40 <ACPI::open(int, int, void*)+0x8c>
c000cd0c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cd14:	3d bb 00 00 00       	cmp    eax,0xbb
c000cd19:	75 15                	jne    c000cd30 <ACPI::open(int, int, void*)+0x7c>
c000cd1b:	83 ec 0c             	sub    esp,0xc
c000cd1e:	68 e0 3b 02 c0       	push   0xc0023be0
c000cd23:	e8 b9 8a 00 00       	call   c00157e1 <Thr::loadKernelSymbolTable(char const*)>
c000cd28:	83 c4 10             	add    esp,0x10
c000cd2b:	eb 13                	jmp    c000cd40 <ACPI::open(int, int, void*)+0x8c>
c000cd2d:	8d 76 00             	lea    esi,[esi+0x0]
c000cd30:	83 ec 0c             	sub    esp,0xc
c000cd33:	68 fe 3b 02 c0       	push   0xc0023bfe
c000cd38:	e8 b7 2f 00 00       	call   c000fcf4 <KePanic(char const*)>
c000cd3d:	83 c4 10             	add    esp,0x10
c000cd40:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000cd48:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000cd53:	83 ec 0c             	sub    esp,0xc
c000cd56:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000cd5d:	e8 35 2b 00 00       	call   c000f897 <malloc>
c000cd62:	83 c4 10             	add    esp,0x10
c000cd65:	89 c3                	mov    ebx,eax
c000cd67:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000cd6c:	83 ec 04             	sub    esp,0x4
c000cd6f:	50                   	push   eax
c000cd70:	68 18 3c 02 c0       	push   0xc0023c18
c000cd75:	53                   	push   ebx
c000cd76:	e8 0f b4 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000cd85:	83 ec 08             	sub    esp,0x8
c000cd88:	6a 01                	push   0x1
c000cd8a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd91:	e8 12 b4 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000cda0:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000cda8:	75 16                	jne    c000cdc0 <ACPI::open(int, int, void*)+0x10c>
c000cdaa:	83 ec 0c             	sub    esp,0xc
c000cdad:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdb4:	e8 4d b4 ff ff       	call   c0008206 <File::close()>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	eb 0a                	jmp    c000cdc8 <ACPI::open(int, int, void*)+0x114>
c000cdbe:	66 90                	xchg   ax,ax
c000cdc0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000cdc8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000cdd0:	74 1e                	je     c000cdf0 <ACPI::open(int, int, void*)+0x13c>
c000cdd2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000cdd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cddb:	83 c0 08             	add    eax,0x8
c000cdde:	8b 00                	mov    eax,DWORD PTR [eax]
c000cde0:	83 ec 0c             	sub    esp,0xc
c000cde3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdea:	ff d0                	call   eax
c000cdec:	83 c4 10             	add    esp,0x10
c000cdef:	90                   	nop
c000cdf0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000cdf7:	83 f0 01             	xor    eax,0x1
c000cdfa:	0f b6 c0             	movzx  eax,al
c000cdfd:	85 c0                	test   eax,eax
c000cdff:	74 2f                	je     c000ce30 <ACPI::open(int, int, void*)+0x17c>
c000ce01:	83 ec 0c             	sub    esp,0xc
c000ce04:	68 36 3c 02 c0       	push   0xc0023c36
c000ce09:	e8 f7 04 00 00       	call   c000d305 <KeSetBootMessage(char const*)>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000ce1c:	83 ec 0c             	sub    esp,0xc
c000ce1f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ce26:	e8 2b 67 00 00       	call   c0013556 <Virt::setupPageSwapping(int)>
c000ce2b:	83 c4 10             	add    esp,0x10
c000ce2e:	66 90                	xchg   ax,ax
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	68 51 3c 02 c0       	push   0xc0023c51
c000ce38:	e8 c8 04 00 00       	call   c000d305 <KeSetBootMessage(char const*)>
c000ce3d:	83 c4 10             	add    esp,0x10
c000ce40:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ce47:	83 ec 08             	sub    esp,0x8
c000ce4a:	6a 13                	push   0x13
c000ce4c:	50                   	push   eax
c000ce4d:	e8 30 cf ff ff       	call   c0009d82 <getDevicesOfType(DeviceType)>
c000ce52:	83 c4 0c             	add    esp,0xc
c000ce55:	8d 76 00             	lea    esi,[esi+0x0]
c000ce58:	83 ec 0c             	sub    esp,0xc
c000ce5b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce62:	50                   	push   eax
c000ce63:	e8 34 51 01 00       	call   c0021f9c <LinkedList<Device>::isEmpty()>
c000ce68:	83 c4 10             	add    esp,0x10
c000ce6b:	83 f0 01             	xor    eax,0x1
c000ce6e:	0f b6 c0             	movzx  eax,al
c000ce71:	85 c0                	test   eax,eax
c000ce73:	0f 84 47 01 00 00    	je     c000cfc0 <ACPI::open(int, int, void*)+0x30c>
c000ce79:	83 ec 0c             	sub    esp,0xc
c000ce7c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce83:	50                   	push   eax
c000ce84:	e8 2f 51 01 00       	call   c0021fb8 <LinkedList<Device>::getFirstElement()>
c000ce89:	83 c4 10             	add    esp,0x10
c000ce8c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ce93:	83 ec 0c             	sub    esp,0xc
c000ce96:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce9d:	50                   	push   eax
c000ce9e:	e8 1d 51 01 00       	call   c0021fc0 <LinkedList<Device>::removeFirst()>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000cead:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ceb4:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000cebb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000cebf:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000cec5:	ba 09 00 00 00       	mov    edx,0x9
c000ceca:	fc                   	cld    
c000cecb:	89 c7                	mov    edi,eax
c000cecd:	89 de                	mov    esi,ebx
c000cecf:	89 d1                	mov    ecx,edx
c000ced1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ced3:	83 ec 08             	sub    esp,0x8
c000ced6:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ceda:	50                   	push   eax
c000cedb:	83 ec 24             	sub    esp,0x24
c000cede:	89 e0                	mov    eax,esp
c000cee0:	89 c3                	mov    ebx,eax
c000cee2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000cee6:	ba 09 00 00 00       	mov    edx,0x9
c000ceeb:	89 df                	mov    edi,ebx
c000ceed:	89 c6                	mov    esi,eax
c000ceef:	89 d1                	mov    ecx,edx
c000cef1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000cef3:	e8 06 11 01 00       	call   c001dffe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000cef8:	83 c4 30             	add    esp,0x30
c000cefb:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000cf02:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000cf0a:	0f 84 48 ff ff ff    	je     c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cf10:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000cf1b:	83 ec 0c             	sub    esp,0xc
c000cf1e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000cf25:	e8 6d 29 00 00       	call   c000f897 <malloc>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	89 c3                	mov    ebx,eax
c000cf2f:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000cf34:	83 ec 04             	sub    esp,0x4
c000cf37:	50                   	push   eax
c000cf38:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf3f:	53                   	push   ebx
c000cf40:	e8 45 b2 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cf45:	83 c4 10             	add    esp,0x10
c000cf48:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000cf4f:	83 ec 0c             	sub    esp,0xc
c000cf52:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf59:	e8 0e b5 ff ff       	call   c000846c <File::exists()>
c000cf5e:	83 c4 10             	add    esp,0x10
c000cf61:	0f b6 c0             	movzx  eax,al
c000cf64:	85 c0                	test   eax,eax
c000cf66:	74 28                	je     c000cf90 <ACPI::open(int, int, void*)+0x2dc>
c000cf68:	83 ec 08             	sub    esp,0x8
c000cf6b:	6a 01                	push   0x1
c000cf6d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf74:	e8 f1 92 00 00       	call   c001626a <Thr::loadDLL(char const*, bool)>
c000cf79:	83 c4 10             	add    esp,0x10
c000cf7c:	83 ec 08             	sub    esp,0x8
c000cf7f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf86:	50                   	push   eax
c000cf87:	e8 30 95 00 00       	call   c00164bc <Thr::executeDLL(unsigned long, void*)>
c000cf8c:	83 c4 10             	add    esp,0x10
c000cf8f:	90                   	nop
c000cf90:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000cf98:	0f 84 ba fe ff ff    	je     c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cf9e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000cfa5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfa7:	83 c0 08             	add    eax,0x8
c000cfaa:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfac:	83 ec 0c             	sub    esp,0xc
c000cfaf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cfb6:	ff d0                	call   eax
c000cfb8:	83 c4 10             	add    esp,0x10
c000cfbb:	e9 98 fe ff ff       	jmp    c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cfc0:	83 ec 0c             	sub    esp,0xc
c000cfc3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cfca:	50                   	push   eax
c000cfcb:	e8 c8 4f 01 00       	call   c0021f98 <LinkedList<Device>::~LinkedList()>
c000cfd0:	83 c4 10             	add    esp,0x10
c000cfd3:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c000cfd9:	83 ec 08             	sub    esp,0x8
c000cfdc:	6a 01                	push   0x1
c000cfde:	68 6b 3c 02 c0       	push   0xc0023c6b
c000cfe3:	e8 82 92 00 00       	call   c001626a <Thr::loadDLL(char const*, bool)>
c000cfe8:	83 c4 10             	add    esp,0x10
c000cfeb:	83 ec 08             	sub    esp,0x8
c000cfee:	53                   	push   ebx
c000cfef:	50                   	push   eax
c000cff0:	e8 c7 94 00 00       	call   c00164bc <Thr::executeDLL(unsigned long, void*)>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cffd:	85 c0                	test   eax,eax
c000cfff:	0f 84 27 01 00 00    	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d005:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000d00a:	85 c0                	test   eax,eax
c000d00c:	0f 84 1a 01 00 00    	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d012:	83 ec 0c             	sub    esp,0xc
c000d015:	68 88 3c 02 c0       	push   0xc0023c88
c000d01a:	e8 e6 02 00 00       	call   c000d305 <KeSetBootMessage(char const*)>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000d02d:	83 ec 0c             	sub    esp,0xc
c000d030:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000d037:	e8 5b 28 00 00       	call   c000f897 <malloc>
c000d03c:	83 c4 10             	add    esp,0x10
c000d03f:	89 c3                	mov    ebx,eax
c000d041:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000d046:	83 ec 04             	sub    esp,0x4
c000d049:	50                   	push   eax
c000d04a:	68 a5 3c 02 c0       	push   0xc0023ca5
c000d04f:	53                   	push   ebx
c000d050:	e8 35 b1 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d055:	83 c4 10             	add    esp,0x10
c000d058:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000d05f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d067:	74 1f                	je     c000d088 <ACPI::open(int, int, void*)+0x3d4>
c000d069:	83 ec 0c             	sub    esp,0xc
c000d06c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d073:	e8 f4 b3 ff ff       	call   c000846c <File::exists()>
c000d078:	83 c4 10             	add    esp,0x10
c000d07b:	0f b6 c0             	movzx  eax,al
c000d07e:	85 c0                	test   eax,eax
c000d080:	74 06                	je     c000d088 <ACPI::open(int, int, void*)+0x3d4>
c000d082:	b0 01                	mov    al,0x1
c000d084:	eb 06                	jmp    c000d08c <ACPI::open(int, int, void*)+0x3d8>
c000d086:	66 90                	xchg   ax,ax
c000d088:	b0 00                	mov    al,0x0
c000d08a:	66 90                	xchg   ax,ax
c000d08c:	0f b6 c0             	movzx  eax,al
c000d08f:	85 c0                	test   eax,eax
c000d091:	74 25                	je     c000d0b8 <ACPI::open(int, int, void*)+0x404>
c000d093:	83 ec 08             	sub    esp,0x8
c000d096:	6a 01                	push   0x1
c000d098:	68 a5 3c 02 c0       	push   0xc0023ca5
c000d09d:	e8 c8 91 00 00       	call   c001626a <Thr::loadDLL(char const*, bool)>
c000d0a2:	83 c4 10             	add    esp,0x10
c000d0a5:	83 ec 08             	sub    esp,0x8
c000d0a8:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000d0af:	50                   	push   eax
c000d0b0:	e8 07 94 00 00       	call   c00164bc <Thr::executeDLL(unsigned long, void*)>
c000d0b5:	83 c4 10             	add    esp,0x10
c000d0b8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d0c0:	74 2a                	je     c000d0ec <ACPI::open(int, int, void*)+0x438>
c000d0c2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d0ca:	74 20                	je     c000d0ec <ACPI::open(int, int, void*)+0x438>
c000d0cc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d0d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0d5:	83 c0 08             	add    eax,0x8
c000d0d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0da:	83 ec 0c             	sub    esp,0xc
c000d0dd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d0e4:	ff d0                	call   eax
c000d0e6:	83 c4 10             	add    esp,0x10
c000d0e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d0ec:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000d0f1:	83 ec 08             	sub    esp,0x8
c000d0f4:	68 c2 3c 02 c0       	push   0xc0023cc2
c000d0f9:	50                   	push   eax
c000d0fa:	e8 4d f2 ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d109:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d111:	74 19                	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d113:	83 ec 08             	sub    esp,0x8
c000d116:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d11d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d124:	e8 73 fb ff ff       	call   c000cc9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d129:	83 c4 10             	add    esp,0x10
c000d12c:	b8 00 00 00 00       	mov    eax,0x0
c000d131:	81 c4 70 01 00 00    	add    esp,0x170
c000d137:	5b                   	pop    ebx
c000d138:	5e                   	pop    esi
c000d139:	5f                   	pop    edi
c000d13a:	c3                   	ret    
c000d13b:	90                   	nop

c000d13c <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d13c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d142:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d149:	89 c2                	mov    edx,eax
c000d14b:	c1 fa 1f             	sar    edx,0x1f
c000d14e:	83 ec 04             	sub    esp,0x4
c000d151:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d155:	51                   	push   ecx
c000d156:	52                   	push   edx
c000d157:	50                   	push   eax
c000d158:	e8 2f 25 00 00       	call   c000f68c <KeItoa(long long, char*)>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	83 ec 08             	sub    esp,0x8
c000d163:	68 90 3d 02 c0       	push   0xc0023d90
c000d168:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d16c:	50                   	push   eax
c000d16d:	e8 ce 34 ff ff       	call   c0000640 <strcpy>
c000d172:	83 c4 10             	add    esp,0x10
c000d175:	83 ec 08             	sub    esp,0x8
c000d178:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d17f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d183:	50                   	push   eax
c000d184:	e8 b7 36 ff ff       	call   c0000840 <strcat>
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	83 ec 08             	sub    esp,0x8
c000d18f:	68 9e 3d 02 c0       	push   0xc0023d9e
c000d194:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d198:	50                   	push   eax
c000d199:	e8 a2 36 ff ff       	call   c0000840 <strcat>
c000d19e:	83 c4 10             	add    esp,0x10
c000d1a1:	83 ec 08             	sub    esp,0x8
c000d1a4:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d1ab:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1af:	50                   	push   eax
c000d1b0:	e8 8b 36 ff ff       	call   c0000840 <strcat>
c000d1b5:	83 c4 10             	add    esp,0x10
c000d1b8:	83 ec 08             	sub    esp,0x8
c000d1bb:	68 a1 3d 02 c0       	push   0xc0023da1
c000d1c0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1c4:	50                   	push   eax
c000d1c5:	e8 76 36 ff ff       	call   c0000840 <strcat>
c000d1ca:	83 c4 10             	add    esp,0x10
c000d1cd:	83 ec 08             	sub    esp,0x8
c000d1d0:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d1d7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1db:	50                   	push   eax
c000d1dc:	e8 5f 36 ff ff       	call   c0000840 <strcat>
c000d1e1:	83 c4 10             	add    esp,0x10
c000d1e4:	83 ec 08             	sub    esp,0x8
c000d1e7:	68 a1 3d 02 c0       	push   0xc0023da1
c000d1ec:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1f0:	50                   	push   eax
c000d1f1:	e8 4a 36 ff ff       	call   c0000840 <strcat>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	83 ec 08             	sub    esp,0x8
c000d1fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d200:	50                   	push   eax
c000d201:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d205:	50                   	push   eax
c000d206:	e8 35 36 ff ff       	call   c0000840 <strcat>
c000d20b:	83 c4 10             	add    esp,0x10
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d215:	50                   	push   eax
c000d216:	e8 d9 2a 00 00       	call   c000fcf4 <KePanic(char const*)>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	90                   	nop
c000d21f:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d225:	c3                   	ret    

c000d226 <KeInitialiseAtexit()>:
c000d226:	83 ec 10             	sub    esp,0x10
c000d229:	c7 05 e0 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bfe0,0x0
c000d233:	68 80 00 00 00       	push   0x80
c000d238:	6a 00                	push   0x0
c000d23a:	68 80 c0 02 c0       	push   0xc002c080
c000d23f:	e8 ac 32 ff ff       	call   c00004f0 <memset>
c000d244:	83 c4 1c             	add    esp,0x1c
c000d247:	c3                   	ret    

c000d248 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d248:	a1 e0 bf 02 c0       	mov    eax,ds:0xc002bfe0
c000d24d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d251:	89 14 85 80 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f80],edx
c000d258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d25c:	89 14 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],edx
c000d263:	40                   	inc    eax
c000d264:	a3 e0 bf 02 c0       	mov    ds:0xc002bfe0,eax
c000d269:	83 f8 1f             	cmp    eax,0x1f
c000d26c:	7e 0d                	jle    c000d27b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d26e:	c7 44 24 04 a3 3d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023da3
c000d276:	e9 79 2a 00 00       	jmp    c000fcf4 <KePanic(char const*)>
c000d27b:	c3                   	ret    

c000d27c <KeExecuteAtexit()>:
c000d27c:	53                   	push   ebx
c000d27d:	31 db                	xor    ebx,ebx
c000d27f:	83 ec 08             	sub    esp,0x8
c000d282:	39 1d e0 bf 02 c0    	cmp    DWORD PTR ds:0xc002bfe0,ebx
c000d288:	7e 28                	jle    c000d2b2 <KeExecuteAtexit()+0x36>
c000d28a:	8b 04 9d 80 c0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3f80]
c000d291:	85 c0                	test   eax,eax
c000d293:	74 1a                	je     c000d2af <KeExecuteAtexit()+0x33>
c000d295:	83 ec 0c             	sub    esp,0xc
c000d298:	ff 34 9d 00 c0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4000]
c000d29f:	ff d0                	call   eax
c000d2a1:	c7 04 9d 80 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd3f80],0x0
c000d2ac:	83 c4 10             	add    esp,0x10
c000d2af:	43                   	inc    ebx
c000d2b0:	eb d0                	jmp    c000d282 <KeExecuteAtexit()+0x6>
c000d2b2:	83 c4 08             	add    esp,0x8
c000d2b5:	5b                   	pop    ebx
c000d2b6:	c3                   	ret    
c000d2b7:	90                   	nop

c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d2b8:	8b 15 00 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c100
c000d2be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2c2:	21 d0                	and    eax,edx
c000d2c4:	0f 95 c0             	setne  al
c000d2c7:	c3                   	ret    

c000d2c8 <KeInitialiseBootConfigurationFlags()>:
c000d2c8:	b8 00 05 00 00       	mov    eax,0x500
c000d2cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2cf:	a3 00 c1 02 c0       	mov    ds:0xc002c100,eax
c000d2d4:	90                   	nop
c000d2d5:	c3                   	ret    

c000d2d6 <KeDisplaySplashScreen()>:
c000d2d6:	53                   	push   ebx
c000d2d7:	bb 01 00 00 00       	mov    ebx,0x1
c000d2dc:	83 ec 08             	sub    esp,0x8
c000d2df:	43                   	inc    ebx
c000d2e0:	0f be 83 ba 3d 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc246]
c000d2e7:	85 c0                	test   eax,eax
c000d2e9:	74 15                	je     c000d300 <KeDisplaySplashScreen()+0x2a>
c000d2eb:	83 ec 0c             	sub    esp,0xc
c000d2ee:	6a 01                	push   0x1
c000d2f0:	53                   	push   ebx
c000d2f1:	6a 00                	push   0x0
c000d2f3:	6a 0f                	push   0xf
c000d2f5:	50                   	push   eax
c000d2f6:	e8 f9 e3 00 00       	call   c001b6f4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d2fb:	83 c4 20             	add    esp,0x20
c000d2fe:	eb df                	jmp    c000d2df <KeDisplaySplashScreen()+0x9>
c000d300:	83 c4 08             	add    esp,0x8
c000d303:	5b                   	pop    ebx
c000d304:	c3                   	ret    

c000d305 <KeSetBootMessage(char const*)>:
c000d305:	57                   	push   edi
c000d306:	56                   	push   esi
c000d307:	53                   	push   ebx
c000d308:	31 db                	xor    ebx,ebx
c000d30a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d30e:	83 ec 0c             	sub    esp,0xc
c000d311:	6a 14                	push   0x14
c000d313:	53                   	push   ebx
c000d314:	43                   	inc    ebx
c000d315:	6a 00                	push   0x0
c000d317:	6a 00                	push   0x0
c000d319:	6a 20                	push   0x20
c000d31b:	e8 d4 e3 00 00       	call   c001b6f4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d320:	83 c4 20             	add    esp,0x20
c000d323:	83 fb 50             	cmp    ebx,0x50
c000d326:	75 e6                	jne    c000d30e <KeSetBootMessage(char const*)+0x9>
c000d328:	83 ec 0c             	sub    esp,0xc
c000d32b:	56                   	push   esi
c000d32c:	e8 3f 32 ff ff       	call   c0000570 <strlen>
c000d331:	83 c4 10             	add    esp,0x10
c000d334:	29 c3                	sub    ebx,eax
c000d336:	d1 eb                	shr    ebx,1
c000d338:	89 df                	mov    edi,ebx
c000d33a:	89 f0                	mov    eax,esi
c000d33c:	29 d8                	sub    eax,ebx
c000d33e:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000d342:	85 c0                	test   eax,eax
c000d344:	74 16                	je     c000d35c <KeSetBootMessage(char const*)+0x57>
c000d346:	83 ec 0c             	sub    esp,0xc
c000d349:	6a 14                	push   0x14
c000d34b:	57                   	push   edi
c000d34c:	47                   	inc    edi
c000d34d:	6a 00                	push   0x0
c000d34f:	6a 07                	push   0x7
c000d351:	50                   	push   eax
c000d352:	e8 9d e3 00 00       	call   c001b6f4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d357:	83 c4 20             	add    esp,0x20
c000d35a:	eb de                	jmp    c000d33a <KeSetBootMessage(char const*)+0x35>
c000d35c:	5b                   	pop    ebx
c000d35d:	5e                   	pop    esi
c000d35e:	5f                   	pop    edi
c000d35f:	c3                   	ret    

c000d360 <__cxa_atexit>:
c000d360:	31 c0                	xor    eax,eax
c000d362:	c3                   	ret    

c000d363 <__cxa_finalize>:
c000d363:	c3                   	ret    

c000d364 <__stack_chk_fail>:
c000d364:	55                   	push   ebp
c000d365:	89 e5                	mov    ebp,esp
c000d367:	83 ec 10             	sub    esp,0x10
c000d36a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d36d:	68 cf 3d 02 c0       	push   0xc0023dcf
c000d372:	e8 05 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d377:	58                   	pop    eax
c000d378:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d37b:	5a                   	pop    edx
c000d37c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d37f:	68 cf 3d 02 c0       	push   0xc0023dcf
c000d384:	e8 f3 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d389:	c7 04 24 d7 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dd7
c000d390:	e8 5f 29 00 00       	call   c000fcf4 <KePanic(char const*)>
c000d395:	83 c4 10             	add    esp,0x10
c000d398:	c9                   	leave  
c000d399:	c3                   	ret    

c000d39a <__cxa_pure_virtual>:
c000d39a:	83 ec 18             	sub    esp,0x18
c000d39d:	68 ef 3d 02 c0       	push   0xc0023def
c000d3a2:	e8 4d 29 00 00       	call   c000fcf4 <KePanic(char const*)>
c000d3a7:	83 c4 1c             	add    esp,0x1c
c000d3aa:	c3                   	ret    

c000d3ab <operator new[](unsigned long)>:
c000d3ab:	e9 e7 24 00 00       	jmp    c000f897 <malloc>

c000d3b0 <operator delete(void*, unsigned long)>:
c000d3b0:	e9 02 25 00 00       	jmp    c000f8b7 <rfree>

c000d3b5 <operator delete[](void*)>:
c000d3b5:	e9 fd 24 00 00       	jmp    c000f8b7 <rfree>

c000d3ba <operator delete[](void*, unsigned long)>:
c000d3ba:	e9 f8 24 00 00       	jmp    c000f8b7 <rfree>
c000d3bf:	90                   	nop

c000d3c0 <CUnlockScheduler>:
c000d3c0:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000d3c8:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000d3cd:	85 c0                	test   eax,eax
c000d3cf:	75 03                	jne    c000d3d4 <CUnlockScheduler+0x14>
c000d3d1:	fb                   	sti    
c000d3d2:	66 90                	xchg   ax,ax
c000d3d4:	90                   	nop
c000d3d5:	c3                   	ret    
c000d3d6:	66 90                	xchg   ax,ax

c000d3d8 <CLockScheduler>:
c000d3d8:	fa                   	cli    
c000d3d9:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000d3de:	83 c0 01             	add    eax,0x1
c000d3e1:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000d3e6:	90                   	nop
c000d3e7:	c3                   	ret    

c000d3e8 <CPrintf>:
c000d3e8:	83 ec 0c             	sub    esp,0xc
c000d3eb:	83 ec 08             	sub    esp,0x8
c000d3ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3f2:	68 02 3e 02 c0       	push   0xc0023e02
c000d3f7:	e8 80 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d3fc:	83 c4 10             	add    esp,0x10
c000d3ff:	90                   	nop
c000d400:	83 c4 0c             	add    esp,0xc
c000d403:	c3                   	ret    

c000d404 <CmOpen(char const*)>:
c000d404:	57                   	push   edi
c000d405:	56                   	push   esi
c000d406:	53                   	push   ebx
c000d407:	83 ec 1c             	sub    esp,0x1c
c000d40a:	6a 30                	push   0x30
c000d40c:	e8 86 24 00 00       	call   c000f897 <malloc>
c000d411:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d418:	89 c3                	mov    ebx,eax
c000d41a:	e8 78 24 00 00       	call   c000f897 <malloc>
c000d41f:	83 c4 0c             	add    esp,0xc
c000d422:	89 c6                	mov    esi,eax
c000d424:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000d42a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d42e:	50                   	push   eax
c000d42f:	e8 56 ad ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d434:	83 c4 0c             	add    esp,0xc
c000d437:	89 33                	mov    DWORD PTR [ebx],esi
c000d439:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d43d:	50                   	push   eax
c000d43e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d442:	50                   	push   eax
c000d443:	56                   	push   esi
c000d444:	e8 61 b0 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c000d449:	5a                   	pop    edx
c000d44a:	59                   	pop    ecx
c000d44b:	6a 01                	push   0x1
c000d44d:	ff 33                	push   DWORD PTR [ebx]
c000d44f:	e8 54 ad ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d454:	5e                   	pop    esi
c000d455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d459:	e8 39 24 00 00       	call   c000f897 <malloc>
c000d45e:	5a                   	pop    edx
c000d45f:	89 c7                	mov    edi,eax
c000d461:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d465:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d467:	8b 10                	mov    edx,DWORD PTR [eax]
c000d469:	56                   	push   esi
c000d46a:	57                   	push   edi
c000d46b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d46f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d473:	50                   	push   eax
c000d474:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d477:	83 c4 14             	add    esp,0x14
c000d47a:	ff 33                	push   DWORD PTR [ebx]
c000d47c:	e8 85 ad ff ff       	call   c0008206 <File::close()>
c000d481:	59                   	pop    ecx
c000d482:	58                   	pop    eax
c000d483:	6a 13                	push   0x13
c000d485:	ff 33                	push   DWORD PTR [ebx]
c000d487:	e8 1c ad ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d48c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d48e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d490:	89 34 24             	mov    DWORD PTR [esp],esi
c000d493:	57                   	push   edi
c000d494:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d498:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d49c:	50                   	push   eax
c000d49d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d4a0:	83 c4 14             	add    esp,0x14
c000d4a3:	57                   	push   edi
c000d4a4:	e8 fe 23 00 00       	call   c000f8a7 <free>
c000d4a9:	83 c4 10             	add    esp,0x10
c000d4ac:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d4af:	75 10                	jne    c000d4c1 <CmOpen(char const*)+0xbd>
c000d4b1:	83 ec 0c             	sub    esp,0xc
c000d4b4:	68 05 3e 02 c0       	push   0xc0023e05
c000d4b9:	e8 36 28 00 00       	call   c000fcf4 <KePanic(char const*)>
c000d4be:	83 c4 10             	add    esp,0x10
c000d4c1:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d4c4:	50                   	push   eax
c000d4c5:	6a 00                	push   0x0
c000d4c7:	6a 00                	push   0x0
c000d4c9:	ff 33                	push   DWORD PTR [ebx]
c000d4cb:	e8 96 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d4d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4d4:	89 34 24             	mov    DWORD PTR [esp],esi
c000d4d7:	57                   	push   edi
c000d4d8:	6a 00                	push   0x0
c000d4da:	6a 2b                	push   0x2b
c000d4dc:	50                   	push   eax
c000d4dd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d4e0:	83 c4 1c             	add    esp,0x1c
c000d4e3:	6a 00                	push   0x0
c000d4e5:	6a 00                	push   0x0
c000d4e7:	ff 33                	push   DWORD PTR [ebx]
c000d4e9:	e8 78 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d4ee:	83 c4 0c             	add    esp,0xc
c000d4f1:	6a 08                	push   0x8
c000d4f3:	68 27 3e 02 c0       	push   0xc0023e27
c000d4f8:	57                   	push   edi
c000d4f9:	e8 82 2e ff ff       	call   c0000380 <memcmp>
c000d4fe:	83 c4 10             	add    esp,0x10
c000d501:	85 c0                	test   eax,eax
c000d503:	74 10                	je     c000d515 <CmOpen(char const*)+0x111>
c000d505:	83 ec 0c             	sub    esp,0xc
c000d508:	68 30 3e 02 c0       	push   0xc0023e30
c000d50d:	e8 e2 27 00 00       	call   c000fcf4 <KePanic(char const*)>
c000d512:	83 c4 10             	add    esp,0x10
c000d515:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d519:	89 d8                	mov    eax,ebx
c000d51b:	83 c4 10             	add    esp,0x10
c000d51e:	5b                   	pop    ebx
c000d51f:	5e                   	pop    esi
c000d520:	5f                   	pop    edi
c000d521:	c3                   	ret    

c000d522 <CmClose(Reghive_Tag*)>:
c000d522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d526:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d52a:	74 0b                	je     c000d537 <CmClose(Reghive_Tag*)+0x15>
c000d52c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d52e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d532:	e9 cf ac ff ff       	jmp    c0008206 <File::close()>
c000d537:	c3                   	ret    

c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d538:	53                   	push   ebx
c000d539:	83 ec 18             	sub    esp,0x18
c000d53c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d540:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d544:	74 29                	je     c000d56f <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d546:	50                   	push   eax
c000d547:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d54c:	99                   	cdq    
c000d54d:	52                   	push   edx
c000d54e:	50                   	push   eax
c000d54f:	ff 33                	push   DWORD PTR [ebx]
c000d551:	e8 10 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d556:	5a                   	pop    edx
c000d557:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d559:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d55d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d55f:	51                   	push   ecx
c000d560:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d564:	6a 00                	push   0x0
c000d566:	6a 2b                	push   0x2b
c000d568:	50                   	push   eax
c000d569:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d56c:	83 c4 20             	add    esp,0x20
c000d56f:	83 c4 18             	add    esp,0x18
c000d572:	5b                   	pop    ebx
c000d573:	c3                   	ret    

c000d574 <CmGetString(Reghive_Tag*, int, char*)>:
c000d574:	55                   	push   ebp
c000d575:	57                   	push   edi
c000d576:	56                   	push   esi
c000d577:	53                   	push   ebx
c000d578:	31 db                	xor    ebx,ebx
c000d57a:	83 ec 70             	sub    esp,0x70
c000d57d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d584:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d588:	50                   	push   eax
c000d589:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d590:	55                   	push   ebp
c000d591:	e8 a2 ff ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d596:	83 c4 10             	add    esp,0x10
c000d599:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d59e:	c1 e0 08             	shl    eax,0x8
c000d5a1:	89 c2                	mov    edx,eax
c000d5a3:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d5a8:	09 d0                	or     eax,edx
c000d5aa:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d5af:	c1 e0 08             	shl    eax,0x8
c000d5b2:	09 d0                	or     eax,edx
c000d5b4:	74 25                	je     c000d5db <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d5b6:	6b fb 0d             	imul   edi,ebx,0xd
c000d5b9:	52                   	push   edx
c000d5ba:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d5be:	52                   	push   edx
c000d5bf:	50                   	push   eax
c000d5c0:	55                   	push   ebp
c000d5c1:	e8 72 ff ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5c6:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d5ca:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d5d1:	b9 27 00 00 00       	mov    ecx,0x27
c000d5d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5d8:	83 c4 10             	add    esp,0x10
c000d5db:	83 c3 03             	add    ebx,0x3
c000d5de:	83 fb 15             	cmp    ebx,0x15
c000d5e1:	75 b6                	jne    c000d599 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d5e3:	83 c4 6c             	add    esp,0x6c
c000d5e6:	5b                   	pop    ebx
c000d5e7:	5e                   	pop    esi
c000d5e8:	5f                   	pop    edi
c000d5e9:	5d                   	pop    ebp
c000d5ea:	c3                   	ret    

c000d5eb <CmEnterDirectory(Reghive_Tag*, int)>:
c000d5eb:	83 ec 40             	sub    esp,0x40
c000d5ee:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d5f2:	50                   	push   eax
c000d5f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5fb:	e8 38 ff ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d600:	83 c4 10             	add    esp,0x10
c000d603:	83 c8 ff             	or     eax,0xffffffff
c000d606:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d60b:	75 19                	jne    c000d626 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d60d:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d612:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d617:	c1 e0 08             	shl    eax,0x8
c000d61a:	09 c2                	or     edx,eax
c000d61c:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d621:	c1 e0 10             	shl    eax,0x10
c000d624:	09 d0                	or     eax,edx
c000d626:	83 c4 3c             	add    esp,0x3c
c000d629:	c3                   	ret    

c000d62a <CmGetNext(Reghive_Tag*, int)>:
c000d62a:	83 ec 40             	sub    esp,0x40
c000d62d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d631:	50                   	push   eax
c000d632:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d636:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d63a:	e8 f9 fe ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d63f:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d644:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d649:	c1 e0 08             	shl    eax,0x8
c000d64c:	09 c2                	or     edx,eax
c000d64e:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d653:	83 c4 4c             	add    esp,0x4c
c000d656:	c1 e0 10             	shl    eax,0x10
c000d659:	09 d0                	or     eax,edx
c000d65b:	c3                   	ret    

c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d65c:	53                   	push   ebx
c000d65d:	83 ec 18             	sub    esp,0x18
c000d660:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d664:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d668:	74 29                	je     c000d693 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d66a:	50                   	push   eax
c000d66b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d670:	99                   	cdq    
c000d671:	52                   	push   edx
c000d672:	50                   	push   eax
c000d673:	ff 33                	push   DWORD PTR [ebx]
c000d675:	e8 ec ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d67a:	5a                   	pop    edx
c000d67b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d67d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d681:	8b 10                	mov    edx,DWORD PTR [eax]
c000d683:	51                   	push   ecx
c000d684:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d688:	6a 00                	push   0x0
c000d68a:	6a 2b                	push   0x2b
c000d68c:	50                   	push   eax
c000d68d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d690:	83 c4 20             	add    esp,0x20
c000d693:	83 c4 18             	add    esp,0x18
c000d696:	5b                   	pop    ebx
c000d697:	c3                   	ret    

c000d698 <CmFreeExtent(Reghive_Tag*, int)>:
c000d698:	53                   	push   ebx
c000d699:	83 ec 3c             	sub    esp,0x3c
c000d69c:	6a 2b                	push   0x2b
c000d69e:	6a 00                	push   0x0
c000d6a0:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d6a4:	53                   	push   ebx
c000d6a5:	e8 46 2e ff ff       	call   c00004f0 <memset>
c000d6aa:	83 c4 0c             	add    esp,0xc
c000d6ad:	53                   	push   ebx
c000d6ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d6b2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d6b6:	e8 a1 ff ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d6bb:	83 c4 48             	add    esp,0x48
c000d6be:	5b                   	pop    ebx
c000d6bf:	c3                   	ret    

c000d6c0 <CmUpdateHeader(Reghive_Tag*)>:
c000d6c0:	83 ec 0c             	sub    esp,0xc
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d6cb:	74 10                	je     c000d6dd <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d6cd:	52                   	push   edx
c000d6ce:	8d 50 05             	lea    edx,[eax+0x5]
c000d6d1:	52                   	push   edx
c000d6d2:	6a 00                	push   0x0
c000d6d4:	50                   	push   eax
c000d6d5:	e8 82 ff ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d6da:	83 c4 10             	add    esp,0x10
c000d6dd:	83 c4 0c             	add    esp,0xc
c000d6e0:	c3                   	ret    

c000d6e1 <CmExpand(Reghive_Tag*, int)>:
c000d6e1:	57                   	push   edi
c000d6e2:	56                   	push   esi
c000d6e3:	83 ce ff             	or     esi,0xffffffff
c000d6e6:	53                   	push   ebx
c000d6e7:	83 ec 30             	sub    esp,0x30
c000d6ea:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d6ee:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d6f2:	74 5f                	je     c000d753 <CmExpand(Reghive_Tag*, int)+0x72>
c000d6f4:	31 d2                	xor    edx,edx
c000d6f6:	31 f6                	xor    esi,esi
c000d6f8:	50                   	push   eax
c000d6f9:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d6fd:	52                   	push   edx
c000d6fe:	50                   	push   eax
c000d6ff:	ff 33                	push   DWORD PTR [ebx]
c000d701:	e8 60 ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d706:	83 c4 0c             	add    esp,0xc
c000d709:	6a 2b                	push   0x2b
c000d70b:	6a 00                	push   0x0
c000d70d:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d711:	57                   	push   edi
c000d712:	e8 d9 2d ff ff       	call   c00004f0 <memset>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d71e:	7d 1b                	jge    c000d73b <CmExpand(Reghive_Tag*, int)+0x5a>
c000d720:	83 ec 0c             	sub    esp,0xc
c000d723:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d725:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d729:	8b 10                	mov    edx,DWORD PTR [eax]
c000d72b:	46                   	inc    esi
c000d72c:	51                   	push   ecx
c000d72d:	57                   	push   edi
c000d72e:	6a 00                	push   0x0
c000d730:	6a 2b                	push   0x2b
c000d732:	50                   	push   eax
c000d733:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d736:	83 c4 20             	add    esp,0x20
c000d739:	eb df                	jmp    c000d71a <CmExpand(Reghive_Tag*, int)+0x39>
c000d73b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d73f:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d742:	83 ec 0c             	sub    esp,0xc
c000d745:	01 f2                	add    edx,esi
c000d747:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d74a:	53                   	push   ebx
c000d74b:	e8 70 ff ff ff       	call   c000d6c0 <CmUpdateHeader(Reghive_Tag*)>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	83 c4 30             	add    esp,0x30
c000d756:	89 f0                	mov    eax,esi
c000d758:	5b                   	pop    ebx
c000d759:	5e                   	pop    esi
c000d75a:	5f                   	pop    edi
c000d75b:	c3                   	ret    

c000d75c <CmFindUnusedExtent(Reghive_Tag*)>:
c000d75c:	55                   	push   ebp
c000d75d:	57                   	push   edi
c000d75e:	56                   	push   esi
c000d75f:	53                   	push   ebx
c000d760:	83 cb ff             	or     ebx,0xffffffff
c000d763:	83 ec 1c             	sub    esp,0x1c
c000d766:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d76a:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d76e:	74 68                	je     c000d7d8 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d770:	be 2b 00 00 00       	mov    esi,0x2b
c000d775:	51                   	push   ecx
c000d776:	31 ff                	xor    edi,edi
c000d778:	6a 00                	push   0x0
c000d77a:	31 db                	xor    ebx,ebx
c000d77c:	6a 00                	push   0x0
c000d77e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d781:	e8 e0 aa ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d786:	83 c4 10             	add    esp,0x10
c000d789:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d78c:	76 3b                	jbe    c000d7c9 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d78e:	83 ec 0c             	sub    esp,0xc
c000d791:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d794:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d798:	8b 10                	mov    edx,DWORD PTR [eax]
c000d79a:	51                   	push   ecx
c000d79b:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d79f:	51                   	push   ecx
c000d7a0:	6a 00                	push   0x0
c000d7a2:	6a 01                	push   0x1
c000d7a4:	50                   	push   eax
c000d7a5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d7a8:	83 c4 20             	add    esp,0x20
c000d7ab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d7b0:	74 26                	je     c000d7d8 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d7b2:	43                   	inc    ebx
c000d7b3:	52                   	push   edx
c000d7b4:	57                   	push   edi
c000d7b5:	56                   	push   esi
c000d7b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d7b9:	e8 a8 aa ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d7be:	83 c6 2b             	add    esi,0x2b
c000d7c1:	83 d7 00             	adc    edi,0x0
c000d7c4:	83 c4 10             	add    esp,0x10
c000d7c7:	eb c0                	jmp    c000d789 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d7c9:	50                   	push   eax
c000d7ca:	50                   	push   eax
c000d7cb:	6a 40                	push   0x40
c000d7cd:	55                   	push   ebp
c000d7ce:	e8 0e ff ff ff       	call   c000d6e1 <CmExpand(Reghive_Tag*, int)>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	89 c3                	mov    ebx,eax
c000d7d8:	83 c4 1c             	add    esp,0x1c
c000d7db:	89 d8                	mov    eax,ebx
c000d7dd:	5b                   	pop    ebx
c000d7de:	5e                   	pop    esi
c000d7df:	5f                   	pop    edi
c000d7e0:	5d                   	pop    ebp
c000d7e1:	c3                   	ret    

c000d7e2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d7e2:	55                   	push   ebp
c000d7e3:	57                   	push   edi
c000d7e4:	56                   	push   esi
c000d7e5:	53                   	push   ebx
c000d7e6:	81 ec 88 00 00 00    	sub    esp,0x88
c000d7ec:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d7f3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7fa:	e8 5d ff ff ff       	call   c000d75c <CmFindUnusedExtent(Reghive_Tag*)>
c000d7ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d803:	83 c4 0c             	add    esp,0xc
c000d806:	6a 2b                	push   0x2b
c000d808:	6a 00                	push   0x0
c000d80a:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d80e:	55                   	push   ebp
c000d80f:	e8 dc 2c ff ff       	call   c00004f0 <memset>
c000d814:	83 c4 10             	add    esp,0x10
c000d817:	85 db                	test   ebx,ebx
c000d819:	74 12                	je     c000d82d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d81b:	51                   	push   ecx
c000d81c:	55                   	push   ebp
c000d81d:	53                   	push   ebx
c000d81e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d825:	e8 0e fd ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d82a:	83 c4 10             	add    esp,0x10
c000d82d:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d831:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d838:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d83d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d83f:	85 db                	test   ebx,ebx
c000d841:	74 49                	je     c000d88c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d843:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d848:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d84d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d851:	c1 e0 08             	shl    eax,0x8
c000d854:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d85a:	09 c8                	or     eax,ecx
c000d85c:	74 11                	je     c000d86f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d85e:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d862:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d866:	c1 e8 10             	shr    eax,0x10
c000d869:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d86d:	eb 0f                	jmp    c000d87e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d86f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d874:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d879:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d87e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d882:	c1 ea 08             	shr    edx,0x8
c000d885:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d88a:	eb 0f                	jmp    c000d89b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d88c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d891:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d896:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d89b:	52                   	push   edx
c000d89c:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d8a0:	50                   	push   eax
c000d8a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8a5:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8ac:	e8 ab fd ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8b1:	83 c4 10             	add    esp,0x10
c000d8b4:	85 db                	test   ebx,ebx
c000d8b6:	74 12                	je     c000d8ca <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d8b8:	50                   	push   eax
c000d8b9:	55                   	push   ebp
c000d8ba:	53                   	push   ebx
c000d8bb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8c2:	e8 95 fd ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8c7:	83 c4 10             	add    esp,0x10
c000d8ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d8ce:	83 c4 7c             	add    esp,0x7c
c000d8d1:	5b                   	pop    ebx
c000d8d2:	5e                   	pop    esi
c000d8d3:	5f                   	pop    edi
c000d8d4:	5d                   	pop    ebp
c000d8d5:	c3                   	ret    

c000d8d6 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d8d6:	55                   	push   ebp
c000d8d7:	57                   	push   edi
c000d8d8:	56                   	push   esi
c000d8d9:	53                   	push   ebx
c000d8da:	bb 27 00 00 00       	mov    ebx,0x27
c000d8df:	81 ec 88 00 00 00    	sub    esp,0x88
c000d8e5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d8ec:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d8f3:	e8 78 2c ff ff       	call   c0000570 <strlen>
c000d8f8:	8d 48 26             	lea    ecx,[eax+0x26]
c000d8fb:	89 c8                	mov    eax,ecx
c000d8fd:	99                   	cdq    
c000d8fe:	f7 fb                	idiv   ebx
c000d900:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d904:	83 c4 10             	add    esp,0x10
c000d907:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d90d:	7e 10                	jle    c000d91f <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d90f:	83 ec 0c             	sub    esp,0xc
c000d912:	68 4b 3e 02 c0       	push   0xc0023e4b
c000d917:	e8 d8 23 00 00       	call   c000fcf4 <KePanic(char const*)>
c000d91c:	83 c4 10             	add    esp,0x10
c000d91f:	31 ff                	xor    edi,edi
c000d921:	50                   	push   eax
c000d922:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d926:	53                   	push   ebx
c000d927:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d92e:	56                   	push   esi
c000d92f:	e8 04 fc ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d934:	83 c4 10             	add    esp,0x10
c000d937:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d93b:	89 d0                	mov    eax,edx
c000d93d:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d941:	c1 e0 08             	shl    eax,0x8
c000d944:	09 c2                	or     edx,eax
c000d946:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d94a:	c1 e2 08             	shl    edx,0x8
c000d94d:	09 c2                	or     edx,eax
c000d94f:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d953:	7e 76                	jle    c000d9cb <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d955:	85 d2                	test   edx,edx
c000d957:	75 25                	jne    c000d97e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d959:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d95e:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d962:	50                   	push   eax
c000d963:	6a 00                	push   0x0
c000d965:	6a 00                	push   0x0
c000d967:	56                   	push   esi
c000d968:	e8 75 fe ff ff       	call   c000d7e2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d96d:	83 c4 10             	add    esp,0x10
c000d970:	89 c2                	mov    edx,eax
c000d972:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d975:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d978:	c1 f8 10             	sar    eax,0x10
c000d97b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d97e:	55                   	push   ebp
c000d97f:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d983:	55                   	push   ebp
c000d984:	52                   	push   edx
c000d985:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d989:	56                   	push   esi
c000d98a:	e8 a9 fb ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d98f:	83 c4 0c             	add    esp,0xc
c000d992:	6a 27                	push   0x27
c000d994:	6a 00                	push   0x0
c000d996:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d99a:	51                   	push   ecx
c000d99b:	e8 50 2b ff ff       	call   c00004f0 <memset>
c000d9a0:	83 c4 0c             	add    esp,0xc
c000d9a3:	6b c7 27             	imul   eax,edi,0x27
c000d9a6:	6a 27                	push   0x27
c000d9a8:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d9af:	50                   	push   eax
c000d9b0:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d9b4:	51                   	push   ecx
c000d9b5:	e8 c6 2c ff ff       	call   c0000680 <strncpy>
c000d9ba:	83 c4 0c             	add    esp,0xc
c000d9bd:	55                   	push   ebp
c000d9be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d9c2:	52                   	push   edx
c000d9c3:	56                   	push   esi
c000d9c4:	e8 93 fc ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d9c9:	eb 19                	jmp    c000d9e4 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000d9cb:	85 d2                	test   edx,edx
c000d9cd:	74 18                	je     c000d9e7 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000d9cf:	51                   	push   ecx
c000d9d0:	51                   	push   ecx
c000d9d1:	52                   	push   edx
c000d9d2:	56                   	push   esi
c000d9d3:	e8 c0 fc ff ff       	call   c000d698 <CmFreeExtent(Reghive_Tag*, int)>
c000d9d8:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d9dc:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d9e0:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d9e4:	83 c4 10             	add    esp,0x10
c000d9e7:	47                   	inc    edi
c000d9e8:	83 c3 03             	add    ebx,0x3
c000d9eb:	83 ff 07             	cmp    edi,0x7
c000d9ee:	0f 85 43 ff ff ff    	jne    c000d937 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d9f4:	50                   	push   eax
c000d9f5:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d9f9:	50                   	push   eax
c000d9fa:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000da01:	56                   	push   esi
c000da02:	e8 55 fc ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da07:	81 c4 8c 00 00 00    	add    esp,0x8c
c000da0d:	5b                   	pop    ebx
c000da0e:	5e                   	pop    esi
c000da0f:	5f                   	pop    edi
c000da10:	5d                   	pop    ebp
c000da11:	c3                   	ret    

c000da12 <CmGetMatch(char*, char*, bool, bool*)>:
c000da12:	56                   	push   esi
c000da13:	53                   	push   ebx
c000da14:	50                   	push   eax
c000da15:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000da19:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000da1e:	74 25                	je     c000da45 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000da20:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da23:	31 db                	xor    ebx,ebx
c000da25:	50                   	push   eax
c000da26:	50                   	push   eax
c000da27:	8d 04 9d 60 62 02 c0 	lea    eax,[ebx*4-0x3ffd9da0]
c000da2e:	50                   	push   eax
c000da2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da33:	e8 18 2d ff ff       	call   c0000750 <strcmp>
c000da38:	83 c4 10             	add    esp,0x10
c000da3b:	85 c0                	test   eax,eax
c000da3d:	74 2e                	je     c000da6d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da3f:	43                   	inc    ebx
c000da40:	83 fb 3f             	cmp    ebx,0x3f
c000da43:	75 e0                	jne    c000da25 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000da45:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da48:	31 db                	xor    ebx,ebx
c000da4a:	8d 04 9d 60 62 02 c0 	lea    eax,[ebx*4-0x3ffd9da0]
c000da51:	51                   	push   ecx
c000da52:	51                   	push   ecx
c000da53:	50                   	push   eax
c000da54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da58:	e8 f3 2c ff ff       	call   c0000750 <strcmp>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	85 c0                	test   eax,eax
c000da62:	74 09                	je     c000da6d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da64:	43                   	inc    ebx
c000da65:	83 fb 3f             	cmp    ebx,0x3f
c000da68:	75 e0                	jne    c000da4a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000da6a:	83 cb ff             	or     ebx,0xffffffff
c000da6d:	89 d8                	mov    eax,ebx
c000da6f:	5a                   	pop    edx
c000da70:	5b                   	pop    ebx
c000da71:	5e                   	pop    esi
c000da72:	c3                   	ret    

c000da73 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000da73:	55                   	push   ebp
c000da74:	31 c0                	xor    eax,eax
c000da76:	57                   	push   edi
c000da77:	56                   	push   esi
c000da78:	53                   	push   ebx
c000da79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da7d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da81:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000da83:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000da87:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000da8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da8e:	83 fd 1f             	cmp    ebp,0x1f
c000da91:	7f 0b                	jg     c000da9e <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000da93:	0f b6 c2             	movzx  eax,dl
c000da96:	d3 e0                	shl    eax,cl
c000da98:	09 07                	or     DWORD PTR [edi],eax
c000da9a:	b0 01                	mov    al,0x1
c000da9c:	01 33                	add    DWORD PTR [ebx],esi
c000da9e:	5b                   	pop    ebx
c000da9f:	5e                   	pop    esi
c000daa0:	5f                   	pop    edi
c000daa1:	5d                   	pop    ebp
c000daa2:	c3                   	ret    

c000daa3 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000daa3:	57                   	push   edi
c000daa4:	56                   	push   esi
c000daa5:	53                   	push   ebx
c000daa6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000daaa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000daae:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000dab2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000dab6:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000dab8:	7c 17                	jl     c000dad1 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000daba:	8b 17                	mov    edx,DWORD PTR [edi]
c000dabc:	b8 01 00 00 00       	mov    eax,0x1
c000dac1:	d3 e0                	shl    eax,cl
c000dac3:	48                   	dec    eax
c000dac4:	21 d0                	and    eax,edx
c000dac6:	d3 ea                	shr    edx,cl
c000dac8:	89 17                	mov    DWORD PTR [edi],edx
c000daca:	29 0b                	sub    DWORD PTR [ebx],ecx
c000dacc:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000dacf:	eb 05                	jmp    c000dad6 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000dad1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000dad4:	31 c0                	xor    eax,eax
c000dad6:	5b                   	pop    ebx
c000dad7:	5e                   	pop    esi
c000dad8:	5f                   	pop    edi
c000dad9:	c3                   	ret    

c000dada <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000dada:	83 ec 40             	sub    esp,0x40
c000dadd:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dae1:	50                   	push   eax
c000dae2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dae6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000daea:	e8 49 fa ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000daef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000daf3:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000daf7:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000dafb:	89 10                	mov    DWORD PTR [eax],edx
c000dafd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000db00:	83 c4 4c             	add    esp,0x4c
c000db03:	c3                   	ret    

c000db04 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000db04:	55                   	push   ebp
c000db05:	57                   	push   edi
c000db06:	56                   	push   esi
c000db07:	53                   	push   ebx
c000db08:	83 ec 40             	sub    esp,0x40
c000db0b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000db0f:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000db13:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000db17:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000db1b:	53                   	push   ebx
c000db1c:	56                   	push   esi
c000db1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000db21:	e8 12 fa ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db26:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000db2a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000db2e:	83 c4 0c             	add    esp,0xc
c000db31:	53                   	push   ebx
c000db32:	56                   	push   esi
c000db33:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000db37:	e8 20 fb ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000db3c:	83 c4 4c             	add    esp,0x4c
c000db3f:	5b                   	pop    ebx
c000db40:	5e                   	pop    esi
c000db41:	5f                   	pop    edi
c000db42:	5d                   	pop    ebp
c000db43:	c3                   	ret    

c000db44 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000db44:	55                   	push   ebp
c000db45:	57                   	push   edi
c000db46:	56                   	push   esi
c000db47:	31 f6                	xor    esi,esi
c000db49:	53                   	push   ebx
c000db4a:	31 db                	xor    ebx,ebx
c000db4c:	83 ec 40             	sub    esp,0x40
c000db4f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000db57:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000db5f:	6a 12                	push   0x12
c000db61:	68 ee 00 00 00       	push   0xee
c000db66:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db6a:	e8 81 29 ff ff       	call   c00004f0 <memset>
c000db6f:	83 c4 10             	add    esp,0x10
c000db72:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000db76:	6a 08                	push   0x8
c000db78:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000db7c:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000db80:	50                   	push   eax
c000db81:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000db85:	55                   	push   ebp
c000db86:	57                   	push   edi
c000db87:	e8 e7 fe ff ff       	call   c000da73 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000db8c:	83 c4 10             	add    esp,0x10
c000db8f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db93:	50                   	push   eax
c000db94:	6a 06                	push   0x6
c000db96:	55                   	push   ebp
c000db97:	57                   	push   edi
c000db98:	e8 06 ff ff ff       	call   c000daa3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000db9d:	83 c4 10             	add    esp,0x10
c000dba0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dba5:	74 07                	je     c000dbae <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000dba7:	46                   	inc    esi
c000dba8:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000dbac:	eb e1                	jmp    c000db8f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000dbae:	43                   	inc    ebx
c000dbaf:	83 fb 12             	cmp    ebx,0x12
c000dbb2:	75 c2                	jne    c000db76 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000dbb4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dbb8:	31 db                	xor    ebx,ebx
c000dbba:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000dbbd:	50                   	push   eax
c000dbbe:	50                   	push   eax
c000dbbf:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000dbc4:	43                   	inc    ebx
c000dbc5:	8d 04 85 60 62 02 c0 	lea    eax,[eax*4-0x3ffd9da0]
c000dbcc:	50                   	push   eax
c000dbcd:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000dbd1:	e8 6a 2c ff ff       	call   c0000840 <strcat>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	83 fb 18             	cmp    ebx,0x18
c000dbdc:	75 df                	jne    c000dbbd <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000dbde:	83 c4 3c             	add    esp,0x3c
c000dbe1:	31 c0                	xor    eax,eax
c000dbe3:	5b                   	pop    ebx
c000dbe4:	5e                   	pop    esi
c000dbe5:	5f                   	pop    edi
c000dbe6:	5d                   	pop    ebp
c000dbe7:	c3                   	ret    

c000dbe8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000dbe8:	83 ec 40             	sub    esp,0x40
c000dbeb:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dbef:	50                   	push   eax
c000dbf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dbf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dbf8:	e8 3b f9 ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dbfd:	58                   	pop    eax
c000dbfe:	5a                   	pop    edx
c000dbff:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dc03:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dc07:	50                   	push   eax
c000dc08:	e8 37 ff ff ff       	call   c000db44 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dc0d:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dc12:	83 c4 4c             	add    esp,0x4c
c000dc15:	c3                   	ret    

c000dc16 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dc16:	55                   	push   ebp
c000dc17:	57                   	push   edi
c000dc18:	56                   	push   esi
c000dc19:	53                   	push   ebx
c000dc1a:	31 db                	xor    ebx,ebx
c000dc1c:	83 ec 70             	sub    esp,0x70
c000dc1f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dc26:	6a 30                	push   0x30
c000dc28:	6a 00                	push   0x0
c000dc2a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dc2e:	56                   	push   esi
c000dc2f:	e8 bc 28 ff ff       	call   c00004f0 <memset>
c000dc34:	83 c4 10             	add    esp,0x10
c000dc37:	83 ec 0c             	sub    esp,0xc
c000dc3a:	57                   	push   edi
c000dc3b:	e8 30 29 ff ff       	call   c0000570 <strlen>
c000dc40:	83 c4 10             	add    esp,0x10
c000dc43:	39 d8                	cmp    eax,ebx
c000dc45:	76 16                	jbe    c000dc5d <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dc47:	83 ec 0c             	sub    esp,0xc
c000dc4a:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dc4e:	50                   	push   eax
c000dc4f:	e8 dc 2c ff ff       	call   c0000930 <toupper>
c000dc54:	83 c4 10             	add    esp,0x10
c000dc57:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000dc5a:	43                   	inc    ebx
c000dc5b:	eb da                	jmp    c000dc37 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000dc5d:	31 f6                	xor    esi,esi
c000dc5f:	52                   	push   edx
c000dc60:	31 ff                	xor    edi,edi
c000dc62:	6a 18                	push   0x18
c000dc64:	6a 3f                	push   0x3f
c000dc66:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dc6a:	50                   	push   eax
c000dc6b:	e8 80 28 ff ff       	call   c00004f0 <memset>
c000dc70:	83 c4 10             	add    esp,0x10
c000dc73:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000dc77:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000dc7b:	84 c0                	test   al,al
c000dc7d:	0f 84 b0 00 00 00    	je     c000dd33 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dc83:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dc87:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000dc8c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000dc90:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000dc95:	8d 6e 01             	lea    ebp,[esi+0x1]
c000dc98:	83 ec 0c             	sub    esp,0xc
c000dc9b:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dc9f:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dca3:	53                   	push   ebx
c000dca4:	e8 c7 28 ff ff       	call   c0000570 <strlen>
c000dca9:	83 c4 10             	add    esp,0x10
c000dcac:	85 c0                	test   eax,eax
c000dcae:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dcb2:	74 0b                	je     c000dcbf <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dcb4:	50                   	push   eax
c000dcb5:	6a 01                	push   0x1
c000dcb7:	53                   	push   ebx
c000dcb8:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dcbc:	50                   	push   eax
c000dcbd:	eb 0a                	jmp    c000dcc9 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dcbf:	50                   	push   eax
c000dcc0:	6a 00                	push   0x0
c000dcc2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dcc6:	50                   	push   eax
c000dcc7:	6a 00                	push   0x0
c000dcc9:	e8 44 fd ff ff       	call   c000da12 <CmGetMatch(char*, char*, bool, bool*)>
c000dcce:	83 c4 10             	add    esp,0x10
c000dcd1:	83 f8 ff             	cmp    eax,0xffffffff
c000dcd4:	75 1a                	jne    c000dcf0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dcd6:	83 ec 0c             	sub    esp,0xc
c000dcd9:	68 60 3e 02 c0       	push   0xc0023e60
c000dcde:	e8 11 20 00 00       	call   c000fcf4 <KePanic(char const*)>
c000dce3:	83 c4 10             	add    esp,0x10
c000dce6:	b8 02 00 00 00       	mov    eax,0x2
c000dceb:	e9 bc 00 00 00       	jmp    c000ddac <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dcf0:	83 ff 18             	cmp    edi,0x18
c000dcf3:	75 1a                	jne    c000dd0f <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dcf5:	83 ec 0c             	sub    esp,0xc
c000dcf8:	68 75 3e 02 c0       	push   0xc0023e75
c000dcfd:	e8 f2 1f 00 00       	call   c000fcf4 <KePanic(char const*)>
c000dd02:	83 c4 10             	add    esp,0x10
c000dd05:	b8 01 00 00 00       	mov    eax,0x1
c000dd0a:	e9 9d 00 00 00       	jmp    c000ddac <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd0f:	47                   	inc    edi
c000dd10:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dd15:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dd19:	74 02                	je     c000dd1d <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dd1b:	89 ee                	mov    esi,ebp
c000dd1d:	83 ec 0c             	sub    esp,0xc
c000dd20:	53                   	push   ebx
c000dd21:	e8 4a 28 ff ff       	call   c0000570 <strlen>
c000dd26:	83 c4 10             	add    esp,0x10
c000dd29:	85 c0                	test   eax,eax
c000dd2b:	74 06                	je     c000dd33 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dd2d:	46                   	inc    esi
c000dd2e:	e9 40 ff ff ff       	jmp    c000dc73 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dd33:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dd3b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dd43:	31 f6                	xor    esi,esi
c000dd45:	50                   	push   eax
c000dd46:	31 ff                	xor    edi,edi
c000dd48:	6a 12                	push   0x12
c000dd4a:	68 ee 00 00 00       	push   0xee
c000dd4f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dd56:	e8 95 27 ff ff       	call   c00004f0 <memset>
c000dd5b:	83 c4 10             	add    esp,0x10
c000dd5e:	83 fe 17             	cmp    esi,0x17
c000dd61:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dd65:	7e 26                	jle    c000dd8d <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dd67:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dd6b:	50                   	push   eax
c000dd6c:	6a 08                	push   0x8
c000dd6e:	55                   	push   ebp
c000dd6f:	53                   	push   ebx
c000dd70:	e8 2e fd ff ff       	call   c000daa3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dd75:	83 c4 10             	add    esp,0x10
c000dd78:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dd7d:	74 26                	je     c000dda5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000dd7f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dd86:	4e                   	dec    esi
c000dd87:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dd8a:	47                   	inc    edi
c000dd8b:	eb 1c                	jmp    c000dda9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dd8d:	6a 06                	push   0x6
c000dd8f:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000dd94:	50                   	push   eax
c000dd95:	55                   	push   ebp
c000dd96:	53                   	push   ebx
c000dd97:	e8 d7 fc ff ff       	call   c000da73 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dd9c:	83 c4 10             	add    esp,0x10
c000dd9f:	84 c0                	test   al,al
c000dda1:	75 06                	jne    c000dda9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dda3:	eb c2                	jmp    c000dd67 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dda5:	31 c0                	xor    eax,eax
c000dda7:	eb 03                	jmp    c000ddac <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dda9:	46                   	inc    esi
c000ddaa:	eb b2                	jmp    c000dd5e <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000ddac:	83 c4 6c             	add    esp,0x6c
c000ddaf:	5b                   	pop    ebx
c000ddb0:	5e                   	pop    esi
c000ddb1:	5f                   	pop    edi
c000ddb2:	5d                   	pop    ebp
c000ddb3:	c3                   	ret    

c000ddb4 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000ddb4:	53                   	push   ebx
c000ddb5:	83 ec 3c             	sub    esp,0x3c
c000ddb8:	6a 2b                	push   0x2b
c000ddba:	6a 00                	push   0x0
c000ddbc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ddc0:	53                   	push   ebx
c000ddc1:	e8 2a 27 ff ff       	call   c00004f0 <memset>
c000ddc6:	58                   	pop    eax
c000ddc7:	5a                   	pop    edx
c000ddc8:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ddcc:	50                   	push   eax
c000ddcd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ddd1:	e8 40 fe ff ff       	call   c000dc16 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ddd6:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dddb:	83 c4 0c             	add    esp,0xc
c000ddde:	6a 15                	push   0x15
c000dde0:	6a 00                	push   0x0
c000dde2:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dde6:	50                   	push   eax
c000dde7:	e8 04 27 ff ff       	call   c00004f0 <memset>
c000ddec:	53                   	push   ebx
c000dded:	6a 00                	push   0x0
c000ddef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddf3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddf7:	e8 e6 f9 ff ff       	call   c000d7e2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ddfc:	83 c4 58             	add    esp,0x58
c000ddff:	5b                   	pop    ebx
c000de00:	c3                   	ret    

c000de01 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000de01:	56                   	push   esi
c000de02:	53                   	push   ebx
c000de03:	83 ec 48             	sub    esp,0x48
c000de06:	6a 12                	push   0x12
c000de08:	68 ff 00 00 00       	push   0xff
c000de0d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000de11:	56                   	push   esi
c000de12:	e8 d9 26 ff ff       	call   c00004f0 <memset>
c000de17:	5a                   	pop    edx
c000de18:	59                   	pop    ecx
c000de19:	56                   	push   esi
c000de1a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000de1e:	e8 f3 fd ff ff       	call   c000dc16 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de23:	83 c4 10             	add    esp,0x10
c000de26:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de2a:	85 db                	test   ebx,ebx
c000de2c:	74 42                	je     c000de70 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000de2e:	50                   	push   eax
c000de2f:	8d 44 24 19          	lea    eax,[esp+0x19]
c000de33:	50                   	push   eax
c000de34:	53                   	push   ebx
c000de35:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de39:	e8 fa f6 ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de3e:	83 c4 0c             	add    esp,0xc
c000de41:	6a 12                	push   0x12
c000de43:	8d 44 24 21          	lea    eax,[esp+0x21]
c000de47:	50                   	push   eax
c000de48:	56                   	push   esi
c000de49:	e8 32 25 ff ff       	call   c0000380 <memcmp>
c000de4e:	83 c4 10             	add    esp,0x10
c000de51:	85 c0                	test   eax,eax
c000de53:	74 1e                	je     c000de73 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000de55:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000de5a:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000de5f:	c1 e3 08             	shl    ebx,0x8
c000de62:	09 d8                	or     eax,ebx
c000de64:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000de69:	c1 e3 10             	shl    ebx,0x10
c000de6c:	09 c3                	or     ebx,eax
c000de6e:	eb ba                	jmp    c000de2a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000de70:	83 cb ff             	or     ebx,0xffffffff
c000de73:	89 d8                	mov    eax,ebx
c000de75:	83 c4 44             	add    esp,0x44
c000de78:	5b                   	pop    ebx
c000de79:	5e                   	pop    esi
c000de7a:	c3                   	ret    

c000de7b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000de7b:	57                   	push   edi
c000de7c:	56                   	push   esi
c000de7d:	53                   	push   ebx
c000de7e:	83 ec 34             	sub    esp,0x34
c000de81:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000de85:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000de89:	6a 2b                	push   0x2b
c000de8b:	6a 00                	push   0x0
c000de8d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000de91:	53                   	push   ebx
c000de92:	e8 59 26 ff ff       	call   c00004f0 <memset>
c000de97:	58                   	pop    eax
c000de98:	5a                   	pop    edx
c000de99:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de9d:	50                   	push   eax
c000de9e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dea2:	e8 6f fd ff ff       	call   c000dc16 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dea7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000deab:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000deaf:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000deb3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000deb7:	53                   	push   ebx
c000deb8:	6a 00                	push   0x0
c000deba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000debe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dec2:	e8 1b f9 ff ff       	call   c000d7e2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dec7:	83 c4 50             	add    esp,0x50
c000deca:	5b                   	pop    ebx
c000decb:	5e                   	pop    esi
c000decc:	5f                   	pop    edi
c000decd:	c3                   	ret    

c000dece <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000dece:	55                   	push   ebp
c000decf:	57                   	push   edi
c000ded0:	56                   	push   esi
c000ded1:	53                   	push   ebx
c000ded2:	83 ec 40             	sub    esp,0x40
c000ded5:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000ded9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dedd:	6a 2b                	push   0x2b
c000dedf:	6a 00                	push   0x0
c000dee1:	8d 74 24 11          	lea    esi,[esp+0x11]
c000dee5:	56                   	push   esi
c000dee6:	e8 05 26 ff ff       	call   c00004f0 <memset>
c000deeb:	5f                   	pop    edi
c000deec:	89 ef                	mov    edi,ebp
c000deee:	58                   	pop    eax
c000deef:	8d 44 24 11          	lea    eax,[esp+0x11]
c000def3:	50                   	push   eax
c000def4:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000def8:	e8 19 fd ff ff       	call   c000dc16 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000defd:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000df02:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000df07:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000df0c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 ed                	test   ebp,ebp
c000df16:	74 14                	je     c000df2c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000df18:	51                   	push   ecx
c000df19:	51                   	push   ecx
c000df1a:	57                   	push   edi
c000df1b:	53                   	push   ebx
c000df1c:	e8 09 f7 ff ff       	call   c000d62a <CmGetNext(Reghive_Tag*, int)>
c000df21:	83 c4 10             	add    esp,0x10
c000df24:	85 c0                	test   eax,eax
c000df26:	74 04                	je     c000df2c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000df28:	89 c7                	mov    edi,eax
c000df2a:	eb e8                	jmp    c000df14 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000df2c:	56                   	push   esi
c000df2d:	6a 00                	push   0x0
c000df2f:	57                   	push   edi
c000df30:	53                   	push   ebx
c000df31:	e8 ac f8 ff ff       	call   c000d7e2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000df36:	83 c4 0c             	add    esp,0xc
c000df39:	89 c7                	mov    edi,eax
c000df3b:	56                   	push   esi
c000df3c:	50                   	push   eax
c000df3d:	53                   	push   ebx
c000df3e:	e8 f5 f5 ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000df43:	58                   	pop    eax
c000df44:	5a                   	pop    edx
c000df45:	6a 6c                	push   0x6c
c000df47:	6a 00                	push   0x0
c000df49:	6a 00                	push   0x0
c000df4b:	68 86 3e 02 c0       	push   0xc0023e86
c000df50:	57                   	push   edi
c000df51:	53                   	push   ebx
c000df52:	e8 24 ff ff ff       	call   c000de7b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000df57:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000df5b:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000df5f:	c1 e8 10             	shr    eax,0x10
c000df62:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000df66:	83 c4 1c             	add    esp,0x1c
c000df69:	56                   	push   esi
c000df6a:	57                   	push   edi
c000df6b:	53                   	push   ebx
c000df6c:	e8 eb f6 ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000df71:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000df76:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000df7b:	c1 e0 08             	shl    eax,0x8
c000df7e:	09 c2                	or     edx,eax
c000df80:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000df85:	83 c4 4c             	add    esp,0x4c
c000df88:	c1 e0 10             	shl    eax,0x10
c000df8b:	5b                   	pop    ebx
c000df8c:	09 d0                	or     eax,edx
c000df8e:	5e                   	pop    esi
c000df8f:	5f                   	pop    edi
c000df90:	5d                   	pop    ebp
c000df91:	c3                   	ret    

c000df92 <zStrtok(char*, char const*)>:
c000df92:	55                   	push   ebp
c000df93:	57                   	push   edi
c000df94:	56                   	push   esi
c000df95:	53                   	push   ebx
c000df96:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000df9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df9e:	85 db                	test   ebx,ebx
c000dfa0:	74 2f                	je     c000dfd1 <zStrtok(char*, char const*)+0x3f>
c000dfa2:	85 c0                	test   eax,eax
c000dfa4:	75 09                	jne    c000dfaf <zStrtok(char*, char const*)+0x1d>
c000dfa6:	a1 04 c1 02 c0       	mov    eax,ds:0xc002c104
c000dfab:	85 c0                	test   eax,eax
c000dfad:	74 50                	je     c000dfff <zStrtok(char*, char const*)+0x6d>
c000dfaf:	31 c9                	xor    ecx,ecx
c000dfb1:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000dfb5:	74 03                	je     c000dfba <zStrtok(char*, char const*)+0x28>
c000dfb7:	41                   	inc    ecx
c000dfb8:	eb f7                	jmp    c000dfb1 <zStrtok(char*, char const*)+0x1f>
c000dfba:	31 d2                	xor    edx,edx
c000dfbc:	39 ca                	cmp    edx,ecx
c000dfbe:	74 15                	je     c000dfd5 <zStrtok(char*, char const*)+0x43>
c000dfc0:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000dfc4:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000dfc7:	8d 3c 10             	lea    edi,[eax+edx*1]
c000dfca:	39 ee                	cmp    esi,ebp
c000dfcc:	74 13                	je     c000dfe1 <zStrtok(char*, char const*)+0x4f>
c000dfce:	42                   	inc    edx
c000dfcf:	eb eb                	jmp    c000dfbc <zStrtok(char*, char const*)+0x2a>
c000dfd1:	31 c0                	xor    eax,eax
c000dfd3:	eb 2a                	jmp    c000dfff <zStrtok(char*, char const*)+0x6d>
c000dfd5:	c7 05 04 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c104,0x0
c000dfdf:	eb 1e                	jmp    c000dfff <zStrtok(char*, char const*)+0x6d>
c000dfe1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000dfe4:	39 ce                	cmp    esi,ecx
c000dfe6:	75 0a                	jne    c000dff2 <zStrtok(char*, char const*)+0x60>
c000dfe8:	40                   	inc    eax
c000dfe9:	a3 04 c1 02 c0       	mov    ds:0xc002c104,eax
c000dfee:	89 d8                	mov    eax,ebx
c000dff0:	eb 0d                	jmp    c000dfff <zStrtok(char*, char const*)+0x6d>
c000dff2:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000dff6:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000dff9:	89 15 04 c1 02 c0    	mov    DWORD PTR ds:0xc002c104,edx
c000dfff:	5b                   	pop    ebx
c000e000:	5e                   	pop    esi
c000e001:	5f                   	pop    edi
c000e002:	5d                   	pop    ebp
c000e003:	c3                   	ret    

c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000e004:	57                   	push   edi
c000e005:	56                   	push   esi
c000e006:	53                   	push   ebx
c000e007:	81 ec 08 01 00 00    	sub    esp,0x108
c000e00d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000e014:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000e01b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e01f:	53                   	push   ebx
c000e020:	e8 1b 26 ff ff       	call   c0000640 <strcpy>
c000e025:	59                   	pop    ecx
c000e026:	5e                   	pop    esi
c000e027:	68 c5 4d 02 c0       	push   0xc0024dc5
c000e02c:	53                   	push   ebx
c000e02d:	bb 01 00 00 00       	mov    ebx,0x1
c000e032:	e8 5b ff ff ff       	call   c000df92 <zStrtok(char*, char const*)>
c000e037:	83 c4 10             	add    esp,0x10
c000e03a:	85 c0                	test   eax,eax
c000e03c:	74 3b                	je     c000e079 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e03e:	52                   	push   edx
c000e03f:	50                   	push   eax
c000e040:	6a 01                	push   0x1
c000e042:	57                   	push   edi
c000e043:	e8 b9 fd ff ff       	call   c000de01 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000e048:	59                   	pop    ecx
c000e049:	89 c3                	mov    ebx,eax
c000e04b:	5e                   	pop    esi
c000e04c:	68 c5 4d 02 c0       	push   0xc0024dc5
c000e051:	6a 00                	push   0x0
c000e053:	e8 3a ff ff ff       	call   c000df92 <zStrtok(char*, char const*)>
c000e058:	83 c4 10             	add    esp,0x10
c000e05b:	89 c6                	mov    esi,eax
c000e05d:	85 c0                	test   eax,eax
c000e05f:	74 18                	je     c000e079 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e061:	52                   	push   edx
c000e062:	52                   	push   edx
c000e063:	53                   	push   ebx
c000e064:	57                   	push   edi
c000e065:	e8 81 f5 ff ff       	call   c000d5eb <CmEnterDirectory(Reghive_Tag*, int)>
c000e06a:	83 c4 10             	add    esp,0x10
c000e06d:	89 c3                	mov    ebx,eax
c000e06f:	83 f8 ff             	cmp    eax,0xffffffff
c000e072:	74 05                	je     c000e079 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e074:	50                   	push   eax
c000e075:	56                   	push   esi
c000e076:	53                   	push   ebx
c000e077:	eb c9                	jmp    c000e042 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e079:	81 c4 00 01 00 00    	add    esp,0x100
c000e07f:	89 d8                	mov    eax,ebx
c000e081:	5b                   	pop    ebx
c000e082:	5e                   	pop    esi
c000e083:	5f                   	pop    edi
c000e084:	c3                   	ret    
c000e085:	90                   	nop

c000e086 <Computer::close(int, int, void*)>:
c000e086:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e08b:	c3                   	ret    

c000e08c <Computer::Computer()>:
c000e08c:	83 ec 0c             	sub    esp,0xc
c000e08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e093:	83 ec 08             	sub    esp,0x8
c000e096:	68 8c 3e 02 c0       	push   0xc0023e8c
c000e09b:	50                   	push   eax
c000e09c:	e8 15 bb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000e0a1:	83 c4 10             	add    esp,0x10
c000e0a4:	ba e4 3e 02 c0       	mov    edx,0xc0023ee4
c000e0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ad:	89 10                	mov    DWORD PTR [eax],edx
c000e0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0b3:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c1:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e0cb:	90                   	nop
c000e0cc:	83 c4 0c             	add    esp,0xc
c000e0cf:	c3                   	ret    

c000e0d0 <Computer::open(int, int, void*)>:
c000e0d0:	56                   	push   esi
c000e0d1:	53                   	push   ebx
c000e0d2:	83 ec 04             	sub    esp,0x4
c000e0d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0d9:	39 1d 08 c1 02 c0    	cmp    DWORD PTR ds:0xc002c108,ebx
c000e0df:	74 10                	je     c000e0f1 <Computer::open(int, int, void*)+0x21>
c000e0e1:	83 ec 0c             	sub    esp,0xc
c000e0e4:	68 b0 3e 02 c0       	push   0xc0023eb0
c000e0e9:	e8 06 1c 00 00       	call   c000fcf4 <KePanic(char const*)>
c000e0ee:	83 c4 10             	add    esp,0x10
c000e0f1:	83 ec 0c             	sub    esp,0xc
c000e0f4:	68 78 11 00 00       	push   0x1178
c000e0f9:	e8 99 17 00 00       	call   c000f897 <malloc>
c000e0fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000e101:	89 c6                	mov    esi,eax
c000e103:	e8 ee c5 00 00       	call   c001a6f6 <CPU::CPU()>
c000e108:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e10c:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e112:	50                   	push   eax
c000e113:	6a 00                	push   0x0
c000e115:	6a 00                	push   0x0
c000e117:	56                   	push   esi
c000e118:	e8 bb c7 00 00       	call   c001a8d8 <CPU::open(int, int, void*)>
c000e11d:	83 c4 14             	add    esp,0x14
c000e120:	68 95 3e 02 c0       	push   0xc0023e95
c000e125:	e8 db f1 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000e12a:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e131:	e8 61 17 00 00       	call   c000f897 <malloc>
c000e136:	89 04 24             	mov    DWORD PTR [esp],eax
c000e139:	89 c6                	mov    esi,eax
c000e13b:	e8 30 e7 ff ff       	call   c000c870 <ACPI::ACPI()>
c000e140:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e146:	5a                   	pop    edx
c000e147:	59                   	pop    ecx
c000e148:	56                   	push   esi
c000e149:	53                   	push   ebx
c000e14a:	e8 05 b9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e14f:	5e                   	pop    esi
c000e150:	58                   	pop    eax
c000e151:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e157:	50                   	push   eax
c000e158:	53                   	push   ebx
c000e159:	e8 f6 b8 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e15e:	83 c4 14             	add    esp,0x14
c000e161:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e166:	5b                   	pop    ebx
c000e167:	5e                   	pop    esi
c000e168:	c3                   	ret    

c000e169 <KeCalculateCRC32(unsigned char*, int)>:
c000e169:	53                   	push   ebx
c000e16a:	83 c8 ff             	or     eax,0xffffffff
c000e16d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e171:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e175:	01 cb                	add    ebx,ecx
c000e177:	39 d9                	cmp    ecx,ebx
c000e179:	74 15                	je     c000e190 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e17b:	41                   	inc    ecx
c000e17c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e17f:	31 c2                	xor    edx,eax
c000e181:	c1 e8 08             	shr    eax,0x8
c000e184:	0f b6 d2             	movzx  edx,dl
c000e187:	33 04 95 60 63 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9ca0]
c000e18e:	eb e7                	jmp    c000e177 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e190:	f7 d0                	not    eax
c000e192:	5b                   	pop    ebx
c000e193:	c3                   	ret    

c000e194 <EnvVarContainer::getEnv(char const*)>:
c000e194:	57                   	push   edi
c000e195:	56                   	push   esi
c000e196:	53                   	push   ebx
c000e197:	31 db                	xor    ebx,ebx
c000e199:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e19d:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e19f:	7e 2b                	jle    c000e1cc <EnvVarContainer::getEnv(char const*)+0x38>
c000e1a1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e1a8:	50                   	push   eax
c000e1a9:	50                   	push   eax
c000e1aa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e1ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e1b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e1b4:	e8 97 25 ff ff       	call   c0000750 <strcmp>
c000e1b9:	83 c4 10             	add    esp,0x10
c000e1bc:	85 c0                	test   eax,eax
c000e1be:	75 09                	jne    c000e1c9 <EnvVarContainer::getEnv(char const*)+0x35>
c000e1c0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e1c3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e1c7:	eb 05                	jmp    c000e1ce <EnvVarContainer::getEnv(char const*)+0x3a>
c000e1c9:	43                   	inc    ebx
c000e1ca:	eb d1                	jmp    c000e19d <EnvVarContainer::getEnv(char const*)+0x9>
c000e1cc:	31 c0                	xor    eax,eax
c000e1ce:	5b                   	pop    ebx
c000e1cf:	5e                   	pop    esi
c000e1d0:	5f                   	pop    edi
c000e1d1:	c3                   	ret    

c000e1d2 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e1d2:	55                   	push   ebp
c000e1d3:	57                   	push   edi
c000e1d4:	56                   	push   esi
c000e1d5:	53                   	push   ebx
c000e1d6:	83 ec 28             	sub    esp,0x28
c000e1d9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e1dd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e1e1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e1e5:	56                   	push   esi
c000e1e6:	e8 85 23 ff ff       	call   c0000570 <strlen>
c000e1eb:	40                   	inc    eax
c000e1ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1ef:	e8 a3 16 00 00       	call   c000f897 <malloc>
c000e1f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fb:	e8 70 23 ff ff       	call   c0000570 <strlen>
c000e200:	40                   	inc    eax
c000e201:	89 04 24             	mov    DWORD PTR [esp],eax
c000e204:	e8 8e 16 00 00       	call   c000f897 <malloc>
c000e209:	89 34 24             	mov    DWORD PTR [esp],esi
c000e20c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e210:	e8 5b 23 ff ff       	call   c0000570 <strlen>
c000e215:	83 c4 0c             	add    esp,0xc
c000e218:	40                   	inc    eax
c000e219:	50                   	push   eax
c000e21a:	6a 00                	push   0x0
c000e21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e220:	e8 cb 22 ff ff       	call   c00004f0 <memset>
c000e225:	89 34 24             	mov    DWORD PTR [esp],esi
c000e228:	e8 43 23 ff ff       	call   c0000570 <strlen>
c000e22d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e231:	8d 48 01             	lea    ecx,[eax+0x1]
c000e234:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e236:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e239:	89 de                	mov    esi,ebx
c000e23b:	e8 30 23 ff ff       	call   c0000570 <strlen>
c000e240:	83 c4 0c             	add    esp,0xc
c000e243:	40                   	inc    eax
c000e244:	50                   	push   eax
c000e245:	6a 00                	push   0x0
c000e247:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e24b:	e8 a0 22 ff ff       	call   c00004f0 <memset>
c000e250:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e253:	e8 18 23 ff ff       	call   c0000570 <strlen>
c000e258:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e25c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e25f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e261:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e264:	40                   	inc    eax
c000e265:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e268:	c1 e0 03             	shl    eax,0x3
c000e26b:	5a                   	pop    edx
c000e26c:	59                   	pop    ecx
c000e26d:	50                   	push   eax
c000e26e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e271:	e8 0d 16 00 00       	call   c000f883 <realloc>
c000e276:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e27a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e27d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e280:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e284:	b9 08 00 00 00       	mov    ecx,0x8
c000e289:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e28b:	83 c4 2c             	add    esp,0x2c
c000e28e:	5b                   	pop    ebx
c000e28f:	5e                   	pop    esi
c000e290:	5f                   	pop    edi
c000e291:	5d                   	pop    ebp
c000e292:	c3                   	ret    
c000e293:	90                   	nop

c000e294 <EnvVarContainer::deleteEnv(char const*)>:
c000e294:	c3                   	ret    
c000e295:	90                   	nop

c000e296 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e296:	55                   	push   ebp
c000e297:	57                   	push   edi
c000e298:	56                   	push   esi
c000e299:	53                   	push   ebx
c000e29a:	81 ec 38 01 00 00    	sub    esp,0x138
c000e2a0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e2a7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e2ae:	68 14 01 00 00       	push   0x114
c000e2b3:	e8 df 15 00 00       	call   c000f897 <malloc>
c000e2b8:	83 c4 0c             	add    esp,0xc
c000e2bb:	89 c3                	mov    ebx,eax
c000e2bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e2c0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e2c7:	50                   	push   eax
c000e2c8:	e8 bd 9e ff ff       	call   c000818a <File::File(char const*, Process*)>
c000e2cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e2d0:	e8 97 a1 ff ff       	call   c000846c <File::exists()>
c000e2d5:	83 c4 10             	add    esp,0x10
c000e2d8:	84 c0                	test   al,al
c000e2da:	75 31                	jne    c000e30d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e2dc:	50                   	push   eax
c000e2dd:	50                   	push   eax
c000e2de:	6a 12                	push   0x12
c000e2e0:	53                   	push   ebx
c000e2e1:	e8 c2 9e ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e2e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2e8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e2eb:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2ee:	e8 7d 22 ff ff       	call   c0000570 <strlen>
c000e2f3:	5a                   	pop    edx
c000e2f4:	31 d2                	xor    edx,edx
c000e2f6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e2fa:	51                   	push   ecx
c000e2fb:	56                   	push   esi
c000e2fc:	52                   	push   edx
c000e2fd:	50                   	push   eax
c000e2fe:	53                   	push   ebx
c000e2ff:	ff d7                	call   edi
c000e301:	83 c4 14             	add    esp,0x14
c000e304:	53                   	push   ebx
c000e305:	e8 fc 9e ff ff       	call   c0008206 <File::close()>
c000e30a:	83 c4 10             	add    esp,0x10
c000e30d:	56                   	push   esi
c000e30e:	31 f6                	xor    esi,esi
c000e310:	68 00 01 00 00       	push   0x100
c000e315:	6a 00                	push   0x0
c000e317:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e31b:	50                   	push   eax
c000e31c:	e8 cf 21 ff ff       	call   c00004f0 <memset>
c000e321:	5f                   	pop    edi
c000e322:	58                   	pop    eax
c000e323:	6a 01                	push   0x1
c000e325:	53                   	push   ebx
c000e326:	e8 7d 9e ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e32b:	83 c4 10             	add    esp,0x10
c000e32e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e336:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e33e:	83 ec 0c             	sub    esp,0xc
c000e341:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e343:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e347:	51                   	push   ecx
c000e348:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e34c:	52                   	push   edx
c000e34d:	6a 00                	push   0x0
c000e34f:	6a 01                	push   0x1
c000e351:	53                   	push   ebx
c000e352:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e355:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e35a:	83 c4 20             	add    esp,0x20
c000e35d:	89 c2                	mov    edx,eax
c000e35f:	85 c0                	test   eax,eax
c000e361:	0f 84 36 01 00 00    	je     c000e49d <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e367:	83 f8 0d             	cmp    eax,0xd
c000e36a:	0f 84 22 01 00 00    	je     c000e492 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e375:	0f 84 f0 00 00 00    	je     c000e46b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e37b:	83 f8 0a             	cmp    eax,0xa
c000e37e:	74 13                	je     c000e393 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e380:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e385:	74 0c                	je     c000e393 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e387:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e38d:	0f 8e f6 00 00 00    	jle    c000e489 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e397:	83 ec 0c             	sub    esp,0xc
c000e39a:	8d 78 01             	lea    edi,[eax+0x1]
c000e39d:	57                   	push   edi
c000e39e:	e8 f4 14 00 00       	call   c000f897 <malloc>
c000e3a3:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e3a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e3ab:	8d 56 04             	lea    edx,[esi+0x4]
c000e3ae:	89 14 24             	mov    DWORD PTR [esp],edx
c000e3b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3b5:	e8 dd 14 00 00       	call   c000f897 <malloc>
c000e3ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e3be:	83 c4 0c             	add    esp,0xc
c000e3c1:	57                   	push   edi
c000e3c2:	6a 00                	push   0x0
c000e3c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e3c8:	e8 23 21 ff ff       	call   c00004f0 <memset>
c000e3cd:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e3d1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e3d5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e3d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3db:	83 c4 0c             	add    esp,0xc
c000e3de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3e2:	52                   	push   edx
c000e3e3:	6a 00                	push   0x0
c000e3e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e3e9:	e8 02 21 ff ff       	call   c00004f0 <memset>
c000e3ee:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e3f2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e3f6:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3f9:	e8 72 21 ff ff       	call   c0000570 <strlen>
c000e3fe:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e402:	89 c1                	mov    ecx,eax
c000e404:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e406:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e409:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e40c:	40                   	inc    eax
c000e40d:	83 c4 10             	add    esp,0x10
c000e410:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e413:	85 d2                	test   edx,edx
c000e415:	75 0c                	jne    c000e423 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e417:	83 ec 0c             	sub    esp,0xc
c000e41a:	6a 08                	push   0x8
c000e41c:	e8 76 14 00 00       	call   c000f897 <malloc>
c000e421:	eb 0c                	jmp    c000e42f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e423:	c1 e0 03             	shl    eax,0x3
c000e426:	51                   	push   ecx
c000e427:	51                   	push   ecx
c000e428:	50                   	push   eax
c000e429:	52                   	push   edx
c000e42a:	e8 54 14 00 00       	call   c000f883 <realloc>
c000e42f:	83 c4 10             	add    esp,0x10
c000e432:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e435:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e438:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e43b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e43f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e443:	b9 08 00 00 00       	mov    ecx,0x8
c000e448:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e44a:	31 f6                	xor    esi,esi
c000e44c:	50                   	push   eax
c000e44d:	68 00 01 00 00       	push   0x100
c000e452:	6a 00                	push   0x0
c000e454:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e458:	50                   	push   eax
c000e459:	e8 92 20 ff ff       	call   c00004f0 <memset>
c000e45e:	83 c4 10             	add    esp,0x10
c000e461:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e469:	eb 27                	jmp    c000e492 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e46b:	83 f8 3d             	cmp    eax,0x3d
c000e46e:	74 1e                	je     c000e48e <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e470:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e476:	7f 07                	jg     c000e47f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e478:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e47c:	46                   	inc    esi
c000e47d:	eb 13                	jmp    c000e492 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e47f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e487:	eb 09                	jmp    c000e492 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e489:	83 f8 3d             	cmp    eax,0x3d
c000e48c:	75 ea                	jne    c000e478 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e48e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e492:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e497:	0f 85 99 fe ff ff    	jne    c000e336 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e49d:	83 ec 0c             	sub    esp,0xc
c000e4a0:	53                   	push   ebx
c000e4a1:	e8 60 9d ff ff       	call   c0008206 <File::close()>
c000e4a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e4a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e4ae:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e4b4:	5b                   	pop    ebx
c000e4b5:	5e                   	pop    esi
c000e4b6:	5f                   	pop    edi
c000e4b7:	5d                   	pop    ebp
c000e4b8:	c3                   	ret    
c000e4b9:	90                   	nop

c000e4ba <EnvVarContainer::__loadSystem()>:
c000e4ba:	83 ec 10             	sub    esp,0x10
c000e4bd:	68 60 67 02 c0       	push   0xc0026760
c000e4c2:	68 08 3f 02 c0       	push   0xc0023f08
c000e4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cb:	e8 c6 fd ff ff       	call   c000e296 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e4d0:	83 c4 1c             	add    esp,0x1c
c000e4d3:	c3                   	ret    

c000e4d4 <EnvVarContainer::__loadUser()>:
c000e4d4:	c3                   	ret    
c000e4d5:	90                   	nop

c000e4d6 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e4e8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e4eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4f6:	90                   	nop
c000e4f7:	c3                   	ret    

c000e4f8 <EnvVarContainer::~EnvVarContainer()>:
c000e4f8:	83 ec 0c             	sub    esp,0xc
c000e4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e502:	85 c0                	test   eax,eax
c000e504:	74 1d                	je     c000e523 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e50a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e50c:	85 c0                	test   eax,eax
c000e50e:	74 13                	je     c000e523 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e514:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e517:	83 ec 0c             	sub    esp,0xc
c000e51a:	50                   	push   eax
c000e51b:	e8 87 13 00 00       	call   c000f8a7 <free>
c000e520:	83 c4 10             	add    esp,0x10
c000e523:	90                   	nop
c000e524:	83 c4 0c             	add    esp,0xc
c000e527:	c3                   	ret    

c000e528 <KeGetEnv(Process*, char const*)>:
c000e528:	53                   	push   ebx
c000e529:	83 ec 08             	sub    esp,0x8
c000e52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e530:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e534:	39 05 98 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca98,eax
c000e53a:	74 04                	je     c000e540 <KeGetEnv(Process*, char const*)+0x18>
c000e53c:	85 c0                	test   eax,eax
c000e53e:	75 0b                	jne    c000e54b <KeGetEnv(Process*, char const*)+0x23>
c000e540:	a1 10 c1 02 c0       	mov    eax,ds:0xc002c110
c000e545:	85 c0                	test   eax,eax
c000e547:	75 19                	jne    c000e562 <KeGetEnv(Process*, char const*)+0x3a>
c000e549:	eb 27                	jmp    c000e572 <KeGetEnv(Process*, char const*)+0x4a>
c000e54b:	52                   	push   edx
c000e54c:	52                   	push   edx
c000e54d:	53                   	push   ebx
c000e54e:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e554:	e8 3b fc ff ff       	call   c000e194 <EnvVarContainer::getEnv(char const*)>
c000e559:	83 c4 10             	add    esp,0x10
c000e55c:	85 c0                	test   eax,eax
c000e55e:	75 28                	jne    c000e588 <KeGetEnv(Process*, char const*)+0x60>
c000e560:	eb de                	jmp    c000e540 <KeGetEnv(Process*, char const*)+0x18>
c000e562:	52                   	push   edx
c000e563:	52                   	push   edx
c000e564:	53                   	push   ebx
c000e565:	50                   	push   eax
c000e566:	e8 29 fc ff ff       	call   c000e194 <EnvVarContainer::getEnv(char const*)>
c000e56b:	83 c4 10             	add    esp,0x10
c000e56e:	85 c0                	test   eax,eax
c000e570:	75 16                	jne    c000e588 <KeGetEnv(Process*, char const*)+0x60>
c000e572:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e576:	a1 14 c1 02 c0       	mov    eax,ds:0xc002c114
c000e57b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e57f:	83 c4 08             	add    esp,0x8
c000e582:	5b                   	pop    ebx
c000e583:	e9 0c fc ff ff       	jmp    c000e194 <EnvVarContainer::getEnv(char const*)>
c000e588:	83 c4 08             	add    esp,0x8
c000e58b:	5b                   	pop    ebx
c000e58c:	c3                   	ret    

c000e58d <KeSetEnvSystem(char const*, char const*)>:
c000e58d:	83 ec 10             	sub    esp,0x10
c000e590:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e594:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e598:	ff 35 14 c1 02 c0    	push   DWORD PTR ds:0xc002c114
c000e59e:	e8 2f fc ff ff       	call   c000e1d2 <EnvVarContainer::setEnv(char const*, char const*)>
c000e5a3:	83 c4 1c             	add    esp,0x1c
c000e5a6:	c3                   	ret    

c000e5a7 <KeSetEnvUser(char const*, char const*)>:
c000e5a7:	a1 10 c1 02 c0       	mov    eax,ds:0xc002c110
c000e5ac:	85 c0                	test   eax,eax
c000e5ae:	74 15                	je     c000e5c5 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e5b0:	83 ec 10             	sub    esp,0x10
c000e5b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5bb:	50                   	push   eax
c000e5bc:	e8 11 fc ff ff       	call   c000e1d2 <EnvVarContainer::setEnv(char const*, char const*)>
c000e5c1:	83 c4 1c             	add    esp,0x1c
c000e5c4:	c3                   	ret    
c000e5c5:	c3                   	ret    

c000e5c6 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e5c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5ca:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e5d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5d4:	e9 f9 fb ff ff       	jmp    c000e1d2 <EnvVarContainer::setEnv(char const*, char const*)>

c000e5d9 <KeDeleteEnvSystem(char const*)>:
c000e5d9:	c3                   	ret    

c000e5da <KeDeleteEnvUser(char const*)>:
c000e5da:	c3                   	ret    

c000e5db <KeDeleteEnvProcess(Process*, char const*)>:
c000e5db:	c3                   	ret    

c000e5dc <KeNewProcessEnv(Process*)>:
c000e5dc:	83 ec 28             	sub    esp,0x28
c000e5df:	6a 0c                	push   0xc
c000e5e1:	e8 b1 12 00 00       	call   c000f897 <malloc>
c000e5e6:	5a                   	pop    edx
c000e5e7:	59                   	pop    ecx
c000e5e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e5ec:	50                   	push   eax
c000e5ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5f1:	e8 e0 fe ff ff       	call   c000e4d6 <EnvVarContainer::EnvVarContainer(Process*)>
c000e5f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5fa:	83 c4 2c             	add    esp,0x2c
c000e5fd:	c3                   	ret    

c000e5fe <KeCopyProcessEnv(Process*, Process*)>:
c000e5fe:	57                   	push   edi
c000e5ff:	56                   	push   esi
c000e600:	53                   	push   ebx
c000e601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e605:	83 ec 0c             	sub    esp,0xc
c000e608:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e60e:	6a 0c                	push   0xc
c000e610:	e8 82 12 00 00       	call   c000f897 <malloc>
c000e615:	89 c3                	mov    ebx,eax
c000e617:	58                   	pop    eax
c000e618:	5a                   	pop    edx
c000e619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e61d:	53                   	push   ebx
c000e61e:	e8 b3 fe ff ff       	call   c000e4d6 <EnvVarContainer::EnvVarContainer(Process*)>
c000e623:	8b 07                	mov    eax,DWORD PTR [edi]
c000e625:	89 03                	mov    DWORD PTR [ebx],eax
c000e627:	c1 e0 03             	shl    eax,0x3
c000e62a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e62d:	e8 65 12 00 00       	call   c000f897 <malloc>
c000e632:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e635:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e637:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e63a:	c1 e1 03             	shl    ecx,0x3
c000e63d:	89 c7                	mov    edi,eax
c000e63f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e641:	83 c4 10             	add    esp,0x10
c000e644:	89 d8                	mov    eax,ebx
c000e646:	5b                   	pop    ebx
c000e647:	5e                   	pop    esi
c000e648:	5f                   	pop    edi
c000e649:	c3                   	ret    

c000e64a <KeLoadSystemEnv()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	6a 0c                	push   0xc
c000e650:	e8 42 12 00 00       	call   c000f897 <malloc>
c000e655:	89 c3                	mov    ebx,eax
c000e657:	58                   	pop    eax
c000e658:	5a                   	pop    edx
c000e659:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000e65f:	53                   	push   ebx
c000e660:	e8 71 fe ff ff       	call   c000e4d6 <EnvVarContainer::EnvVarContainer(Process*)>
c000e665:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e668:	89 1d 14 c1 02 c0    	mov    DWORD PTR ds:0xc002c114,ebx
c000e66e:	e8 47 fe ff ff       	call   c000e4ba <EnvVarContainer::__loadSystem()>
c000e673:	83 c4 18             	add    esp,0x18
c000e676:	5b                   	pop    ebx
c000e677:	c3                   	ret    

c000e678 <KeLoadUserEnv()>:
c000e678:	53                   	push   ebx
c000e679:	83 ec 14             	sub    esp,0x14
c000e67c:	6a 0c                	push   0xc
c000e67e:	e8 14 12 00 00       	call   c000f897 <malloc>
c000e683:	89 c3                	mov    ebx,eax
c000e685:	58                   	pop    eax
c000e686:	5a                   	pop    edx
c000e687:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000e68d:	53                   	push   ebx
c000e68e:	e8 43 fe ff ff       	call   c000e4d6 <EnvVarContainer::EnvVarContainer(Process*)>
c000e693:	89 1d 10 c1 02 c0    	mov    DWORD PTR ds:0xc002c110,ebx
c000e699:	83 c4 18             	add    esp,0x18
c000e69c:	5b                   	pop    ebx
c000e69d:	c3                   	ret    

c000e69e <KeFlushEnv()>:
c000e69e:	c3                   	ret    

c000e69f <KeGetProcessTotalEnvCount(Process*)>:
c000e69f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6a3:	8b 15 10 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c110
c000e6a9:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e6af:	a1 14 c1 02 c0       	mov    eax,ds:0xc002c114
c000e6b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6b6:	03 01                	add    eax,DWORD PTR [ecx]
c000e6b8:	85 d2                	test   edx,edx
c000e6ba:	74 02                	je     c000e6be <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e6bc:	03 02                	add    eax,DWORD PTR [edx]
c000e6be:	c3                   	ret    

c000e6bf <KeGetProcessEnvPair(Process*, int)>:
c000e6bf:	57                   	push   edi
c000e6c0:	56                   	push   esi
c000e6c1:	8b 35 10 c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c110
c000e6c7:	53                   	push   ebx
c000e6c8:	85 f6                	test   esi,esi
c000e6ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e6ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6d2:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e6d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e6de:	75 16                	jne    c000e6f6 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e6e0:	39 c2                	cmp    edx,eax
c000e6e2:	7c 16                	jl     c000e6fa <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e6e4:	8b 0d 14 c1 02 c0    	mov    ecx,DWORD PTR ds:0xc002c114
c000e6ea:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e6ec:	01 c6                	add    esi,eax
c000e6ee:	39 d6                	cmp    esi,edx
c000e6f0:	7e 3c                	jle    c000e72e <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e6f2:	29 c2                	sub    edx,eax
c000e6f4:	eb 04                	jmp    c000e6fa <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e6f6:	39 c2                	cmp    edx,eax
c000e6f8:	7d 05                	jge    c000e6ff <KeGetProcessEnvPair(Process*, int)+0x40>
c000e6fa:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e6fd:	eb 20                	jmp    c000e71f <KeGetProcessEnvPair(Process*, int)+0x60>
c000e6ff:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e701:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e704:	39 d1                	cmp    ecx,edx
c000e706:	7e 04                	jle    c000e70c <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e708:	29 c2                	sub    edx,eax
c000e70a:	eb 10                	jmp    c000e71c <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e70c:	8b 35 14 c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c114
c000e712:	03 0e                	add    ecx,DWORD PTR [esi]
c000e714:	39 d1                	cmp    ecx,edx
c000e716:	7e 16                	jle    c000e72e <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e718:	29 c2                	sub    edx,eax
c000e71a:	29 fa                	sub    edx,edi
c000e71c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e71f:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e722:	8b 02                	mov    eax,DWORD PTR [edx]
c000e724:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e727:	89 03                	mov    DWORD PTR [ebx],eax
c000e729:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e72c:	eb 1d                	jmp    c000e74b <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e72e:	83 ec 0c             	sub    esp,0xc
c000e731:	68 2a 3f 02 c0       	push   0xc0023f2a
c000e736:	e8 b9 15 00 00       	call   c000fcf4 <KePanic(char const*)>
c000e73b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e741:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	89 d8                	mov    eax,ebx
c000e74d:	5b                   	pop    ebx
c000e74e:	5e                   	pop    esi
c000e74f:	5f                   	pop    edi
c000e750:	c2 04 00             	ret    0x4
c000e753:	90                   	nop

c000e754 <KeDisplayProgramFault(char const*)>:
c000e754:	83 ec 0c             	sub    esp,0xc
c000e757:	83 ec 0c             	sub    esp,0xc
c000e75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e75e:	e8 19 88 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e763:	83 c4 10             	add    esp,0x10
c000e766:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e76b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e76d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e770:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e776:	85 c0                	test   eax,eax
c000e778:	74 22                	je     c000e79c <KeDisplayProgramFault(char const*)+0x48>
c000e77a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e77f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e781:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e784:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e78a:	6a 04                	push   0x4
c000e78c:	6a 0f                	push   0xf
c000e78e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e792:	50                   	push   eax
c000e793:	e8 d6 3f 00 00       	call   c001276e <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e798:	83 c4 10             	add    esp,0x10
c000e79b:	90                   	nop
c000e79c:	90                   	nop
c000e79d:	83 c4 0c             	add    esp,0xc
c000e7a0:	c3                   	ret    
c000e7a1:	8d 76 00             	lea    esi,[esi+0x0]

c000e7a4 <KeGeneralProtectionFault(void*, void*)>:
c000e7a4:	83 ec 0c             	sub    esp,0xc
c000e7a7:	83 ec 08             	sub    esp,0x8
c000e7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7b2:	e8 95 b4 00 00       	call   c0019c4c <HalHandleGeneralProtectionFault(void*, void*)>
c000e7b7:	83 c4 10             	add    esp,0x10
c000e7ba:	0f b6 c0             	movzx  eax,al
c000e7bd:	85 c0                	test   eax,eax
c000e7bf:	75 2f                	jne    c000e7f0 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e7c1:	83 ec 0c             	sub    esp,0xc
c000e7c4:	68 44 3f 02 c0       	push   0xc0023f44
c000e7c9:	e8 86 ff ff ff       	call   c000e754 <KeDisplayProgramFault(char const*)>
c000e7ce:	83 c4 10             	add    esp,0x10
c000e7d1:	83 ec 0c             	sub    esp,0xc
c000e7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d8:	e8 d3 b5 00 00       	call   c0019db0 <HalDisplayDebugInfo(void*)>
c000e7dd:	83 c4 10             	add    esp,0x10
c000e7e0:	83 ec 0c             	sub    esp,0xc
c000e7e3:	6a 7e                	push   0x7e
c000e7e5:	e8 26 8e 00 00       	call   c0017610 <KeTerminateCurrentThread(int)>
c000e7ea:	83 c4 10             	add    esp,0x10
c000e7ed:	eb 05                	jmp    c000e7f4 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e7ef:	90                   	nop
c000e7f0:	90                   	nop
c000e7f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7f4:	83 c4 0c             	add    esp,0xc
c000e7f7:	c3                   	ret    

c000e7f8 <KePageFault(void*, void*)>:
c000e7f8:	83 ec 0c             	sub    esp,0xc
c000e7fb:	83 ec 08             	sub    esp,0x8
c000e7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e806:	e8 34 b5 00 00       	call   c0019d3f <HalHandlePageFault(void*, void*)>
c000e80b:	83 c4 10             	add    esp,0x10
c000e80e:	0f b6 c0             	movzx  eax,al
c000e811:	85 c0                	test   eax,eax
c000e813:	75 2f                	jne    c000e844 <KePageFault(void*, void*)+0x4c>
c000e815:	83 ec 0c             	sub    esp,0xc
c000e818:	68 5d 3f 02 c0       	push   0xc0023f5d
c000e81d:	e8 32 ff ff ff       	call   c000e754 <KeDisplayProgramFault(char const*)>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	83 ec 0c             	sub    esp,0xc
c000e828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e82c:	e8 7f b5 00 00       	call   c0019db0 <HalDisplayDebugInfo(void*)>
c000e831:	83 c4 10             	add    esp,0x10
c000e834:	83 ec 0c             	sub    esp,0xc
c000e837:	6a 7f                	push   0x7f
c000e839:	e8 d2 8d 00 00       	call   c0017610 <KeTerminateCurrentThread(int)>
c000e83e:	83 c4 10             	add    esp,0x10
c000e841:	eb 05                	jmp    c000e848 <KePageFault(void*, void*)+0x50>
c000e843:	90                   	nop
c000e844:	90                   	nop
c000e845:	8d 76 00             	lea    esi,[esi+0x0]
c000e848:	83 c4 0c             	add    esp,0xc
c000e84b:	c3                   	ret    

c000e84c <KeOpcodeFault(void*, void*)>:
c000e84c:	83 ec 0c             	sub    esp,0xc
c000e84f:	83 ec 08             	sub    esp,0x8
c000e852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e85a:	e8 0f b5 00 00       	call   c0019d6e <HalHandleOpcodeFault(void*, void*)>
c000e85f:	83 c4 10             	add    esp,0x10
c000e862:	0f b6 c0             	movzx  eax,al
c000e865:	85 c0                	test   eax,eax
c000e867:	75 2f                	jne    c000e898 <KeOpcodeFault(void*, void*)+0x4c>
c000e869:	83 ec 0c             	sub    esp,0xc
c000e86c:	68 68 3f 02 c0       	push   0xc0023f68
c000e871:	e8 de fe ff ff       	call   c000e754 <KeDisplayProgramFault(char const*)>
c000e876:	83 c4 10             	add    esp,0x10
c000e879:	83 ec 0c             	sub    esp,0xc
c000e87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e880:	e8 2b b5 00 00       	call   c0019db0 <HalDisplayDebugInfo(void*)>
c000e885:	83 c4 10             	add    esp,0x10
c000e888:	83 ec 0c             	sub    esp,0xc
c000e88b:	6a 7c                	push   0x7c
c000e88d:	e8 7e 8d 00 00       	call   c0017610 <KeTerminateCurrentThread(int)>
c000e892:	83 c4 10             	add    esp,0x10
c000e895:	eb 05                	jmp    c000e89c <KeOpcodeFault(void*, void*)+0x50>
c000e897:	90                   	nop
c000e898:	90                   	nop
c000e899:	8d 76 00             	lea    esi,[esi+0x0]
c000e89c:	83 c4 0c             	add    esp,0xc
c000e89f:	c3                   	ret    

c000e8a0 <KeOtherFault(void*, void*)>:
c000e8a0:	83 ec 0c             	sub    esp,0xc
c000e8a3:	83 ec 0c             	sub    esp,0xc
c000e8a6:	68 84 3f 02 c0       	push   0xc0023f84
c000e8ab:	e8 a4 fe ff ff       	call   c000e754 <KeDisplayProgramFault(char const*)>
c000e8b0:	83 c4 10             	add    esp,0x10
c000e8b3:	83 ec 0c             	sub    esp,0xc
c000e8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8ba:	e8 f1 b4 00 00       	call   c0019db0 <HalDisplayDebugInfo(void*)>
c000e8bf:	83 c4 10             	add    esp,0x10
c000e8c2:	83 ec 0c             	sub    esp,0xc
c000e8c5:	6a 7d                	push   0x7d
c000e8c7:	e8 44 8d 00 00       	call   c0017610 <KeTerminateCurrentThread(int)>
c000e8cc:	83 c4 10             	add    esp,0x10
c000e8cf:	90                   	nop
c000e8d0:	83 c4 0c             	add    esp,0xc
c000e8d3:	c3                   	ret    

c000e8d4 <KeNonMaskableInterrupt(void*, void*)>:
c000e8d4:	83 ec 0c             	sub    esp,0xc
c000e8d7:	e8 62 b8 00 00       	call   c001a13e <HalReceivedNMI()>
c000e8dc:	90                   	nop
c000e8dd:	83 c4 0c             	add    esp,0xc
c000e8e0:	c3                   	ret    
c000e8e1:	8d 76 00             	lea    esi,[esi+0x0]

c000e8e4 <KeDoubleFault(void*, void*)>:
c000e8e4:	83 ec 0c             	sub    esp,0xc
c000e8e7:	83 ec 0c             	sub    esp,0xc
c000e8ea:	68 75 3f 02 c0       	push   0xc0023f75
c000e8ef:	e8 00 14 00 00       	call   c000fcf4 <KePanic(char const*)>
c000e8f4:	83 c4 10             	add    esp,0x10
c000e8f7:	90                   	nop
c000e8f8:	83 c4 0c             	add    esp,0xc
c000e8fb:	c3                   	ret    

c000e8fc <GDTEntry::setBase(unsigned int)>:
c000e8fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e900:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e904:	89 c1                	mov    ecx,eax
c000e906:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e90a:	c1 e9 10             	shr    ecx,0x10
c000e90d:	c1 e8 18             	shr    eax,0x18
c000e910:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e913:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e916:	c3                   	ret    
c000e917:	90                   	nop

c000e918 <GDTEntry::setLimit(unsigned int)>:
c000e918:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e91c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e920:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e923:	66 89 01             	mov    WORD PTR [ecx],ax
c000e926:	83 e2 f0             	and    edx,0xfffffff0
c000e929:	c1 e8 10             	shr    eax,0x10
c000e92c:	83 e0 0f             	and    eax,0xf
c000e92f:	09 d0                	or     eax,edx
c000e931:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e934:	c3                   	ret    
c000e935:	90                   	nop

c000e936 <GDT::GDT()>:
c000e936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e93a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e944:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e94a:	90                   	nop
c000e94b:	c3                   	ret    

c000e94c <GDT::addEntry(GDTEntry)>:
c000e94c:	53                   	push   ebx
c000e94d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e951:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e955:	8b 02                	mov    eax,DWORD PTR [edx]
c000e957:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e95b:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e95f:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e963:	8d 48 01             	lea    ecx,[eax+0x1]
c000e966:	c1 e0 03             	shl    eax,0x3
c000e969:	89 0a                	mov    DWORD PTR [edx],ecx
c000e96b:	5b                   	pop    ebx
c000e96c:	c3                   	ret    
c000e96d:	90                   	nop

c000e96e <GDT::getNumberOfEntries()>:
c000e96e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e972:	8b 00                	mov    eax,DWORD PTR [eax]
c000e974:	c3                   	ret    
c000e975:	90                   	nop

c000e976 <GDT::flush()>:
c000e976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e97a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e97c:	83 c0 04             	add    eax,0x4
c000e97f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e986:	a3 1a c1 02 c0       	mov    ds:0xc002c11a,eax
c000e98b:	66 89 15 18 c1 02 c0 	mov    WORD PTR ds:0xc002c118,dx
c000e992:	e9 c3 19 ff ff       	jmp    c000035a <loadGDT>
c000e997:	90                   	nop

c000e998 <GDT::setup()>:
c000e998:	57                   	push   edi
c000e999:	56                   	push   esi
c000e99a:	53                   	push   ebx
c000e99b:	83 ec 30             	sub    esp,0x30
c000e99e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e9a2:	6a 00                	push   0x0
c000e9a4:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e9a8:	56                   	push   esi
c000e9a9:	e8 4e ff ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000e9ae:	6a 00                	push   0x0
c000e9b0:	56                   	push   esi
c000e9b1:	e8 62 ff ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c000e9b6:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e9be:	6a 00                	push   0x0
c000e9c0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e9c4:	56                   	push   esi
c000e9c5:	e8 32 ff ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000e9ca:	68 ff ff ff 00       	push   0xffffff
c000e9cf:	56                   	push   esi
c000e9d0:	e8 43 ff ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c000e9d5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e9d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9dd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e9e1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e9e5:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e9ea:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e9ef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e9f3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e9f7:	89 f8                	mov    eax,edi
c000e9f9:	89 fa                	mov    edx,edi
c000e9fb:	80 e4 f7             	and    ah,0xf7
c000e9fe:	80 ce 60             	or     dh,0x60
c000ea01:	89 c7                	mov    edi,eax
c000ea03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ea07:	80 cc 60             	or     ah,0x60
c000ea0a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ea0e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ea12:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ea16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea1a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea1e:	83 c4 20             	add    esp,0x20
c000ea21:	6a 00                	push   0x0
c000ea23:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ea27:	50                   	push   eax
c000ea28:	e8 cf fe ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000ea2d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ea31:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ea35:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ea39:	83 e0 3f             	and    eax,0x3f
c000ea3c:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ea40:	6a 00                	push   0x0
c000ea42:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ea46:	50                   	push   eax
c000ea47:	e8 b0 fe ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000ea4c:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ea50:	83 e0 3f             	and    eax,0x3f
c000ea53:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ea57:	83 c4 0c             	add    esp,0xc
c000ea5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea62:	53                   	push   ebx
c000ea63:	e8 e4 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea68:	83 c4 0c             	add    esp,0xc
c000ea6b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea6f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea73:	53                   	push   ebx
c000ea74:	e8 d3 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea79:	83 c4 0c             	add    esp,0xc
c000ea7c:	57                   	push   edi
c000ea7d:	56                   	push   esi
c000ea7e:	53                   	push   ebx
c000ea7f:	e8 c8 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea84:	83 c4 0c             	add    esp,0xc
c000ea87:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ea8b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ea8f:	53                   	push   ebx
c000ea90:	e8 b7 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea95:	83 c4 0c             	add    esp,0xc
c000ea98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eaa0:	53                   	push   ebx
c000eaa1:	e8 a6 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000eaa6:	83 c4 0c             	add    esp,0xc
c000eaa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eaad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eab1:	53                   	push   ebx
c000eab2:	e8 95 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000eab7:	83 c4 0c             	add    esp,0xc
c000eaba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eabe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eac2:	53                   	push   ebx
c000eac3:	e8 84 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000eac8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eacb:	e8 a6 fe ff ff       	call   c000e976 <GDT::flush()>
c000ead0:	83 c4 40             	add    esp,0x40
c000ead3:	5b                   	pop    ebx
c000ead4:	5e                   	pop    esi
c000ead5:	5f                   	pop    edi
c000ead6:	c3                   	ret    

c000ead7 <idleFunction(void*)>:
c000ead7:	83 ec 0c             	sub    esp,0xc
c000eada:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000eae1:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000eae8:	75 01                	jne    c000eaeb <idleFunction(void*)+0x14>
c000eaea:	fb                   	sti    
c000eaeb:	e8 e9 b6 00 00       	call   c001a1d9 <HalSystemIdle()>
c000eaf0:	e8 d1 35 01 00       	call   c00220c6 <idleCommon()>
c000eaf5:	eb f4                	jmp    c000eaeb <idleFunction(void*)+0x14>
c000eaf7:	90                   	nop

c000eaf8 <IDTEntry::IDTEntry(bool)>:
c000eaf8:	53                   	push   ebx
c000eaf9:	83 ec 04             	sub    esp,0x4
c000eafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb00:	88 04 24             	mov    BYTE PTR [esp],al
c000eb03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb07:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb11:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb19:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb1c:	83 e2 f0             	and    edx,0xfffffff0
c000eb1f:	83 ca 0e             	or     edx,0xe
c000eb22:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb29:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb2c:	83 e2 ef             	and    edx,0xffffffef
c000eb2f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb32:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000eb36:	85 c0                	test   eax,eax
c000eb38:	74 06                	je     c000eb40 <IDTEntry::IDTEntry(bool)+0x48>
c000eb3a:	b2 03                	mov    dl,0x3
c000eb3c:	eb 06                	jmp    c000eb44 <IDTEntry::IDTEntry(bool)+0x4c>
c000eb3e:	66 90                	xchg   ax,ax
c000eb40:	b2 00                	mov    dl,0x0
c000eb42:	66 90                	xchg   ax,ax
c000eb44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb48:	83 e2 03             	and    edx,0x3
c000eb4b:	89 d3                	mov    ebx,edx
c000eb4d:	c1 e3 05             	shl    ebx,0x5
c000eb50:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb53:	83 e2 9f             	and    edx,0xffffff9f
c000eb56:	88 d1                	mov    cl,dl
c000eb58:	88 da                	mov    dl,bl
c000eb5a:	09 ca                	or     edx,ecx
c000eb5c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb63:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb66:	83 ca 80             	or     edx,0xffffff80
c000eb69:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb6c:	90                   	nop
c000eb6d:	83 c4 04             	add    esp,0x4
c000eb70:	5b                   	pop    ebx
c000eb71:	c3                   	ret    

c000eb72 <IDTEntry::setOffset(unsigned int)>:
c000eb72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eb76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb7a:	66 89 02             	mov    WORD PTR [edx],ax
c000eb7d:	c1 e8 10             	shr    eax,0x10
c000eb80:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000eb84:	c3                   	ret    
c000eb85:	90                   	nop
c000eb86:	66 90                	xchg   ax,ax

c000eb88 <IDT::IDT()>:
c000eb88:	90                   	nop
c000eb89:	c3                   	ret    

c000eb8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000eb8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb8e:	83 c0 30             	add    eax,0x30
c000eb91:	c3                   	ret    

c000eb92 <IDT::addEntry(IDTEntry, int)>:
c000eb92:	53                   	push   ebx
c000eb93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eba3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000eba6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ebaa:	5b                   	pop    ebx
c000ebab:	c3                   	ret    

c000ebac <IDT::addEntry(int, void (*)(), bool)>:
c000ebac:	53                   	push   ebx
c000ebad:	83 ec 10             	sub    esp,0x10
c000ebb0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ebb5:	50                   	push   eax
c000ebb6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ebba:	53                   	push   ebx
c000ebbb:	e8 38 ff ff ff       	call   c000eaf8 <IDTEntry::IDTEntry(bool)>
c000ebc0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ebc4:	53                   	push   ebx
c000ebc5:	e8 a8 ff ff ff       	call   c000eb72 <IDTEntry::setOffset(unsigned int)>
c000ebca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ebda:	e8 b3 ff ff ff       	call   c000eb92 <IDT::addEntry(IDTEntry, int)>
c000ebdf:	83 c4 30             	add    esp,0x30
c000ebe2:	5b                   	pop    ebx
c000ebe3:	c3                   	ret    

c000ebe4 <IDT::flush()>:
c000ebe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebe8:	66 c7 05 20 c1 02 c0 ff 07 	mov    WORD PTR ds:0xc002c120,0x7ff
c000ebf1:	a3 22 c1 02 c0       	mov    ds:0xc002c122,eax
c000ebf6:	0f 01 1d 20 c1 02 c0 	lidtd  ds:0xc002c120
c000ebfd:	c3                   	ret    

c000ebfe <IDT::setup()>:
c000ebfe:	57                   	push   edi
c000ebff:	56                   	push   esi
c000ec00:	53                   	push   ebx
c000ec01:	83 ec 10             	sub    esp,0x10
c000ec04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec08:	6a 00                	push   0x0
c000ec0a:	68 a0 13 02 c0       	push   0xc00213a0
c000ec0f:	6a 00                	push   0x0
c000ec11:	53                   	push   ebx
c000ec12:	e8 95 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec17:	6a 00                	push   0x0
c000ec19:	68 b0 13 02 c0       	push   0xc00213b0
c000ec1e:	6a 01                	push   0x1
c000ec20:	53                   	push   ebx
c000ec21:	e8 86 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec26:	83 c4 20             	add    esp,0x20
c000ec29:	6a 00                	push   0x0
c000ec2b:	68 ba 13 02 c0       	push   0xc00213ba
c000ec30:	6a 02                	push   0x2
c000ec32:	53                   	push   ebx
c000ec33:	e8 74 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec38:	6a 00                	push   0x0
c000ec3a:	68 c4 13 02 c0       	push   0xc00213c4
c000ec3f:	6a 03                	push   0x3
c000ec41:	53                   	push   ebx
c000ec42:	e8 65 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec47:	83 c4 20             	add    esp,0x20
c000ec4a:	6a 00                	push   0x0
c000ec4c:	68 ce 13 02 c0       	push   0xc00213ce
c000ec51:	6a 04                	push   0x4
c000ec53:	53                   	push   ebx
c000ec54:	e8 53 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec59:	6a 00                	push   0x0
c000ec5b:	68 d8 13 02 c0       	push   0xc00213d8
c000ec60:	6a 05                	push   0x5
c000ec62:	53                   	push   ebx
c000ec63:	e8 44 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec68:	83 c4 20             	add    esp,0x20
c000ec6b:	6a 00                	push   0x0
c000ec6d:	68 e2 13 02 c0       	push   0xc00213e2
c000ec72:	6a 06                	push   0x6
c000ec74:	53                   	push   ebx
c000ec75:	e8 32 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec7a:	6a 00                	push   0x0
c000ec7c:	68 ec 13 02 c0       	push   0xc00213ec
c000ec81:	6a 07                	push   0x7
c000ec83:	53                   	push   ebx
c000ec84:	e8 23 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec89:	83 c4 20             	add    esp,0x20
c000ec8c:	6a 00                	push   0x0
c000ec8e:	68 f6 13 02 c0       	push   0xc00213f6
c000ec93:	6a 08                	push   0x8
c000ec95:	53                   	push   ebx
c000ec96:	e8 11 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec9b:	6a 00                	push   0x0
c000ec9d:	68 fe 13 02 c0       	push   0xc00213fe
c000eca2:	6a 09                	push   0x9
c000eca4:	53                   	push   ebx
c000eca5:	e8 02 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ecaa:	83 c4 20             	add    esp,0x20
c000ecad:	6a 00                	push   0x0
c000ecaf:	68 08 14 02 c0       	push   0xc0021408
c000ecb4:	6a 0a                	push   0xa
c000ecb6:	53                   	push   ebx
c000ecb7:	e8 f0 fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ecbc:	6a 00                	push   0x0
c000ecbe:	68 10 14 02 c0       	push   0xc0021410
c000ecc3:	6a 0b                	push   0xb
c000ecc5:	53                   	push   ebx
c000ecc6:	e8 e1 fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000eccb:	83 c4 20             	add    esp,0x20
c000ecce:	6a 00                	push   0x0
c000ecd0:	68 18 14 02 c0       	push   0xc0021418
c000ecd5:	6a 0c                	push   0xc
c000ecd7:	53                   	push   ebx
c000ecd8:	e8 cf fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ecdd:	6a 00                	push   0x0
c000ecdf:	68 20 14 02 c0       	push   0xc0021420
c000ece4:	6a 0d                	push   0xd
c000ece6:	53                   	push   ebx
c000ece7:	e8 c0 fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ecec:	83 c4 20             	add    esp,0x20
c000ecef:	6a 00                	push   0x0
c000ecf1:	68 3a 14 02 c0       	push   0xc002143a
c000ecf6:	6a 0e                	push   0xe
c000ecf8:	53                   	push   ebx
c000ecf9:	e8 ae fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ecfe:	6a 00                	push   0x0
c000ed00:	68 42 14 02 c0       	push   0xc0021442
c000ed05:	6a 0f                	push   0xf
c000ed07:	53                   	push   ebx
c000ed08:	e8 9f fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed0d:	83 c4 20             	add    esp,0x20
c000ed10:	6a 00                	push   0x0
c000ed12:	68 4c 14 02 c0       	push   0xc002144c
c000ed17:	6a 10                	push   0x10
c000ed19:	53                   	push   ebx
c000ed1a:	e8 8d fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed1f:	6a 00                	push   0x0
c000ed21:	68 56 14 02 c0       	push   0xc0021456
c000ed26:	6a 11                	push   0x11
c000ed28:	53                   	push   ebx
c000ed29:	e8 7e fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed2e:	83 c4 20             	add    esp,0x20
c000ed31:	6a 00                	push   0x0
c000ed33:	68 60 14 02 c0       	push   0xc0021460
c000ed38:	6a 12                	push   0x12
c000ed3a:	53                   	push   ebx
c000ed3b:	e8 6c fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed40:	6a 01                	push   0x1
c000ed42:	68 fa 14 02 c0       	push   0xc00214fa
c000ed47:	6a 60                	push   0x60
c000ed49:	53                   	push   ebx
c000ed4a:	e8 5d fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed4f:	83 c4 20             	add    esp,0x20
c000ed52:	6a 00                	push   0x0
c000ed54:	68 01 15 02 c0       	push   0xc0021501
c000ed59:	6a 20                	push   0x20
c000ed5b:	53                   	push   ebx
c000ed5c:	e8 4b fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed61:	6a 00                	push   0x0
c000ed63:	68 ec 14 02 c0       	push   0xc00214ec
c000ed68:	6a 21                	push   0x21
c000ed6a:	53                   	push   ebx
c000ed6b:	e8 3c fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed70:	83 c4 20             	add    esp,0x20
c000ed73:	6a 00                	push   0x0
c000ed75:	68 f3 14 02 c0       	push   0xc00214f3
c000ed7a:	6a 22                	push   0x22
c000ed7c:	53                   	push   ebx
c000ed7d:	e8 2a fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed82:	6a 00                	push   0x0
c000ed84:	68 6a 14 02 c0       	push   0xc002146a
c000ed89:	6a 23                	push   0x23
c000ed8b:	53                   	push   ebx
c000ed8c:	e8 1b fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed91:	83 c4 20             	add    esp,0x20
c000ed94:	6a 00                	push   0x0
c000ed96:	68 74 14 02 c0       	push   0xc0021474
c000ed9b:	6a 24                	push   0x24
c000ed9d:	53                   	push   ebx
c000ed9e:	e8 09 fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000eda3:	6a 00                	push   0x0
c000eda5:	68 7e 14 02 c0       	push   0xc002147e
c000edaa:	6a 25                	push   0x25
c000edac:	53                   	push   ebx
c000edad:	e8 fa fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000edb2:	83 c4 20             	add    esp,0x20
c000edb5:	6a 00                	push   0x0
c000edb7:	68 88 14 02 c0       	push   0xc0021488
c000edbc:	6a 26                	push   0x26
c000edbe:	53                   	push   ebx
c000edbf:	e8 e8 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000edc4:	6a 00                	push   0x0
c000edc6:	68 92 14 02 c0       	push   0xc0021492
c000edcb:	6a 27                	push   0x27
c000edcd:	53                   	push   ebx
c000edce:	e8 d9 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000edd3:	83 c4 20             	add    esp,0x20
c000edd6:	6a 00                	push   0x0
c000edd8:	68 9c 14 02 c0       	push   0xc002149c
c000eddd:	6a 28                	push   0x28
c000eddf:	53                   	push   ebx
c000ede0:	e8 c7 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ede5:	6a 00                	push   0x0
c000ede7:	68 a6 14 02 c0       	push   0xc00214a6
c000edec:	6a 29                	push   0x29
c000edee:	53                   	push   ebx
c000edef:	e8 b8 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000edf4:	83 c4 20             	add    esp,0x20
c000edf7:	6a 00                	push   0x0
c000edf9:	68 b0 14 02 c0       	push   0xc00214b0
c000edfe:	6a 2a                	push   0x2a
c000ee00:	53                   	push   ebx
c000ee01:	e8 a6 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee06:	6a 00                	push   0x0
c000ee08:	68 ba 14 02 c0       	push   0xc00214ba
c000ee0d:	6a 2b                	push   0x2b
c000ee0f:	53                   	push   ebx
c000ee10:	e8 97 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee15:	83 c4 20             	add    esp,0x20
c000ee18:	6a 00                	push   0x0
c000ee1a:	68 c4 14 02 c0       	push   0xc00214c4
c000ee1f:	6a 2c                	push   0x2c
c000ee21:	53                   	push   ebx
c000ee22:	e8 85 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee27:	6a 00                	push   0x0
c000ee29:	68 ce 14 02 c0       	push   0xc00214ce
c000ee2e:	6a 2d                	push   0x2d
c000ee30:	53                   	push   ebx
c000ee31:	e8 76 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee36:	83 c4 20             	add    esp,0x20
c000ee39:	6a 00                	push   0x0
c000ee3b:	68 d8 14 02 c0       	push   0xc00214d8
c000ee40:	6a 2e                	push   0x2e
c000ee42:	53                   	push   ebx
c000ee43:	e8 64 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee48:	6a 00                	push   0x0
c000ee4a:	68 e2 14 02 c0       	push   0xc00214e2
c000ee4f:	6a 2f                	push   0x2f
c000ee51:	53                   	push   ebx
c000ee52:	e8 55 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee57:	83 c4 20             	add    esp,0x20
c000ee5a:	6a 00                	push   0x0
c000ee5c:	68 04 16 02 c0       	push   0xc0021604
c000ee61:	6a 30                	push   0x30
c000ee63:	53                   	push   ebx
c000ee64:	e8 43 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee69:	6a 00                	push   0x0
c000ee6b:	68 0e 16 02 c0       	push   0xc002160e
c000ee70:	6a 31                	push   0x31
c000ee72:	53                   	push   ebx
c000ee73:	e8 34 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee78:	83 c4 20             	add    esp,0x20
c000ee7b:	6a 00                	push   0x0
c000ee7d:	68 18 16 02 c0       	push   0xc0021618
c000ee82:	6a 32                	push   0x32
c000ee84:	53                   	push   ebx
c000ee85:	e8 22 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee8a:	6a 00                	push   0x0
c000ee8c:	68 22 16 02 c0       	push   0xc0021622
c000ee91:	6a 33                	push   0x33
c000ee93:	53                   	push   ebx
c000ee94:	e8 13 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee99:	83 c4 20             	add    esp,0x20
c000ee9c:	6a 00                	push   0x0
c000ee9e:	68 2c 16 02 c0       	push   0xc002162c
c000eea3:	6a 34                	push   0x34
c000eea5:	53                   	push   ebx
c000eea6:	e8 01 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000eeab:	6a 00                	push   0x0
c000eead:	68 36 16 02 c0       	push   0xc0021636
c000eeb2:	6a 35                	push   0x35
c000eeb4:	53                   	push   ebx
c000eeb5:	e8 f2 fc ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000eeba:	83 c4 20             	add    esp,0x20
c000eebd:	6a 00                	push   0x0
c000eebf:	68 40 16 02 c0       	push   0xc0021640
c000eec4:	6a 36                	push   0x36
c000eec6:	53                   	push   ebx
c000eec7:	e8 e0 fc ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000eecc:	6a 00                	push   0x0
c000eece:	68 4a 16 02 c0       	push   0xc002164a
c000eed3:	6a 37                	push   0x37
c000eed5:	53                   	push   ebx
c000eed6:	e8 d1 fc ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000eedb:	83 c4 1c             	add    esp,0x1c
c000eede:	6a 03                	push   0x3
c000eee0:	6a 02                	push   0x2
c000eee2:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000eee8:	e8 21 4c 00 00       	call   c0013b0e <VAS::allocatePages(int, int)>
c000eeed:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000eef4:	89 c6                	mov    esi,eax
c000eef6:	e8 9c 09 00 00       	call   c000f897 <malloc>
c000eefb:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef01:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef04:	89 c7                	mov    edi,eax
c000ef06:	e8 cd 3c 00 00       	call   c0012bd8 <TSS::TSS()>
c000ef0b:	83 c4 0c             	add    esp,0xc
c000ef0e:	68 f6 13 02 c0       	push   0xc00213f6
c000ef13:	56                   	push   esi
c000ef14:	57                   	push   edi
c000ef15:	e8 02 3d 00 00       	call   c0012c1c <TSS::setup(unsigned long, unsigned long)>
c000ef1a:	89 c6                	mov    esi,eax
c000ef1c:	58                   	pop    eax
c000ef1d:	5a                   	pop    edx
c000ef1e:	6a 00                	push   0x0
c000ef20:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef24:	50                   	push   eax
c000ef25:	e8 ce fb ff ff       	call   c000eaf8 <IDTEntry::IDTEntry(bool)>
c000ef2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef2e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef33:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef3a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef44:	80 ce 05             	or     dh,0x5
c000ef47:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef4a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef52:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef58:	e8 87 fc ff ff       	call   c000ebe4 <IDT::flush()>
c000ef5d:	83 c4 20             	add    esp,0x20
c000ef60:	5b                   	pop    ebx
c000ef61:	5e                   	pop    esi
c000ef62:	5f                   	pop    edi
c000ef63:	c3                   	ret    

c000ef64 <CPU::current()>:
c000ef64:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c000ef69:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ef6f:	c3                   	ret    

c000ef70 <operator new(unsigned long)>:
c000ef70:	e9 22 09 00 00       	jmp    c000f897 <malloc>

c000ef75 <operator delete(void*)>:
c000ef75:	e9 3d 09 00 00       	jmp    c000f8b7 <rfree>

c000ef7a <disableIRQs()>:
c000ef7a:	fa                   	cli    
c000ef7b:	c3                   	ret    

c000ef7c <enableIRQs()>:
c000ef7c:	fb                   	sti    
c000ef7d:	c3                   	ret    

c000ef7e <lockScheduler()>:
c000ef7e:	fa                   	cli    
c000ef7f:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c000ef85:	c3                   	ret    

c000ef86 <unlockScheduler()>:
c000ef86:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000ef8d:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000ef94:	75 01                	jne    c000ef97 <unlockScheduler()+0x11>
c000ef96:	fb                   	sti    
c000ef97:	c3                   	ret    

c000ef98 <lockStuff()>:
c000ef98:	fa                   	cli    
c000ef99:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c000ef9f:	ff 05 6c ca 02 c0    	inc    DWORD PTR ds:0xc002ca6c
c000efa5:	c3                   	ret    

c000efa6 <unlockStuff()>:
c000efa6:	83 ec 0c             	sub    esp,0xc
c000efa9:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000efae:	48                   	dec    eax
c000efaf:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c000efb4:	75 18                	jne    c000efce <unlockStuff()+0x28>
c000efb6:	83 3d 68 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca68,0x0
c000efbd:	74 0f                	je     c000efce <unlockStuff()+0x28>
c000efbf:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c000efc9:	e8 42 7e 00 00       	call   c0016e10 <schedule()>
c000efce:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000efd5:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000efdc:	75 01                	jne    c000efdf <unlockStuff()+0x39>
c000efde:	fb                   	sti    
c000efdf:	83 c4 0c             	add    esp,0xc
c000efe2:	c3                   	ret    

c000efe3 <Virt::getAKernelVAS()>:
c000efe3:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c000efe8:	c3                   	ret    

c000efe9 <__not_memcpy>:
c000efe9:	57                   	push   edi
c000efea:	56                   	push   esi
c000efeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eff3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eff7:	89 c7                	mov    edi,eax
c000eff9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000effb:	5e                   	pop    esi
c000effc:	5f                   	pop    edi
c000effd:	c3                   	ret    

c000effe <KeFormatDate(char*, int, int, int, int, bool)>:
c000effe:	55                   	push   ebp
c000efff:	b9 0a 00 00 00       	mov    ecx,0xa
c000f004:	57                   	push   edi
c000f005:	56                   	push   esi
c000f006:	53                   	push   ebx
c000f007:	bb e8 03 00 00       	mov    ebx,0x3e8
c000f00c:	81 ec ac 00 00 00    	sub    esp,0xac
c000f012:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f019:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f01e:	99                   	cdq    
c000f01f:	f7 f9                	idiv   ecx
c000f021:	89 d5                	mov    ebp,edx
c000f023:	99                   	cdq    
c000f024:	f7 f9                	idiv   ecx
c000f026:	8d 42 30             	lea    eax,[edx+0x30]
c000f029:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f02d:	8d 45 30             	lea    eax,[ebp+0x30]
c000f030:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f034:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f03b:	99                   	cdq    
c000f03c:	f7 fb                	idiv   ebx
c000f03e:	bb 64 00 00 00       	mov    ebx,0x64
c000f043:	99                   	cdq    
c000f044:	f7 f9                	idiv   ecx
c000f046:	8d 42 30             	lea    eax,[edx+0x30]
c000f049:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f04d:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f054:	99                   	cdq    
c000f055:	f7 fb                	idiv   ebx
c000f057:	31 db                	xor    ebx,ebx
c000f059:	99                   	cdq    
c000f05a:	f7 f9                	idiv   ecx
c000f05c:	8d 42 30             	lea    eax,[edx+0x30]
c000f05f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f063:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f06b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f06f:	0f be 8b 44 c1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd3ebc]
c000f076:	83 f9 59             	cmp    ecx,0x59
c000f079:	74 1c                	je     c000f097 <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f07b:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f082:	83 f9 4d             	cmp    ecx,0x4d
c000f085:	0f 84 e3 00 00 00    	je     c000f16e <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f08b:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f092:	e9 d7 00 00 00       	jmp    c000f16e <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f097:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f09c:	74 27                	je     c000f0c5 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f09e:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f0a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f0a7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f0ab:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f0af:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f0b3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f0b7:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f0bb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f0bf:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f0c3:	eb 15                	jmp    c000f0da <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f0c5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f0c9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f0cd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f0d1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f0d5:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f0da:	50                   	push   eax
c000f0db:	50                   	push   eax
c000f0dc:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f0e0:	57                   	push   edi
c000f0e1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f0e5:	56                   	push   esi
c000f0e6:	e8 55 17 ff ff       	call   c0000840 <strcat>
c000f0eb:	83 c4 10             	add    esp,0x10
c000f0ee:	83 fb 02             	cmp    ebx,0x2
c000f0f1:	74 1a                	je     c000f10d <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f0f3:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f0f8:	a1 48 c1 02 c0       	mov    eax,ds:0xc002c148
c000f0fd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f101:	55                   	push   ebp
c000f102:	55                   	push   ebp
c000f103:	57                   	push   edi
c000f104:	56                   	push   esi
c000f105:	e8 36 17 ff ff       	call   c0000840 <strcat>
c000f10a:	83 c4 10             	add    esp,0x10
c000f10d:	43                   	inc    ebx
c000f10e:	83 fb 03             	cmp    ebx,0x3
c000f111:	0f 85 58 ff ff ff    	jne    c000f06f <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f117:	51                   	push   ecx
c000f118:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f11f:	6a 00                	push   0x0
c000f121:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f128:	e8 c3 13 ff ff       	call   c00004f0 <memset>
c000f12d:	89 34 24             	mov    DWORD PTR [esp],esi
c000f130:	e8 3b 14 ff ff       	call   c0000570 <strlen>
c000f135:	83 c4 10             	add    esp,0x10
c000f138:	40                   	inc    eax
c000f139:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f140:	72 17                	jb     c000f159 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f142:	52                   	push   edx
c000f143:	52                   	push   edx
c000f144:	56                   	push   esi
c000f145:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f14c:	e8 ef 14 ff ff       	call   c0000640 <strcpy>
c000f151:	83 c4 10             	add    esp,0x10
c000f154:	e9 8a 00 00 00       	jmp    c000f1e3 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f159:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f160:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f167:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f16a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f16c:	eb 75                	jmp    c000f1e3 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f16e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f172:	89 ef                	mov    edi,ebp
c000f174:	50                   	push   eax
c000f175:	c1 ff 1f             	sar    edi,0x1f
c000f178:	50                   	push   eax
c000f179:	57                   	push   edi
c000f17a:	55                   	push   ebp
c000f17b:	e8 70 04 00 00       	call   c000f5f0 <KeGetDigitsInNumber(long long)>
c000f180:	83 c4 10             	add    esp,0x10
c000f183:	48                   	dec    eax
c000f184:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f188:	75 1c                	jne    c000f1a6 <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f18a:	83 f9 44             	cmp    ecx,0x44
c000f18d:	75 09                	jne    c000f198 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f18f:	80 3d 60 c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c160,0x0
c000f196:	eb 0c                	jmp    c000f1a4 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f198:	83 f9 4d             	cmp    ecx,0x4d
c000f19b:	75 2b                	jne    c000f1c8 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f19d:	80 3d 61 c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c161,0x0
c000f1a4:	74 22                	je     c000f1c8 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f1a6:	89 e8                	mov    eax,ebp
c000f1a8:	b9 0a 00 00 00       	mov    ecx,0xa
c000f1ad:	99                   	cdq    
c000f1ae:	f7 f9                	idiv   ecx
c000f1b0:	89 d5                	mov    ebp,edx
c000f1b2:	99                   	cdq    
c000f1b3:	f7 f9                	idiv   ecx
c000f1b5:	83 c2 30             	add    edx,0x30
c000f1b8:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f1bc:	8d 55 30             	lea    edx,[ebp+0x30]
c000f1bf:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f1c3:	e9 0d ff ff ff       	jmp    c000f0d5 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f1c8:	89 e8                	mov    eax,ebp
c000f1ca:	b9 0a 00 00 00       	mov    ecx,0xa
c000f1cf:	99                   	cdq    
c000f1d0:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f1d5:	f7 f9                	idiv   ecx
c000f1d7:	83 c2 30             	add    edx,0x30
c000f1da:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f1de:	e9 f7 fe ff ff       	jmp    c000f0da <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f1e3:	81 c4 ac 00 00 00    	add    esp,0xac
c000f1e9:	5b                   	pop    ebx
c000f1ea:	5e                   	pop    esi
c000f1eb:	5f                   	pop    edi
c000f1ec:	5d                   	pop    ebp
c000f1ed:	c3                   	ret    

c000f1ee <KeFormatShortDate(char*, int, int, int, int)>:
c000f1ee:	83 ec 14             	sub    esp,0x14
c000f1f1:	6a 00                	push   0x0
c000f1f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f203:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f207:	e8 f2 fd ff ff       	call   c000effe <KeFormatDate(char*, int, int, int, int, bool)>
c000f20c:	83 c4 2c             	add    esp,0x2c
c000f20f:	c3                   	ret    

c000f210 <KeFormatLongDate(char*, int, int, int, int)>:
c000f210:	83 ec 14             	sub    esp,0x14
c000f213:	6a 01                	push   0x1
c000f215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f219:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f21d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f221:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f225:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f229:	e8 d0 fd ff ff       	call   c000effe <KeFormatDate(char*, int, int, int, int, bool)>
c000f22e:	83 c4 2c             	add    esp,0x2c
c000f231:	c3                   	ret    

c000f232 <KeSetLocale(klocale_t)>:
c000f232:	57                   	push   edi
c000f233:	b9 09 00 00 00       	mov    ecx,0x9
c000f238:	56                   	push   esi
c000f239:	bf 40 c1 02 c0       	mov    edi,0xc002c140
c000f23e:	fc                   	cld    
c000f23f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f243:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f245:	5e                   	pop    esi
c000f246:	5f                   	pop    edi
c000f247:	c3                   	ret    

c000f248 <KeInitialiseLocale()>:
c000f248:	57                   	push   edi
c000f249:	56                   	push   esi
c000f24a:	83 ec 3c             	sub    esp,0x3c
c000f24d:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f255:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f25d:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f265:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f26d:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f274:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f27c:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f284:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f28b:	68 ac 3f 02 c0       	push   0xc0023fac
c000f290:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f294:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f298:	50                   	push   eax
c000f299:	e8 a2 13 ff ff       	call   c0000640 <strcpy>
c000f29e:	83 ec 20             	sub    esp,0x20
c000f2a1:	b9 09 00 00 00       	mov    ecx,0x9
c000f2a6:	fc                   	cld    
c000f2a7:	89 e7                	mov    edi,esp
c000f2a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f2ab:	e8 82 ff ff ff       	call   c000f232 <KeSetLocale(klocale_t)>
c000f2b0:	83 c4 64             	add    esp,0x64
c000f2b3:	5e                   	pop    esi
c000f2b4:	5f                   	pop    edi
c000f2b5:	c3                   	ret    

c000f2b6 <KeFormatCurrency(char*, int, long long, long long)>:
c000f2b6:	c3                   	ret    

c000f2b7 <KeFormatCurrency(char*, int, double)>:
c000f2b7:	c3                   	ret    

c000f2b8 <KeFormatNumber(char*, long long, long long)>:
c000f2b8:	c3                   	ret    

c000f2b9 <KeFormatNumber(char*, double)>:
c000f2b9:	c3                   	ret    
c000f2ba:	66 90                	xchg   ax,ax

c000f2bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f2bc:	55                   	push   ebp
c000f2bd:	57                   	push   edi
c000f2be:	56                   	push   esi
c000f2bf:	53                   	push   ebx
c000f2c0:	83 ec 5c             	sub    esp,0x5c
c000f2c3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f2c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f2cb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f2cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f2d3:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f2d7:	bb cf 2d 02 c0       	mov    ebx,0xc0022dcf
c000f2dc:	bd 11 00 00 00       	mov    ebp,0x11
c000f2e1:	89 d0                	mov    eax,edx
c000f2e3:	83 e0 01             	and    eax,0x1
c000f2e6:	74 10                	je     c000f2f8 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f2e8:	8a 03                	mov    al,BYTE PTR [ebx]
c000f2ea:	88 02                	mov    BYTE PTR [edx],al
c000f2ec:	8d 52 01             	lea    edx,[edx+0x1]
c000f2ef:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f2f2:	83 ed 01             	sub    ebp,0x1
c000f2f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f8:	89 d0                	mov    eax,edx
c000f2fa:	83 e0 02             	and    eax,0x2
c000f2fd:	74 11                	je     c000f310 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f2ff:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f302:	66 89 02             	mov    WORD PTR [edx],ax
c000f305:	8d 52 02             	lea    edx,[edx+0x2]
c000f308:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f30b:	83 ed 02             	sub    ebp,0x2
c000f30e:	66 90                	xchg   ax,ax
c000f310:	89 e8                	mov    eax,ebp
c000f312:	c1 e8 02             	shr    eax,0x2
c000f315:	fc                   	cld    
c000f316:	89 d7                	mov    edi,edx
c000f318:	89 de                	mov    esi,ebx
c000f31a:	89 c1                	mov    ecx,eax
c000f31c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f31e:	89 f3                	mov    ebx,esi
c000f320:	89 fa                	mov    edx,edi
c000f322:	b9 00 00 00 00       	mov    ecx,0x0
c000f327:	89 e8                	mov    eax,ebp
c000f329:	83 e0 02             	and    eax,0x2
c000f32c:	74 0e                	je     c000f33c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f32e:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f332:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f336:	8d 41 02             	lea    eax,[ecx+0x2]
c000f339:	89 c1                	mov    ecx,eax
c000f33b:	90                   	nop
c000f33c:	89 e8                	mov    eax,ebp
c000f33e:	83 e0 01             	and    eax,0x1
c000f341:	74 09                	je     c000f34c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f343:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f346:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f349:	8d 76 00             	lea    esi,[esi+0x0]
c000f34c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f350:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f354:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f358:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f35c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f360:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f364:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f369:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f36d:	89 c2                	mov    edx,eax
c000f36f:	c1 fa 1f             	sar    edx,0x1f
c000f372:	52                   	push   edx
c000f373:	50                   	push   eax
c000f374:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f378:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f37c:	e8 73 26 01 00       	call   c00219f4 <__udivdi3>
c000f381:	83 c4 10             	add    esp,0x10
c000f384:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f388:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f38c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f390:	80 f4 00             	xor    ah,0x0
c000f393:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f397:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f39b:	80 f4 00             	xor    ah,0x0
c000f39e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f3a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f3a6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f3aa:	89 f8                	mov    eax,edi
c000f3ac:	09 f0                	or     eax,esi
c000f3ae:	74 04                	je     c000f3b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f3b0:	eb b2                	jmp    c000f364 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f3b2:	66 90                	xchg   ax,ax
c000f3b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3b8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f3bb:	90                   	nop
c000f3bc:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f3c0:	89 c1                	mov    ecx,eax
c000f3c2:	89 c3                	mov    ebx,eax
c000f3c4:	c1 fb 1f             	sar    ebx,0x1f
c000f3c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3cf:	53                   	push   ebx
c000f3d0:	51                   	push   ecx
c000f3d1:	52                   	push   edx
c000f3d2:	50                   	push   eax
c000f3d3:	e8 1c 27 01 00       	call   c0021af4 <__umoddi3>
c000f3d8:	83 c4 10             	add    esp,0x10
c000f3db:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f3e0:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f3e4:	01 c8                	add    eax,ecx
c000f3e6:	8a 10                	mov    dl,BYTE PTR [eax]
c000f3e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3ec:	88 10                	mov    BYTE PTR [eax],dl
c000f3ee:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f3f2:	89 c2                	mov    edx,eax
c000f3f4:	c1 fa 1f             	sar    edx,0x1f
c000f3f7:	52                   	push   edx
c000f3f8:	50                   	push   eax
c000f3f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f3fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f401:	e8 ee 25 01 00       	call   c00219f4 <__udivdi3>
c000f406:	83 c4 10             	add    esp,0x10
c000f409:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f40d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f411:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f415:	80 f4 00             	xor    ah,0x0
c000f418:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f41c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f420:	80 f4 00             	xor    ah,0x0
c000f423:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f42b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f42f:	89 f8                	mov    eax,edi
c000f431:	09 f0                	or     eax,esi
c000f433:	74 03                	je     c000f438 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f435:	eb 85                	jmp    c000f3bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f437:	90                   	nop
c000f438:	90                   	nop
c000f439:	83 c4 5c             	add    esp,0x5c
c000f43c:	5b                   	pop    ebx
c000f43d:	5e                   	pop    esi
c000f43e:	5f                   	pop    edi
c000f43f:	5d                   	pop    ebp
c000f440:	c3                   	ret    
c000f441:	8d 76 00             	lea    esi,[esi+0x0]

c000f444 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f444:	55                   	push   ebp
c000f445:	57                   	push   edi
c000f446:	56                   	push   esi
c000f447:	53                   	push   ebx
c000f448:	83 ec 5c             	sub    esp,0x5c
c000f44b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f44f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f453:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f45b:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f45f:	bb cf 2d 02 c0       	mov    ebx,0xc0022dcf
c000f464:	bd 11 00 00 00       	mov    ebp,0x11
c000f469:	89 d0                	mov    eax,edx
c000f46b:	83 e0 01             	and    eax,0x1
c000f46e:	74 10                	je     c000f480 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f470:	8a 03                	mov    al,BYTE PTR [ebx]
c000f472:	88 02                	mov    BYTE PTR [edx],al
c000f474:	8d 52 01             	lea    edx,[edx+0x1]
c000f477:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f47a:	83 ed 01             	sub    ebp,0x1
c000f47d:	8d 76 00             	lea    esi,[esi+0x0]
c000f480:	89 d0                	mov    eax,edx
c000f482:	83 e0 02             	and    eax,0x2
c000f485:	74 11                	je     c000f498 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f487:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f48a:	66 89 02             	mov    WORD PTR [edx],ax
c000f48d:	8d 52 02             	lea    edx,[edx+0x2]
c000f490:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f493:	83 ed 02             	sub    ebp,0x2
c000f496:	66 90                	xchg   ax,ax
c000f498:	89 e8                	mov    eax,ebp
c000f49a:	c1 e8 02             	shr    eax,0x2
c000f49d:	fc                   	cld    
c000f49e:	89 d7                	mov    edi,edx
c000f4a0:	89 de                	mov    esi,ebx
c000f4a2:	89 c1                	mov    ecx,eax
c000f4a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f4a6:	89 f3                	mov    ebx,esi
c000f4a8:	89 fa                	mov    edx,edi
c000f4aa:	b9 00 00 00 00       	mov    ecx,0x0
c000f4af:	89 e8                	mov    eax,ebp
c000f4b1:	83 e0 02             	and    eax,0x2
c000f4b4:	74 0e                	je     c000f4c4 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f4b6:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f4ba:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f4be:	8d 41 02             	lea    eax,[ecx+0x2]
c000f4c1:	89 c1                	mov    ecx,eax
c000f4c3:	90                   	nop
c000f4c4:	89 e8                	mov    eax,ebp
c000f4c6:	83 e0 01             	and    eax,0x1
c000f4c9:	74 09                	je     c000f4d4 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f4cb:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f4ce:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4d4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f4d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f4dc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f4e1:	79 1d                	jns    c000f500 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f4e3:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f4e7:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f4ec:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f4f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f4f4:	8d 50 01             	lea    edx,[eax+0x1]
c000f4f7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f4fb:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f4fe:	66 90                	xchg   ax,ax
c000f500:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f504:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f508:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f50c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f510:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f515:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f519:	89 c2                	mov    edx,eax
c000f51b:	c1 fa 1f             	sar    edx,0x1f
c000f51e:	52                   	push   edx
c000f51f:	50                   	push   eax
c000f520:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f524:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f528:	e8 c7 24 01 00       	call   c00219f4 <__udivdi3>
c000f52d:	83 c4 10             	add    esp,0x10
c000f530:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f534:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f538:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f53c:	80 f4 00             	xor    ah,0x0
c000f53f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f543:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f547:	80 f4 00             	xor    ah,0x0
c000f54a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f54e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f552:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f556:	89 f8                	mov    eax,edi
c000f558:	09 f0                	or     eax,esi
c000f55a:	74 04                	je     c000f560 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f55c:	eb b2                	jmp    c000f510 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f55e:	66 90                	xchg   ax,ax
c000f560:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f564:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f567:	90                   	nop
c000f568:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f56c:	89 c1                	mov    ecx,eax
c000f56e:	89 c3                	mov    ebx,eax
c000f570:	c1 fb 1f             	sar    ebx,0x1f
c000f573:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f577:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f57b:	53                   	push   ebx
c000f57c:	51                   	push   ecx
c000f57d:	52                   	push   edx
c000f57e:	50                   	push   eax
c000f57f:	e8 f0 22 01 00       	call   c0021874 <__moddi3>
c000f584:	83 c4 10             	add    esp,0x10
c000f587:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f58c:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f590:	01 c8                	add    eax,ecx
c000f592:	8a 10                	mov    dl,BYTE PTR [eax]
c000f594:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f598:	88 10                	mov    BYTE PTR [eax],dl
c000f59a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f59e:	89 c2                	mov    edx,eax
c000f5a0:	c1 fa 1f             	sar    edx,0x1f
c000f5a3:	52                   	push   edx
c000f5a4:	50                   	push   eax
c000f5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f5a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f5ad:	e8 76 21 01 00       	call   c0021728 <__divdi3>
c000f5b2:	83 c4 10             	add    esp,0x10
c000f5b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f5b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f5bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f5c1:	80 f4 00             	xor    ah,0x0
c000f5c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f5c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f5cc:	80 f4 00             	xor    ah,0x0
c000f5cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f5d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f5d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f5db:	89 f8                	mov    eax,edi
c000f5dd:	09 f0                	or     eax,esi
c000f5df:	74 03                	je     c000f5e4 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000f5e1:	eb 85                	jmp    c000f568 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000f5e3:	90                   	nop
c000f5e4:	90                   	nop
c000f5e5:	83 c4 5c             	add    esp,0x5c
c000f5e8:	5b                   	pop    ebx
c000f5e9:	5e                   	pop    esi
c000f5ea:	5f                   	pop    edi
c000f5eb:	5d                   	pop    ebp
c000f5ec:	c3                   	ret    
c000f5ed:	8d 76 00             	lea    esi,[esi+0x0]

c000f5f0 <KeGetDigitsInNumber(long long)>:
c000f5f0:	56                   	push   esi
c000f5f1:	53                   	push   ebx
c000f5f2:	83 ec 24             	sub    esp,0x24
c000f5f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f5f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f5fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f605:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f60d:	8d 76 00             	lea    esi,[esi+0x0]
c000f610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f614:	80 f4 00             	xor    ah,0x0
c000f617:	89 c3                	mov    ebx,eax
c000f619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f61d:	80 f4 00             	xor    ah,0x0
c000f620:	89 c6                	mov    esi,eax
c000f622:	89 f0                	mov    eax,esi
c000f624:	09 d8                	or     eax,ebx
c000f626:	74 28                	je     c000f650 <KeGetDigitsInNumber(long long)+0x60>
c000f628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f62c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f630:	6a 00                	push   0x0
c000f632:	6a 0a                	push   0xa
c000f634:	52                   	push   edx
c000f635:	50                   	push   eax
c000f636:	e8 ed 20 01 00       	call   c0021728 <__divdi3>
c000f63b:	83 c4 10             	add    esp,0x10
c000f63e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f642:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f646:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f64b:	eb c3                	jmp    c000f610 <KeGetDigitsInNumber(long long)+0x20>
c000f64d:	8d 76 00             	lea    esi,[esi+0x0]
c000f650:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f654:	83 c4 24             	add    esp,0x24
c000f657:	5b                   	pop    ebx
c000f658:	5e                   	pop    esi
c000f659:	c3                   	ret    
c000f65a:	66 90                	xchg   ax,ax

c000f65c <KeItoa(unsigned long long, char*)>:
c000f65c:	83 ec 1c             	sub    esp,0x1c
c000f65f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f663:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f667:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f66b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f66f:	6a 0a                	push   0xa
c000f671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f675:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f679:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f67d:	e8 3a fc ff ff       	call   c000f2bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f682:	83 c4 10             	add    esp,0x10
c000f685:	90                   	nop
c000f686:	83 c4 1c             	add    esp,0x1c
c000f689:	c3                   	ret    
c000f68a:	66 90                	xchg   ax,ax

c000f68c <KeItoa(long long, char*)>:
c000f68c:	83 ec 1c             	sub    esp,0x1c
c000f68f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f693:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f697:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f69b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f69f:	6a 0a                	push   0xa
c000f6a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6ad:	e8 92 fd ff ff       	call   c000f444 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f6b2:	83 c4 10             	add    esp,0x10
c000f6b5:	90                   	nop
c000f6b6:	83 c4 1c             	add    esp,0x1c
c000f6b9:	c3                   	ret    
c000f6ba:	66 90                	xchg   ax,ax

c000f6bc <KeXtoa(unsigned long long, char*)>:
c000f6bc:	83 ec 1c             	sub    esp,0x1c
c000f6bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f6c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f6cf:	6a 10                	push   0x10
c000f6d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6dd:	e8 da fb ff ff       	call   c000f2bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f6e2:	83 c4 10             	add    esp,0x10
c000f6e5:	90                   	nop
c000f6e6:	83 c4 1c             	add    esp,0x1c
c000f6e9:	c3                   	ret    

c000f6ea <sbrk>:
c000f6ea:	55                   	push   ebp
c000f6eb:	57                   	push   edi
c000f6ec:	56                   	push   esi
c000f6ed:	53                   	push   ebx
c000f6ee:	83 ec 1c             	sub    esp,0x1c
c000f6f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f5:	85 c0                	test   eax,eax
c000f6f7:	74 61                	je     c000f75a <sbrk+0x70>
c000f6f9:	78 66                	js     c000f761 <sbrk+0x77>
c000f6fb:	8b 15 b0 67 02 c0    	mov    edx,DWORD PTR ds:0xc00267b0
c000f701:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f705:	05 ff 0f 00 00       	add    eax,0xfff
c000f70a:	89 c5                	mov    ebp,eax
c000f70c:	78 6b                	js     c000f779 <sbrk+0x8f>
c000f70e:	c1 fd 0c             	sar    ebp,0xc
c000f711:	bb 00 00 00 00       	mov    ebx,0x0
c000f716:	8b 35 90 c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c290
c000f71c:	8b 3d b0 67 02 c0    	mov    edi,DWORD PTR ds:0xc00267b0
c000f722:	e8 c1 07 00 00       	call   c000fee8 <Phys::allocatePage()>
c000f727:	68 01 04 00 00       	push   0x401
c000f72c:	57                   	push   edi
c000f72d:	50                   	push   eax
c000f72e:	56                   	push   esi
c000f72f:	e8 d6 42 00 00       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f734:	81 05 b0 67 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00267b0,0x1000
c000f73e:	83 c3 01             	add    ebx,0x1
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	39 dd                	cmp    ebp,ebx
c000f746:	75 ce                	jne    c000f716 <sbrk+0x2c>
c000f748:	0f 20 d8             	mov    eax,cr3
c000f74b:	0f 22 d8             	mov    cr3,eax
c000f74e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f752:	83 c4 1c             	add    esp,0x1c
c000f755:	5b                   	pop    ebx
c000f756:	5e                   	pop    esi
c000f757:	5f                   	pop    edi
c000f758:	5d                   	pop    ebp
c000f759:	c3                   	ret    
c000f75a:	a1 b0 67 02 c0       	mov    eax,ds:0xc00267b0
c000f75f:	eb f1                	jmp    c000f752 <sbrk+0x68>
c000f761:	83 ec 08             	sub    esp,0x8
c000f764:	50                   	push   eax
c000f765:	68 b0 3f 02 c0       	push   0xc0023fb0
c000f76a:	e8 0d 78 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000f76f:	83 c4 10             	add    esp,0x10
c000f772:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f777:	eb d9                	jmp    c000f752 <sbrk+0x68>
c000f779:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000f77f:	eb 8d                	jmp    c000f70e <sbrk+0x24>

c000f781 <sbrk_thunk>:
c000f781:	83 ec 0c             	sub    esp,0xc
c000f784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f788:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f78d:	7f 10                	jg     c000f79f <sbrk_thunk+0x1e>
c000f78f:	83 ec 0c             	sub    esp,0xc
c000f792:	50                   	push   eax
c000f793:	e8 52 ff ff ff       	call   c000f6ea <sbrk>
c000f798:	83 c4 10             	add    esp,0x10
c000f79b:	83 c4 0c             	add    esp,0xc
c000f79e:	c3                   	ret    
c000f79f:	83 ec 08             	sub    esp,0x8
c000f7a2:	50                   	push   eax
c000f7a3:	68 e0 3f 02 c0       	push   0xc0023fe0
c000f7a8:	e8 cf 77 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000f7ad:	83 c4 10             	add    esp,0x10
c000f7b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7b5:	eb e4                	jmp    c000f79b <sbrk_thunk+0x1a>

c000f7b7 <mmap>:
c000f7b7:	55                   	push   ebp
c000f7b8:	57                   	push   edi
c000f7b9:	56                   	push   esi
c000f7ba:	53                   	push   ebx
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f7c8:	89 fb                	mov    ebx,edi
c000f7ca:	c1 eb 0c             	shr    ebx,0xc
c000f7cd:	53                   	push   ebx
c000f7ce:	e8 54 3b 00 00       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c000f7d3:	89 c5                	mov    ebp,eax
c000f7d5:	83 c4 10             	add    esp,0x10
c000f7d8:	85 db                	test   ebx,ebx
c000f7da:	7e 2f                	jle    c000f80b <mmap+0x54>
c000f7dc:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f7e2:	01 c7                	add    edi,eax
c000f7e4:	89 c3                	mov    ebx,eax
c000f7e6:	8b 35 90 c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c290
c000f7ec:	e8 f7 06 00 00       	call   c000fee8 <Phys::allocatePage()>
c000f7f1:	68 01 04 00 00       	push   0x401
c000f7f6:	53                   	push   ebx
c000f7f7:	50                   	push   eax
c000f7f8:	56                   	push   esi
c000f7f9:	e8 0c 42 00 00       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f804:	83 c4 10             	add    esp,0x10
c000f807:	39 fb                	cmp    ebx,edi
c000f809:	75 db                	jne    c000f7e6 <mmap+0x2f>
c000f80b:	89 e8                	mov    eax,ebp
c000f80d:	83 c4 0c             	add    esp,0xc
c000f810:	5b                   	pop    ebx
c000f811:	5e                   	pop    esi
c000f812:	5f                   	pop    edi
c000f813:	5d                   	pop    ebp
c000f814:	c3                   	ret    

c000f815 <munmap>:
c000f815:	83 ec 18             	sub    esp,0x18
c000f818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f81c:	e8 0e 3e 00 00       	call   c001362f <Virt::freeKernelVirtualPages(unsigned long)>
c000f821:	b8 00 00 00 00       	mov    eax,0x0
c000f826:	83 c4 1c             	add    esp,0x1c
c000f829:	c3                   	ret    

c000f82a <liballoc_lock()>:
c000f82a:	fa                   	cli    
c000f82b:	83 05 70 ca 02 c0 01 	add    DWORD PTR ds:0xc002ca70,0x1
c000f832:	b8 00 00 00 00       	mov    eax,0x0
c000f837:	c3                   	ret    

c000f838 <liballoc_unlock()>:
c000f838:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f840:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000f847:	75 01                	jne    c000f84a <liballoc_unlock()+0x12>
c000f849:	fb                   	sti    
c000f84a:	b8 00 00 00 00       	mov    eax,0x0
c000f84f:	c3                   	ret    

c000f850 <liballoc_alloc(int)>:
c000f850:	83 ec 10             	sub    esp,0x10
c000f853:	6a 01                	push   0x1
c000f855:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f859:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000f85f:	e8 aa 42 00 00       	call   c0013b0e <VAS::allocatePages(int, int)>
c000f864:	83 c4 1c             	add    esp,0x1c
c000f867:	c3                   	ret    

c000f868 <liballoc_free(void*, int)>:
c000f868:	83 ec 14             	sub    esp,0x14
c000f86b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f86f:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000f875:	e8 f2 3e 00 00       	call   c001376c <VAS::freeAllocatedPages(unsigned long)>
c000f87a:	b8 00 00 00 00       	mov    eax,0x0
c000f87f:	83 c4 1c             	add    esp,0x1c
c000f882:	c3                   	ret    

c000f883 <realloc>:
c000f883:	83 ec 14             	sub    esp,0x14
c000f886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f88a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f88e:	e8 c4 1e ff ff       	call   c0001757 <dlrealloc>
c000f893:	83 c4 1c             	add    esp,0x1c
c000f896:	c3                   	ret    

c000f897 <malloc>:
c000f897:	83 ec 18             	sub    esp,0x18
c000f89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f89e:	e8 77 19 ff ff       	call   c000121a <dlmalloc>
c000f8a3:	83 c4 1c             	add    esp,0x1c
c000f8a6:	c3                   	ret    

c000f8a7 <free>:
c000f8a7:	83 ec 18             	sub    esp,0x18
c000f8aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8ae:	e8 a0 14 ff ff       	call   c0000d53 <dlfree>
c000f8b3:	83 c4 1c             	add    esp,0x1c
c000f8b6:	c3                   	ret    

c000f8b7 <rfree>:
c000f8b7:	83 ec 18             	sub    esp,0x18
c000f8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8be:	e8 90 14 ff ff       	call   c0000d53 <dlfree>
c000f8c3:	83 c4 1c             	add    esp,0x1c
c000f8c6:	c3                   	ret    

c000f8c7 <calloc>:
c000f8c7:	56                   	push   esi
c000f8c8:	53                   	push   ebx
c000f8c9:	83 ec 10             	sub    esp,0x10
c000f8cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8d0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8d5:	53                   	push   ebx
c000f8d6:	e8 bc ff ff ff       	call   c000f897 <malloc>
c000f8db:	89 c6                	mov    esi,eax
c000f8dd:	83 c4 0c             	add    esp,0xc
c000f8e0:	53                   	push   ebx
c000f8e1:	6a 00                	push   0x0
c000f8e3:	50                   	push   eax
c000f8e4:	e8 07 0c ff ff       	call   c00004f0 <memset>
c000f8e9:	89 f0                	mov    eax,esi
c000f8eb:	83 c4 14             	add    esp,0x14
c000f8ee:	5b                   	pop    ebx
c000f8ef:	5e                   	pop    esi
c000f8f0:	c3                   	ret    
c000f8f1:	66 90                	xchg   ax,ax
c000f8f3:	90                   	nop

c000f8f4 <KeMailboxTryPost(Mailbox*, void*)>:
c000f8f4:	83 ec 10             	sub    esp,0x10
c000f8f7:	fa                   	cli    
c000f8f8:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f8fd:	83 c0 01             	add    eax,0x1
c000f900:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000f905:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f90a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f90e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f911:	85 c0                	test   eax,eax
c000f913:	75 23                	jne    c000f938 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f915:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f919:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f91d:	89 10                	mov    DWORD PTR [eax],edx
c000f91f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f923:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f926:	8d 50 01             	lea    edx,[eax+0x1]
c000f929:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f92d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f930:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f935:	8d 76 00             	lea    esi,[esi+0x0]
c000f938:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f940:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f945:	85 c0                	test   eax,eax
c000f947:	75 03                	jne    c000f94c <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f949:	fb                   	sti    
c000f94a:	66 90                	xchg   ax,ax
c000f94c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f950:	83 c4 10             	add    esp,0x10
c000f953:	c3                   	ret    

c000f954 <KeMailboxTryGet(Mailbox*, void**)>:
c000f954:	83 ec 10             	sub    esp,0x10
c000f957:	fa                   	cli    
c000f958:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f95d:	83 c0 01             	add    eax,0x1
c000f960:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000f965:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f96a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f96e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f971:	83 f8 01             	cmp    eax,0x1
c000f974:	75 22                	jne    c000f998 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f976:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f97a:	8b 10                	mov    edx,DWORD PTR [eax]
c000f97c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f980:	89 10                	mov    DWORD PTR [eax],edx
c000f982:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f989:	8d 50 ff             	lea    edx,[eax-0x1]
c000f98c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f990:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f993:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f998:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f9a0:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f9a5:	85 c0                	test   eax,eax
c000f9a7:	75 03                	jne    c000f9ac <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f9a9:	fb                   	sti    
c000f9aa:	66 90                	xchg   ax,ax
c000f9ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f9b0:	83 c4 10             	add    esp,0x10
c000f9b3:	c3                   	ret    

c000f9b4 <KeMailboxCreate()>:
c000f9b4:	83 ec 1c             	sub    esp,0x1c
c000f9b7:	83 ec 0c             	sub    esp,0xc
c000f9ba:	6a 08                	push   0x8
c000f9bc:	e8 d6 fe ff ff       	call   c000f897 <malloc>
c000f9c1:	83 c4 10             	add    esp,0x10
c000f9c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f9d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f9dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9e1:	83 c4 1c             	add    esp,0x1c
c000f9e4:	c3                   	ret    
c000f9e5:	8d 76 00             	lea    esi,[esi+0x0]

c000f9e8 <KeMailboxPost(Mailbox*, void*)>:
c000f9e8:	83 ec 1c             	sub    esp,0x1c
c000f9eb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f9f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9f8:	e8 f7 fe ff ff       	call   c000f8f4 <KeMailboxTryPost(Mailbox*, void*)>
c000f9fd:	83 c4 08             	add    esp,0x8
c000fa00:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fa04:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fa08:	83 f0 01             	xor    eax,0x1
c000fa0b:	0f b6 c0             	movzx  eax,al
c000fa0e:	85 c0                	test   eax,eax
c000fa10:	74 26                	je     c000fa38 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fa12:	fa                   	cli    
c000fa13:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000fa18:	83 c0 01             	add    eax,0x1
c000fa1b:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000fa20:	e8 eb 73 00 00       	call   c0016e10 <schedule()>
c000fa25:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000fa2d:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000fa32:	85 c0                	test   eax,eax
c000fa34:	75 02                	jne    c000fa38 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fa36:	fb                   	sti    
c000fa37:	90                   	nop
c000fa38:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fa3d:	85 c0                	test   eax,eax
c000fa3f:	75 03                	jne    c000fa44 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fa41:	eb ad                	jmp    c000f9f0 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fa43:	90                   	nop
c000fa44:	90                   	nop
c000fa45:	83 c4 1c             	add    esp,0x1c
c000fa48:	c3                   	ret    
c000fa49:	8d 76 00             	lea    esi,[esi+0x0]

c000fa4c <KeMailboxGet(Mailbox*, void**)>:
c000fa4c:	83 ec 1c             	sub    esp,0x1c
c000fa4f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fa54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fa58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fa5c:	e8 f3 fe ff ff       	call   c000f954 <KeMailboxTryGet(Mailbox*, void**)>
c000fa61:	83 c4 08             	add    esp,0x8
c000fa64:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fa68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fa6c:	83 f0 01             	xor    eax,0x1
c000fa6f:	0f b6 c0             	movzx  eax,al
c000fa72:	85 c0                	test   eax,eax
c000fa74:	74 26                	je     c000fa9c <KeMailboxGet(Mailbox*, void**)+0x50>
c000fa76:	fa                   	cli    
c000fa77:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000fa7c:	83 c0 01             	add    eax,0x1
c000fa7f:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000fa84:	e8 87 73 00 00       	call   c0016e10 <schedule()>
c000fa89:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000fa91:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000fa96:	85 c0                	test   eax,eax
c000fa98:	75 02                	jne    c000fa9c <KeMailboxGet(Mailbox*, void**)+0x50>
c000fa9a:	fb                   	sti    
c000fa9b:	90                   	nop
c000fa9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000faa1:	85 c0                	test   eax,eax
c000faa3:	75 03                	jne    c000faa8 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000faa5:	eb ad                	jmp    c000fa54 <KeMailboxGet(Mailbox*, void**)+0x8>
c000faa7:	90                   	nop
c000faa8:	90                   	nop
c000faa9:	83 c4 1c             	add    esp,0x1c
c000faac:	c3                   	ret    
c000faad:	8d 76 00             	lea    esi,[esi+0x0]

c000fab0 <KeMailboxDestroy(Mailbox*)>:
c000fab0:	83 ec 0c             	sub    esp,0xc
c000fab3:	83 ec 0c             	sub    esp,0xc
c000fab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000faba:	e8 e8 fd ff ff       	call   c000f8a7 <free>
c000fabf:	83 c4 10             	add    esp,0x10
c000fac2:	90                   	nop
c000fac3:	83 c4 0c             	add    esp,0xc
c000fac6:	c3                   	ret    

c000fac7 <KeFirstTask()>:
c000fac7:	53                   	push   ebx
c000fac8:	83 ec 08             	sub    esp,0x8
c000facb:	fb                   	sti    
c000facc:	e8 cc a0 00 00       	call   c0019b9d <HalEnableNMI()>
c000fad1:	83 ec 0c             	sub    esp,0xc
c000fad4:	68 ef 3f 02 c0       	push   0xc0023fef
c000fad9:	e8 27 d8 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fade:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000fae5:	e8 ad fd ff ff       	call   c000f897 <malloc>
c000faea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000faf1:	89 c3                	mov    ebx,eax
c000faf3:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000faf8:	50                   	push   eax
c000faf9:	68 08 40 02 c0       	push   0xc0024008
c000fafe:	6a 01                	push   0x1
c000fb00:	53                   	push   ebx
c000fb01:	e8 0a 6e 00 00       	call   c0016910 <Process::Process(bool, char const*, Process*, char**)>
c000fb06:	83 c4 20             	add    esp,0x20
c000fb09:	68 ff 00 00 00       	push   0xff
c000fb0e:	6a 00                	push   0x0
c000fb10:	68 d7 ea 00 c0       	push   0xc000ead7
c000fb15:	53                   	push   ebx
c000fb16:	e8 35 70 00 00       	call   c0016b50 <Process::createThread(void (*)(void*), void*, int)>
c000fb1b:	8b 15 98 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca98
c000fb21:	6a 7a                	push   0x7a
c000fb23:	6a 00                	push   0x0
c000fb25:	68 f8 74 01 c0       	push   0xc00174f8
c000fb2a:	52                   	push   edx
c000fb2b:	e8 20 70 00 00       	call   c0016b50 <Process::createThread(void (*)(void*), void*, int)>
c000fb30:	83 c4 14             	add    esp,0x14
c000fb33:	a3 50 ca 02 c0       	mov    ds:0xc002ca50,eax
c000fb38:	68 90 40 02 c0       	push   0xc0024090
c000fb3d:	e8 c3 d7 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fb42:	c6 05 0d c1 02 c0 01 	mov    BYTE PTR ds:0xc002c10d,0x1
c000fb49:	e8 8f 0c 00 00       	call   c00107dd <KeInitRand()>
c000fb4e:	e8 77 7d 00 00       	call   c00178ca <Vm::initialise8086()>
c000fb53:	e8 f0 82 ff ff       	call   c0007e48 <Fs::initVFS()>
c000fb58:	c7 04 24 51 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c51
c000fb5f:	e8 a1 d7 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fb64:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c000fb69:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000fb6f:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb71:	6a 00                	push   0x0
c000fb73:	6a 00                	push   0x0
c000fb75:	6a 00                	push   0x0
c000fb77:	50                   	push   eax
c000fb78:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fb7b:	83 c4 14             	add    esp,0x14
c000fb7e:	68 90 40 02 c0       	push   0xc0024090
c000fb83:	e8 7d d7 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fb88:	e8 a0 7a ff ff       	call   c000762d <KeInitialiseSymlinks()>
c000fb8d:	e8 b8 ea ff ff       	call   c000e64a <KeLoadSystemEnv()>
c000fb92:	e8 8b 0a 00 00       	call   c0010622 <KeSetupPowerManager()>
c000fb97:	c7 04 24 15 40 02 c0 	mov    DWORD PTR [esp],0xc0024015
c000fb9e:	e8 62 d7 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fba3:	59                   	pop    ecx
c000fba4:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c000fbaa:	58                   	pop    eax
c000fbab:	6a 01                	push   0x1
c000fbad:	68 26 40 02 c0       	push   0xc0024026
c000fbb2:	e8 b3 66 00 00       	call   c001626a <Thr::loadDLL(char const*, bool)>
c000fbb7:	5a                   	pop    edx
c000fbb8:	59                   	pop    ecx
c000fbb9:	53                   	push   ebx
c000fbba:	50                   	push   eax
c000fbbb:	e8 fc 68 00 00       	call   c00164bc <Thr::executeDLL(unsigned long, void*)>
c000fbc0:	83 c4 10             	add    esp,0x10
c000fbc3:	83 ec 0c             	sub    esp,0xc
c000fbc6:	6a 02                	push   0x2
c000fbc8:	e8 03 73 00 00       	call   c0016ed0 <blockTask(TaskState)>
c000fbcd:	83 c4 10             	add    esp,0x10
c000fbd0:	eb f1                	jmp    c000fbc3 <KeFirstTask()+0xfc>

c000fbd2 <KeEntryPoint>:
c000fbd2:	57                   	push   edi
c000fbd3:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbd8:	56                   	push   esi
c000fbd9:	31 f6                	xor    esi,esi
c000fbdb:	53                   	push   ebx
c000fbdc:	83 ec 20             	sub    esp,0x20
c000fbdf:	e8 e4 d6 ff ff       	call   c000d2c8 <KeInitialiseBootConfigurationFlags()>
c000fbe4:	89 f0                	mov    eax,esi
c000fbe6:	89 fa                	mov    edx,edi
c000fbe8:	ee                   	out    dx,al
c000fbe9:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fbee:	b0 80                	mov    al,0x80
c000fbf0:	89 da                	mov    edx,ebx
c000fbf2:	ee                   	out    dx,al
c000fbf3:	b1 03                	mov    cl,0x3
c000fbf5:	ba f8 03 00 00       	mov    edx,0x3f8
c000fbfa:	88 c8                	mov    al,cl
c000fbfc:	ee                   	out    dx,al
c000fbfd:	89 f0                	mov    eax,esi
c000fbff:	89 fa                	mov    edx,edi
c000fc01:	ee                   	out    dx,al
c000fc02:	88 c8                	mov    al,cl
c000fc04:	89 da                	mov    edx,ebx
c000fc06:	ee                   	out    dx,al
c000fc07:	b0 c7                	mov    al,0xc7
c000fc09:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc0e:	ee                   	out    dx,al
c000fc0f:	b0 0b                	mov    al,0xb
c000fc11:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc16:	ee                   	out    dx,al
c000fc17:	83 ec 0c             	sub    esp,0xc
c000fc1a:	68 42 40 02 c0       	push   0xc0024042
c000fc1f:	e8 58 73 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000fc24:	e8 ad d6 ff ff       	call   c000d2d6 <KeDisplaySplashScreen()>
c000fc29:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc2e:	05 ff 0f 00 00       	add    eax,0xfff
c000fc33:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc38:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc3b:	e8 2c 04 00 00       	call   c001006c <Phys::physicalMemorySetup(unsigned int)>
c000fc40:	e8 c0 38 00 00       	call   c0013505 <Virt::virtualMemorySetup()>
c000fc45:	e8 dc d5 ff ff       	call   c000d226 <KeInitialiseAtexit()>
c000fc4a:	58                   	pop    eax
c000fc4b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fc4f:	53                   	push   ebx
c000fc50:	e8 97 3b 00 00       	call   c00137ec <VAS::VAS()>
c000fc55:	89 1d 90 c2 02 c0    	mov    DWORD PTR ds:0xc002c290,ebx
c000fc5b:	e8 ae 1f 01 00       	call   c0021c0e <_init>
c000fc60:	c7 04 24 59 40 02 c0 	mov    DWORD PTR [esp],0xc0024059
c000fc67:	e8 99 d6 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fc6c:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000fc73:	e8 1f fc ff ff       	call   c000f897 <malloc>
c000fc78:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc7b:	89 c6                	mov    esi,eax
c000fc7d:	e8 0a e4 ff ff       	call   c000e08c <Computer::Computer()>
c000fc82:	8b 15 90 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c290
c000fc88:	89 35 08 c1 02 c0    	mov    DWORD PTR ds:0xc002c108,esi
c000fc8e:	52                   	push   edx
c000fc8f:	6a 00                	push   0x0
c000fc91:	6a 00                	push   0x0
c000fc93:	56                   	push   esi
c000fc94:	e8 37 e4 ff ff       	call   c000e0d0 <Computer::open(int, int, void*)>
c000fc99:	83 c4 14             	add    esp,0x14
c000fc9c:	68 b4 40 02 c0       	push   0xc00240b4
c000fca1:	e8 5f d6 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fca6:	e8 52 a6 00 00       	call   c001a2fd <HalInitialiseCoprocessor()>
c000fcab:	c7 04 24 73 40 02 c0 	mov    DWORD PTR [esp],0xc0024073
c000fcb2:	e8 4e d6 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fcb7:	c7 04 24 c7 fa 00 c0 	mov    DWORD PTR [esp],0xc000fac7
c000fcbe:	e8 05 70 00 00       	call   c0016cc8 <setupMultitasking(void (*)())>
c000fcc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcc6:	e8 d7 3b 00 00       	call   c00138a2 <VAS::~VAS()>
c000fccb:	83 c4 30             	add    esp,0x30
c000fcce:	5b                   	pop    ebx
c000fccf:	5e                   	pop    esi
c000fcd0:	5f                   	pop    edi
c000fcd1:	c3                   	ret    
c000fcd2:	66 90                	xchg   ax,ax

c000fcd4 <Mutex::Mutex()>:
c000fcd4:	83 ec 0c             	sub    esp,0xc
c000fcd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcdb:	83 ec 08             	sub    esp,0x8
c000fcde:	6a 01                	push   0x1
c000fce0:	50                   	push   eax
c000fce1:	e8 96 0d 00 00       	call   c0010a7c <Semaphore::Semaphore(int)>
c000fce6:	83 c4 10             	add    esp,0x10
c000fce9:	90                   	nop
c000fcea:	83 c4 0c             	add    esp,0xc
c000fced:	c3                   	ret    

c000fcee <KeIsKernelInPanic()>:
c000fcee:	a0 64 c1 02 c0       	mov    al,ds:0xc002c164
c000fcf3:	c3                   	ret    

c000fcf4 <KePanic(char const*)>:
c000fcf4:	c6 05 64 c1 02 c0 01 	mov    BYTE PTR ds:0xc002c164,0x1
c000fcfb:	e9 81 a6 00 00       	jmp    c001a381 <HalPanic(char const*)>

c000fd00 <Phys::allocateDMA(unsigned long)>:
c000fd00:	55                   	push   ebp
c000fd01:	31 ed                	xor    ebp,ebp
c000fd03:	57                   	push   edi
c000fd04:	56                   	push   esi
c000fd05:	53                   	push   ebx
c000fd06:	31 db                	xor    ebx,ebx
c000fd08:	83 ec 1c             	sub    esp,0x1c
c000fd0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd0f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fd17:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fd1d:	31 c0                	xor    eax,eax
c000fd1f:	c1 ef 0c             	shr    edi,0xc
c000fd22:	eb 1b                	jmp    c000fd3f <Phys::allocateDMA(unsigned long)+0x3f>
c000fd24:	85 c0                	test   eax,eax
c000fd26:	75 06                	jne    c000fd2e <Phys::allocateDMA(unsigned long)+0x2e>
c000fd28:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd2c:	89 dd                	mov    ebp,ebx
c000fd2e:	8d 70 01             	lea    esi,[eax+0x1]
c000fd31:	39 f7                	cmp    edi,esi
c000fd33:	74 37                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x6c>
c000fd35:	89 f0                	mov    eax,esi
c000fd37:	83 c3 01             	add    ebx,0x1
c000fd3a:	83 fb 0f             	cmp    ebx,0xf
c000fd3d:	7f 13                	jg     c000fd52 <Phys::allocateDMA(unsigned long)+0x52>
c000fd3f:	80 bb 80 c1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd3e80],0x0
c000fd46:	74 dc                	je     c000fd24 <Phys::allocateDMA(unsigned long)+0x24>
c000fd48:	31 c0                	xor    eax,eax
c000fd4a:	83 c3 01             	add    ebx,0x1
c000fd4d:	83 fb 0f             	cmp    ebx,0xf
c000fd50:	7e ed                	jle    c000fd3f <Phys::allocateDMA(unsigned long)+0x3f>
c000fd52:	83 ec 0c             	sub    esp,0xc
c000fd55:	68 44 41 02 c0       	push   0xc0024144
c000fd5a:	e8 95 ff ff ff       	call   c000fcf4 <KePanic(char const*)>
c000fd5f:	83 c4 10             	add    esp,0x10
c000fd62:	31 c0                	xor    eax,eax
c000fd64:	83 c4 1c             	add    esp,0x1c
c000fd67:	5b                   	pop    ebx
c000fd68:	5e                   	pop    esi
c000fd69:	5f                   	pop    edi
c000fd6a:	5d                   	pop    ebp
c000fd6b:	c3                   	ret    
c000fd6c:	89 e9                	mov    ecx,ebp
c000fd6e:	c1 f9 04             	sar    ecx,0x4
c000fd71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fd75:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000fd79:	89 ca                	mov    edx,ecx
c000fd7b:	83 ea 01             	sub    edx,0x1
c000fd7e:	79 03                	jns    c000fd83 <Phys::allocateDMA(unsigned long)+0x83>
c000fd80:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fd83:	c1 fa 04             	sar    edx,0x4
c000fd86:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000fd8a:	74 08                	je     c000fd94 <Phys::allocateDMA(unsigned long)+0x94>
c000fd8c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000fd90:	31 c0                	xor    eax,eax
c000fd92:	eb b6                	jmp    c000fd4a <Phys::allocateDMA(unsigned long)+0x4a>
c000fd94:	85 f6                	test   esi,esi
c000fd96:	74 17                	je     c000fdaf <Phys::allocateDMA(unsigned long)+0xaf>
c000fd98:	8d 95 80 c1 02 c0    	lea    edx,[ebp-0x3ffd3e80]
c000fd9e:	8d 84 05 81 c1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd3e7f]
c000fda5:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fda8:	83 c2 01             	add    edx,0x1
c000fdab:	39 d0                	cmp    eax,edx
c000fdad:	75 f6                	jne    c000fda5 <Phys::allocateDMA(unsigned long)+0xa5>
c000fdaf:	a1 78 c1 02 c0       	mov    eax,ds:0xc002c178
c000fdb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fdb8:	01 f8                	add    eax,edi
c000fdba:	85 d2                	test   edx,edx
c000fdbc:	a3 78 c1 02 c0       	mov    ds:0xc002c178,eax
c000fdc1:	74 17                	je     c000fdda <Phys::allocateDMA(unsigned long)+0xda>
c000fdc3:	83 ec 0c             	sub    esp,0xc
c000fdc6:	68 d8 40 02 c0       	push   0xc00240d8
c000fdcb:	e8 24 ff ff ff       	call   c000fcf4 <KePanic(char const*)>
c000fdd0:	83 c4 10             	add    esp,0x10
c000fdd3:	89 f0                	mov    eax,esi
c000fdd5:	e9 5d ff ff ff       	jmp    c000fd37 <Phys::allocateDMA(unsigned long)+0x37>
c000fdda:	c1 e5 0c             	shl    ebp,0xc
c000fddd:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000fde3:	e9 7c ff ff ff       	jmp    c000fd64 <Phys::allocateDMA(unsigned long)+0x64>

c000fde8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fde8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdec:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000fdf2:	a1 78 c1 02 c0       	mov    eax,ds:0xc002c178
c000fdf7:	c1 ea 0c             	shr    edx,0xc
c000fdfa:	29 d0                	sub    eax,edx
c000fdfc:	a3 78 c1 02 c0       	mov    ds:0xc002c178,eax
c000fe01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe05:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000fe0a:	c1 e8 0c             	shr    eax,0xc
c000fe0d:	85 d2                	test   edx,edx
c000fe0f:	74 11                	je     c000fe22 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000fe11:	05 80 c1 02 c0       	add    eax,0xc002c180
c000fe16:	01 c2                	add    edx,eax
c000fe18:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe1b:	83 c0 01             	add    eax,0x1
c000fe1e:	39 d0                	cmp    eax,edx
c000fe20:	75 f6                	jne    c000fe18 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000fe22:	c3                   	ret    

c000fe23 <Phys::setPageState(unsigned long, bool)>:
c000fe23:	57                   	push   edi
c000fe24:	56                   	push   esi
c000fe25:	8b 35 b4 67 02 c0    	mov    esi,DWORD PTR ds:0xc00267b4
c000fe2b:	53                   	push   ebx
c000fe2c:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000fe31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe35:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fe39:	0f b6 c0             	movzx  eax,al
c000fe3c:	89 ca                	mov    edx,ecx
c000fe3e:	83 e1 07             	and    ecx,0x7
c000fe41:	c1 ea 03             	shr    edx,0x3
c000fe44:	d3 c3                	rol    ebx,cl
c000fe46:	01 d6                	add    esi,edx
c000fe48:	d3 e0                	shl    eax,cl
c000fe4a:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000fe4d:	21 fb                	and    ebx,edi
c000fe4f:	88 1e                	mov    BYTE PTR [esi],bl
c000fe51:	8b 1d b4 67 02 c0    	mov    ebx,DWORD PTR ds:0xc00267b4
c000fe57:	01 da                	add    edx,ebx
c000fe59:	8a 0a                	mov    cl,BYTE PTR [edx]
c000fe5b:	09 c8                	or     eax,ecx
c000fe5d:	88 02                	mov    BYTE PTR [edx],al
c000fe5f:	5b                   	pop    ebx
c000fe60:	5e                   	pop    esi
c000fe61:	5f                   	pop    edi
c000fe62:	c3                   	ret    

c000fe63 <Phys::getPageState(unsigned long)>:
c000fe63:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe67:	8b 15 b4 67 02 c0    	mov    edx,DWORD PTR ds:0xc00267b4
c000fe6d:	89 c8                	mov    eax,ecx
c000fe6f:	83 e1 07             	and    ecx,0x7
c000fe72:	c1 e8 03             	shr    eax,0x3
c000fe75:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe79:	d3 f8                	sar    eax,cl
c000fe7b:	83 e0 01             	and    eax,0x1
c000fe7e:	c3                   	ret    

c000fe7f <Phys::freePage(unsigned long)>:
c000fe7f:	53                   	push   ebx
c000fe80:	83 ec 08             	sub    esp,0x8
c000fe83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe87:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000fe8d:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000fe93:	76 41                	jbe    c000fed6 <Phys::freePage(unsigned long)+0x57>
c000fe95:	c1 e8 0c             	shr    eax,0xc
c000fe98:	50                   	push   eax
c000fe99:	89 c3                	mov    ebx,eax
c000fe9b:	e8 c3 ff ff ff       	call   c000fe63 <Phys::getPageState(unsigned long)>
c000fea0:	5a                   	pop    edx
c000fea1:	84 c0                	test   al,al
c000fea3:	74 20                	je     c000fec5 <Phys::freePage(unsigned long)+0x46>
c000fea5:	83 ec 08             	sub    esp,0x8
c000fea8:	a1 78 c1 02 c0       	mov    eax,ds:0xc002c178
c000fead:	6a 00                	push   0x0
c000feaf:	83 e8 01             	sub    eax,0x1
c000feb2:	53                   	push   ebx
c000feb3:	a3 78 c1 02 c0       	mov    ds:0xc002c178,eax
c000feb8:	e8 66 ff ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	83 c4 08             	add    esp,0x8
c000fec3:	5b                   	pop    ebx
c000fec4:	c3                   	ret    
c000fec5:	c7 44 24 10 ea 40 02 c0 	mov    DWORD PTR [esp+0x10],0xc00240ea
c000fecd:	83 c4 08             	add    esp,0x8
c000fed0:	5b                   	pop    ebx
c000fed1:	e9 1e fe ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c000fed6:	68 00 10 00 00       	push   0x1000
c000fedb:	50                   	push   eax
c000fedc:	e8 07 ff ff ff       	call   c000fde8 <Phys::freeDMA(unsigned long, unsigned long)>
c000fee1:	59                   	pop    ecx
c000fee2:	5b                   	pop    ebx
c000fee3:	83 c4 08             	add    esp,0x8
c000fee6:	5b                   	pop    ebx
c000fee7:	c3                   	ret    

c000fee8 <Phys::allocatePage()>:
c000fee8:	56                   	push   esi
c000fee9:	53                   	push   ebx
c000feea:	83 ec 14             	sub    esp,0x14
c000feed:	8b 35 6c c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c16c
c000fef3:	89 f3                	mov    ebx,esi
c000fef5:	eb 0a                	jmp    c000ff01 <Phys::allocatePage()+0x19>
c000fef7:	89 1d 6c c1 02 c0    	mov    DWORD PTR ds:0xc002c16c,ebx
c000fefd:	39 de                	cmp    esi,ebx
c000feff:	74 26                	je     c000ff27 <Phys::allocatePage()+0x3f>
c000ff01:	53                   	push   ebx
c000ff02:	e8 5c ff ff ff       	call   c000fe63 <Phys::getPageState(unsigned long)>
c000ff07:	59                   	pop    ecx
c000ff08:	84 c0                	test   al,al
c000ff0a:	74 5a                	je     c000ff66 <Phys::allocatePage()+0x7e>
c000ff0c:	83 c3 01             	add    ebx,0x1
c000ff0f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff15:	75 e0                	jne    c000fef7 <Phys::allocatePage()+0xf>
c000ff17:	31 db                	xor    ebx,ebx
c000ff19:	c7 05 6c c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c16c,0x0
c000ff23:	39 de                	cmp    esi,ebx
c000ff25:	75 da                	jne    c000ff01 <Phys::allocatePage()+0x19>
c000ff27:	83 ec 0c             	sub    esp,0xc
c000ff2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff32:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c000ff38:	51                   	push   ecx
c000ff39:	e8 84 44 00 00       	call   c00143c2 <VAS::scanForEviction()>
c000ff3e:	83 c4 10             	add    esp,0x10
c000ff41:	85 c0                	test   eax,eax
c000ff43:	75 48                	jne    c000ff8d <Phys::allocatePage()+0xa5>
c000ff45:	83 ec 0c             	sub    esp,0xc
c000ff48:	68 6c 41 02 c0       	push   0xc002416c
c000ff4d:	e8 a2 fd ff ff       	call   c000fcf4 <KePanic(char const*)>
c000ff52:	83 c4 10             	add    esp,0x10
c000ff55:	8b 1d 6c c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c16c
c000ff5b:	53                   	push   ebx
c000ff5c:	e8 02 ff ff ff       	call   c000fe63 <Phys::getPageState(unsigned long)>
c000ff61:	59                   	pop    ecx
c000ff62:	84 c0                	test   al,al
c000ff64:	75 a6                	jne    c000ff0c <Phys::allocatePage()+0x24>
c000ff66:	6a 01                	push   0x1
c000ff68:	53                   	push   ebx
c000ff69:	e8 b5 fe ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c000ff6e:	8b 1d 78 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c178
c000ff74:	a1 6c c1 02 c0       	mov    eax,ds:0xc002c16c
c000ff79:	83 c3 01             	add    ebx,0x1
c000ff7c:	5e                   	pop    esi
c000ff7d:	89 1d 78 c1 02 c0    	mov    DWORD PTR ds:0xc002c178,ebx
c000ff83:	c1 e0 0c             	shl    eax,0xc
c000ff86:	5a                   	pop    edx
c000ff87:	83 c4 14             	add    esp,0x14
c000ff8a:	5b                   	pop    ebx
c000ff8b:	5e                   	pop    esi
c000ff8c:	c3                   	ret    
c000ff8d:	83 ec 08             	sub    esp,0x8
c000ff90:	8b 15 78 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c178
c000ff96:	6a 01                	push   0x1
c000ff98:	83 c2 01             	add    edx,0x1
c000ff9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff9f:	89 15 78 c1 02 c0    	mov    DWORD PTR ds:0xc002c178,edx
c000ffa5:	89 c2                	mov    edx,eax
c000ffa7:	c1 ea 0c             	shr    edx,0xc
c000ffaa:	52                   	push   edx
c000ffab:	e8 73 fe ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c000ffb0:	83 c4 10             	add    esp,0x10
c000ffb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffb7:	eb ce                	jmp    c000ff87 <Phys::allocatePage()+0x9f>

c000ffb9 <Phys::allocateContiguousPages(int)>:
c000ffb9:	57                   	push   edi
c000ffba:	56                   	push   esi
c000ffbb:	53                   	push   ebx
c000ffbc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffc0:	fa                   	cli    
c000ffc1:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c000ffc7:	83 ec 0c             	sub    esp,0xc
c000ffca:	83 c2 01             	add    edx,0x1
c000ffcd:	68 9c 41 02 c0       	push   0xc002419c
c000ffd2:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c000ffd8:	31 db                	xor    ebx,ebx
c000ffda:	e8 9d 6f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ffdf:	83 c4 10             	add    esp,0x10
c000ffe2:	85 db                	test   ebx,ebx
c000ffe4:	75 11                	jne    c000fff7 <Phys::allocateContiguousPages(int)+0x3e>
c000ffe6:	e8 fd fe ff ff       	call   c000fee8 <Phys::allocatePage()>
c000ffeb:	83 ff 01             	cmp    edi,0x1
c000ffee:	89 c6                	mov    esi,eax
c000fff0:	74 21                	je     c0010013 <Phys::allocateContiguousPages(int)+0x5a>
c000fff2:	bb 01 00 00 00       	mov    ebx,0x1
c000fff7:	e8 ec fe ff ff       	call   c000fee8 <Phys::allocatePage()>
c000fffc:	89 da                	mov    edx,ebx
c000fffe:	c1 e2 0c             	shl    edx,0xc
c0010001:	01 f2                	add    edx,esi
c0010003:	39 c2                	cmp    edx,eax
c0010005:	74 24                	je     c001002b <Phys::allocateContiguousPages(int)+0x72>
c0010007:	bb 01 00 00 00       	mov    ebx,0x1
c001000c:	89 c6                	mov    esi,eax
c001000e:	83 ff 01             	cmp    edi,0x1
c0010011:	75 e4                	jne    c000fff7 <Phys::allocateContiguousPages(int)+0x3e>
c0010013:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001001b:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010020:	85 c0                	test   eax,eax
c0010022:	75 01                	jne    c0010025 <Phys::allocateContiguousPages(int)+0x6c>
c0010024:	fb                   	sti    
c0010025:	89 f0                	mov    eax,esi
c0010027:	5b                   	pop    ebx
c0010028:	5e                   	pop    esi
c0010029:	5f                   	pop    edi
c001002a:	c3                   	ret    
c001002b:	83 c3 01             	add    ebx,0x1
c001002e:	39 fb                	cmp    ebx,edi
c0010030:	75 b0                	jne    c000ffe2 <Phys::allocateContiguousPages(int)+0x29>
c0010032:	eb df                	jmp    c0010013 <Phys::allocateContiguousPages(int)+0x5a>

c0010034 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010034:	56                   	push   esi
c0010035:	53                   	push   ebx
c0010036:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001003a:	39 1d 70 c1 02 c0    	cmp    DWORD PTR ds:0xc002c170,ebx
c0010040:	73 06                	jae    c0010048 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010042:	89 1d 70 c1 02 c0    	mov    DWORD PTR ds:0xc002c170,ebx
c0010048:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001004c:	c1 eb 0c             	shr    ebx,0xc
c001004f:	c1 e8 0c             	shr    eax,0xc
c0010052:	39 d8                	cmp    eax,ebx
c0010054:	73 13                	jae    c0010069 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010056:	6a 00                	push   0x0
c0010058:	8d 70 01             	lea    esi,[eax+0x1]
c001005b:	50                   	push   eax
c001005c:	e8 c2 fd ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c0010061:	5a                   	pop    edx
c0010062:	89 f0                	mov    eax,esi
c0010064:	59                   	pop    ecx
c0010065:	39 f3                	cmp    ebx,esi
c0010067:	75 ed                	jne    c0010056 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010069:	5b                   	pop    ebx
c001006a:	5e                   	pop    esi
c001006b:	c3                   	ret    

c001006c <Phys::physicalMemorySetup(unsigned int)>:
c001006c:	55                   	push   ebp
c001006d:	57                   	push   edi
c001006e:	56                   	push   esi
c001006f:	53                   	push   ebx
c0010070:	83 ec 40             	sub    esp,0x40
c0010073:	6a 10                	push   0x10
c0010075:	6a 00                	push   0x0
c0010077:	68 80 c1 02 c0       	push   0xc002c180
c001007c:	e8 6f 04 ff ff       	call   c00004f0 <memset>
c0010081:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010085:	25 00 f0 ff ff       	and    eax,0xfffff000
c001008a:	05 00 10 00 00       	add    eax,0x1000
c001008f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010093:	5b                   	pop    ebx
c0010094:	31 db                	xor    ebx,ebx
c0010096:	5e                   	pop    esi
c0010097:	50                   	push   eax
c0010098:	68 00 41 02 c0       	push   0xc0024100
c001009d:	e8 da 6e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00100a2:	83 c4 10             	add    esp,0x10
c00100a5:	83 ec 08             	sub    esp,0x8
c00100a8:	6a 01                	push   0x1
c00100aa:	53                   	push   ebx
c00100ab:	83 c3 01             	add    ebx,0x1
c00100ae:	e8 70 fd ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c00100b3:	83 c4 10             	add    esp,0x10
c00100b6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100bc:	75 e7                	jne    c00100a5 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00100be:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00100c5:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00100cc:	c1 e0 08             	shl    eax,0x8
c00100cf:	09 c2                	or     edx,eax
c00100d1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00100d5:	0f 84 98 01 00 00    	je     c0010273 <Phys::physicalMemorySetup(unsigned int)+0x207>
c00100db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100e7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100f0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100f8:	eb 1c                	jmp    c0010116 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c00100fa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100fe:	83 c3 18             	add    ebx,0x18
c0010101:	83 c6 01             	add    esi,0x1
c0010104:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010108:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001010c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010110:	0f 84 6d 01 00 00    	je     c0010283 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0010116:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010119:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001011c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001011f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010123:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010127:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010129:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001012c:	01 f0                	add    eax,esi
c001012e:	55                   	push   ebp
c001012f:	11 fa                	adc    edx,edi
c0010131:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010135:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010139:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001013d:	51                   	push   ecx
c001013e:	56                   	push   esi
c001013f:	68 fc 41 02 c0       	push   0xc00241fc
c0010144:	e8 33 6e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010149:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001014d:	83 c4 10             	add    esp,0x10
c0010150:	09 f8                	or     eax,edi
c0010152:	0f 85 2b 01 00 00    	jne    c0010283 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0010158:	83 fd 01             	cmp    ebp,0x1
c001015b:	75 9d                	jne    c00100fa <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001015d:	ba 00 00 08 00       	mov    edx,0x80000
c0010162:	89 c1                	mov    ecx,eax
c0010164:	39 f2                	cmp    edx,esi
c0010166:	19 f9                	sbb    ecx,edi
c0010168:	0f 82 ab 00 00 00    	jb     c0010219 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001016e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010172:	89 c1                	mov    ecx,eax
c0010174:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010178:	0f 83 9b 00 00 00    	jae    c0010219 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001017e:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010183:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010187:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001018b:	39 fa                	cmp    edx,edi
c001018d:	19 e8                	sbb    eax,ebp
c001018f:	0f 82 b0 01 00 00    	jb     c0010345 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0010195:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010199:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001019d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101a3:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101a8:	83 d5 ff             	adc    ebp,0xffffffff
c00101ab:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101af:	31 c0                	xor    eax,eax
c00101b1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101b5:	39 fa                	cmp    edx,edi
c00101b7:	89 c1                	mov    ecx,eax
c00101b9:	19 e9                	sbb    ecx,ebp
c00101bb:	0f 83 39 ff ff ff    	jae    c00100fa <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00101c1:	be 00 00 08 00       	mov    esi,0x80000
c00101c6:	83 ec 04             	sub    esp,0x4
c00101c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101cd:	57                   	push   edi
c00101ce:	56                   	push   esi
c00101cf:	68 20 42 02 c0       	push   0xc0024220
c00101d4:	e8 a3 6d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00101d9:	5d                   	pop    ebp
c00101da:	58                   	pop    eax
c00101db:	57                   	push   edi
c00101dc:	56                   	push   esi
c00101dd:	e8 52 fe ff ff       	call   c0010034 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101e2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101ea:	83 c4 0c             	add    esp,0xc
c00101ed:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101f1:	8b 15 7c c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c17c
c00101f7:	01 d0                	add    eax,edx
c00101f9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010200:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c0010205:	52                   	push   edx
c0010206:	50                   	push   eax
c0010207:	68 26 41 02 c0       	push   0xc0024126
c001020c:	e8 6b 6d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010211:	83 c4 10             	add    esp,0x10
c0010214:	e9 e1 fe ff ff       	jmp    c00100fa <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010219:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001021d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010221:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010225:	39 ea                	cmp    edx,ebp
c0010227:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001022b:	0f 82 c9 fe ff ff    	jb     c00100fa <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010231:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010236:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001023a:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001023e:	0f 83 b6 fe ff ff    	jae    c00100fa <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010244:	39 ee                	cmp    esi,ebp
c0010246:	89 f8                	mov    eax,edi
c0010248:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001024c:	0f 83 74 ff ff ff    	jae    c00101c6 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0010252:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010256:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001025a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001025e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010262:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010266:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001026a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001026e:	e9 53 ff ff ff       	jmp    c00101c6 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0010273:	83 ec 0c             	sub    esp,0xc
c0010276:	68 18 41 02 c0       	push   0xc0024118
c001027b:	e8 74 fa ff ff       	call   c000fcf4 <KePanic(char const*)>
c0010280:	83 c4 10             	add    esp,0x10
c0010283:	83 ec 08             	sub    esp,0x8
c0010286:	bb 60 00 00 00       	mov    ebx,0x60
c001028b:	6a 00                	push   0x0
c001028d:	6a 06                	push   0x6
c001028f:	e8 8f fb ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c0010294:	58                   	pop    eax
c0010295:	5a                   	pop    edx
c0010296:	6a 00                	push   0x0
c0010298:	6a 07                	push   0x7
c001029a:	e8 84 fb ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c001029f:	8b 0d 7c c1 02 c0    	mov    ecx,DWORD PTR ds:0xc002c17c
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	83 c1 02             	add    ecx,0x2
c00102ab:	89 0d 7c c1 02 c0    	mov    DWORD PTR ds:0xc002c17c,ecx
c00102b1:	83 ec 08             	sub    esp,0x8
c00102b4:	6a 00                	push   0x0
c00102b6:	53                   	push   ebx
c00102b7:	83 c3 01             	add    ebx,0x1
c00102ba:	e8 64 fb ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c00102bf:	83 c4 10             	add    esp,0x10
c00102c2:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00102c8:	75 e7                	jne    c00102b1 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00102ca:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c00102cf:	bb 40 01 00 00       	mov    ebx,0x140
c00102d4:	83 c0 20             	add    eax,0x20
c00102d7:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c00102dc:	eb 26                	jmp    c0010304 <Phys::physicalMemorySetup(unsigned int)+0x298>
c00102de:	83 ec 08             	sub    esp,0x8
c00102e1:	6a 00                	push   0x0
c00102e3:	53                   	push   ebx
c00102e4:	83 c3 01             	add    ebx,0x1
c00102e7:	e8 37 fb ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c00102ec:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c00102f1:	83 c4 10             	add    esp,0x10
c00102f4:	83 c0 01             	add    eax,0x1
c00102f7:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00102fd:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c0010302:	74 07                	je     c001030b <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0010304:	3d ff 03 00 00       	cmp    eax,0x3ff
c0010309:	7e d3                	jle    c00102de <Phys::physicalMemorySetup(unsigned int)+0x272>
c001030b:	bb d0 01 00 00       	mov    ebx,0x1d0
c0010310:	3d ff 07 00 00       	cmp    eax,0x7ff
c0010315:	7f 26                	jg     c001033d <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0010317:	83 ec 08             	sub    esp,0x8
c001031a:	6a 00                	push   0x0
c001031c:	53                   	push   ebx
c001031d:	83 c3 01             	add    ebx,0x1
c0010320:	e8 fe fa ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c0010325:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c001032a:	83 c4 10             	add    esp,0x10
c001032d:	83 c0 01             	add    eax,0x1
c0010330:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0010336:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c001033b:	75 d3                	jne    c0010310 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c001033d:	83 c4 3c             	add    esp,0x3c
c0010340:	5b                   	pop    ebx
c0010341:	5e                   	pop    esi
c0010342:	5f                   	pop    edi
c0010343:	5d                   	pop    ebp
c0010344:	c3                   	ret    
c0010345:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001034d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010355:	e9 3b fe ff ff       	jmp    c0010195 <Phys::physicalMemorySetup(unsigned int)+0x129>

c001035a <Pipe::isAtty()>:
c001035a:	31 c0                	xor    eax,eax
c001035c:	c3                   	ret    
c001035d:	90                   	nop

c001035e <Pipe::~Pipe()>:
c001035e:	83 ec 0c             	sub    esp,0xc
c0010361:	ba 8c 42 02 c0       	mov    edx,0xc002428c
c0010366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001036a:	89 10                	mov    DWORD PTR [eax],edx
c001036c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010370:	83 ec 0c             	sub    esp,0xc
c0010373:	50                   	push   eax
c0010374:	e8 41 2d 00 00       	call   c00130ba <UnixFile::~UnixFile()>
c0010379:	83 c4 10             	add    esp,0x10
c001037c:	90                   	nop
c001037d:	83 c4 0c             	add    esp,0xc
c0010380:	c3                   	ret    
c0010381:	90                   	nop

c0010382 <Pipe::~Pipe()>:
c0010382:	83 ec 0c             	sub    esp,0xc
c0010385:	83 ec 0c             	sub    esp,0xc
c0010388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001038c:	e8 cd ff ff ff       	call   c001035e <Pipe::~Pipe()>
c0010391:	83 c4 10             	add    esp,0x10
c0010394:	83 ec 08             	sub    esp,0x8
c0010397:	6a 20                	push   0x20
c0010399:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001039d:	e8 0e d0 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00103a2:	83 c4 10             	add    esp,0x10
c00103a5:	83 c4 0c             	add    esp,0xc
c00103a8:	c3                   	ret    
c00103a9:	90                   	nop

c00103aa <Pipe::write(unsigned long long, void*, int*)>:
c00103aa:	55                   	push   ebp
c00103ab:	57                   	push   edi
c00103ac:	56                   	push   esi
c00103ad:	53                   	push   ebx
c00103ae:	83 ec 1c             	sub    esp,0x1c
c00103b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103b9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00103bc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00103c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103c7:	89 d8                	mov    eax,ebx
c00103c9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00103cc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00103d0:	89 d6                	mov    esi,edx
c00103d2:	89 d7                	mov    edi,edx
c00103d4:	c1 ff 1f             	sar    edi,0x1f
c00103d7:	03 34 24             	add    esi,DWORD PTR [esp]
c00103da:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00103de:	c1 f8 1f             	sar    eax,0x1f
c00103e1:	39 f3                	cmp    ebx,esi
c00103e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103eb:	19 f8                	sbb    eax,edi
c00103ed:	b8 01 00 00 00       	mov    eax,0x1
c00103f2:	72 6e                	jb     c0010462 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00103f4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103f7:	01 d0                	add    eax,edx
c00103f9:	99                   	cdq    
c00103fa:	f7 fb                	idiv   ebx
c00103fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010400:	29 d3                	sub    ebx,edx
c0010402:	89 d7                	mov    edi,edx
c0010404:	89 de                	mov    esi,ebx
c0010406:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010409:	c1 fb 1f             	sar    ebx,0x1f
c001040c:	39 f2                	cmp    edx,esi
c001040e:	19 d8                	sbb    eax,ebx
c0010410:	b8 00 00 00 00       	mov    eax,0x0
c0010415:	72 04                	jb     c001041b <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010417:	89 d0                	mov    eax,edx
c0010419:	29 f0                	sub    eax,esi
c001041b:	89 d3                	mov    ebx,edx
c001041d:	29 c3                	sub    ebx,eax
c001041f:	74 0b                	je     c001042c <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010421:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010424:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010428:	89 d9                	mov    ecx,ebx
c001042a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001042c:	85 c0                	test   eax,eax
c001042e:	74 0d                	je     c001043d <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010430:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010434:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010437:	89 de                	mov    esi,ebx
c0010439:	89 c1                	mov    ecx,eax
c001043b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001043d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010440:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010445:	75 10                	jne    c0010457 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010447:	83 ec 0c             	sub    esp,0xc
c001044a:	68 49 42 02 c0       	push   0xc0024249
c001044f:	e8 a0 f8 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0010454:	83 c4 10             	add    esp,0x10
c0010457:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001045b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001045e:	89 08                	mov    DWORD PTR [eax],ecx
c0010460:	31 c0                	xor    eax,eax
c0010462:	83 c4 1c             	add    esp,0x1c
c0010465:	5b                   	pop    ebx
c0010466:	5e                   	pop    esi
c0010467:	5f                   	pop    edi
c0010468:	5d                   	pop    ebp
c0010469:	c3                   	ret    

c001046a <Pipe::read(unsigned long long, void*, int*)>:
c001046a:	55                   	push   ebp
c001046b:	57                   	push   edi
c001046c:	56                   	push   esi
c001046d:	53                   	push   ebx
c001046e:	83 ec 1c             	sub    esp,0x1c
c0010471:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010475:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010479:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001047d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010480:	89 c8                	mov    eax,ecx
c0010482:	99                   	cdq    
c0010483:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010487:	74 27                	je     c00104b0 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010489:	39 f9                	cmp    ecx,edi
c001048b:	89 d1                	mov    ecx,edx
c001048d:	19 f1                	sbb    ecx,esi
c001048f:	73 1f                	jae    c00104b0 <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010491:	fa                   	cli    
c0010492:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c0010498:	e8 73 69 00 00       	call   c0016e10 <schedule()>
c001049d:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00104a4:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00104ab:	75 d0                	jne    c001047d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00104ad:	fb                   	sti    
c00104ae:	eb cd                	jmp    c001047d <Pipe::read(unsigned long long, void*, int*)+0x13>
c00104b0:	39 f8                	cmp    eax,edi
c00104b2:	89 d1                	mov    ecx,edx
c00104b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00104b7:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00104bb:	19 f1                	sbb    ecx,esi
c00104bd:	73 07                	jae    c00104c6 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c00104bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00104c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104c6:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00104c9:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00104cc:	29 f7                	sub    edi,esi
c00104ce:	89 f8                	mov    eax,edi
c00104d0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00104d4:	99                   	cdq    
c00104d5:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00104d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104dc:	19 d0                	sbb    eax,edx
c00104de:	73 07                	jae    c00104e7 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c00104e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00104e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104e7:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00104ea:	89 ea                	mov    edx,ebp
c00104ec:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00104f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00104f5:	74 0d                	je     c0010504 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c00104f7:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00104fa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00104fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010502:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010504:	85 d2                	test   edx,edx
c0010506:	74 11                	je     c0010519 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010508:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001050c:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001050f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010513:	89 d1                	mov    ecx,edx
c0010515:	89 c7                	mov    edi,eax
c0010517:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010519:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001051c:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001051f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010522:	99                   	cdq    
c0010523:	89 f7                	mov    edi,esi
c0010525:	03 04 24             	add    eax,DWORD PTR [esp]
c0010528:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001052c:	c1 ff 1f             	sar    edi,0x1f
c001052f:	57                   	push   edi
c0010530:	56                   	push   esi
c0010531:	52                   	push   edx
c0010532:	50                   	push   eax
c0010533:	e8 bc 15 01 00       	call   c0021af4 <__umoddi3>
c0010538:	83 c4 10             	add    esp,0x10
c001053b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001053e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010543:	75 10                	jne    c0010555 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010545:	83 ec 0c             	sub    esp,0xc
c0010548:	68 66 42 02 c0       	push   0xc0024266
c001054d:	e8 a2 f7 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0010552:	83 c4 10             	add    esp,0x10
c0010555:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010559:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001055c:	89 10                	mov    DWORD PTR [eax],edx
c001055e:	83 c4 1c             	add    esp,0x1c
c0010561:	31 c0                	xor    eax,eax
c0010563:	5b                   	pop    ebx
c0010564:	5e                   	pop    esi
c0010565:	5f                   	pop    edi
c0010566:	5d                   	pop    ebp
c0010567:	c3                   	ret    

c0010568 <Pipe::Pipe(int)>:
c0010568:	83 ec 0c             	sub    esp,0xc
c001056b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056f:	83 ec 08             	sub    esp,0x8
c0010572:	6a 00                	push   0x0
c0010574:	50                   	push   eax
c0010575:	e8 5a 29 00 00       	call   c0012ed4 <UnixFile::UnixFile(int)>
c001057a:	83 c4 10             	add    esp,0x10
c001057d:	ba 8c 42 02 c0       	mov    edx,0xc002428c
c0010582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010586:	89 10                	mov    DWORD PTR [eax],edx
c0010588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010590:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010597:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001059e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00105a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105ad:	83 ec 0c             	sub    esp,0xc
c00105b0:	50                   	push   eax
c00105b1:	e8 e1 f2 ff ff       	call   c000f897 <malloc>
c00105b6:	83 c4 10             	add    esp,0x10
c00105b9:	89 c2                	mov    edx,eax
c00105bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105bf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00105c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105c6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00105ca:	90                   	nop
c00105cb:	83 c4 0c             	add    esp,0xc
c00105ce:	c3                   	ret    

c00105cf <KePowerThread(void*)>:
c00105cf:	83 ec 0c             	sub    esp,0xc
c00105d2:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00105d9:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00105e0:	75 01                	jne    c00105e3 <KePowerThread(void*)+0x14>
c00105e2:	fb                   	sti    
c00105e3:	c6 05 ac c1 02 c0 00 	mov    BYTE PTR ds:0xc002c1ac,0x0
c00105ea:	50                   	push   eax
c00105eb:	50                   	push   eax
c00105ec:	6a 00                	push   0x0
c00105ee:	6a 0a                	push   0xa
c00105f0:	e8 27 6a 00 00       	call   c001701c <sleep(unsigned long long)>
c00105f5:	83 05 e4 c1 02 c0 0a 	add    DWORD PTR ds:0xc002c1e4,0xa
c00105fc:	83 c4 10             	add    esp,0x10
c00105ff:	eb e2                	jmp    c00105e3 <KePowerThread(void*)+0x14>

c0010601 <KeChangePowerSettings(PowerSettings)>:
c0010601:	57                   	push   edi
c0010602:	b9 09 00 00 00       	mov    ecx,0x9
c0010607:	56                   	push   esi
c0010608:	bf c0 c1 02 c0       	mov    edi,0xc002c1c0
c001060d:	fc                   	cld    
c001060e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010612:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010614:	5e                   	pop    esi
c0010615:	5f                   	pop    edi
c0010616:	c3                   	ret    

c0010617 <KeUserIOReceived()>:
c0010617:	c7 05 e4 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1e4,0x0
c0010621:	c3                   	ret    

c0010622 <KeSetupPowerManager()>:
c0010622:	83 ec 0c             	sub    esp,0xc
c0010625:	c7 05 e4 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1e4,0x0
c001062f:	68 f0 00 00 00       	push   0xf0
c0010634:	c6 05 ac c1 02 c0 00 	mov    BYTE PTR ds:0xc002c1ac,0x0
c001063b:	6a 00                	push   0x0
c001063d:	68 cf 05 01 c0       	push   0xc00105cf
c0010642:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0010648:	e8 03 65 00 00       	call   c0016b50 <Process::createThread(void (*)(void*), void*, int)>
c001064d:	c7 05 c0 c1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c1c0,0x2
c0010657:	c7 05 c4 c1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c1c4,0x1
c0010661:	c7 05 c8 c1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c1c8,0x3
c001066b:	c7 05 cc c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1cc,0x0
c0010675:	c7 05 d8 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1d8,0x0
c001067f:	c7 05 d0 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1d0,0x0
c0010689:	c7 05 dc c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1dc,0x0
c0010693:	c7 05 d4 c1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002c1d4,0x3c
c001069d:	c7 05 e0 c1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002c1e0,0x3c
c00106a7:	83 c4 1c             	add    esp,0x1c
c00106aa:	c3                   	ret    

c00106ab <KePrepareShutdown()>:
c00106ab:	83 ec 0c             	sub    esp,0xc
c00106ae:	e8 c9 cb ff ff       	call   c000d27c <KeExecuteAtexit()>
c00106b3:	83 ec 0c             	sub    esp,0xc
c00106b6:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c00106bb:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00106c1:	e8 f6 95 ff ff       	call   c0009cbc <Device::closeAll()>
c00106c6:	83 c4 1c             	add    esp,0x1c
c00106c9:	c3                   	ret    

c00106ca <KeRegisterShutdownHandler(void (*)())>:
c00106ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ce:	a3 a8 c1 02 c0       	mov    ds:0xc002c1a8,eax
c00106d3:	c3                   	ret    

c00106d4 <KeRegisterRestartHandler(void (*)())>:
c00106d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d8:	a3 a4 c1 02 c0       	mov    ds:0xc002c1a4,eax
c00106dd:	c3                   	ret    

c00106de <KeRegisterSleepHandler(void (*)())>:
c00106de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106e2:	a3 a0 c1 02 c0       	mov    ds:0xc002c1a0,eax
c00106e7:	c3                   	ret    

c00106e8 <KeShutdown()>:
c00106e8:	83 ec 0c             	sub    esp,0xc
c00106eb:	e8 bb ff ff ff       	call   c00106ab <KePrepareShutdown()>
c00106f0:	a1 a8 c1 02 c0       	mov    eax,ds:0xc002c1a8
c00106f5:	85 c0                	test   eax,eax
c00106f7:	74 04                	je     c00106fd <KeShutdown()+0x15>
c00106f9:	ff d0                	call   eax
c00106fb:	eb 10                	jmp    c001070d <KeShutdown()+0x25>
c00106fd:	83 ec 0c             	sub    esp,0xc
c0010700:	68 a0 42 02 c0       	push   0xc00242a0
c0010705:	e8 ea f5 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001070a:	83 c4 10             	add    esp,0x10
c001070d:	83 ec 0c             	sub    esp,0xc
c0010710:	68 c1 42 02 c0       	push   0xc00242c1
c0010715:	e8 da f5 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001071a:	83 c4 1c             	add    esp,0x1c
c001071d:	c3                   	ret    

c001071e <KeSleep()>:
c001071e:	a1 a0 c1 02 c0       	mov    eax,ds:0xc002c1a0
c0010723:	85 c0                	test   eax,eax
c0010725:	74 02                	je     c0010729 <KeSleep()+0xb>
c0010727:	ff e0                	jmp    eax
c0010729:	c3                   	ret    

c001072a <KeHandlePowerButton()>:
c001072a:	a1 c0 c1 02 c0       	mov    eax,ds:0xc002c1c0
c001072f:	83 f8 02             	cmp    eax,0x2
c0010732:	75 02                	jne    c0010736 <KeHandlePowerButton()+0xc>
c0010734:	eb b2                	jmp    c00106e8 <KeShutdown()>
c0010736:	48                   	dec    eax
c0010737:	75 02                	jne    c001073b <KeHandlePowerButton()+0x11>
c0010739:	eb e3                	jmp    c001071e <KeSleep()>
c001073b:	c3                   	ret    

c001073c <KeHandleSleepButton()>:
c001073c:	a1 c4 c1 02 c0       	mov    eax,ds:0xc002c1c4
c0010741:	83 f8 02             	cmp    eax,0x2
c0010744:	75 02                	jne    c0010748 <KeHandleSleepButton()+0xc>
c0010746:	eb a0                	jmp    c00106e8 <KeShutdown()>
c0010748:	48                   	dec    eax
c0010749:	75 02                	jne    c001074d <KeHandleSleepButton()+0x11>
c001074b:	eb d1                	jmp    c001071e <KeSleep()>
c001074d:	c3                   	ret    

c001074e <KeRestart()>:
c001074e:	83 ec 0c             	sub    esp,0xc
c0010751:	e8 55 ff ff ff       	call   c00106ab <KePrepareShutdown()>
c0010756:	a1 a4 c1 02 c0       	mov    eax,ds:0xc002c1a4
c001075b:	85 c0                	test   eax,eax
c001075d:	74 02                	je     c0010761 <KeRestart()+0x13>
c001075f:	ff d0                	call   eax
c0010761:	83 ec 0c             	sub    esp,0xc
c0010764:	68 e5 42 02 c0       	push   0xc00242e5
c0010769:	e8 86 f5 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001076e:	83 c4 1c             	add    esp,0x1c
c0010771:	c3                   	ret    

c0010772 <KeRand()>:
c0010772:	69 05 e8 c1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002c1e8,0x2875
c001077c:	69 0d ec c1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002c1ec,0xa2e7b175
c0010786:	53                   	push   ebx
c0010787:	01 c1                	add    ecx,eax
c0010789:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001078e:	f7 25 e8 c1 02 c0    	mul    DWORD PTR ds:0xc002c1e8
c0010794:	01 ca                	add    edx,ecx
c0010796:	05 ef 04 b5 00       	add    eax,0xb504ef
c001079b:	83 d2 00             	adc    edx,0x0
c001079e:	a3 e8 c1 02 c0       	mov    ds:0xc002c1e8,eax
c00107a3:	0f b7 da             	movzx  ebx,dx
c00107a6:	89 da                	mov    edx,ebx
c00107a8:	89 1d ec c1 02 c0    	mov    DWORD PTR ds:0xc002c1ec,ebx
c00107ae:	0f ac d0 0e          	shrd   eax,edx,0xe
c00107b2:	5b                   	pop    ebx
c00107b3:	c3                   	ret    

c00107b4 <KeSeedRand(unsigned int)>:
c00107b4:	53                   	push   ebx
c00107b5:	83 ec 08             	sub    esp,0x8
c00107b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107bc:	e8 06 9f 00 00       	call   c001a6c7 <HalGetRand()>
c00107c1:	c7 05 ec c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1ec,0x0
c00107cb:	31 d8                	xor    eax,ebx
c00107cd:	a3 e8 c1 02 c0       	mov    ds:0xc002c1e8,eax
c00107d2:	e8 9b ff ff ff       	call   c0010772 <KeRand()>
c00107d7:	83 c4 08             	add    esp,0x8
c00107da:	5b                   	pop    ebx
c00107db:	eb 95                	jmp    c0010772 <KeRand()>

c00107dd <KeInitRand()>:
c00107dd:	83 ec 0c             	sub    esp,0xc
c00107e0:	e8 b0 9c 00 00       	call   c001a495 <HalQueryPerformanceCounter()>
c00107e5:	0f 20 da             	mov    edx,cr3
c00107e8:	0f 22 da             	mov    cr3,edx
c00107eb:	0f 20 da             	mov    edx,cr3
c00107ee:	0f 22 da             	mov    cr3,edx
c00107f1:	0f 20 da             	mov    edx,cr3
c00107f4:	0f 22 da             	mov    cr3,edx
c00107f7:	0f 20 da             	mov    edx,cr3
c00107fa:	0f 22 da             	mov    cr3,edx
c00107fd:	83 ec 0c             	sub    esp,0xc
c0010800:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010805:	50                   	push   eax
c0010806:	e8 a9 ff ff ff       	call   c00107b4 <KeSeedRand(unsigned int)>
c001080b:	83 c4 1c             	add    esp,0x1c
c001080e:	c3                   	ret    
c001080f:	90                   	nop

c0010810 <KeResolveCompatibilitySymbol(char*)>:
c0010810:	83 ec 0c             	sub    esp,0xc
c0010813:	83 ec 08             	sub    esp,0x8
c0010816:	68 f4 42 02 c0       	push   0xc00242f4
c001081b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001081f:	e8 2c ff fe ff       	call   c0000750 <strcmp>
c0010824:	83 c4 10             	add    esp,0x10
c0010827:	85 c0                	test   eax,eax
c0010829:	0f 94 c0             	sete   al
c001082c:	0f b6 c0             	movzx  eax,al
c001082f:	85 c0                	test   eax,eax
c0010831:	74 0d                	je     c0010840 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010833:	b8 08 c1 02 c0       	mov    eax,0xc002c108
c0010838:	e9 3b 02 00 00       	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c001083d:	8d 76 00             	lea    esi,[esi+0x0]
c0010840:	83 ec 08             	sub    esp,0x8
c0010843:	68 fd 42 02 c0       	push   0xc00242fd
c0010848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001084c:	e8 ff fe fe ff       	call   c0000750 <strcmp>
c0010851:	83 c4 10             	add    esp,0x10
c0010854:	85 c0                	test   eax,eax
c0010856:	0f 94 c0             	sete   al
c0010859:	0f b6 c0             	movzx  eax,al
c001085c:	85 c0                	test   eax,eax
c001085e:	74 0c                	je     c001086c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010860:	b8 f4 19 02 c0       	mov    eax,0xc00219f4
c0010865:	e9 0e 02 00 00       	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c001086a:	66 90                	xchg   ax,ax
c001086c:	83 ec 08             	sub    esp,0x8
c001086f:	68 07 43 02 c0       	push   0xc0024307
c0010874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010878:	e8 d3 fe fe ff       	call   c0000750 <strcmp>
c001087d:	83 c4 10             	add    esp,0x10
c0010880:	85 c0                	test   eax,eax
c0010882:	0f 94 c0             	sete   al
c0010885:	0f b6 c0             	movzx  eax,al
c0010888:	85 c0                	test   eax,eax
c001088a:	74 0c                	je     c0010898 <KeResolveCompatibilitySymbol(char*)+0x88>
c001088c:	b8 08 c1 02 c0       	mov    eax,0xc002c108
c0010891:	e9 e2 01 00 00       	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010896:	66 90                	xchg   ax,ax
c0010898:	83 ec 08             	sub    esp,0x8
c001089b:	68 1a 43 02 c0       	push   0xc002431a
c00108a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a4:	e8 a7 fe fe ff       	call   c0000750 <strcmp>
c00108a9:	83 c4 10             	add    esp,0x10
c00108ac:	85 c0                	test   eax,eax
c00108ae:	0f 94 c0             	sete   al
c00108b1:	0f b6 c0             	movzx  eax,al
c00108b4:	85 c0                	test   eax,eax
c00108b6:	74 0c                	je     c00108c4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00108b8:	b8 28 17 02 c0       	mov    eax,0xc0021728
c00108bd:	e9 b6 01 00 00       	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108c2:	66 90                	xchg   ax,ax
c00108c4:	83 ec 08             	sub    esp,0x8
c00108c7:	68 23 43 02 c0       	push   0xc0024323
c00108cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d0:	e8 7b fe fe ff       	call   c0000750 <strcmp>
c00108d5:	83 c4 10             	add    esp,0x10
c00108d8:	85 c0                	test   eax,eax
c00108da:	0f 94 c0             	sete   al
c00108dd:	0f b6 c0             	movzx  eax,al
c00108e0:	85 c0                	test   eax,eax
c00108e2:	74 0c                	je     c00108f0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00108e4:	b8 f4 fc 00 c0       	mov    eax,0xc000fcf4
c00108e9:	e9 8a 01 00 00       	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108ee:	66 90                	xchg   ax,ax
c00108f0:	83 ec 08             	sub    esp,0x8
c00108f3:	68 36 43 02 c0       	push   0xc0024336
c00108f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fc:	e8 4f fe fe ff       	call   c0000750 <strcmp>
c0010901:	83 c4 10             	add    esp,0x10
c0010904:	85 c0                	test   eax,eax
c0010906:	0f 94 c0             	sete   al
c0010909:	0f b6 c0             	movzx  eax,al
c001090c:	85 c0                	test   eax,eax
c001090e:	74 0c                	je     c001091c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010910:	b8 05 d3 00 c0       	mov    eax,0xc000d305
c0010915:	e9 5e 01 00 00       	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c001091a:	66 90                	xchg   ax,ax
c001091c:	83 ec 08             	sub    esp,0x8
c001091f:	68 53 43 02 c0       	push   0xc0024353
c0010924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010928:	e8 23 fe fe ff       	call   c0000750 <strcmp>
c001092d:	83 c4 10             	add    esp,0x10
c0010930:	85 c0                	test   eax,eax
c0010932:	0f 94 c0             	sete   al
c0010935:	0f b6 c0             	movzx  eax,al
c0010938:	85 c0                	test   eax,eax
c001093a:	74 0c                	je     c0010948 <KeResolveCompatibilitySymbol(char*)+0x138>
c001093c:	b8 f4 1a 02 c0       	mov    eax,0xc0021af4
c0010941:	e9 32 01 00 00       	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010946:	66 90                	xchg   ax,ax
c0010948:	83 ec 08             	sub    esp,0x8
c001094b:	68 5d 43 02 c0       	push   0xc002435d
c0010950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010954:	e8 f7 fd fe ff       	call   c0000750 <strcmp>
c0010959:	83 c4 10             	add    esp,0x10
c001095c:	85 c0                	test   eax,eax
c001095e:	0f 94 c0             	sete   al
c0010961:	0f b6 c0             	movzx  eax,al
c0010964:	85 c0                	test   eax,eax
c0010966:	74 0c                	je     c0010974 <KeResolveCompatibilitySymbol(char*)+0x164>
c0010968:	b8 74 18 02 c0       	mov    eax,0xc0021874
c001096d:	e9 06 01 00 00       	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010972:	66 90                	xchg   ax,ax
c0010974:	83 ec 08             	sub    esp,0x8
c0010977:	68 66 43 02 c0       	push   0xc0024366
c001097c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010980:	e8 cb fd fe ff       	call   c0000750 <strcmp>
c0010985:	83 c4 10             	add    esp,0x10
c0010988:	85 c0                	test   eax,eax
c001098a:	0f 94 c0             	sete   al
c001098d:	0f b6 c0             	movzx  eax,al
c0010990:	85 c0                	test   eax,eax
c0010992:	74 0c                	je     c00109a0 <KeResolveCompatibilitySymbol(char*)+0x190>
c0010994:	b8 0c c1 02 c0       	mov    eax,0xc002c10c
c0010999:	e9 da 00 00 00       	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c001099e:	66 90                	xchg   ax,ax
c00109a0:	83 ec 08             	sub    esp,0x8
c00109a3:	68 7e 43 02 c0       	push   0xc002437e
c00109a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ac:	e8 9f fd fe ff       	call   c0000750 <strcmp>
c00109b1:	83 c4 10             	add    esp,0x10
c00109b4:	85 c0                	test   eax,eax
c00109b6:	0f 94 c0             	sete   al
c00109b9:	0f b6 c0             	movzx  eax,al
c00109bc:	85 c0                	test   eax,eax
c00109be:	74 0c                	je     c00109cc <KeResolveCompatibilitySymbol(char*)+0x1bc>
c00109c0:	b8 0c c1 02 c0       	mov    eax,0xc002c10c
c00109c5:	e9 ae 00 00 00       	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c00109ca:	66 90                	xchg   ax,ax
c00109cc:	83 ec 08             	sub    esp,0x8
c00109cf:	68 8b 43 02 c0       	push   0xc002438b
c00109d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d8:	e8 73 fd fe ff       	call   c0000750 <strcmp>
c00109dd:	83 c4 10             	add    esp,0x10
c00109e0:	85 c0                	test   eax,eax
c00109e2:	0f 94 c0             	sete   al
c00109e5:	0f b6 c0             	movzx  eax,al
c00109e8:	85 c0                	test   eax,eax
c00109ea:	74 0c                	je     c00109f8 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c00109ec:	b8 0d c1 02 c0       	mov    eax,0xc002c10d
c00109f1:	e9 82 00 00 00       	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c00109f6:	66 90                	xchg   ax,ax
c00109f8:	83 ec 08             	sub    esp,0x8
c00109fb:	68 98 43 02 c0       	push   0xc0024398
c0010a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a04:	e8 47 fd fe ff       	call   c0000750 <strcmp>
c0010a09:	83 c4 10             	add    esp,0x10
c0010a0c:	85 c0                	test   eax,eax
c0010a0e:	0f 94 c0             	sete   al
c0010a11:	0f b6 c0             	movzx  eax,al
c0010a14:	85 c0                	test   eax,eax
c0010a16:	74 08                	je     c0010a20 <KeResolveCompatibilitySymbol(char*)+0x210>
c0010a18:	b8 0c c1 02 c0       	mov    eax,0xc002c10c
c0010a1d:	eb 59                	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a1f:	90                   	nop
c0010a20:	83 ec 08             	sub    esp,0x8
c0010a23:	68 a9 43 02 c0       	push   0xc00243a9
c0010a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2c:	e8 1f fd fe ff       	call   c0000750 <strcmp>
c0010a31:	83 c4 10             	add    esp,0x10
c0010a34:	85 c0                	test   eax,eax
c0010a36:	0f 94 c0             	sete   al
c0010a39:	0f b6 c0             	movzx  eax,al
c0010a3c:	85 c0                	test   eax,eax
c0010a3e:	74 08                	je     c0010a48 <KeResolveCompatibilitySymbol(char*)+0x238>
c0010a40:	b8 0d c1 02 c0       	mov    eax,0xc002c10d
c0010a45:	eb 31                	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a47:	90                   	nop
c0010a48:	83 ec 08             	sub    esp,0x8
c0010a4b:	68 ba 43 02 c0       	push   0xc00243ba
c0010a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a54:	e8 f7 fc fe ff       	call   c0000750 <strcmp>
c0010a59:	83 c4 10             	add    esp,0x10
c0010a5c:	85 c0                	test   eax,eax
c0010a5e:	0f 94 c0             	sete   al
c0010a61:	0f b6 c0             	movzx  eax,al
c0010a64:	85 c0                	test   eax,eax
c0010a66:	74 08                	je     c0010a70 <KeResolveCompatibilitySymbol(char*)+0x260>
c0010a68:	b8 10 76 01 c0       	mov    eax,0xc0017610
c0010a6d:	eb 09                	jmp    c0010a78 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a6f:	90                   	nop
c0010a70:	b8 00 00 00 00       	mov    eax,0x0
c0010a75:	8d 76 00             	lea    esi,[esi+0x0]
c0010a78:	83 c4 0c             	add    esp,0xc
c0010a7b:	c3                   	ret    

c0010a7c <Semaphore::Semaphore(int)>:
c0010a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a84:	89 10                	mov    DWORD PTR [eax],edx
c0010a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a8a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010a91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010a9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aa0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010aa7:	90                   	nop
c0010aa8:	c3                   	ret    
c0010aa9:	90                   	nop
c0010aaa:	66 90                	xchg   ax,ax

c0010aac <Semaphore::tryAcquire()>:
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	fa                   	cli    
c0010ab0:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010ab5:	83 c0 01             	add    eax,0x1
c0010ab8:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010abd:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010ac2:	83 c0 01             	add    eax,0x1
c0010ac5:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ace:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ad7:	39 c2                	cmp    edx,eax
c0010ad9:	7d 59                	jge    c0010b34 <Semaphore::tryAcquire()+0x88>
c0010adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010adf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010ae2:	8d 50 01             	lea    edx,[eax+0x1]
c0010ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010aec:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010af1:	83 e8 01             	sub    eax,0x1
c0010af4:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010af9:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010afe:	85 c0                	test   eax,eax
c0010b00:	75 1a                	jne    c0010b1c <Semaphore::tryAcquire()+0x70>
c0010b02:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010b07:	85 c0                	test   eax,eax
c0010b09:	74 11                	je     c0010b1c <Semaphore::tryAcquire()+0x70>
c0010b0b:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010b15:	e8 f6 62 00 00       	call   c0016e10 <schedule()>
c0010b1a:	66 90                	xchg   ax,ax
c0010b1c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010b24:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010b29:	85 c0                	test   eax,eax
c0010b2b:	75 03                	jne    c0010b30 <Semaphore::tryAcquire()+0x84>
c0010b2d:	fb                   	sti    
c0010b2e:	66 90                	xchg   ax,ax
c0010b30:	b0 01                	mov    al,0x1
c0010b32:	eb 48                	jmp    c0010b7c <Semaphore::tryAcquire()+0xd0>
c0010b34:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010b39:	83 e8 01             	sub    eax,0x1
c0010b3c:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010b41:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010b46:	85 c0                	test   eax,eax
c0010b48:	75 1a                	jne    c0010b64 <Semaphore::tryAcquire()+0xb8>
c0010b4a:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010b4f:	85 c0                	test   eax,eax
c0010b51:	74 11                	je     c0010b64 <Semaphore::tryAcquire()+0xb8>
c0010b53:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010b5d:	e8 ae 62 00 00       	call   c0016e10 <schedule()>
c0010b62:	66 90                	xchg   ax,ax
c0010b64:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010b6c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010b71:	85 c0                	test   eax,eax
c0010b73:	75 03                	jne    c0010b78 <Semaphore::tryAcquire()+0xcc>
c0010b75:	fb                   	sti    
c0010b76:	66 90                	xchg   ax,ax
c0010b78:	b0 00                	mov    al,0x0
c0010b7a:	66 90                	xchg   ax,ax
c0010b7c:	83 c4 0c             	add    esp,0xc
c0010b7f:	c3                   	ret    

c0010b80 <Semaphore::assertLocked(char const*)>:
c0010b80:	83 ec 0c             	sub    esp,0xc
c0010b83:	fa                   	cli    
c0010b84:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010b89:	83 c0 01             	add    eax,0x1
c0010b8c:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010b91:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010b96:	83 c0 01             	add    eax,0x1
c0010b99:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ba2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bab:	39 c2                	cmp    edx,eax
c0010bad:	7d 11                	jge    c0010bc0 <Semaphore::assertLocked(char const*)+0x40>
c0010baf:	83 ec 0c             	sub    esp,0xc
c0010bb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010bb6:	e8 39 f1 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0010bbb:	83 c4 10             	add    esp,0x10
c0010bbe:	66 90                	xchg   ax,ax
c0010bc0:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010bc5:	83 e8 01             	sub    eax,0x1
c0010bc8:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010bcd:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010bd2:	85 c0                	test   eax,eax
c0010bd4:	75 1a                	jne    c0010bf0 <Semaphore::assertLocked(char const*)+0x70>
c0010bd6:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010bdb:	85 c0                	test   eax,eax
c0010bdd:	74 11                	je     c0010bf0 <Semaphore::assertLocked(char const*)+0x70>
c0010bdf:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010be9:	e8 22 62 00 00       	call   c0016e10 <schedule()>
c0010bee:	66 90                	xchg   ax,ax
c0010bf0:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010bf8:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010bfd:	85 c0                	test   eax,eax
c0010bff:	75 03                	jne    c0010c04 <Semaphore::assertLocked(char const*)+0x84>
c0010c01:	fb                   	sti    
c0010c02:	66 90                	xchg   ax,ax
c0010c04:	90                   	nop
c0010c05:	83 c4 0c             	add    esp,0xc
c0010c08:	c3                   	ret    
c0010c09:	90                   	nop
c0010c0a:	66 90                	xchg   ax,ax

c0010c0c <Semaphore::acquire(int)>:
c0010c0c:	83 ec 1c             	sub    esp,0x1c
c0010c0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010c14:	0f 84 ae 00 00 00    	je     c0010cc8 <Semaphore::acquire(int)+0xbc>
c0010c1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c22:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010c27:	90                   	nop
c0010c28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010c2d:	85 c0                	test   eax,eax
c0010c2f:	0f 84 87 00 00 00    	je     c0010cbc <Semaphore::acquire(int)+0xb0>
c0010c35:	83 ec 0c             	sub    esp,0xc
c0010c38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c3c:	e8 6b fe ff ff       	call   c0010aac <Semaphore::tryAcquire()>
c0010c41:	83 c4 10             	add    esp,0x10
c0010c44:	83 f0 01             	xor    eax,0x1
c0010c47:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010c4b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010c4f:	83 f0 01             	xor    eax,0x1
c0010c52:	0f b6 c0             	movzx  eax,al
c0010c55:	85 c0                	test   eax,eax
c0010c57:	75 5f                	jne    c0010cb8 <Semaphore::acquire(int)+0xac>
c0010c59:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010c5e:	7f 34                	jg     c0010c94 <Semaphore::acquire(int)+0x88>
c0010c60:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010c64:	89 d0                	mov    eax,edx
c0010c66:	c1 e0 02             	shl    eax,0x2
c0010c69:	01 d0                	add    eax,edx
c0010c6b:	01 c0                	add    eax,eax
c0010c6d:	89 c2                	mov    edx,eax
c0010c6f:	c1 fa 1f             	sar    edx,0x1f
c0010c72:	83 ec 08             	sub    esp,0x8
c0010c75:	52                   	push   edx
c0010c76:	50                   	push   eax
c0010c77:	e8 88 63 00 00       	call   c0017004 <milliTenthSleep(unsigned long long)>
c0010c7c:	83 c4 10             	add    esp,0x10
c0010c7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c83:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010c87:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010c8f:	eb 97                	jmp    c0010c28 <Semaphore::acquire(int)+0x1c>
c0010c91:	8d 76 00             	lea    esi,[esi+0x0]
c0010c94:	83 ec 08             	sub    esp,0x8
c0010c97:	6a 00                	push   0x0
c0010c99:	68 90 01 00 00       	push   0x190
c0010c9e:	e8 61 63 00 00       	call   c0017004 <milliTenthSleep(unsigned long long)>
c0010ca3:	83 c4 10             	add    esp,0x10
c0010ca6:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010cab:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010cb0:	e9 73 ff ff ff       	jmp    c0010c28 <Semaphore::acquire(int)+0x1c>
c0010cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cb8:	90                   	nop
c0010cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010cbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cc0:	e9 fb 00 00 00       	jmp    c0010dc0 <Semaphore::acquire(int)+0x1b4>
c0010cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cc8:	fa                   	cli    
c0010cc9:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010cce:	83 c0 01             	add    eax,0x1
c0010cd1:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010cd6:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010cdb:	83 c0 01             	add    eax,0x1
c0010cde:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010ce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ce7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010cea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cf0:	39 c2                	cmp    edx,eax
c0010cf2:	7d 14                	jge    c0010d08 <Semaphore::acquire(int)+0xfc>
c0010cf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cf8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010cfb:	8d 50 01             	lea    edx,[eax+0x1]
c0010cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d02:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d05:	eb 6d                	jmp    c0010d74 <Semaphore::acquire(int)+0x168>
c0010d07:	90                   	nop
c0010d08:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d0f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010d16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d1d:	85 c0                	test   eax,eax
c0010d1f:	75 13                	jne    c0010d34 <Semaphore::acquire(int)+0x128>
c0010d21:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d26:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d2c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d2f:	eb 17                	jmp    c0010d48 <Semaphore::acquire(int)+0x13c>
c0010d31:	8d 76 00             	lea    esi,[esi+0x0]
c0010d34:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010d39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d3d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d40:	8b 12                	mov    edx,DWORD PTR [edx]
c0010d42:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010d45:	8d 76 00             	lea    esi,[esi+0x0]
c0010d48:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d4d:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010d56:	83 ec 0c             	sub    esp,0xc
c0010d59:	68 d0 43 02 c0       	push   0xc00243d0
c0010d5e:	e8 19 62 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010d63:	83 c4 10             	add    esp,0x10
c0010d66:	83 ec 0c             	sub    esp,0xc
c0010d69:	6a 05                	push   0x5
c0010d6b:	e8 60 61 00 00       	call   c0016ed0 <blockTask(TaskState)>
c0010d70:	83 c4 10             	add    esp,0x10
c0010d73:	90                   	nop
c0010d74:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010d79:	83 e8 01             	sub    eax,0x1
c0010d7c:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010d81:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010d86:	85 c0                	test   eax,eax
c0010d88:	75 1a                	jne    c0010da4 <Semaphore::acquire(int)+0x198>
c0010d8a:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010d8f:	85 c0                	test   eax,eax
c0010d91:	74 11                	je     c0010da4 <Semaphore::acquire(int)+0x198>
c0010d93:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010d9d:	e8 6e 60 00 00       	call   c0016e10 <schedule()>
c0010da2:	66 90                	xchg   ax,ax
c0010da4:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010dac:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010db1:	85 c0                	test   eax,eax
c0010db3:	75 03                	jne    c0010db8 <Semaphore::acquire(int)+0x1ac>
c0010db5:	fb                   	sti    
c0010db6:	66 90                	xchg   ax,ax
c0010db8:	b8 00 00 00 00       	mov    eax,0x0
c0010dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0010dc0:	83 c4 1c             	add    esp,0x1c
c0010dc3:	c3                   	ret    

c0010dc4 <Semaphore::acquire()>:
c0010dc4:	83 ec 0c             	sub    esp,0xc
c0010dc7:	83 ec 08             	sub    esp,0x8
c0010dca:	6a 00                	push   0x0
c0010dcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd0:	e8 37 fe ff ff       	call   c0010c0c <Semaphore::acquire(int)>
c0010dd5:	83 c4 10             	add    esp,0x10
c0010dd8:	90                   	nop
c0010dd9:	83 c4 0c             	add    esp,0xc
c0010ddc:	c3                   	ret    
c0010ddd:	90                   	nop
c0010dde:	66 90                	xchg   ax,ax

c0010de0 <Semaphore::release()>:
c0010de0:	83 ec 1c             	sub    esp,0x1c
c0010de3:	fa                   	cli    
c0010de4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010de9:	83 c0 01             	add    eax,0x1
c0010dec:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010df1:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010df6:	83 c0 01             	add    eax,0x1
c0010df9:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010dfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e05:	85 c0                	test   eax,eax
c0010e07:	74 2b                	je     c0010e34 <Semaphore::release()+0x54>
c0010e09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e18:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010e1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e22:	83 ec 0c             	sub    esp,0xc
c0010e25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e29:	e8 3e 63 00 00       	call   c001716c <unblockTask(ThreadControlBlock*)>
c0010e2e:	83 c4 10             	add    esp,0x10
c0010e31:	eb 15                	jmp    c0010e48 <Semaphore::release()+0x68>
c0010e33:	90                   	nop
c0010e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e3b:	8d 50 ff             	lea    edx,[eax-0x1]
c0010e3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e42:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e45:	8d 76 00             	lea    esi,[esi+0x0]
c0010e48:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010e4d:	83 e8 01             	sub    eax,0x1
c0010e50:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010e55:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010e5a:	85 c0                	test   eax,eax
c0010e5c:	75 1a                	jne    c0010e78 <Semaphore::release()+0x98>
c0010e5e:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010e63:	85 c0                	test   eax,eax
c0010e65:	74 11                	je     c0010e78 <Semaphore::release()+0x98>
c0010e67:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010e71:	e8 9a 5f 00 00       	call   c0016e10 <schedule()>
c0010e76:	66 90                	xchg   ax,ax
c0010e78:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010e80:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010e85:	85 c0                	test   eax,eax
c0010e87:	75 03                	jne    c0010e8c <Semaphore::release()+0xac>
c0010e89:	fb                   	sti    
c0010e8a:	66 90                	xchg   ax,ax
c0010e8c:	90                   	nop
c0010e8d:	83 c4 1c             	add    esp,0x1c
c0010e90:	c3                   	ret    

c0010e91 <KiSigKill(int)>:
c0010e91:	83 ec 0c             	sub    esp,0xc
c0010e94:	6a 00                	push   0x0
c0010e96:	6a 00                	push   0x0
c0010e98:	6a ff                	push   0xffffffff
c0010e9a:	6a 01                	push   0x1
c0010e9c:	e8 b1 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ea1:	83 c4 1c             	add    esp,0x1c
c0010ea4:	c3                   	ret    

c0010ea5 <KiDefaultSignalHandlerIgnore(int)>:
c0010ea5:	c3                   	ret    

c0010ea6 <KiDefaultSignalHandlerPause(int)>:
c0010ea6:	57                   	push   edi
c0010ea7:	b9 07 00 00 00       	mov    ecx,0x7
c0010eac:	56                   	push   esi
c0010ead:	be 2b 44 02 c0       	mov    esi,0xc002442b
c0010eb2:	83 ec 24             	sub    esp,0x24
c0010eb5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010eb9:	fc                   	cld    
c0010eba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010ebc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010ec0:	50                   	push   eax
c0010ec1:	6a 00                	push   0x0
c0010ec3:	6a 00                	push   0x0
c0010ec5:	6a 27                	push   0x27
c0010ec7:	e8 86 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ecc:	83 c4 34             	add    esp,0x34
c0010ecf:	5e                   	pop    esi
c0010ed0:	5f                   	pop    edi
c0010ed1:	c3                   	ret    

c0010ed2 <KiDefaultSignalHandlerResume(int)>:
c0010ed2:	57                   	push   edi
c0010ed3:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010ed8:	56                   	push   esi
c0010ed9:	be 47 44 02 c0       	mov    esi,0xc0024447
c0010ede:	83 ec 24             	sub    esp,0x24
c0010ee1:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010ee5:	fc                   	cld    
c0010ee6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ee8:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010eec:	50                   	push   eax
c0010eed:	6a 00                	push   0x0
c0010eef:	6a 00                	push   0x0
c0010ef1:	6a 27                	push   0x27
c0010ef3:	e8 5a 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ef8:	83 c4 34             	add    esp,0x34
c0010efb:	5e                   	pop    esi
c0010efc:	5f                   	pop    edi
c0010efd:	c3                   	ret    

c0010efe <KeDeinitSignals(SigHandlerBlock*)>:
c0010efe:	e9 a4 e9 ff ff       	jmp    c000f8a7 <free>

c0010f03 <KeInitSignals()>:
c0010f03:	53                   	push   ebx
c0010f04:	83 ec 14             	sub    esp,0x14
c0010f07:	68 c8 00 00 00       	push   0xc8
c0010f0c:	e8 86 e9 ff ff       	call   c000f897 <malloc>
c0010f11:	83 c4 0c             	add    esp,0xc
c0010f14:	89 c3                	mov    ebx,eax
c0010f16:	6a 04                	push   0x4
c0010f18:	6a 00                	push   0x0
c0010f1a:	50                   	push   eax
c0010f1b:	e8 d0 f5 fe ff       	call   c00004f0 <memset>
c0010f20:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010f2a:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0010f34:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010f3b:	83 c4 0c             	add    esp,0xc
c0010f3e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010f44:	6a 20                	push   0x20
c0010f46:	6a 00                	push   0x0
c0010f48:	50                   	push   eax
c0010f49:	e8 a2 f5 fe ff       	call   c00004f0 <memset>
c0010f4e:	83 c4 0c             	add    esp,0xc
c0010f51:	6a 44                	push   0x44
c0010f53:	6a 00                	push   0x0
c0010f55:	53                   	push   ebx
c0010f56:	e8 95 f5 fe ff       	call   c00004f0 <memset>
c0010f5b:	83 c4 0c             	add    esp,0xc
c0010f5e:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010f64:	6a 11                	push   0x11
c0010f66:	6a 00                	push   0x0
c0010f68:	50                   	push   eax
c0010f69:	e8 82 f5 fe ff       	call   c00004f0 <memset>
c0010f6e:	89 d8                	mov    eax,ebx
c0010f70:	83 c4 18             	add    esp,0x18
c0010f73:	5b                   	pop    ebx
c0010f74:	c3                   	ret    

c0010f75 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010f75:	53                   	push   ebx
c0010f76:	b8 01 00 00 00       	mov    eax,0x1
c0010f7b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010f7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f83:	83 f9 10             	cmp    ecx,0x10
c0010f86:	7f 21                	jg     c0010fa9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010f88:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8f:	89 03                	mov    DWORD PTR [ebx],eax
c0010f91:	b8 01 00 00 00       	mov    eax,0x1
c0010f96:	d3 e0                	shl    eax,cl
c0010f98:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010f9c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010f9f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010fa7:	31 c0                	xor    eax,eax
c0010fa9:	5b                   	pop    ebx
c0010faa:	c3                   	ret    

c0010fab <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010fab:	55                   	push   ebp
c0010fac:	57                   	push   edi
c0010fad:	bf 08 00 00 00       	mov    edi,0x8
c0010fb2:	56                   	push   esi
c0010fb3:	53                   	push   ebx
c0010fb4:	83 ec 14             	sub    esp,0x14
c0010fb7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010fbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010fbf:	68 64 44 02 c0       	push   0xc0024464
c0010fc4:	e8 b3 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010fc9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010fd0:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010fd6:	83 c4 10             	add    esp,0x10
c0010fd9:	31 c9                	xor    ecx,ecx
c0010fdb:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010fdf:	99                   	cdq    
c0010fe0:	f7 ff                	idiv   edi
c0010fe2:	8d 42 24             	lea    eax,[edx+0x24]
c0010fe5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010fe9:	85 f6                	test   esi,esi
c0010feb:	75 1a                	jne    c0011007 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0010fed:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010ff1:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0010ff5:	50                   	push   eax
c0010ff6:	50                   	push   eax
c0010ff7:	52                   	push   edx
c0010ff8:	68 7a 44 02 c0       	push   0xc002447a
c0010ffd:	e8 7a 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011002:	83 c4 10             	add    esp,0x10
c0011005:	eb 1b                	jmp    c0011022 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0011007:	41                   	inc    ecx
c0011008:	83 f9 08             	cmp    ecx,0x8
c001100b:	75 ce                	jne    c0010fdb <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c001100d:	83 ec 0c             	sub    esp,0xc
c0011010:	be 01 00 00 00       	mov    esi,0x1
c0011015:	68 9b 44 02 c0       	push   0xc002449b
c001101a:	e8 5d 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	83 c4 0c             	add    esp,0xc
c0011025:	89 f0                	mov    eax,esi
c0011027:	5b                   	pop    ebx
c0011028:	5e                   	pop    esi
c0011029:	5f                   	pop    edi
c001102a:	5d                   	pop    ebp
c001102b:	c3                   	ret    

c001102c <KeCheckSignal(SigHandlerBlock*, int*)>:
c001102c:	55                   	push   ebp
c001102d:	57                   	push   edi
c001102e:	56                   	push   esi
c001102f:	53                   	push   ebx
c0011030:	83 ec 1c             	sub    esp,0x1c
c0011033:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011037:	85 db                	test   ebx,ebx
c0011039:	0f 84 e0 00 00 00    	je     c001111f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001103f:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011046:	0f 84 d3 00 00 00    	je     c001111f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001104c:	31 c9                	xor    ecx,ecx
c001104e:	bf 08 00 00 00       	mov    edi,0x8
c0011053:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011059:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001105c:	99                   	cdq    
c001105d:	f7 ff                	idiv   edi
c001105f:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011066:	85 ed                	test   ebp,ebp
c0011068:	0f 84 d2 00 00 00    	je     c0011140 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c001106e:	89 e9                	mov    ecx,ebp
c0011070:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011076:	bf 01 00 00 00       	mov    edi,0x1
c001107b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001107f:	d3 e7                	shl    edi,cl
c0011081:	31 c9                	xor    ecx,ecx
c0011083:	b8 01 00 00 00       	mov    eax,0x1
c0011088:	d3 e0                	shl    eax,cl
c001108a:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c001108e:	74 0a                	je     c001109a <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0011090:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011094:	0f 85 85 00 00 00    	jne    c001111f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001109a:	41                   	inc    ecx
c001109b:	83 f9 11             	cmp    ecx,0x11
c001109e:	75 e3                	jne    c0011083 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c00110a0:	46                   	inc    esi
c00110a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110a5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00110ab:	09 f8                	or     eax,edi
c00110ad:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00110b8:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00110be:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00110c5:	31 c0                	xor    eax,eax
c00110c7:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00110cf:	74 09                	je     c00110da <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c00110d1:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00110d8:	eb 06                	jmp    c00110e0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c00110da:	40                   	inc    eax
c00110db:	83 f8 08             	cmp    eax,0x8
c00110de:	75 e7                	jne    c00110c7 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c00110e0:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00110e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00110e7:	83 fd 09             	cmp    ebp,0x9
c00110ea:	89 2a                	mov    DWORD PTR [edx],ebp
c00110ec:	75 14                	jne    c0011102 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c00110ee:	83 ec 0c             	sub    esp,0xc
c00110f1:	68 ac 44 02 c0       	push   0xc00244ac
c00110f6:	e8 81 5e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00110fb:	b8 91 0e 01 c0       	mov    eax,0xc0010e91
c0011100:	eb 39                	jmp    c001113b <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011102:	83 f8 01             	cmp    eax,0x1
c0011105:	75 1c                	jne    c0011123 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011107:	83 ec 0c             	sub    esp,0xc
c001110a:	f7 d7                	not    edi
c001110c:	68 b6 44 02 c0       	push   0xc00244b6
c0011111:	e8 66 5e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011116:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001111c:	83 c4 10             	add    esp,0x10
c001111f:	31 c0                	xor    eax,eax
c0011121:	eb 30                	jmp    c0011153 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011123:	85 c0                	test   eax,eax
c0011125:	75 2c                	jne    c0011153 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011127:	83 ec 0c             	sub    esp,0xc
c001112a:	68 c3 44 02 c0       	push   0xc00244c3
c001112f:	e8 48 5e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011134:	8b 04 ad c0 67 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd9840]
c001113b:	83 c4 10             	add    esp,0x10
c001113e:	eb 13                	jmp    c0011153 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011140:	46                   	inc    esi
c0011141:	41                   	inc    ecx
c0011142:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011148:	83 f9 08             	cmp    ecx,0x8
c001114b:	0f 85 02 ff ff ff    	jne    c0011053 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011151:	eb cc                	jmp    c001111f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011153:	83 c4 1c             	add    esp,0x1c
c0011156:	5b                   	pop    ebx
c0011157:	5e                   	pop    esi
c0011158:	5f                   	pop    edi
c0011159:	5d                   	pop    ebp
c001115a:	c3                   	ret    

c001115b <KiCheckSignalZ>:
c001115b:	80 3d 0c c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c10c,0x0
c0011162:	74 43                	je     c00111a7 <KiCheckSignalZ+0x4c>
c0011164:	83 ec 24             	sub    esp,0x24
c0011167:	8d 44 24 14          	lea    eax,[esp+0x14]
c001116b:	50                   	push   eax
c001116c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011171:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011174:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001117a:	e8 ad fe ff ff       	call   c001102c <KeCheckSignal(SigHandlerBlock*, int*)>
c001117f:	83 c4 10             	add    esp,0x10
c0011182:	31 d2                	xor    edx,edx
c0011184:	85 c0                	test   eax,eax
c0011186:	74 19                	je     c00111a1 <KiCheckSignalZ+0x46>
c0011188:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001118e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011191:	89 02                	mov    DWORD PTR [edx],eax
c0011193:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001119a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001119e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00111a1:	89 d0                	mov    eax,edx
c00111a3:	83 c4 1c             	add    esp,0x1c
c00111a6:	c3                   	ret    
c00111a7:	31 d2                	xor    edx,edx
c00111a9:	89 d0                	mov    eax,edx
c00111ab:	c3                   	ret    

c00111ac <KeCompleteSignal(SigHandlerBlock*, int)>:
c00111ac:	56                   	push   esi
c00111ad:	53                   	push   ebx
c00111ae:	bb 01 00 00 00       	mov    ebx,0x1
c00111b3:	52                   	push   edx
c00111b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00111b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111bc:	d3 e3                	shl    ebx,cl
c00111be:	83 f9 10             	cmp    ecx,0x10
c00111c1:	7f 08                	jg     c00111cb <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00111c3:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00111c9:	75 10                	jne    c00111db <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00111cb:	83 ec 0c             	sub    esp,0xc
c00111ce:	68 e6 44 02 c0       	push   0xc00244e6
c00111d3:	e8 1c eb ff ff       	call   c000fcf4 <KePanic(char const*)>
c00111d8:	83 c4 10             	add    esp,0x10
c00111db:	f7 d3                	not    ebx
c00111dd:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00111e3:	58                   	pop    eax
c00111e4:	5b                   	pop    ebx
c00111e5:	5e                   	pop    esi
c00111e6:	c3                   	ret    

c00111e7 <KiFinishSignalZ>:
c00111e7:	53                   	push   ebx
c00111e8:	83 ec 08             	sub    esp,0x8
c00111eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00111f7:	83 fa 08             	cmp    edx,0x8
c00111fa:	75 0c                	jne    c0011208 <KiFinishSignalZ+0x21>
c00111fc:	83 ec 0c             	sub    esp,0xc
c00111ff:	50                   	push   eax
c0011200:	e8 67 5f 00 00       	call   c001716c <unblockTask(ThreadControlBlock*)>
c0011205:	83 c4 10             	add    esp,0x10
c0011208:	50                   	push   eax
c0011209:	50                   	push   eax
c001120a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001120d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011212:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011215:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001121b:	e8 8c ff ff ff       	call   c00111ac <KeCompleteSignal(SigHandlerBlock*, int)>
c0011220:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011226:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001122d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011234:	83 c4 18             	add    esp,0x18
c0011237:	5b                   	pop    ebx
c0011238:	c3                   	ret    

c0011239 <SysSeekDir(regs*)>:
c0011239:	31 c0                	xor    eax,eax
c001123b:	31 d2                	xor    edx,edx
c001123d:	c3                   	ret    

c001123e <SysTellDir(regs*)>:
c001123e:	31 c0                	xor    eax,eax
c0011240:	31 d2                	xor    edx,edx
c0011242:	c3                   	ret    

c0011243 <SysVerify(regs*)>:
c0011243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011247:	31 d2                	xor    edx,edx
c0011249:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001124c:	c3                   	ret    

c001124d <SysGetArgc(regs*)>:
c001124d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011252:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011255:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c001125b:	89 c2                	mov    edx,eax
c001125d:	c1 fa 1f             	sar    edx,0x1f
c0011260:	c3                   	ret    

c0011261 <SysTTYName(regs*)>:
c0011261:	b8 01 00 00 00       	mov    eax,0x1
c0011266:	31 d2                	xor    edx,edx
c0011268:	c3                   	ret    

c0011269 <SysFormatDisk(regs*)>:
c0011269:	56                   	push   esi
c001126a:	53                   	push   ebx
c001126b:	83 ec 04             	sub    esp,0x4
c001126e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011272:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c0011278:	eb 28                	jmp    c00112a2 <SysFormatDisk(regs*)+0x39>
c001127a:	83 ec 0c             	sub    esp,0xc
c001127d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011280:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011283:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011285:	51                   	push   ecx
c0011286:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011289:	51                   	push   ecx
c001128a:	50                   	push   eax
c001128b:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0011292:	50                   	push   eax
c0011293:	53                   	push   ebx
c0011294:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011297:	83 c4 20             	add    esp,0x20
c001129a:	83 f8 08             	cmp    eax,0x8
c001129d:	75 14                	jne    c00112b3 <SysFormatDisk(regs*)+0x4a>
c001129f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00112a2:	85 db                	test   ebx,ebx
c00112a4:	75 d4                	jne    c001127a <SysFormatDisk(regs*)+0x11>
c00112a6:	83 c4 04             	add    esp,0x4
c00112a9:	b8 03 00 00 00       	mov    eax,0x3
c00112ae:	31 d2                	xor    edx,edx
c00112b0:	5b                   	pop    ebx
c00112b1:	5e                   	pop    esi
c00112b2:	c3                   	ret    
c00112b3:	85 c0                	test   eax,eax
c00112b5:	74 1f                	je     c00112d6 <SysFormatDisk(regs*)+0x6d>
c00112b7:	83 f8 09             	cmp    eax,0x9
c00112ba:	74 0d                	je     c00112c9 <SysFormatDisk(regs*)+0x60>
c00112bc:	83 c4 04             	add    esp,0x4
c00112bf:	b8 02 00 00 00       	mov    eax,0x2
c00112c4:	31 d2                	xor    edx,edx
c00112c6:	5b                   	pop    ebx
c00112c7:	5e                   	pop    esi
c00112c8:	c3                   	ret    
c00112c9:	83 c4 04             	add    esp,0x4
c00112cc:	b8 01 00 00 00       	mov    eax,0x1
c00112d1:	31 d2                	xor    edx,edx
c00112d3:	5b                   	pop    ebx
c00112d4:	5e                   	pop    esi
c00112d5:	c3                   	ret    
c00112d6:	83 c4 04             	add    esp,0x4
c00112d9:	31 c0                	xor    eax,eax
c00112db:	31 d2                	xor    edx,edx
c00112dd:	5b                   	pop    ebx
c00112de:	5e                   	pop    esi
c00112df:	c3                   	ret    

c00112e0 <SysSetDiskVolumeLabel(regs*)>:
c00112e0:	56                   	push   esi
c00112e1:	53                   	push   ebx
c00112e2:	83 ec 04             	sub    esp,0x4
c00112e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00112e9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00112ec:	83 f8 19             	cmp    eax,0x19
c00112ef:	77 33                	ja     c0011324 <SysSetDiskVolumeLabel(regs*)+0x44>
c00112f1:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c00112f8:	85 c9                	test   ecx,ecx
c00112fa:	74 28                	je     c0011324 <SysSetDiskVolumeLabel(regs*)+0x44>
c00112fc:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00112ff:	85 db                	test   ebx,ebx
c0011301:	74 21                	je     c0011324 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011303:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011309:	85 d2                	test   edx,edx
c001130b:	74 17                	je     c0011324 <SysSetDiskVolumeLabel(regs*)+0x44>
c001130d:	8b 32                	mov    esi,DWORD PTR [edx]
c001130f:	53                   	push   ebx
c0011310:	50                   	push   eax
c0011311:	51                   	push   ecx
c0011312:	52                   	push   edx
c0011313:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011316:	83 c4 10             	add    esp,0x10
c0011319:	89 c2                	mov    edx,eax
c001131b:	83 c4 04             	add    esp,0x4
c001131e:	c1 fa 1f             	sar    edx,0x1f
c0011321:	5b                   	pop    ebx
c0011322:	5e                   	pop    esi
c0011323:	c3                   	ret    
c0011324:	83 c4 04             	add    esp,0x4
c0011327:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001132c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011331:	5b                   	pop    ebx
c0011332:	5e                   	pop    esi
c0011333:	c3                   	ret    

c0011334 <SysGetDiskVolumeLabel(regs*)>:
c0011334:	57                   	push   edi
c0011335:	56                   	push   esi
c0011336:	53                   	push   ebx
c0011337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001133e:	83 fa 19             	cmp    edx,0x19
c0011341:	77 3c                	ja     c001137f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011343:	8b 0c 95 e0 ba 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4520]
c001134a:	85 c9                	test   ecx,ecx
c001134c:	74 31                	je     c001137f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001134e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011351:	85 db                	test   ebx,ebx
c0011353:	74 2a                	je     c001137f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011355:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011358:	85 f6                	test   esi,esi
c001135a:	74 23                	je     c001137f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001135c:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011362:	85 c0                	test   eax,eax
c0011364:	74 19                	je     c001137f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	8b 38                	mov    edi,DWORD PTR [eax]
c001136b:	56                   	push   esi
c001136c:	53                   	push   ebx
c001136d:	52                   	push   edx
c001136e:	51                   	push   ecx
c001136f:	50                   	push   eax
c0011370:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011373:	83 c4 20             	add    esp,0x20
c0011376:	89 c2                	mov    edx,eax
c0011378:	5b                   	pop    ebx
c0011379:	c1 fa 1f             	sar    edx,0x1f
c001137c:	5e                   	pop    esi
c001137d:	5f                   	pop    edi
c001137e:	c3                   	ret    
c001137f:	5b                   	pop    ebx
c0011380:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011385:	ba ff ff ff ff       	mov    edx,0xffffffff
c001138a:	5e                   	pop    esi
c001138b:	5f                   	pop    edi
c001138c:	c3                   	ret    

c001138d <SysRealpath(regs*)>:
c001138d:	83 ec 0c             	sub    esp,0xc
c0011390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011394:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011397:	85 d2                	test   edx,edx
c0011399:	74 07                	je     c00113a2 <SysRealpath(regs*)+0x15>
c001139b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001139e:	85 c0                	test   eax,eax
c00113a0:	75 0b                	jne    c00113ad <SysRealpath(regs*)+0x20>
c00113a2:	b8 01 00 00 00       	mov    eax,0x1
c00113a7:	31 d2                	xor    edx,edx
c00113a9:	83 c4 0c             	add    esp,0xc
c00113ac:	c3                   	ret    
c00113ad:	6a 00                	push   0x0
c00113af:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00113b5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00113b8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00113be:	51                   	push   ecx
c00113bf:	52                   	push   edx
c00113c0:	50                   	push   eax
c00113c1:	e8 ac 6a ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00113c6:	83 c4 10             	add    esp,0x10
c00113c9:	31 c0                	xor    eax,eax
c00113cb:	31 d2                	xor    edx,edx
c00113cd:	83 c4 0c             	add    esp,0xc
c00113d0:	c3                   	ret    

c00113d1 <SysReadDir(regs*)>:
c00113d1:	53                   	push   ebx
c00113d2:	83 ec 18             	sub    esp,0x18
c00113d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113d9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00113dc:	83 f8 02             	cmp    eax,0x2
c00113df:	76 61                	jbe    c0011442 <SysReadDir(regs*)+0x71>
c00113e1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00113e8:	77 49                	ja     c0011433 <SysReadDir(regs*)+0x62>
c00113ea:	83 ec 0c             	sub    esp,0xc
c00113ed:	50                   	push   eax
c00113ee:	e8 d6 1d 00 00       	call   c00131c9 <KeGetFileFromDescriptor(int)>
c00113f3:	83 c4 10             	add    esp,0x10
c00113f6:	85 c0                	test   eax,eax
c00113f8:	74 39                	je     c0011433 <SysReadDir(regs*)+0x62>
c00113fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011402:	83 ec 0c             	sub    esp,0xc
c0011405:	8b 10                	mov    edx,DWORD PTR [eax]
c0011407:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001140b:	51                   	push   ecx
c001140c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001140f:	51                   	push   ecx
c0011410:	6a 00                	push   0x0
c0011412:	68 10 01 00 00       	push   0x110
c0011417:	50                   	push   eax
c0011418:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001141b:	83 c4 20             	add    esp,0x20
c001141e:	85 c0                	test   eax,eax
c0011420:	74 29                	je     c001144b <SysReadDir(regs*)+0x7a>
c0011422:	83 f8 07             	cmp    eax,0x7
c0011425:	74 1b                	je     c0011442 <SysReadDir(regs*)+0x71>
c0011427:	b8 02 00 00 00       	mov    eax,0x2
c001142c:	31 d2                	xor    edx,edx
c001142e:	83 c4 18             	add    esp,0x18
c0011431:	5b                   	pop    ebx
c0011432:	c3                   	ret    
c0011433:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011438:	ba ff ff ff ff       	mov    edx,0xffffffff
c001143d:	83 c4 18             	add    esp,0x18
c0011440:	5b                   	pop    ebx
c0011441:	c3                   	ret    
c0011442:	b8 01 00 00 00       	mov    eax,0x1
c0011447:	31 d2                	xor    edx,edx
c0011449:	eb e3                	jmp    c001142e <SysReadDir(regs*)+0x5d>
c001144b:	31 c0                	xor    eax,eax
c001144d:	31 d2                	xor    edx,edx
c001144f:	eb dd                	jmp    c001142e <SysReadDir(regs*)+0x5d>

c0011451 <SysIsATTY(regs*)>:
c0011451:	83 ec 0c             	sub    esp,0xc
c0011454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011458:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001145b:	83 f8 02             	cmp    eax,0x2
c001145e:	76 07                	jbe    c0011467 <SysIsATTY(regs*)+0x16>
c0011460:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011465:	75 26                	jne    c001148d <SysIsATTY(regs*)+0x3c>
c0011467:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001146c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001146f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011475:	85 c0                	test   eax,eax
c0011477:	74 24                	je     c001149d <SysIsATTY(regs*)+0x4c>
c0011479:	83 ec 0c             	sub    esp,0xc
c001147c:	8b 10                	mov    edx,DWORD PTR [eax]
c001147e:	50                   	push   eax
c001147f:	ff 12                	call   DWORD PTR [edx]
c0011481:	31 d2                	xor    edx,edx
c0011483:	0f b6 c0             	movzx  eax,al
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	83 c4 0c             	add    esp,0xc
c001148c:	c3                   	ret    
c001148d:	83 ec 0c             	sub    esp,0xc
c0011490:	50                   	push   eax
c0011491:	e8 33 1d 00 00       	call   c00131c9 <KeGetFileFromDescriptor(int)>
c0011496:	83 c4 10             	add    esp,0x10
c0011499:	85 c0                	test   eax,eax
c001149b:	75 dc                	jne    c0011479 <SysIsATTY(regs*)+0x28>
c001149d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114a7:	83 c4 0c             	add    esp,0xc
c00114aa:	c3                   	ret    

c00114ab <SysSeek(regs*)>:
c00114ab:	53                   	push   ebx
c00114ac:	83 ec 08             	sub    esp,0x8
c00114af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114b6:	8d 50 fd             	lea    edx,[eax-0x3]
c00114b9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00114bf:	77 39                	ja     c00114fa <SysSeek(regs*)+0x4f>
c00114c1:	83 ec 0c             	sub    esp,0xc
c00114c4:	50                   	push   eax
c00114c5:	e8 ff 1c 00 00       	call   c00131c9 <KeGetFileFromDescriptor(int)>
c00114ca:	83 c4 10             	add    esp,0x10
c00114cd:	85 c0                	test   eax,eax
c00114cf:	74 29                	je     c00114fa <SysSeek(regs*)+0x4f>
c00114d1:	83 ec 04             	sub    esp,0x4
c00114d4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00114d7:	31 db                	xor    ebx,ebx
c00114d9:	53                   	push   ebx
c00114da:	51                   	push   ecx
c00114db:	50                   	push   eax
c00114dc:	e8 85 6d ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00114e1:	83 c4 10             	add    esp,0x10
c00114e4:	85 c0                	test   eax,eax
c00114e6:	0f 95 c0             	setne  al
c00114e9:	31 d2                	xor    edx,edx
c00114eb:	0f b6 c0             	movzx  eax,al
c00114ee:	f7 d8                	neg    eax
c00114f0:	83 d2 00             	adc    edx,0x0
c00114f3:	83 c4 08             	add    esp,0x8
c00114f6:	f7 da                	neg    edx
c00114f8:	5b                   	pop    ebx
c00114f9:	c3                   	ret    
c00114fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011504:	83 c4 08             	add    esp,0x8
c0011507:	5b                   	pop    ebx
c0011508:	c3                   	ret    

c0011509 <SysTell(regs*)>:
c0011509:	53                   	push   ebx
c001150a:	83 ec 08             	sub    esp,0x8
c001150d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011511:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011514:	83 f8 02             	cmp    eax,0x2
c0011517:	76 56                	jbe    c001156f <SysTell(regs*)+0x66>
c0011519:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001151e:	76 19                	jbe    c0011539 <SysTell(regs*)+0x30>
c0011520:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011523:	31 d2                	xor    edx,edx
c0011525:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001152b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011532:	31 c0                	xor    eax,eax
c0011534:	83 c4 08             	add    esp,0x8
c0011537:	5b                   	pop    ebx
c0011538:	c3                   	ret    
c0011539:	83 ec 0c             	sub    esp,0xc
c001153c:	50                   	push   eax
c001153d:	e8 87 1c 00 00       	call   c00131c9 <KeGetFileFromDescriptor(int)>
c0011542:	83 c4 10             	add    esp,0x10
c0011545:	85 c0                	test   eax,eax
c0011547:	74 26                	je     c001156f <SysTell(regs*)+0x66>
c0011549:	83 ec 08             	sub    esp,0x8
c001154c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001154f:	52                   	push   edx
c0011550:	50                   	push   eax
c0011551:	e8 bc 6d ff ff       	call   c0008312 <File::tell(unsigned long long*)>
c0011556:	83 c4 10             	add    esp,0x10
c0011559:	85 c0                	test   eax,eax
c001155b:	0f 95 c0             	setne  al
c001155e:	31 d2                	xor    edx,edx
c0011560:	0f b6 c0             	movzx  eax,al
c0011563:	f7 d8                	neg    eax
c0011565:	83 d2 00             	adc    edx,0x0
c0011568:	83 c4 08             	add    esp,0x8
c001156b:	f7 da                	neg    edx
c001156d:	5b                   	pop    ebx
c001156e:	c3                   	ret    
c001156f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011574:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011579:	83 c4 08             	add    esp,0x8
c001157c:	5b                   	pop    ebx
c001157d:	c3                   	ret    

c001157e <SysSize(regs*)>:
c001157e:	53                   	push   ebx
c001157f:	83 ec 18             	sub    esp,0x18
c0011582:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011586:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011589:	83 f8 02             	cmp    eax,0x2
c001158c:	76 5b                	jbe    c00115e9 <SysSize(regs*)+0x6b>
c001158e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011593:	76 19                	jbe    c00115ae <SysSize(regs*)+0x30>
c0011595:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011598:	31 d2                	xor    edx,edx
c001159a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115a7:	31 c0                	xor    eax,eax
c00115a9:	83 c4 18             	add    esp,0x18
c00115ac:	5b                   	pop    ebx
c00115ad:	c3                   	ret    
c00115ae:	83 ec 0c             	sub    esp,0xc
c00115b1:	50                   	push   eax
c00115b2:	e8 12 1c 00 00       	call   c00131c9 <KeGetFileFromDescriptor(int)>
c00115b7:	83 c4 10             	add    esp,0x10
c00115ba:	85 c0                	test   eax,eax
c00115bc:	74 2b                	je     c00115e9 <SysSize(regs*)+0x6b>
c00115be:	83 ec 04             	sub    esp,0x4
c00115c1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00115c5:	52                   	push   edx
c00115c6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00115c9:	52                   	push   edx
c00115ca:	50                   	push   eax
c00115cb:	e8 da 6e ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00115d0:	83 c4 10             	add    esp,0x10
c00115d3:	85 c0                	test   eax,eax
c00115d5:	0f 95 c0             	setne  al
c00115d8:	31 d2                	xor    edx,edx
c00115da:	0f b6 c0             	movzx  eax,al
c00115dd:	f7 d8                	neg    eax
c00115df:	83 d2 00             	adc    edx,0x0
c00115e2:	83 c4 18             	add    esp,0x18
c00115e5:	f7 da                	neg    edx
c00115e7:	5b                   	pop    ebx
c00115e8:	c3                   	ret    
c00115e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115f3:	83 c4 18             	add    esp,0x18
c00115f6:	5b                   	pop    ebx
c00115f7:	c3                   	ret    

c00115f8 <SysSizeFromFilename(regs*)>:
c00115f8:	55                   	push   ebp
c00115f9:	57                   	push   edi
c00115fa:	56                   	push   esi
c00115fb:	53                   	push   ebx
c00115fc:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011602:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011609:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001160c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001160f:	85 f6                	test   esi,esi
c0011611:	74 34                	je     c0011647 <SysSizeFromFilename(regs*)+0x4f>
c0011613:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011619:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001161c:	83 f8 02             	cmp    eax,0x2
c001161f:	76 2d                	jbe    c001164e <SysSizeFromFilename(regs*)+0x56>
c0011621:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011626:	76 3b                	jbe    c0011663 <SysSizeFromFilename(regs*)+0x6b>
c0011628:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001162b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011631:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011638:	81 c4 4c 02 00 00    	add    esp,0x24c
c001163e:	31 c0                	xor    eax,eax
c0011640:	5b                   	pop    ebx
c0011641:	31 d2                	xor    edx,edx
c0011643:	5e                   	pop    esi
c0011644:	5f                   	pop    edi
c0011645:	5d                   	pop    ebp
c0011646:	c3                   	ret    
c0011647:	89 f8                	mov    eax,edi
c0011649:	83 f8 02             	cmp    eax,0x2
c001164c:	77 d3                	ja     c0011621 <SysSizeFromFilename(regs*)+0x29>
c001164e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011654:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011659:	5b                   	pop    ebx
c001165a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001165f:	5e                   	pop    esi
c0011660:	5f                   	pop    edi
c0011661:	5d                   	pop    ebp
c0011662:	c3                   	ret    
c0011663:	83 ec 0c             	sub    esp,0xc
c0011666:	68 14 01 00 00       	push   0x114
c001166b:	e8 27 e2 ff ff       	call   c000f897 <malloc>
c0011670:	6a 01                	push   0x1
c0011672:	89 c5                	mov    ebp,eax
c0011674:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011679:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001167c:	50                   	push   eax
c001167d:	57                   	push   edi
c001167e:	55                   	push   ebp
c001167f:	e8 08 6a ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011684:	83 c4 20             	add    esp,0x20
c0011687:	85 ed                	test   ebp,ebp
c0011689:	74 c3                	je     c001164e <SysSizeFromFilename(regs*)+0x56>
c001168b:	83 ec 04             	sub    esp,0x4
c001168e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011692:	50                   	push   eax
c0011693:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011696:	51                   	push   ecx
c0011697:	55                   	push   ebp
c0011698:	e8 0d 6e ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001169d:	89 c3                	mov    ebx,eax
c001169f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00116a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116a8:	83 c4 10             	add    esp,0x10
c00116ab:	85 db                	test   ebx,ebx
c00116ad:	75 9f                	jne    c001164e <SysSizeFromFilename(regs*)+0x56>
c00116af:	6a 00                	push   0x0
c00116b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116b9:	05 0c 01 00 00       	add    eax,0x10c
c00116be:	50                   	push   eax
c00116bf:	57                   	push   edi
c00116c0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00116c7:	53                   	push   ebx
c00116c8:	e8 a5 67 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00116cd:	58                   	pop    eax
c00116ce:	5a                   	pop    edx
c00116cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00116d3:	50                   	push   eax
c00116d4:	53                   	push   ebx
c00116d5:	e8 1f 62 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c00116da:	83 c4 10             	add    esp,0x10
c00116dd:	83 f8 01             	cmp    eax,0x1
c00116e0:	74 1a                	je     c00116fc <SysSizeFromFilename(regs*)+0x104>
c00116e2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116e7:	74 26                	je     c001170f <SysSizeFromFilename(regs*)+0x117>
c00116e9:	85 f6                	test   esi,esi
c00116eb:	0f 84 47 ff ff ff    	je     c0011638 <SysSizeFromFilename(regs*)+0x40>
c00116f1:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00116f7:	e9 3c ff ff ff       	jmp    c0011638 <SysSizeFromFilename(regs*)+0x40>
c00116fc:	85 f6                	test   esi,esi
c00116fe:	0f 84 34 ff ff ff    	je     c0011638 <SysSizeFromFilename(regs*)+0x40>
c0011704:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001170a:	e9 29 ff ff ff       	jmp    c0011638 <SysSizeFromFilename(regs*)+0x40>
c001170f:	85 f6                	test   esi,esi
c0011711:	0f 84 21 ff ff ff    	je     c0011638 <SysSizeFromFilename(regs*)+0x40>
c0011717:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001171d:	e9 16 ff ff ff       	jmp    c0011638 <SysSizeFromFilename(regs*)+0x40>

c0011722 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011722:	55                   	push   ebp
c0011723:	57                   	push   edi
c0011724:	56                   	push   esi
c0011725:	53                   	push   ebx
c0011726:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001172c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011733:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011736:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011739:	85 f6                	test   esi,esi
c001173b:	74 34                	je     c0011771 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c001173d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011743:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011746:	83 f8 02             	cmp    eax,0x2
c0011749:	76 2d                	jbe    c0011778 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001174b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011750:	76 3b                	jbe    c001178d <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0011752:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011755:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001175b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011762:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011768:	31 c0                	xor    eax,eax
c001176a:	5b                   	pop    ebx
c001176b:	31 d2                	xor    edx,edx
c001176d:	5e                   	pop    esi
c001176e:	5f                   	pop    edi
c001176f:	5d                   	pop    ebp
c0011770:	c3                   	ret    
c0011771:	89 f8                	mov    eax,edi
c0011773:	83 f8 02             	cmp    eax,0x2
c0011776:	77 d3                	ja     c001174b <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011778:	81 c4 4c 02 00 00    	add    esp,0x24c
c001177e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011783:	5b                   	pop    ebx
c0011784:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011789:	5e                   	pop    esi
c001178a:	5f                   	pop    edi
c001178b:	5d                   	pop    ebp
c001178c:	c3                   	ret    
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	68 14 01 00 00       	push   0x114
c0011795:	e8 fd e0 ff ff       	call   c000f897 <malloc>
c001179a:	6a 00                	push   0x0
c001179c:	89 c5                	mov    ebp,eax
c001179e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117a6:	50                   	push   eax
c00117a7:	57                   	push   edi
c00117a8:	55                   	push   ebp
c00117a9:	e8 de 68 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00117ae:	83 c4 20             	add    esp,0x20
c00117b1:	85 ed                	test   ebp,ebp
c00117b3:	74 c3                	je     c0011778 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00117b5:	83 ec 04             	sub    esp,0x4
c00117b8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00117bc:	50                   	push   eax
c00117bd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00117c0:	51                   	push   ecx
c00117c1:	55                   	push   ebp
c00117c2:	e8 e3 6c ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00117c7:	89 c3                	mov    ebx,eax
c00117c9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00117cc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00117cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117d2:	83 c4 10             	add    esp,0x10
c00117d5:	85 db                	test   ebx,ebx
c00117d7:	75 9f                	jne    c0011778 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00117d9:	6a 00                	push   0x0
c00117db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117e3:	05 0c 01 00 00       	add    eax,0x10c
c00117e8:	50                   	push   eax
c00117e9:	57                   	push   edi
c00117ea:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00117f1:	53                   	push   ebx
c00117f2:	e8 7b 66 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00117f7:	58                   	pop    eax
c00117f8:	5a                   	pop    edx
c00117f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00117fd:	50                   	push   eax
c00117fe:	53                   	push   ebx
c00117ff:	e8 f5 60 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	83 f8 01             	cmp    eax,0x1
c001180a:	74 1a                	je     c0011826 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c001180c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011811:	74 26                	je     c0011839 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c0011813:	85 f6                	test   esi,esi
c0011815:	0f 84 47 ff ff ff    	je     c0011762 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001181b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011821:	e9 3c ff ff ff       	jmp    c0011762 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011826:	85 f6                	test   esi,esi
c0011828:	0f 84 34 ff ff ff    	je     c0011762 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001182e:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011834:	e9 29 ff ff ff       	jmp    c0011762 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011839:	85 f6                	test   esi,esi
c001183b:	0f 84 21 ff ff ff    	je     c0011762 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011841:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011847:	e9 16 ff ff ff       	jmp    c0011762 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c001184c <SysClose(regs*)>:
c001184c:	53                   	push   ebx
c001184d:	83 ec 08             	sub    esp,0x8
c0011850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011854:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011857:	83 f8 02             	cmp    eax,0x2
c001185a:	76 41                	jbe    c001189d <SysClose(regs*)+0x51>
c001185c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011862:	83 fa 01             	cmp    edx,0x1
c0011865:	76 2d                	jbe    c0011894 <SysClose(regs*)+0x48>
c0011867:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001186c:	77 2f                	ja     c001189d <SysClose(regs*)+0x51>
c001186e:	83 ec 0c             	sub    esp,0xc
c0011871:	50                   	push   eax
c0011872:	e8 52 19 00 00       	call   c00131c9 <KeGetFileFromDescriptor(int)>
c0011877:	83 c4 10             	add    esp,0x10
c001187a:	89 c3                	mov    ebx,eax
c001187c:	85 c0                	test   eax,eax
c001187e:	74 1d                	je     c001189d <SysClose(regs*)+0x51>
c0011880:	83 ec 0c             	sub    esp,0xc
c0011883:	50                   	push   eax
c0011884:	e8 7d 69 ff ff       	call   c0008206 <File::close()>
c0011889:	8b 03                	mov    eax,DWORD PTR [ebx]
c001188b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001188e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011891:	83 c4 10             	add    esp,0x10
c0011894:	31 c0                	xor    eax,eax
c0011896:	31 d2                	xor    edx,edx
c0011898:	83 c4 08             	add    esp,0x8
c001189b:	5b                   	pop    ebx
c001189c:	c3                   	ret    
c001189d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118a7:	83 c4 08             	add    esp,0x8
c00118aa:	5b                   	pop    ebx
c00118ab:	c3                   	ret    

c00118ac <SysOpenDir(regs*)>:
c00118ac:	56                   	push   esi
c00118ad:	53                   	push   ebx
c00118ae:	83 ec 04             	sub    esp,0x4
c00118b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118b5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00118b8:	85 c9                	test   ecx,ecx
c00118ba:	74 5d                	je     c0011919 <SysOpenDir(regs*)+0x6d>
c00118bc:	83 ec 0c             	sub    esp,0xc
c00118bf:	68 14 01 00 00       	push   0x114
c00118c4:	e8 ce df ff ff       	call   c000f897 <malloc>
c00118c9:	83 c4 0c             	add    esp,0xc
c00118cc:	89 c6                	mov    esi,eax
c00118ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118d6:	50                   	push   eax
c00118d7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00118da:	52                   	push   edx
c00118db:	56                   	push   esi
c00118dc:	e8 89 6d ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	85 f6                	test   esi,esi
c00118e6:	74 31                	je     c0011919 <SysOpenDir(regs*)+0x6d>
c00118e8:	83 ec 0c             	sub    esp,0xc
c00118eb:	56                   	push   esi
c00118ec:	e8 41 6e ff ff       	call   c0008732 <Directory::open()>
c00118f1:	83 c4 10             	add    esp,0x10
c00118f4:	85 c0                	test   eax,eax
c00118f6:	75 21                	jne    c0011919 <SysOpenDir(regs*)+0x6d>
c00118f8:	83 ec 0c             	sub    esp,0xc
c00118fb:	56                   	push   esi
c00118fc:	e8 cb 15 00 00       	call   c0012ecc <UnixFile::getFileDescriptor()>
c0011901:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011904:	83 c4 10             	add    esp,0x10
c0011907:	89 02                	mov    DWORD PTR [edx],eax
c0011909:	c1 f8 1f             	sar    eax,0x1f
c001190c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001190f:	83 c4 04             	add    esp,0x4
c0011912:	31 c0                	xor    eax,eax
c0011914:	31 d2                	xor    edx,edx
c0011916:	5b                   	pop    ebx
c0011917:	5e                   	pop    esi
c0011918:	c3                   	ret    
c0011919:	83 c4 04             	add    esp,0x4
c001191c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011921:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011926:	5b                   	pop    ebx
c0011927:	5e                   	pop    esi
c0011928:	c3                   	ret    

c0011929 <SysMakeDir(regs*)>:
c0011929:	56                   	push   esi
c001192a:	53                   	push   ebx
c001192b:	83 ec 10             	sub    esp,0x10
c001192e:	68 14 01 00 00       	push   0x114
c0011933:	e8 5f df ff ff       	call   c000f897 <malloc>
c0011938:	83 c4 0c             	add    esp,0xc
c001193b:	89 c3                	mov    ebx,eax
c001193d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011942:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011945:	50                   	push   eax
c0011946:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001194a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001194d:	52                   	push   edx
c001194e:	53                   	push   ebx
c001194f:	e8 16 6d ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c0011954:	83 c4 10             	add    esp,0x10
c0011957:	85 db                	test   ebx,ebx
c0011959:	74 2c                	je     c0011987 <SysMakeDir(regs*)+0x5e>
c001195b:	83 ec 0c             	sub    esp,0xc
c001195e:	53                   	push   ebx
c001195f:	e8 ae 6f ff ff       	call   c0008912 <Directory::create()>
c0011964:	89 c6                	mov    esi,eax
c0011966:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011968:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001196b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001196e:	83 c4 10             	add    esp,0x10
c0011971:	31 c0                	xor    eax,eax
c0011973:	85 f6                	test   esi,esi
c0011975:	0f 95 c0             	setne  al
c0011978:	31 d2                	xor    edx,edx
c001197a:	f7 d8                	neg    eax
c001197c:	83 d2 00             	adc    edx,0x0
c001197f:	83 c4 04             	add    esp,0x4
c0011982:	f7 da                	neg    edx
c0011984:	5b                   	pop    ebx
c0011985:	5e                   	pop    esi
c0011986:	c3                   	ret    
c0011987:	83 c4 04             	add    esp,0x4
c001198a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001198f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011994:	5b                   	pop    ebx
c0011995:	5e                   	pop    esi
c0011996:	c3                   	ret    

c0011997 <SysCloseDir(regs*)>:
c0011997:	53                   	push   ebx
c0011998:	83 ec 08             	sub    esp,0x8
c001199b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001199f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119a2:	8d 50 fd             	lea    edx,[eax-0x3]
c00119a5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00119ab:	77 2f                	ja     c00119dc <SysCloseDir(regs*)+0x45>
c00119ad:	83 ec 0c             	sub    esp,0xc
c00119b0:	50                   	push   eax
c00119b1:	e8 13 18 00 00       	call   c00131c9 <KeGetFileFromDescriptor(int)>
c00119b6:	83 c4 10             	add    esp,0x10
c00119b9:	89 c3                	mov    ebx,eax
c00119bb:	85 c0                	test   eax,eax
c00119bd:	74 1d                	je     c00119dc <SysCloseDir(regs*)+0x45>
c00119bf:	83 ec 0c             	sub    esp,0xc
c00119c2:	50                   	push   eax
c00119c3:	e8 c6 6d ff ff       	call   c000878e <Directory::close()>
c00119c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119d0:	83 c4 10             	add    esp,0x10
c00119d3:	31 c0                	xor    eax,eax
c00119d5:	31 d2                	xor    edx,edx
c00119d7:	83 c4 08             	add    esp,0x8
c00119da:	5b                   	pop    ebx
c00119db:	c3                   	ret    
c00119dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119e6:	83 c4 08             	add    esp,0x8
c00119e9:	5b                   	pop    ebx
c00119ea:	c3                   	ret    

c00119eb <SysWait(regs*)>:
c00119eb:	83 ec 10             	sub    esp,0x10
c00119ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119f2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00119f5:	52                   	push   edx
c00119f6:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00119f9:	51                   	push   ecx
c00119fa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119fd:	50                   	push   eax
c00119fe:	e8 09 55 00 00       	call   c0016f0c <waitTask(int, int*, int)>
c0011a03:	83 c4 1c             	add    esp,0x1c
c0011a06:	89 c2                	mov    edx,eax
c0011a08:	c1 fa 1f             	sar    edx,0x1f
c0011a0b:	c3                   	ret    

c0011a0c <SysNotImpl(regs*)>:
c0011a0c:	83 ec 18             	sub    esp,0x18
c0011a0f:	68 f7 44 02 c0       	push   0xc00244f7
c0011a14:	e8 db e2 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0011a19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a23:	83 c4 1c             	add    esp,0x1c
c0011a26:	c3                   	ret    

c0011a27 <SysPanic(regs*)>:
c0011a27:	83 ec 18             	sub    esp,0x18
c0011a2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a2e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011a31:	50                   	push   eax
c0011a32:	e8 bd e2 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0011a37:	b8 01 00 00 00       	mov    eax,0x1
c0011a3c:	31 d2                	xor    edx,edx
c0011a3e:	83 c4 1c             	add    esp,0x1c
c0011a41:	c3                   	ret    

c0011a42 <SysRmdir(regs*)>:
c0011a42:	56                   	push   esi
c0011a43:	53                   	push   ebx
c0011a44:	83 ec 20             	sub    esp,0x20
c0011a47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a4b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011a4e:	68 14 01 00 00       	push   0x114
c0011a53:	e8 3f de ff ff       	call   c000f897 <malloc>
c0011a58:	6a 00                	push   0x0
c0011a5a:	89 c3                	mov    ebx,eax
c0011a5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a61:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a64:	50                   	push   eax
c0011a65:	56                   	push   esi
c0011a66:	53                   	push   ebx
c0011a67:	e8 20 66 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011a6c:	83 c4 14             	add    esp,0x14
c0011a6f:	53                   	push   ebx
c0011a70:	e8 01 69 ff ff       	call   c0008376 <File::unlink()>
c0011a75:	83 c4 10             	add    esp,0x10
c0011a78:	85 db                	test   ebx,ebx
c0011a7a:	74 14                	je     c0011a90 <SysRmdir(regs*)+0x4e>
c0011a7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a80:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a82:	83 ec 0c             	sub    esp,0xc
c0011a85:	53                   	push   ebx
c0011a86:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011a89:	83 c4 10             	add    esp,0x10
c0011a8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a90:	85 c0                	test   eax,eax
c0011a92:	0f 95 c0             	setne  al
c0011a95:	31 d2                	xor    edx,edx
c0011a97:	0f b6 c0             	movzx  eax,al
c0011a9a:	f7 d8                	neg    eax
c0011a9c:	83 d2 00             	adc    edx,0x0
c0011a9f:	83 c4 14             	add    esp,0x14
c0011aa2:	f7 da                	neg    edx
c0011aa4:	5b                   	pop    ebx
c0011aa5:	5e                   	pop    esi
c0011aa6:	c3                   	ret    

c0011aa7 <SysUnlink(regs*)>:
c0011aa7:	56                   	push   esi
c0011aa8:	53                   	push   ebx
c0011aa9:	83 ec 20             	sub    esp,0x20
c0011aac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ab0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011ab3:	68 14 01 00 00       	push   0x114
c0011ab8:	e8 da dd ff ff       	call   c000f897 <malloc>
c0011abd:	6a 00                	push   0x0
c0011abf:	89 c3                	mov    ebx,eax
c0011ac1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ac6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ac9:	50                   	push   eax
c0011aca:	56                   	push   esi
c0011acb:	53                   	push   ebx
c0011acc:	e8 bb 65 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011ad1:	83 c4 14             	add    esp,0x14
c0011ad4:	53                   	push   ebx
c0011ad5:	e8 9c 68 ff ff       	call   c0008376 <File::unlink()>
c0011ada:	83 c4 10             	add    esp,0x10
c0011add:	85 db                	test   ebx,ebx
c0011adf:	74 14                	je     c0011af5 <SysUnlink(regs*)+0x4e>
c0011ae1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ae5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011ae7:	83 ec 0c             	sub    esp,0xc
c0011aea:	53                   	push   ebx
c0011aeb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011aee:	83 c4 10             	add    esp,0x10
c0011af1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011af5:	85 c0                	test   eax,eax
c0011af7:	0f 95 c0             	setne  al
c0011afa:	31 d2                	xor    edx,edx
c0011afc:	0f b6 c0             	movzx  eax,al
c0011aff:	f7 d8                	neg    eax
c0011b01:	83 d2 00             	adc    edx,0x0
c0011b04:	83 c4 14             	add    esp,0x14
c0011b07:	f7 da                	neg    edx
c0011b09:	5b                   	pop    ebx
c0011b0a:	5e                   	pop    esi
c0011b0b:	c3                   	ret    

c0011b0c <SysGetArgv(regs*)>:
c0011b0c:	83 ec 0c             	sub    esp,0xc
c0011b0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011b13:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011b16:	85 c0                	test   eax,eax
c0011b18:	78 2c                	js     c0011b46 <SysGetArgv(regs*)+0x3a>
c0011b1a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011b20:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011b23:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011b29:	7d 1b                	jge    c0011b46 <SysGetArgv(regs*)+0x3a>
c0011b2b:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011b32:	85 c0                	test   eax,eax
c0011b34:	74 18                	je     c0011b4e <SysGetArgv(regs*)+0x42>
c0011b36:	83 ec 08             	sub    esp,0x8
c0011b39:	50                   	push   eax
c0011b3a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011b3d:	50                   	push   eax
c0011b3e:	e8 fd ea fe ff       	call   c0000640 <strcpy>
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	31 c0                	xor    eax,eax
c0011b48:	31 d2                	xor    edx,edx
c0011b4a:	83 c4 0c             	add    esp,0xc
c0011b4d:	c3                   	ret    
c0011b4e:	b8 01 00 00 00       	mov    eax,0x1
c0011b53:	31 d2                	xor    edx,edx
c0011b55:	83 c4 0c             	add    esp,0xc
c0011b58:	c3                   	ret    

c0011b59 <SysUSleep(regs*)>:
c0011b59:	83 ec 1c             	sub    esp,0x1c
c0011b5c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011b60:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011b63:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011b66:	6a 00                	push   0x0
c0011b68:	6a 64                	push   0x64
c0011b6a:	52                   	push   edx
c0011b6b:	50                   	push   eax
c0011b6c:	e8 83 fe 00 00       	call   c00219f4 <__udivdi3>
c0011b71:	83 c4 18             	add    esp,0x18
c0011b74:	52                   	push   edx
c0011b75:	50                   	push   eax
c0011b76:	e8 89 54 00 00       	call   c0017004 <milliTenthSleep(unsigned long long)>
c0011b7b:	31 c0                	xor    eax,eax
c0011b7d:	31 d2                	xor    edx,edx
c0011b7f:	83 c4 1c             	add    esp,0x1c
c0011b82:	c3                   	ret    

c0011b83 <SysSpawn(regs*)>:
c0011b83:	56                   	push   esi
c0011b84:	53                   	push   ebx
c0011b85:	83 ec 04             	sub    esp,0x4
c0011b88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b8c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b8f:	85 f6                	test   esi,esi
c0011b91:	75 0a                	jne    c0011b9d <SysSpawn(regs*)+0x1a>
c0011b93:	83 c4 04             	add    esp,0x4
c0011b96:	31 c0                	xor    eax,eax
c0011b98:	31 d2                	xor    edx,edx
c0011b9a:	5b                   	pop    ebx
c0011b9b:	5e                   	pop    esi
c0011b9c:	c3                   	ret    
c0011b9d:	83 ec 0c             	sub    esp,0xc
c0011ba0:	68 c4 07 00 00       	push   0x7c4
c0011ba5:	e8 ed dc ff ff       	call   c000f897 <malloc>
c0011baa:	83 c4 10             	add    esp,0x10
c0011bad:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011bb0:	89 c6                	mov    esi,eax
c0011bb2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011bb5:	85 c9                	test   ecx,ecx
c0011bb7:	74 39                	je     c0011bf2 <SysSpawn(regs*)+0x6f>
c0011bb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bbe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bc1:	52                   	push   edx
c0011bc2:	50                   	push   eax
c0011bc3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011bc6:	50                   	push   eax
c0011bc7:	56                   	push   esi
c0011bc8:	e8 0b 4b 00 00       	call   c00166d8 <Process::Process(char const*, Process*, char**)>
c0011bcd:	83 c4 10             	add    esp,0x10
c0011bd0:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011bd7:	75 ba                	jne    c0011b93 <SysSpawn(regs*)+0x10>
c0011bd9:	83 ec 0c             	sub    esp,0xc
c0011bdc:	56                   	push   esi
c0011bdd:	e8 c6 50 00 00       	call   c0016ca8 <Process::createUserThread()>
c0011be2:	8b 06                	mov    eax,DWORD PTR [esi]
c0011be4:	83 c4 10             	add    esp,0x10
c0011be7:	89 c2                	mov    edx,eax
c0011be9:	83 c4 04             	add    esp,0x4
c0011bec:	c1 fa 1f             	sar    edx,0x1f
c0011bef:	5b                   	pop    ebx
c0011bf0:	5e                   	pop    esi
c0011bf1:	c3                   	ret    
c0011bf2:	31 c0                	xor    eax,eax
c0011bf4:	eb cb                	jmp    c0011bc1 <SysSpawn(regs*)+0x3e>

c0011bf6 <SysGetEnv(regs*)>:
c0011bf6:	57                   	push   edi
c0011bf7:	56                   	push   esi
c0011bf8:	53                   	push   ebx
c0011bf9:	83 ec 1c             	sub    esp,0x1c
c0011bfc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011c00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c05:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011c08:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011c0b:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011c0e:	51                   	push   ecx
c0011c0f:	e8 8b ca ff ff       	call   c000e69f <KeGetProcessTotalEnvCount(Process*)>
c0011c14:	83 c4 10             	add    esp,0x10
c0011c17:	39 c7                	cmp    edi,eax
c0011c19:	7c 14                	jl     c0011c2f <SysGetEnv(regs*)+0x39>
c0011c1b:	85 f6                	test   esi,esi
c0011c1d:	75 0b                	jne    c0011c2a <SysGetEnv(regs*)+0x34>
c0011c1f:	83 c4 10             	add    esp,0x10
c0011c22:	31 c0                	xor    eax,eax
c0011c24:	5b                   	pop    ebx
c0011c25:	31 d2                	xor    edx,edx
c0011c27:	5e                   	pop    esi
c0011c28:	5f                   	pop    edi
c0011c29:	c3                   	ret    
c0011c2a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011c2d:	eb f0                	jmp    c0011c1f <SysGetEnv(regs*)+0x29>
c0011c2f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011c33:	83 ec 04             	sub    esp,0x4
c0011c36:	57                   	push   edi
c0011c37:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c3d:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011c40:	57                   	push   edi
c0011c41:	50                   	push   eax
c0011c42:	e8 78 ca ff ff       	call   c000e6bf <KeGetProcessEnvPair(Process*, int)>
c0011c47:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c4e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011c52:	83 c4 0c             	add    esp,0xc
c0011c55:	85 d2                	test   edx,edx
c0011c57:	75 23                	jne    c0011c7c <SysGetEnv(regs*)+0x86>
c0011c59:	83 ec 0c             	sub    esp,0xc
c0011c5c:	50                   	push   eax
c0011c5d:	e8 0e e9 fe ff       	call   c0000570 <strlen>
c0011c62:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c65:	89 c3                	mov    ebx,eax
c0011c67:	e8 04 e9 fe ff       	call   c0000570 <strlen>
c0011c6c:	83 c4 10             	add    esp,0x10
c0011c6f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011c73:	83 c4 10             	add    esp,0x10
c0011c76:	31 d2                	xor    edx,edx
c0011c78:	5b                   	pop    ebx
c0011c79:	5e                   	pop    esi
c0011c7a:	5f                   	pop    edi
c0011c7b:	c3                   	ret    
c0011c7c:	83 ec 08             	sub    esp,0x8
c0011c7f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011c82:	50                   	push   eax
c0011c83:	56                   	push   esi
c0011c84:	e8 b7 e9 fe ff       	call   c0000640 <strcpy>
c0011c89:	58                   	pop    eax
c0011c8a:	5a                   	pop    edx
c0011c8b:	68 11 45 02 c0       	push   0xc0024511
c0011c90:	56                   	push   esi
c0011c91:	e8 aa eb fe ff       	call   c0000840 <strcat>
c0011c96:	59                   	pop    ecx
c0011c97:	5b                   	pop    ebx
c0011c98:	57                   	push   edi
c0011c99:	56                   	push   esi
c0011c9a:	e8 a1 eb fe ff       	call   c0000840 <strcat>
c0011c9f:	83 c4 10             	add    esp,0x10
c0011ca2:	e9 78 ff ff ff       	jmp    c0011c1f <SysGetEnv(regs*)+0x29>

c0011ca7 <SysSetFatAttrib(regs*)>:
c0011ca7:	57                   	push   edi
c0011ca8:	56                   	push   esi
c0011ca9:	53                   	push   ebx
c0011caa:	83 ec 1c             	sub    esp,0x1c
c0011cad:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011cb1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011cb4:	68 14 01 00 00       	push   0x114
c0011cb9:	e8 d9 db ff ff       	call   c000f897 <malloc>
c0011cbe:	83 c4 0c             	add    esp,0xc
c0011cc1:	89 c3                	mov    ebx,eax
c0011cc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cc8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ccb:	50                   	push   eax
c0011ccc:	57                   	push   edi
c0011ccd:	53                   	push   ebx
c0011cce:	e8 b7 64 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0011cd3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011cd6:	83 c4 0c             	add    esp,0xc
c0011cd9:	0f b6 d4             	movzx  edx,ah
c0011cdc:	0f b6 c0             	movzx  eax,al
c0011cdf:	52                   	push   edx
c0011ce0:	50                   	push   eax
c0011ce1:	53                   	push   ebx
c0011ce2:	e8 29 67 ff ff       	call   c0008410 <File::chfatattr(unsigned char, unsigned char)>
c0011ce7:	83 c4 10             	add    esp,0x10
c0011cea:	85 db                	test   ebx,ebx
c0011cec:	74 14                	je     c0011d02 <SysSetFatAttrib(regs*)+0x5b>
c0011cee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cf2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cf4:	83 ec 0c             	sub    esp,0xc
c0011cf7:	53                   	push   ebx
c0011cf8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011cfb:	83 c4 10             	add    esp,0x10
c0011cfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d02:	85 c0                	test   eax,eax
c0011d04:	0f 95 c0             	setne  al
c0011d07:	31 d2                	xor    edx,edx
c0011d09:	0f b6 c0             	movzx  eax,al
c0011d0c:	f7 d8                	neg    eax
c0011d0e:	83 d2 00             	adc    edx,0x0
c0011d11:	83 c4 10             	add    esp,0x10
c0011d14:	f7 da                	neg    edx
c0011d16:	5b                   	pop    ebx
c0011d17:	5e                   	pop    esi
c0011d18:	5f                   	pop    edi
c0011d19:	c3                   	ret    

c0011d1a <SysShutdown(regs*)>:
c0011d1a:	83 ec 1c             	sub    esp,0x1c
c0011d1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d21:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011d24:	85 c9                	test   ecx,ecx
c0011d26:	74 18                	je     c0011d40 <SysShutdown(regs*)+0x26>
c0011d28:	83 f9 01             	cmp    ecx,0x1
c0011d2b:	74 26                	je     c0011d53 <SysShutdown(regs*)+0x39>
c0011d2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d32:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d37:	83 f9 02             	cmp    ecx,0x2
c0011d3a:	74 24                	je     c0011d60 <SysShutdown(regs*)+0x46>
c0011d3c:	83 c4 1c             	add    esp,0x1c
c0011d3f:	c3                   	ret    
c0011d40:	e8 a3 e9 ff ff       	call   c00106e8 <KeShutdown()>
c0011d45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d4a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d4f:	83 c4 1c             	add    esp,0x1c
c0011d52:	c3                   	ret    
c0011d53:	e8 c6 e9 ff ff       	call   c001071e <KeSleep()>
c0011d58:	31 c0                	xor    eax,eax
c0011d5a:	31 d2                	xor    edx,edx
c0011d5c:	83 c4 1c             	add    esp,0x1c
c0011d5f:	c3                   	ret    
c0011d60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d68:	e8 e1 e9 ff ff       	call   c001074e <KeRestart()>
c0011d6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d75:	eb c5                	jmp    c0011d3c <SysShutdown(regs*)+0x22>

c0011d77 <SysPipe(regs*)>:
c0011d77:	57                   	push   edi
c0011d78:	56                   	push   esi
c0011d79:	53                   	push   ebx
c0011d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d7e:	83 ec 0c             	sub    esp,0xc
c0011d81:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011d84:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011d87:	6a 20                	push   0x20
c0011d89:	e8 09 db ff ff       	call   c000f897 <malloc>
c0011d8e:	89 c3                	mov    ebx,eax
c0011d90:	58                   	pop    eax
c0011d91:	5a                   	pop    edx
c0011d92:	68 00 50 00 00       	push   0x5000
c0011d97:	53                   	push   ebx
c0011d98:	e8 cb e7 ff ff       	call   c0010568 <Pipe::Pipe(int)>
c0011d9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011da0:	e8 27 11 00 00       	call   c0012ecc <UnixFile::getFileDescriptor()>
c0011da5:	89 07                	mov    DWORD PTR [edi],eax
c0011da7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011daa:	e8 1d 11 00 00       	call   c0012ecc <UnixFile::getFileDescriptor()>
c0011daf:	83 c4 10             	add    esp,0x10
c0011db2:	89 06                	mov    DWORD PTR [esi],eax
c0011db4:	31 d2                	xor    edx,edx
c0011db6:	5b                   	pop    ebx
c0011db7:	31 c0                	xor    eax,eax
c0011db9:	5e                   	pop    esi
c0011dba:	5f                   	pop    edi
c0011dbb:	c3                   	ret    

c0011dbc <SysGetUnixTime(regs*)>:
c0011dbc:	57                   	push   edi
c0011dbd:	56                   	push   esi
c0011dbe:	53                   	push   ebx
c0011dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011dc3:	83 ec 08             	sub    esp,0x8
c0011dc6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011dc9:	52                   	push   edx
c0011dca:	68 13 45 02 c0       	push   0xc0024513
c0011dcf:	e8 a8 51 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011dd4:	83 c4 10             	add    esp,0x10
c0011dd7:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0011ddb:	74 3d                	je     c0011e1a <SysGetUnixTime(regs*)+0x5e>
c0011ddd:	83 ec 0c             	sub    esp,0xc
c0011de0:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0011de5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011deb:	50                   	push   eax
c0011dec:	e8 49 73 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0011df1:	83 c4 0c             	add    esp,0xc
c0011df4:	52                   	push   edx
c0011df5:	50                   	push   eax
c0011df6:	68 27 45 02 c0       	push   0xc0024527
c0011dfb:	e8 7c 51 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011e00:	83 c4 10             	add    esp,0x10
c0011e03:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0011e08:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011e0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e12:	5b                   	pop    ebx
c0011e13:	5e                   	pop    esi
c0011e14:	5f                   	pop    edi
c0011e15:	e9 20 73 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0011e1a:	8b 35 50 bb 02 c0    	mov    esi,DWORD PTR ds:0xc002bb50
c0011e20:	8b 3d 54 bb 02 c0    	mov    edi,DWORD PTR ds:0xc002bb54
c0011e26:	89 f0                	mov    eax,esi
c0011e28:	89 fa                	mov    edx,edi
c0011e2a:	01 f0                	add    eax,esi
c0011e2c:	11 fa                	adc    edx,edi
c0011e2e:	01 f0                	add    eax,esi
c0011e30:	11 fa                	adc    edx,edi
c0011e32:	89 c1                	mov    ecx,eax
c0011e34:	89 d3                	mov    ebx,edx
c0011e36:	0f a4 cb 05          	shld   ebx,ecx,0x5
c0011e3a:	c1 e1 05             	shl    ecx,0x5
c0011e3d:	01 c8                	add    eax,ecx
c0011e3f:	11 da                	adc    edx,ebx
c0011e41:	01 f0                	add    eax,esi
c0011e43:	5b                   	pop    ebx
c0011e44:	11 fa                	adc    edx,edi
c0011e46:	5e                   	pop    esi
c0011e47:	5f                   	pop    edi
c0011e48:	c3                   	ret    

c0011e49 <string_ends_with(char const*, char const*)>:
c0011e49:	57                   	push   edi
c0011e4a:	56                   	push   esi
c0011e4b:	53                   	push   ebx
c0011e4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e50:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011e54:	83 ec 0c             	sub    esp,0xc
c0011e57:	53                   	push   ebx
c0011e58:	e8 13 e7 fe ff       	call   c0000570 <strlen>
c0011e5d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e60:	89 c6                	mov    esi,eax
c0011e62:	e8 09 e7 fe ff       	call   c0000570 <strlen>
c0011e67:	83 c4 10             	add    esp,0x10
c0011e6a:	39 c6                	cmp    esi,eax
c0011e6c:	7d 06                	jge    c0011e74 <string_ends_with(char const*, char const*)+0x2b>
c0011e6e:	5b                   	pop    ebx
c0011e6f:	31 c0                	xor    eax,eax
c0011e71:	5e                   	pop    esi
c0011e72:	5f                   	pop    edi
c0011e73:	c3                   	ret    
c0011e74:	83 ec 08             	sub    esp,0x8
c0011e77:	29 c6                	sub    esi,eax
c0011e79:	57                   	push   edi
c0011e7a:	01 f3                	add    ebx,esi
c0011e7c:	53                   	push   ebx
c0011e7d:	e8 ce e8 fe ff       	call   c0000750 <strcmp>
c0011e82:	83 c4 10             	add    esp,0x10
c0011e85:	85 c0                	test   eax,eax
c0011e87:	5b                   	pop    ebx
c0011e88:	0f 94 c0             	sete   al
c0011e8b:	5e                   	pop    esi
c0011e8c:	0f b6 c0             	movzx  eax,al
c0011e8f:	5f                   	pop    edi
c0011e90:	c3                   	ret    

c0011e91 <SysOpen(regs*)>:
c0011e91:	56                   	push   esi
c0011e92:	53                   	push   ebx
c0011e93:	81 ec 04 01 00 00    	sub    esp,0x104
c0011e99:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011ea0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ea3:	85 c0                	test   eax,eax
c0011ea5:	0f 84 bc 01 00 00    	je     c0012067 <SysOpen(regs*)+0x1d6>
c0011eab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011eae:	85 c0                	test   eax,eax
c0011eb0:	0f 84 b1 01 00 00    	je     c0012067 <SysOpen(regs*)+0x1d6>
c0011eb6:	6a 00                	push   0x0
c0011eb8:	68 2e 45 02 c0       	push   0xc002452e
c0011ebd:	50                   	push   eax
c0011ebe:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011ec2:	56                   	push   esi
c0011ec3:	e8 aa 5f ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011ec8:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ecb:	e8 a0 e6 fe ff       	call   c0000570 <strlen>
c0011ed0:	83 c4 10             	add    esp,0x10
c0011ed3:	83 e8 01             	sub    eax,0x1
c0011ed6:	74 21                	je     c0011ef9 <SysOpen(regs*)+0x68>
c0011ed8:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011edc:	eb 12                	jmp    c0011ef0 <SysOpen(regs*)+0x5f>
c0011ede:	83 fa 3a             	cmp    edx,0x3a
c0011ee1:	74 12                	je     c0011ef5 <SysOpen(regs*)+0x64>
c0011ee3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011ee7:	83 e8 01             	sub    eax,0x1
c0011eea:	74 0d                	je     c0011ef9 <SysOpen(regs*)+0x68>
c0011eec:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011ef0:	83 fa 2e             	cmp    edx,0x2e
c0011ef3:	75 e9                	jne    c0011ede <SysOpen(regs*)+0x4d>
c0011ef5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011ef9:	83 ec 08             	sub    esp,0x8
c0011efc:	68 32 45 02 c0       	push   0xc0024532
c0011f01:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f04:	50                   	push   eax
c0011f05:	e8 3f ff ff ff       	call   c0011e49 <string_ends_with(char const*, char const*)>
c0011f0a:	83 c4 10             	add    esp,0x10
c0011f0d:	85 c0                	test   eax,eax
c0011f0f:	74 1d                	je     c0011f2e <SysOpen(regs*)+0x9d>
c0011f11:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f14:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011f1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f21:	81 c4 04 01 00 00    	add    esp,0x104
c0011f27:	31 c0                	xor    eax,eax
c0011f29:	31 d2                	xor    edx,edx
c0011f2b:	5b                   	pop    ebx
c0011f2c:	5e                   	pop    esi
c0011f2d:	c3                   	ret    
c0011f2e:	83 ec 08             	sub    esp,0x8
c0011f31:	68 37 45 02 c0       	push   0xc0024537
c0011f36:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f39:	50                   	push   eax
c0011f3a:	e8 0a ff ff ff       	call   c0011e49 <string_ends_with(char const*, char const*)>
c0011f3f:	83 c4 10             	add    esp,0x10
c0011f42:	85 c0                	test   eax,eax
c0011f44:	75 cb                	jne    c0011f11 <SysOpen(regs*)+0x80>
c0011f46:	83 ec 08             	sub    esp,0x8
c0011f49:	68 33 45 02 c0       	push   0xc0024533
c0011f4e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f51:	50                   	push   eax
c0011f52:	e8 f9 e7 fe ff       	call   c0000750 <strcmp>
c0011f57:	83 c4 10             	add    esp,0x10
c0011f5a:	85 c0                	test   eax,eax
c0011f5c:	74 b3                	je     c0011f11 <SysOpen(regs*)+0x80>
c0011f5e:	83 ec 08             	sub    esp,0x8
c0011f61:	68 32 45 02 c0       	push   0xc0024532
c0011f66:	56                   	push   esi
c0011f67:	e8 dd fe ff ff       	call   c0011e49 <string_ends_with(char const*, char const*)>
c0011f6c:	83 c4 10             	add    esp,0x10
c0011f6f:	85 c0                	test   eax,eax
c0011f71:	75 9e                	jne    c0011f11 <SysOpen(regs*)+0x80>
c0011f73:	83 ec 08             	sub    esp,0x8
c0011f76:	68 3c 45 02 c0       	push   0xc002453c
c0011f7b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f7e:	50                   	push   eax
c0011f7f:	e8 c5 fe ff ff       	call   c0011e49 <string_ends_with(char const*, char const*)>
c0011f84:	83 c4 10             	add    esp,0x10
c0011f87:	85 c0                	test   eax,eax
c0011f89:	0f 85 eb 00 00 00    	jne    c001207a <SysOpen(regs*)+0x1e9>
c0011f8f:	83 ec 08             	sub    esp,0x8
c0011f92:	68 41 45 02 c0       	push   0xc0024541
c0011f97:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f9a:	50                   	push   eax
c0011f9b:	e8 a9 fe ff ff       	call   c0011e49 <string_ends_with(char const*, char const*)>
c0011fa0:	83 c4 10             	add    esp,0x10
c0011fa3:	85 c0                	test   eax,eax
c0011fa5:	0f 85 cf 00 00 00    	jne    c001207a <SysOpen(regs*)+0x1e9>
c0011fab:	83 ec 08             	sub    esp,0x8
c0011fae:	68 3d 45 02 c0       	push   0xc002453d
c0011fb3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011fb6:	51                   	push   ecx
c0011fb7:	e8 94 e7 fe ff       	call   c0000750 <strcmp>
c0011fbc:	83 c4 10             	add    esp,0x10
c0011fbf:	85 c0                	test   eax,eax
c0011fc1:	0f 84 b3 00 00 00    	je     c001207a <SysOpen(regs*)+0x1e9>
c0011fc7:	83 ec 08             	sub    esp,0x8
c0011fca:	68 3c 45 02 c0       	push   0xc002453c
c0011fcf:	56                   	push   esi
c0011fd0:	e8 74 fe ff ff       	call   c0011e49 <string_ends_with(char const*, char const*)>
c0011fd5:	83 c4 10             	add    esp,0x10
c0011fd8:	85 c0                	test   eax,eax
c0011fda:	0f 85 9a 00 00 00    	jne    c001207a <SysOpen(regs*)+0x1e9>
c0011fe0:	83 ec 0c             	sub    esp,0xc
c0011fe3:	68 14 01 00 00       	push   0x114
c0011fe8:	e8 aa d8 ff ff       	call   c000f897 <malloc>
c0011fed:	83 c4 0c             	add    esp,0xc
c0011ff0:	89 c6                	mov    esi,eax
c0011ff2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ff7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ffa:	50                   	push   eax
c0011ffb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ffe:	52                   	push   edx
c0011fff:	56                   	push   esi
c0012000:	e8 85 61 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0012005:	83 c4 10             	add    esp,0x10
c0012008:	85 f6                	test   esi,esi
c001200a:	74 5b                	je     c0012067 <SysOpen(regs*)+0x1d6>
c001200c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001200f:	0f b6 c2             	movzx  eax,dl
c0012012:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012015:	89 d0                	mov    eax,edx
c0012017:	83 e0 01             	and    eax,0x1
c001201a:	f6 c2 02             	test   dl,0x2
c001201d:	74 03                	je     c0012022 <SysOpen(regs*)+0x191>
c001201f:	83 c8 02             	or     eax,0x2
c0012022:	f6 c2 04             	test   dl,0x4
c0012025:	74 03                	je     c001202a <SysOpen(regs*)+0x199>
c0012027:	83 c8 04             	or     eax,0x4
c001202a:	f6 c2 08             	test   dl,0x8
c001202d:	74 03                	je     c0012032 <SysOpen(regs*)+0x1a1>
c001202f:	83 c8 0a             	or     eax,0xa
c0012032:	80 e2 10             	and    dl,0x10
c0012035:	74 03                	je     c001203a <SysOpen(regs*)+0x1a9>
c0012037:	83 c8 12             	or     eax,0x12
c001203a:	83 ec 08             	sub    esp,0x8
c001203d:	50                   	push   eax
c001203e:	56                   	push   esi
c001203f:	e8 64 61 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0012044:	83 c4 10             	add    esp,0x10
c0012047:	85 c0                	test   eax,eax
c0012049:	75 1c                	jne    c0012067 <SysOpen(regs*)+0x1d6>
c001204b:	83 ec 0c             	sub    esp,0xc
c001204e:	56                   	push   esi
c001204f:	e8 78 0e 00 00       	call   c0012ecc <UnixFile::getFileDescriptor()>
c0012054:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012057:	83 c4 10             	add    esp,0x10
c001205a:	89 02                	mov    DWORD PTR [edx],eax
c001205c:	c1 f8 1f             	sar    eax,0x1f
c001205f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012062:	e9 ba fe ff ff       	jmp    c0011f21 <SysOpen(regs*)+0x90>
c0012067:	81 c4 04 01 00 00    	add    esp,0x104
c001206d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012072:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012077:	5b                   	pop    ebx
c0012078:	5e                   	pop    esi
c0012079:	c3                   	ret    
c001207a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001207d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012083:	e9 92 fe ff ff       	jmp    c0011f1a <SysOpen(regs*)+0x89>

c0012088 <KeSystemCall(regs*, void*)>:
c0012088:	53                   	push   ebx
c0012089:	83 ec 08             	sub    esp,0x8
c001208c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012090:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012093:	83 f8 48             	cmp    eax,0x48
c0012096:	77 16                	ja     c00120ae <KeSystemCall(regs*, void*)+0x26>
c0012098:	8b 14 85 20 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd97e0]
c001209f:	85 d2                	test   edx,edx
c00120a1:	74 0b                	je     c00120ae <KeSystemCall(regs*, void*)+0x26>
c00120a3:	83 ec 0c             	sub    esp,0xc
c00120a6:	53                   	push   ebx
c00120a7:	ff d2                	call   edx
c00120a9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00120ac:	eb 0d                	jmp    c00120bb <KeSystemCall(regs*, void*)+0x33>
c00120ae:	52                   	push   edx
c00120af:	52                   	push   edx
c00120b0:	50                   	push   eax
c00120b1:	68 46 45 02 c0       	push   0xc0024546
c00120b6:	e8 c1 4e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00120bb:	83 c4 10             	add    esp,0x10
c00120be:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00120c3:	31 d2                	xor    edx,edx
c00120c5:	83 c4 08             	add    esp,0x8
c00120c8:	5b                   	pop    ebx
c00120c9:	c3                   	ret    

c00120ca <VgaText::isAtty()>:
c00120ca:	b0 01                	mov    al,0x1
c00120cc:	c3                   	ret    
c00120cd:	90                   	nop

c00120ce <VgaText::~VgaText()>:
c00120ce:	83 ec 0c             	sub    esp,0xc
c00120d1:	ba b0 45 02 c0       	mov    edx,0xc00245b0
c00120d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120da:	89 10                	mov    DWORD PTR [eax],edx
c00120dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120e0:	83 ec 0c             	sub    esp,0xc
c00120e3:	50                   	push   eax
c00120e4:	e8 d1 0f 00 00       	call   c00130ba <UnixFile::~UnixFile()>
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	90                   	nop
c00120ed:	83 c4 0c             	add    esp,0xc
c00120f0:	c3                   	ret    
c00120f1:	90                   	nop

c00120f2 <VgaText::~VgaText()>:
c00120f2:	83 ec 0c             	sub    esp,0xc
c00120f5:	83 ec 0c             	sub    esp,0xc
c00120f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120fc:	e8 cd ff ff ff       	call   c00120ce <VgaText::~VgaText()>
c0012101:	83 c4 10             	add    esp,0x10
c0012104:	83 ec 08             	sub    esp,0x8
c0012107:	68 84 01 00 00       	push   0x184
c001210c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012110:	e8 9b b2 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	83 c4 0c             	add    esp,0xc
c001211b:	c3                   	ret    

c001211c <VgaText::read(unsigned long long, void*, int*)>:
c001211c:	83 ec 10             	sub    esp,0x10
c001211f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012123:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001212b:	e8 75 84 ff ff       	call   c000a5a5 <readKeyboard(VgaText*, char*, unsigned long)>
c0012130:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012134:	89 02                	mov    DWORD PTR [edx],eax
c0012136:	31 c0                	xor    eax,eax
c0012138:	83 c4 1c             	add    esp,0x1c
c001213b:	c3                   	ret    

c001213c <setTerminalScrollLock(bool)>:
c001213c:	c3                   	ret    

c001213d <doTerminalCycle()>:
c001213d:	c3                   	ret    

c001213e <addToTerminalCycle(VgaText*)>:
c001213e:	c3                   	ret    

c001213f <scrollTerminalScrollLock(int)>:
c001213f:	c3                   	ret    

c0012140 <VgaText::updateTitle()>:
c0012140:	c3                   	ret    
c0012141:	90                   	nop

c0012142 <VgaText::load()>:
c0012142:	c3                   	ret    
c0012143:	90                   	nop

c0012144 <VgaText::updateCursor()>:
c0012144:	83 ec 14             	sub    esp,0x14
c0012147:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001214b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001214e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012151:	e8 02 96 00 00       	call   c001b758 <HalConsoleCursorUpdate(int, int)>
c0012156:	83 c4 1c             	add    esp,0x1c
c0012159:	c3                   	ret    

c001215a <VgaText::doANSI_SGR(int)>:
c001215a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001215e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012162:	85 d2                	test   edx,edx
c0012164:	75 0b                	jne    c0012171 <VgaText::doANSI_SGR(int)+0x17>
c0012166:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012169:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001216c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001216f:	eb 59                	jmp    c00121ca <VgaText::doANSI_SGR(int)+0x70>
c0012171:	83 fa 07             	cmp    edx,0x7
c0012174:	75 0b                	jne    c0012181 <VgaText::doANSI_SGR(int)+0x27>
c0012176:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012179:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001217c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001217f:	eb 49                	jmp    c00121ca <VgaText::doANSI_SGR(int)+0x70>
c0012181:	83 fa 1b             	cmp    edx,0x1b
c0012184:	74 e0                	je     c0012166 <VgaText::doANSI_SGR(int)+0xc>
c0012186:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012189:	83 f9 07             	cmp    ecx,0x7
c001218c:	77 09                	ja     c0012197 <VgaText::doANSI_SGR(int)+0x3d>
c001218e:	8b 14 8d 80 69 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9680]
c0012195:	eb 20                	jmp    c00121b7 <VgaText::doANSI_SGR(int)+0x5d>
c0012197:	8d 4a d8             	lea    ecx,[edx-0x28]
c001219a:	83 f9 07             	cmp    ecx,0x7
c001219d:	77 09                	ja     c00121a8 <VgaText::doANSI_SGR(int)+0x4e>
c001219f:	8b 14 8d 80 69 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9680]
c00121a6:	eb 22                	jmp    c00121ca <VgaText::doANSI_SGR(int)+0x70>
c00121a8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00121ab:	83 f9 07             	cmp    ecx,0x7
c00121ae:	77 0b                	ja     c00121bb <VgaText::doANSI_SGR(int)+0x61>
c00121b0:	8b 14 95 38 68 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd97c8]
c00121b7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00121ba:	c3                   	ret    
c00121bb:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00121be:	83 f9 07             	cmp    ecx,0x7
c00121c1:	77 0a                	ja     c00121cd <VgaText::doANSI_SGR(int)+0x73>
c00121c3:	8b 14 95 10 68 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd97f0]
c00121ca:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00121cd:	c3                   	ret    

c00121ce <VgaText::setDefaultBgColour(VgaColour)>:
c00121ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121d6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00121d9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00121dc:	c3                   	ret    
c00121dd:	90                   	nop

c00121de <VgaText::setDefaultFgColour(VgaColour)>:
c00121de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121e6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00121e9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00121ec:	c3                   	ret    
c00121ed:	90                   	nop

c00121ee <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00121ee:	53                   	push   ebx
c00121ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00121f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00121fb:	51                   	push   ecx
c00121fc:	e8 cd ff ff ff       	call   c00121ce <VgaText::setDefaultBgColour(VgaColour)>
c0012201:	58                   	pop    eax
c0012202:	5a                   	pop    edx
c0012203:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012207:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001220b:	5b                   	pop    ebx
c001220c:	eb d0                	jmp    c00121de <VgaText::setDefaultFgColour(VgaColour)>

c001220e <VgaText::setTitleTextColour(VgaColour)>:
c001220e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012212:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012216:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012219:	c3                   	ret    

c001221a <VgaText::setTitleColour(VgaColour)>:
c001221a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001221e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012222:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012225:	c3                   	ret    

c0012226 <VgaText::setTitle(char*)>:
c0012226:	c3                   	ret    
c0012227:	90                   	nop

c0012228 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001222c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012231:	83 e0 0f             	and    eax,0xf
c0012234:	c1 e2 04             	shl    edx,0x4
c0012237:	09 d0                	or     eax,edx
c0012239:	c3                   	ret    

c001223a <VgaText::scrollScreen()>:
c001223a:	55                   	push   ebp
c001223b:	57                   	push   edi
c001223c:	56                   	push   esi
c001223d:	be 01 00 00 00       	mov    esi,0x1
c0012242:	53                   	push   ebx
c0012243:	83 ec 0c             	sub    esp,0xc
c0012246:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001224a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001224d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012253:	31 ff                	xor    edi,edi
c0012255:	01 e9                	add    ecx,ebp
c0012257:	8a 01                	mov    al,BYTE PTR [ecx]
c0012259:	83 fe 18             	cmp    esi,0x18
c001225c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012262:	75 20                	jne    c0012284 <VgaText::scrollScreen()+0x4a>
c0012264:	f7 c7 01 00 00 00    	test   edi,0x1
c001226a:	74 15                	je     c0012281 <VgaText::scrollScreen()+0x47>
c001226c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012270:	50                   	push   eax
c0012271:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012275:	50                   	push   eax
c0012276:	e8 ad ff ff ff       	call   c0012228 <VgaText::combineColours(unsigned char, unsigned char)>
c001227b:	5a                   	pop    edx
c001227c:	5a                   	pop    edx
c001227d:	88 01                	mov    BYTE PTR [ecx],al
c001227f:	eb 03                	jmp    c0012284 <VgaText::scrollScreen()+0x4a>
c0012281:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012284:	47                   	inc    edi
c0012285:	41                   	inc    ecx
c0012286:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001228c:	75 c9                	jne    c0012257 <VgaText::scrollScreen()+0x1d>
c001228e:	46                   	inc    esi
c001228f:	83 fe 19             	cmp    esi,0x19
c0012292:	75 b9                	jne    c001224d <VgaText::scrollScreen()+0x13>
c0012294:	39 1d f4 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1f4,ebx
c001229a:	75 1f                	jne    c00122bb <VgaText::scrollScreen()+0x81>
c001229c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00122a0:	74 05                	je     c00122a7 <VgaText::scrollScreen()+0x6d>
c00122a2:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00122a5:	eb 14                	jmp    c00122bb <VgaText::scrollScreen()+0x81>
c00122a7:	50                   	push   eax
c00122a8:	50                   	push   eax
c00122a9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00122ad:	50                   	push   eax
c00122ae:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00122b2:	50                   	push   eax
c00122b3:	e8 34 93 00 00       	call   c001b5ec <HalConsoleScroll(int, int)>
c00122b8:	83 c4 10             	add    esp,0x10
c00122bb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00122bf:	83 c4 0c             	add    esp,0xc
c00122c2:	5b                   	pop    ebx
c00122c3:	5e                   	pop    esi
c00122c4:	5f                   	pop    edi
c00122c5:	5d                   	pop    ebp
c00122c6:	e9 79 fe ff ff       	jmp    c0012144 <VgaText::updateCursor()>
c00122cb:	90                   	nop

c00122cc <VgaText::combineCharAndColour(char, unsigned char)>:
c00122cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00122d1:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00122d6:	c1 e0 08             	shl    eax,0x8
c00122d9:	09 d0                	or     eax,edx
c00122db:	c3                   	ret    

c00122dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00122dc:	55                   	push   ebp
c00122dd:	57                   	push   edi
c00122de:	56                   	push   esi
c00122df:	53                   	push   ebx
c00122e0:	83 ec 1c             	sub    esp,0x1c
c00122e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00122e7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122ef:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c00122f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122f6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00122fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122fe:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012302:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012306:	85 ed                	test   ebp,ebp
c0012308:	75 14                	jne    c001231e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c001230a:	c7 44 24 30 5a 45 02 c0 	mov    DWORD PTR [esp+0x30],0xc002455a
c0012312:	83 c4 1c             	add    esp,0x1c
c0012315:	5b                   	pop    ebx
c0012316:	5e                   	pop    esi
c0012317:	5f                   	pop    edi
c0012318:	5d                   	pop    ebp
c0012319:	e9 d6 d9 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001231e:	50                   	push   eax
c001231f:	50                   	push   eax
c0012320:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012325:	50                   	push   eax
c0012326:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001232b:	50                   	push   eax
c001232c:	e8 f7 fe ff ff       	call   c0012228 <VgaText::combineColours(unsigned char, unsigned char)>
c0012331:	5a                   	pop    edx
c0012332:	0f be c9             	movsx  ecx,cl
c0012335:	5a                   	pop    edx
c0012336:	0f b6 c0             	movzx  eax,al
c0012339:	50                   	push   eax
c001233a:	51                   	push   ecx
c001233b:	e8 8c ff ff ff       	call   c00122cc <VgaText::combineCharAndColour(char, unsigned char)>
c0012340:	6b d6 50             	imul   edx,esi,0x50
c0012343:	83 c4 10             	add    esp,0x10
c0012346:	01 da                	add    edx,ebx
c0012348:	0f b7 d2             	movzx  edx,dx
c001234b:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012350:	39 3d f4 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1f4,edi
c0012356:	75 28                	jne    c0012380 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012358:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001235c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012360:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012364:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012368:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001236c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012370:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012374:	83 c4 1c             	add    esp,0x1c
c0012377:	5b                   	pop    ebx
c0012378:	5e                   	pop    esi
c0012379:	5f                   	pop    edi
c001237a:	5d                   	pop    ebp
c001237b:	e9 74 93 00 00       	jmp    c001b6f4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012380:	83 c4 1c             	add    esp,0x1c
c0012383:	5b                   	pop    ebx
c0012384:	5e                   	pop    esi
c0012385:	5f                   	pop    edi
c0012386:	5d                   	pop    ebp
c0012387:	c3                   	ret    

c0012388 <VgaText::getCursorX()>:
c0012388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001238c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001238f:	c3                   	ret    

c0012390 <VgaText::getCursorY()>:
c0012390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012394:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012397:	c3                   	ret    

c0012398 <VgaText::setCursor(int, int)>:
c0012398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001239c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123a0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00123a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00123a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00123aa:	e9 95 fd ff ff       	jmp    c0012144 <VgaText::updateCursor()>

c00123af <setActiveTerminal(VgaText*)>:
c00123af:	53                   	push   ebx
c00123b0:	83 ec 08             	sub    esp,0x8
c00123b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123b7:	85 db                	test   ebx,ebx
c00123b9:	75 11                	jne    c00123cc <setActiveTerminal(VgaText*)+0x1d>
c00123bb:	c7 44 24 10 6a 45 02 c0 	mov    DWORD PTR [esp+0x10],0xc002456a
c00123c3:	83 c4 08             	add    esp,0x8
c00123c6:	5b                   	pop    ebx
c00123c7:	e9 28 d9 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c00123cc:	a1 f4 c1 02 c0       	mov    eax,ds:0xc002c1f4
c00123d1:	85 c0                	test   eax,eax
c00123d3:	74 0c                	je     c00123e1 <setActiveTerminal(VgaText*)+0x32>
c00123d5:	83 ec 0c             	sub    esp,0xc
c00123d8:	50                   	push   eax
c00123d9:	e8 66 fd ff ff       	call   c0012144 <VgaText::updateCursor()>
c00123de:	83 c4 10             	add    esp,0x10
c00123e1:	89 1d f4 c1 02 c0    	mov    DWORD PTR ds:0xc002c1f4,ebx
c00123e7:	50                   	push   eax
c00123e8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00123eb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00123ee:	53                   	push   ebx
c00123ef:	e8 a4 ff ff ff       	call   c0012398 <VgaText::setCursor(int, int)>
c00123f4:	83 c4 18             	add    esp,0x18
c00123f7:	5b                   	pop    ebx
c00123f8:	c3                   	ret    
c00123f9:	90                   	nop

c00123fa <VgaText::clearScreen()>:
c00123fa:	57                   	push   edi
c00123fb:	56                   	push   esi
c00123fc:	31 f6                	xor    esi,esi
c00123fe:	53                   	push   ebx
c00123ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012403:	52                   	push   edx
c0012404:	6a 00                	push   0x0
c0012406:	6a 00                	push   0x0
c0012408:	53                   	push   ebx
c0012409:	e8 8a ff ff ff       	call   c0012398 <VgaText::setCursor(int, int)>
c001240e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012415:	83 c4 10             	add    esp,0x10
c0012418:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001241b:	7e 20                	jle    c001243d <VgaText::clearScreen()+0x43>
c001241d:	31 ff                	xor    edi,edi
c001241f:	50                   	push   eax
c0012420:	50                   	push   eax
c0012421:	56                   	push   esi
c0012422:	57                   	push   edi
c0012423:	47                   	inc    edi
c0012424:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012427:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001242a:	6a 20                	push   0x20
c001242c:	53                   	push   ebx
c001242d:	e8 aa fe ff ff       	call   c00122dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012432:	83 c4 20             	add    esp,0x20
c0012435:	83 ff 50             	cmp    edi,0x50
c0012438:	75 e5                	jne    c001241f <VgaText::clearScreen()+0x25>
c001243a:	46                   	inc    esi
c001243b:	eb db                	jmp    c0012418 <VgaText::clearScreen()+0x1e>
c001243d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012444:	5b                   	pop    ebx
c0012445:	5e                   	pop    esi
c0012446:	5f                   	pop    edi
c0012447:	c3                   	ret    

c0012448 <VgaText::setCursorX(int)>:
c0012448:	83 ec 10             	sub    esp,0x10
c001244b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001244f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012456:	50                   	push   eax
c0012457:	e8 3c ff ff ff       	call   c0012398 <VgaText::setCursor(int, int)>
c001245c:	83 c4 1c             	add    esp,0x1c
c001245f:	c3                   	ret    

c0012460 <VgaText::setCursorY(int)>:
c0012460:	83 ec 10             	sub    esp,0x10
c0012463:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012467:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001246b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001246e:	50                   	push   eax
c001246f:	e8 24 ff ff ff       	call   c0012398 <VgaText::setCursor(int, int)>
c0012474:	83 c4 1c             	add    esp,0x1c
c0012477:	c3                   	ret    

c0012478 <VgaText::incrementCursor(bool)>:
c0012478:	56                   	push   esi
c0012479:	53                   	push   ebx
c001247a:	51                   	push   ecx
c001247b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001247f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012483:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012486:	40                   	inc    eax
c0012487:	83 f8 50             	cmp    eax,0x50
c001248a:	74 05                	je     c0012491 <VgaText::incrementCursor(bool)+0x19>
c001248c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001248f:	eb 24                	jmp    c00124b5 <VgaText::incrementCursor(bool)+0x3d>
c0012491:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012494:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001249b:	8d 50 01             	lea    edx,[eax+0x1]
c001249e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00124a1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00124a4:	75 0f                	jne    c00124b5 <VgaText::incrementCursor(bool)+0x3d>
c00124a6:	83 ec 0c             	sub    esp,0xc
c00124a9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00124ac:	53                   	push   ebx
c00124ad:	e8 88 fd ff ff       	call   c001223a <VgaText::scrollScreen()>
c00124b2:	83 c4 10             	add    esp,0x10
c00124b5:	89 f0                	mov    eax,esi
c00124b7:	84 c0                	test   al,al
c00124b9:	74 0c                	je     c00124c7 <VgaText::incrementCursor(bool)+0x4f>
c00124bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00124bf:	5a                   	pop    edx
c00124c0:	5b                   	pop    ebx
c00124c1:	5e                   	pop    esi
c00124c2:	e9 7d fc ff ff       	jmp    c0012144 <VgaText::updateCursor()>
c00124c7:	58                   	pop    eax
c00124c8:	5b                   	pop    ebx
c00124c9:	5e                   	pop    esi
c00124ca:	c3                   	ret    
c00124cb:	90                   	nop

c00124cc <VgaText::decrementCursor(bool)>:
c00124cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00124d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00124d4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00124d7:	85 c0                	test   eax,eax
c00124d9:	74 04                	je     c00124df <VgaText::decrementCursor(bool)+0x13>
c00124db:	48                   	dec    eax
c00124dc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00124df:	84 c9                	test   cl,cl
c00124e1:	74 09                	je     c00124ec <VgaText::decrementCursor(bool)+0x20>
c00124e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00124e7:	e9 58 fc ff ff       	jmp    c0012144 <VgaText::updateCursor()>
c00124ec:	c3                   	ret    
c00124ed:	90                   	nop

c00124ee <VgaText::putchar(char, VgaColour, VgaColour)>:
c00124ee:	53                   	push   ebx
c00124ef:	83 ec 08             	sub    esp,0x8
c00124f2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00124f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00124ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012503:	83 f8 07             	cmp    eax,0x7
c0012506:	75 21                	jne    c0012529 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012508:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012510:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012518:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012520:	83 c4 08             	add    esp,0x8
c0012523:	5b                   	pop    ebx
c0012524:	e9 02 65 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c0012529:	83 f8 0d             	cmp    eax,0xd
c001252c:	75 09                	jne    c0012537 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001252e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012535:	eb 2d                	jmp    c0012564 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012537:	83 f8 0a             	cmp    eax,0xa
c001253a:	75 31                	jne    c001256d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001253c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001253f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012546:	8d 50 01             	lea    edx,[eax+0x1]
c0012549:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001254c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001254f:	75 0f                	jne    c0012560 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012551:	83 ec 0c             	sub    esp,0xc
c0012554:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012557:	53                   	push   ebx
c0012558:	e8 dd fc ff ff       	call   c001223a <VgaText::scrollScreen()>
c001255d:	83 c4 10             	add    esp,0x10
c0012560:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012564:	83 c4 08             	add    esp,0x8
c0012567:	5b                   	pop    ebx
c0012568:	e9 d7 fb ff ff       	jmp    c0012144 <VgaText::updateCursor()>
c001256d:	83 f8 08             	cmp    eax,0x8
c0012570:	75 25                	jne    c0012597 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012572:	50                   	push   eax
c0012573:	50                   	push   eax
c0012574:	6a 01                	push   0x1
c0012576:	53                   	push   ebx
c0012577:	e8 50 ff ff ff       	call   c00124cc <VgaText::decrementCursor(bool)>
c001257c:	5a                   	pop    edx
c001257d:	59                   	pop    ecx
c001257e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012581:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012584:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012587:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001258a:	6a 20                	push   0x20
c001258c:	53                   	push   ebx
c001258d:	e8 4a fd ff ff       	call   c00122dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012592:	83 c4 28             	add    esp,0x28
c0012595:	5b                   	pop    ebx
c0012596:	c3                   	ret    
c0012597:	83 ec 08             	sub    esp,0x8
c001259a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001259d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00125a0:	51                   	push   ecx
c00125a1:	52                   	push   edx
c00125a2:	50                   	push   eax
c00125a3:	53                   	push   ebx
c00125a4:	e8 33 fd ff ff       	call   c00122dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00125a9:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00125ad:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00125b5:	83 c4 28             	add    esp,0x28
c00125b8:	5b                   	pop    ebx
c00125b9:	e9 ba fe ff ff       	jmp    c0012478 <VgaText::incrementCursor(bool)>

c00125be <VgaText::putchar(char)>:
c00125be:	57                   	push   edi
c00125bf:	56                   	push   esi
c00125c0:	53                   	push   ebx
c00125c1:	83 ec 10             	sub    esp,0x10
c00125c4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00125c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00125cc:	89 f8                	mov    eax,edi
c00125ce:	0f be c0             	movsx  eax,al
c00125d1:	83 f8 5b             	cmp    eax,0x5b
c00125d4:	75 18                	jne    c00125ee <VgaText::putchar(char)+0x30>
c00125d6:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00125da:	74 20                	je     c00125fc <VgaText::putchar(char)+0x3e>
c00125dc:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00125e2:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00125e9:	e9 c1 00 00 00       	jmp    c00126af <VgaText::putchar(char)+0xf1>
c00125ee:	83 f8 1b             	cmp    eax,0x1b
c00125f1:	75 09                	jne    c00125fc <VgaText::putchar(char)+0x3e>
c00125f3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00125f7:	e9 b3 00 00 00       	jmp    c00126af <VgaText::putchar(char)+0xf1>
c00125fc:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00125ff:	84 c9                	test   cl,cl
c0012601:	0f 84 98 00 00 00    	je     c001269f <VgaText::putchar(char)+0xe1>
c0012607:	8d 77 c0             	lea    esi,[edi-0x40]
c001260a:	89 f2                	mov    edx,esi
c001260c:	80 fa 3e             	cmp    dl,0x3e
c001260f:	77 78                	ja     c0012689 <VgaText::putchar(char)+0xcb>
c0012611:	83 f8 6d             	cmp    eax,0x6d
c0012614:	75 47                	jne    c001265d <VgaText::putchar(char)+0x9f>
c0012616:	31 f6                	xor    esi,esi
c0012618:	31 d2                	xor    edx,edx
c001261a:	31 c0                	xor    eax,eax
c001261c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001261f:	7e 2d                	jle    c001264e <VgaText::putchar(char)+0x90>
c0012621:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012626:	83 fa 3b             	cmp    edx,0x3b
c0012629:	75 17                	jne    c0012642 <VgaText::putchar(char)+0x84>
c001262b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001262f:	50                   	push   eax
c0012630:	53                   	push   ebx
c0012631:	e8 24 fb ff ff       	call   c001215a <VgaText::doANSI_SGR(int)>
c0012636:	59                   	pop    ecx
c0012637:	31 d2                	xor    edx,edx
c0012639:	5f                   	pop    edi
c001263a:	31 c0                	xor    eax,eax
c001263c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012640:	eb 09                	jmp    c001264b <VgaText::putchar(char)+0x8d>
c0012642:	6b c0 0a             	imul   eax,eax,0xa
c0012645:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012649:	88 ca                	mov    dl,cl
c001264b:	46                   	inc    esi
c001264c:	eb ce                	jmp    c001261c <VgaText::putchar(char)+0x5e>
c001264e:	84 d2                	test   dl,dl
c0012650:	74 2f                	je     c0012681 <VgaText::putchar(char)+0xc3>
c0012652:	50                   	push   eax
c0012653:	53                   	push   ebx
c0012654:	e8 01 fb ff ff       	call   c001215a <VgaText::doANSI_SGR(int)>
c0012659:	58                   	pop    eax
c001265a:	5a                   	pop    edx
c001265b:	eb 24                	jmp    c0012681 <VgaText::putchar(char)+0xc3>
c001265d:	83 f8 4a             	cmp    eax,0x4a
c0012660:	75 1f                	jne    c0012681 <VgaText::putchar(char)+0xc3>
c0012662:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012666:	75 19                	jne    c0012681 <VgaText::putchar(char)+0xc3>
c0012668:	83 ec 0c             	sub    esp,0xc
c001266b:	53                   	push   ebx
c001266c:	e8 89 fd ff ff       	call   c00123fa <VgaText::clearScreen()>
c0012671:	83 c4 0c             	add    esp,0xc
c0012674:	6a 00                	push   0x0
c0012676:	6a 00                	push   0x0
c0012678:	53                   	push   ebx
c0012679:	e8 1a fd ff ff       	call   c0012398 <VgaText::setCursor(int, int)>
c001267e:	83 c4 10             	add    esp,0x10
c0012681:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012687:	eb 26                	jmp    c00126af <VgaText::putchar(char)+0xf1>
c0012689:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001268c:	83 f8 0e             	cmp    eax,0xe
c001268f:	7f 1e                	jg     c00126af <VgaText::putchar(char)+0xf1>
c0012691:	8d 48 01             	lea    ecx,[eax+0x1]
c0012694:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012697:	89 f9                	mov    ecx,edi
c0012699:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c001269d:	eb 10                	jmp    c00126af <VgaText::putchar(char)+0xf1>
c001269f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00126a2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00126a5:	50                   	push   eax
c00126a6:	53                   	push   ebx
c00126a7:	e8 42 fe ff ff       	call   c00124ee <VgaText::putchar(char, VgaColour, VgaColour)>
c00126ac:	83 c4 10             	add    esp,0x10
c00126af:	83 c4 10             	add    esp,0x10
c00126b2:	5b                   	pop    ebx
c00126b3:	5e                   	pop    esi
c00126b4:	5f                   	pop    edi
c00126b5:	c3                   	ret    

c00126b6 <VgaText::putx(unsigned int)>:
c00126b6:	57                   	push   edi
c00126b7:	b9 11 00 00 00       	mov    ecx,0x11
c00126bc:	56                   	push   esi
c00126bd:	be cf 2d 02 c0       	mov    esi,0xc0022dcf
c00126c2:	53                   	push   ebx
c00126c3:	83 ec 20             	sub    esp,0x20
c00126c6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00126ca:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00126ce:	fc                   	cld    
c00126cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126d1:	be 08 00 00 00       	mov    esi,0x8
c00126d6:	50                   	push   eax
c00126d7:	50                   	push   eax
c00126d8:	89 d8                	mov    eax,ebx
c00126da:	c1 e3 04             	shl    ebx,0x4
c00126dd:	c1 e8 1c             	shr    eax,0x1c
c00126e0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00126e5:	50                   	push   eax
c00126e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126ea:	e8 cf fe ff ff       	call   c00125be <VgaText::putchar(char)>
c00126ef:	83 c4 10             	add    esp,0x10
c00126f2:	4e                   	dec    esi
c00126f3:	75 e1                	jne    c00126d6 <VgaText::putx(unsigned int)+0x20>
c00126f5:	83 c4 20             	add    esp,0x20
c00126f8:	5b                   	pop    ebx
c00126f9:	5e                   	pop    esi
c00126fa:	5f                   	pop    edi
c00126fb:	c3                   	ret    

c00126fc <VgaText::puts(char const*)>:
c00126fc:	53                   	push   ebx
c00126fd:	83 ec 08             	sub    esp,0x8
c0012700:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012704:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012707:	85 c0                	test   eax,eax
c0012709:	74 12                	je     c001271d <VgaText::puts(char const*)+0x21>
c001270b:	43                   	inc    ebx
c001270c:	51                   	push   ecx
c001270d:	51                   	push   ecx
c001270e:	50                   	push   eax
c001270f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012713:	e8 a6 fe ff ff       	call   c00125be <VgaText::putchar(char)>
c0012718:	83 c4 10             	add    esp,0x10
c001271b:	eb e7                	jmp    c0012704 <VgaText::puts(char const*)+0x8>
c001271d:	83 c4 08             	add    esp,0x8
c0012720:	5b                   	pop    ebx
c0012721:	c3                   	ret    

c0012722 <VgaText::write(unsigned long long, void*, int*)>:
c0012722:	55                   	push   ebp
c0012723:	57                   	push   edi
c0012724:	56                   	push   esi
c0012725:	53                   	push   ebx
c0012726:	83 ec 0c             	sub    esp,0xc
c0012729:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001272d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012731:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012735:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001273c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001273f:	39 eb                	cmp    ebx,ebp
c0012741:	74 13                	je     c0012756 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012743:	43                   	inc    ebx
c0012744:	50                   	push   eax
c0012745:	50                   	push   eax
c0012746:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001274a:	50                   	push   eax
c001274b:	56                   	push   esi
c001274c:	e8 6d fe ff ff       	call   c00125be <VgaText::putchar(char)>
c0012751:	83 c4 10             	add    esp,0x10
c0012754:	eb e9                	jmp    c001273f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012756:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001275d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012761:	89 38                	mov    DWORD PTR [eax],edi
c0012763:	83 c4 0c             	add    esp,0xc
c0012766:	31 c0                	xor    eax,eax
c0012768:	5b                   	pop    ebx
c0012769:	5e                   	pop    esi
c001276a:	5f                   	pop    edi
c001276b:	5d                   	pop    ebp
c001276c:	c3                   	ret    
c001276d:	90                   	nop

c001276e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001276e:	55                   	push   ebp
c001276f:	57                   	push   edi
c0012770:	56                   	push   esi
c0012771:	53                   	push   ebx
c0012772:	83 ec 1c             	sub    esp,0x1c
c0012775:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012779:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001277d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012781:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012784:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012788:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001278c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012790:	85 db                	test   ebx,ebx
c0012792:	75 14                	jne    c00127a8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c0012794:	c7 44 24 30 78 45 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024578
c001279c:	83 c4 1c             	add    esp,0x1c
c001279f:	5b                   	pop    ebx
c00127a0:	5e                   	pop    esi
c00127a1:	5f                   	pop    edi
c00127a2:	5d                   	pop    ebp
c00127a3:	e9 4c d5 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c00127a8:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00127af:	50                   	push   eax
c00127b0:	50                   	push   eax
c00127b1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00127b6:	50                   	push   eax
c00127b7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00127bc:	50                   	push   eax
c00127bd:	e8 66 fa ff ff       	call   c0012228 <VgaText::combineColours(unsigned char, unsigned char)>
c00127c2:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00127c6:	83 c4 10             	add    esp,0x10
c00127c9:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00127cc:	0f b6 e8             	movzx  ebp,al
c00127cf:	0f b7 c9             	movzx  ecx,cx
c00127d2:	01 c9                	add    ecx,ecx
c00127d4:	01 cb                	add    ebx,ecx
c00127d6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00127d9:	85 c0                	test   eax,eax
c00127db:	0f 84 ef 00 00 00    	je     c00128d0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00127e1:	83 f8 0d             	cmp    eax,0xd
c00127e4:	75 0c                	jne    c00127f2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00127e6:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00127ed:	e9 d8 00 00 00       	jmp    c00128ca <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00127f2:	83 f8 0a             	cmp    eax,0xa
c00127f5:	75 44                	jne    c001283b <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c00127f7:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00127fa:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012801:	8d 48 01             	lea    ecx,[eax+0x1]
c0012804:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012807:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c001280a:	75 0f                	jne    c001281b <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c001280c:	83 ec 0c             	sub    esp,0xc
c001280f:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012812:	57                   	push   edi
c0012813:	e8 22 fa ff ff       	call   c001223a <VgaText::scrollScreen()>
c0012818:	83 c4 10             	add    esp,0x10
c001281b:	83 ec 0c             	sub    esp,0xc
c001281e:	57                   	push   edi
c001281f:	e8 20 f9 ff ff       	call   c0012144 <VgaText::updateCursor()>
c0012824:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012828:	83 c4 10             	add    esp,0x10
c001282b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001282e:	0f b7 db             	movzx  ebx,bx
c0012831:	01 db                	add    ebx,ebx
c0012833:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012836:	e9 8f 00 00 00       	jmp    c00128ca <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001283b:	83 f8 08             	cmp    eax,0x8
c001283e:	75 34                	jne    c0012874 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012840:	51                   	push   ecx
c0012841:	51                   	push   ecx
c0012842:	6a 01                	push   0x1
c0012844:	57                   	push   edi
c0012845:	e8 82 fc ff ff       	call   c00124cc <VgaText::decrementCursor(bool)>
c001284a:	5b                   	pop    ebx
c001284b:	58                   	pop    eax
c001284c:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001284f:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012852:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012855:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012858:	6a 20                	push   0x20
c001285a:	57                   	push   edi
c001285b:	e8 7c fa ff ff       	call   c00122dc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012860:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012864:	83 c4 20             	add    esp,0x20
c0012867:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001286a:	0f b7 db             	movzx  ebx,bx
c001286d:	01 db                	add    ebx,ebx
c001286f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012872:	eb 56                	jmp    c00128ca <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012874:	52                   	push   edx
c0012875:	52                   	push   edx
c0012876:	55                   	push   ebp
c0012877:	50                   	push   eax
c0012878:	e8 4f fa ff ff       	call   c00122cc <VgaText::combineCharAndColour(char, unsigned char)>
c001287d:	83 c4 10             	add    esp,0x10
c0012880:	66 89 03             	mov    WORD PTR [ebx],ax
c0012883:	39 3d f4 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1f4,edi
c0012889:	75 1d                	jne    c00128a8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c001288b:	83 ec 0c             	sub    esp,0xc
c001288e:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012891:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012894:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012898:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001289c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001289f:	50                   	push   eax
c00128a0:	e8 4f 8e 00 00       	call   c001b6f4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00128a5:	83 c4 20             	add    esp,0x20
c00128a8:	83 c3 02             	add    ebx,0x2
c00128ab:	50                   	push   eax
c00128ac:	50                   	push   eax
c00128ad:	6a 00                	push   0x0
c00128af:	57                   	push   edi
c00128b0:	e8 c3 fb ff ff       	call   c0012478 <VgaText::incrementCursor(bool)>
c00128b5:	83 c4 10             	add    esp,0x10
c00128b8:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00128bc:	75 0c                	jne    c00128ca <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00128be:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00128c2:	0f b7 db             	movzx  ebx,bx
c00128c5:	01 db                	add    ebx,ebx
c00128c7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00128ca:	46                   	inc    esi
c00128cb:	e9 06 ff ff ff       	jmp    c00127d6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00128d0:	83 ec 0c             	sub    esp,0xc
c00128d3:	57                   	push   edi
c00128d4:	e8 6b f8 ff ff       	call   c0012144 <VgaText::updateCursor()>
c00128d9:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c00128e0:	83 c4 2c             	add    esp,0x2c
c00128e3:	5b                   	pop    ebx
c00128e4:	5e                   	pop    esi
c00128e5:	5f                   	pop    edi
c00128e6:	5d                   	pop    ebp
c00128e7:	c3                   	ret    

c00128e8 <VgaText::VgaText(char const*)>:
c00128e8:	56                   	push   esi
c00128e9:	53                   	push   ebx
c00128ea:	83 ec 04             	sub    esp,0x4
c00128ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128f1:	83 ec 08             	sub    esp,0x8
c00128f4:	6a 00                	push   0x0
c00128f6:	50                   	push   eax
c00128f7:	e8 d8 05 00 00       	call   c0012ed4 <UnixFile::UnixFile(int)>
c00128fc:	83 c4 10             	add    esp,0x10
c00128ff:	ba b0 45 02 c0       	mov    edx,0xc00245b0
c0012904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012908:	89 10                	mov    DWORD PTR [eax],edx
c001290a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001290e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012919:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012924:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001292c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012934:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001293b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001293f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012955:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001295c:	83 ec 0c             	sub    esp,0xc
c001295f:	68 88 45 02 c0       	push   0xc0024588
c0012964:	e8 13 46 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012969:	83 c4 10             	add    esp,0x10
c001296c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012970:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012977:	83 ec 0c             	sub    esp,0xc
c001297a:	6a 01                	push   0x1
c001297c:	e8 a6 09 00 00       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c0012981:	83 c4 10             	add    esp,0x10
c0012984:	89 c2                	mov    edx,eax
c0012986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001298a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001298d:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c0012993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012997:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001299a:	89 c6                	mov    esi,eax
c001299c:	e8 47 d5 ff ff       	call   c000fee8 <Phys::allocatePage()>
c00129a1:	68 05 0c 00 00       	push   0xc05
c00129a6:	56                   	push   esi
c00129a7:	50                   	push   eax
c00129a8:	53                   	push   ebx
c00129a9:	e8 5c 10 00 00       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c00129ae:	83 c4 10             	add    esp,0x10
c00129b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129b5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00129b8:	83 ec 04             	sub    esp,0x4
c00129bb:	68 a0 0f 00 00       	push   0xfa0
c00129c0:	6a 00                	push   0x0
c00129c2:	50                   	push   eax
c00129c3:	e8 28 db fe ff       	call   c00004f0 <memset>
c00129c8:	83 c4 10             	add    esp,0x10
c00129cb:	83 ec 04             	sub    esp,0x4
c00129ce:	6a 00                	push   0x0
c00129d0:	6a 07                	push   0x7
c00129d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129d6:	e8 13 f8 ff ff       	call   c00121ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	83 ec 04             	sub    esp,0x4
c00129e1:	6a 00                	push   0x0
c00129e3:	6a 00                	push   0x0
c00129e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129e9:	e8 aa f9 ff ff       	call   c0012398 <VgaText::setCursor(int, int)>
c00129ee:	83 c4 10             	add    esp,0x10
c00129f1:	83 ec 0c             	sub    esp,0xc
c00129f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129f8:	e8 fd f9 ff ff       	call   c00123fa <VgaText::clearScreen()>
c00129fd:	83 c4 10             	add    esp,0x10
c0012a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a04:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a0c:	05 82 00 00 00       	add    eax,0x82
c0012a11:	83 ec 04             	sub    esp,0x4
c0012a14:	68 80 00 00 00       	push   0x80
c0012a19:	6a 00                	push   0x0
c0012a1b:	50                   	push   eax
c0012a1c:	e8 cf da fe ff       	call   c00004f0 <memset>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a28:	05 02 01 00 00       	add    eax,0x102
c0012a2d:	83 ec 04             	sub    esp,0x4
c0012a30:	68 80 00 00 00       	push   0x80
c0012a35:	6a 00                	push   0x0
c0012a37:	50                   	push   eax
c0012a38:	e8 b3 da fe ff       	call   c00004f0 <memset>
c0012a3d:	83 c4 10             	add    esp,0x10
c0012a40:	90                   	nop
c0012a41:	83 c4 04             	add    esp,0x4
c0012a44:	5b                   	pop    ebx
c0012a45:	5e                   	pop    esi
c0012a46:	c3                   	ret    
c0012a47:	90                   	nop

c0012a48 <VgaText::receiveKey(unsigned char)>:
c0012a48:	55                   	push   ebp
c0012a49:	57                   	push   edi
c0012a4a:	56                   	push   esi
c0012a4b:	53                   	push   ebx
c0012a4c:	83 ec 2c             	sub    esp,0x2c
c0012a4f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012a53:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012a57:	89 ef                	mov    edi,ebp
c0012a59:	81 e7 ff 00 00 00    	and    edi,0xff
c0012a5f:	0f 84 66 01 00 00    	je     c0012bcb <VgaText::receiveKey(unsigned char)+0x183>
c0012a65:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012a6b:	83 ff 08             	cmp    edi,0x8
c0012a6e:	75 73                	jne    c0012ae3 <VgaText::receiveKey(unsigned char)+0x9b>
c0012a70:	83 ec 0c             	sub    esp,0xc
c0012a73:	56                   	push   esi
c0012a74:	e8 f7 da fe ff       	call   c0000570 <strlen>
c0012a79:	83 c4 10             	add    esp,0x10
c0012a7c:	85 c0                	test   eax,eax
c0012a7e:	0f 84 02 01 00 00    	je     c0012b86 <VgaText::receiveKey(unsigned char)+0x13e>
c0012a84:	50                   	push   eax
c0012a85:	50                   	push   eax
c0012a86:	6a 08                	push   0x8
c0012a88:	53                   	push   ebx
c0012a89:	e8 30 fb ff ff       	call   c00125be <VgaText::putchar(char)>
c0012a8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a91:	e8 da da fe ff       	call   c0000570 <strlen>
c0012a96:	83 c4 10             	add    esp,0x10
c0012a99:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012aa1:	83 fa 0d             	cmp    edx,0xd
c0012aa4:	89 d0                	mov    eax,edx
c0012aa6:	0f 95 c1             	setne  cl
c0012aa9:	83 fa 1f             	cmp    edx,0x1f
c0012aac:	0f 9e c2             	setle  dl
c0012aaf:	0f b6 d2             	movzx  edx,dl
c0012ab2:	85 ca                	test   edx,ecx
c0012ab4:	74 17                	je     c0012acd <VgaText::receiveKey(unsigned char)+0x85>
c0012ab6:	83 e8 08             	sub    eax,0x8
c0012ab9:	3c 02                	cmp    al,0x2
c0012abb:	76 10                	jbe    c0012acd <VgaText::receiveKey(unsigned char)+0x85>
c0012abd:	55                   	push   ebp
c0012abe:	55                   	push   ebp
c0012abf:	68 9b 45 02 c0       	push   0xc002459b
c0012ac4:	53                   	push   ebx
c0012ac5:	e8 32 fc ff ff       	call   c00126fc <VgaText::puts(char const*)>
c0012aca:	83 c4 10             	add    esp,0x10
c0012acd:	83 ec 0c             	sub    esp,0xc
c0012ad0:	56                   	push   esi
c0012ad1:	e8 9a da fe ff       	call   c0000570 <strlen>
c0012ad6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012ade:	e9 a0 00 00 00       	jmp    c0012b83 <VgaText::receiveKey(unsigned char)+0x13b>
c0012ae3:	83 ec 0c             	sub    esp,0xc
c0012ae6:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012aec:	50                   	push   eax
c0012aed:	e8 7e da fe ff       	call   c0000570 <strlen>
c0012af2:	89 34 24             	mov    DWORD PTR [esp],esi
c0012af5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012af9:	e8 72 da fe ff       	call   c0000570 <strlen>
c0012afe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b02:	83 c4 10             	add    esp,0x10
c0012b05:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012b09:	3d 80 00 00 00       	cmp    eax,0x80
c0012b0e:	0f 87 b7 00 00 00    	ja     c0012bcb <VgaText::receiveKey(unsigned char)+0x183>
c0012b14:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012b17:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012b1a:	3c 1e                	cmp    al,0x1e
c0012b1c:	0f 96 c0             	setbe  al
c0012b1f:	80 fa 01             	cmp    dl,0x1
c0012b22:	0f 97 c2             	seta   dl
c0012b25:	0f b6 d2             	movzx  edx,dl
c0012b28:	85 c2                	test   edx,eax
c0012b2a:	74 2e                	je     c0012b5a <VgaText::receiveKey(unsigned char)+0x112>
c0012b2c:	83 ff 0d             	cmp    edi,0xd
c0012b2f:	74 29                	je     c0012b5a <VgaText::receiveKey(unsigned char)+0x112>
c0012b31:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012b34:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012b37:	68 a1 45 02 c0       	push   0xc00245a1
c0012b3c:	53                   	push   ebx
c0012b3d:	e8 2c fc ff ff       	call   c001276e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012b42:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012b45:	8d 45 40             	lea    eax,[ebp+0x40]
c0012b48:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012b4b:	0f b6 c0             	movzx  eax,al
c0012b4e:	50                   	push   eax
c0012b4f:	53                   	push   ebx
c0012b50:	e8 99 f9 ff ff       	call   c00124ee <VgaText::putchar(char, VgaColour, VgaColour)>
c0012b55:	83 c4 20             	add    esp,0x20
c0012b58:	eb 11                	jmp    c0012b6b <VgaText::receiveKey(unsigned char)+0x123>
c0012b5a:	89 e8                	mov    eax,ebp
c0012b5c:	51                   	push   ecx
c0012b5d:	0f be c0             	movsx  eax,al
c0012b60:	51                   	push   ecx
c0012b61:	50                   	push   eax
c0012b62:	53                   	push   ebx
c0012b63:	e8 56 fa ff ff       	call   c00125be <VgaText::putchar(char)>
c0012b68:	83 c4 10             	add    esp,0x10
c0012b6b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012b70:	89 e8                	mov    eax,ebp
c0012b72:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012b76:	52                   	push   edx
c0012b77:	52                   	push   edx
c0012b78:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012b7c:	50                   	push   eax
c0012b7d:	56                   	push   esi
c0012b7e:	e8 bd dc fe ff       	call   c0000840 <strcat>
c0012b83:	83 c4 10             	add    esp,0x10
c0012b86:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012b8c:	b0 01                	mov    al,0x1
c0012b8e:	83 ff 1c             	cmp    edi,0x1c
c0012b91:	77 0e                	ja     c0012ba1 <VgaText::receiveKey(unsigned char)+0x159>
c0012b93:	b8 08 04 00 10       	mov    eax,0x10000408
c0012b98:	89 f9                	mov    ecx,edi
c0012b9a:	d3 e8                	shr    eax,cl
c0012b9c:	f7 d0                	not    eax
c0012b9e:	83 e0 01             	and    eax,0x1
c0012ba1:	84 c0                	test   al,al
c0012ba3:	74 04                	je     c0012ba9 <VgaText::receiveKey(unsigned char)+0x161>
c0012ba5:	84 d2                	test   dl,dl
c0012ba7:	74 22                	je     c0012bcb <VgaText::receiveKey(unsigned char)+0x183>
c0012ba9:	81 c3 02 01 00 00    	add    ebx,0x102
c0012baf:	50                   	push   eax
c0012bb0:	50                   	push   eax
c0012bb1:	56                   	push   esi
c0012bb2:	53                   	push   ebx
c0012bb3:	e8 88 dc fe ff       	call   c0000840 <strcat>
c0012bb8:	83 c4 0c             	add    esp,0xc
c0012bbb:	68 80 00 00 00       	push   0x80
c0012bc0:	6a 00                	push   0x0
c0012bc2:	56                   	push   esi
c0012bc3:	e8 28 d9 fe ff       	call   c00004f0 <memset>
c0012bc8:	83 c4 10             	add    esp,0x10
c0012bcb:	83 c4 2c             	add    esp,0x2c
c0012bce:	5b                   	pop    ebx
c0012bcf:	5e                   	pop    esi
c0012bd0:	5f                   	pop    edi
c0012bd1:	5d                   	pop    ebp
c0012bd2:	c3                   	ret    
c0012bd3:	90                   	nop

c0012bd4 <VgaText::doUpdate()>:
c0012bd4:	c3                   	ret    
c0012bd5:	66 90                	xchg   ax,ax
c0012bd7:	90                   	nop

c0012bd8 <TSS::TSS()>:
c0012bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012be3:	90                   	nop
c0012be4:	c3                   	ret    
c0012be5:	90                   	nop
c0012be6:	66 90                	xchg   ax,ax

c0012be8 <TSS::setESP(unsigned long)>:
c0012be8:	55                   	push   ebp
c0012be9:	89 e5                	mov    ebp,esp
c0012beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bf1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012bf4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012bf7:	90                   	nop
c0012bf8:	5d                   	pop    ebp
c0012bf9:	c3                   	ret    
c0012bfa:	66 90                	xchg   ax,ax

c0012bfc <TSS::flush()>:
c0012bfc:	55                   	push   ebp
c0012bfd:	89 e5                	mov    ebp,esp
c0012bff:	83 ec 10             	sub    esp,0x10
c0012c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c07:	83 c8 03             	or     eax,0x3
c0012c0a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012c0e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012c12:	66 89 d0             	mov    ax,dx
c0012c15:	0f 00 d8             	ltr    ax
c0012c18:	90                   	nop
c0012c19:	c9                   	leave  
c0012c1a:	c3                   	ret    
c0012c1b:	90                   	nop

c0012c1c <TSS::setup(unsigned long, unsigned long)>:
c0012c1c:	55                   	push   ebp
c0012c1d:	89 e5                	mov    ebp,esp
c0012c1f:	83 ec 18             	sub    esp,0x18
c0012c22:	83 ec 0c             	sub    esp,0xc
c0012c25:	6a 68                	push   0x68
c0012c27:	e8 6b cc ff ff       	call   c000f897 <malloc>
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	89 c2                	mov    edx,eax
c0012c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c3d:	83 ec 08             	sub    esp,0x8
c0012c40:	50                   	push   eax
c0012c41:	68 c4 45 02 c0       	push   0xc00245c4
c0012c46:	e8 31 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c4b:	83 c4 10             	add    esp,0x10
c0012c4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c54:	83 ec 04             	sub    esp,0x4
c0012c57:	6a 68                	push   0x68
c0012c59:	6a 00                	push   0x0
c0012c5b:	50                   	push   eax
c0012c5c:	e8 8f d8 fe ff       	call   c00004f0 <memset>
c0012c61:	83 c4 10             	add    esp,0x10
c0012c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c6a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c76:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c82:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012c85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c8e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c9a:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ca3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ca6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012caf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cb2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012cb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cbe:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cca:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cd6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012cd9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ce2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012ce5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ceb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cee:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012cf5:	83 ec 0c             	sub    esp,0xc
c0012cf8:	68 db 45 02 c0       	push   0xc00245db
c0012cfd:	e8 7a 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d0b:	0f 20 da             	mov    edx,cr3
c0012d0e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012d11:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012d14:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012d17:	83 ec 0c             	sub    esp,0xc
c0012d1a:	68 de 45 02 c0       	push   0xc00245de
c0012d1f:	e8 58 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012d24:	83 c4 10             	add    esp,0x10
c0012d27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d2d:	83 ec 08             	sub    esp,0x8
c0012d30:	50                   	push   eax
c0012d31:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012d34:	50                   	push   eax
c0012d35:	e8 c2 bb ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c0012d3a:	83 c4 10             	add    esp,0x10
c0012d3d:	83 ec 08             	sub    esp,0x8
c0012d40:	6a 68                	push   0x68
c0012d42:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012d45:	50                   	push   eax
c0012d46:	e8 cd bb ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c0012d4b:	83 c4 10             	add    esp,0x10
c0012d4e:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012d52:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012d55:	83 e0 0f             	and    eax,0xf
c0012d58:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012d5b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012d5e:	83 c8 40             	or     eax,0x40
c0012d61:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012d64:	83 ec 0c             	sub    esp,0xc
c0012d67:	68 e1 45 02 c0       	push   0xc00245e1
c0012d6c:	e8 0b 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012d71:	83 c4 10             	add    esp,0x10
c0012d74:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0012d79:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012d7f:	83 ec 08             	sub    esp,0x8
c0012d82:	50                   	push   eax
c0012d83:	68 e4 45 02 c0       	push   0xc00245e4
c0012d88:	e8 ef 41 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012d8d:	83 c4 10             	add    esp,0x10
c0012d90:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0012d95:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012d9b:	05 64 01 00 00       	add    eax,0x164
c0012da0:	83 ec 04             	sub    esp,0x4
c0012da3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012da6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012da9:	50                   	push   eax
c0012daa:	e8 9d bb ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c0012daf:	83 c4 10             	add    esp,0x10
c0012db2:	89 c2                	mov    edx,eax
c0012db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012db7:	89 10                	mov    DWORD PTR [eax],edx
c0012db9:	83 ec 0c             	sub    esp,0xc
c0012dbc:	68 f9 45 02 c0       	push   0xc00245f9
c0012dc1:	e8 b6 41 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012dc6:	83 c4 10             	add    esp,0x10
c0012dc9:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0012dce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012dd4:	05 64 01 00 00       	add    eax,0x164
c0012dd9:	83 ec 0c             	sub    esp,0xc
c0012ddc:	50                   	push   eax
c0012ddd:	e8 94 bb ff ff       	call   c000e976 <GDT::flush()>
c0012de2:	83 c4 10             	add    esp,0x10
c0012de5:	83 ec 0c             	sub    esp,0xc
c0012de8:	68 fc 45 02 c0       	push   0xc00245fc
c0012ded:	e8 8a 41 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012df8:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dfa:	c9                   	leave  
c0012dfb:	c3                   	ret    

c0012dfc <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e07:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012e0c:	75 08                	jne    c0012e16 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012e0e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012e14:	eb 38                	jmp    c0012e4e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012e16:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012e1b:	75 17                	jne    c0012e34 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012e1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012e25:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012e2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e31:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012e34:	89 c1                	mov    ecx,eax
c0012e36:	83 e1 fd             	and    ecx,0xfffffffd
c0012e39:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012e3f:	74 cd                	je     c0012e0e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012e41:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012e46:	83 e0 ef             	and    eax,0xffffffef
c0012e49:	83 f8 08             	cmp    eax,0x8
c0012e4c:	76 c0                	jbe    c0012e0e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012e4e:	31 c0                	xor    eax,eax
c0012e50:	c3                   	ret    
c0012e51:	90                   	nop

c0012e52 <ReservedFilename::isAtty()>:
c0012e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e56:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012e59:	31 c0                	xor    eax,eax
c0012e5b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012e61:	74 09                	je     c0012e6c <ReservedFilename::isAtty()+0x1a>
c0012e63:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012e69:	0f 94 c0             	sete   al
c0012e6c:	c3                   	ret    
c0012e6d:	90                   	nop

c0012e6e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012e6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e72:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012e76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e7d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012e82:	75 08                	jne    c0012e8c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012e84:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012e8a:	eb 3d                	jmp    c0012ec9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012e8c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012e91:	75 17                	jne    c0012eaa <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012e93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012e9b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012ea1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ea3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ea7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012eaa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012eaf:	75 04                	jne    c0012eb5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012eb1:	89 0a                	mov    DWORD PTR [edx],ecx
c0012eb3:	eb 14                	jmp    c0012ec9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012eb5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012eba:	74 c8                	je     c0012e84 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012ebc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012ec1:	83 e0 ef             	and    eax,0xffffffef
c0012ec4:	83 f8 08             	cmp    eax,0x8
c0012ec7:	76 bb                	jbe    c0012e84 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012ec9:	31 c0                	xor    eax,eax
c0012ecb:	c3                   	ret    

c0012ecc <UnixFile::getFileDescriptor()>:
c0012ecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ed0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ed3:	c3                   	ret    

c0012ed4 <UnixFile::UnixFile(int)>:
c0012ed4:	53                   	push   ebx
c0012ed5:	83 ec 28             	sub    esp,0x28
c0012ed8:	ba 28 46 02 c0       	mov    edx,0xc0024628
c0012edd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ee1:	89 10                	mov    DWORD PTR [eax],edx
c0012ee3:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012eeb:	0f 8f 90 01 00 00    	jg     c0013081 <UnixFile::UnixFile(int)+0x1ad>
c0012ef1:	a1 c0 69 02 c0       	mov    eax,ds:0xc00269c0
c0012ef6:	8d 50 01             	lea    edx,[eax+0x1]
c0012ef9:	89 15 c0 69 02 c0    	mov    DWORD PTR ds:0xc00269c0,edx
c0012eff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f03:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012f06:	83 ec 08             	sub    esp,0x8
c0012f09:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f0d:	68 78 c2 02 c0       	push   0xc002c278
c0012f12:	e8 17 f2 00 00       	call   c002212e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012f17:	83 c4 10             	add    esp,0x10
c0012f1a:	a0 74 c2 02 c0       	mov    al,ds:0xc002c274
c0012f1f:	83 f0 01             	xor    eax,0x1
c0012f22:	0f b6 c0             	movzx  eax,al
c0012f25:	85 c0                	test   eax,eax
c0012f27:	0f 84 55 01 00 00    	je     c0013082 <UnixFile::UnixFile(int)+0x1ae>
c0012f2d:	c6 05 74 c2 02 c0 01 	mov    BYTE PTR ds:0xc002c274,0x1
c0012f34:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012f3c:	83 ec 0c             	sub    esp,0xc
c0012f3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f43:	e8 4f c9 ff ff       	call   c000f897 <malloc>
c0012f48:	83 c4 10             	add    esp,0x10
c0012f4b:	89 c3                	mov    ebx,eax
c0012f4d:	83 ec 08             	sub    esp,0x8
c0012f50:	68 03 ff ff 0f       	push   0xfffff03
c0012f55:	53                   	push   ebx
c0012f56:	e8 2d 01 00 00       	call   c0013088 <ReservedFilename::ReservedFilename(int)>
c0012f5b:	83 c4 10             	add    esp,0x10
c0012f5e:	89 1d 6c c2 02 c0    	mov    DWORD PTR ds:0xc002c26c,ebx
c0012f64:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012f6c:	83 ec 0c             	sub    esp,0xc
c0012f6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f73:	e8 1f c9 ff ff       	call   c000f897 <malloc>
c0012f78:	83 c4 10             	add    esp,0x10
c0012f7b:	89 c3                	mov    ebx,eax
c0012f7d:	83 ec 08             	sub    esp,0x8
c0012f80:	68 01 ff ff 0f       	push   0xfffff01
c0012f85:	53                   	push   ebx
c0012f86:	e8 fd 00 00 00       	call   c0013088 <ReservedFilename::ReservedFilename(int)>
c0012f8b:	83 c4 10             	add    esp,0x10
c0012f8e:	89 1d 70 c2 02 c0    	mov    DWORD PTR ds:0xc002c270,ebx
c0012f94:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012f9c:	83 ec 0c             	sub    esp,0xc
c0012f9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012fa3:	e8 ef c8 ff ff       	call   c000f897 <malloc>
c0012fa8:	83 c4 10             	add    esp,0x10
c0012fab:	89 c3                	mov    ebx,eax
c0012fad:	83 ec 08             	sub    esp,0x8
c0012fb0:	68 00 ff ff 0f       	push   0xfffff00
c0012fb5:	53                   	push   ebx
c0012fb6:	e8 cd 00 00 00       	call   c0013088 <ReservedFilename::ReservedFilename(int)>
c0012fbb:	83 c4 10             	add    esp,0x10
c0012fbe:	89 1d 64 c2 02 c0    	mov    DWORD PTR ds:0xc002c264,ebx
c0012fc4:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012fcc:	83 ec 0c             	sub    esp,0xc
c0012fcf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012fd3:	e8 bf c8 ff ff       	call   c000f897 <malloc>
c0012fd8:	83 c4 10             	add    esp,0x10
c0012fdb:	89 c3                	mov    ebx,eax
c0012fdd:	83 ec 08             	sub    esp,0x8
c0012fe0:	68 02 ff ff 0f       	push   0xfffff02
c0012fe5:	53                   	push   ebx
c0012fe6:	e8 9d 00 00 00       	call   c0013088 <ReservedFilename::ReservedFilename(int)>
c0012feb:	83 c4 10             	add    esp,0x10
c0012fee:	89 1d 68 c2 02 c0    	mov    DWORD PTR ds:0xc002c268,ebx
c0012ff4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012ffc:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013001:	7f 7f                	jg     c0013082 <UnixFile::UnixFile(int)+0x1ae>
c0013003:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001300b:	83 ec 0c             	sub    esp,0xc
c001300e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013012:	e8 80 c8 ff ff       	call   c000f897 <malloc>
c0013017:	83 c4 10             	add    esp,0x10
c001301a:	89 c3                	mov    ebx,eax
c001301c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013020:	05 10 ff ff 0f       	add    eax,0xfffff10
c0013025:	83 ec 08             	sub    esp,0x8
c0013028:	50                   	push   eax
c0013029:	53                   	push   ebx
c001302a:	e8 59 00 00 00       	call   c0013088 <ReservedFilename::ReservedFilename(int)>
c001302f:	83 c4 10             	add    esp,0x10
c0013032:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013036:	89 1c 85 40 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3dc0],ebx
c001303d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0013045:	83 ec 0c             	sub    esp,0xc
c0013048:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001304c:	e8 46 c8 ff ff       	call   c000f897 <malloc>
c0013051:	83 c4 10             	add    esp,0x10
c0013054:	89 c3                	mov    ebx,eax
c0013056:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001305a:	05 20 ff ff 0f       	add    eax,0xfffff20
c001305f:	83 ec 08             	sub    esp,0x8
c0013062:	50                   	push   eax
c0013063:	53                   	push   ebx
c0013064:	e8 1f 00 00 00       	call   c0013088 <ReservedFilename::ReservedFilename(int)>
c0013069:	83 c4 10             	add    esp,0x10
c001306c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013070:	89 1c 85 00 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e00],ebx
c0013077:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001307c:	e9 7b ff ff ff       	jmp    c0012ffc <UnixFile::UnixFile(int)+0x128>
c0013081:	90                   	nop
c0013082:	83 c4 28             	add    esp,0x28
c0013085:	5b                   	pop    ebx
c0013086:	c3                   	ret    
c0013087:	90                   	nop

c0013088 <ReservedFilename::ReservedFilename(int)>:
c0013088:	83 ec 0c             	sub    esp,0xc
c001308b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308f:	83 ec 08             	sub    esp,0x8
c0013092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013096:	50                   	push   eax
c0013097:	e8 38 fe ff ff       	call   c0012ed4 <UnixFile::UnixFile(int)>
c001309c:	83 c4 10             	add    esp,0x10
c001309f:	ba 44 46 02 c0       	mov    edx,0xc0024644
c00130a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a8:	89 10                	mov    DWORD PTR [eax],edx
c00130aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00130b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00130b5:	90                   	nop
c00130b6:	83 c4 0c             	add    esp,0xc
c00130b9:	c3                   	ret    

c00130ba <UnixFile::~UnixFile()>:
c00130ba:	83 ec 1c             	sub    esp,0x1c
c00130bd:	ba 28 46 02 c0       	mov    edx,0xc0024628
c00130c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130c6:	89 10                	mov    DWORD PTR [eax],edx
c00130c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130cf:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00130d4:	7f 76                	jg     c001314c <UnixFile::~UnixFile()+0x92>
c00130d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00130de:	83 ec 0c             	sub    esp,0xc
c00130e1:	68 78 c2 02 c0       	push   0xc002c278
c00130e6:	e8 17 f1 00 00       	call   c0022202 <LinkedList<UnixFile>::getFirstElement()>
c00130eb:	83 c4 10             	add    esp,0x10
c00130ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130f2:	83 ec 0c             	sub    esp,0xc
c00130f5:	68 78 c2 02 c0       	push   0xc002c278
c00130fa:	e8 0b f1 00 00       	call   c002220a <LinkedList<UnixFile>::removeFirst()>
c00130ff:	83 c4 10             	add    esp,0x10
c0013102:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013106:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001310a:	74 43                	je     c001314f <UnixFile::~UnixFile()+0x95>
c001310c:	83 ec 08             	sub    esp,0x8
c001310f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013113:	68 78 c2 02 c0       	push   0xc002c278
c0013118:	e8 11 f0 00 00       	call   c002212e <LinkedList<UnixFile>::addElement(UnixFile*)>
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013124:	8d 50 01             	lea    edx,[eax+0x1]
c0013127:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001312b:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013130:	0f 94 c0             	sete   al
c0013133:	0f b6 c0             	movzx  eax,al
c0013136:	85 c0                	test   eax,eax
c0013138:	74 a4                	je     c00130de <UnixFile::~UnixFile()+0x24>
c001313a:	83 ec 0c             	sub    esp,0xc
c001313d:	68 00 46 02 c0       	push   0xc0024600
c0013142:	e8 ad cb ff ff       	call   c000fcf4 <KePanic(char const*)>
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	eb 92                	jmp    c00130de <UnixFile::~UnixFile()+0x24>
c001314c:	90                   	nop
c001314d:	eb 01                	jmp    c0013150 <UnixFile::~UnixFile()+0x96>
c001314f:	90                   	nop
c0013150:	90                   	nop
c0013151:	83 c4 1c             	add    esp,0x1c
c0013154:	c3                   	ret    
c0013155:	90                   	nop

c0013156 <UnixFile::~UnixFile()>:
c0013156:	83 ec 0c             	sub    esp,0xc
c0013159:	83 ec 0c             	sub    esp,0xc
c001315c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013160:	e8 55 ff ff ff       	call   c00130ba <UnixFile::~UnixFile()>
c0013165:	83 c4 10             	add    esp,0x10
c0013168:	83 ec 08             	sub    esp,0x8
c001316b:	6a 0c                	push   0xc
c001316d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013171:	e8 3a a2 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0013176:	83 c4 10             	add    esp,0x10
c0013179:	83 c4 0c             	add    esp,0xc
c001317c:	c3                   	ret    
c001317d:	90                   	nop

c001317e <ReservedFilename::~ReservedFilename()>:
c001317e:	83 ec 0c             	sub    esp,0xc
c0013181:	ba 44 46 02 c0       	mov    edx,0xc0024644
c0013186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001318a:	89 10                	mov    DWORD PTR [eax],edx
c001318c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013190:	83 ec 0c             	sub    esp,0xc
c0013193:	50                   	push   eax
c0013194:	e8 21 ff ff ff       	call   c00130ba <UnixFile::~UnixFile()>
c0013199:	83 c4 10             	add    esp,0x10
c001319c:	90                   	nop
c001319d:	83 c4 0c             	add    esp,0xc
c00131a0:	c3                   	ret    
c00131a1:	90                   	nop

c00131a2 <ReservedFilename::~ReservedFilename()>:
c00131a2:	83 ec 0c             	sub    esp,0xc
c00131a5:	83 ec 0c             	sub    esp,0xc
c00131a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ac:	e8 cd ff ff ff       	call   c001317e <ReservedFilename::~ReservedFilename()>
c00131b1:	83 c4 10             	add    esp,0x10
c00131b4:	83 ec 08             	sub    esp,0x8
c00131b7:	6a 0c                	push   0xc
c00131b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131bd:	e8 ee a1 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00131c2:	83 c4 10             	add    esp,0x10
c00131c5:	83 c4 0c             	add    esp,0xc
c00131c8:	c3                   	ret    

c00131c9 <KeGetFileFromDescriptor(int)>:
c00131c9:	53                   	push   ebx
c00131ca:	83 ec 08             	sub    esp,0x8
c00131cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00131d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00131dd:	7f 30                	jg     c001320f <KeGetFileFromDescriptor(int)+0x46>
c00131df:	83 ec 0c             	sub    esp,0xc
c00131e2:	68 78 c2 02 c0       	push   0xc002c278
c00131e7:	e8 16 f0 00 00       	call   c0022202 <LinkedList<UnixFile>::getFirstElement()>
c00131ec:	83 c4 10             	add    esp,0x10
c00131ef:	8d 50 ff             	lea    edx,[eax-0x1]
c00131f2:	83 fa fd             	cmp    edx,0xfffffffd
c00131f5:	76 04                	jbe    c00131fb <KeGetFileFromDescriptor(int)+0x32>
c00131f7:	31 c0                	xor    eax,eax
c00131f9:	eb 6e                	jmp    c0013269 <KeGetFileFromDescriptor(int)+0xa0>
c00131fb:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00131fe:	74 69                	je     c0013269 <KeGetFileFromDescriptor(int)+0xa0>
c0013200:	52                   	push   edx
c0013201:	52                   	push   edx
c0013202:	50                   	push   eax
c0013203:	68 78 c2 02 c0       	push   0xc002c278
c0013208:	e8 9f f0 00 00       	call   c00222ac <LinkedList<UnixFile>::getNext(UnixFile*)>
c001320d:	eb dd                	jmp    c00131ec <KeGetFileFromDescriptor(int)+0x23>
c001320f:	a1 6c c2 02 c0       	mov    eax,ds:0xc002c26c
c0013214:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001321a:	74 4d                	je     c0013269 <KeGetFileFromDescriptor(int)+0xa0>
c001321c:	a1 70 c2 02 c0       	mov    eax,ds:0xc002c270
c0013221:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0013227:	74 40                	je     c0013269 <KeGetFileFromDescriptor(int)+0xa0>
c0013229:	a1 68 c2 02 c0       	mov    eax,ds:0xc002c268
c001322e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0013234:	74 33                	je     c0013269 <KeGetFileFromDescriptor(int)+0xa0>
c0013236:	a1 64 c2 02 c0       	mov    eax,ds:0xc002c264
c001323b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013241:	74 26                	je     c0013269 <KeGetFileFromDescriptor(int)+0xa0>
c0013243:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013249:	83 f8 08             	cmp    eax,0x8
c001324c:	77 09                	ja     c0013257 <KeGetFileFromDescriptor(int)+0x8e>
c001324e:	8b 04 85 40 c2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3dc0]
c0013255:	eb 12                	jmp    c0013269 <KeGetFileFromDescriptor(int)+0xa0>
c0013257:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001325d:	83 fb 08             	cmp    ebx,0x8
c0013260:	77 95                	ja     c00131f7 <KeGetFileFromDescriptor(int)+0x2e>
c0013262:	8b 04 9d 00 c2 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3e00]
c0013269:	83 c4 08             	add    esp,0x8
c001326c:	5b                   	pop    ebx
c001326d:	c3                   	ret    

c001326e <__static_initialization_and_destruction_0(int, int)>:
c001326e:	83 ec 0c             	sub    esp,0xc
c0013271:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013276:	75 34                	jne    c00132ac <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013278:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013280:	75 2a                	jne    c00132ac <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013282:	83 ec 0c             	sub    esp,0xc
c0013285:	68 78 c2 02 c0       	push   0xc002c278
c001328a:	e8 5d ee 00 00       	call   c00220ec <LinkedList<UnixFile>::LinkedList()>
c001328f:	83 c4 10             	add    esp,0x10
c0013292:	83 ec 04             	sub    esp,0x4
c0013295:	68 04 62 02 c0       	push   0xc0026204
c001329a:	68 78 c2 02 c0       	push   0xc002c278
c001329f:	68 ea 20 02 c0       	push   0xc00220ea
c00132a4:	e8 b7 a0 ff ff       	call   c000d360 <__cxa_atexit>
c00132a9:	83 c4 10             	add    esp,0x10
c00132ac:	90                   	nop
c00132ad:	83 c4 0c             	add    esp,0xc
c00132b0:	c3                   	ret    

c00132b1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00132b1:	83 ec 0c             	sub    esp,0xc
c00132b4:	83 ec 08             	sub    esp,0x8
c00132b7:	68 ff ff 00 00       	push   0xffff
c00132bc:	6a 01                	push   0x1
c00132be:	e8 ab ff ff ff       	call   c001326e <__static_initialization_and_destruction_0(int, int)>
c00132c3:	83 c4 10             	add    esp,0x10
c00132c6:	83 c4 0c             	add    esp,0xc
c00132c9:	c3                   	ret    

c00132ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00132ca:	53                   	push   ebx
c00132cb:	8b 15 c8 69 02 c0    	mov    edx,DWORD PTR ds:0xc00269c8
c00132d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00132d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00132d9:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00132df:	89 d8                	mov    eax,ebx
c00132e1:	d1 e8                	shr    eax,1
c00132e3:	01 d0                	add    eax,edx
c00132e5:	80 e3 01             	and    bl,0x1
c00132e8:	8a 10                	mov    dl,BYTE PTR [eax]
c00132ea:	75 09                	jne    c00132f5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00132ec:	83 e2 f0             	and    edx,0xfffffff0
c00132ef:	09 ca                	or     edx,ecx
c00132f1:	88 10                	mov    BYTE PTR [eax],dl
c00132f3:	5b                   	pop    ebx
c00132f4:	c3                   	ret    
c00132f5:	83 e2 0f             	and    edx,0xf
c00132f8:	0f b6 c9             	movzx  ecx,cl
c00132fb:	c1 e1 04             	shl    ecx,0x4
c00132fe:	09 ca                	or     edx,ecx
c0013300:	88 10                	mov    BYTE PTR [eax],dl
c0013302:	5b                   	pop    ebx
c0013303:	c3                   	ret    

c0013304 <Virt::getPageState(unsigned long)>:
c0013304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013308:	8b 0d c8 69 02 c0    	mov    ecx,DWORD PTR ds:0xc00269c8
c001330e:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013314:	89 d0                	mov    eax,edx
c0013316:	d1 e8                	shr    eax,1
c0013318:	80 e2 01             	and    dl,0x1
c001331b:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001331e:	74 03                	je     c0013323 <Virt::getPageState(unsigned long)+0x1f>
c0013320:	c1 e8 04             	shr    eax,0x4
c0013323:	83 e0 0f             	and    eax,0xf
c0013326:	c3                   	ret    

c0013327 <Virt::allocateKernelVirtualPages(int)>:
c0013327:	55                   	push   ebp
c0013328:	31 ed                	xor    ebp,ebp
c001332a:	57                   	push   edi
c001332b:	31 ff                	xor    edi,edi
c001332d:	56                   	push   esi
c001332e:	53                   	push   ebx
c001332f:	31 db                	xor    ebx,ebx
c0013331:	83 ec 0c             	sub    esp,0xc
c0013334:	8b 35 c4 69 02 c0    	mov    esi,DWORD PTR ds:0xc00269c4
c001333a:	56                   	push   esi
c001333b:	e8 c4 ff ff ff       	call   c0013304 <Virt::getPageState(unsigned long)>
c0013340:	5a                   	pop    edx
c0013341:	84 c0                	test   al,al
c0013343:	75 41                	jne    c0013386 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0013345:	85 db                	test   ebx,ebx
c0013347:	75 02                	jne    c001334b <Virt::allocateKernelVirtualPages(int)+0x24>
c0013349:	89 f5                	mov    ebp,esi
c001334b:	83 c3 01             	add    ebx,0x1
c001334e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013352:	74 5f                	je     c00133b3 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0013354:	83 c6 01             	add    esi,0x1
c0013357:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c001335d:	76 34                	jbe    c0013393 <Virt::allocateKernelVirtualPages(int)+0x6c>
c001335f:	c7 05 c4 69 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00269c4,0xc8000
c0013369:	f7 c7 01 00 00 00    	test   edi,0x1
c001336f:	75 2a                	jne    c001339b <Virt::allocateKernelVirtualPages(int)+0x74>
c0013371:	be 00 80 0c 00       	mov    esi,0xc8000
c0013376:	bf 01 00 00 00       	mov    edi,0x1
c001337b:	56                   	push   esi
c001337c:	e8 83 ff ff ff       	call   c0013304 <Virt::getPageState(unsigned long)>
c0013381:	5a                   	pop    edx
c0013382:	84 c0                	test   al,al
c0013384:	74 bf                	je     c0013345 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0013386:	31 db                	xor    ebx,ebx
c0013388:	83 c6 01             	add    esi,0x1
c001338b:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013391:	77 cc                	ja     c001335f <Virt::allocateKernelVirtualPages(int)+0x38>
c0013393:	89 35 c4 69 02 c0    	mov    DWORD PTR ds:0xc00269c4,esi
c0013399:	eb 9f                	jmp    c001333a <Virt::allocateKernelVirtualPages(int)+0x13>
c001339b:	83 ec 0c             	sub    esp,0xc
c001339e:	68 58 46 02 c0       	push   0xc0024658
c00133a3:	e8 4c c9 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00133a8:	8b 35 c4 69 02 c0    	mov    esi,DWORD PTR ds:0xc00269c4
c00133ae:	83 c4 10             	add    esp,0x10
c00133b1:	eb 87                	jmp    c001333a <Virt::allocateKernelVirtualPages(int)+0x13>
c00133b3:	89 2d c4 69 02 c0    	mov    DWORD PTR ds:0xc00269c4,ebp
c00133b9:	83 fb 01             	cmp    ebx,0x1
c00133bc:	74 6f                	je     c001342d <Virt::allocateKernelVirtualPages(int)+0x106>
c00133be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00133c2:	85 c9                	test   ecx,ecx
c00133c4:	74 49                	je     c001340f <Virt::allocateKernelVirtualPages(int)+0xe8>
c00133c6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00133ca:	89 e8                	mov    eax,ebp
c00133cc:	31 db                	xor    ebx,ebx
c00133ce:	8d 79 ff             	lea    edi,[ecx-0x1]
c00133d1:	eb 18                	jmp    c00133eb <Virt::allocateKernelVirtualPages(int)+0xc4>
c00133d3:	6a 01                	push   0x1
c00133d5:	83 c3 01             	add    ebx,0x1
c00133d8:	50                   	push   eax
c00133d9:	e8 ec fe ff ff       	call   c00132ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133de:	58                   	pop    eax
c00133df:	5a                   	pop    edx
c00133e0:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00133e4:	74 29                	je     c001340f <Virt::allocateKernelVirtualPages(int)+0xe8>
c00133e6:	a1 c4 69 02 c0       	mov    eax,ds:0xc00269c4
c00133eb:	8d 50 01             	lea    edx,[eax+0x1]
c00133ee:	85 db                	test   ebx,ebx
c00133f0:	89 15 c4 69 02 c0    	mov    DWORD PTR ds:0xc00269c4,edx
c00133f6:	74 24                	je     c001341c <Virt::allocateKernelVirtualPages(int)+0xf5>
c00133f8:	39 df                	cmp    edi,ebx
c00133fa:	75 d7                	jne    c00133d3 <Virt::allocateKernelVirtualPages(int)+0xac>
c00133fc:	6a 03                	push   0x3
c00133fe:	83 c3 01             	add    ebx,0x1
c0013401:	50                   	push   eax
c0013402:	e8 c3 fe ff ff       	call   c00132ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013407:	59                   	pop    ecx
c0013408:	5e                   	pop    esi
c0013409:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001340d:	75 d7                	jne    c00133e6 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001340f:	83 c4 0c             	add    esp,0xc
c0013412:	89 e8                	mov    eax,ebp
c0013414:	5b                   	pop    ebx
c0013415:	c1 e0 0c             	shl    eax,0xc
c0013418:	5e                   	pop    esi
c0013419:	5f                   	pop    edi
c001341a:	5d                   	pop    ebp
c001341b:	c3                   	ret    
c001341c:	6a 02                	push   0x2
c001341e:	bb 01 00 00 00       	mov    ebx,0x1
c0013423:	50                   	push   eax
c0013424:	e8 a1 fe ff ff       	call   c00132ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013429:	58                   	pop    eax
c001342a:	5a                   	pop    edx
c001342b:	eb b9                	jmp    c00133e6 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001342d:	6a 04                	push   0x4
c001342f:	8d 45 01             	lea    eax,[ebp+0x1]
c0013432:	55                   	push   ebp
c0013433:	a3 c4 69 02 c0       	mov    ds:0xc00269c4,eax
c0013438:	e8 8d fe ff ff       	call   c00132ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001343d:	5b                   	pop    ebx
c001343e:	89 e8                	mov    eax,ebp
c0013440:	5e                   	pop    esi
c0013441:	c1 e0 0c             	shl    eax,0xc
c0013444:	83 c4 0c             	add    esp,0xc
c0013447:	5b                   	pop    ebx
c0013448:	5e                   	pop    esi
c0013449:	5f                   	pop    edi
c001344a:	5d                   	pop    ebp
c001344b:	c3                   	ret    

c001344c <Virt::freeSwapfilePage(unsigned long)>:
c001344c:	53                   	push   ebx
c001344d:	8b 15 8c c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c28c
c0013453:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013457:	b8 01 00 00 00       	mov    eax,0x1
c001345c:	89 cb                	mov    ebx,ecx
c001345e:	d3 e0                	shl    eax,cl
c0013460:	c1 eb 05             	shr    ebx,0x5
c0013463:	f7 d0                	not    eax
c0013465:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013468:	21 c1                	and    ecx,eax
c001346a:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001346d:	5b                   	pop    ebx
c001346e:	c3                   	ret    

c001346f <Virt::swapIDToSector(unsigned long)>:
c001346f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013473:	8b 15 cc 69 02 c0    	mov    edx,DWORD PTR ds:0xc00269cc
c0013479:	8b 0d d4 69 02 c0    	mov    ecx,DWORD PTR ds:0xc00269d4
c001347f:	0f af c2             	imul   eax,edx
c0013482:	01 c8                	add    eax,ecx
c0013484:	c3                   	ret    

c0013485 <Virt::allocateSwapfilePage()>:
c0013485:	55                   	push   ebp
c0013486:	31 d2                	xor    edx,edx
c0013488:	57                   	push   edi
c0013489:	56                   	push   esi
c001348a:	53                   	push   ebx
c001348b:	83 ec 0c             	sub    esp,0xc
c001348e:	8b 0d cc 69 02 c0    	mov    ecx,DWORD PTR ds:0xc00269cc
c0013494:	a1 d0 69 02 c0       	mov    eax,ds:0xc00269d0
c0013499:	f7 f1                	div    ecx
c001349b:	39 0d d0 69 02 c0    	cmp    DWORD PTR ds:0xc00269d0,ecx
c00134a1:	72 2f                	jb     c00134d2 <Virt::allocateSwapfilePage()+0x4d>
c00134a3:	8b 35 8c c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c28c
c00134a9:	8b 16                	mov    edx,DWORD PTR [esi]
c00134ab:	f6 c2 01             	test   dl,0x1
c00134ae:	74 3e                	je     c00134ee <Virt::allocateSwapfilePage()+0x69>
c00134b0:	31 c9                	xor    ecx,ecx
c00134b2:	bf 01 00 00 00       	mov    edi,0x1
c00134b7:	eb 12                	jmp    c00134cb <Virt::allocateSwapfilePage()+0x46>
c00134b9:	89 fd                	mov    ebp,edi
c00134bb:	89 ca                	mov    edx,ecx
c00134bd:	d3 e5                	shl    ebp,cl
c00134bf:	c1 ea 05             	shr    edx,0x5
c00134c2:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00134c5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00134c7:	85 ea                	test   edx,ebp
c00134c9:	74 2c                	je     c00134f7 <Virt::allocateSwapfilePage()+0x72>
c00134cb:	83 c1 01             	add    ecx,0x1
c00134ce:	39 c8                	cmp    eax,ecx
c00134d0:	77 e7                	ja     c00134b9 <Virt::allocateSwapfilePage()+0x34>
c00134d2:	83 ec 0c             	sub    esp,0xc
c00134d5:	68 6b 49 02 c0       	push   0xc002496b
c00134da:	e8 15 c8 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00134df:	83 c4 10             	add    esp,0x10
c00134e2:	31 c9                	xor    ecx,ecx
c00134e4:	83 c4 0c             	add    esp,0xc
c00134e7:	89 c8                	mov    eax,ecx
c00134e9:	5b                   	pop    ebx
c00134ea:	5e                   	pop    esi
c00134eb:	5f                   	pop    edi
c00134ec:	5d                   	pop    ebp
c00134ed:	c3                   	ret    
c00134ee:	89 f3                	mov    ebx,esi
c00134f0:	bd 01 00 00 00       	mov    ebp,0x1
c00134f5:	31 c9                	xor    ecx,ecx
c00134f7:	09 ea                	or     edx,ebp
c00134f9:	89 c8                	mov    eax,ecx
c00134fb:	89 13                	mov    DWORD PTR [ebx],edx
c00134fd:	83 c4 0c             	add    esp,0xc
c0013500:	5b                   	pop    ebx
c0013501:	5e                   	pop    esi
c0013502:	5f                   	pop    edi
c0013503:	5d                   	pop    ebp
c0013504:	c3                   	ret    

c0013505 <Virt::virtualMemorySetup()>:
c0013505:	53                   	push   ebx
c0013506:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001350b:	6a 0f                	push   0xf
c001350d:	53                   	push   ebx
c001350e:	83 c3 01             	add    ebx,0x1
c0013511:	e8 b4 fd ff ff       	call   c00132ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013516:	58                   	pop    eax
c0013517:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001351d:	5a                   	pop    edx
c001351e:	75 eb                	jne    c001350b <Virt::virtualMemorySetup()+0x6>
c0013520:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013525:	6a 00                	push   0x0
c0013527:	53                   	push   ebx
c0013528:	83 c3 01             	add    ebx,0x1
c001352b:	e8 9a fd ff ff       	call   c00132ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013530:	59                   	pop    ecx
c0013531:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013537:	58                   	pop    eax
c0013538:	75 eb                	jne    c0013525 <Virt::virtualMemorySetup()+0x20>
c001353a:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001353f:	6a 0f                	push   0xf
c0013541:	53                   	push   ebx
c0013542:	83 c3 01             	add    ebx,0x1
c0013545:	e8 80 fd ff ff       	call   c00132ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001354a:	58                   	pop    eax
c001354b:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013551:	5a                   	pop    edx
c0013552:	75 eb                	jne    c001353f <Virt::virtualMemorySetup()+0x3a>
c0013554:	5b                   	pop    ebx
c0013555:	c3                   	ret    

c0013556 <Virt::setupPageSwapping(int)>:
c0013556:	53                   	push   ebx
c0013557:	83 ec 0c             	sub    esp,0xc
c001355a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001355e:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c0013563:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013569:	8b 10                	mov    edx,DWORD PTR [eax]
c001356b:	53                   	push   ebx
c001356c:	c1 e3 0b             	shl    ebx,0xb
c001356f:	68 82 49 02 c0       	push   0xc0024982
c0013574:	50                   	push   eax
c0013575:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013578:	89 1d d0 69 02 c0    	mov    DWORD PTR ds:0xc00269d0,ebx
c001357e:	c6 05 d8 69 02 c0 43 	mov    BYTE PTR ds:0xc00269d8,0x43
c0013585:	c1 eb 08             	shr    ebx,0x8
c0013588:	a3 d4 69 02 c0       	mov    ds:0xc00269d4,eax
c001358d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013590:	c7 05 cc 69 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00269cc,0x8
c001359a:	e8 f8 c2 ff ff       	call   c000f897 <malloc>
c001359f:	83 c4 0c             	add    esp,0xc
c00135a2:	89 c1                	mov    ecx,eax
c00135a4:	a3 8c c2 02 c0       	mov    ds:0xc002c28c,eax
c00135a9:	31 d2                	xor    edx,edx
c00135ab:	a1 d0 69 02 c0       	mov    eax,ds:0xc00269d0
c00135b0:	f7 35 cc 69 02 c0    	div    DWORD PTR ds:0xc00269cc
c00135b6:	c1 e8 05             	shr    eax,0x5
c00135b9:	50                   	push   eax
c00135ba:	6a 00                	push   0x0
c00135bc:	51                   	push   ecx
c00135bd:	e8 2e cf fe ff       	call   c00004f0 <memset>
c00135c2:	83 c4 18             	add    esp,0x18
c00135c5:	5b                   	pop    ebx
c00135c6:	c3                   	ret    
c00135c7:	90                   	nop

c00135c8 <VAS::setCPUSpecific(unsigned long)>:
c00135c8:	c3                   	ret    
c00135c9:	90                   	nop

c00135ca <VAS::VAS(VAS*)>:
c00135ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135ce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00135d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135d9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00135e0:	90                   	nop
c00135e1:	c3                   	ret    

c00135e2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00135e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135e6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00135eb:	89 c2                	mov    edx,eax
c00135ed:	c1 e8 0a             	shr    eax,0xa
c00135f0:	c1 ea 16             	shr    edx,0x16
c00135f3:	83 f9 01             	cmp    ecx,0x1
c00135f6:	19 c9                	sbb    ecx,ecx
c00135f8:	c1 e2 0c             	shl    edx,0xc
c00135fb:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013601:	25 fc 0f 00 00       	and    eax,0xffc
c0013606:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001360d:	01 d0                	add    eax,edx
c001360f:	c3                   	ret    

c0013610 <VAS::getPageTableEntry(unsigned long)>:
c0013610:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013614:	89 ca                	mov    edx,ecx
c0013616:	c1 e9 0a             	shr    ecx,0xa
c0013619:	c1 ea 16             	shr    edx,0x16
c001361c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013622:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013628:	c1 e0 0c             	shl    eax,0xc
c001362b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001362e:	c3                   	ret    

c001362f <Virt::freeKernelVirtualPages(unsigned long)>:
c001362f:	55                   	push   ebp
c0013630:	57                   	push   edi
c0013631:	bf 01 00 00 00       	mov    edi,0x1
c0013636:	56                   	push   esi
c0013637:	53                   	push   ebx
c0013638:	83 ec 1c             	sub    esp,0x1c
c001363b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001363f:	c1 ee 0c             	shr    esi,0xc
c0013642:	eb 48                	jmp    c001368c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013644:	83 ec 08             	sub    esp,0x8
c0013647:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c001364c:	55                   	push   ebp
c001364d:	50                   	push   eax
c001364e:	e8 bd ff ff ff       	call   c0013610 <VAS::getPageTableEntry(unsigned long)>
c0013653:	83 c4 10             	add    esp,0x10
c0013656:	8b 10                	mov    edx,DWORD PTR [eax]
c0013658:	f6 c6 04             	test   dh,0x4
c001365b:	75 70                	jne    c00136cd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001365d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013663:	83 fb 04             	cmp    ebx,0x4
c0013666:	0f 84 8a 00 00 00    	je     c00136f6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001366c:	83 fb 02             	cmp    ebx,0x2
c001366f:	0f 84 9a 00 00 00    	je     c001370f <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013675:	83 fb 03             	cmp    ebx,0x3
c0013678:	0f 84 be 00 00 00    	je     c001373c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001367e:	83 fb 01             	cmp    ebx,0x1
c0013681:	0f 84 a2 00 00 00    	je     c0013729 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013687:	83 c6 01             	add    esi,0x1
c001368a:	31 ff                	xor    edi,edi
c001368c:	56                   	push   esi
c001368d:	89 f5                	mov    ebp,esi
c001368f:	e8 70 fc ff ff       	call   c0013304 <Virt::getPageState(unsigned long)>
c0013694:	c1 e5 0c             	shl    ebp,0xc
c0013697:	0f b6 d8             	movzx  ebx,al
c001369a:	5a                   	pop    edx
c001369b:	85 db                	test   ebx,ebx
c001369d:	75 a5                	jne    c0013644 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c001369f:	83 ec 0c             	sub    esp,0xc
c00136a2:	68 99 49 02 c0       	push   0xc0024999
c00136a7:	e8 48 c6 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00136ac:	5a                   	pop    edx
c00136ad:	59                   	pop    ecx
c00136ae:	55                   	push   ebp
c00136af:	8b 2d 90 c2 02 c0    	mov    ebp,DWORD PTR ds:0xc002c290
c00136b5:	55                   	push   ebp
c00136b6:	e8 55 ff ff ff       	call   c0013610 <VAS::getPageTableEntry(unsigned long)>
c00136bb:	83 c4 10             	add    esp,0x10
c00136be:	8b 10                	mov    edx,DWORD PTR [eax]
c00136c0:	f6 c6 04             	test   dh,0x4
c00136c3:	75 08                	jne    c00136cd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00136c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136cb:	eb ba                	jmp    c0013687 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00136cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136d1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00136d7:	83 ec 0c             	sub    esp,0xc
c00136da:	52                   	push   edx
c00136db:	e8 9f c7 ff ff       	call   c000fe7f <Phys::freePage(unsigned long)>
c00136e0:	83 c4 10             	add    esp,0x10
c00136e3:	83 fb 04             	cmp    ebx,0x4
c00136e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136f0:	0f 85 76 ff ff ff    	jne    c001366c <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00136f6:	83 e7 01             	and    edi,0x1
c00136f9:	75 46                	jne    c0013741 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00136fb:	c7 44 24 30 78 46 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024678
c0013703:	83 c4 1c             	add    esp,0x1c
c0013706:	5b                   	pop    ebx
c0013707:	5e                   	pop    esi
c0013708:	5f                   	pop    edi
c0013709:	5d                   	pop    ebp
c001370a:	e9 e5 c5 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001370f:	83 e7 01             	and    edi,0x1
c0013712:	75 15                	jne    c0013729 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013714:	83 ec 0c             	sub    esp,0xc
c0013717:	68 b5 49 02 c0       	push   0xc00249b5
c001371c:	e8 d3 c5 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0013721:	83 c4 10             	add    esp,0x10
c0013724:	e9 5e ff ff ff       	jmp    c0013687 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013729:	83 ec 08             	sub    esp,0x8
c001372c:	6a 00                	push   0x0
c001372e:	56                   	push   esi
c001372f:	e8 96 fb ff ff       	call   c00132ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013734:	83 c4 10             	add    esp,0x10
c0013737:	e9 4b ff ff ff       	jmp    c0013687 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001373c:	83 e7 01             	and    edi,0x1
c001373f:	75 16                	jne    c0013757 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013741:	83 ec 08             	sub    esp,0x8
c0013744:	6a 00                	push   0x0
c0013746:	56                   	push   esi
c0013747:	e8 7e fb ff ff       	call   c00132ca <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001374c:	83 c4 10             	add    esp,0x10
c001374f:	83 c4 1c             	add    esp,0x1c
c0013752:	5b                   	pop    ebx
c0013753:	5e                   	pop    esi
c0013754:	5f                   	pop    edi
c0013755:	5d                   	pop    ebp
c0013756:	c3                   	ret    
c0013757:	c7 44 24 30 d1 49 02 c0 	mov    DWORD PTR [esp+0x30],0xc00249d1
c001375f:	83 c4 1c             	add    esp,0x1c
c0013762:	5b                   	pop    ebx
c0013763:	5e                   	pop    esi
c0013764:	5f                   	pop    edi
c0013765:	5d                   	pop    ebp
c0013766:	e9 89 c5 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001376b:	90                   	nop

c001376c <VAS::freeAllocatedPages(unsigned long)>:
c001376c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013770:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013774:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013778:	74 09                	je     c0013783 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001377a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001377e:	e9 ac fe ff ff       	jmp    c001362f <Virt::freeKernelVirtualPages(unsigned long)>
c0013783:	c7 44 24 04 9c 46 02 c0 	mov    DWORD PTR [esp+0x4],0xc002469c
c001378b:	e9 ec 37 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c0013790 <VAS::virtualToPhysical(unsigned long)>:
c0013790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013794:	50                   	push   eax
c0013795:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013799:	52                   	push   edx
c001379a:	e8 71 fe ff ff       	call   c0013610 <VAS::getPageTableEntry(unsigned long)>
c001379f:	59                   	pop    ecx
c00137a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00137a2:	5a                   	pop    edx
c00137a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00137a8:	c3                   	ret    
c00137a9:	90                   	nop

c00137aa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00137aa:	55                   	push   ebp
c00137ab:	57                   	push   edi
c00137ac:	56                   	push   esi
c00137ad:	53                   	push   ebx
c00137ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137b2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00137b6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137ba:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00137be:	85 db                	test   ebx,ebx
c00137c0:	7e 24                	jle    c00137e6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00137c2:	c1 e3 0c             	shl    ebx,0xc
c00137c5:	01 f3                	add    ebx,esi
c00137c7:	56                   	push   esi
c00137c8:	81 c6 00 10 00 00    	add    esi,0x1000
c00137ce:	55                   	push   ebp
c00137cf:	e8 3c fe ff ff       	call   c0013610 <VAS::getPageTableEntry(unsigned long)>
c00137d4:	5a                   	pop    edx
c00137d5:	59                   	pop    ecx
c00137d6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00137d8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137dc:	21 f9                	and    ecx,edi
c00137de:	09 d1                	or     ecx,edx
c00137e0:	39 f3                	cmp    ebx,esi
c00137e2:	89 08                	mov    DWORD PTR [eax],ecx
c00137e4:	75 e1                	jne    c00137c7 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00137e6:	5b                   	pop    ebx
c00137e7:	5e                   	pop    esi
c00137e8:	5f                   	pop    edi
c00137e9:	5d                   	pop    ebp
c00137ea:	c3                   	ret    
c00137eb:	90                   	nop

c00137ec <VAS::VAS()>:
c00137ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013806:	a3 90 c2 02 c0       	mov    ds:0xc002c290,eax
c001380b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001380f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013813:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013817:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001381a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001381e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013825:	ba 7d 70 02 c0       	mov    edx,0xc002707d
c001382a:	b8 00 70 02 c0       	mov    eax,0xc0027000
c001382f:	29 c2                	sub    edx,eax
c0013831:	89 d0                	mov    eax,edx
c0013833:	05 ff 0f 00 00       	add    eax,0xfff
c0013838:	c1 e8 0c             	shr    eax,0xc
c001383b:	89 c2                	mov    edx,eax
c001383d:	b8 00 70 02 c0       	mov    eax,0xc0027000
c0013842:	6a 04                	push   0x4
c0013844:	6a ff                	push   0xffffffff
c0013846:	52                   	push   edx
c0013847:	50                   	push   eax
c0013848:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001384c:	e8 59 ff ff ff       	call   c00137aa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013851:	83 c4 14             	add    esp,0x14
c0013854:	90                   	nop
c0013855:	c3                   	ret    

c0013856 <VAS::setToWriteCombining(unsigned long, int)>:
c0013856:	a1 64 cb 02 c0       	mov    eax,ds:0xc002cb64
c001385b:	50                   	push   eax
c001385c:	6a ff                	push   0xffffffff
c001385e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013862:	52                   	push   edx
c0013863:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013867:	51                   	push   ecx
c0013868:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001386c:	50                   	push   eax
c001386d:	e8 38 ff ff ff       	call   c00137aa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013872:	83 c4 14             	add    esp,0x14
c0013875:	c3                   	ret    

c0013876 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001387a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001387d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013881:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013884:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013889:	83 f8 01             	cmp    eax,0x1
c001388c:	19 c0                	sbb    eax,eax
c001388e:	83 ca 03             	or     edx,0x3
c0013891:	83 e0 fc             	and    eax,0xfffffffc
c0013894:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001389b:	0f 20 d8             	mov    eax,cr3
c001389e:	0f 22 d8             	mov    cr3,eax
c00138a1:	c3                   	ret    

c00138a2 <VAS::~VAS()>:
c00138a2:	83 ec 2c             	sub    esp,0x2c
c00138a5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00138ad:	fa                   	cli    
c00138ae:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00138b3:	83 c0 01             	add    eax,0x1
c00138b6:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c00138bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00138c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00138c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00138c5:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00138cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00138cf:	6a 01                	push   0x1
c00138d1:	50                   	push   eax
c00138d2:	e8 9f ff ff ff       	call   c0013876 <VAS::mapOtherVASIn(bool, VAS*)>
c00138d7:	83 c4 0c             	add    esp,0xc
c00138da:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00138e2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00138ea:	0f 8f d8 00 00 00    	jg     c00139c8 <VAS::~VAS()+0x126>
c00138f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00138f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00138fb:	c1 e2 02             	shl    edx,0x2
c00138fe:	01 d0                	add    eax,edx
c0013900:	8b 00                	mov    eax,DWORD PTR [eax]
c0013902:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390a:	83 e0 01             	and    eax,0x1
c001390d:	0f 84 ab 00 00 00    	je     c00139be <VAS::~VAS()+0x11c>
c0013913:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001391b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013923:	7f 74                	jg     c0013999 <VAS::~VAS()+0xf7>
c0013925:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013929:	c1 e0 0a             	shl    eax,0xa
c001392c:	89 c2                	mov    edx,eax
c001392e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013932:	01 d0                	add    eax,edx
c0013934:	c1 e0 0c             	shl    eax,0xc
c0013937:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001393b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013940:	8b 00                	mov    eax,DWORD PTR [eax]
c0013942:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013945:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001394b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001394f:	6a 01                	push   0x1
c0013951:	50                   	push   eax
c0013952:	e8 8b fc ff ff       	call   c00135e2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013957:	83 c4 0c             	add    esp,0xc
c001395a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001395e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013962:	8b 00                	mov    eax,DWORD PTR [eax]
c0013964:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001396c:	25 01 04 00 00       	and    eax,0x401
c0013971:	3d 01 04 00 00       	cmp    eax,0x401
c0013976:	75 1a                	jne    c0013992 <VAS::~VAS()+0xf0>
c0013978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001397c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013981:	83 ec 0c             	sub    esp,0xc
c0013984:	50                   	push   eax
c0013985:	e8 f5 c4 ff ff       	call   c000fe7f <Phys::freePage(unsigned long)>
c001398a:	83 c4 10             	add    esp,0x10
c001398d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013992:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013997:	eb 82                	jmp    c001391b <VAS::~VAS()+0x79>
c0013999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001399d:	25 00 04 00 00       	and    eax,0x400
c00139a2:	74 1a                	je     c00139be <VAS::~VAS()+0x11c>
c00139a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00139ad:	83 ec 0c             	sub    esp,0xc
c00139b0:	50                   	push   eax
c00139b1:	e8 c9 c4 ff ff       	call   c000fe7f <Phys::freePage(unsigned long)>
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00139be:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00139c3:	e9 1a ff ff ff       	jmp    c00138e2 <VAS::~VAS()+0x40>
c00139c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00139cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00139cf:	83 ec 0c             	sub    esp,0xc
c00139d2:	50                   	push   eax
c00139d3:	e8 57 fc ff ff       	call   c001362f <Virt::freeKernelVirtualPages(unsigned long)>
c00139d8:	83 c4 10             	add    esp,0x10
c00139db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00139df:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00139e2:	83 ec 0c             	sub    esp,0xc
c00139e5:	50                   	push   eax
c00139e6:	e8 94 c4 ff ff       	call   c000fe7f <Phys::freePage(unsigned long)>
c00139eb:	83 c4 10             	add    esp,0x10
c00139ee:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00139f3:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00139fb:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0013a00:	85 c0                	test   eax,eax
c0013a02:	75 01                	jne    c0013a05 <VAS::~VAS()+0x163>
c0013a04:	fb                   	sti    
c0013a05:	90                   	nop
c0013a06:	83 c4 2c             	add    esp,0x2c
c0013a09:	c3                   	ret    

c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013a0a:	55                   	push   ebp
c0013a0b:	57                   	push   edi
c0013a0c:	56                   	push   esi
c0013a0d:	53                   	push   ebx
c0013a0e:	83 ec 1c             	sub    esp,0x1c
c0013a11:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013a15:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013a19:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013a1f:	77 08                	ja     c0013a29 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013a21:	0f 20 d8             	mov    eax,cr3
c0013a24:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013a27:	75 49                	jne    c0013a72 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013a29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a2d:	09 d8                	or     eax,ebx
c0013a2f:	a9 ff 0f 00 00       	test   eax,0xfff
c0013a34:	75 59                	jne    c0013a8f <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013a36:	89 de                	mov    esi,ebx
c0013a38:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013a3b:	c1 ee 16             	shr    esi,0x16
c0013a3e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013a45:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013a49:	74 56                	je     c0013aa1 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013a4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013a4f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013a53:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013a59:	c1 eb 0a             	shr    ebx,0xa
c0013a5c:	c1 e6 0c             	shl    esi,0xc
c0013a5f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013a65:	09 d0                	or     eax,edx
c0013a67:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013a6a:	83 c4 1c             	add    esp,0x1c
c0013a6d:	5b                   	pop    ebx
c0013a6e:	5e                   	pop    esi
c0013a6f:	5f                   	pop    edi
c0013a70:	5d                   	pop    ebp
c0013a71:	c3                   	ret    
c0013a72:	83 ec 0c             	sub    esp,0xc
c0013a75:	68 c0 46 02 c0       	push   0xc00246c0
c0013a7a:	e8 fd 34 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013a7f:	83 c4 10             	add    esp,0x10
c0013a82:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a86:	09 d8                	or     eax,ebx
c0013a88:	a9 ff 0f 00 00       	test   eax,0xfff
c0013a8d:	74 a7                	je     c0013a36 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013a8f:	83 ec 0c             	sub    esp,0xc
c0013a92:	68 28 47 02 c0       	push   0xc0024728
c0013a97:	e8 58 c2 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0013a9c:	83 c4 10             	add    esp,0x10
c0013a9f:	eb 95                	jmp    c0013a36 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013aa5:	e8 3e c4 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0013aaa:	83 ec 0c             	sub    esp,0xc
c0013aad:	89 c5                	mov    ebp,eax
c0013aaf:	8b 0d 90 c2 02 c0    	mov    ecx,DWORD PTR ds:0xc002c290
c0013ab5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013ab9:	6a 01                	push   0x1
c0013abb:	e8 67 f8 ff ff       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c0013ac0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013ac7:	6a 01                	push   0x1
c0013ac9:	50                   	push   eax
c0013aca:	55                   	push   ebp
c0013acb:	81 cd 07 04 00 00    	or     ebp,0x407
c0013ad1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013ad5:	51                   	push   ecx
c0013ad6:	e8 19 01 00 00       	call   c0013bf4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013adb:	83 c4 1c             	add    esp,0x1c
c0013ade:	68 00 10 00 00       	push   0x1000
c0013ae3:	6a 00                	push   0x0
c0013ae5:	50                   	push   eax
c0013ae6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013aea:	e8 01 ca fe ff       	call   c00004f0 <memset>
c0013aef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013af3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013af6:	e8 34 fb ff ff       	call   c001362f <Virt::freeKernelVirtualPages(unsigned long)>
c0013afb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013aff:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013b02:	83 c4 10             	add    esp,0x10
c0013b05:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013b08:	e9 3e ff ff ff       	jmp    c0013a4b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013b0d:	90                   	nop

c0013b0e <VAS::allocatePages(int, int)>:
c0013b0e:	55                   	push   ebp
c0013b0f:	57                   	push   edi
c0013b10:	56                   	push   esi
c0013b11:	53                   	push   ebx
c0013b12:	83 ec 1c             	sub    esp,0x1c
c0013b15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b19:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013b1d:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013b21:	75 71                	jne    c0013b94 <VAS::allocatePages(int, int)+0x86>
c0013b23:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b2a:	85 c0                	test   eax,eax
c0013b2c:	74 4d                	je     c0013b7b <VAS::allocatePages(int, int)+0x6d>
c0013b2e:	89 dd                	mov    ebp,ebx
c0013b30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b34:	c1 e5 0c             	shl    ebp,0xc
c0013b37:	01 c5                	add    ebp,eax
c0013b39:	85 db                	test   ebx,ebx
c0013b3b:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013b3e:	7e 29                	jle    c0013b69 <VAS::allocatePages(int, int)+0x5b>
c0013b40:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013b44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013b48:	81 cf 00 04 00 00    	or     edi,0x400
c0013b4e:	e8 95 c3 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0013b53:	57                   	push   edi
c0013b54:	53                   	push   ebx
c0013b55:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013b5b:	50                   	push   eax
c0013b5c:	56                   	push   esi
c0013b5d:	e8 a8 fe ff ff       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b62:	83 c4 10             	add    esp,0x10
c0013b65:	39 dd                	cmp    ebp,ebx
c0013b67:	75 e5                	jne    c0013b4e <VAS::allocatePages(int, int)+0x40>
c0013b69:	0f 20 d8             	mov    eax,cr3
c0013b6c:	0f 22 d8             	mov    cr3,eax
c0013b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b73:	83 c4 1c             	add    esp,0x1c
c0013b76:	5b                   	pop    ebx
c0013b77:	5e                   	pop    esi
c0013b78:	5f                   	pop    edi
c0013b79:	5d                   	pop    ebp
c0013b7a:	c3                   	ret    
c0013b7b:	83 ec 0c             	sub    esp,0xc
c0013b7e:	68 4c 47 02 c0       	push   0xc002474c
c0013b83:	e8 6c c1 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0013b88:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013b8f:	83 c4 10             	add    esp,0x10
c0013b92:	eb 9a                	jmp    c0013b2e <VAS::allocatePages(int, int)+0x20>
c0013b94:	83 ec 0c             	sub    esp,0xc
c0013b97:	53                   	push   ebx
c0013b98:	e8 8a f7 ff ff       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c0013b9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ba1:	83 c4 10             	add    esp,0x10
c0013ba4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013ba9:	77 37                	ja     c0013be2 <VAS::allocatePages(int, int)+0xd4>
c0013bab:	85 db                	test   ebx,ebx
c0013bad:	7e ba                	jle    c0013b69 <VAS::allocatePages(int, int)+0x5b>
c0013baf:	c1 e3 0c             	shl    ebx,0xc
c0013bb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bb6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013bba:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013bbd:	81 cf 00 04 00 00    	or     edi,0x400
c0013bc3:	89 c3                	mov    ebx,eax
c0013bc5:	e8 1e c3 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0013bca:	57                   	push   edi
c0013bcb:	53                   	push   ebx
c0013bcc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013bd2:	50                   	push   eax
c0013bd3:	56                   	push   esi
c0013bd4:	e8 31 fe ff ff       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013bd9:	83 c4 10             	add    esp,0x10
c0013bdc:	39 dd                	cmp    ebp,ebx
c0013bde:	75 e5                	jne    c0013bc5 <VAS::allocatePages(int, int)+0xb7>
c0013be0:	eb 87                	jmp    c0013b69 <VAS::allocatePages(int, int)+0x5b>
c0013be2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013be6:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c0013beb:	09 c2                	or     edx,eax
c0013bed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013bf1:	eb b8                	jmp    c0013bab <VAS::allocatePages(int, int)+0x9d>
c0013bf3:	90                   	nop

c0013bf4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013bf4:	55                   	push   ebp
c0013bf5:	57                   	push   edi
c0013bf6:	56                   	push   esi
c0013bf7:	53                   	push   ebx
c0013bf8:	83 ec 0c             	sub    esp,0xc
c0013bfb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013bff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013c03:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013c07:	85 db                	test   ebx,ebx
c0013c09:	7e 2f                	jle    c0013c3a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013c0b:	c1 e3 0c             	shl    ebx,0xc
c0013c0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013c12:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013c16:	01 d3                	add    ebx,edx
c0013c18:	55                   	push   ebp
c0013c19:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013c1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c21:	29 c2                	sub    edx,eax
c0013c23:	01 f2                	add    edx,esi
c0013c25:	52                   	push   edx
c0013c26:	56                   	push   esi
c0013c27:	81 c6 00 10 00 00    	add    esi,0x1000
c0013c2d:	57                   	push   edi
c0013c2e:	e8 d7 fd ff ff       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c33:	83 c4 10             	add    esp,0x10
c0013c36:	39 de                	cmp    esi,ebx
c0013c38:	75 de                	jne    c0013c18 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013c3a:	0f 20 d8             	mov    eax,cr3
c0013c3d:	0f 22 d8             	mov    cr3,eax
c0013c40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c44:	83 c4 0c             	add    esp,0xc
c0013c47:	5b                   	pop    ebx
c0013c48:	5e                   	pop    esi
c0013c49:	5f                   	pop    edi
c0013c4a:	5d                   	pop    ebp
c0013c4b:	c3                   	ret    

c0013c4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013c4c:	55                   	push   ebp
c0013c4d:	57                   	push   edi
c0013c4e:	56                   	push   esi
c0013c4f:	53                   	push   ebx
c0013c50:	83 ec 1c             	sub    esp,0x1c
c0013c53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013c57:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013c5b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013c5f:	09 f8                	or     eax,edi
c0013c61:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013c65:	a9 ff 0f 00 00       	test   eax,0xfff
c0013c6a:	75 4f                	jne    c0013cbb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013c6c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013c70:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013c73:	c1 eb 16             	shr    ebx,0x16
c0013c76:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013c7d:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013c81:	74 52                	je     c0013cd5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013c83:	0f b6 f2             	movzx  esi,dl
c0013c86:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013c8a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013c8e:	c1 e8 0a             	shr    eax,0xa
c0013c91:	83 fe 01             	cmp    esi,0x1
c0013c94:	19 d2                	sbb    edx,edx
c0013c96:	c1 e3 0c             	shl    ebx,0xc
c0013c99:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013c9f:	25 fc 0f 00 00       	and    eax,0xffc
c0013ca4:	01 d8                	add    eax,ebx
c0013ca6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013caa:	09 d9                	or     ecx,ebx
c0013cac:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013cb3:	83 c4 1c             	add    esp,0x1c
c0013cb6:	5b                   	pop    ebx
c0013cb7:	5e                   	pop    esi
c0013cb8:	5f                   	pop    edi
c0013cb9:	5d                   	pop    ebp
c0013cba:	c3                   	ret    
c0013cbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013cbf:	83 ec 0c             	sub    esp,0xc
c0013cc2:	68 78 47 02 c0       	push   0xc0024778
c0013cc7:	e8 28 c0 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0013ccc:	83 c4 10             	add    esp,0x10
c0013ccf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013cd3:	eb 97                	jmp    c0013c6c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013cd5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013cd9:	e8 0a c2 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0013cde:	83 ec 0c             	sub    esp,0xc
c0013ce1:	89 c5                	mov    ebp,eax
c0013ce3:	8b 0d 90 c2 02 c0    	mov    ecx,DWORD PTR ds:0xc002c290
c0013ce9:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013ced:	6a 01                	push   0x1
c0013cef:	e8 33 f6 ff ff       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c0013cf4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013cfb:	6a 01                	push   0x1
c0013cfd:	50                   	push   eax
c0013cfe:	55                   	push   ebp
c0013cff:	81 cd 07 04 00 00    	or     ebp,0x407
c0013d05:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013d09:	51                   	push   ecx
c0013d0a:	e8 e5 fe ff ff       	call   c0013bf4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013d0f:	83 c4 1c             	add    esp,0x1c
c0013d12:	68 00 10 00 00       	push   0x1000
c0013d17:	6a 00                	push   0x0
c0013d19:	50                   	push   eax
c0013d1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d1e:	e8 cd c7 fe ff       	call   c00004f0 <memset>
c0013d23:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013d27:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013d2a:	e8 00 f9 ff ff       	call   c001362f <Virt::freeKernelVirtualPages(unsigned long)>
c0013d2f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013d32:	83 c4 10             	add    esp,0x10
c0013d35:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0013d38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013d3c:	e9 42 ff ff ff       	jmp    c0013c83 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013d41:	90                   	nop

c0013d42 <VAS::VAS(bool)>:
c0013d42:	53                   	push   ebx
c0013d43:	83 ec 28             	sub    esp,0x28
c0013d46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d4a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013d4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d52:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d5d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013d64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d68:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013d6c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013d6f:	e8 74 c1 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0013d74:	89 c2                	mov    edx,eax
c0013d76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d7a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013d7d:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c0013d83:	83 ec 0c             	sub    esp,0xc
c0013d86:	6a 01                	push   0x1
c0013d88:	e8 9a f5 ff ff       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	89 c2                	mov    edx,eax
c0013d92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d96:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d99:	83 ec 0c             	sub    esp,0xc
c0013d9c:	6a 03                	push   0x3
c0013d9e:	6a 01                	push   0x1
c0013da0:	52                   	push   edx
c0013da1:	50                   	push   eax
c0013da2:	53                   	push   ebx
c0013da3:	e8 4c fe ff ff       	call   c0013bf4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013da8:	83 c4 20             	add    esp,0x20
c0013dab:	89 c2                	mov    edx,eax
c0013dad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013db1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013db4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013dbc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013dc4:	7f 1d                	jg     c0013de3 <VAS::VAS(bool)+0xa1>
c0013dc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013dcd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013dd1:	c1 e2 02             	shl    edx,0x2
c0013dd4:	01 d0                	add    eax,edx
c0013dd6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013ddc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013de1:	eb d9                	jmp    c0013dbc <VAS::VAS(bool)+0x7a>
c0013de3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013deb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013df3:	7f 59                	jg     c0013e4e <VAS::VAS(bool)+0x10c>
c0013df5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013df9:	2d 00 02 00 00       	sub    eax,0x200
c0013dfe:	c1 e0 0c             	shl    eax,0xc
c0013e01:	89 c2                	mov    edx,eax
c0013e03:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c0013e08:	89 d1                	mov    ecx,edx
c0013e0a:	09 c1                	or     ecx,eax
c0013e0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e17:	c1 e2 02             	shl    edx,0x2
c0013e1a:	01 d0                	add    eax,edx
c0013e1c:	83 c9 05             	or     ecx,0x5
c0013e1f:	89 ca                	mov    edx,ecx
c0013e21:	89 10                	mov    DWORD PTR [eax],edx
c0013e23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e27:	2d 40 03 00 00       	sub    eax,0x340
c0013e2c:	83 f8 7f             	cmp    eax,0x7f
c0013e2f:	77 16                	ja     c0013e47 <VAS::VAS(bool)+0x105>
c0013e31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e3c:	c1 e2 02             	shl    edx,0x2
c0013e3f:	01 d0                	add    eax,edx
c0013e41:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013e47:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013e4c:	eb 9d                	jmp    c0013deb <VAS::VAS(bool)+0xa9>
c0013e4e:	8b 15 68 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb68
c0013e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e58:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e5b:	05 20 0c 00 00       	add    eax,0xc20
c0013e60:	81 ca 03 40 00 00    	or     edx,0x4003
c0013e66:	89 10                	mov    DWORD PTR [eax],edx
c0013e68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e6c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013e6f:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c0013e74:	09 c2                	or     edx,eax
c0013e76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e7d:	05 fc 0f 00 00       	add    eax,0xffc
c0013e82:	83 ca 03             	or     edx,0x3
c0013e85:	89 10                	mov    DWORD PTR [eax],edx
c0013e87:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0013e8c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013e92:	83 ec 0c             	sub    esp,0xc
c0013e95:	50                   	push   eax
c0013e96:	e8 17 5e ff ff       	call   c0009cb2 <Device::getName()>
c0013e9b:	83 c4 10             	add    esp,0x10
c0013e9e:	83 ec 08             	sub    esp,0x8
c0013ea1:	68 eb 49 02 c0       	push   0xc00249eb
c0013ea6:	50                   	push   eax
c0013ea7:	e8 a4 c8 fe ff       	call   c0000750 <strcmp>
c0013eac:	83 c4 10             	add    esp,0x10
c0013eaf:	85 c0                	test   eax,eax
c0013eb1:	0f 94 c0             	sete   al
c0013eb4:	0f b6 c0             	movzx  eax,al
c0013eb7:	85 c0                	test   eax,eax
c0013eb9:	74 68                	je     c0013f23 <VAS::VAS(bool)+0x1e1>
c0013ebb:	fa                   	cli    
c0013ebc:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0013ec1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013ec7:	05 68 09 00 00       	add    eax,0x968
c0013ecc:	83 ec 0c             	sub    esp,0xc
c0013ecf:	50                   	push   eax
c0013ed0:	e8 b5 ac ff ff       	call   c000eb8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013ed5:	83 c4 10             	add    esp,0x10
c0013ed8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013edd:	89 c3                	mov    ebx,eax
c0013edf:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0013ee4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013eea:	05 68 09 00 00       	add    eax,0x968
c0013eef:	83 ec 0c             	sub    esp,0xc
c0013ef2:	50                   	push   eax
c0013ef3:	e8 92 ac ff ff       	call   c000eb8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013ef8:	83 c4 10             	add    esp,0x10
c0013efb:	83 ec 08             	sub    esp,0x8
c0013efe:	50                   	push   eax
c0013eff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f03:	e8 08 f7 ff ff       	call   c0013610 <VAS::getPageTableEntry(unsigned long)>
c0013f08:	83 c4 10             	add    esp,0x10
c0013f0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f0d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f12:	6a 11                	push   0x11
c0013f14:	53                   	push   ebx
c0013f15:	50                   	push   eax
c0013f16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f1a:	e8 eb fa ff ff       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013f1f:	83 c4 10             	add    esp,0x10
c0013f22:	fb                   	sti    
c0013f23:	90                   	nop
c0013f24:	83 c4 28             	add    esp,0x28
c0013f27:	5b                   	pop    ebx
c0013f28:	c3                   	ret    
c0013f29:	90                   	nop

c0013f2a <VAS::evict(unsigned long)>:
c0013f2a:	55                   	push   ebp
c0013f2b:	57                   	push   edi
c0013f2c:	56                   	push   esi
c0013f2d:	53                   	push   ebx
c0013f2e:	83 ec 24             	sub    esp,0x24
c0013f31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013f35:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013f39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f3d:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0013f42:	50                   	push   eax
c0013f43:	68 f9 49 02 c0       	push   0xc00249f9
c0013f48:	e8 2f 30 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013f4d:	e8 33 f5 ff ff       	call   c0013485 <Virt::allocateSwapfilePage()>
c0013f52:	83 c4 10             	add    esp,0x10
c0013f55:	89 c7                	mov    edi,eax
c0013f57:	a1 cc 69 02 c0       	mov    eax,ds:0xc00269cc
c0013f5c:	85 c0                	test   eax,eax
c0013f5e:	7e 40                	jle    c0013fa0 <VAS::evict(unsigned long)+0x76>
c0013f60:	89 ee                	mov    esi,ebp
c0013f62:	31 db                	xor    ebx,ebx
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	57                   	push   edi
c0013f68:	e8 02 f5 ff ff       	call   c001346f <Virt::swapIDToSector(unsigned long)>
c0013f6d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f70:	01 d8                	add    eax,ebx
c0013f72:	6a 01                	push   0x1
c0013f74:	31 d2                	xor    edx,edx
c0013f76:	83 c3 01             	add    ebx,0x1
c0013f79:	52                   	push   edx
c0013f7a:	81 c6 00 02 00 00    	add    esi,0x200
c0013f80:	50                   	push   eax
c0013f81:	0f be 05 d8 69 02 c0 	movsx  eax,BYTE PTR ds:0xc00269d8
c0013f88:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0013f8f:	50                   	push   eax
c0013f90:	e8 7f 6b ff ff       	call   c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>
c0013f95:	83 c4 20             	add    esp,0x20
c0013f98:	39 1d cc 69 02 c0    	cmp    DWORD PTR ds:0xc00269cc,ebx
c0013f9e:	7f c4                	jg     c0013f64 <VAS::evict(unsigned long)+0x3a>
c0013fa0:	83 ec 08             	sub    esp,0x8
c0013fa3:	c1 e7 0c             	shl    edi,0xc
c0013fa6:	55                   	push   ebp
c0013fa7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fab:	50                   	push   eax
c0013fac:	e8 5f f6 ff ff       	call   c0013610 <VAS::getPageTableEntry(unsigned long)>
c0013fb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0013fb3:	89 d3                	mov    ebx,edx
c0013fb5:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013fbb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013fc1:	09 d7                	or     edi,edx
c0013fc3:	89 38                	mov    DWORD PTR [eax],edi
c0013fc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fc8:	8b 15 88 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c288
c0013fce:	83 c2 01             	add    edx,0x1
c0013fd1:	89 15 88 c2 02 c0    	mov    DWORD PTR ds:0xc002c288,edx
c0013fd7:	e8 a3 be ff ff       	call   c000fe7f <Phys::freePage(unsigned long)>
c0013fdc:	0f 20 d8             	mov    eax,cr3
c0013fdf:	0f 22 d8             	mov    cr3,eax
c0013fe2:	8b 0d 88 c2 02 c0    	mov    ecx,DWORD PTR ds:0xc002c288
c0013fe8:	51                   	push   ecx
c0013fe9:	55                   	push   ebp
c0013fea:	53                   	push   ebx
c0013feb:	68 9c 47 02 c0       	push   0xc002479c
c0013ff0:	e8 87 2f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013ff5:	83 c4 18             	add    esp,0x18
c0013ff8:	a1 84 c2 02 c0       	mov    eax,ds:0xc002c284
c0013ffd:	50                   	push   eax
c0013ffe:	8d 50 01             	lea    edx,[eax+0x1]
c0014001:	68 0e 4a 02 c0       	push   0xc0024a0e
c0014006:	89 15 84 c2 02 c0    	mov    DWORD PTR ds:0xc002c284,edx
c001400c:	e8 6b 2f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014011:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0014016:	c7 44 24 40 20 4a 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024a20
c001401e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014022:	83 c4 2c             	add    esp,0x2c
c0014025:	5b                   	pop    ebx
c0014026:	5e                   	pop    esi
c0014027:	5f                   	pop    edi
c0014028:	5d                   	pop    ebp
c0014029:	e9 4e 2f ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c001402e <VAS::canLockPage(unsigned long)>:
c001402e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014032:	50                   	push   eax
c0014033:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014037:	52                   	push   edx
c0014038:	e8 d3 f5 ff ff       	call   c0013610 <VAS::getPageTableEntry(unsigned long)>
c001403d:	59                   	pop    ecx
c001403e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014040:	5a                   	pop    edx
c0014041:	c1 e8 0b             	shr    eax,0xb
c0014044:	83 e0 01             	and    eax,0x1
c0014047:	c3                   	ret    

c0014048 <VAS::unlockPage(unsigned long)>:
c0014048:	83 ec 0c             	sub    esp,0xc
c001404b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001404f:	50                   	push   eax
c0014050:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014054:	52                   	push   edx
c0014055:	e8 b6 f5 ff ff       	call   c0013610 <VAS::getPageTableEntry(unsigned long)>
c001405a:	59                   	pop    ecx
c001405b:	5a                   	pop    edx
c001405c:	8b 10                	mov    edx,DWORD PTR [eax]
c001405e:	f6 c6 08             	test   dh,0x8
c0014061:	75 09                	jne    c001406c <VAS::unlockPage(unsigned long)+0x24>
c0014063:	80 ce 08             	or     dh,0x8
c0014066:	89 10                	mov    DWORD PTR [eax],edx
c0014068:	83 c4 0c             	add    esp,0xc
c001406b:	c3                   	ret    
c001406c:	c7 44 24 10 d0 47 02 c0 	mov    DWORD PTR [esp+0x10],0xc00247d0
c0014074:	83 c4 0c             	add    esp,0xc
c0014077:	e9 78 bc ff ff       	jmp    c000fcf4 <KePanic(char const*)>

c001407c <VAS::canLockPages(unsigned long, int)>:
c001407c:	55                   	push   ebp
c001407d:	57                   	push   edi
c001407e:	56                   	push   esi
c001407f:	53                   	push   ebx
c0014080:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014084:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014088:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001408c:	85 ff                	test   edi,edi
c001408e:	7e 23                	jle    c00140b3 <VAS::canLockPages(unsigned long, int)+0x37>
c0014090:	31 f6                	xor    esi,esi
c0014092:	eb 0d                	jmp    c00140a1 <VAS::canLockPages(unsigned long, int)+0x25>
c0014094:	81 c3 00 10 00 00    	add    ebx,0x1000
c001409a:	83 c6 01             	add    esi,0x1
c001409d:	39 f7                	cmp    edi,esi
c001409f:	74 0d                	je     c00140ae <VAS::canLockPages(unsigned long, int)+0x32>
c00140a1:	53                   	push   ebx
c00140a2:	55                   	push   ebp
c00140a3:	e8 86 ff ff ff       	call   c001402e <VAS::canLockPage(unsigned long)>
c00140a8:	5a                   	pop    edx
c00140a9:	84 c0                	test   al,al
c00140ab:	59                   	pop    ecx
c00140ac:	75 e6                	jne    c0014094 <VAS::canLockPages(unsigned long, int)+0x18>
c00140ae:	5b                   	pop    ebx
c00140af:	5e                   	pop    esi
c00140b0:	5f                   	pop    edi
c00140b1:	5d                   	pop    ebp
c00140b2:	c3                   	ret    
c00140b3:	b0 01                	mov    al,0x1
c00140b5:	eb f7                	jmp    c00140ae <VAS::canLockPages(unsigned long, int)+0x32>
c00140b7:	90                   	nop

c00140b8 <VAS::unlockPages(unsigned long, int)>:
c00140b8:	55                   	push   ebp
c00140b9:	57                   	push   edi
c00140ba:	56                   	push   esi
c00140bb:	53                   	push   ebx
c00140bc:	83 ec 0c             	sub    esp,0xc
c00140bf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00140c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00140c7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00140cb:	85 ff                	test   edi,edi
c00140cd:	7e 1c                	jle    c00140eb <VAS::unlockPages(unsigned long, int)+0x33>
c00140cf:	31 f6                	xor    esi,esi
c00140d1:	83 ec 08             	sub    esp,0x8
c00140d4:	83 c6 01             	add    esi,0x1
c00140d7:	53                   	push   ebx
c00140d8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00140de:	55                   	push   ebp
c00140df:	e8 64 ff ff ff       	call   c0014048 <VAS::unlockPage(unsigned long)>
c00140e4:	83 c4 10             	add    esp,0x10
c00140e7:	39 f7                	cmp    edi,esi
c00140e9:	75 e6                	jne    c00140d1 <VAS::unlockPages(unsigned long, int)+0x19>
c00140eb:	83 c4 0c             	add    esp,0xc
c00140ee:	5b                   	pop    ebx
c00140ef:	5e                   	pop    esi
c00140f0:	5f                   	pop    edi
c00140f1:	5d                   	pop    ebp
c00140f2:	c3                   	ret    
c00140f3:	90                   	nop

c00140f4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00140f4:	55                   	push   ebp
c00140f5:	57                   	push   edi
c00140f6:	56                   	push   esi
c00140f7:	53                   	push   ebx
c00140f8:	81 ec 1c 10 00 00    	sub    esp,0x101c
c00140fe:	8b 84 24 34 10 00 00 	mov    eax,DWORD PTR [esp+0x1034]
c0014105:	89 c3                	mov    ebx,eax
c0014107:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001410d:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0014112:	77 11                	ja     c0014125 <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0014114:	85 db                	test   ebx,ebx
c0014116:	75 1d                	jne    c0014135 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0014118:	31 c0                	xor    eax,eax
c001411a:	81 c4 1c 10 00 00    	add    esp,0x101c
c0014120:	5b                   	pop    ebx
c0014121:	5e                   	pop    esi
c0014122:	5f                   	pop    edi
c0014123:	5d                   	pop    ebp
c0014124:	c3                   	ret    
c0014125:	83 ec 0c             	sub    esp,0xc
c0014128:	68 35 4a 02 c0       	push   0xc0024a35
c001412d:	e8 c2 bb ff ff       	call   c000fcf4 <KePanic(char const*)>
c0014132:	83 c4 10             	add    esp,0x10
c0014135:	83 ec 08             	sub    esp,0x8
c0014138:	53                   	push   ebx
c0014139:	8b b4 24 3c 10 00 00 	mov    esi,DWORD PTR [esp+0x103c]
c0014140:	56                   	push   esi
c0014141:	e8 ca f4 ff ff       	call   c0013610 <VAS::getPageTableEntry(unsigned long)>
c0014146:	83 c4 10             	add    esp,0x10
c0014149:	89 c2                	mov    edx,eax
c001414b:	85 c0                	test   eax,eax
c001414d:	74 c9                	je     c0014118 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c001414f:	8b 28                	mov    ebp,DWORD PTR [eax]
c0014151:	f7 c5 00 02 00 00    	test   ebp,0x200
c0014157:	0f 85 ae 00 00 00    	jne    c001420b <VAS::tryLoadBackOffDisk(unsigned long)+0x117>
c001415d:	89 e8                	mov    eax,ebp
c001415f:	25 01 04 00 00       	and    eax,0x401
c0014164:	3d 00 04 00 00       	cmp    eax,0x400
c0014169:	75 ad                	jne    c0014118 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c001416b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001416f:	c1 ed 0c             	shr    ebp,0xc
c0014172:	e8 71 bd ff ff       	call   c000fee8 <Phys::allocatePage()>
c0014177:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001417b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001417d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0014183:	09 c1                	or     ecx,eax
c0014185:	81 c9 01 08 00 00    	or     ecx,0x801
c001418b:	89 0a                	mov    DWORD PTR [edx],ecx
c001418d:	8b 15 cc 69 02 c0    	mov    edx,DWORD PTR ds:0xc00269cc
c0014193:	85 d2                	test   edx,edx
c0014195:	7e 40                	jle    c00141d7 <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c0014197:	89 df                	mov    edi,ebx
c0014199:	31 f6                	xor    esi,esi
c001419b:	83 ec 0c             	sub    esp,0xc
c001419e:	55                   	push   ebp
c001419f:	e8 cb f2 ff ff       	call   c001346f <Virt::swapIDToSector(unsigned long)>
c00141a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00141a7:	01 f0                	add    eax,esi
c00141a9:	6a 01                	push   0x1
c00141ab:	31 d2                	xor    edx,edx
c00141ad:	83 c6 01             	add    esi,0x1
c00141b0:	52                   	push   edx
c00141b1:	81 c7 00 02 00 00    	add    edi,0x200
c00141b7:	50                   	push   eax
c00141b8:	0f be 05 d8 69 02 c0 	movsx  eax,BYTE PTR ds:0xc00269d8
c00141bf:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c00141c6:	50                   	push   eax
c00141c7:	e8 dc 68 ff ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c00141cc:	83 c4 20             	add    esp,0x20
c00141cf:	39 35 cc 69 02 c0    	cmp    DWORD PTR ds:0xc00269cc,esi
c00141d5:	7f c4                	jg     c001419b <VAS::tryLoadBackOffDisk(unsigned long)+0xa7>
c00141d7:	83 ec 04             	sub    esp,0x4
c00141da:	a1 88 c2 02 c0       	mov    eax,ds:0xc002c288
c00141df:	83 e8 01             	sub    eax,0x1
c00141e2:	50                   	push   eax
c00141e3:	a3 88 c2 02 c0       	mov    ds:0xc002c288,eax
c00141e8:	53                   	push   ebx
c00141e9:	68 47 4a 02 c0       	push   0xc0024a47
c00141ee:	e8 89 2d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00141f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00141f6:	e8 51 f2 ff ff       	call   c001344c <Virt::freeSwapfilePage(unsigned long)>
c00141fb:	0f 20 d8             	mov    eax,cr3
c00141fe:	0f 22 d8             	mov    cr3,eax
c0014201:	b0 01                	mov    al,0x1
c0014203:	83 c4 10             	add    esp,0x10
c0014206:	e9 0f ff ff ff       	jmp    c001411a <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c001420b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001420f:	83 ec 0c             	sub    esp,0xc
c0014212:	68 00 48 02 c0       	push   0xc0024800
c0014217:	e8 60 2d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001421c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014220:	8b 32                	mov    esi,DWORD PTR [edx]
c0014222:	e8 c1 bc ff ff       	call   c000fee8 <Phys::allocatePage()>
c0014227:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001422d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014231:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014233:	83 c9 01             	or     ecx,0x1
c0014236:	89 0a                	mov    DWORD PTR [edx],ecx
c0014238:	0f 20 d9             	mov    ecx,cr3
c001423b:	0f 22 d9             	mov    cr3,ecx
c001423e:	bd 00 10 00 00       	mov    ebp,0x1000
c0014243:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0014247:	89 e9                	mov    ecx,ebp
c0014249:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001424b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001424d:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0014253:	09 c8                	or     eax,ecx
c0014255:	83 c8 02             	or     eax,0x2
c0014258:	89 02                	mov    DWORD PTR [edx],eax
c001425a:	0f 20 d8             	mov    eax,cr3
c001425d:	0f 22 d8             	mov    cr3,eax
c0014260:	8d 74 24 20          	lea    esi,[esp+0x20]
c0014264:	89 df                	mov    edi,ebx
c0014266:	89 e9                	mov    ecx,ebp
c0014268:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001426a:	b0 01                	mov    al,0x1
c001426c:	83 c4 10             	add    esp,0x10
c001426f:	e9 a6 fe ff ff       	jmp    c001411a <VAS::tryLoadBackOffDisk(unsigned long)+0x26>

c0014274 <VAS::lockPage(unsigned long)>:
c0014274:	56                   	push   esi
c0014275:	53                   	push   ebx
c0014276:	83 ec 04             	sub    esp,0x4
c0014279:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001427d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014281:	50                   	push   eax
c0014282:	56                   	push   esi
c0014283:	e8 88 f3 ff ff       	call   c0013610 <VAS::getPageTableEntry(unsigned long)>
c0014288:	5a                   	pop    edx
c0014289:	89 c3                	mov    ebx,eax
c001428b:	59                   	pop    ecx
c001428c:	8b 00                	mov    eax,DWORD PTR [eax]
c001428e:	a8 01                	test   al,0x1
c0014290:	74 10                	je     c00142a2 <VAS::lockPage(unsigned long)+0x2e>
c0014292:	f6 c4 08             	test   ah,0x8
c0014295:	74 28                	je     c00142bf <VAS::lockPage(unsigned long)+0x4b>
c0014297:	80 e4 f7             	and    ah,0xf7
c001429a:	89 03                	mov    DWORD PTR [ebx],eax
c001429c:	83 c4 04             	add    esp,0x4
c001429f:	5b                   	pop    ebx
c00142a0:	5e                   	pop    esi
c00142a1:	c3                   	ret    
c00142a2:	83 ec 08             	sub    esp,0x8
c00142a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00142aa:	50                   	push   eax
c00142ab:	56                   	push   esi
c00142ac:	e8 43 fe ff ff       	call   c00140f4 <VAS::tryLoadBackOffDisk(unsigned long)>
c00142b1:	83 c4 10             	add    esp,0x10
c00142b4:	84 c0                	test   al,al
c00142b6:	74 19                	je     c00142d1 <VAS::lockPage(unsigned long)+0x5d>
c00142b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142ba:	f6 c4 08             	test   ah,0x8
c00142bd:	75 d8                	jne    c0014297 <VAS::lockPage(unsigned long)+0x23>
c00142bf:	c7 44 24 10 d0 47 02 c0 	mov    DWORD PTR [esp+0x10],0xc00247d0
c00142c7:	83 c4 04             	add    esp,0x4
c00142ca:	5b                   	pop    ebx
c00142cb:	5e                   	pop    esi
c00142cc:	e9 23 ba ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c00142d1:	83 ec 0c             	sub    esp,0xc
c00142d4:	68 20 48 02 c0       	push   0xc0024820
c00142d9:	e8 16 ba ff ff       	call   c000fcf4 <KePanic(char const*)>
c00142de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142e0:	83 c4 10             	add    esp,0x10
c00142e3:	eb ad                	jmp    c0014292 <VAS::lockPage(unsigned long)+0x1e>
c00142e5:	90                   	nop

c00142e6 <VAS::lockPages(unsigned long, int)>:
c00142e6:	55                   	push   ebp
c00142e7:	57                   	push   edi
c00142e8:	56                   	push   esi
c00142e9:	53                   	push   ebx
c00142ea:	83 ec 0c             	sub    esp,0xc
c00142ed:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00142f1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00142f5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00142f9:	85 ff                	test   edi,edi
c00142fb:	7e 1c                	jle    c0014319 <VAS::lockPages(unsigned long, int)+0x33>
c00142fd:	31 f6                	xor    esi,esi
c00142ff:	83 ec 08             	sub    esp,0x8
c0014302:	83 c6 01             	add    esi,0x1
c0014305:	53                   	push   ebx
c0014306:	81 c3 00 10 00 00    	add    ebx,0x1000
c001430c:	55                   	push   ebp
c001430d:	e8 62 ff ff ff       	call   c0014274 <VAS::lockPage(unsigned long)>
c0014312:	83 c4 10             	add    esp,0x10
c0014315:	39 f7                	cmp    edi,esi
c0014317:	75 e6                	jne    c00142ff <VAS::lockPages(unsigned long, int)+0x19>
c0014319:	83 c4 0c             	add    esp,0xc
c001431c:	5b                   	pop    ebx
c001431d:	5e                   	pop    esi
c001431e:	5f                   	pop    edi
c001431f:	5d                   	pop    ebp
c0014320:	c3                   	ret    
c0014321:	90                   	nop

c0014322 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014322:	55                   	push   ebp
c0014323:	57                   	push   edi
c0014324:	56                   	push   esi
c0014325:	53                   	push   ebx
c0014326:	83 ec 28             	sub    esp,0x28
c0014329:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001432d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014331:	50                   	push   eax
c0014332:	e8 f0 ef ff ff       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c0014337:	83 c4 0c             	add    esp,0xc
c001433a:	89 c5                	mov    ebp,eax
c001433c:	6a 07                	push   0x7
c001433e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014342:	52                   	push   edx
c0014343:	56                   	push   esi
c0014344:	e8 c5 f7 ff ff       	call   c0013b0e <VAS::allocatePages(int, int)>
c0014349:	83 c4 10             	add    esp,0x10
c001434c:	89 c7                	mov    edi,eax
c001434e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014352:	85 c9                	test   ecx,ecx
c0014354:	74 2f                	je     c0014385 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014356:	31 db                	xor    ebx,ebx
c0014358:	e8 8b bb ff ff       	call   c000fee8 <Phys::allocatePage()>
c001435d:	83 c3 01             	add    ebx,0x1
c0014360:	6a 03                	push   0x3
c0014362:	55                   	push   ebp
c0014363:	50                   	push   eax
c0014364:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014368:	56                   	push   esi
c0014369:	e8 9c f6 ff ff       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c001436e:	6a 07                	push   0x7
c0014370:	57                   	push   edi
c0014371:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014375:	50                   	push   eax
c0014376:	56                   	push   esi
c0014377:	e8 8e f6 ff ff       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c001437c:	83 c4 20             	add    esp,0x20
c001437f:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0014383:	75 d3                	jne    c0014358 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014385:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014389:	89 28                	mov    DWORD PTR [eax],ebp
c001438b:	83 c4 1c             	add    esp,0x1c
c001438e:	89 f8                	mov    eax,edi
c0014390:	5b                   	pop    ebx
c0014391:	5e                   	pop    esi
c0014392:	5f                   	pop    edi
c0014393:	5d                   	pop    ebp
c0014394:	c3                   	ret    
c0014395:	90                   	nop

c0014396 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014396:	53                   	push   ebx
c0014397:	83 ec 14             	sub    esp,0x14
c001439a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001439e:	68 50 48 02 c0       	push   0xc0024850
c00143a3:	e8 d4 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143a8:	c7 04 24 b0 48 02 c0 	mov    DWORD PTR [esp],0xc00248b0
c00143af:	e8 c8 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143b4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00143b8:	83 c4 18             	add    esp,0x18
c00143bb:	5b                   	pop    ebx
c00143bc:	e9 6e f2 ff ff       	jmp    c001362f <Virt::freeKernelVirtualPages(unsigned long)>
c00143c1:	90                   	nop

c00143c2 <VAS::scanForEviction()>:
c00143c2:	57                   	push   edi
c00143c3:	56                   	push   esi
c00143c4:	31 f6                	xor    esi,esi
c00143c6:	53                   	push   ebx
c00143c7:	83 ec 18             	sub    esp,0x18
c00143ca:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00143ce:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00143d3:	50                   	push   eax
c00143d4:	68 2c 49 02 c0       	push   0xc002492c
c00143d9:	e8 9e 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143de:	c7 04 24 5c 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a5c
c00143e5:	e8 92 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143ea:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00143ed:	83 c4 10             	add    esp,0x10
c00143f0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00143f6:	75 0e                	jne    c0014406 <VAS::scanForEviction()+0x44>
c00143f8:	89 da                	mov    edx,ebx
c00143fa:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00143fd:	c1 ea 16             	shr    edx,0x16
c0014400:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014404:	74 5b                	je     c0014461 <VAS::scanForEviction()+0x9f>
c0014406:	83 ec 08             	sub    esp,0x8
c0014409:	53                   	push   ebx
c001440a:	57                   	push   edi
c001440b:	e8 00 f2 ff ff       	call   c0013610 <VAS::getPageTableEntry(unsigned long)>
c0014410:	83 c4 10             	add    esp,0x10
c0014413:	8b 10                	mov    edx,DWORD PTR [eax]
c0014415:	89 d1                	mov    ecx,edx
c0014417:	c1 e9 0c             	shr    ecx,0xc
c001441a:	74 10                	je     c001442c <VAS::scanForEviction()+0x6a>
c001441c:	89 d1                	mov    ecx,edx
c001441e:	81 e1 01 08 00 00    	and    ecx,0x801
c0014424:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001442a:	74 40                	je     c001446c <VAS::scanForEviction()+0xaa>
c001442c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014432:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014438:	76 2d                	jbe    c0014467 <VAS::scanForEviction()+0xa5>
c001443a:	83 c6 01             	add    esi,0x1
c001443d:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014444:	83 fe 03             	cmp    esi,0x3
c0014447:	74 32                	je     c001447b <VAS::scanForEviction()+0xb9>
c0014449:	31 db                	xor    ebx,ebx
c001444b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014451:	75 b3                	jne    c0014406 <VAS::scanForEviction()+0x44>
c0014453:	89 da                	mov    edx,ebx
c0014455:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014458:	c1 ea 16             	shr    edx,0x16
c001445b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001445f:	75 a5                	jne    c0014406 <VAS::scanForEviction()+0x44>
c0014461:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014467:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001446a:	eb 84                	jmp    c00143f0 <VAS::scanForEviction()+0x2e>
c001446c:	f6 c2 20             	test   dl,0x20
c001446f:	74 13                	je     c0014484 <VAS::scanForEviction()+0xc2>
c0014471:	83 e2 df             	and    edx,0xffffffdf
c0014474:	89 10                	mov    DWORD PTR [eax],edx
c0014476:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014479:	eb b1                	jmp    c001442c <VAS::scanForEviction()+0x6a>
c001447b:	83 c4 10             	add    esp,0x10
c001447e:	31 c0                	xor    eax,eax
c0014480:	5b                   	pop    ebx
c0014481:	5e                   	pop    esi
c0014482:	5f                   	pop    edi
c0014483:	c3                   	ret    
c0014484:	83 ec 08             	sub    esp,0x8
c0014487:	89 d0                	mov    eax,edx
c0014489:	25 00 f0 ff ff       	and    eax,0xfffff000
c001448e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014492:	53                   	push   ebx
c0014493:	68 78 4a 02 c0       	push   0xc0024a78
c0014498:	e8 df 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001449d:	58                   	pop    eax
c001449e:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00144a1:	5a                   	pop    edx
c00144a2:	51                   	push   ecx
c00144a3:	57                   	push   edi
c00144a4:	e8 81 fa ff ff       	call   c0013f2a <VAS::evict(unsigned long)>
c00144a9:	5b                   	pop    ebx
c00144aa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00144ad:	5e                   	pop    esi
c00144ae:	50                   	push   eax
c00144af:	68 8c 4a 02 c0       	push   0xc0024a8c
c00144b4:	e8 c3 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144b9:	58                   	pop    eax
c00144ba:	5a                   	pop    edx
c00144bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144bf:	50                   	push   eax
c00144c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144c4:	68 9f 4a 02 c0       	push   0xc0024a9f
c00144c9:	e8 ae 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144ce:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00144d1:	81 c1 00 10 00 00    	add    ecx,0x1000
c00144d7:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00144da:	8b 3d 70 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca70
c00144e0:	5b                   	pop    ebx
c00144e1:	5e                   	pop    esi
c00144e2:	57                   	push   edi
c00144e3:	68 4c 49 02 c0       	push   0xc002494c
c00144e8:	e8 8f 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144ed:	83 c4 10             	add    esp,0x10
c00144f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00144f4:	83 c4 10             	add    esp,0x10
c00144f7:	5b                   	pop    ebx
c00144f8:	5e                   	pop    esi
c00144f9:	5f                   	pop    edi
c00144fa:	c3                   	ret    

c00144fb <mapVASFirstTime>:
c00144fb:	55                   	push   ebp
c00144fc:	57                   	push   edi
c00144fd:	56                   	push   esi
c00144fe:	53                   	push   ebx
c00144ff:	83 ec 0c             	sub    esp,0xc
c0014502:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014507:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001450a:	83 fa 01             	cmp    edx,0x1
c001450d:	0f 84 cb 00 00 00    	je     c00145de <mapVASFirstTime+0xe3>
c0014513:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014516:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014519:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001451e:	c1 e5 15             	shl    ebp,0x15
c0014521:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014526:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c001452c:	29 eb                	sub    ebx,ebp
c001452e:	29 ef                	sub    edi,ebp
c0014530:	e8 b3 b9 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0014535:	83 ec 0c             	sub    esp,0xc
c0014538:	68 03 04 00 00       	push   0x403
c001453d:	6a 01                	push   0x1
c001453f:	53                   	push   ebx
c0014540:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014546:	50                   	push   eax
c0014547:	56                   	push   esi
c0014548:	e8 a7 f6 ff ff       	call   c0013bf4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001454d:	83 c4 20             	add    esp,0x20
c0014550:	39 fb                	cmp    ebx,edi
c0014552:	75 dc                	jne    c0014530 <mapVASFirstTime+0x35>
c0014554:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014559:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001455e:	29 eb                	sub    ebx,ebp
c0014560:	29 ef                	sub    edi,ebp
c0014562:	e8 81 b9 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0014567:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001456b:	83 fa 01             	cmp    edx,0x1
c001456e:	19 d2                	sbb    edx,edx
c0014570:	83 ec 0c             	sub    esp,0xc
c0014573:	83 e2 04             	and    edx,0x4
c0014576:	81 c2 03 04 00 00    	add    edx,0x403
c001457c:	52                   	push   edx
c001457d:	6a 01                	push   0x1
c001457f:	53                   	push   ebx
c0014580:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014586:	50                   	push   eax
c0014587:	56                   	push   esi
c0014588:	e8 67 f6 ff ff       	call   c0013bf4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001458d:	83 c4 20             	add    esp,0x20
c0014590:	39 df                	cmp    edi,ebx
c0014592:	75 ce                	jne    c0014562 <mapVASFirstTime+0x67>
c0014594:	83 ec 0c             	sub    esp,0xc
c0014597:	bb 7c 80 02 c0       	mov    ebx,0xc002807c
c001459c:	6a 04                	push   0x4
c001459e:	81 eb 00 70 02 c0    	sub    ebx,0xc0027000
c00145a4:	6a ff                	push   0xffffffff
c00145a6:	c1 eb 0c             	shr    ebx,0xc
c00145a9:	53                   	push   ebx
c00145aa:	68 00 70 02 c0       	push   0xc0027000
c00145af:	56                   	push   esi
c00145b0:	e8 f5 f1 ff ff       	call   c00137aa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00145b5:	83 c4 14             	add    esp,0x14
c00145b8:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c00145bd:	6a 04                	push   0x4
c00145bf:	6a ff                	push   0xffffffff
c00145c1:	53                   	push   ebx
c00145c2:	68 00 70 02 c0       	push   0xc0027000
c00145c7:	50                   	push   eax
c00145c8:	e8 dd f1 ff ff       	call   c00137aa <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00145cd:	0f 20 d8             	mov    eax,cr3
c00145d0:	0f 22 d8             	mov    cr3,eax
c00145d3:	83 c4 20             	add    esp,0x20
c00145d6:	83 c4 0c             	add    esp,0xc
c00145d9:	5b                   	pop    ebx
c00145da:	5e                   	pop    esi
c00145db:	5f                   	pop    edi
c00145dc:	5d                   	pop    ebp
c00145dd:	c3                   	ret    
c00145de:	83 ec 0c             	sub    esp,0xc
c00145e1:	68 ac 4a 02 c0       	push   0xc0024aac
c00145e6:	e8 91 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00145eb:	83 c4 10             	add    esp,0x10
c00145ee:	83 c4 0c             	add    esp,0xc
c00145f1:	5b                   	pop    ebx
c00145f2:	5e                   	pop    esi
c00145f3:	5f                   	pop    edi
c00145f4:	5d                   	pop    ebp
c00145f5:	c3                   	ret    

c00145f6 <SysAlarm(regs*)>:
c00145f6:	53                   	push   ebx
c00145f7:	83 ec 10             	sub    esp,0x10
c00145fa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00145fe:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014601:	68 c5 4a 02 c0       	push   0xc0024ac5
c0014606:	e8 71 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001460b:	83 c4 0c             	add    esp,0xc
c001460e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014611:	31 d2                	xor    edx,edx
c0014613:	52                   	push   edx
c0014614:	50                   	push   eax
c0014615:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001461b:	e8 b4 09 00 00       	call   c0014fd4 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014620:	83 c4 18             	add    esp,0x18
c0014623:	5b                   	pop    ebx
c0014624:	c3                   	ret    

c0014625 <SysEject(regs*)>:
c0014625:	83 ec 0c             	sub    esp,0xc
c0014628:	83 ca ff             	or     edx,0xffffffff
c001462b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001462f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014632:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014637:	83 e9 41             	sub    ecx,0x41
c001463a:	83 f9 19             	cmp    ecx,0x19
c001463d:	77 18                	ja     c0014657 <SysEject(regs*)+0x32>
c001463f:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0014646:	85 c9                	test   ecx,ecx
c0014648:	74 0d                	je     c0014657 <SysEject(regs*)+0x32>
c001464a:	83 ec 0c             	sub    esp,0xc
c001464d:	51                   	push   ecx
c001464e:	e8 eb 63 ff ff       	call   c000aa3e <LogicalDisk::eject()>
c0014653:	83 c4 10             	add    esp,0x10
c0014656:	99                   	cdq    
c0014657:	83 c4 0c             	add    esp,0xc
c001465a:	c3                   	ret    

c001465b <SysExit(regs*)>:
c001465b:	83 ec 18             	sub    esp,0x18
c001465e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014662:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014665:	e8 a6 2f 00 00       	call   c0017610 <KeTerminateCurrentThread(int)>
c001466a:	83 c8 ff             	or     eax,0xffffffff
c001466d:	83 c4 1c             	add    esp,0x1c
c0014670:	89 c2                	mov    edx,eax
c0014672:	c3                   	ret    

c0014673 <SysGetCwd(regs*)>:
c0014673:	83 ec 10             	sub    esp,0x10
c0014676:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001467a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001467d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014680:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014685:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014688:	e8 91 37 ff ff       	call   c0007e1e <Fs::getcwd(Process*, char*, int)>
c001468d:	83 c4 1c             	add    esp,0x1c
c0014690:	99                   	cdq    
c0014691:	c3                   	ret    

c0014692 <SysGetPID(regs*)>:
c0014692:	83 ec 14             	sub    esp,0x14
c0014695:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001469a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001469d:	ff 30                	push   DWORD PTR [eax]
c001469f:	68 da 4a 02 c0       	push   0xc0024ada
c00146a4:	e8 d3 28 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00146a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00146b3:	83 c4 1c             	add    esp,0x1c
c00146b6:	99                   	cdq    
c00146b7:	c3                   	ret    

c00146b8 <SysGetRAMData(regs*)>:
c00146b8:	8b 0d 7c c1 02 c0    	mov    ecx,DWORD PTR ds:0xc002c17c
c00146be:	a1 88 c2 02 c0       	mov    eax,ds:0xc002c288
c00146c3:	03 05 78 c1 02 c0    	add    eax,DWORD PTR ds:0xc002c178
c00146c9:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00146cf:	99                   	cdq    
c00146d0:	f7 f9                	idiv   ecx
c00146d2:	c1 e0 18             	shl    eax,0x18
c00146d5:	09 c8                	or     eax,ecx
c00146d7:	99                   	cdq    
c00146d8:	c3                   	ret    

c00146d9 <SysGetVGAPtr(regs*)>:
c00146d9:	55                   	push   ebp
c00146da:	57                   	push   edi
c00146db:	56                   	push   esi
c00146dc:	53                   	push   ebx
c00146dd:	83 ec 1c             	sub    esp,0x1c
c00146e0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00146e4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00146e7:	83 f8 ff             	cmp    eax,0xffffffff
c00146ea:	74 23                	je     c001470f <SysGetVGAPtr(regs*)+0x36>
c00146ec:	83 ec 0c             	sub    esp,0xc
c00146ef:	50                   	push   eax
c00146f0:	e8 c7 29 00 00       	call   c00170bc <KeProcessFromPID(int)>
c00146f5:	31 d2                	xor    edx,edx
c00146f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146fb:	83 c4 10             	add    esp,0x10
c00146fe:	b8 01 00 00 00       	mov    eax,0x1
c0014703:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014708:	75 11                	jne    c001471b <SysGetVGAPtr(regs*)+0x42>
c001470a:	e9 80 00 00 00       	jmp    c001478f <SysGetVGAPtr(regs*)+0xb6>
c001470f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014714:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014717:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001471b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001471f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014723:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014729:	74 0c                	je     c0014737 <SysGetVGAPtr(regs*)+0x5e>
c001472b:	83 ec 0c             	sub    esp,0xc
c001472e:	55                   	push   ebp
c001472f:	e8 7b dc ff ff       	call   c00123af <setActiveTerminal(VgaText*)>
c0014734:	83 c4 10             	add    esp,0x10
c0014737:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001473a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001473d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014742:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014744:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014747:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001474a:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014750:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014753:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014756:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c001475c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014760:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014763:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c001476a:	c1 e8 07             	shr    eax,0x7
c001476d:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014773:	50                   	push   eax
c0014774:	50                   	push   eax
c0014775:	68 e9 4a 02 c0       	push   0xc0024ae9
c001477a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001477d:	05 ac 0f 00 00       	add    eax,0xfac
c0014782:	50                   	push   eax
c0014783:	e8 b8 be fe ff       	call   c0000640 <strcpy>
c0014788:	83 c4 10             	add    esp,0x10
c001478b:	31 c0                	xor    eax,eax
c001478d:	31 d2                	xor    edx,edx
c001478f:	83 c4 1c             	add    esp,0x1c
c0014792:	5b                   	pop    ebx
c0014793:	5e                   	pop    esi
c0014794:	5f                   	pop    edi
c0014795:	5d                   	pop    ebp
c0014796:	c3                   	ret    
c0014797:	90                   	nop

c0014798 <SysKill(regs*)>:
c0014798:	53                   	push   ebx
c0014799:	83 ec 08             	sub    esp,0x8
c001479c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147a0:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00147a4:	75 16                	jne    c00147bc <SysKill(regs*)+0x24>
c00147a6:	83 ec 0c             	sub    esp,0xc
c00147a9:	68 f3 4a 02 c0       	push   0xc0024af3
c00147ae:	e8 41 b5 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00147b3:	83 c4 10             	add    esp,0x10
c00147b6:	e9 89 00 00 00       	jmp    c0014844 <SysKill(regs*)+0xac>
c00147bb:	90                   	nop
c00147bc:	83 ec 0c             	sub    esp,0xc
c00147bf:	68 8c ca 02 c0       	push   0xc002ca8c
c00147c4:	e8 df d5 00 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00147c9:	8d 76 00             	lea    esi,[esi+0x0]
c00147cc:	83 c4 10             	add    esp,0x10
c00147cf:	85 c0                	test   eax,eax
c00147d1:	74 19                	je     c00147ec <SysKill(regs*)+0x54>
c00147d3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00147d6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00147d9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00147db:	74 33                	je     c0014810 <SysKill(regs*)+0x78>
c00147dd:	52                   	push   edx
c00147de:	52                   	push   edx
c00147df:	50                   	push   eax
c00147e0:	68 8c ca 02 c0       	push   0xc002ca8c
c00147e5:	e8 ca da 00 00       	call   c00222b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00147ea:	eb e0                	jmp    c00147cc <SysKill(regs*)+0x34>
c00147ec:	83 ec 0c             	sub    esp,0xc
c00147ef:	68 80 ca 02 c0       	push   0xc002ca80
c00147f4:	e8 af d5 00 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00147f9:	8d 76 00             	lea    esi,[esi+0x0]
c00147fc:	83 c4 10             	add    esp,0x10
c00147ff:	85 c0                	test   eax,eax
c0014801:	74 41                	je     c0014844 <SysKill(regs*)+0xac>
c0014803:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014806:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014809:	39 0a                	cmp    DWORD PTR [edx],ecx
c001480b:	75 27                	jne    c0014834 <SysKill(regs*)+0x9c>
c001480d:	8d 76 00             	lea    esi,[esi+0x0]
c0014810:	51                   	push   ecx
c0014811:	51                   	push   ecx
c0014812:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014815:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001481a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001481d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014823:	e8 83 c7 ff ff       	call   c0010fab <KeRaiseSignal(SigHandlerBlock*, int)>
c0014828:	83 c4 10             	add    esp,0x10
c001482b:	31 c0                	xor    eax,eax
c001482d:	31 d2                	xor    edx,edx
c001482f:	eb 1b                	jmp    c001484c <SysKill(regs*)+0xb4>
c0014831:	8d 76 00             	lea    esi,[esi+0x0]
c0014834:	52                   	push   edx
c0014835:	52                   	push   edx
c0014836:	50                   	push   eax
c0014837:	68 80 ca 02 c0       	push   0xc002ca80
c001483c:	e8 73 da 00 00       	call   c00222b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014841:	eb b9                	jmp    c00147fc <SysKill(regs*)+0x64>
c0014843:	90                   	nop
c0014844:	83 c8 ff             	or     eax,0xffffffff
c0014847:	89 c2                	mov    edx,eax
c0014849:	8d 76 00             	lea    esi,[esi+0x0]
c001484c:	83 c4 08             	add    esp,0x8
c001484f:	5b                   	pop    ebx
c0014850:	c3                   	ret    

c0014851 <SysLoadDLL(regs*)>:
c0014851:	56                   	push   esi
c0014852:	53                   	push   ebx
c0014853:	31 d2                	xor    edx,edx
c0014855:	51                   	push   ecx
c0014856:	b8 01 00 00 00       	mov    eax,0x1
c001485b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001485f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014863:	0f 84 8c 00 00 00    	je     c00148f5 <SysLoadDLL(regs*)+0xa4>
c0014869:	83 ec 0c             	sub    esp,0xc
c001486c:	68 14 01 00 00       	push   0x114
c0014871:	e8 21 b0 ff ff       	call   c000f897 <malloc>
c0014876:	83 c4 0c             	add    esp,0xc
c0014879:	89 c3                	mov    ebx,eax
c001487b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014880:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014883:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014886:	53                   	push   ebx
c0014887:	e8 fe 38 ff ff       	call   c000818a <File::File(char const*, Process*)>
c001488c:	83 c4 10             	add    esp,0x10
c001488f:	31 d2                	xor    edx,edx
c0014891:	b8 02 00 00 00       	mov    eax,0x2
c0014896:	85 db                	test   ebx,ebx
c0014898:	74 5b                	je     c00148f5 <SysLoadDLL(regs*)+0xa4>
c001489a:	83 ec 0c             	sub    esp,0xc
c001489d:	53                   	push   ebx
c001489e:	e8 c9 3b ff ff       	call   c000846c <File::exists()>
c00148a3:	83 c4 10             	add    esp,0x10
c00148a6:	84 c0                	test   al,al
c00148a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148aa:	75 11                	jne    c00148bd <SysLoadDLL(regs*)+0x6c>
c00148ac:	83 ec 0c             	sub    esp,0xc
c00148af:	53                   	push   ebx
c00148b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00148b3:	83 c4 10             	add    esp,0x10
c00148b6:	b8 03 00 00 00       	mov    eax,0x3
c00148bb:	eb 36                	jmp    c00148f3 <SysLoadDLL(regs*)+0xa2>
c00148bd:	83 ec 0c             	sub    esp,0xc
c00148c0:	53                   	push   ebx
c00148c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00148c4:	58                   	pop    eax
c00148c5:	5a                   	pop    edx
c00148c6:	6a 00                	push   0x0
c00148c8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00148cb:	e8 9a 19 00 00       	call   c001626a <Thr::loadDLL(char const*, bool)>
c00148d0:	83 c4 10             	add    esp,0x10
c00148d3:	89 c1                	mov    ecx,eax
c00148d5:	31 d2                	xor    edx,edx
c00148d7:	b8 04 00 00 00       	mov    eax,0x4
c00148dc:	85 c9                	test   ecx,ecx
c00148de:	74 15                	je     c00148f5 <SysLoadDLL(regs*)+0xa4>
c00148e0:	53                   	push   ebx
c00148e1:	53                   	push   ebx
c00148e2:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c00148e8:	51                   	push   ecx
c00148e9:	e8 ce 1b 00 00       	call   c00164bc <Thr::executeDLL(unsigned long, void*)>
c00148ee:	83 c4 10             	add    esp,0x10
c00148f1:	31 c0                	xor    eax,eax
c00148f3:	31 d2                	xor    edx,edx
c00148f5:	59                   	pop    ecx
c00148f6:	5b                   	pop    ebx
c00148f7:	5e                   	pop    esi
c00148f8:	c3                   	ret    

c00148f9 <SysPause(regs*)>:
c00148f9:	83 ec 18             	sub    esp,0x18
c00148fc:	6a 08                	push   0x8
c00148fe:	e8 cd 25 00 00       	call   c0016ed0 <blockTask(TaskState)>
c0014903:	31 c0                	xor    eax,eax
c0014905:	31 d2                	xor    edx,edx
c0014907:	83 c4 1c             	add    esp,0x1c
c001490a:	c3                   	ret    

c001490b <SysPthreadCreate(regs*)>:
c001490b:	83 ec 18             	sub    esp,0x18
c001490e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014913:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014916:	e8 8d 23 00 00       	call   c0016ca8 <Process::createUserThread()>
c001491b:	31 c0                	xor    eax,eax
c001491d:	31 d2                	xor    edx,edx
c001491f:	83 c4 1c             	add    esp,0x1c
c0014922:	c3                   	ret    

c0014923 <SysPthreadGetTID(regs*)>:
c0014923:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014928:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001492b:	99                   	cdq    
c001492c:	c3                   	ret    

c001492d <SysInternalPthreadGetContext(regs*)>:
c001492d:	31 c0                	xor    eax,eax
c001492f:	31 d2                	xor    edx,edx
c0014931:	c3                   	ret    

c0014932 <SysInternalPthreadGetStartLocation(regs*)>:
c0014932:	31 c0                	xor    eax,eax
c0014934:	31 d2                	xor    edx,edx
c0014936:	c3                   	ret    

c0014937 <SysPthreadJoin(regs*)>:
c0014937:	31 c0                	xor    eax,eax
c0014939:	31 d2                	xor    edx,edx
c001493b:	c3                   	ret    

c001493c <SysPthreadExit(regs*)>:
c001493c:	83 ec 18             	sub    esp,0x18
c001493f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014943:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014946:	e8 c5 2c 00 00       	call   c0017610 <KeTerminateCurrentThread(int)>
c001494b:	83 c8 ff             	or     eax,0xffffffff
c001494e:	83 c4 1c             	add    esp,0x1c
c0014951:	89 c2                	mov    edx,eax
c0014953:	c3                   	ret    

c0014954 <SysRead(regs*)>:
c0014954:	57                   	push   edi
c0014955:	56                   	push   esi
c0014956:	53                   	push   ebx
c0014957:	83 ec 10             	sub    esp,0x10
c001495a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001495e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014961:	83 f8 02             	cmp    eax,0x2
c0014964:	77 10                	ja     c0014976 <SysRead(regs*)+0x22>
c0014966:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001496b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001496e:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014974:	eb 0e                	jmp    c0014984 <SysRead(regs*)+0x30>
c0014976:	83 ec 0c             	sub    esp,0xc
c0014979:	50                   	push   eax
c001497a:	e8 4a e8 ff ff       	call   c00131c9 <KeGetFileFromDescriptor(int)>
c001497f:	83 c4 10             	add    esp,0x10
c0014982:	89 c1                	mov    ecx,eax
c0014984:	83 c8 ff             	or     eax,0xffffffff
c0014987:	85 c9                	test   ecx,ecx
c0014989:	89 c2                	mov    edx,eax
c001498b:	74 28                	je     c00149b5 <SysRead(regs*)+0x61>
c001498d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014995:	31 ff                	xor    edi,edi
c0014997:	83 ec 0c             	sub    esp,0xc
c001499a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001499c:	8d 54 24 18          	lea    edx,[esp+0x18]
c00149a0:	52                   	push   edx
c00149a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149a4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00149a7:	57                   	push   edi
c00149a8:	56                   	push   esi
c00149a9:	51                   	push   ecx
c00149aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00149b1:	83 c4 20             	add    esp,0x20
c00149b4:	99                   	cdq    
c00149b5:	83 c4 10             	add    esp,0x10
c00149b8:	5b                   	pop    ebx
c00149b9:	5e                   	pop    esi
c00149ba:	5f                   	pop    edi
c00149bb:	c3                   	ret    

c00149bc <SysRegisterSignal(regs*)>:
c00149bc:	83 ec 18             	sub    esp,0x18
c00149bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149c3:	6a 00                	push   0x0
c00149c5:	6a 00                	push   0x0
c00149c7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00149ca:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149d5:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00149db:	e8 95 c5 ff ff       	call   c0010f75 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00149e0:	83 c4 2c             	add    esp,0x2c
c00149e3:	99                   	cdq    
c00149e4:	c3                   	ret    

c00149e5 <SysRegistryGetTypeFromPath(regs*)>:
c00149e5:	53                   	push   ebx
c00149e6:	81 ec 40 01 00 00    	sub    esp,0x140
c00149ec:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00149f3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149f6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00149f9:	e8 06 96 ff ff       	call   c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00149fe:	83 c4 10             	add    esp,0x10
c0014a01:	89 c1                	mov    ecx,eax
c0014a03:	85 c0                	test   eax,eax
c0014a05:	74 15                	je     c0014a1c <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014a07:	50                   	push   eax
c0014a08:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014a0c:	50                   	push   eax
c0014a0d:	51                   	push   ecx
c0014a0e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014a11:	e8 d2 91 ff ff       	call   c000dbe8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014a16:	83 c4 10             	add    esp,0x10
c0014a19:	99                   	cdq    
c0014a1a:	eb 05                	jmp    c0014a21 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014a1c:	83 c8 ff             	or     eax,0xffffffff
c0014a1f:	89 c2                	mov    edx,eax
c0014a21:	81 c4 38 01 00 00    	add    esp,0x138
c0014a27:	5b                   	pop    ebx
c0014a28:	c3                   	ret    

c0014a29 <SysRegistryReadExtent(regs*)>:
c0014a29:	83 ec 1c             	sub    esp,0x1c
c0014a2c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a30:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014a33:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014a36:	85 c0                	test   eax,eax
c0014a38:	79 1f                	jns    c0014a59 <SysRegistryReadExtent(regs*)+0x30>
c0014a3a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014a3f:	52                   	push   edx
c0014a40:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014a44:	52                   	push   edx
c0014a45:	50                   	push   eax
c0014a46:	51                   	push   ecx
c0014a47:	e8 8e 90 ff ff       	call   c000dada <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014a4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014a54:	83 c4 10             	add    esp,0x10
c0014a57:	eb 14                	jmp    c0014a6d <SysRegistryReadExtent(regs*)+0x44>
c0014a59:	83 ec 04             	sub    esp,0x4
c0014a5c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014a5f:	50                   	push   eax
c0014a60:	51                   	push   ecx
c0014a61:	e8 0e 8b ff ff       	call   c000d574 <CmGetString(Reghive_Tag*, int, char*)>
c0014a66:	83 c4 10             	add    esp,0x10
c0014a69:	31 c0                	xor    eax,eax
c0014a6b:	31 d2                	xor    edx,edx
c0014a6d:	83 c4 1c             	add    esp,0x1c
c0014a70:	c3                   	ret    

c0014a71 <SysRegistryPathToExtentLookup(regs*)>:
c0014a71:	83 ec 14             	sub    esp,0x14
c0014a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a78:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014a7b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a7e:	e8 81 95 ff ff       	call   c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014a83:	83 c4 1c             	add    esp,0x1c
c0014a86:	99                   	cdq    
c0014a87:	c3                   	ret    

c0014a88 <SysRegistryEnterDirectory(regs*)>:
c0014a88:	83 ec 14             	sub    esp,0x14
c0014a8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a8f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014a92:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a95:	e8 51 8b ff ff       	call   c000d5eb <CmEnterDirectory(Reghive_Tag*, int)>
c0014a9a:	83 c4 1c             	add    esp,0x1c
c0014a9d:	99                   	cdq    
c0014a9e:	c3                   	ret    

c0014a9f <SysRegistryGetNext(regs*)>:
c0014a9f:	83 ec 14             	sub    esp,0x14
c0014aa2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014aa6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014aa9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014aac:	e8 79 8b ff ff       	call   c000d62a <CmGetNext(Reghive_Tag*, int)>
c0014ab1:	83 c4 1c             	add    esp,0x1c
c0014ab4:	99                   	cdq    
c0014ab5:	c3                   	ret    

c0014ab6 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014ab6:	57                   	push   edi
c0014ab7:	56                   	push   esi
c0014ab8:	53                   	push   ebx
c0014ab9:	81 ec 34 01 00 00    	sub    esp,0x134
c0014abf:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014ac6:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014aca:	57                   	push   edi
c0014acb:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014ace:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014ad1:	e8 12 91 ff ff       	call   c000dbe8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014ad6:	89 c3                	mov    ebx,eax
c0014ad8:	58                   	pop    eax
c0014ad9:	5a                   	pop    edx
c0014ada:	57                   	push   edi
c0014adb:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014ade:	e8 5d bb fe ff       	call   c0000640 <strcpy>
c0014ae3:	89 d8                	mov    eax,ebx
c0014ae5:	81 c4 40 01 00 00    	add    esp,0x140
c0014aeb:	99                   	cdq    
c0014aec:	5b                   	pop    ebx
c0014aed:	5e                   	pop    esi
c0014aee:	5f                   	pop    edi
c0014aef:	c3                   	ret    

c0014af0 <SysRegistryOpen(regs*)>:
c0014af0:	83 ec 18             	sub    esp,0x18
c0014af3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014af7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014afa:	e8 05 89 ff ff       	call   c000d404 <CmOpen(char const*)>
c0014aff:	83 c4 1c             	add    esp,0x1c
c0014b02:	99                   	cdq    
c0014b03:	c3                   	ret    

c0014b04 <SysRegistryClose(regs*)>:
c0014b04:	83 ec 18             	sub    esp,0x18
c0014b07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b0b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b0e:	e8 0f 8a ff ff       	call   c000d522 <CmClose(Reghive_Tag*)>
c0014b13:	31 c0                	xor    eax,eax
c0014b15:	31 d2                	xor    edx,edx
c0014b17:	83 c4 1c             	add    esp,0x1c
c0014b1a:	c3                   	ret    

c0014b1b <SysRegistryEasyReadString(regs*)>:
c0014b1b:	57                   	push   edi
c0014b1c:	56                   	push   esi
c0014b1d:	53                   	push   ebx
c0014b1e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b22:	83 ec 0c             	sub    esp,0xc
c0014b25:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014b28:	e8 d7 88 ff ff       	call   c000d404 <CmOpen(char const*)>
c0014b2d:	5a                   	pop    edx
c0014b2e:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014b31:	59                   	pop    ecx
c0014b32:	89 c3                	mov    ebx,eax
c0014b34:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014b37:	50                   	push   eax
c0014b38:	e8 c7 94 ff ff       	call   c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014b3d:	83 c4 10             	add    esp,0x10
c0014b40:	89 c1                	mov    ecx,eax
c0014b42:	b8 01 00 00 00       	mov    eax,0x1
c0014b47:	85 c9                	test   ecx,ecx
c0014b49:	7e 16                	jle    c0014b61 <SysRegistryEasyReadString(regs*)+0x46>
c0014b4b:	50                   	push   eax
c0014b4c:	57                   	push   edi
c0014b4d:	51                   	push   ecx
c0014b4e:	53                   	push   ebx
c0014b4f:	e8 20 8a ff ff       	call   c000d574 <CmGetString(Reghive_Tag*, int, char*)>
c0014b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b57:	e8 c6 89 ff ff       	call   c000d522 <CmClose(Reghive_Tag*)>
c0014b5c:	83 c4 10             	add    esp,0x10
c0014b5f:	31 c0                	xor    eax,eax
c0014b61:	5b                   	pop    ebx
c0014b62:	31 d2                	xor    edx,edx
c0014b64:	5e                   	pop    esi
c0014b65:	5f                   	pop    edi
c0014b66:	c3                   	ret    

c0014b67 <SysRegistryEasyReadInteger(regs*)>:
c0014b67:	56                   	push   esi
c0014b68:	53                   	push   ebx
c0014b69:	83 ec 10             	sub    esp,0x10
c0014b6c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014b70:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014b73:	e8 8c 88 ff ff       	call   c000d404 <CmOpen(char const*)>
c0014b78:	5a                   	pop    edx
c0014b79:	89 c3                	mov    ebx,eax
c0014b7b:	59                   	pop    ecx
c0014b7c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014b7f:	50                   	push   eax
c0014b80:	e8 7f 94 ff ff       	call   c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014b85:	83 c4 10             	add    esp,0x10
c0014b88:	89 c1                	mov    ecx,eax
c0014b8a:	b8 01 00 00 00       	mov    eax,0x1
c0014b8f:	85 c9                	test   ecx,ecx
c0014b91:	7e 18                	jle    c0014bab <SysRegistryEasyReadInteger(regs*)+0x44>
c0014b93:	50                   	push   eax
c0014b94:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014b97:	51                   	push   ecx
c0014b98:	53                   	push   ebx
c0014b99:	e8 3c 8f ff ff       	call   c000dada <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014b9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ba1:	e8 7c 89 ff ff       	call   c000d522 <CmClose(Reghive_Tag*)>
c0014ba6:	83 c4 10             	add    esp,0x10
c0014ba9:	31 c0                	xor    eax,eax
c0014bab:	59                   	pop    ecx
c0014bac:	31 d2                	xor    edx,edx
c0014bae:	5b                   	pop    ebx
c0014baf:	5e                   	pop    esi
c0014bb0:	c3                   	ret    

c0014bb1 <SysSbrk(regs*)>:
c0014bb1:	56                   	push   esi
c0014bb2:	53                   	push   ebx
c0014bb3:	50                   	push   eax
c0014bb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014bbd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014bc0:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014bc3:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014bc9:	85 db                	test   ebx,ebx
c0014bcb:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014bce:	74 02                	je     c0014bd2 <SysSbrk(regs*)+0x21>
c0014bd0:	79 06                	jns    c0014bd8 <SysSbrk(regs*)+0x27>
c0014bd2:	89 f0                	mov    eax,esi
c0014bd4:	31 d2                	xor    edx,edx
c0014bd6:	eb 2a                	jmp    c0014c02 <SysSbrk(regs*)+0x51>
c0014bd8:	83 c8 ff             	or     eax,0xffffffff
c0014bdb:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014be1:	89 c2                	mov    edx,eax
c0014be3:	77 1d                	ja     c0014c02 <SysSbrk(regs*)+0x51>
c0014be5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014beb:	50                   	push   eax
c0014bec:	c1 ea 0c             	shr    edx,0xc
c0014bef:	68 07 0c 00 00       	push   0xc07
c0014bf4:	52                   	push   edx
c0014bf5:	51                   	push   ecx
c0014bf6:	e8 13 ef ff ff       	call   c0013b0e <VAS::allocatePages(int, int)>
c0014bfb:	89 f0                	mov    eax,esi
c0014bfd:	31 d2                	xor    edx,edx
c0014bff:	83 c4 10             	add    esp,0x10
c0014c02:	59                   	pop    ecx
c0014c03:	5b                   	pop    ebx
c0014c04:	5e                   	pop    esi
c0014c05:	c3                   	ret    

c0014c06 <SysSetCwd(regs*)>:
c0014c06:	83 ec 14             	sub    esp,0x14
c0014c09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c0d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c15:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014c18:	e8 ee 38 ff ff       	call   c000850b <Fs::setcwd(Process*, char*)>
c0014c1d:	83 c4 1c             	add    esp,0x1c
c0014c20:	99                   	cdq    
c0014c21:	c3                   	ret    

c0014c22 <SysSetTime(regs*)>:
c0014c22:	55                   	push   ebp
c0014c23:	31 d2                	xor    edx,edx
c0014c25:	57                   	push   edi
c0014c26:	56                   	push   esi
c0014c27:	be 18 00 00 00       	mov    esi,0x18
c0014c2c:	53                   	push   ebx
c0014c2d:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014c32:	83 ec 20             	sub    esp,0x20
c0014c35:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014c39:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014c3c:	f7 f3                	div    ebx
c0014c3e:	89 d7                	mov    edi,edx
c0014c40:	31 d2                	xor    edx,edx
c0014c42:	f7 f3                	div    ebx
c0014c44:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014c47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014c4b:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014c50:	31 d2                	xor    edx,edx
c0014c52:	f7 f3                	div    ebx
c0014c54:	31 d2                	xor    edx,edx
c0014c56:	f7 f6                	div    esi
c0014c58:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014c5b:	89 d5                	mov    ebp,edx
c0014c5d:	89 c3                	mov    ebx,eax
c0014c5f:	be 0c 00 00 00       	mov    esi,0xc
c0014c64:	83 e3 1f             	and    ebx,0x1f
c0014c67:	c1 e8 05             	shr    eax,0x5
c0014c6a:	43                   	inc    ebx
c0014c6b:	31 d2                	xor    edx,edx
c0014c6d:	f7 f6                	div    esi
c0014c6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014c73:	57                   	push   edi
c0014c74:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014c78:	55                   	push   ebp
c0014c79:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0014c7d:	56                   	push   esi
c0014c7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c82:	53                   	push   ebx
c0014c83:	68 14 4b 02 c0       	push   0xc0024b14
c0014c88:	e8 ef 22 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014c8d:	83 c4 1c             	add    esp,0x1c
c0014c90:	57                   	push   edi
c0014c91:	c1 e7 10             	shl    edi,0x10
c0014c94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014c98:	55                   	push   ebp
c0014c99:	56                   	push   esi
c0014c9a:	c1 e6 10             	shl    esi,0x10
c0014c9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ca1:	53                   	push   ebx
c0014ca2:	68 36 4b 02 c0       	push   0xc0024b36
c0014ca7:	e8 d0 22 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014cac:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0014cb1:	31 d2                	xor    edx,edx
c0014cb3:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
c0014cb9:	31 c0                	xor    eax,eax
c0014cbb:	88 d8                	mov    al,bl
c0014cbd:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c0014cc1:	0f b7 d8             	movzx  ebx,ax
c0014cc4:	09 f3                	or     ebx,esi
c0014cc6:	89 d8                	mov    eax,ebx
c0014cc8:	89 eb                	mov    ebx,ebp
c0014cca:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0014cce:	88 da                	mov    dl,bl
c0014cd0:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c0014cd4:	83 c4 1c             	add    esp,0x1c
c0014cd7:	89 d6                	mov    esi,edx
c0014cd9:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0014cdf:	09 fe                	or     esi,edi
c0014ce1:	56                   	push   esi
c0014ce2:	50                   	push   eax
c0014ce3:	51                   	push   ecx
c0014ce4:	e8 93 48 ff ff       	call   c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014ce9:	83 c4 2c             	add    esp,0x2c
c0014cec:	83 f0 01             	xor    eax,0x1
c0014cef:	5b                   	pop    ebx
c0014cf0:	0f b6 c0             	movzx  eax,al
c0014cf3:	5e                   	pop    esi
c0014cf4:	31 d2                	xor    edx,edx
c0014cf6:	5f                   	pop    edi
c0014cf7:	5d                   	pop    ebp
c0014cf8:	c3                   	ret    

c0014cf9 <SysSymlink(regs*)>:
c0014cf9:	56                   	push   esi
c0014cfa:	83 c8 ff             	or     eax,0xffffffff
c0014cfd:	53                   	push   ebx
c0014cfe:	89 c2                	mov    edx,eax
c0014d00:	81 ec 34 02 00 00    	sub    esp,0x234
c0014d06:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014d0d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014d11:	74 50                	je     c0014d63 <SysSymlink(regs*)+0x6a>
c0014d13:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014d16:	85 c9                	test   ecx,ecx
c0014d18:	74 49                	je     c0014d63 <SysSymlink(regs*)+0x6a>
c0014d1a:	6a 01                	push   0x1
c0014d1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d21:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d24:	05 0c 01 00 00       	add    eax,0x10c
c0014d29:	50                   	push   eax
c0014d2a:	51                   	push   ecx
c0014d2b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014d2f:	56                   	push   esi
c0014d30:	e8 3d 31 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014d35:	6a 01                	push   0x1
c0014d37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d3f:	05 0c 01 00 00       	add    eax,0x10c
c0014d44:	50                   	push   eax
c0014d45:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d48:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014d4f:	53                   	push   ebx
c0014d50:	e8 1d 31 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014d55:	83 c4 18             	add    esp,0x18
c0014d58:	56                   	push   esi
c0014d59:	53                   	push   ebx
c0014d5a:	e8 41 2d ff ff       	call   c0007aa0 <KeCreateSymlink(char const*, char const*)>
c0014d5f:	83 c4 10             	add    esp,0x10
c0014d62:	99                   	cdq    
c0014d63:	81 c4 34 02 00 00    	add    esp,0x234
c0014d69:	5b                   	pop    ebx
c0014d6a:	5e                   	pop    esi
c0014d6b:	c3                   	ret    

c0014d6c <SysTimezone(regs*)>:
c0014d6c:	83 ec 0c             	sub    esp,0xc
c0014d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d73:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014d77:	75 17                	jne    c0014d90 <SysTimezone(regs*)+0x24>
c0014d79:	83 ec 0c             	sub    esp,0xc
c0014d7c:	68 58 4b 02 c0       	push   0xc0024b58
c0014d81:	e8 f6 21 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014d86:	83 c8 ff             	or     eax,0xffffffff
c0014d89:	83 c4 10             	add    esp,0x10
c0014d8c:	89 c2                	mov    edx,eax
c0014d8e:	eb 16                	jmp    c0014da6 <SysTimezone(regs*)+0x3a>
c0014d90:	83 ec 0c             	sub    esp,0xc
c0014d93:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d96:	e8 6e 42 ff ff       	call   c0009009 <KeSetTimezone(int)>
c0014d9b:	31 d2                	xor    edx,edx
c0014d9d:	83 f0 01             	xor    eax,0x1
c0014da0:	83 c4 10             	add    esp,0x10
c0014da3:	0f b6 c0             	movzx  eax,al
c0014da6:	83 c4 0c             	add    esp,0xc
c0014da9:	c3                   	ret    

c0014daa <SysTruncate(regs*)>:
c0014daa:	55                   	push   ebp
c0014dab:	57                   	push   edi
c0014dac:	31 ff                	xor    edi,edi
c0014dae:	56                   	push   esi
c0014daf:	53                   	push   ebx
c0014db0:	83 ec 0c             	sub    esp,0xc
c0014db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014db7:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014dba:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014dbd:	89 ce                	mov    esi,ecx
c0014dbf:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014dc3:	0f 84 9a 00 00 00    	je     c0014e63 <SysTruncate(regs*)+0xb9>
c0014dc9:	83 ec 0c             	sub    esp,0xc
c0014dcc:	68 14 01 00 00       	push   0x114
c0014dd1:	e8 c1 aa ff ff       	call   c000f897 <malloc>
c0014dd6:	83 c4 0c             	add    esp,0xc
c0014dd9:	89 c3                	mov    ebx,eax
c0014ddb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014de0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014de3:	55                   	push   ebp
c0014de4:	53                   	push   ebx
c0014de5:	e8 a0 33 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0014dea:	83 c4 10             	add    esp,0x10
c0014ded:	31 d2                	xor    edx,edx
c0014def:	b8 03 00 00 00       	mov    eax,0x3
c0014df4:	85 db                	test   ebx,ebx
c0014df6:	0f 84 a2 00 00 00    	je     c0014e9e <SysTruncate(regs*)+0xf4>
c0014dfc:	51                   	push   ecx
c0014dfd:	51                   	push   ecx
c0014dfe:	6a 02                	push   0x2
c0014e00:	53                   	push   ebx
c0014e01:	e8 a2 33 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0014e06:	83 c4 10             	add    esp,0x10
c0014e09:	85 c0                	test   eax,eax
c0014e0b:	74 13                	je     c0014e20 <SysTruncate(regs*)+0x76>
c0014e0d:	83 ec 0c             	sub    esp,0xc
c0014e10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e12:	53                   	push   ebx
c0014e13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e16:	83 c4 10             	add    esp,0x10
c0014e19:	b8 04 00 00 00       	mov    eax,0x4
c0014e1e:	eb 7c                	jmp    c0014e9c <SysTruncate(regs*)+0xf2>
c0014e20:	52                   	push   edx
c0014e21:	57                   	push   edi
c0014e22:	56                   	push   esi
c0014e23:	53                   	push   ebx
c0014e24:	e8 93 34 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c0014e29:	83 c4 10             	add    esp,0x10
c0014e2c:	85 c0                	test   eax,eax
c0014e2e:	74 1b                	je     c0014e4b <SysTruncate(regs*)+0xa1>
c0014e30:	83 ec 0c             	sub    esp,0xc
c0014e33:	53                   	push   ebx
c0014e34:	e8 cd 33 ff ff       	call   c0008206 <File::close()>
c0014e39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e3e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e41:	83 c4 10             	add    esp,0x10
c0014e44:	b8 05 00 00 00       	mov    eax,0x5
c0014e49:	eb 51                	jmp    c0014e9c <SysTruncate(regs*)+0xf2>
c0014e4b:	83 ec 0c             	sub    esp,0xc
c0014e4e:	53                   	push   ebx
c0014e4f:	e8 b2 33 ff ff       	call   c0008206 <File::close()>
c0014e54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e5c:	83 c4 10             	add    esp,0x10
c0014e5f:	31 c0                	xor    eax,eax
c0014e61:	eb 39                	jmp    c0014e9c <SysTruncate(regs*)+0xf2>
c0014e63:	31 d2                	xor    edx,edx
c0014e65:	b8 01 00 00 00       	mov    eax,0x1
c0014e6a:	83 fd 02             	cmp    ebp,0x2
c0014e6d:	7e 2f                	jle    c0014e9e <SysTruncate(regs*)+0xf4>
c0014e6f:	83 ec 0c             	sub    esp,0xc
c0014e72:	51                   	push   ecx
c0014e73:	e8 51 e3 ff ff       	call   c00131c9 <KeGetFileFromDescriptor(int)>
c0014e78:	83 c4 10             	add    esp,0x10
c0014e7b:	89 c1                	mov    ecx,eax
c0014e7d:	31 d2                	xor    edx,edx
c0014e7f:	b8 02 00 00 00       	mov    eax,0x2
c0014e84:	85 c9                	test   ecx,ecx
c0014e86:	74 16                	je     c0014e9e <SysTruncate(regs*)+0xf4>
c0014e88:	50                   	push   eax
c0014e89:	57                   	push   edi
c0014e8a:	56                   	push   esi
c0014e8b:	51                   	push   ecx
c0014e8c:	e8 2b 34 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c0014e91:	83 c4 10             	add    esp,0x10
c0014e94:	85 c0                	test   eax,eax
c0014e96:	0f 95 c0             	setne  al
c0014e99:	0f b6 c0             	movzx  eax,al
c0014e9c:	31 d2                	xor    edx,edx
c0014e9e:	83 c4 0c             	add    esp,0xc
c0014ea1:	5b                   	pop    ebx
c0014ea2:	5e                   	pop    esi
c0014ea3:	5f                   	pop    edi
c0014ea4:	5d                   	pop    ebp
c0014ea5:	c3                   	ret    

c0014ea6 <SysWrite(regs*)>:
c0014ea6:	57                   	push   edi
c0014ea7:	56                   	push   esi
c0014ea8:	53                   	push   ebx
c0014ea9:	83 ec 10             	sub    esp,0x10
c0014eac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014eb0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014eb3:	83 f8 02             	cmp    eax,0x2
c0014eb6:	77 10                	ja     c0014ec8 <SysWrite(regs*)+0x22>
c0014eb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ebd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ec0:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014ec6:	eb 0e                	jmp    c0014ed6 <SysWrite(regs*)+0x30>
c0014ec8:	83 ec 0c             	sub    esp,0xc
c0014ecb:	50                   	push   eax
c0014ecc:	e8 f8 e2 ff ff       	call   c00131c9 <KeGetFileFromDescriptor(int)>
c0014ed1:	83 c4 10             	add    esp,0x10
c0014ed4:	89 c1                	mov    ecx,eax
c0014ed6:	83 c8 ff             	or     eax,0xffffffff
c0014ed9:	85 c9                	test   ecx,ecx
c0014edb:	89 c2                	mov    edx,eax
c0014edd:	74 28                	je     c0014f07 <SysWrite(regs*)+0x61>
c0014edf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ee7:	31 ff                	xor    edi,edi
c0014ee9:	83 ec 0c             	sub    esp,0xc
c0014eec:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014eee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014ef2:	52                   	push   edx
c0014ef3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ef6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014ef9:	57                   	push   edi
c0014efa:	56                   	push   esi
c0014efb:	51                   	push   ecx
c0014efc:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014f03:	83 c4 20             	add    esp,0x20
c0014f06:	99                   	cdq    
c0014f07:	83 c4 10             	add    esp,0x10
c0014f0a:	5b                   	pop    ebx
c0014f0b:	5e                   	pop    esi
c0014f0c:	5f                   	pop    edi
c0014f0d:	c3                   	ret    

c0014f0e <SysWsbe(regs*)>:
c0014f0e:	55                   	push   ebp
c0014f0f:	57                   	push   edi
c0014f10:	56                   	push   esi
c0014f11:	53                   	push   ebx
c0014f12:	83 ec 3c             	sub    esp,0x3c
c0014f15:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014f19:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014f20:	75 2d                	jne    c0014f4f <SysWsbe(regs*)+0x41>
c0014f22:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0014f29:	75 24                	jne    c0014f4f <SysWsbe(regs*)+0x41>
c0014f2b:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0014f32:	75 1b                	jne    c0014f4f <SysWsbe(regs*)+0x41>
c0014f34:	6a 01                	push   0x1
c0014f36:	6a 00                	push   0x0
c0014f38:	68 79 9f 00 c0       	push   0xc0009f79
c0014f3d:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0014f43:	e8 08 1c 00 00       	call   c0016b50 <Process::createThread(void (*)(void*), void*, int)>
c0014f48:	83 c4 10             	add    esp,0x10
c0014f4b:	31 c0                	xor    eax,eax
c0014f4d:	eb 52                	jmp    c0014fa1 <SysWsbe(regs*)+0x93>
c0014f4f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014f53:	be 6d 4b 02 c0       	mov    esi,0xc0024b6d
c0014f58:	b9 0b 00 00 00       	mov    ecx,0xb
c0014f5d:	fc                   	cld    
c0014f5e:	83 ec 0c             	sub    esp,0xc
c0014f61:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014f63:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014f67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f6f:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0014f75:	8b 06                	mov    eax,DWORD PTR [esi]
c0014f77:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0014f7a:	57                   	push   edi
c0014f7b:	e8 f0 b5 fe ff       	call   c0000570 <strlen>
c0014f80:	5a                   	pop    edx
c0014f81:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014f85:	52                   	push   edx
c0014f86:	31 d2                	xor    edx,edx
c0014f88:	57                   	push   edi
c0014f89:	52                   	push   edx
c0014f8a:	50                   	push   eax
c0014f8b:	56                   	push   esi
c0014f8c:	ff d5                	call   ebp
c0014f8e:	83 c4 14             	add    esp,0x14
c0014f91:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014f94:	e8 77 26 00 00       	call   c0017610 <KeTerminateCurrentThread(int)>
c0014f99:	83 c4 10             	add    esp,0x10
c0014f9c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014fa1:	83 c4 3c             	add    esp,0x3c
c0014fa4:	31 d2                	xor    edx,edx
c0014fa6:	5b                   	pop    ebx
c0014fa7:	5e                   	pop    esi
c0014fa8:	5f                   	pop    edi
c0014fa9:	5d                   	pop    ebp
c0014faa:	c3                   	ret    

c0014fab <SysYield(regs*)>:
c0014fab:	83 ec 0c             	sub    esp,0xc
c0014fae:	fa                   	cli    
c0014faf:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c0014fb5:	e8 56 1e 00 00       	call   c0016e10 <schedule()>
c0014fba:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c0014fc1:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c0014fc8:	75 01                	jne    c0014fcb <SysYield(regs*)+0x20>
c0014fca:	fb                   	sti    
c0014fcb:	31 c0                	xor    eax,eax
c0014fcd:	31 d2                	xor    edx,edx
c0014fcf:	83 c4 0c             	add    esp,0xc
c0014fd2:	c3                   	ret    
c0014fd3:	90                   	nop

c0014fd4 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0014fd4:	55                   	push   ebp
c0014fd5:	57                   	push   edi
c0014fd6:	56                   	push   esi
c0014fd7:	53                   	push   ebx
c0014fd8:	83 ec 2c             	sub    esp,0x2c
c0014fdb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014fdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fe3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014fe7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014feb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014fef:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0014ff2:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c0014ff6:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014ffa:	c1 e0 08             	shl    eax,0x8
c0014ffd:	09 c1                	or     ecx,eax
c0014fff:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015003:	c1 e0 10             	shl    eax,0x10
c0015006:	09 c1                	or     ecx,eax
c0015008:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c001500c:	83 e0 7f             	and    eax,0x7f
c001500f:	c1 e0 18             	shl    eax,0x18
c0015012:	09 c8                	or     eax,ecx
c0015014:	89 c5                	mov    ebp,eax
c0015016:	89 f8                	mov    eax,edi
c0015018:	80 f4 00             	xor    ah,0x0
c001501b:	89 c3                	mov    ebx,eax
c001501d:	89 e8                	mov    eax,ebp
c001501f:	80 f4 00             	xor    ah,0x0
c0015022:	89 c6                	mov    esi,eax
c0015024:	89 f0                	mov    eax,esi
c0015026:	09 d8                	or     eax,ebx
c0015028:	74 42                	je     c001506c <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c001502a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001502e:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0015031:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015035:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015039:	c1 e0 08             	shl    eax,0x8
c001503c:	09 c6                	or     esi,eax
c001503e:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015042:	c1 e0 10             	shl    eax,0x10
c0015045:	09 c6                	or     esi,eax
c0015047:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c001504b:	83 e0 7f             	and    eax,0x7f
c001504e:	c1 e0 18             	shl    eax,0x18
c0015051:	09 f0                	or     eax,esi
c0015053:	89 c3                	mov    ebx,eax
c0015055:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c001505a:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0015060:	29 c1                	sub    ecx,eax
c0015062:	19 d3                	sbb    ebx,edx
c0015064:	89 c8                	mov    eax,ecx
c0015066:	89 da                	mov    edx,ebx
c0015068:	eb 0e                	jmp    c0015078 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c001506a:	66 90                	xchg   ax,ax
c001506c:	b8 00 00 00 00       	mov    eax,0x0
c0015071:	ba 00 00 00 00       	mov    edx,0x0
c0015076:	66 90                	xchg   ax,ax
c0015078:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001507c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015084:	80 f4 00             	xor    ah,0x0
c0015087:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001508b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001508f:	80 f4 00             	xor    ah,0x0
c0015092:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015096:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001509a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001509e:	89 e8                	mov    eax,ebp
c00150a0:	09 f8                	or     eax,edi
c00150a2:	74 30                	je     c00150d4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c00150a4:	8b 0d 50 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bb50
c00150aa:	8b 1d 54 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb54
c00150b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00150b8:	01 c8                	add    eax,ecx
c00150ba:	11 da                	adc    edx,ebx
c00150bc:	89 c6                	mov    esi,eax
c00150be:	83 e6 ff             	and    esi,0xffffffff
c00150c1:	89 34 24             	mov    DWORD PTR [esp],esi
c00150c4:	89 d0                	mov    eax,edx
c00150c6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00150cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150cf:	eb 13                	jmp    c00150e4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c00150d1:	8d 76 00             	lea    esi,[esi+0x0]
c00150d4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00150db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00150e3:	90                   	nop
c00150e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00150e8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00150eb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00150ef:	89 cf                	mov    edi,ecx
c00150f1:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c00150f4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00150f7:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00150fb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0015100:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c0015103:	83 e1 00             	and    ecx,0x0
c0015106:	09 ca                	or     edx,ecx
c0015108:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c001510b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001510f:	c1 ea 08             	shr    edx,0x8
c0015112:	0f b6 d2             	movzx  edx,dl
c0015115:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c0015118:	83 e1 00             	and    ecx,0x0
c001511b:	09 ca                	or     edx,ecx
c001511d:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015120:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015124:	c1 ea 10             	shr    edx,0x10
c0015127:	0f b6 d2             	movzx  edx,dl
c001512a:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c001512d:	83 e1 00             	and    ecx,0x0
c0015130:	09 ca                	or     edx,ecx
c0015132:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015135:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015139:	c1 ea 18             	shr    edx,0x18
c001513c:	83 e2 7f             	and    edx,0x7f
c001513f:	89 d3                	mov    ebx,edx
c0015141:	83 e3 7f             	and    ebx,0x7f
c0015144:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015147:	83 e2 80             	and    edx,0xffffff80
c001514a:	88 d1                	mov    cl,dl
c001514c:	88 da                	mov    dl,bl
c001514e:	09 ca                	or     edx,ecx
c0015150:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015157:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001515b:	83 c4 2c             	add    esp,0x2c
c001515e:	5b                   	pop    ebx
c001515f:	5e                   	pop    esi
c0015160:	5f                   	pop    edi
c0015161:	5d                   	pop    ebp
c0015162:	c3                   	ret    
c0015163:	90                   	nop

c0015164 <KeCheckAlarm(ThreadControlBlock*)>:
c0015164:	55                   	push   ebp
c0015165:	57                   	push   edi
c0015166:	56                   	push   esi
c0015167:	53                   	push   ebx
c0015168:	83 ec 0c             	sub    esp,0xc
c001516b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001516f:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015172:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0015176:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c001517a:	c1 e5 08             	shl    ebp,0x8
c001517d:	09 fd                	or     ebp,edi
c001517f:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0015183:	c1 e7 10             	shl    edi,0x10
c0015186:	09 ef                	or     edi,ebp
c0015188:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c001518c:	83 e0 7f             	and    eax,0x7f
c001518f:	c1 e0 18             	shl    eax,0x18
c0015192:	09 f8                	or     eax,edi
c0015194:	89 c1                	mov    ecx,eax
c0015196:	89 d0                	mov    eax,edx
c0015198:	80 f4 00             	xor    ah,0x0
c001519b:	89 c3                	mov    ebx,eax
c001519d:	89 c8                	mov    eax,ecx
c001519f:	80 f4 00             	xor    ah,0x0
c00151a2:	89 c6                	mov    esi,eax
c00151a4:	89 f0                	mov    eax,esi
c00151a6:	09 d8                	or     eax,ebx
c00151a8:	0f 84 9e 00 00 00    	je     c001524c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00151ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00151b2:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c00151b5:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c00151b9:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c00151bd:	c1 e6 08             	shl    esi,0x8
c00151c0:	09 de                	or     esi,ebx
c00151c2:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c00151c6:	c1 e3 10             	shl    ebx,0x10
c00151c9:	09 f3                	or     ebx,esi
c00151cb:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c00151cf:	83 e1 7f             	and    ecx,0x7f
c00151d2:	c1 e1 18             	shl    ecx,0x18
c00151d5:	09 d9                	or     ecx,ebx
c00151d7:	89 ca                	mov    edx,ecx
c00151d9:	89 c1                	mov    ecx,eax
c00151db:	89 d3                	mov    ebx,edx
c00151dd:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c00151e2:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c00151e8:	39 c8                	cmp    eax,ecx
c00151ea:	89 d0                	mov    eax,edx
c00151ec:	19 d8                	sbb    eax,ebx
c00151ee:	72 5c                	jb     c001524c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00151f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151f4:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c00151fb:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c00151fe:	83 e2 00             	and    edx,0x0
c0015201:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015204:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015207:	83 e2 00             	and    edx,0x0
c001520a:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c001520d:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015210:	83 e2 00             	and    edx,0x0
c0015213:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015216:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015219:	83 e2 80             	and    edx,0xffffff80
c001521c:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001521f:	83 ec 0c             	sub    esp,0xc
c0015222:	68 99 4b 02 c0       	push   0xc0024b99
c0015227:	e8 50 1d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001522c:	83 c4 10             	add    esp,0x10
c001522f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015233:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015236:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c001523c:	83 ec 08             	sub    esp,0x8
c001523f:	6a 0e                	push   0xe
c0015241:	50                   	push   eax
c0015242:	e8 64 bd ff ff       	call   c0010fab <KeRaiseSignal(SigHandlerBlock*, int)>
c0015247:	83 c4 10             	add    esp,0x10
c001524a:	66 90                	xchg   ax,ax
c001524c:	90                   	nop
c001524d:	83 c4 0c             	add    esp,0xc
c0015250:	5b                   	pop    ebx
c0015251:	5e                   	pop    esi
c0015252:	5f                   	pop    edi
c0015253:	5d                   	pop    ebp
c0015254:	c3                   	ret    

c0015255 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015255:	55                   	push   ebp
c0015256:	57                   	push   edi
c0015257:	56                   	push   esi
c0015258:	53                   	push   ebx
c0015259:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001525f:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015267:	0f 95 c0             	setne  al
c001526a:	31 d2                	xor    edx,edx
c001526c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015274:	0f 94 c2             	sete   dl
c0015277:	85 c2                	test   edx,eax
c0015279:	74 34                	je     c00152af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001527b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015286:	74 27                	je     c00152af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015288:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001528f:	05 00 10 00 00       	add    eax,0x1000
c0015294:	89 c1                	mov    ecx,eax
c0015296:	25 00 f0 ff ff       	and    eax,0xfffff000
c001529b:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00152a1:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00152a8:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00152af:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00152b6:	83 ec 0c             	sub    esp,0xc
c00152b9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00152bf:	6a 01                	push   0x1
c00152c1:	e8 61 e0 ff ff       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c00152c6:	83 c4 10             	add    esp,0x10
c00152c9:	89 c3                	mov    ebx,eax
c00152cb:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00152d1:	0f 86 26 01 00 00    	jbe    c00153fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00152d7:	c1 ee 0c             	shr    esi,0xc
c00152da:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00152e1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00152e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00152ed:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00152f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00152f8:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00152ff:	29 ef                	sub    edi,ebp
c0015301:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0015305:	0f 83 f9 00 00 00    	jae    c0015404 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c001530b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015311:	76 05                	jbe    c0015318 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0015313:	bf 00 10 00 00       	mov    edi,0x1000
c0015318:	83 ec 0c             	sub    esp,0xc
c001531b:	31 d2                	xor    edx,edx
c001531d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015324:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015326:	8d 44 24 28          	lea    eax,[esp+0x28]
c001532a:	50                   	push   eax
c001532b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001532f:	56                   	push   esi
c0015330:	52                   	push   edx
c0015331:	57                   	push   edi
c0015332:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015339:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001533c:	83 c4 20             	add    esp,0x20
c001533f:	85 c0                	test   eax,eax
c0015341:	75 06                	jne    c0015349 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0015343:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015347:	74 13                	je     c001535c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015349:	83 ec 0c             	sub    esp,0xc
c001534c:	53                   	push   ebx
c001534d:	e8 dd e2 ff ff       	call   c001362f <Virt::freeKernelVirtualPages(unsigned long)>
c0015352:	83 c4 10             	add    esp,0x10
c0015355:	31 c0                	xor    eax,eax
c0015357:	e9 80 01 00 00       	jmp    c00154dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001535c:	fa                   	cli    
c001535d:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c0015363:	e8 80 ab ff ff       	call   c000fee8 <Phys::allocatePage()>
c0015368:	6a 07                	push   0x7
c001536a:	89 c7                	mov    edi,eax
c001536c:	53                   	push   ebx
c001536d:	50                   	push   eax
c001536e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015373:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015376:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001537c:	e8 89 e6 ff ff       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015381:	83 c4 0c             	add    esp,0xc
c0015384:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001538b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015391:	6a 00                	push   0x0
c0015393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015398:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001539b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00153a1:	e8 d0 e4 ff ff       	call   c0013876 <VAS::mapOtherVASIn(bool, VAS*)>
c00153a6:	58                   	pop    eax
c00153a7:	5a                   	pop    edx
c00153a8:	68 07 0c 00 00       	push   0xc07
c00153ad:	55                   	push   ebp
c00153ae:	57                   	push   edi
c00153af:	89 df                	mov    edi,ebx
c00153b1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00153b8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00153be:	6a 00                	push   0x0
c00153c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153c8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00153ce:	e8 79 e8 ff ff       	call   c0013c4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00153d3:	b9 00 10 00 00       	mov    ecx,0x1000
c00153d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00153da:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00153e1:	83 c4 20             	add    esp,0x20
c00153e4:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00153eb:	75 01                	jne    c00153ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c00153ed:	fb                   	sti    
c00153ee:	81 c5 00 10 00 00    	add    ebp,0x1000
c00153f4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00153f8:	e9 f0 fe ff ff       	jmp    c00152ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00153fd:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015404:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001540b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015411:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015417:	0f 86 b1 00 00 00    	jbe    c00154ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001541d:	fa                   	cli    
c001541e:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c0015424:	c1 ee 0c             	shr    esi,0xc
c0015427:	51                   	push   ecx
c0015428:	31 ff                	xor    edi,edi
c001542a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015431:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015437:	6a 00                	push   0x0
c0015439:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001543e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015441:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015447:	e8 2a e4 ff ff       	call   c0013876 <VAS::mapOtherVASIn(bool, VAS*)>
c001544c:	83 c4 10             	add    esp,0x10
c001544f:	e8 94 aa ff ff       	call   c000fee8 <Phys::allocatePage()>
c0015454:	47                   	inc    edi
c0015455:	6a 07                	push   0x7
c0015457:	53                   	push   ebx
c0015458:	50                   	push   eax
c0015459:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001545d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015463:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015466:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c001546c:	e8 99 e5 ff ff       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015471:	58                   	pop    eax
c0015472:	5a                   	pop    edx
c0015473:	68 07 0c 00 00       	push   0xc07
c0015478:	55                   	push   ebp
c0015479:	81 c5 00 10 00 00    	add    ebp,0x1000
c001547f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015483:	50                   	push   eax
c0015484:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001548b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015491:	6a 00                	push   0x0
c0015493:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015498:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001549b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00154a1:	e8 a6 e7 ff ff       	call   c0013c4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00154a6:	83 c4 1c             	add    esp,0x1c
c00154a9:	68 00 10 00 00       	push   0x1000
c00154ae:	6a 00                	push   0x0
c00154b0:	53                   	push   ebx
c00154b1:	e8 3a b0 fe ff       	call   c00004f0 <memset>
c00154b6:	83 c4 10             	add    esp,0x10
c00154b9:	39 fe                	cmp    esi,edi
c00154bb:	77 92                	ja     c001544f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c00154bd:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00154c4:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00154cb:	75 01                	jne    c00154ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00154cd:	fb                   	sti    
c00154ce:	83 ec 0c             	sub    esp,0xc
c00154d1:	53                   	push   ebx
c00154d2:	e8 58 e1 ff ff       	call   c001362f <Virt::freeKernelVirtualPages(unsigned long)>
c00154d7:	83 c4 10             	add    esp,0x10
c00154da:	b0 01                	mov    al,0x1
c00154dc:	81 c4 2c 10 00 00    	add    esp,0x102c
c00154e2:	5b                   	pop    ebx
c00154e3:	5e                   	pop    esi
c00154e4:	5f                   	pop    edi
c00154e5:	5d                   	pop    ebp
c00154e6:	c3                   	ret    

c00154e7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00154e7:	55                   	push   ebp
c00154e8:	57                   	push   edi
c00154e9:	56                   	push   esi
c00154ea:	53                   	push   ebx
c00154eb:	83 ec 68             	sub    esp,0x68
c00154ee:	68 14 01 00 00       	push   0x114
c00154f3:	e8 9f a3 ff ff       	call   c000f897 <malloc>
c00154f8:	83 c4 0c             	add    esp,0xc
c00154fb:	89 c6                	mov    esi,eax
c00154fd:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015501:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015505:	50                   	push   eax
c0015506:	e8 7f 2c ff ff       	call   c000818a <File::File(char const*, Process*)>
c001550b:	5b                   	pop    ebx
c001550c:	5f                   	pop    edi
c001550d:	6a 01                	push   0x1
c001550f:	56                   	push   esi
c0015510:	e8 93 2c ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015515:	83 c4 10             	add    esp,0x10
c0015518:	85 c0                	test   eax,eax
c001551a:	0f 85 c6 01 00 00    	jne    c00156e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015520:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015528:	83 ec 0c             	sub    esp,0xc
c001552b:	6a 34                	push   0x34
c001552d:	e8 65 a3 ff ff       	call   c000f897 <malloc>
c0015532:	59                   	pop    ecx
c0015533:	89 c3                	mov    ebx,eax
c0015535:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0015539:	8b 06                	mov    eax,DWORD PTR [esi]
c001553b:	57                   	push   edi
c001553c:	53                   	push   ebx
c001553d:	6a 00                	push   0x0
c001553f:	6a 34                	push   0x34
c0015541:	56                   	push   esi
c0015542:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015545:	83 c4 20             	add    esp,0x20
c0015548:	85 c0                	test   eax,eax
c001554a:	0f 85 96 01 00 00    	jne    c00156e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015550:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015556:	0f 85 8a 01 00 00    	jne    c00156e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001555c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001555f:	85 c0                	test   eax,eax
c0015561:	0f 84 7f 01 00 00    	je     c00156e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015567:	52                   	push   edx
c0015568:	31 d2                	xor    edx,edx
c001556a:	52                   	push   edx
c001556b:	50                   	push   eax
c001556c:	56                   	push   esi
c001556d:	e8 f4 2c ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015572:	83 c4 10             	add    esp,0x10
c0015575:	85 c0                	test   eax,eax
c0015577:	0f 85 69 01 00 00    	jne    c00156e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001557d:	83 ec 0c             	sub    esp,0xc
c0015580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015583:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001558b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001558f:	0f af c2             	imul   eax,edx
c0015592:	50                   	push   eax
c0015593:	e8 ff a2 ff ff       	call   c000f897 <malloc>
c0015598:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001559a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001559e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00155a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155a5:	31 ff                	xor    edi,edi
c00155a7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00155ab:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00155af:	0f af c2             	imul   eax,edx
c00155b2:	99                   	cdq    
c00155b3:	52                   	push   edx
c00155b4:	50                   	push   eax
c00155b5:	56                   	push   esi
c00155b6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00155b9:	83 c4 20             	add    esp,0x20
c00155bc:	0f b7 c7             	movzx  eax,di
c00155bf:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c00155c3:	73 71                	jae    c0015636 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00155c5:	6b c0 28             	imul   eax,eax,0x28
c00155c8:	55                   	push   ebp
c00155c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155cd:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c00155d1:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00155d4:	6b d2 28             	imul   edx,edx,0x28
c00155d7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00155db:	31 d2                	xor    edx,edx
c00155dd:	52                   	push   edx
c00155de:	50                   	push   eax
c00155df:	56                   	push   esi
c00155e0:	e8 81 2c ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00155e5:	83 c4 0c             	add    esp,0xc
c00155e8:	6a 20                	push   0x20
c00155ea:	6a 00                	push   0x0
c00155ec:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c00155f0:	55                   	push   ebp
c00155f1:	e8 fa ae fe ff       	call   c00004f0 <memset>
c00155f6:	58                   	pop    eax
c00155f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00155f9:	8d 54 24 38          	lea    edx,[esp+0x38]
c00155fd:	52                   	push   edx
c00155fe:	55                   	push   ebp
c00155ff:	6a 00                	push   0x0
c0015601:	6a 1f                	push   0x1f
c0015603:	56                   	push   esi
c0015604:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015607:	83 c4 18             	add    esp,0x18
c001560a:	55                   	push   ebp
c001560b:	68 aa 4b 02 c0       	push   0xc0024baa
c0015610:	e8 3b b1 fe ff       	call   c0000750 <strcmp>
c0015615:	83 c4 10             	add    esp,0x10
c0015618:	85 c0                	test   eax,eax
c001561a:	75 17                	jne    c0015633 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c001561c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015620:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015624:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c001562a:	83 c8 80             	or     eax,0xffffff80
c001562d:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c0015633:	47                   	inc    edi
c0015634:	eb 86                	jmp    c00155bc <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015636:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015639:	85 c0                	test   eax,eax
c001563b:	0f 84 a5 00 00 00    	je     c00156e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015641:	31 d2                	xor    edx,edx
c0015643:	57                   	push   edi
c0015644:	52                   	push   edx
c0015645:	50                   	push   eax
c0015646:	56                   	push   esi
c0015647:	e8 1a 2c ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001564c:	83 c4 10             	add    esp,0x10
c001564f:	85 c0                	test   eax,eax
c0015651:	0f 85 8f 00 00 00    	jne    c00156e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015657:	83 ec 0c             	sub    esp,0xc
c001565a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001565e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015662:	31 ed                	xor    ebp,ebp
c0015664:	0f af c2             	imul   eax,edx
c0015667:	50                   	push   eax
c0015668:	e8 2a a2 ff ff       	call   c000f897 <malloc>
c001566d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015671:	59                   	pop    ecx
c0015672:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015674:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015678:	50                   	push   eax
c0015679:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001567d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015681:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015685:	0f af c2             	imul   eax,edx
c0015688:	99                   	cdq    
c0015689:	52                   	push   edx
c001568a:	50                   	push   eax
c001568b:	56                   	push   esi
c001568c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001568f:	83 c4 20             	add    esp,0x20
c0015692:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001569a:	0f b7 fd             	movzx  edi,bp
c001569d:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00156a1:	0f 83 80 00 00 00    	jae    c0015727 <Thr::loadProgramIntoMemory(Process*, char const*)+0x240>
c00156a7:	c1 e7 05             	shl    edi,0x5
c00156aa:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c00156ae:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00156b1:	75 6e                	jne    c0015721 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c00156b3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00156b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00156ba:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00156bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00156c1:	52                   	push   edx
c00156c2:	31 d2                	xor    edx,edx
c00156c4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00156c7:	52                   	push   edx
c00156c8:	50                   	push   eax
c00156c9:	56                   	push   esi
c00156ca:	e8 97 2b ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00156cf:	83 c4 10             	add    esp,0x10
c00156d2:	85 c0                	test   eax,eax
c00156d4:	74 17                	je     c00156ed <Thr::loadProgramIntoMemory(Process*, char const*)+0x206>
c00156d6:	83 ec 0c             	sub    esp,0xc
c00156d9:	68 b9 4b 02 c0       	push   0xc0024bb9
c00156de:	e8 99 18 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00156e3:	83 c4 10             	add    esp,0x10
c00156e6:	31 c0                	xor    eax,eax
c00156e8:	e9 8a 00 00 00       	jmp    c0015777 <Thr::loadProgramIntoMemory(Process*, char const*)+0x290>
c00156ed:	83 ec 0c             	sub    esp,0xc
c00156f0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00156f3:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00156f6:	50                   	push   eax
c00156f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00156fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156ff:	56                   	push   esi
c0015700:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015707:	e8 49 fb ff ff       	call   c0015255 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001570c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015710:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015714:	83 c4 20             	add    esp,0x20
c0015717:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001571b:	73 04                	jae    c0015721 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c001571d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015721:	45                   	inc    ebp
c0015722:	e9 73 ff ff ff       	jmp    c001569a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015727:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001572b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001572f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015733:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0015739:	83 ec 0c             	sub    esp,0xc
c001573c:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015742:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015747:	05 00 10 00 00       	add    eax,0x1000
c001574c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001574f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015753:	e8 4f a1 ff ff       	call   c000f8a7 <free>
c0015758:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001575b:	e8 47 a1 ff ff       	call   c000f8a7 <free>
c0015760:	58                   	pop    eax
c0015761:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015765:	e8 3d a1 ff ff       	call   c000f8a7 <free>
c001576a:	89 34 24             	mov    DWORD PTR [esp],esi
c001576d:	e8 94 2a ff ff       	call   c0008206 <File::close()>
c0015772:	83 c4 10             	add    esp,0x10
c0015775:	b0 01                	mov    al,0x1
c0015777:	83 c4 5c             	add    esp,0x5c
c001577a:	5b                   	pop    ebx
c001577b:	5e                   	pop    esi
c001577c:	5f                   	pop    edi
c001577d:	5d                   	pop    ebp
c001577e:	c3                   	ret    

c001577f <Thr::runtimeReferenceHelper()>:
c001577f:	83 ec 18             	sub    esp,0x18
c0015782:	68 c1 4b 02 c0       	push   0xc0024bc1
c0015787:	e8 f0 17 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001578c:	fa                   	cli    
c001578d:	83 c4 10             	add    esp,0x10
c0015790:	eb fe                	jmp    c0015790 <Thr::runtimeReferenceHelper()+0x11>

c0015792 <Thr::getAddressOfKernelSymbol(char const*)>:
c0015792:	57                   	push   edi
c0015793:	56                   	push   esi
c0015794:	53                   	push   ebx
c0015795:	31 db                	xor    ebx,ebx
c0015797:	39 1d 40 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca40,ebx
c001579d:	7e 3c                	jle    c00157db <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001579f:	8b 34 9d c0 c9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3640]
c00157a6:	31 ff                	xor    edi,edi
c00157a8:	39 3c 9d c0 c8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3740],edi
c00157af:	7e 27                	jle    c00157d8 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00157b1:	50                   	push   eax
c00157b2:	50                   	push   eax
c00157b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00157b7:	8b 06                	mov    eax,DWORD PTR [esi]
c00157b9:	03 04 9d 40 c9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd36c0]
c00157c0:	50                   	push   eax
c00157c1:	e8 8a af fe ff       	call   c0000750 <strcmp>
c00157c6:	83 c4 10             	add    esp,0x10
c00157c9:	85 c0                	test   eax,eax
c00157cb:	75 05                	jne    c00157d2 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00157cd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00157d0:	eb 0b                	jmp    c00157dd <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00157d2:	83 c6 10             	add    esi,0x10
c00157d5:	47                   	inc    edi
c00157d6:	eb d0                	jmp    c00157a8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00157d8:	43                   	inc    ebx
c00157d9:	eb bc                	jmp    c0015797 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00157db:	31 c0                	xor    eax,eax
c00157dd:	5b                   	pop    ebx
c00157de:	5e                   	pop    esi
c00157df:	5f                   	pop    edi
c00157e0:	c3                   	ret    

c00157e1 <Thr::loadKernelSymbolTable(char const*)>:
c00157e1:	55                   	push   ebp
c00157e2:	57                   	push   edi
c00157e3:	56                   	push   esi
c00157e4:	53                   	push   ebx
c00157e5:	83 ec 68             	sub    esp,0x68
c00157e8:	8b 35 98 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca98
c00157ee:	68 14 01 00 00       	push   0x114
c00157f3:	e8 9f a0 ff ff       	call   c000f897 <malloc>
c00157f8:	83 c4 0c             	add    esp,0xc
c00157fb:	89 c3                	mov    ebx,eax
c00157fd:	56                   	push   esi
c00157fe:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015802:	50                   	push   eax
c0015803:	e8 82 29 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015808:	5e                   	pop    esi
c0015809:	5f                   	pop    edi
c001580a:	6a 01                	push   0x1
c001580c:	53                   	push   ebx
c001580d:	e8 96 29 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015812:	83 c4 10             	add    esp,0x10
c0015815:	85 c0                	test   eax,eax
c0015817:	74 0a                	je     c0015823 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015819:	83 ec 0c             	sub    esp,0xc
c001581c:	68 e3 4b 02 c0       	push   0xc0024be3
c0015821:	eb 34                	jmp    c0015857 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015823:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001582b:	83 ec 0c             	sub    esp,0xc
c001582e:	6a 34                	push   0x34
c0015830:	e8 62 a0 ff ff       	call   c000f897 <malloc>
c0015835:	59                   	pop    ecx
c0015836:	89 c7                	mov    edi,eax
c0015838:	8d 74 24 34          	lea    esi,[esp+0x34]
c001583c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001583e:	56                   	push   esi
c001583f:	57                   	push   edi
c0015840:	6a 00                	push   0x0
c0015842:	6a 34                	push   0x34
c0015844:	53                   	push   ebx
c0015845:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015848:	83 c4 20             	add    esp,0x20
c001584b:	85 c0                	test   eax,eax
c001584d:	74 17                	je     c0015866 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001584f:	83 ec 0c             	sub    esp,0xc
c0015852:	68 fa 4b 02 c0       	push   0xc0024bfa
c0015857:	e8 98 a4 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001585c:	83 c4 10             	add    esp,0x10
c001585f:	31 c0                	xor    eax,eax
c0015861:	e9 31 02 00 00       	jmp    c0015a97 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015866:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001586c:	75 e1                	jne    c001584f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001586e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015871:	85 c0                	test   eax,eax
c0015873:	74 da                	je     c001584f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015875:	52                   	push   edx
c0015876:	31 d2                	xor    edx,edx
c0015878:	52                   	push   edx
c0015879:	50                   	push   eax
c001587a:	53                   	push   ebx
c001587b:	e8 e6 29 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015880:	83 c4 10             	add    esp,0x10
c0015883:	85 c0                	test   eax,eax
c0015885:	75 c8                	jne    c001584f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015887:	83 ec 0c             	sub    esp,0xc
c001588a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001588e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015892:	31 ed                	xor    ebp,ebp
c0015894:	0f af c2             	imul   eax,edx
c0015897:	50                   	push   eax
c0015898:	e8 fa 9f ff ff       	call   c000f897 <malloc>
c001589d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001589f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00158a3:	89 34 24             	mov    DWORD PTR [esp],esi
c00158a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158aa:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00158ae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00158b2:	0f af c2             	imul   eax,edx
c00158b5:	99                   	cdq    
c00158b6:	52                   	push   edx
c00158b7:	50                   	push   eax
c00158b8:	53                   	push   ebx
c00158b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00158bc:	83 c4 20             	add    esp,0x20
c00158bf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00158c7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00158cf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00158d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00158df:	0f b7 f5             	movzx  esi,bp
c00158e2:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00158e6:	0f 83 a7 00 00 00    	jae    c0015993 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00158ec:	6b f6 28             	imul   esi,esi,0x28
c00158ef:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00158f3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00158f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00158fa:	50                   	push   eax
c00158fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00158ff:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015903:	8b 16                	mov    edx,DWORD PTR [esi]
c0015905:	6b c0 28             	imul   eax,eax,0x28
c0015908:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001590c:	89 d0                	mov    eax,edx
c001590e:	31 d2                	xor    edx,edx
c0015910:	52                   	push   edx
c0015911:	50                   	push   eax
c0015912:	53                   	push   ebx
c0015913:	e8 4e 29 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015918:	83 c4 0c             	add    esp,0xc
c001591b:	6a 20                	push   0x20
c001591d:	6a 00                	push   0x0
c001591f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015923:	52                   	push   edx
c0015924:	e8 c7 ab fe ff       	call   c00004f0 <memset>
c0015929:	58                   	pop    eax
c001592a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001592c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015930:	51                   	push   ecx
c0015931:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015935:	52                   	push   edx
c0015936:	6a 00                	push   0x0
c0015938:	6a 1f                	push   0x1f
c001593a:	53                   	push   ebx
c001593b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001593e:	83 c4 18             	add    esp,0x18
c0015941:	68 11 4c 02 c0       	push   0xc0024c11
c0015946:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001594a:	52                   	push   edx
c001594b:	e8 00 ae fe ff       	call   c0000750 <strcmp>
c0015950:	83 c4 10             	add    esp,0x10
c0015953:	85 c0                	test   eax,eax
c0015955:	75 0f                	jne    c0015966 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015957:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001595a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001595e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015962:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015966:	50                   	push   eax
c0015967:	50                   	push   eax
c0015968:	68 19 4c 02 c0       	push   0xc0024c19
c001596d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015971:	50                   	push   eax
c0015972:	e8 d9 ad fe ff       	call   c0000750 <strcmp>
c0015977:	83 c4 10             	add    esp,0x10
c001597a:	85 c0                	test   eax,eax
c001597c:	75 0f                	jne    c001598d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001597e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015981:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015989:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001598d:	45                   	inc    ebp
c001598e:	e9 4c ff ff ff       	jmp    c00158df <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015993:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015998:	75 10                	jne    c00159aa <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001599a:	83 ec 0c             	sub    esp,0xc
c001599d:	68 21 4c 02 c0       	push   0xc0024c21
c00159a2:	e8 4d a3 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00159a7:	83 c4 10             	add    esp,0x10
c00159aa:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00159af:	75 10                	jne    c00159c1 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00159b1:	83 ec 0c             	sub    esp,0xc
c00159b4:	68 21 4c 02 c0       	push   0xc0024c21
c00159b9:	e8 36 a3 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00159be:	83 c4 10             	add    esp,0x10
c00159c1:	31 d2                	xor    edx,edx
c00159c3:	50                   	push   eax
c00159c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c8:	52                   	push   edx
c00159c9:	50                   	push   eax
c00159ca:	53                   	push   ebx
c00159cb:	e8 96 28 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00159d0:	5a                   	pop    edx
c00159d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00159d5:	e8 bd 9e ff ff       	call   c000f897 <malloc>
c00159da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00159de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00159e2:	31 c9                	xor    ecx,ecx
c00159e4:	5e                   	pop    esi
c00159e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159e7:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00159eb:	55                   	push   ebp
c00159ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159f0:	51                   	push   ecx
c00159f1:	52                   	push   edx
c00159f2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00159f6:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00159fa:	53                   	push   ebx
c00159fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00159fe:	83 c4 14             	add    esp,0x14
c0015a01:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015a05:	e8 8d 9e ff ff       	call   c000f897 <malloc>
c0015a0a:	89 c6                	mov    esi,eax
c0015a0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a0e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015a11:	56                   	push   esi
c0015a12:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015a16:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015a1a:	51                   	push   ecx
c0015a1b:	52                   	push   edx
c0015a1c:	53                   	push   ebx
c0015a1d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015a20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015a24:	8b 15 40 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca40
c0015a2a:	83 c4 1c             	add    esp,0x1c
c0015a2d:	c1 e8 04             	shr    eax,0x4
c0015a30:	89 04 95 c0 c8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3740],eax
c0015a37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a3b:	31 d2                	xor    edx,edx
c0015a3d:	52                   	push   edx
c0015a3e:	50                   	push   eax
c0015a3f:	53                   	push   ebx
c0015a40:	e8 21 28 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015a45:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015a47:	31 d2                	xor    edx,edx
c0015a49:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015a4c:	56                   	push   esi
c0015a4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015a51:	52                   	push   edx
c0015a52:	50                   	push   eax
c0015a53:	53                   	push   ebx
c0015a54:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a57:	83 c4 14             	add    esp,0x14
c0015a5a:	53                   	push   ebx
c0015a5b:	e8 a6 27 ff ff       	call   c0008206 <File::close()>
c0015a60:	5d                   	pop    ebp
c0015a61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a65:	e8 3d 9e ff ff       	call   c000f8a7 <free>
c0015a6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015a6d:	e8 35 9e ff ff       	call   c000f8a7 <free>
c0015a72:	a1 40 ca 02 c0       	mov    eax,ds:0xc002ca40
c0015a77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015a7b:	8d 50 01             	lea    edx,[eax+0x1]
c0015a7e:	89 0c 85 c0 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3640],ecx
c0015a85:	89 34 85 40 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd36c0],esi
c0015a8c:	89 15 40 ca 02 c0    	mov    DWORD PTR ds:0xc002ca40,edx
c0015a92:	83 c4 10             	add    esp,0x10
c0015a95:	b0 01                	mov    al,0x1
c0015a97:	83 c4 5c             	add    esp,0x5c
c0015a9a:	5b                   	pop    ebx
c0015a9b:	5e                   	pop    esi
c0015a9c:	5f                   	pop    edi
c0015a9d:	5d                   	pop    ebp
c0015a9e:	c3                   	ret    

c0015a9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015a9f:	55                   	push   ebp
c0015aa0:	57                   	push   edi
c0015aa1:	56                   	push   esi
c0015aa2:	53                   	push   ebx
c0015aa3:	81 ec 68 03 00 00    	sub    esp,0x368
c0015aa9:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0015ab0:	8b 1d 98 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca98
c0015ab6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015aba:	68 14 01 00 00       	push   0x114
c0015abf:	e8 d3 9d ff ff       	call   c000f897 <malloc>
c0015ac4:	83 c4 0c             	add    esp,0xc
c0015ac7:	89 c5                	mov    ebp,eax
c0015ac9:	53                   	push   ebx
c0015aca:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015ad1:	50                   	push   eax
c0015ad2:	e8 b3 26 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015ad7:	5e                   	pop    esi
c0015ad8:	5f                   	pop    edi
c0015ad9:	6a 01                	push   0x1
c0015adb:	55                   	push   ebp
c0015adc:	e8 c7 26 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015ae1:	83 c4 10             	add    esp,0x10
c0015ae4:	85 c0                	test   eax,eax
c0015ae6:	0f 85 b9 06 00 00    	jne    c00161a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015aec:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015af4:	83 ec 0c             	sub    esp,0xc
c0015af7:	6a 34                	push   0x34
c0015af9:	e8 99 9d ff ff       	call   c000f897 <malloc>
c0015afe:	5b                   	pop    ebx
c0015aff:	89 c7                	mov    edi,eax
c0015b01:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015b05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015b08:	53                   	push   ebx
c0015b09:	57                   	push   edi
c0015b0a:	6a 00                	push   0x0
c0015b0c:	6a 34                	push   0x34
c0015b0e:	55                   	push   ebp
c0015b0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b12:	83 c4 20             	add    esp,0x20
c0015b15:	85 c0                	test   eax,eax
c0015b17:	0f 85 88 06 00 00    	jne    c00161a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015b1d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015b23:	0f 85 7c 06 00 00    	jne    c00161a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015b29:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015b2c:	85 c0                	test   eax,eax
c0015b2e:	0f 84 71 06 00 00    	je     c00161a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015b34:	31 d2                	xor    edx,edx
c0015b36:	51                   	push   ecx
c0015b37:	52                   	push   edx
c0015b38:	50                   	push   eax
c0015b39:	55                   	push   ebp
c0015b3a:	e8 27 27 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015b3f:	83 c4 10             	add    esp,0x10
c0015b42:	85 c0                	test   eax,eax
c0015b44:	0f 85 5b 06 00 00    	jne    c00161a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015b4a:	83 ec 0c             	sub    esp,0xc
c0015b4d:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015b50:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015b54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015b58:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015b5c:	0f af c2             	imul   eax,edx
c0015b5f:	50                   	push   eax
c0015b60:	e8 32 9d ff ff       	call   c000f897 <malloc>
c0015b65:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015b68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015b6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b73:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015b77:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015b7b:	0f af c2             	imul   eax,edx
c0015b7e:	99                   	cdq    
c0015b7f:	52                   	push   edx
c0015b80:	50                   	push   eax
c0015b81:	55                   	push   ebp
c0015b82:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015b85:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015b88:	83 c4 20             	add    esp,0x20
c0015b8b:	85 c0                	test   eax,eax
c0015b8d:	0f 84 12 06 00 00    	je     c00161a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015b93:	52                   	push   edx
c0015b94:	31 d2                	xor    edx,edx
c0015b96:	52                   	push   edx
c0015b97:	50                   	push   eax
c0015b98:	55                   	push   ebp
c0015b99:	e8 c8 26 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	85 c0                	test   eax,eax
c0015ba3:	0f 85 fc 05 00 00    	jne    c00161a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015ba9:	83 ec 0c             	sub    esp,0xc
c0015bac:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015bb0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015bb4:	31 f6                	xor    esi,esi
c0015bb6:	0f af c2             	imul   eax,edx
c0015bb9:	50                   	push   eax
c0015bba:	e8 d8 9c ff ff       	call   c000f897 <malloc>
c0015bbf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015bc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015bc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bcd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015bd1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015bd5:	0f af c2             	imul   eax,edx
c0015bd8:	99                   	cdq    
c0015bd9:	52                   	push   edx
c0015bda:	50                   	push   eax
c0015bdb:	55                   	push   ebp
c0015bdc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015bdf:	83 c4 20             	add    esp,0x20
c0015be2:	0f b7 de             	movzx  ebx,si
c0015be5:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0015be9:	0f 83 85 00 00 00    	jae    c0015c74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d5>
c0015bef:	c1 e3 05             	shl    ebx,0x5
c0015bf2:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0015bf6:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015bf9:	75 73                	jne    c0015c6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1cf>
c0015bfb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015bfe:	31 d2                	xor    edx,edx
c0015c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c03:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015c06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c0a:	50                   	push   eax
c0015c0b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015c0e:	52                   	push   edx
c0015c0f:	50                   	push   eax
c0015c10:	55                   	push   ebp
c0015c11:	e8 50 26 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015c16:	83 c4 10             	add    esp,0x10
c0015c19:	85 c0                	test   eax,eax
c0015c1b:	0f 85 84 05 00 00    	jne    c00161a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015c21:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015c28:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015c2b:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0015c2f:	31 d2                	xor    edx,edx
c0015c31:	03 04 24             	add    eax,DWORD PTR [esp]
c0015c34:	83 ec 0c             	sub    esp,0xc
c0015c37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c3b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015c42:	50                   	push   eax
c0015c43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c4b:	52                   	push   edx
c0015c4c:	50                   	push   eax
c0015c4d:	55                   	push   ebp
c0015c4e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015c51:	83 c4 1c             	add    esp,0x1c
c0015c54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015c57:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015c5a:	50                   	push   eax
c0015c5b:	6a 00                	push   0x0
c0015c5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c61:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0015c65:	50                   	push   eax
c0015c66:	e8 85 a8 fe ff       	call   c00004f0 <memset>
c0015c6b:	83 c4 10             	add    esp,0x10
c0015c6e:	46                   	inc    esi
c0015c6f:	e9 6e ff ff ff       	jmp    c0015be2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015c74:	31 db                	xor    ebx,ebx
c0015c76:	50                   	push   eax
c0015c77:	68 00 01 00 00       	push   0x100
c0015c7c:	6a 00                	push   0x0
c0015c7e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015c82:	50                   	push   eax
c0015c83:	e8 68 a8 fe ff       	call   c00004f0 <memset>
c0015c88:	83 c4 0c             	add    esp,0xc
c0015c8b:	68 00 01 00 00       	push   0x100
c0015c90:	6a 00                	push   0x0
c0015c92:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015c99:	50                   	push   eax
c0015c9a:	e8 51 a8 fe ff       	call   c00004f0 <memset>
c0015c9f:	83 c4 10             	add    esp,0x10
c0015ca2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015ca9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015cb1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015cb9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015cc1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015cc9:	0f b7 f3             	movzx  esi,bx
c0015ccc:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015cd0:	0f 83 27 01 00 00    	jae    c0015dfd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x35e>
c0015cd6:	6b f6 28             	imul   esi,esi,0x28
c0015cd9:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0015cdd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015ce0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ce4:	50                   	push   eax
c0015ce5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015ce9:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015ced:	8b 06                	mov    eax,DWORD PTR [esi]
c0015cef:	6b d2 28             	imul   edx,edx,0x28
c0015cf2:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015cf6:	31 d2                	xor    edx,edx
c0015cf8:	52                   	push   edx
c0015cf9:	50                   	push   eax
c0015cfa:	55                   	push   ebp
c0015cfb:	e8 66 25 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015d00:	83 c4 0c             	add    esp,0xc
c0015d03:	6a 20                	push   0x20
c0015d05:	6a 00                	push   0x0
c0015d07:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015d0e:	51                   	push   ecx
c0015d0f:	e8 dc a7 fe ff       	call   c00004f0 <memset>
c0015d14:	58                   	pop    eax
c0015d15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015d18:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015d1c:	52                   	push   edx
c0015d1d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015d24:	51                   	push   ecx
c0015d25:	6a 00                	push   0x0
c0015d27:	6a 1f                	push   0x1f
c0015d29:	55                   	push   ebp
c0015d2a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d2d:	83 c4 1c             	add    esp,0x1c
c0015d30:	6a 09                	push   0x9
c0015d32:	68 3b 4c 02 c0       	push   0xc0024c3b
c0015d37:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015d3e:	51                   	push   ecx
c0015d3f:	e8 3c a6 fe ff       	call   c0000380 <memcmp>
c0015d44:	83 c4 10             	add    esp,0x10
c0015d47:	85 c0                	test   eax,eax
c0015d49:	75 1e                	jne    c0015d69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2ca>
c0015d4b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d52:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015d56:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0015d59:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015d5c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015d63:	89 d0                	mov    eax,edx
c0015d65:	40                   	inc    eax
c0015d66:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d69:	51                   	push   ecx
c0015d6a:	6a 09                	push   0x9
c0015d6c:	68 45 4c 02 c0       	push   0xc0024c45
c0015d71:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015d78:	50                   	push   eax
c0015d79:	e8 02 a6 fe ff       	call   c0000380 <memcmp>
c0015d7e:	83 c4 10             	add    esp,0x10
c0015d81:	85 c0                	test   eax,eax
c0015d83:	75 1e                	jne    c0015da3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x304>
c0015d85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d8c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015d90:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0015d93:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015d96:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015d9d:	89 d0                	mov    eax,edx
c0015d9f:	40                   	inc    eax
c0015da0:	89 04 24             	mov    DWORD PTR [esp],eax
c0015da3:	52                   	push   edx
c0015da4:	52                   	push   edx
c0015da5:	68 11 4c 02 c0       	push   0xc0024c11
c0015daa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015db1:	50                   	push   eax
c0015db2:	e8 99 a9 fe ff       	call   c0000750 <strcmp>
c0015db7:	83 c4 10             	add    esp,0x10
c0015dba:	85 c0                	test   eax,eax
c0015dbc:	75 0f                	jne    c0015dcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32e>
c0015dbe:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015dc1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015dc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015dcd:	50                   	push   eax
c0015dce:	50                   	push   eax
c0015dcf:	68 19 4c 02 c0       	push   0xc0024c19
c0015dd4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015ddb:	50                   	push   eax
c0015ddc:	e8 6f a9 fe ff       	call   c0000750 <strcmp>
c0015de1:	83 c4 10             	add    esp,0x10
c0015de4:	85 c0                	test   eax,eax
c0015de6:	75 0f                	jne    c0015df7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x358>
c0015de8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015deb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015def:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015df3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015df7:	43                   	inc    ebx
c0015df8:	e9 cc fe ff ff       	jmp    c0015cc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22a>
c0015dfd:	31 d2                	xor    edx,edx
c0015dff:	50                   	push   eax
c0015e00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e04:	52                   	push   edx
c0015e05:	50                   	push   eax
c0015e06:	55                   	push   ebp
c0015e07:	e8 5a 24 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015e0c:	58                   	pop    eax
c0015e0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e11:	e8 81 9a ff ff       	call   c000f897 <malloc>
c0015e16:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015e19:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015e1d:	31 d2                	xor    edx,edx
c0015e1f:	58                   	pop    eax
c0015e20:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015e24:	53                   	push   ebx
c0015e25:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015e2d:	52                   	push   edx
c0015e2e:	50                   	push   eax
c0015e2f:	55                   	push   ebp
c0015e30:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e33:	83 c4 14             	add    esp,0x14
c0015e36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e3a:	e8 58 9a ff ff       	call   c000f897 <malloc>
c0015e3f:	31 d2                	xor    edx,edx
c0015e41:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015e45:	83 c4 0c             	add    esp,0xc
c0015e48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015e4c:	52                   	push   edx
c0015e4d:	50                   	push   eax
c0015e4e:	55                   	push   ebp
c0015e4f:	e8 12 24 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015e54:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015e57:	31 d2                	xor    edx,edx
c0015e59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e5c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e64:	52                   	push   edx
c0015e65:	50                   	push   eax
c0015e66:	55                   	push   ebp
c0015e67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e6a:	83 c4 20             	add    esp,0x20
c0015e6d:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0015e72:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015e7e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e82:	39 34 24             	cmp    DWORD PTR [esp],esi
c0015e85:	0f 84 1e 03 00 00    	je     c00161a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70a>
c0015e8b:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c0015e92:	31 d2                	xor    edx,edx
c0015e94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e98:	c1 e8 03             	shr    eax,0x3
c0015e9b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015e9f:	56                   	push   esi
c0015ea0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ea4:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015ea8:	52                   	push   edx
c0015ea9:	50                   	push   eax
c0015eaa:	55                   	push   ebp
c0015eab:	e8 b6 23 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015eb0:	58                   	pop    eax
c0015eb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015eb5:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015ebc:	e8 d6 99 ff ff       	call   c000f897 <malloc>
c0015ec1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015ec4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015ec8:	31 d2                	xor    edx,edx
c0015eca:	58                   	pop    eax
c0015ecb:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015ecf:	50                   	push   eax
c0015ed0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ed4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015ed8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015edf:	52                   	push   edx
c0015ee0:	50                   	push   eax
c0015ee1:	55                   	push   ebp
c0015ee2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ee5:	83 c4 20             	add    esp,0x20
c0015ee8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015ef0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015ef4:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015ef8:	0f 8d 8f 02 00 00    	jge    c001618d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ee>
c0015efe:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015f02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f06:	31 c9                	xor    ecx,ecx
c0015f08:	8b 04 f0             	mov    eax,DWORD PTR [eax+esi*8]
c0015f0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015f0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f13:	8b 44 f0 04          	mov    eax,DWORD PTR [eax+esi*8+0x4]
c0015f17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f1b:	c1 e8 08             	shr    eax,0x8
c0015f1e:	89 c3                	mov    ebx,eax
c0015f20:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015f24:	c1 e3 04             	shl    ebx,0x4
c0015f27:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
c0015f2b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0015f2e:	85 d2                	test   edx,edx
c0015f30:	0f 85 97 00 00 00    	jne    c0015fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c0015f36:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015f3a:	83 ec 0c             	sub    esp,0xc
c0015f3d:	03 33                	add    esi,DWORD PTR [ebx]
c0015f3f:	56                   	push   esi
c0015f40:	e8 4d f8 ff ff       	call   c0015792 <Thr::getAddressOfKernelSymbol(char const*)>
c0015f45:	83 c4 10             	add    esp,0x10
c0015f48:	89 c2                	mov    edx,eax
c0015f4a:	b1 01                	mov    cl,0x1
c0015f4c:	85 c0                	test   eax,eax
c0015f4e:	75 7d                	jne    c0015fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c0015f50:	88 4c 24 3c          	mov    BYTE PTR [esp+0x3c],cl
c0015f54:	83 ec 0c             	sub    esp,0xc
c0015f57:	56                   	push   esi
c0015f58:	e8 b3 a8 ff ff       	call   c0010810 <KeResolveCompatibilitySymbol(char*)>
c0015f5d:	83 c4 10             	add    esp,0x10
c0015f60:	89 c2                	mov    edx,eax
c0015f62:	85 c0                	test   eax,eax
c0015f64:	8a 4c 24 3c          	mov    cl,BYTE PTR [esp+0x3c]
c0015f68:	75 63                	jne    c0015fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c0015f6a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015f6e:	51                   	push   ecx
c0015f6f:	51                   	push   ecx
c0015f70:	56                   	push   esi
c0015f71:	68 4f 4c 02 c0       	push   0xc0024c4f
c0015f76:	e8 01 10 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015f7b:	5e                   	pop    esi
c0015f7c:	58                   	pop    eax
c0015f7d:	68 69 4c 02 c0       	push   0xc0024c69
c0015f82:	8d b4 24 5c 02 00 00 	lea    esi,[esp+0x25c]
c0015f89:	56                   	push   esi
c0015f8a:	e8 b1 a6 fe ff       	call   c0000640 <strcpy>
c0015f8f:	58                   	pop    eax
c0015f90:	5a                   	pop    edx
c0015f91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015f95:	03 03                	add    eax,DWORD PTR [ebx]
c0015f97:	50                   	push   eax
c0015f98:	56                   	push   esi
c0015f99:	e8 a2 a8 fe ff       	call   c0000840 <strcat>
c0015f9e:	59                   	pop    ecx
c0015f9f:	5b                   	pop    ebx
c0015fa0:	68 03 4d 02 c0       	push   0xc0024d03
c0015fa5:	56                   	push   esi
c0015fa6:	e8 95 a8 fe ff       	call   c0000840 <strcat>
c0015fab:	83 c4 10             	add    esp,0x10
c0015fae:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0015fb3:	0f 84 8e 01 00 00    	je     c0016147 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015fb9:	83 ec 0c             	sub    esp,0xc
c0015fbc:	56                   	push   esi
c0015fbd:	e8 32 9d ff ff       	call   c000fcf4 <KePanic(char const*)>
c0015fc2:	83 c4 10             	add    esp,0x10
c0015fc5:	8a 4c 24 37          	mov    cl,BYTE PTR [esp+0x37]
c0015fc9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015fcd:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015fd2:	83 f8 01             	cmp    eax,0x1
c0015fd5:	0f 85 ab 00 00 00    	jne    c0016086 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e7>
c0015fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fdf:	8b 9c 24 74 03 00 00 	mov    ebx,DWORD PTR [esp+0x374]
c0015fe6:	2b 5c 24 1c          	sub    ebx,DWORD PTR [esp+0x1c]
c0015fea:	01 d8                	add    eax,ebx
c0015fec:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c0015ff4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015ff8:	0f 94 44 24 3c       	sete   BYTE PTR [esp+0x3c]
c0015ffd:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c0016005:	0f 94 c0             	sete   al
c0016008:	89 c6                	mov    esi,eax
c001600a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001600e:	0b 74 24 3c          	or     esi,DWORD PTR [esp+0x3c]
c0016012:	8b 00                	mov    eax,DWORD PTR [eax]
c0016014:	84 c9                	test   cl,cl
c0016016:	89 f1                	mov    ecx,esi
c0016018:	0f b6 f1             	movzx  esi,cl
c001601b:	74 39                	je     c0016056 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b7>
c001601d:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0016020:	85 f6                	test   esi,esi
c0016022:	75 15                	jne    c0016039 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59a>
c0016024:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016028:	66 83 f8 0c          	cmp    ax,0xc
c001602c:	76 05                	jbe    c0016033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x594>
c001602e:	b8 0c 00 00 00       	mov    eax,0xc
c0016033:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0016037:	76 42                	jbe    c001607b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c0016039:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001603e:	0f 84 03 01 00 00    	je     c0016147 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016044:	83 ec 0c             	sub    esp,0xc
c0016047:	68 80 4c 02 c0       	push   0xc0024c80
c001604c:	e8 a3 9c ff ff       	call   c000fcf4 <KePanic(char const*)>
c0016051:	83 c4 10             	add    esp,0x10
c0016054:	eb 25                	jmp    c001607b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c0016056:	01 c3                	add    ebx,eax
c0016058:	85 f6                	test   esi,esi
c001605a:	89 d8                	mov    eax,ebx
c001605c:	75 0d                	jne    c001606b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001605e:	0f b7 4f 30          	movzx  ecx,WORD PTR [edi+0x30]
c0016062:	3b 4c 24 24          	cmp    ecx,DWORD PTR [esp+0x24]
c0016066:	77 03                	ja     c001606b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0016068:	8d 04 1a             	lea    eax,[edx+ebx*1]
c001606b:	8d 90 00 00 00 28    	lea    edx,[eax+0x28000000]
c0016071:	81 fa ff ff ff 00    	cmp    edx,0xffffff
c0016077:	76 02                	jbe    c001607b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c0016079:	89 c3                	mov    ebx,eax
c001607b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001607f:	89 18                	mov    DWORD PTR [eax],ebx
c0016081:	e9 fe 00 00 00       	jmp    c0016184 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c0016086:	83 f8 02             	cmp    eax,0x2
c0016089:	0f 85 8f 00 00 00    	jne    c001611e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001608f:	8b 9c 24 74 03 00 00 	mov    ebx,DWORD PTR [esp+0x374]
c0016096:	2b 5c 24 1c          	sub    ebx,DWORD PTR [esp+0x1c]
c001609a:	03 5c 24 20          	add    ebx,DWORD PTR [esp+0x20]
c001609e:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c00160a6:	74 21                	je     c00160c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c00160a8:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c00160b0:	74 17                	je     c00160c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c00160b2:	0f b7 77 30          	movzx  esi,WORD PTR [edi+0x30]
c00160b6:	b8 0a 00 00 00       	mov    eax,0xa
c00160bb:	83 fe 0e             	cmp    esi,0xe
c00160be:	77 03                	ja     c00160c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c00160c0:	8d 46 fc             	lea    eax,[esi-0x4]
c00160c3:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00160c7:	76 27                	jbe    c00160f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x651>
c00160c9:	88 4c 24 24          	mov    BYTE PTR [esp+0x24],cl
c00160cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00160d1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00160d6:	74 6f                	je     c0016147 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00160d8:	83 ec 0c             	sub    esp,0xc
c00160db:	68 9c 4c 02 c0       	push   0xc0024c9c
c00160e0:	e8 0f 9c ff ff       	call   c000fcf4 <KePanic(char const*)>
c00160e5:	83 c4 10             	add    esp,0x10
c00160e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00160ec:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
c00160f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160f2:	84 c9                	test   cl,cl
c00160f4:	74 13                	je     c0016109 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00160f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00160fa:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0016101:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0016105:	01 c1                	add    ecx,eax
c0016107:	eb 06                	jmp    c001610f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0016109:	89 c1                	mov    ecx,eax
c001610b:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c001610f:	01 ca                	add    edx,ecx
c0016111:	3d fe ff 0f 00       	cmp    eax,0xffffe
c0016116:	77 02                	ja     c001611a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0016118:	89 c2                	mov    edx,eax
c001611a:	89 13                	mov    DWORD PTR [ebx],edx
c001611c:	eb 66                	jmp    c0016184 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c001611e:	52                   	push   edx
c001611f:	52                   	push   edx
c0016120:	50                   	push   eax
c0016121:	68 b8 4c 02 c0       	push   0xc0024cb8
c0016126:	e8 51 0e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001612b:	83 c4 10             	add    esp,0x10
c001612e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016133:	74 12                	je     c0016147 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016135:	83 ec 0c             	sub    esp,0xc
c0016138:	68 c3 4c 02 c0       	push   0xc0024cc3
c001613d:	e8 b2 9b ff ff       	call   c000fcf4 <KePanic(char const*)>
c0016142:	83 c4 10             	add    esp,0x10
c0016145:	eb 3d                	jmp    c0016184 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c0016147:	83 ec 0c             	sub    esp,0xc
c001614a:	55                   	push   ebp
c001614b:	e8 b6 20 ff ff       	call   c0008206 <File::close()>
c0016150:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016153:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016156:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016159:	59                   	pop    ecx
c001615a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001615e:	e8 44 97 ff ff       	call   c000f8a7 <free>
c0016163:	5b                   	pop    ebx
c0016164:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016168:	e8 3a 97 ff ff       	call   c000f8a7 <free>
c001616d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016170:	e8 32 97 ff ff       	call   c000f8a7 <free>
c0016175:	5e                   	pop    esi
c0016176:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001617a:	e8 28 97 ff ff       	call   c000f8a7 <free>
c001617f:	83 c4 10             	add    esp,0x10
c0016182:	eb 21                	jmp    c00161a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0016184:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016188:	e9 63 fd ff ff       	jmp    c0015ef0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x451>
c001618d:	83 ec 0c             	sub    esp,0xc
c0016190:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016194:	e8 0e 97 ff ff       	call   c000f8a7 <free>
c0016199:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001619d:	83 c4 10             	add    esp,0x10
c00161a0:	e9 d9 fc ff ff       	jmp    c0015e7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00161a5:	31 c0                	xor    eax,eax
c00161a7:	eb 33                	jmp    c00161dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73d>
c00161a9:	83 ec 0c             	sub    esp,0xc
c00161ac:	55                   	push   ebp
c00161ad:	e8 54 20 ff ff       	call   c0008206 <File::close()>
c00161b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00161b5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00161b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161bb:	58                   	pop    eax
c00161bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00161c0:	e8 e2 96 ff ff       	call   c000f8a7 <free>
c00161c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00161c8:	e8 da 96 ff ff       	call   c000f8a7 <free>
c00161cd:	5a                   	pop    edx
c00161ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161d2:	e8 d0 96 ff ff       	call   c000f8a7 <free>
c00161d7:	83 c4 10             	add    esp,0x10
c00161da:	b0 01                	mov    al,0x1
c00161dc:	81 c4 5c 03 00 00    	add    esp,0x35c
c00161e2:	5b                   	pop    ebx
c00161e3:	5e                   	pop    esi
c00161e4:	5f                   	pop    edi
c00161e5:	5d                   	pop    ebp
c00161e6:	c3                   	ret    

c00161e7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00161e7:	56                   	push   esi
c00161e8:	31 d2                	xor    edx,edx
c00161ea:	53                   	push   ebx
c00161eb:	8b 1d a0 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c2a0
c00161f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161f5:	39 d3                	cmp    ebx,edx
c00161f7:	7e 1b                	jle    c0016214 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00161f9:	8b 04 95 c0 c4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3b40]
c0016200:	39 c8                	cmp    eax,ecx
c0016202:	77 0d                	ja     c0016211 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016204:	8b 34 95 c0 c2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3d40]
c001620b:	01 c6                	add    esi,eax
c001620d:	39 ce                	cmp    esi,ecx
c001620f:	77 05                	ja     c0016216 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0016211:	42                   	inc    edx
c0016212:	eb e1                	jmp    c00161f5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016214:	31 c0                	xor    eax,eax
c0016216:	5b                   	pop    ebx
c0016217:	5e                   	pop    esi
c0016218:	c3                   	ret    

c0016219 <Thr::getDriverNameFromAddress(unsigned long)>:
c0016219:	53                   	push   ebx
c001621a:	31 c0                	xor    eax,eax
c001621c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016220:	8b 1d a0 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c2a0
c0016226:	39 c3                	cmp    ebx,eax
c0016228:	7e 22                	jle    c001624c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001622a:	8b 14 85 c0 c4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3b40]
c0016231:	39 ca                	cmp    edx,ecx
c0016233:	77 14                	ja     c0016249 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016235:	03 14 85 c0 c2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3d40]
c001623c:	39 ca                	cmp    edx,ecx
c001623e:	76 09                	jbe    c0016249 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016240:	8b 04 85 c0 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3940]
c0016247:	eb 05                	jmp    c001624e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0016249:	40                   	inc    eax
c001624a:	eb da                	jmp    c0016226 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001624c:	31 c0                	xor    eax,eax
c001624e:	5b                   	pop    ebx
c001624f:	c3                   	ret    

c0016250 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0016250:	53                   	push   ebx
c0016251:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016255:	53                   	push   ebx
c0016256:	e8 8c ff ff ff       	call   c00161e7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001625b:	5a                   	pop    edx
c001625c:	31 d2                	xor    edx,edx
c001625e:	85 c0                	test   eax,eax
c0016260:	74 04                	je     c0016266 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0016262:	89 da                	mov    edx,ebx
c0016264:	29 c2                	sub    edx,eax
c0016266:	89 d0                	mov    eax,edx
c0016268:	5b                   	pop    ebx
c0016269:	c3                   	ret    

c001626a <Thr::loadDLL(char const*, bool)>:
c001626a:	55                   	push   ebp
c001626b:	57                   	push   edi
c001626c:	56                   	push   esi
c001626d:	53                   	push   ebx
c001626e:	81 ec 34 01 00 00    	sub    esp,0x134
c0016274:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001627b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016282:	56                   	push   esi
c0016283:	68 db 4c 02 c0       	push   0xc0024cdb
c0016288:	e8 ef 0c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001628d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016294:	e8 fe 95 ff ff       	call   c000f897 <malloc>
c0016299:	83 c4 0c             	add    esp,0xc
c001629c:	89 c3                	mov    ebx,eax
c001629e:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c00162a4:	56                   	push   esi
c00162a5:	50                   	push   eax
c00162a6:	e8 df 1e ff ff       	call   c000818a <File::File(char const*, Process*)>
c00162ab:	83 c4 10             	add    esp,0x10
c00162ae:	85 db                	test   ebx,ebx
c00162b0:	75 3c                	jne    c00162ee <Thr::loadDLL(char const*, bool)+0x84>
c00162b2:	89 f8                	mov    eax,edi
c00162b4:	84 c0                	test   al,al
c00162b6:	0f 84 f3 01 00 00    	je     c00164af <Thr::loadDLL(char const*, bool)+0x245>
c00162bc:	55                   	push   ebp
c00162bd:	55                   	push   ebp
c00162be:	68 ec 4c 02 c0       	push   0xc0024cec
c00162c3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00162c7:	55                   	push   ebp
c00162c8:	e8 73 a3 fe ff       	call   c0000640 <strcpy>
c00162cd:	58                   	pop    eax
c00162ce:	5a                   	pop    edx
c00162cf:	56                   	push   esi
c00162d0:	55                   	push   ebp
c00162d1:	e8 6a a5 fe ff       	call   c0000840 <strcat>
c00162d6:	59                   	pop    ecx
c00162d7:	58                   	pop    eax
c00162d8:	68 03 4d 02 c0       	push   0xc0024d03
c00162dd:	55                   	push   ebp
c00162de:	e8 5d a5 fe ff       	call   c0000840 <strcat>
c00162e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00162e6:	e8 09 9a ff ff       	call   c000fcf4 <KePanic(char const*)>
c00162eb:	83 c4 10             	add    esp,0x10
c00162ee:	51                   	push   ecx
c00162ef:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00162f3:	50                   	push   eax
c00162f4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00162f8:	50                   	push   eax
c00162f9:	53                   	push   ebx
c00162fa:	e8 ab 21 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00162ff:	83 c4 10             	add    esp,0x10
c0016302:	89 c5                	mov    ebp,eax
c0016304:	85 db                	test   ebx,ebx
c0016306:	74 0c                	je     c0016314 <Thr::loadDLL(char const*, bool)+0xaa>
c0016308:	83 ec 0c             	sub    esp,0xc
c001630b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001630d:	53                   	push   ebx
c001630e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016311:	83 c4 10             	add    esp,0x10
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001631c:	50                   	push   eax
c001631d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016321:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016325:	55                   	push   ebp
c0016326:	68 05 4d 02 c0       	push   0xc0024d05
c001632b:	e8 4c 0c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016330:	83 c4 20             	add    esp,0x20
c0016333:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016338:	75 0a                	jne    c0016344 <Thr::loadDLL(char const*, bool)+0xda>
c001633a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001633e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016342:	75 3c                	jne    c0016380 <Thr::loadDLL(char const*, bool)+0x116>
c0016344:	89 f8                	mov    eax,edi
c0016346:	84 c0                	test   al,al
c0016348:	0f 84 49 01 00 00    	je     c0016497 <Thr::loadDLL(char const*, bool)+0x22d>
c001634e:	51                   	push   ecx
c001634f:	51                   	push   ecx
c0016350:	68 26 4d 02 c0       	push   0xc0024d26
c0016355:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0016359:	53                   	push   ebx
c001635a:	e8 e1 a2 fe ff       	call   c0000640 <strcpy>
c001635f:	5d                   	pop    ebp
c0016360:	58                   	pop    eax
c0016361:	56                   	push   esi
c0016362:	53                   	push   ebx
c0016363:	e8 d8 a4 fe ff       	call   c0000840 <strcat>
c0016368:	58                   	pop    eax
c0016369:	5a                   	pop    edx
c001636a:	68 03 4d 02 c0       	push   0xc0024d03
c001636f:	53                   	push   ebx
c0016370:	e8 cb a4 fe ff       	call   c0000840 <strcat>
c0016375:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016378:	e8 77 99 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001637d:	83 c4 10             	add    esp,0x10
c0016380:	52                   	push   edx
c0016381:	6a 03                	push   0x3
c0016383:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016387:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001638b:	05 ff 0f 00 00       	add    eax,0xfff
c0016390:	83 d2 00             	adc    edx,0x0
c0016393:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016397:	50                   	push   eax
c0016398:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c001639e:	e8 6b d7 ff ff       	call   c0013b0e <VAS::allocatePages(int, int)>
c00163a3:	59                   	pop    ecx
c00163a4:	89 c3                	mov    ebx,eax
c00163a6:	5d                   	pop    ebp
c00163a7:	50                   	push   eax
c00163a8:	68 0b 41 02 c0       	push   0xc002410b
c00163ad:	e8 ca 0b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00163b2:	89 34 24             	mov    DWORD PTR [esp],esi
c00163b5:	e8 b6 a1 fe ff       	call   c0000570 <strlen>
c00163ba:	8b 2d a0 c2 02 c0    	mov    ebp,DWORD PTR ds:0xc002c2a0
c00163c0:	40                   	inc    eax
c00163c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00163c4:	e8 ce 94 ff ff       	call   c000f897 <malloc>
c00163c9:	89 04 ad c0 c6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3940],eax
c00163d0:	58                   	pop    eax
c00163d1:	a1 a0 c2 02 c0       	mov    eax,ds:0xc002c2a0
c00163d6:	5a                   	pop    edx
c00163d7:	56                   	push   esi
c00163d8:	ff 34 85 c0 c6 02 c0 	push   DWORD PTR [eax*4-0x3ffd3940]
c00163df:	e8 5c a2 fe ff       	call   c0000640 <strcpy>
c00163e4:	a1 a0 c2 02 c0       	mov    eax,ds:0xc002c2a0
c00163e9:	8d 50 01             	lea    edx,[eax+0x1]
c00163ec:	89 1c 85 c0 c4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3b40],ebx
c00163f3:	89 15 a0 c2 02 c0    	mov    DWORD PTR ds:0xc002c2a0,edx
c00163f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00163fd:	83 c4 0c             	add    esp,0xc
c0016400:	89 14 85 c0 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3d40],edx
c0016407:	6a 01                	push   0x1
c0016409:	53                   	push   ebx
c001640a:	56                   	push   esi
c001640b:	e8 8f f6 ff ff       	call   c0015a9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016410:	83 c4 10             	add    esp,0x10
c0016413:	0f b6 c0             	movzx  eax,al
c0016416:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001641a:	85 c0                	test   eax,eax
c001641c:	0f 85 89 00 00 00    	jne    c00164ab <Thr::loadDLL(char const*, bool)+0x241>
c0016422:	89 f8                	mov    eax,edi
c0016424:	84 c0                	test   al,al
c0016426:	74 73                	je     c001649b <Thr::loadDLL(char const*, bool)+0x231>
c0016428:	83 ec 0c             	sub    esp,0xc
c001642b:	68 3f 4d 02 c0       	push   0xc0024d3f
c0016430:	e8 bf 98 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0016435:	83 c4 10             	add    esp,0x10
c0016438:	eb 61                	jmp    c001649b <Thr::loadDLL(char const*, bool)+0x231>
c001643a:	50                   	push   eax
c001643b:	50                   	push   eax
c001643c:	89 e8                	mov    eax,ebp
c001643e:	c1 e0 0c             	shl    eax,0xc
c0016441:	01 d8                	add    eax,ebx
c0016443:	50                   	push   eax
c0016444:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c001644a:	e8 c1 d1 ff ff       	call   c0013610 <VAS::getPageTableEntry(unsigned long)>
c001644f:	83 c4 10             	add    esp,0x10
c0016452:	8b 00                	mov    eax,DWORD PTR [eax]
c0016454:	a8 60                	test   al,0x60
c0016456:	75 11                	jne    c0016469 <Thr::loadDLL(char const*, bool)+0x1ff>
c0016458:	83 ec 0c             	sub    esp,0xc
c001645b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016460:	50                   	push   eax
c0016461:	e8 19 9a ff ff       	call   c000fe7f <Phys::freePage(unsigned long)>
c0016466:	83 c4 10             	add    esp,0x10
c0016469:	45                   	inc    ebp
c001646a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001646e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016472:	05 ff 0f 00 00       	add    eax,0xfff
c0016477:	bf 00 00 00 00       	mov    edi,0x0
c001647c:	83 d2 00             	adc    edx,0x0
c001647f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016483:	c1 ea 0c             	shr    edx,0xc
c0016486:	39 c5                	cmp    ebp,eax
c0016488:	89 d1                	mov    ecx,edx
c001648a:	89 f8                	mov    eax,edi
c001648c:	19 c8                	sbb    eax,ecx
c001648e:	72 aa                	jb     c001643a <Thr::loadDLL(char const*, bool)+0x1d0>
c0016490:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016495:	75 18                	jne    c00164af <Thr::loadDLL(char const*, bool)+0x245>
c0016497:	31 db                	xor    ebx,ebx
c0016499:	eb 14                	jmp    c00164af <Thr::loadDLL(char const*, bool)+0x245>
c001649b:	83 ec 0c             	sub    esp,0xc
c001649e:	68 5e 4d 02 c0       	push   0xc0024d5e
c00164a3:	e8 4c 98 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00164a8:	83 c4 10             	add    esp,0x10
c00164ab:	31 ed                	xor    ebp,ebp
c00164ad:	eb bb                	jmp    c001646a <Thr::loadDLL(char const*, bool)+0x200>
c00164af:	81 c4 2c 01 00 00    	add    esp,0x12c
c00164b5:	89 d8                	mov    eax,ebx
c00164b7:	5b                   	pop    ebx
c00164b8:	5e                   	pop    esi
c00164b9:	5f                   	pop    edi
c00164ba:	5d                   	pop    ebp
c00164bb:	c3                   	ret    

c00164bc <Thr::executeDLL(unsigned long, void*)>:
c00164bc:	56                   	push   esi
c00164bd:	53                   	push   ebx
c00164be:	52                   	push   edx
c00164bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00164c7:	85 db                	test   ebx,ebx
c00164c9:	75 10                	jne    c00164db <Thr::executeDLL(unsigned long, void*)+0x1f>
c00164cb:	83 ec 0c             	sub    esp,0xc
c00164ce:	68 7a 4d 02 c0       	push   0xc0024d7a
c00164d3:	e8 1c 98 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00164d8:	83 c4 10             	add    esp,0x10
c00164db:	50                   	push   eax
c00164dc:	50                   	push   eax
c00164dd:	53                   	push   ebx
c00164de:	68 a4 4d 02 c0       	push   0xc0024da4
c00164e3:	e8 94 0a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00164e8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00164ec:	89 d8                	mov    eax,ebx
c00164ee:	83 c4 14             	add    esp,0x14
c00164f1:	5b                   	pop    ebx
c00164f2:	5e                   	pop    esi
c00164f3:	ff e0                	jmp    eax

c00164f5 <KeProcessExec(Process*, char const*)>:
c00164f5:	56                   	push   esi
c00164f6:	53                   	push   ebx
c00164f7:	83 ec 04             	sub    esp,0x4
c00164fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164fe:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016504:	85 f6                	test   esi,esi
c0016506:	74 16                	je     c001651e <KeProcessExec(Process*, char const*)+0x29>
c0016508:	83 ec 0c             	sub    esp,0xc
c001650b:	56                   	push   esi
c001650c:	e8 91 d3 ff ff       	call   c00138a2 <VAS::~VAS()>
c0016511:	58                   	pop    eax
c0016512:	5a                   	pop    edx
c0016513:	6a 14                	push   0x14
c0016515:	56                   	push   esi
c0016516:	e8 95 6e ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c001651b:	83 c4 10             	add    esp,0x10
c001651e:	83 ec 0c             	sub    esp,0xc
c0016521:	6a 14                	push   0x14
c0016523:	e8 6f 93 ff ff       	call   c000f897 <malloc>
c0016528:	89 c6                	mov    esi,eax
c001652a:	58                   	pop    eax
c001652b:	5a                   	pop    edx
c001652c:	6a 00                	push   0x0
c001652e:	56                   	push   esi
c001652f:	e8 0e d8 ff ff       	call   c0013d42 <VAS::VAS(bool)>
c0016534:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c001653a:	59                   	pop    ecx
c001653b:	5e                   	pop    esi
c001653c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016540:	50                   	push   eax
c0016541:	53                   	push   ebx
c0016542:	e8 a0 ef ff ff       	call   c00154e7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016547:	83 c4 14             	add    esp,0x14
c001654a:	31 c0                	xor    eax,eax
c001654c:	5b                   	pop    ebx
c001654d:	5e                   	pop    esi
c001654e:	c3                   	ret    
c001654f:	90                   	nop

c0016550 <userModeEntryPoint(void*)>:
c0016550:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016558:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001655d:	85 c0                	test   eax,eax
c001655f:	75 03                	jne    c0016564 <userModeEntryPoint(void*)+0x14>
c0016561:	fb                   	sti    
c0016562:	66 90                	xchg   ax,ax
c0016564:	fb                   	sti    
c0016565:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001656a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001656d:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0016573:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016577:	e9 c3 9c fe ff       	jmp    c000023f <goToUsermode>

c001657c <changeTSS>:
c001657c:	83 ec 14             	sub    esp,0x14
c001657f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016584:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0016587:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001658c:	c1 e2 15             	shl    edx,0x15
c001658f:	29 d0                	sub    eax,edx
c0016591:	50                   	push   eax
c0016592:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0016597:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001659d:	05 68 11 00 00       	add    eax,0x1168
c00165a2:	50                   	push   eax
c00165a3:	e8 40 c6 ff ff       	call   c0012be8 <TSS::setESP(unsigned long)>
c00165a8:	83 c4 1c             	add    esp,0x1c
c00165ab:	c3                   	ret    

c00165ac <switchToThread(ThreadControlBlock*)>:
c00165ac:	57                   	push   edi
c00165ad:	8b 0d 6c ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca6c
c00165b3:	56                   	push   esi
c00165b4:	85 c9                	test   ecx,ecx
c00165b6:	53                   	push   ebx
c00165b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165bb:	0f 85 9b 00 00 00    	jne    c001665c <switchToThread(ThreadControlBlock*)+0xb0>
c00165c1:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c00165c5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00165cb:	0f 84 87 00 00 00    	je     c0016658 <switchToThread(ThreadControlBlock*)+0xac>
c00165d1:	b8 00 04 00 00       	mov    eax,0x400
c00165d6:	29 d0                	sub    eax,edx
c00165d8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00165db:	d1 f8                	sar    eax,1
c00165dd:	01 d0                	add    eax,edx
c00165df:	90                   	nop
c00165e0:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00165e3:	e8 ad 3e 00 00       	call   c001a495 <HalQueryPerformanceCounter()>
c00165e8:	a3 b0 ca 02 c0       	mov    ds:0xc002cab0,eax
c00165ed:	89 15 b4 ca 02 c0    	mov    DWORD PTR ds:0xc002cab4,edx
c00165f3:	89 c6                	mov    esi,eax
c00165f5:	89 d7                	mov    edi,edx
c00165f7:	2b 35 a0 ca 02 c0    	sub    esi,DWORD PTR ds:0xc002caa0
c00165fd:	a3 a0 ca 02 c0       	mov    ds:0xc002caa0,eax
c0016602:	1b 3d a4 ca 02 c0    	sbb    edi,DWORD PTR ds:0xc002caa4
c0016608:	89 35 a8 ca 02 c0    	mov    DWORD PTR ds:0xc002caa8,esi
c001660e:	89 3d ac ca 02 c0    	mov    DWORD PTR ds:0xc002caac,edi
c0016614:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001661a:	89 15 a4 ca 02 c0    	mov    DWORD PTR ds:0xc002caa4,edx
c0016620:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016623:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016626:	01 c6                	add    esi,eax
c0016628:	11 d7                	adc    edi,edx
c001662a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001662d:	83 ec 0c             	sub    esp,0xc
c0016630:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016633:	53                   	push   ebx
c0016634:	e8 3e 9c fe ff       	call   c0000277 <switchToThreadASM>
c0016639:	0f 20 c0             	mov    eax,cr0
c001663c:	83 c8 08             	or     eax,0x8
c001663f:	0f 22 c0             	mov    cr0,eax
c0016642:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016647:	83 c4 10             	add    esp,0x10
c001664a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001664e:	5b                   	pop    ebx
c001664f:	5e                   	pop    esi
c0016650:	5f                   	pop    edi
c0016651:	e9 0e eb ff ff       	jmp    c0015164 <KeCheckAlarm(ThreadControlBlock*)>
c0016656:	66 90                	xchg   ax,ax
c0016658:	31 c0                	xor    eax,eax
c001665a:	eb 84                	jmp    c00165e0 <switchToThread(ThreadControlBlock*)+0x34>
c001665c:	5b                   	pop    ebx
c001665d:	c7 05 68 ca 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x1
c0016667:	5e                   	pop    esi
c0016668:	5f                   	pop    edi
c0016669:	c3                   	ret    
c001666a:	66 90                	xchg   ax,ax

c001666c <Process::addArgs(char**)>:
c001666c:	57                   	push   edi
c001666d:	56                   	push   esi
c001666e:	53                   	push   ebx
c001666f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016673:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016677:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c0016681:	85 ff                	test   edi,edi
c0016683:	74 4f                	je     c00166d4 <Process::addArgs(char**)+0x68>
c0016685:	8b 07                	mov    eax,DWORD PTR [edi]
c0016687:	85 c0                	test   eax,eax
c0016689:	74 49                	je     c00166d4 <Process::addArgs(char**)+0x68>
c001668b:	31 db                	xor    ebx,ebx
c001668d:	8d 76 00             	lea    esi,[esi+0x0]
c0016690:	83 ec 0c             	sub    esp,0xc
c0016693:	50                   	push   eax
c0016694:	e8 d7 9e fe ff       	call   c0000570 <strlen>
c0016699:	83 c0 01             	add    eax,0x1
c001669c:	89 04 24             	mov    DWORD PTR [esp],eax
c001669f:	e8 f3 91 ff ff       	call   c000f897 <malloc>
c00166a4:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c00166ab:	5a                   	pop    edx
c00166ac:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00166af:	59                   	pop    ecx
c00166b0:	83 c3 01             	add    ebx,0x1
c00166b3:	52                   	push   edx
c00166b4:	50                   	push   eax
c00166b5:	e8 86 9f fe ff       	call   c0000640 <strcpy>
c00166ba:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c00166c0:	83 c4 10             	add    esp,0x10
c00166c3:	83 c1 01             	add    ecx,0x1
c00166c6:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c00166cc:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00166cf:	85 c0                	test   eax,eax
c00166d1:	75 bd                	jne    c0016690 <Process::addArgs(char**)+0x24>
c00166d3:	90                   	nop
c00166d4:	5b                   	pop    ebx
c00166d5:	5e                   	pop    esi
c00166d6:	5f                   	pop    edi
c00166d7:	c3                   	ret    

c00166d8 <Process::Process(char const*, Process*, char**)>:
c00166d8:	56                   	push   esi
c00166d9:	53                   	push   ebx
c00166da:	83 ec 14             	sub    esp,0x14
c00166dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e1:	05 0c 02 00 00       	add    eax,0x20c
c00166e6:	bb 07 00 00 00       	mov    ebx,0x7
c00166eb:	89 c6                	mov    esi,eax
c00166ed:	8d 76 00             	lea    esi,[esi+0x0]
c00166f0:	85 db                	test   ebx,ebx
c00166f2:	78 14                	js     c0016708 <Process::Process(char const*, Process*, char**)+0x30>
c00166f4:	83 ec 0c             	sub    esp,0xc
c00166f7:	56                   	push   esi
c00166f8:	e8 c3 bb 00 00       	call   c00222c0 <ThreadControlBlock::ThreadControlBlock()>
c00166fd:	83 c4 10             	add    esp,0x10
c0016700:	83 c6 73             	add    esi,0x73
c0016703:	83 eb 01             	sub    ebx,0x1
c0016706:	eb e8                	jmp    c00166f0 <Process::Process(char const*, Process*, char**)+0x18>
c0016708:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001670c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016717:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001671e:	83 ec 0c             	sub    esp,0xc
c0016721:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016725:	e8 b2 7e ff ff       	call   c000e5dc <KeNewProcessEnv(Process*)>
c001672a:	83 c4 10             	add    esp,0x10
c001672d:	89 c2                	mov    edx,eax
c001672f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016733:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016739:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001673d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016746:	a1 dc 69 02 c0       	mov    eax,ds:0xc00269dc
c001674b:	8d 50 01             	lea    edx,[eax+0x1]
c001674e:	89 15 dc 69 02 c0    	mov    DWORD PTR ds:0xc00269dc,edx
c0016754:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016758:	89 02                	mov    DWORD PTR [edx],eax
c001675a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016762:	83 ec 0c             	sub    esp,0xc
c0016765:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016769:	e8 29 91 ff ff       	call   c000f897 <malloc>
c001676e:	83 c4 10             	add    esp,0x10
c0016771:	89 c3                	mov    ebx,eax
c0016773:	83 ec 08             	sub    esp,0x8
c0016776:	6a 00                	push   0x0
c0016778:	53                   	push   ebx
c0016779:	e8 c4 d5 ff ff       	call   c0013d42 <VAS::VAS(bool)>
c001677e:	83 c4 10             	add    esp,0x10
c0016781:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016785:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c001678b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001678f:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016799:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001679d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00167a1:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00167a7:	e8 57 a7 ff ff       	call   c0010f03 <KeInitSignals()>
c00167ac:	89 c2                	mov    edx,eax
c00167ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b2:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c00167b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167bc:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00167c2:	85 c0                	test   eax,eax
c00167c4:	74 42                	je     c0016808 <Process::Process(char const*, Process*, char**)+0x130>
c00167c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ca:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00167d0:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00167d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167da:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c00167e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167e4:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00167ea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00167f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f4:	05 0c 01 00 00       	add    eax,0x10c
c00167f9:	83 ec 08             	sub    esp,0x8
c00167fc:	52                   	push   edx
c00167fd:	50                   	push   eax
c00167fe:	e8 3d 9e fe ff       	call   c0000640 <strcpy>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	eb 7c                	jmp    c0016884 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016808:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016810:	83 ec 0c             	sub    esp,0xc
c0016813:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016817:	e8 7b 90 ff ff       	call   c000f897 <malloc>
c001681c:	83 c4 10             	add    esp,0x10
c001681f:	89 c3                	mov    ebx,eax
c0016821:	83 ec 08             	sub    esp,0x8
c0016824:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016828:	53                   	push   ebx
c0016829:	e8 ba c0 ff ff       	call   c00128e8 <VgaText::VgaText(char const*)>
c001682e:	83 c4 10             	add    esp,0x10
c0016831:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016835:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c001683b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016845:	83 ec 0c             	sub    esp,0xc
c0016848:	50                   	push   eax
c0016849:	e8 f0 b8 ff ff       	call   c001213e <addToTerminalCycle(VgaText*)>
c001684e:	83 c4 10             	add    esp,0x10
c0016851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016855:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001685b:	83 ec 0c             	sub    esp,0xc
c001685e:	50                   	push   eax
c001685f:	e8 4b bb ff ff       	call   c00123af <setActiveTerminal(VgaText*)>
c0016864:	83 c4 10             	add    esp,0x10
c0016867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686b:	05 0c 01 00 00       	add    eax,0x10c
c0016870:	83 ec 08             	sub    esp,0x8
c0016873:	68 c3 4d 02 c0       	push   0xc0024dc3
c0016878:	50                   	push   eax
c0016879:	e8 c2 9d fe ff       	call   c0000640 <strcpy>
c001687e:	83 c4 10             	add    esp,0x10
c0016881:	8d 76 00             	lea    esi,[esi+0x0]
c0016884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016888:	83 c0 0c             	add    eax,0xc
c001688b:	83 ec 08             	sub    esp,0x8
c001688e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016892:	50                   	push   eax
c0016893:	e8 a8 9d fe ff       	call   c0000640 <strcpy>
c0016898:	83 c4 10             	add    esp,0x10
c001689b:	83 ec 08             	sub    esp,0x8
c001689e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00168a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168a6:	e8 c1 fd ff ff       	call   c001666c <Process::addArgs(char**)>
c00168ab:	83 c4 10             	add    esp,0x10
c00168ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b2:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c00168b8:	83 e2 7f             	and    edx,0x7f
c00168bb:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c00168c1:	83 ec 08             	sub    esp,0x8
c00168c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168cc:	e8 16 ec ff ff       	call   c00154e7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00168d1:	83 c4 10             	add    esp,0x10
c00168d4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00168d8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00168dc:	83 f0 01             	xor    eax,0x1
c00168df:	88 c2                	mov    dl,al
c00168e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e5:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c00168eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00168f1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00168f6:	52                   	push   edx
c00168f7:	50                   	push   eax
c00168f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168fc:	68 1c 4e 02 c0       	push   0xc0024e1c
c0016901:	e8 76 06 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016906:	83 c4 10             	add    esp,0x10
c0016909:	90                   	nop
c001690a:	83 c4 14             	add    esp,0x14
c001690d:	5b                   	pop    ebx
c001690e:	5e                   	pop    esi
c001690f:	c3                   	ret    

c0016910 <Process::Process(bool, char const*, Process*, char**)>:
c0016910:	56                   	push   esi
c0016911:	53                   	push   ebx
c0016912:	83 ec 24             	sub    esp,0x24
c0016915:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016919:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001691d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016921:	05 0c 02 00 00       	add    eax,0x20c
c0016926:	bb 07 00 00 00       	mov    ebx,0x7
c001692b:	89 c6                	mov    esi,eax
c001692d:	8d 76 00             	lea    esi,[esi+0x0]
c0016930:	85 db                	test   ebx,ebx
c0016932:	78 14                	js     c0016948 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	56                   	push   esi
c0016938:	e8 83 b9 00 00       	call   c00222c0 <ThreadControlBlock::ThreadControlBlock()>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	83 c6 73             	add    esi,0x73
c0016943:	83 eb 01             	sub    ebx,0x1
c0016946:	eb e8                	jmp    c0016930 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016948:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001694c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016953:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016957:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001695e:	83 ec 0c             	sub    esp,0xc
c0016961:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016965:	e8 72 7c ff ff       	call   c000e5dc <KeNewProcessEnv(Process*)>
c001696a:	83 c4 10             	add    esp,0x10
c001696d:	89 c2                	mov    edx,eax
c001696f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016973:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016979:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001697d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016986:	a1 dc 69 02 c0       	mov    eax,ds:0xc00269dc
c001698b:	8d 50 01             	lea    edx,[eax+0x1]
c001698e:	89 15 dc 69 02 c0    	mov    DWORD PTR ds:0xc00269dc,edx
c0016994:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016998:	89 02                	mov    DWORD PTR [edx],eax
c001699a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00169a2:	83 ec 0c             	sub    esp,0xc
c00169a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00169a9:	e8 e9 8e ff ff       	call   c000f897 <malloc>
c00169ae:	83 c4 10             	add    esp,0x10
c00169b1:	89 c3                	mov    ebx,eax
c00169b3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00169b8:	83 ec 08             	sub    esp,0x8
c00169bb:	50                   	push   eax
c00169bc:	53                   	push   ebx
c00169bd:	e8 80 d3 ff ff       	call   c0013d42 <VAS::VAS(bool)>
c00169c2:	83 c4 10             	add    esp,0x10
c00169c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169c9:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00169cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169d3:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00169dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169e1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00169e5:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00169eb:	e8 13 a5 ff ff       	call   c0010f03 <KeInitSignals()>
c00169f0:	89 c2                	mov    edx,eax
c00169f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169f6:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c00169fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a00:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a06:	85 c0                	test   eax,eax
c0016a08:	74 42                	je     c0016a4c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016a0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a0e:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a14:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016a1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a1e:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016a24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a28:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a2e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016a34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a38:	05 0c 01 00 00       	add    eax,0x10c
c0016a3d:	83 ec 08             	sub    esp,0x8
c0016a40:	52                   	push   edx
c0016a41:	50                   	push   eax
c0016a42:	e8 f9 9b fe ff       	call   c0000640 <strcpy>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	eb 7c                	jmp    c0016ac8 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016a4c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016a54:	83 ec 0c             	sub    esp,0xc
c0016a57:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016a5b:	e8 37 8e ff ff       	call   c000f897 <malloc>
c0016a60:	83 c4 10             	add    esp,0x10
c0016a63:	89 c3                	mov    ebx,eax
c0016a65:	83 ec 08             	sub    esp,0x8
c0016a68:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a6c:	53                   	push   ebx
c0016a6d:	e8 76 be ff ff       	call   c00128e8 <VgaText::VgaText(char const*)>
c0016a72:	83 c4 10             	add    esp,0x10
c0016a75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a79:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016a7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a83:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016a89:	83 ec 0c             	sub    esp,0xc
c0016a8c:	50                   	push   eax
c0016a8d:	e8 ac b6 ff ff       	call   c001213e <addToTerminalCycle(VgaText*)>
c0016a92:	83 c4 10             	add    esp,0x10
c0016a95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a99:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016a9f:	83 ec 0c             	sub    esp,0xc
c0016aa2:	50                   	push   eax
c0016aa3:	e8 07 b9 ff ff       	call   c00123af <setActiveTerminal(VgaText*)>
c0016aa8:	83 c4 10             	add    esp,0x10
c0016aab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aaf:	05 0c 01 00 00       	add    eax,0x10c
c0016ab4:	83 ec 08             	sub    esp,0x8
c0016ab7:	68 c3 4d 02 c0       	push   0xc0024dc3
c0016abc:	50                   	push   eax
c0016abd:	e8 7e 9b fe ff       	call   c0000640 <strcpy>
c0016ac2:	83 c4 10             	add    esp,0x10
c0016ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ac8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016acc:	83 c0 0c             	add    eax,0xc
c0016acf:	83 ec 08             	sub    esp,0x8
c0016ad2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ad6:	50                   	push   eax
c0016ad7:	e8 64 9b fe ff       	call   c0000640 <strcpy>
c0016adc:	83 c4 10             	add    esp,0x10
c0016adf:	83 ec 08             	sub    esp,0x8
c0016ae2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ae6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016aea:	e8 7d fb ff ff       	call   c001666c <Process::addArgs(char**)>
c0016aef:	83 c4 10             	add    esp,0x10
c0016af2:	90                   	nop
c0016af3:	83 c4 24             	add    esp,0x24
c0016af6:	5b                   	pop    ebx
c0016af7:	5e                   	pop    esi
c0016af8:	c3                   	ret    
c0016af9:	8d 76 00             	lea    esi,[esi+0x0]

c0016afc <taskStartupFunction>:
c0016afc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b01:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016b04:	c3                   	ret    
c0016b05:	8d 76 00             	lea    esi,[esi+0x0]

c0016b08 <KeDisablePreemption()>:
c0016b08:	a1 4c ca 02 c0       	mov    eax,ds:0xc002ca4c
c0016b0d:	85 c0                	test   eax,eax
c0016b0f:	75 13                	jne    c0016b24 <KeDisablePreemption()+0x1c>
c0016b11:	8a 15 0c c1 02 c0    	mov    dl,BYTE PTR ds:0xc002c10c
c0016b17:	c6 05 0c c1 02 c0 00 	mov    BYTE PTR ds:0xc002c10c,0x0
c0016b1e:	88 15 48 ca 02 c0    	mov    BYTE PTR ds:0xc002ca48,dl
c0016b24:	83 c0 01             	add    eax,0x1
c0016b27:	a3 4c ca 02 c0       	mov    ds:0xc002ca4c,eax
c0016b2c:	c3                   	ret    
c0016b2d:	8d 76 00             	lea    esi,[esi+0x0]

c0016b30 <KeRestorePreemption()>:
c0016b30:	a1 4c ca 02 c0       	mov    eax,ds:0xc002ca4c
c0016b35:	83 e8 01             	sub    eax,0x1
c0016b38:	a3 4c ca 02 c0       	mov    ds:0xc002ca4c,eax
c0016b3d:	75 0d                	jne    c0016b4c <KeRestorePreemption()+0x1c>
c0016b3f:	a0 48 ca 02 c0       	mov    al,ds:0xc002ca48
c0016b44:	a2 0c c1 02 c0       	mov    ds:0xc002c10c,al
c0016b49:	8d 76 00             	lea    esi,[esi+0x0]
c0016b4c:	c3                   	ret    
c0016b4d:	90                   	nop
c0016b4e:	66 90                	xchg   ax,ax

c0016b50 <Process::createThread(void (*)(void*), void*, int)>:
c0016b50:	55                   	push   ebp
c0016b51:	31 c9                	xor    ecx,ecx
c0016b53:	57                   	push   edi
c0016b54:	56                   	push   esi
c0016b55:	53                   	push   ebx
c0016b56:	83 ec 0c             	sub    esp,0xc
c0016b59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016b5d:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016b64:	89 f2                	mov    edx,esi
c0016b66:	66 90                	xchg   ax,ax
c0016b68:	0f b7 c2             	movzx  eax,dx
c0016b6b:	80 e2 01             	and    dl,0x1
c0016b6e:	74 18                	je     c0016b88 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016b70:	d1 f8                	sar    eax,1
c0016b72:	83 c1 01             	add    ecx,0x1
c0016b75:	89 c2                	mov    edx,eax
c0016b77:	83 f9 10             	cmp    ecx,0x10
c0016b7a:	75 ec                	jne    c0016b68 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016b7c:	83 c4 0c             	add    esp,0xc
c0016b7f:	31 db                	xor    ebx,ebx
c0016b81:	89 d8                	mov    eax,ebx
c0016b83:	5b                   	pop    ebx
c0016b84:	5e                   	pop    esi
c0016b85:	5f                   	pop    edi
c0016b86:	5d                   	pop    ebp
c0016b87:	c3                   	ret    
c0016b88:	b8 01 00 00 00       	mov    eax,0x1
c0016b8d:	d3 e0                	shl    eax,cl
c0016b8f:	09 c6                	or     esi,eax
c0016b91:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016b94:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016b9b:	01 c0                	add    eax,eax
c0016b9d:	01 c8                	add    eax,ecx
c0016b9f:	01 c0                	add    eax,eax
c0016ba1:	01 c8                	add    eax,ecx
c0016ba3:	8d 04 80             	lea    eax,[eax+eax*4]
c0016ba6:	01 d8                	add    eax,ebx
c0016ba8:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016baf:	75 0b                	jne    c0016bbc <Process::createThread(void (*)(void*), void*, int)+0x6c>
c0016bb1:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016bbb:	90                   	nop
c0016bbc:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016bc2:	83 ec 0c             	sub    esp,0xc
c0016bc5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016bc8:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016bcb:	01 c0                	add    eax,eax
c0016bcd:	01 c8                	add    eax,ecx
c0016bcf:	01 c0                	add    eax,eax
c0016bd1:	01 c8                	add    eax,ecx
c0016bd3:	8d 3c 80             	lea    edi,[eax+eax*4]
c0016bd6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016bd9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016bdf:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016be5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016be9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016bef:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016bf5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016bfb:	89 ca                	mov    edx,ecx
c0016bfd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016c04:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016c08:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016c12:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016c1c:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016c23:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016c2a:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016c31:	f7 da                	neg    edx
c0016c33:	c1 e2 15             	shl    edx,0x15
c0016c36:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016c3c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016c42:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016c46:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016c50:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016c56:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016c5c:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016c62:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016c6c:	83 e2 80             	and    edx,0xffffff80
c0016c6f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016c79:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016c7f:	68 00 01 00 00       	push   0x100
c0016c84:	e8 0e 8c ff ff       	call   c000f897 <malloc>
c0016c89:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016c8c:	58                   	pop    eax
c0016c8d:	5a                   	pop    edx
c0016c8e:	53                   	push   ebx
c0016c8f:	68 8c ca 02 c0       	push   0xc002ca8c
c0016c94:	e8 d3 b1 00 00       	call   c0021e6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c99:	89 d8                	mov    eax,ebx
c0016c9b:	83 c4 10             	add    esp,0x10
c0016c9e:	83 c4 0c             	add    esp,0xc
c0016ca1:	5b                   	pop    ebx
c0016ca2:	5e                   	pop    esi
c0016ca3:	5f                   	pop    edi
c0016ca4:	5d                   	pop    ebp
c0016ca5:	c3                   	ret    
c0016ca6:	66 90                	xchg   ax,ax

c0016ca8 <Process::createUserThread()>:
c0016ca8:	83 ec 0c             	sub    esp,0xc
c0016cab:	68 80 00 00 00       	push   0x80
c0016cb0:	6a 00                	push   0x0
c0016cb2:	68 50 65 01 c0       	push   0xc0016550
c0016cb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cbb:	50                   	push   eax
c0016cbc:	e8 8f fe ff ff       	call   c0016b50 <Process::createThread(void (*)(void*), void*, int)>
c0016cc1:	83 c4 1c             	add    esp,0x1c
c0016cc4:	c3                   	ret    
c0016cc5:	8d 76 00             	lea    esi,[esi+0x0]

c0016cc8 <setupMultitasking(void (*)())>:
c0016cc8:	56                   	push   esi
c0016cc9:	53                   	push   ebx
c0016cca:	83 ec 04             	sub    esp,0x4
c0016ccd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cd1:	eb 11                	jmp    c0016ce4 <setupMultitasking(void (*)())+0x1c>
c0016cd3:	90                   	nop
c0016cd4:	83 ec 0c             	sub    esp,0xc
c0016cd7:	68 8c ca 02 c0       	push   0xc002ca8c
c0016cdc:	e8 cf b0 00 00       	call   c0021db0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016ce1:	83 c4 10             	add    esp,0x10
c0016ce4:	83 ec 0c             	sub    esp,0xc
c0016ce7:	68 8c ca 02 c0       	push   0xc002ca8c
c0016cec:	e8 9b b0 00 00       	call   c0021d8c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016cf1:	83 c4 10             	add    esp,0x10
c0016cf4:	84 c0                	test   al,al
c0016cf6:	74 dc                	je     c0016cd4 <setupMultitasking(void (*)())+0xc>
c0016cf8:	83 ec 0c             	sub    esp,0xc
c0016cfb:	68 c4 07 00 00       	push   0x7c4
c0016d00:	e8 92 8b ff ff       	call   c000f897 <malloc>
c0016d05:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016d0c:	89 c3                	mov    ebx,eax
c0016d0e:	6a 00                	push   0x0
c0016d10:	68 c7 4d 02 c0       	push   0xc0024dc7
c0016d15:	6a 01                	push   0x1
c0016d17:	50                   	push   eax
c0016d18:	e8 f3 fb ff ff       	call   c0016910 <Process::Process(bool, char const*, Process*, char**)>
c0016d1d:	83 c4 14             	add    esp,0x14
c0016d20:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016d26:	89 1d 98 ca 02 c0    	mov    DWORD PTR ds:0xc002ca98,ebx
c0016d2c:	50                   	push   eax
c0016d2d:	e8 7d b6 ff ff       	call   c00123af <setActiveTerminal(VgaText*)>
c0016d32:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016d39:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016d43:	83 c8 01             	or     eax,0x1
c0016d46:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016d4d:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016d53:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016d56:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016d60:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016d66:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016d6c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016d76:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0016d80:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016d8a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016d90:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016d9a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016da0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016daa:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016db1:	e8 e1 8a ff ff       	call   c000f897 <malloc>
c0016db6:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016dc0:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016dc6:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c0016dcd:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c0016dd4:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c0016ddb:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0016de2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016de8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016dee:	5a                   	pop    edx
c0016def:	59                   	pop    ecx
c0016df0:	68 c3 4d 02 c0       	push   0xc0024dc3
c0016df5:	50                   	push   eax
c0016df6:	e8 45 98 fe ff       	call   c0000640 <strcpy>
c0016dfb:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016e02:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016e06:	83 c4 14             	add    esp,0x14
c0016e09:	5b                   	pop    ebx
c0016e0a:	5e                   	pop    esi
c0016e0b:	e9 59 94 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0016e10 <schedule()>:
c0016e10:	8b 15 6c ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca6c
c0016e16:	85 d2                	test   edx,edx
c0016e18:	74 0e                	je     c0016e28 <schedule()+0x18>
c0016e1a:	c7 05 68 ca 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x1
c0016e24:	c3                   	ret    
c0016e25:	8d 76 00             	lea    esi,[esi+0x0]
c0016e28:	53                   	push   ebx
c0016e29:	83 ec 14             	sub    esp,0x14
c0016e2c:	68 8c ca 02 c0       	push   0xc002ca8c
c0016e31:	e8 56 af 00 00       	call   c0021d8c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e36:	83 c4 10             	add    esp,0x10
c0016e39:	84 c0                	test   al,al
c0016e3b:	75 3f                	jne    c0016e7c <schedule()+0x6c>
c0016e3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e42:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016e45:	83 fa 01             	cmp    edx,0x1
c0016e48:	74 3a                	je     c0016e84 <schedule()+0x74>
c0016e4a:	66 90                	xchg   ax,ax
c0016e4c:	83 ec 0c             	sub    esp,0xc
c0016e4f:	68 8c ca 02 c0       	push   0xc002ca8c
c0016e54:	e8 4f af 00 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e59:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c0016e60:	89 c3                	mov    ebx,eax
c0016e62:	e8 49 af 00 00       	call   c0021db0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e67:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016e6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e71:	e8 36 f7 ff ff       	call   c00165ac <switchToThread(ThreadControlBlock*)>
c0016e76:	83 c4 10             	add    esp,0x10
c0016e79:	8d 76 00             	lea    esi,[esi+0x0]
c0016e7c:	83 c4 08             	add    esp,0x8
c0016e7f:	5b                   	pop    ebx
c0016e80:	c3                   	ret    
c0016e81:	8d 76 00             	lea    esi,[esi+0x0]
c0016e84:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016e8b:	83 ec 08             	sub    esp,0x8
c0016e8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e93:	50                   	push   eax
c0016e94:	68 8c ca 02 c0       	push   0xc002ca8c
c0016e99:	e8 ce af 00 00       	call   c0021e6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e9e:	83 c4 10             	add    esp,0x10
c0016ea1:	eb a9                	jmp    c0016e4c <schedule()+0x3c>
c0016ea3:	90                   	nop

c0016ea4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016ea4:	83 ec 0c             	sub    esp,0xc
c0016ea7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016eb0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016eb3:	e8 58 ff ff ff       	call   c0016e10 <schedule()>
c0016eb8:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016ec0:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016ec5:	85 c0                	test   eax,eax
c0016ec7:	75 03                	jne    c0016ecc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016ec9:	fb                   	sti    
c0016eca:	66 90                	xchg   ax,ax
c0016ecc:	83 c4 0c             	add    esp,0xc
c0016ecf:	c3                   	ret    

c0016ed0 <blockTask(TaskState)>:
c0016ed0:	83 ec 0c             	sub    esp,0xc
c0016ed3:	fa                   	cli    
c0016ed4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016ed9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016edd:	83 c0 01             	add    eax,0x1
c0016ee0:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0016ee5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016eed:	e8 1e ff ff ff       	call   c0016e10 <schedule()>
c0016ef2:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016efa:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0016f00:	85 d2                	test   edx,edx
c0016f02:	75 04                	jne    c0016f08 <blockTask(TaskState)+0x38>
c0016f04:	fb                   	sti    
c0016f05:	8d 76 00             	lea    esi,[esi+0x0]
c0016f08:	83 c4 0c             	add    esp,0xc
c0016f0b:	c3                   	ret    

c0016f0c <waitTask(int, int*, int)>:
c0016f0c:	83 ec 18             	sub    esp,0x18
c0016f0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016f18:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016f1b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016f1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f24:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0016f27:	6a 07                	push   0x7
c0016f29:	e8 a2 ff ff ff       	call   c0016ed0 <blockTask(TaskState)>
c0016f2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f33:	83 c4 10             	add    esp,0x10
c0016f36:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0016f39:	85 d2                	test   edx,edx
c0016f3b:	74 0b                	je     c0016f48 <waitTask(int, int*, int)+0x3c>
c0016f3d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0016f40:	89 02                	mov    DWORD PTR [edx],eax
c0016f42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f47:	90                   	nop
c0016f48:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0016f4b:	83 c4 0c             	add    esp,0xc
c0016f4e:	c3                   	ret    
c0016f4f:	90                   	nop

c0016f50 <milliTenthSleepUntil(unsigned long long)>:
c0016f50:	83 ec 0c             	sub    esp,0xc
c0016f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016f5b:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c0016f61:	89 d1                	mov    ecx,edx
c0016f63:	1b 0d 54 bb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002bb54
c0016f69:	73 05                	jae    c0016f70 <milliTenthSleepUntil(unsigned long long)+0x20>
c0016f6b:	90                   	nop
c0016f6c:	83 c4 0c             	add    esp,0xc
c0016f6f:	c3                   	ret    
c0016f70:	fa                   	cli    
c0016f71:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c0016f77:	83 ec 08             	sub    esp,0x8
c0016f7a:	83 c1 01             	add    ecx,0x1
c0016f7d:	89 0d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ecx
c0016f83:	8b 0d 6c ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca6c
c0016f89:	83 c1 01             	add    ecx,0x1
c0016f8c:	89 0d 6c ca 02 c0    	mov    DWORD PTR ds:0xc002ca6c,ecx
c0016f92:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f98:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0016f9b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0016f9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fa3:	50                   	push   eax
c0016fa4:	68 80 ca 02 c0       	push   0xc002ca80
c0016fa9:	e8 be ae 00 00       	call   c0021e6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016fae:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016fb5:	e8 16 ff ff ff       	call   c0016ed0 <blockTask(TaskState)>
c0016fba:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0016fbf:	83 c4 10             	add    esp,0x10
c0016fc2:	83 e8 01             	sub    eax,0x1
c0016fc5:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0016fca:	85 c0                	test   eax,eax
c0016fcc:	75 0a                	jne    c0016fd8 <milliTenthSleepUntil(unsigned long long)+0x88>
c0016fce:	8b 15 68 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca68
c0016fd4:	85 d2                	test   edx,edx
c0016fd6:	75 18                	jne    c0016ff0 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0016fd8:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016fe0:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016fe5:	85 c0                	test   eax,eax
c0016fe7:	75 83                	jne    c0016f6c <milliTenthSleepUntil(unsigned long long)+0x1c>
c0016fe9:	fb                   	sti    
c0016fea:	83 c4 0c             	add    esp,0xc
c0016fed:	c3                   	ret    
c0016fee:	66 90                	xchg   ax,ax
c0016ff0:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0016ffa:	e8 11 fe ff ff       	call   c0016e10 <schedule()>
c0016fff:	eb d7                	jmp    c0016fd8 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017001:	8d 76 00             	lea    esi,[esi+0x0]

c0017004 <milliTenthSleep(unsigned long long)>:
c0017004:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0017009:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c001700f:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017013:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017017:	e9 34 ff ff ff       	jmp    c0016f50 <milliTenthSleepUntil(unsigned long long)>

c001701c <sleep(unsigned long long)>:
c001701c:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0017024:	b8 10 27 00 00       	mov    eax,0x2710
c0017029:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001702d:	01 ca                	add    edx,ecx
c001702f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017033:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017037:	eb cb                	jmp    c0017004 <milliTenthSleep(unsigned long long)>
c0017039:	8d 76 00             	lea    esi,[esi+0x0]

c001703c <sleep(unsigned int)>:
c001703c:	83 ec 14             	sub    esp,0x14
c001703f:	b8 10 27 00 00       	mov    eax,0x2710
c0017044:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017048:	52                   	push   edx
c0017049:	50                   	push   eax
c001704a:	e8 b5 ff ff ff       	call   c0017004 <milliTenthSleep(unsigned long long)>
c001704f:	83 c4 1c             	add    esp,0x1c
c0017052:	c3                   	ret    
c0017053:	90                   	nop

c0017054 <milliTenthSleep(unsigned int)>:
c0017054:	83 ec 14             	sub    esp,0x14
c0017057:	31 d2                	xor    edx,edx
c0017059:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001705d:	03 05 50 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb50
c0017063:	13 15 54 bb 02 c0    	adc    edx,DWORD PTR ds:0xc002bb54
c0017069:	52                   	push   edx
c001706a:	50                   	push   eax
c001706b:	e8 e0 fe ff ff       	call   c0016f50 <milliTenthSleepUntil(unsigned long long)>
c0017070:	83 c4 1c             	add    esp,0x1c
c0017073:	c3                   	ret    

c0017074 <taskReturned>:
c0017074:	83 ec 18             	sub    esp,0x18
c0017077:	68 50 4e 02 c0       	push   0xc0024e50
c001707c:	e8 73 8c ff ff       	call   c000fcf4 <KePanic(char const*)>
c0017081:	83 c4 10             	add    esp,0x10
c0017084:	83 ec 0c             	sub    esp,0xc
c0017087:	6a 02                	push   0x2
c0017089:	e8 42 fe ff ff       	call   c0016ed0 <blockTask(TaskState)>
c001708e:	fa                   	cli    
c001708f:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017094:	83 c0 01             	add    eax,0x1
c0017097:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c001709c:	e8 6f fd ff ff       	call   c0016e10 <schedule()>
c00170a1:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00170a9:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c00170af:	83 c4 10             	add    esp,0x10
c00170b2:	85 d2                	test   edx,edx
c00170b4:	75 ce                	jne    c0017084 <taskReturned+0x10>
c00170b6:	fb                   	sti    
c00170b7:	eb cb                	jmp    c0017084 <taskReturned+0x10>
c00170b9:	8d 76 00             	lea    esi,[esi+0x0]

c00170bc <KeProcessFromPID(int)>:
c00170bc:	57                   	push   edi
c00170bd:	56                   	push   esi
c00170be:	53                   	push   ebx
c00170bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00170c3:	fa                   	cli    
c00170c4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00170c9:	83 ec 0c             	sub    esp,0xc
c00170cc:	83 c0 01             	add    eax,0x1
c00170cf:	68 8c ca 02 c0       	push   0xc002ca8c
c00170d4:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c00170d9:	e8 ca ac 00 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00170de:	83 c4 10             	add    esp,0x10
c00170e1:	89 c7                	mov    edi,eax
c00170e3:	eb 17                	jmp    c00170fc <KeProcessFromPID(int)+0x40>
c00170e5:	8d 76 00             	lea    esi,[esi+0x0]
c00170e8:	83 ec 0c             	sub    esp,0xc
c00170eb:	68 8c ca 02 c0       	push   0xc002ca8c
c00170f0:	e8 b3 ac 00 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00170f5:	83 c4 10             	add    esp,0x10
c00170f8:	39 f8                	cmp    eax,edi
c00170fa:	74 50                	je     c001714c <KeProcessFromPID(int)+0x90>
c00170fc:	83 ec 0c             	sub    esp,0xc
c00170ff:	68 8c ca 02 c0       	push   0xc002ca8c
c0017104:	e8 9f ac 00 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017109:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c0017110:	89 c3                	mov    ebx,eax
c0017112:	e8 99 ac 00 00       	call   c0021db0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017117:	59                   	pop    ecx
c0017118:	58                   	pop    eax
c0017119:	53                   	push   ebx
c001711a:	68 8c ca 02 c0       	push   0xc002ca8c
c001711f:	e8 48 ad 00 00       	call   c0021e6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017124:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017127:	83 c4 10             	add    esp,0x10
c001712a:	39 30                	cmp    DWORD PTR [eax],esi
c001712c:	75 ba                	jne    c00170e8 <KeProcessFromPID(int)+0x2c>
c001712e:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017136:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c001713c:	85 d2                	test   edx,edx
c001713e:	74 08                	je     c0017148 <KeProcessFromPID(int)+0x8c>
c0017140:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017143:	5b                   	pop    ebx
c0017144:	5e                   	pop    esi
c0017145:	5f                   	pop    edi
c0017146:	c3                   	ret    
c0017147:	90                   	nop
c0017148:	fb                   	sti    
c0017149:	eb f5                	jmp    c0017140 <KeProcessFromPID(int)+0x84>
c001714b:	90                   	nop
c001714c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017154:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017159:	85 c0                	test   eax,eax
c001715b:	75 07                	jne    c0017164 <KeProcessFromPID(int)+0xa8>
c001715d:	fb                   	sti    
c001715e:	31 c0                	xor    eax,eax
c0017160:	5b                   	pop    ebx
c0017161:	5e                   	pop    esi
c0017162:	5f                   	pop    edi
c0017163:	c3                   	ret    
c0017164:	5b                   	pop    ebx
c0017165:	31 c0                	xor    eax,eax
c0017167:	5e                   	pop    esi
c0017168:	5f                   	pop    edi
c0017169:	c3                   	ret    
c001716a:	66 90                	xchg   ax,ax

c001716c <unblockTask(ThreadControlBlock*)>:
c001716c:	53                   	push   ebx
c001716d:	83 ec 08             	sub    esp,0x8
c0017170:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017174:	fa                   	cli    
c0017175:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c001717b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001717e:	83 c2 01             	add    edx,0x1
c0017181:	85 c0                	test   eax,eax
c0017183:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c0017189:	74 6d                	je     c00171f8 <unblockTask(ThreadControlBlock*)+0x8c>
c001718b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001718e:	83 f8 01             	cmp    eax,0x1
c0017191:	74 39                	je     c00171cc <unblockTask(ThreadControlBlock*)+0x60>
c0017193:	83 ec 0c             	sub    esp,0xc
c0017196:	68 8c ca 02 c0       	push   0xc002ca8c
c001719b:	e8 08 ac 00 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00171a0:	83 c4 10             	add    esp,0x10
c00171a3:	85 c0                	test   eax,eax
c00171a5:	75 1d                	jne    c00171c4 <unblockTask(ThreadControlBlock*)+0x58>
c00171a7:	eb 63                	jmp    c001720c <unblockTask(ThreadControlBlock*)+0xa0>
c00171a9:	8d 76 00             	lea    esi,[esi+0x0]
c00171ac:	83 ec 08             	sub    esp,0x8
c00171af:	50                   	push   eax
c00171b0:	68 8c ca 02 c0       	push   0xc002ca8c
c00171b5:	e8 fa b0 00 00       	call   c00222b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00171ba:	83 c4 10             	add    esp,0x10
c00171bd:	85 c0                	test   eax,eax
c00171bf:	74 4b                	je     c001720c <unblockTask(ThreadControlBlock*)+0xa0>
c00171c1:	8d 76 00             	lea    esi,[esi+0x0]
c00171c4:	39 c3                	cmp    ebx,eax
c00171c6:	75 e4                	jne    c00171ac <unblockTask(ThreadControlBlock*)+0x40>
c00171c8:	eb 12                	jmp    c00171dc <unblockTask(ThreadControlBlock*)+0x70>
c00171ca:	66 90                	xchg   ax,ax
c00171cc:	83 ec 0c             	sub    esp,0xc
c00171cf:	68 e5 4d 02 c0       	push   0xc0024de5
c00171d4:	e8 a3 fd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00171d9:	83 c4 10             	add    esp,0x10
c00171dc:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00171e4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00171e9:	85 c0                	test   eax,eax
c00171eb:	75 03                	jne    c00171f0 <unblockTask(ThreadControlBlock*)+0x84>
c00171ed:	fb                   	sti    
c00171ee:	66 90                	xchg   ax,ax
c00171f0:	83 c4 08             	add    esp,0x8
c00171f3:	5b                   	pop    ebx
c00171f4:	c3                   	ret    
c00171f5:	8d 76 00             	lea    esi,[esi+0x0]
c00171f8:	83 ec 0c             	sub    esp,0xc
c00171fb:	68 ce 4d 02 c0       	push   0xc0024dce
c0017200:	e8 77 fd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017205:	83 c4 10             	add    esp,0x10
c0017208:	eb d2                	jmp    c00171dc <unblockTask(ThreadControlBlock*)+0x70>
c001720a:	66 90                	xchg   ax,ax
c001720c:	83 ec 08             	sub    esp,0x8
c001720f:	53                   	push   ebx
c0017210:	68 8c ca 02 c0       	push   0xc002ca8c
c0017215:	e8 52 ac 00 00       	call   c0021e6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001721a:	83 c4 10             	add    esp,0x10
c001721d:	eb bd                	jmp    c00171dc <unblockTask(ThreadControlBlock*)+0x70>
c001721f:	90                   	nop

c0017220 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017220:	55                   	push   ebp
c0017221:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017226:	57                   	push   edi
c0017227:	56                   	push   esi
c0017228:	53                   	push   ebx
c0017229:	83 ec 1c             	sub    esp,0x1c
c001722c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017230:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017233:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017236:	d3 c0                	rol    eax,cl
c0017238:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c001723f:	21 c8                	and    eax,ecx
c0017241:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017248:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001724b:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017253:	0f 85 b7 01 00 00    	jne    c0017410 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017259:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c001725f:	85 ed                	test   ebp,ebp
c0017261:	7e 29                	jle    c001728c <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017263:	31 f6                	xor    esi,esi
c0017265:	8d 76 00             	lea    esi,[esi+0x0]
c0017268:	83 ec 0c             	sub    esp,0xc
c001726b:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0017272:	83 c6 01             	add    esi,0x1
c0017275:	57                   	push   edi
c0017276:	e8 2c 86 ff ff       	call   c000f8a7 <free>
c001727b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001727e:	83 c4 10             	add    esp,0x10
c0017281:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0017287:	7f df                	jg     c0017268 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0017289:	8d 76 00             	lea    esi,[esi+0x0]
c001728c:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0017296:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017299:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c001729f:	89 f7                	mov    edi,esi
c00172a1:	85 ed                	test   ebp,ebp
c00172a3:	74 1b                	je     c00172c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00172a5:	83 ec 0c             	sub    esp,0xc
c00172a8:	55                   	push   ebp
c00172a9:	e8 4a 72 ff ff       	call   c000e4f8 <EnvVarContainer::~EnvVarContainer()>
c00172ae:	59                   	pop    ecx
c00172af:	5e                   	pop    esi
c00172b0:	6a 0c                	push   0xc
c00172b2:	55                   	push   ebp
c00172b3:	e8 f8 60 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00172b8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00172bb:	83 c4 10             	add    esp,0x10
c00172be:	89 f7                	mov    edi,esi
c00172c0:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00172c6:	85 c0                	test   eax,eax
c00172c8:	0f 84 b6 00 00 00    	je     c0017384 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00172ce:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00172d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172d5:	31 c9                	xor    ecx,ecx
c00172d7:	eb 17                	jmp    c00172f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00172d9:	8d 76 00             	lea    esi,[esi+0x0]
c00172dc:	83 c1 01             	add    ecx,0x1
c00172df:	83 f9 10             	cmp    ecx,0x10
c00172e2:	0f 84 9c 00 00 00    	je     c0017384 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00172e8:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00172ee:	66 90                	xchg   ax,ax
c00172f0:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c00172f7:	d3 fa                	sar    edx,cl
c00172f9:	80 e2 01             	and    dl,0x1
c00172fc:	74 de                	je     c00172dc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00172fe:	8d 14 89             	lea    edx,[ecx+ecx*4]
c0017301:	01 d2                	add    edx,edx
c0017303:	01 ca                	add    edx,ecx
c0017305:	01 d2                	add    edx,edx
c0017307:	01 ca                	add    edx,ecx
c0017309:	8d 14 92             	lea    edx,[edx+edx*4]
c001730c:	01 d0                	add    eax,edx
c001730e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017314:	83 fd 07             	cmp    ebp,0x7
c0017317:	75 c3                	jne    c00172dc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017319:	05 40 02 00 00       	add    eax,0x240
c001731e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017321:	83 fd ff             	cmp    ebp,0xffffffff
c0017324:	0f 8c ee 00 00 00    	jl     c0017418 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001732a:	0f 84 ac 01 00 00    	je     c00174dc <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0017330:	85 ed                	test   ebp,ebp
c0017332:	0f 84 90 01 00 00    	je     c00174c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c0017338:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001733a:	75 a0                	jne    c00172dc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001733c:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017342:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017346:	01 d0                	add    eax,edx
c0017348:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001734c:	83 ec 0c             	sub    esp,0xc
c001734f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017355:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017358:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001735e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017365:	50                   	push   eax
c0017366:	e8 01 fe ff ff       	call   c001716c <unblockTask(ThreadControlBlock*)>
c001736b:	83 c4 10             	add    esp,0x10
c001736e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017371:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017375:	89 f7                	mov    edi,esi
c0017377:	83 c1 01             	add    ecx,0x1
c001737a:	83 f9 10             	cmp    ecx,0x10
c001737d:	0f 85 65 ff ff ff    	jne    c00172e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0017383:	90                   	nop
c0017384:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c001738a:	85 c0                	test   eax,eax
c001738c:	74 62                	je     c00173f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c001738e:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0017394:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c001739a:	74 54                	je     c00173f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c001739c:	83 ec 0c             	sub    esp,0xc
c001739f:	68 8c ca 02 c0       	push   0xc002ca8c
c00173a4:	e8 ff a9 00 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173a9:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c00173b0:	89 c7                	mov    edi,eax
c00173b2:	e8 d5 a9 00 00       	call   c0021d8c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00173b7:	83 c4 10             	add    esp,0x10
c00173ba:	84 c0                	test   al,al
c00173bc:	0f 84 ce 00 00 00    	je     c0017490 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c00173c2:	66 90                	xchg   ax,ax
c00173c4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173c7:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00173cd:	85 d2                	test   edx,edx
c00173cf:	74 0f                	je     c00173e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00173d1:	83 ec 0c             	sub    esp,0xc
c00173d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00173d6:	52                   	push   edx
c00173d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00173da:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173dd:	83 c4 10             	add    esp,0x10
c00173e0:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c00173ea:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00173ed:	8d 76 00             	lea    esi,[esi+0x0]
c00173f0:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c00173f6:	85 db                	test   ebx,ebx
c00173f8:	74 16                	je     c0017410 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c00173fa:	83 ec 0c             	sub    esp,0xc
c00173fd:	53                   	push   ebx
c00173fe:	e8 9f c4 ff ff       	call   c00138a2 <VAS::~VAS()>
c0017403:	58                   	pop    eax
c0017404:	5a                   	pop    edx
c0017405:	6a 14                	push   0x14
c0017407:	53                   	push   ebx
c0017408:	e8 a3 5f ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c001740d:	83 c4 10             	add    esp,0x10
c0017410:	83 c4 1c             	add    esp,0x1c
c0017413:	5b                   	pop    ebx
c0017414:	5e                   	pop    esi
c0017415:	5f                   	pop    edi
c0017416:	5d                   	pop    ebp
c0017417:	c3                   	ret    
c0017418:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001741c:	83 ec 0c             	sub    esp,0xc
c001741f:	68 84 4e 02 c0       	push   0xc0024e84
c0017424:	e8 cb 88 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0017429:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001742c:	83 c4 10             	add    esp,0x10
c001742f:	89 f7                	mov    edi,esi
c0017431:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017435:	e9 a2 fe ff ff       	jmp    c00172dc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001743a:	66 90                	xchg   ax,ax
c001743c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017442:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017448:	75 1e                	jne    c0017468 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c001744a:	83 ec 0c             	sub    esp,0xc
c001744d:	68 ec 4e 02 c0       	push   0xc0024eec
c0017452:	e8 25 fb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017457:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001745e:	e8 6d fa ff ff       	call   c0016ed0 <blockTask(TaskState)>
c0017463:	83 c4 10             	add    esp,0x10
c0017466:	66 90                	xchg   ax,ax
c0017468:	83 ec 08             	sub    esp,0x8
c001746b:	56                   	push   esi
c001746c:	68 8c ca 02 c0       	push   0xc002ca8c
c0017471:	e8 f6 a9 00 00       	call   c0021e6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017476:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c001747d:	e8 26 a9 00 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017482:	83 c4 10             	add    esp,0x10
c0017485:	39 f8                	cmp    eax,edi
c0017487:	0f 84 37 ff ff ff    	je     c00173c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c001748d:	8d 76 00             	lea    esi,[esi+0x0]
c0017490:	83 ec 0c             	sub    esp,0xc
c0017493:	68 8c ca 02 c0       	push   0xc002ca8c
c0017498:	e8 0b a9 00 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001749d:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c00174a4:	89 c6                	mov    esi,eax
c00174a6:	e8 05 a9 00 00       	call   c0021db0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00174ab:	83 c4 10             	add    esp,0x10
c00174ae:	39 f3                	cmp    ebx,esi
c00174b0:	74 b6                	je     c0017468 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00174b2:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00174b5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00174b8:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00174be:	75 a8                	jne    c0017468 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00174c0:	e9 77 ff ff ff       	jmp    c001743c <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c00174c5:	8d 76 00             	lea    esi,[esi+0x0]
c00174c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00174cc:	83 ec 0c             	sub    esp,0xc
c00174cf:	68 b8 4e 02 c0       	push   0xc0024eb8
c00174d4:	e9 4b ff ff ff       	jmp    c0017424 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c00174d9:	8d 76 00             	lea    esi,[esi+0x0]
c00174dc:	8b 36                	mov    esi,DWORD PTR [esi]
c00174de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00174e2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00174e5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00174e8:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c00174ee:	01 d7                	add    edi,edx
c00174f0:	89 f8                	mov    eax,edi
c00174f2:	e9 51 fe ff ff       	jmp    c0017348 <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c00174f7:	90                   	nop

c00174f8 <cleanerTaskFunction(void*)>:
c00174f8:	53                   	push   ebx
c00174f9:	83 ec 08             	sub    esp,0x8
c00174fc:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017504:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017509:	85 c0                	test   eax,eax
c001750b:	75 03                	jne    c0017510 <cleanerTaskFunction(void*)+0x18>
c001750d:	fb                   	sti    
c001750e:	66 90                	xchg   ax,ax
c0017510:	fa                   	cli    
c0017511:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017516:	83 c0 01             	add    eax,0x1
c0017519:	80 3d 54 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca54,0x0
c0017520:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017525:	0f 85 c9 00 00 00    	jne    c00175f4 <cleanerTaskFunction(void*)+0xfc>
c001752b:	83 ec 0c             	sub    esp,0xc
c001752e:	6a 02                	push   0x2
c0017530:	e8 6f f9 ff ff       	call   c0016ea4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017535:	83 c4 10             	add    esp,0x10
c0017538:	c6 05 54 ca 02 c0 00 	mov    BYTE PTR ds:0xc002ca54,0x0
c001753f:	fa                   	cli    
c0017540:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c0017546:	8b 1d 6c ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca6c
c001754c:	83 c1 01             	add    ecx,0x1
c001754f:	83 c3 01             	add    ebx,0x1
c0017552:	89 0d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ecx
c0017558:	89 1d 6c ca 02 c0    	mov    DWORD PTR ds:0xc002ca6c,ebx
c001755e:	fa                   	cli    
c001755f:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017564:	83 c0 01             	add    eax,0x1
c0017567:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c001756c:	eb 2a                	jmp    c0017598 <cleanerTaskFunction(void*)+0xa0>
c001756e:	66 90                	xchg   ax,ax
c0017570:	83 ec 0c             	sub    esp,0xc
c0017573:	68 74 ca 02 c0       	push   0xc002ca74
c0017578:	e8 2b a8 00 00       	call   c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001757d:	c7 04 24 74 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca74
c0017584:	89 c3                	mov    ebx,eax
c0017586:	e8 25 a8 00 00       	call   c0021db0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001758b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001758e:	e8 8d fc ff ff       	call   c0017220 <cleanupTerminatedTask(ThreadControlBlock*)>
c0017593:	83 c4 10             	add    esp,0x10
c0017596:	66 90                	xchg   ax,ax
c0017598:	83 ec 0c             	sub    esp,0xc
c001759b:	68 74 ca 02 c0       	push   0xc002ca74
c00175a0:	e8 e7 a7 00 00       	call   c0021d8c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00175a5:	83 c4 10             	add    esp,0x10
c00175a8:	84 c0                	test   al,al
c00175aa:	74 c4                	je     c0017570 <cleanerTaskFunction(void*)+0x78>
c00175ac:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00175b4:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c00175ba:	85 d2                	test   edx,edx
c00175bc:	75 02                	jne    c00175c0 <cleanerTaskFunction(void*)+0xc8>
c00175be:	fb                   	sti    
c00175bf:	90                   	nop
c00175c0:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00175c5:	83 e8 01             	sub    eax,0x1
c00175c8:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00175cd:	0f 85 29 ff ff ff    	jne    c00174fc <cleanerTaskFunction(void*)+0x4>
c00175d3:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c00175d8:	85 c0                	test   eax,eax
c00175da:	0f 84 1c ff ff ff    	je     c00174fc <cleanerTaskFunction(void*)+0x4>
c00175e0:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c00175ea:	e8 21 f8 ff ff       	call   c0016e10 <schedule()>
c00175ef:	e9 08 ff ff ff       	jmp    c00174fc <cleanerTaskFunction(void*)+0x4>
c00175f4:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00175fc:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017601:	85 c0                	test   eax,eax
c0017603:	0f 85 2f ff ff ff    	jne    c0017538 <cleanerTaskFunction(void*)+0x40>
c0017609:	fb                   	sti    
c001760a:	e9 29 ff ff ff       	jmp    c0017538 <cleanerTaskFunction(void*)+0x40>
c001760f:	90                   	nop

c0017610 <KeTerminateCurrentThread(int)>:
c0017610:	83 ec 14             	sub    esp,0x14
c0017613:	fa                   	cli    
c0017614:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017619:	83 c0 01             	add    eax,0x1
c001761c:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017621:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0017626:	83 c0 01             	add    eax,0x1
c0017629:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c001762e:	fa                   	cli    
c001762f:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017634:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017638:	83 c0 01             	add    eax,0x1
c001763b:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017640:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017645:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017648:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001764d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017650:	50                   	push   eax
c0017651:	68 74 ca 02 c0       	push   0xc002ca74
c0017656:	e8 11 a8 00 00       	call   c0021e6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001765b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017660:	83 c4 10             	add    esp,0x10
c0017663:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001766a:	a1 50 ca 02 c0       	mov    eax,ds:0xc002ca50
c001766f:	85 c0                	test   eax,eax
c0017671:	0f 84 81 00 00 00    	je     c00176f8 <KeTerminateCurrentThread(int)+0xe8>
c0017677:	83 ec 0c             	sub    esp,0xc
c001767a:	c6 05 54 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca54,0x1
c0017681:	50                   	push   eax
c0017682:	e8 e5 fa ff ff       	call   c001716c <unblockTask(ThreadControlBlock*)>
c0017687:	83 c4 10             	add    esp,0x10
c001768a:	66 90                	xchg   ax,ax
c001768c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017694:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017699:	85 c0                	test   eax,eax
c001769b:	75 03                	jne    c00176a0 <KeTerminateCurrentThread(int)+0x90>
c001769d:	fb                   	sti    
c001769e:	66 90                	xchg   ax,ax
c00176a0:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00176a5:	83 e8 01             	sub    eax,0x1
c00176a8:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00176ad:	75 09                	jne    c00176b8 <KeTerminateCurrentThread(int)+0xa8>
c00176af:	83 3d 68 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca68,0x0
c00176b6:	75 54                	jne    c001770c <KeTerminateCurrentThread(int)+0xfc>
c00176b8:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00176c0:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c00176c6:	85 c9                	test   ecx,ecx
c00176c8:	75 06                	jne    c00176d0 <KeTerminateCurrentThread(int)+0xc0>
c00176ca:	66 90                	xchg   ax,ax
c00176cc:	fb                   	sti    
c00176cd:	8d 76 00             	lea    esi,[esi+0x0]
c00176d0:	fa                   	cli    
c00176d1:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00176d6:	83 c0 01             	add    eax,0x1
c00176d9:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c00176de:	e8 2d f7 ff ff       	call   c0016e10 <schedule()>
c00176e3:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00176eb:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c00176f1:	85 d2                	test   edx,edx
c00176f3:	75 db                	jne    c00176d0 <KeTerminateCurrentThread(int)+0xc0>
c00176f5:	eb d5                	jmp    c00176cc <KeTerminateCurrentThread(int)+0xbc>
c00176f7:	90                   	nop
c00176f8:	83 ec 0c             	sub    esp,0xc
c00176fb:	68 fc 4d 02 c0       	push   0xc0024dfc
c0017700:	e8 77 f8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017705:	83 c4 10             	add    esp,0x10
c0017708:	eb 82                	jmp    c001768c <KeTerminateCurrentThread(int)+0x7c>
c001770a:	66 90                	xchg   ax,ax
c001770c:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0017716:	e8 f5 f6 ff ff       	call   c0016e10 <schedule()>
c001771b:	eb 9b                	jmp    c00176b8 <KeTerminateCurrentThread(int)+0xa8>
c001771d:	8d 76 00             	lea    esi,[esi+0x0]

c0017720 <__static_initialization_and_destruction_0(int, int)>:
c0017720:	83 ec 0c             	sub    esp,0xc
c0017723:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017728:	0f 85 8e 00 00 00    	jne    c00177bc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001772e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017736:	0f 85 80 00 00 00    	jne    c00177bc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001773c:	83 ec 0c             	sub    esp,0xc
c001773f:	68 8c ca 02 c0       	push   0xc002ca8c
c0017744:	e8 c3 ab 00 00       	call   c002230c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017749:	83 c4 10             	add    esp,0x10
c001774c:	83 ec 04             	sub    esp,0x4
c001774f:	68 04 62 02 c0       	push   0xc0026204
c0017754:	68 8c ca 02 c0       	push   0xc002ca8c
c0017759:	68 bc 22 02 c0       	push   0xc00222bc
c001775e:	e8 fd 5b ff ff       	call   c000d360 <__cxa_atexit>
c0017763:	83 c4 10             	add    esp,0x10
c0017766:	83 ec 0c             	sub    esp,0xc
c0017769:	68 80 ca 02 c0       	push   0xc002ca80
c001776e:	e8 99 ab 00 00       	call   c002230c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017773:	83 c4 10             	add    esp,0x10
c0017776:	83 ec 04             	sub    esp,0x4
c0017779:	68 04 62 02 c0       	push   0xc0026204
c001777e:	68 80 ca 02 c0       	push   0xc002ca80
c0017783:	68 bc 22 02 c0       	push   0xc00222bc
c0017788:	e8 d3 5b ff ff       	call   c000d360 <__cxa_atexit>
c001778d:	83 c4 10             	add    esp,0x10
c0017790:	83 ec 0c             	sub    esp,0xc
c0017793:	68 74 ca 02 c0       	push   0xc002ca74
c0017798:	e8 6f ab 00 00       	call   c002230c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001779d:	83 c4 10             	add    esp,0x10
c00177a0:	83 ec 04             	sub    esp,0x4
c00177a3:	68 04 62 02 c0       	push   0xc0026204
c00177a8:	68 74 ca 02 c0       	push   0xc002ca74
c00177ad:	68 bc 22 02 c0       	push   0xc00222bc
c00177b2:	e8 a9 5b ff ff       	call   c000d360 <__cxa_atexit>
c00177b7:	83 c4 10             	add    esp,0x10
c00177ba:	66 90                	xchg   ax,ax
c00177bc:	90                   	nop
c00177bd:	83 c4 0c             	add    esp,0xc
c00177c0:	c3                   	ret    
c00177c1:	8d 76 00             	lea    esi,[esi+0x0]

c00177c4 <_GLOBAL__sub_I_keNextPID>:
c00177c4:	83 ec 0c             	sub    esp,0xc
c00177c7:	83 ec 08             	sub    esp,0x8
c00177ca:	68 ff ff 00 00       	push   0xffff
c00177cf:	6a 01                	push   0x1
c00177d1:	e8 4a ff ff ff       	call   c0017720 <__static_initialization_and_destruction_0(int, int)>
c00177d6:	83 c4 10             	add    esp,0x10
c00177d9:	83 c4 0c             	add    esp,0xc
c00177dc:	c3                   	ret    

c00177dd <Vm::inbv(unsigned short)>:
c00177dd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00177e1:	66 81 fa fe fe       	cmp    dx,0xfefe
c00177e6:	74 02                	je     c00177ea <Vm::inbv(unsigned short)+0xd>
c00177e8:	ec                   	in     al,dx
c00177e9:	c3                   	ret    
c00177ea:	a0 d0 ca 02 c0       	mov    al,ds:0xc002cad0
c00177ef:	c3                   	ret    

c00177f0 <Vm::outbv(unsigned short, unsigned char)>:
c00177f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00177f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177f8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00177fd:	74 02                	je     c0017801 <Vm::outbv(unsigned short, unsigned char)+0x11>
c00177ff:	ee                   	out    dx,al
c0017800:	c3                   	ret    
c0017801:	8b 0d d0 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002cad0
c0017807:	8d 51 01             	lea    edx,[ecx+0x1]
c001780a:	88 81 e0 ca 02 c0    	mov    BYTE PTR [ecx-0x3ffd3520],al
c0017810:	89 15 d0 ca 02 c0    	mov    DWORD PTR ds:0xc002cad0,edx
c0017816:	83 fa 20             	cmp    edx,0x20
c0017819:	75 e5                	jne    c0017800 <Vm::outbv(unsigned short, unsigned char)+0x10>
c001781b:	c7 05 d0 ca 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x1f
c0017825:	c3                   	ret    

c0017826 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017826:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001782b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017830:	c1 e0 04             	shl    eax,0x4
c0017833:	01 d0                	add    eax,edx
c0017835:	c3                   	ret    

c0017836 <Vm::getSegment(unsigned int)>:
c0017836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001783a:	c1 e8 10             	shr    eax,0x10
c001783d:	c3                   	ret    

c001783e <Vm::getOffset(unsigned int)>:
c001783e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017842:	c3                   	ret    

c0017843 <Vm::mainloop2()>:
c0017843:	83 ec 18             	sub    esp,0x18
c0017846:	fa                   	cli    
c0017847:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001784c:	6a 02                	push   0x2
c001784e:	83 c0 01             	add    eax,0x1
c0017851:	c6 05 c9 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac9,0x1
c0017858:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c001785d:	e8 42 f6 ff ff       	call   c0016ea4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017862:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017867:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001786b:	52                   	push   edx
c001786c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017870:	52                   	push   edx
c0017871:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017875:	52                   	push   edx
c0017876:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001787a:	50                   	push   eax
c001787b:	e8 8f 89 fe ff       	call   c000020f <goToVM86>
c0017880:	83 c4 2c             	add    esp,0x2c
c0017883:	c3                   	ret    

c0017884 <Vm::mainVm8086Loop(void*)>:
c0017884:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001788c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017891:	85 c0                	test   eax,eax
c0017893:	75 01                	jne    c0017896 <Vm::mainVm8086Loop(void*)+0x12>
c0017895:	fb                   	sti    
c0017896:	eb ab                	jmp    c0017843 <Vm::mainloop2()>

c0017898 <Vm::mainloop3(unsigned long)>:
c0017898:	83 ec 18             	sub    esp,0x18
c001789b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001789f:	fa                   	cli    
c00178a0:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c00178a6:	6a 02                	push   0x2
c00178a8:	83 c2 01             	add    edx,0x1
c00178ab:	c6 05 c8 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac8,0x1
c00178b2:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c00178b8:	a3 c4 ca 02 c0       	mov    ds:0xc002cac4,eax
c00178bd:	e8 e2 f5 ff ff       	call   c0016ea4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00178c2:	83 c4 1c             	add    esp,0x1c
c00178c5:	e9 79 ff ff ff       	jmp    c0017843 <Vm::mainloop2()>

c00178ca <Vm::initialise8086()>:
c00178ca:	83 ec 0c             	sub    esp,0xc
c00178cd:	68 80 00 00 00       	push   0x80
c00178d2:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00178d7:	6a 00                	push   0x0
c00178d9:	68 84 78 01 c0       	push   0xc0017884
c00178de:	50                   	push   eax
c00178df:	e8 6c f2 ff ff       	call   c0016b50 <Process::createThread(void (*)(void*), void*, int)>
c00178e4:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00178eb:	a3 cc ca 02 c0       	mov    ds:0xc002cacc,eax
c00178f0:	68 10 01 00 00       	push   0x110
c00178f5:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00178fa:	6a 00                	push   0x0
c00178fc:	6a 00                	push   0x0
c00178fe:	8b 90 b2 05 00 00    	mov    edx,DWORD PTR [eax+0x5b2]
c0017904:	52                   	push   edx
c0017905:	e8 ea c2 ff ff       	call   c0013bf4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001790a:	83 c4 2c             	add    esp,0x2c
c001790d:	c3                   	ret    

c001790e <Vm::resetConventionalMemory8086()>:
c001790e:	c3                   	ret    

c001790f <Vm::finish8086()>:
c001790f:	53                   	push   ebx
c0017910:	83 ec 08             	sub    esp,0x8
c0017913:	eb 17                	jmp    c001792c <Vm::finish8086()+0x1d>
c0017915:	e8 f6 f4 ff ff       	call   c0016e10 <schedule()>
c001791a:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017922:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c0017928:	85 c9                	test   ecx,ecx
c001792a:	74 51                	je     c001797d <Vm::finish8086()+0x6e>
c001792c:	fa                   	cli    
c001792d:	8b 1d 70 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca70
c0017933:	83 c3 01             	add    ebx,0x1
c0017936:	80 3d c8 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac8,0x0
c001793d:	89 1d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ebx
c0017943:	74 d0                	je     c0017915 <Vm::finish8086()+0x6>
c0017945:	83 ec 0c             	sub    esp,0xc
c0017948:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c001794d:	8b 1d c4 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cac4
c0017953:	50                   	push   eax
c0017954:	c6 05 c8 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac8,0x0
c001795b:	e8 0c f8 ff ff       	call   c001716c <unblockTask(ThreadControlBlock*)>
c0017960:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017968:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c001796e:	83 c4 10             	add    esp,0x10
c0017971:	85 d2                	test   edx,edx
c0017973:	75 01                	jne    c0017976 <Vm::finish8086()+0x67>
c0017975:	fb                   	sti    
c0017976:	89 d8                	mov    eax,ebx
c0017978:	83 c4 08             	add    esp,0x8
c001797b:	5b                   	pop    ebx
c001797c:	c3                   	ret    
c001797d:	fb                   	sti    
c001797e:	eb ac                	jmp    c001792c <Vm::finish8086()+0x1d>

c0017980 <Vm::getOutput8086(unsigned char*)>:
c0017980:	57                   	push   edi
c0017981:	8b 0d d0 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002cad0
c0017987:	56                   	push   esi
c0017988:	be e0 ca 02 c0       	mov    esi,0xc002cae0
c001798d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017991:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017993:	a1 d0 ca 02 c0       	mov    eax,ds:0xc002cad0
c0017998:	5e                   	pop    esi
c0017999:	c7 05 d0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x0
c00179a3:	5f                   	pop    edi
c00179a4:	c3                   	ret    

c00179a5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00179a5:	55                   	push   ebp
c00179a6:	57                   	push   edi
c00179a7:	56                   	push   esi
c00179a8:	53                   	push   ebx
c00179a9:	83 ec 2c             	sub    esp,0x2c
c00179ac:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00179b0:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00179b4:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00179b8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00179bc:	80 3d c0 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac0,0x0
c00179c3:	75 1f                	jne    c00179e4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c00179c5:	e9 bb 00 00 00       	jmp    c0017a85 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe0>
c00179ca:	e8 41 f4 ff ff       	call   c0016e10 <schedule()>
c00179cf:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00179d7:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00179dc:	85 c0                	test   eax,eax
c00179de:	0f 84 9b 00 00 00    	je     c0017a7f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xda>
c00179e4:	fa                   	cli    
c00179e5:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00179ea:	83 c0 01             	add    eax,0x1
c00179ed:	80 3d c9 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac9,0x0
c00179f4:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c00179f9:	74 cf                	je     c00179ca <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x25>
c00179fb:	83 ec 04             	sub    esp,0x4
c00179fe:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017a03:	c7 05 d0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x0
c0017a0d:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017a11:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017a15:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017a19:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017a1d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017a21:	0f b7 f6             	movzx  esi,si
c0017a24:	6a 20                	push   0x20
c0017a26:	0f b7 db             	movzx  ebx,bx
c0017a29:	6a 00                	push   0x0
c0017a2b:	68 e0 ca 02 c0       	push   0xc002cae0
c0017a30:	e8 bb 8a fe ff       	call   c00004f0 <memset>
c0017a35:	5a                   	pop    edx
c0017a36:	59                   	pop    ecx
c0017a37:	56                   	push   esi
c0017a38:	53                   	push   ebx
c0017a39:	e8 e8 fd ff ff       	call   c0017826 <Vm::realToLinear(unsigned short, unsigned short)>
c0017a3e:	83 c4 10             	add    esp,0x10
c0017a41:	89 c7                	mov    edi,eax
c0017a43:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017a47:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017a4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017a4d:	c6 05 c9 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac9,0x0
c0017a54:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017a5c:	8b 1d 70 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca70
c0017a62:	85 db                	test   ebx,ebx
c0017a64:	75 01                	jne    c0017a67 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xc2>
c0017a66:	fb                   	sti    
c0017a67:	83 ec 0c             	sub    esp,0xc
c0017a6a:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017a6f:	50                   	push   eax
c0017a70:	e8 f7 f6 ff ff       	call   c001716c <unblockTask(ThreadControlBlock*)>
c0017a75:	83 c4 3c             	add    esp,0x3c
c0017a78:	b0 01                	mov    al,0x1
c0017a7a:	5b                   	pop    ebx
c0017a7b:	5e                   	pop    esi
c0017a7c:	5f                   	pop    edi
c0017a7d:	5d                   	pop    ebp
c0017a7e:	c3                   	ret    
c0017a7f:	fb                   	sti    
c0017a80:	e9 5f ff ff ff       	jmp    c00179e4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017a85:	83 ec 0c             	sub    esp,0xc
c0017a88:	68 14 01 00 00       	push   0x114
c0017a8d:	e8 05 7e ff ff       	call   c000f897 <malloc>
c0017a92:	83 c4 0c             	add    esp,0xc
c0017a95:	89 c2                	mov    edx,eax
c0017a97:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0017a9c:	50                   	push   eax
c0017a9d:	68 14 4f 02 c0       	push   0xc0024f14
c0017aa2:	52                   	push   edx
c0017aa3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017aa7:	e8 de 06 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017aac:	58                   	pop    eax
c0017aad:	5a                   	pop    edx
c0017aae:	6a 12                	push   0x12
c0017ab0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ab4:	52                   	push   edx
c0017ab5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017ab9:	e8 ea 06 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0017abe:	59                   	pop    ecx
c0017abf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ac3:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017ac7:	8b 02                	mov    eax,DWORD PTR [edx]
c0017ac9:	51                   	push   ecx
c0017aca:	6a 00                	push   0x0
c0017acc:	6a 00                	push   0x0
c0017ace:	68 00 00 11 00       	push   0x110000
c0017ad3:	52                   	push   edx
c0017ad4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ad8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017adb:	83 c4 14             	add    esp,0x14
c0017ade:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ae2:	52                   	push   edx
c0017ae3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017ae7:	e8 1a 07 ff ff       	call   c0008206 <File::close()>
c0017aec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017af0:	8b 02                	mov    eax,DWORD PTR [edx]
c0017af2:	89 14 24             	mov    DWORD PTR [esp],edx
c0017af5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017af8:	c6 05 c0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac0,0x1
c0017aff:	83 c4 10             	add    esp,0x10
c0017b02:	e9 dd fe ff ff       	jmp    c00179e4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>

c0017b07 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017b07:	55                   	push   ebp
c0017b08:	57                   	push   edi
c0017b09:	56                   	push   esi
c0017b0a:	53                   	push   ebx
c0017b0b:	83 ec 2c             	sub    esp,0x2c
c0017b0e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017b12:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0017b16:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017b1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b1e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0017b22:	80 3d c0 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac0,0x0
c0017b29:	0f 84 59 01 00 00    	je     c0017c88 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x181>
c0017b2f:	83 ec 08             	sub    esp,0x8
c0017b32:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0017b36:	51                   	push   ecx
c0017b37:	68 78 4f 02 c0       	push   0xc0024f78
c0017b3c:	e8 3b f4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017b41:	83 c4 10             	add    esp,0x10
c0017b44:	eb 1a                	jmp    c0017b60 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017b46:	e8 c5 f2 ff ff       	call   c0016e10 <schedule()>
c0017b4b:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017b53:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017b58:	85 c0                	test   eax,eax
c0017b5a:	0f 84 22 01 00 00    	je     c0017c82 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17b>
c0017b60:	fa                   	cli    
c0017b61:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0017b67:	8a 1d c9 ca 02 c0    	mov    bl,BYTE PTR ds:0xc002cac9
c0017b6d:	83 c2 01             	add    edx,0x1
c0017b70:	84 db                	test   bl,bl
c0017b72:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c0017b78:	74 cc                	je     c0017b46 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017b7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b7e:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017b83:	83 ec 04             	sub    esp,0x4
c0017b86:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0017b8a:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017b8e:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017b92:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0017b96:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017b9a:	c7 05 d0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x0
c0017ba4:	6a 20                	push   0x20
c0017ba6:	6a 00                	push   0x0
c0017ba8:	68 e0 ca 02 c0       	push   0xc002cae0
c0017bad:	e8 3e 89 fe ff       	call   c00004f0 <memset>
c0017bb2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017bb9:	e8 d9 7c ff ff       	call   c000f897 <malloc>
c0017bbe:	83 c4 0c             	add    esp,0xc
c0017bc1:	89 c7                	mov    edi,eax
c0017bc3:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0017bc8:	50                   	push   eax
c0017bc9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017bcd:	50                   	push   eax
c0017bce:	57                   	push   edi
c0017bcf:	e8 b6 05 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017bd4:	83 c4 10             	add    esp,0x10
c0017bd7:	85 ff                	test   edi,edi
c0017bd9:	0f 84 66 01 00 00    	je     c0017d45 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x23e>
c0017bdf:	83 ec 04             	sub    esp,0x4
c0017be2:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017be6:	50                   	push   eax
c0017be7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017beb:	50                   	push   eax
c0017bec:	57                   	push   edi
c0017bed:	e8 b8 08 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0017bf2:	8a 4c 24 23          	mov    cl,BYTE PTR [esp+0x23]
c0017bf6:	83 c4 10             	add    esp,0x10
c0017bf9:	84 c9                	test   cl,cl
c0017bfb:	0f 85 e9 00 00 00    	jne    c0017cea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1e3>
c0017c01:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017c05:	83 ec 08             	sub    esp,0x8
c0017c08:	6a 01                	push   0x1
c0017c0a:	57                   	push   edi
c0017c0b:	e8 98 05 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0017c10:	83 c4 10             	add    esp,0x10
c0017c13:	85 c0                	test   eax,eax
c0017c15:	0f 85 fd 00 00 00    	jne    c0017d18 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x211>
c0017c1b:	83 ec 08             	sub    esp,0x8
c0017c1e:	0f b7 c5             	movzx  eax,bp
c0017c21:	0f b7 f6             	movzx  esi,si
c0017c24:	56                   	push   esi
c0017c25:	50                   	push   eax
c0017c26:	e8 fb fb ff ff       	call   c0017826 <Vm::realToLinear(unsigned short, unsigned short)>
c0017c2b:	5a                   	pop    edx
c0017c2c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017c2e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017c32:	52                   	push   edx
c0017c33:	50                   	push   eax
c0017c34:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017c38:	56                   	push   esi
c0017c39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017c3d:	55                   	push   ebp
c0017c3e:	57                   	push   edi
c0017c3f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c42:	83 c4 14             	add    esp,0x14
c0017c45:	57                   	push   edi
c0017c46:	e8 bb 05 ff ff       	call   c0008206 <File::close()>
c0017c4b:	c6 05 c9 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac9,0x0
c0017c52:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017c5a:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017c5f:	83 c4 10             	add    esp,0x10
c0017c62:	85 c0                	test   eax,eax
c0017c64:	75 01                	jne    c0017c67 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x160>
c0017c66:	fb                   	sti    
c0017c67:	83 ec 0c             	sub    esp,0xc
c0017c6a:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017c6f:	50                   	push   eax
c0017c70:	e8 f7 f4 ff ff       	call   c001716c <unblockTask(ThreadControlBlock*)>
c0017c75:	83 c4 10             	add    esp,0x10
c0017c78:	83 c4 2c             	add    esp,0x2c
c0017c7b:	88 d8                	mov    al,bl
c0017c7d:	5b                   	pop    ebx
c0017c7e:	5e                   	pop    esi
c0017c7f:	5f                   	pop    edi
c0017c80:	5d                   	pop    ebp
c0017c81:	c3                   	ret    
c0017c82:	fb                   	sti    
c0017c83:	e9 d8 fe ff ff       	jmp    c0017b60 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017c88:	83 ec 0c             	sub    esp,0xc
c0017c8b:	68 14 01 00 00       	push   0x114
c0017c90:	e8 02 7c ff ff       	call   c000f897 <malloc>
c0017c95:	83 c4 0c             	add    esp,0xc
c0017c98:	89 c3                	mov    ebx,eax
c0017c9a:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0017c9f:	50                   	push   eax
c0017ca0:	68 14 4f 02 c0       	push   0xc0024f14
c0017ca5:	53                   	push   ebx
c0017ca6:	e8 df 04 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017cab:	58                   	pop    eax
c0017cac:	5a                   	pop    edx
c0017cad:	6a 12                	push   0x12
c0017caf:	53                   	push   ebx
c0017cb0:	e8 f3 04 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0017cb5:	59                   	pop    ecx
c0017cb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017cb8:	8d 4c 24 24          	lea    ecx,[esp+0x24]
c0017cbc:	51                   	push   ecx
c0017cbd:	6a 00                	push   0x0
c0017cbf:	6a 00                	push   0x0
c0017cc1:	68 00 00 11 00       	push   0x110000
c0017cc6:	53                   	push   ebx
c0017cc7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017cca:	83 c4 14             	add    esp,0x14
c0017ccd:	53                   	push   ebx
c0017cce:	e8 33 05 ff ff       	call   c0008206 <File::close()>
c0017cd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017cd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017cd8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017cdb:	c6 05 c0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac0,0x1
c0017ce2:	83 c4 10             	add    esp,0x10
c0017ce5:	e9 45 fe ff ff       	jmp    c0017b2f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x28>
c0017cea:	83 ec 0c             	sub    esp,0xc
c0017ced:	68 43 4f 02 c0       	push   0xc0024f43
c0017cf2:	e8 fd 7f ff ff       	call   c000fcf4 <KePanic(char const*)>
c0017cf7:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017cff:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017d04:	83 c4 10             	add    esp,0x10
c0017d07:	85 c0                	test   eax,eax
c0017d09:	75 01                	jne    c0017d0c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c0017d0b:	fb                   	sti    
c0017d0c:	83 c4 2c             	add    esp,0x2c
c0017d0f:	31 db                	xor    ebx,ebx
c0017d11:	88 d8                	mov    al,bl
c0017d13:	5b                   	pop    ebx
c0017d14:	5e                   	pop    esi
c0017d15:	5f                   	pop    edi
c0017d16:	5d                   	pop    ebp
c0017d17:	c3                   	ret    
c0017d18:	83 ec 0c             	sub    esp,0xc
c0017d1b:	68 5c 4f 02 c0       	push   0xc0024f5c
c0017d20:	e8 cf 7f ff ff       	call   c000fcf4 <KePanic(char const*)>
c0017d25:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017d2d:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017d32:	83 c4 10             	add    esp,0x10
c0017d35:	85 c0                	test   eax,eax
c0017d37:	75 d3                	jne    c0017d0c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c0017d39:	fb                   	sti    
c0017d3a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017d3e:	88 cb                	mov    bl,cl
c0017d40:	e9 33 ff ff ff       	jmp    c0017c78 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x171>
c0017d45:	83 ec 0c             	sub    esp,0xc
c0017d48:	68 2f 4f 02 c0       	push   0xc0024f2f
c0017d4d:	eb a3                	jmp    c0017cf2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1eb>

c0017d4f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017d4f:	57                   	push   edi
c0017d50:	56                   	push   esi
c0017d51:	53                   	push   ebx
c0017d52:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d5a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d5e:	83 e8 06             	sub    eax,0x6
c0017d61:	0f b7 c0             	movzx  eax,ax
c0017d64:	50                   	push   eax
c0017d65:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017d6a:	50                   	push   eax
c0017d6b:	e8 b6 fa ff ff       	call   c0017826 <Vm::realToLinear(unsigned short, unsigned short)>
c0017d70:	5a                   	pop    edx
c0017d71:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0017d74:	5b                   	pop    ebx
c0017d75:	8d 56 fa             	lea    edx,[esi-0x6]
c0017d78:	8b 59 38             	mov    ebx,DWORD PTR [ecx+0x38]
c0017d7b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017d81:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0017d84:	8d 53 02             	lea    edx,[ebx+0x2]
c0017d87:	66 89 10             	mov    WORD PTR [eax],dx
c0017d8a:	66 8b 51 3c          	mov    dx,WORD PTR [ecx+0x3c]
c0017d8e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017d92:	8b 59 40             	mov    ebx,DWORD PTR [ecx+0x40]
c0017d95:	66 8b 71 40          	mov    si,WORD PTR [ecx+0x40]
c0017d99:	0f b6 d7             	movzx  edx,bh
c0017d9c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0017da0:	c1 e2 08             	shl    edx,0x8
c0017da3:	8b 35 00 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002000
c0017da9:	80 7e 61 00          	cmp    BYTE PTR [esi+0x61],0x0
c0017dad:	0f b6 f3             	movzx  esi,bl
c0017db0:	74 2c                	je     c0017dde <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x8f>
c0017db2:	09 f2                	or     edx,esi
c0017db4:	80 ce 02             	or     dh,0x2
c0017db7:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017dbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017dc0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017dc4:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017dcc:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0017dcf:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017dd7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0017dda:	5b                   	pop    ebx
c0017ddb:	5e                   	pop    esi
c0017ddc:	5f                   	pop    edi
c0017ddd:	c3                   	ret    
c0017dde:	09 f2                	or     edx,esi
c0017de0:	80 e6 fd             	and    dh,0xfd
c0017de3:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017de7:	eb d2                	jmp    c0017dbb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6c>

c0017de9 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017de9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017dee:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017df3:	c1 e0 04             	shl    eax,0x4
c0017df6:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017df9:	c3                   	ret    

c0017dfa <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017dfa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017dff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e04:	c1 e0 04             	shl    eax,0x4
c0017e07:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017e0b:	c3                   	ret    

c0017e0c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017e0c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e11:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e16:	c1 e0 04             	shl    eax,0x4
c0017e19:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017e1c:	c3                   	ret    

c0017e1d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017e1d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e22:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e27:	c1 e0 04             	shl    eax,0x4
c0017e2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e2e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017e31:	c3                   	ret    

c0017e32 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017e32:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e3c:	c1 e0 04             	shl    eax,0x4
c0017e3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e43:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017e47:	c3                   	ret    

c0017e48 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017e48:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e4d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e52:	c1 e0 04             	shl    eax,0x4
c0017e55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e59:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017e5c:	c3                   	ret    

c0017e5d <Vm::faultHandler(regs*)>:
c0017e5d:	55                   	push   ebp
c0017e5e:	57                   	push   edi
c0017e5f:	56                   	push   esi
c0017e60:	53                   	push   ebx
c0017e61:	83 ec 1c             	sub    esp,0x1c
c0017e64:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017e68:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017e6b:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017e6f:	89 c6                	mov    esi,eax
c0017e71:	52                   	push   edx
c0017e72:	0f b7 c0             	movzx  eax,ax
c0017e75:	50                   	push   eax
c0017e76:	e8 ab f9 ff ff       	call   c0017826 <Vm::realToLinear(unsigned short, unsigned short)>
c0017e7b:	59                   	pop    ecx
c0017e7c:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0017e7f:	5f                   	pop    edi
c0017e80:	0f b7 d5             	movzx  edx,bp
c0017e83:	8b 7b 44             	mov    edi,DWORD PTR [ebx+0x44]
c0017e86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e8a:	89 c1                	mov    ecx,eax
c0017e8c:	0f b7 c7             	movzx  eax,di
c0017e8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e93:	50                   	push   eax
c0017e94:	52                   	push   edx
c0017e95:	e8 8c f9 ff ff       	call   c0017826 <Vm::realToLinear(unsigned short, unsigned short)>
c0017e9a:	83 c4 08             	add    esp,0x8
c0017e9d:	c6 44 24 06 06       	mov    BYTE PTR [esp+0x6],0x6
c0017ea2:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0017ea7:	c6 44 24 05 00       	mov    BYTE PTR [esp+0x5],0x0
c0017eac:	8a 11                	mov    dl,BYTE PTR [ecx]
c0017eae:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0017eb2:	83 ea 26             	sub    edx,0x26
c0017eb5:	0f b6 d2             	movzx  edx,dl
c0017eb8:	81 fa d5 00 00 00    	cmp    edx,0xd5
c0017ebe:	0f 87 04 04 00 00    	ja     c00182c8 <Vm::faultHandler(regs*)+0x46b>
c0017ec4:	ff 24 95 fc 4f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb004]
c0017ecb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ed0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0017ed4:	b0 01                	mov    al,0x1
c0017ed6:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0017ed9:	83 c5 01             	add    ebp,0x1
c0017edc:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0017edf:	83 c4 1c             	add    esp,0x1c
c0017ee2:	5b                   	pop    ebx
c0017ee3:	5e                   	pop    esi
c0017ee4:	5f                   	pop    edi
c0017ee5:	5d                   	pop    ebp
c0017ee6:	c3                   	ret    
c0017ee7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017eea:	c6 44 24 06 02       	mov    BYTE PTR [esp+0x6],0x2
c0017eef:	83 c2 01             	add    edx,0x1
c0017ef2:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017ef5:	83 c1 01             	add    ecx,0x1
c0017ef8:	eb b2                	jmp    c0017eac <Vm::faultHandler(regs*)+0x4f>
c0017efa:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017efd:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c0017f02:	83 c2 01             	add    edx,0x1
c0017f05:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f08:	eb eb                	jmp    c0017ef5 <Vm::faultHandler(regs*)+0x98>
c0017f0a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f0d:	c6 44 24 06 05       	mov    BYTE PTR [esp+0x6],0x5
c0017f12:	83 c2 01             	add    edx,0x1
c0017f15:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f18:	eb db                	jmp    c0017ef5 <Vm::faultHandler(regs*)+0x98>
c0017f1a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f1d:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0017f22:	83 c2 01             	add    edx,0x1
c0017f25:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f28:	eb cb                	jmp    c0017ef5 <Vm::faultHandler(regs*)+0x98>
c0017f2a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f2d:	c6 44 24 06 03       	mov    BYTE PTR [esp+0x6],0x3
c0017f32:	83 c2 01             	add    edx,0x1
c0017f35:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f38:	eb bb                	jmp    c0017ef5 <Vm::faultHandler(regs*)+0x98>
c0017f3a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f3d:	c6 44 24 06 04       	mov    BYTE PTR [esp+0x6],0x4
c0017f42:	83 c2 01             	add    edx,0x1
c0017f45:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f48:	eb ab                	jmp    c0017ef5 <Vm::faultHandler(regs*)+0x98>
c0017f4a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f4d:	c6 44 24 05 01       	mov    BYTE PTR [esp+0x5],0x1
c0017f52:	83 c2 01             	add    edx,0x1
c0017f55:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f58:	eb 9b                	jmp    c0017ef5 <Vm::faultHandler(regs*)+0x98>
c0017f5a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f5d:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0017f62:	83 c2 01             	add    edx,0x1
c0017f65:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f68:	eb 8b                	jmp    c0017ef5 <Vm::faultHandler(regs*)+0x98>
c0017f6a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017f6d:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0017f72:	74 0d                	je     c0017f81 <Vm::faultHandler(regs*)+0x124>
c0017f74:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017f7b:	0f 87 8a 06 00 00    	ja     c001860b <Vm::faultHandler(regs*)+0x7ae>
c0017f81:	83 ec 0c             	sub    esp,0xc
c0017f84:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017f88:	0f b7 f6             	movzx  esi,si
c0017f8b:	50                   	push   eax
c0017f8c:	e8 4c f8 ff ff       	call   c00177dd <Vm::inbv(unsigned short)>
c0017f91:	83 c4 0c             	add    esp,0xc
c0017f94:	0f b6 c0             	movzx  eax,al
c0017f97:	50                   	push   eax
c0017f98:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017f9c:	50                   	push   eax
c0017f9d:	56                   	push   esi
c0017f9e:	e8 7a fe ff ff       	call   c0017e1d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017fa3:	83 c4 10             	add    esp,0x10
c0017fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017fa9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017fad:	0f 84 d6 05 00 00    	je     c0018589 <Vm::faultHandler(regs*)+0x72c>
c0017fb3:	83 e8 01             	sub    eax,0x1
c0017fb6:	0f b7 c0             	movzx  eax,ax
c0017fb9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017fbc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0017fbf:	83 c0 01             	add    eax,0x1
c0017fc2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017fc5:	83 c4 1c             	add    esp,0x1c
c0017fc8:	b0 01                	mov    al,0x1
c0017fca:	5b                   	pop    ebx
c0017fcb:	5e                   	pop    esi
c0017fcc:	5f                   	pop    edi
c0017fcd:	5d                   	pop    ebp
c0017fce:	c3                   	ret    
c0017fcf:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017fd2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017fd5:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0017fda:	0f 85 98 04 00 00    	jne    c0018478 <Vm::faultHandler(regs*)+0x61b>
c0017fe0:	0f b7 c8             	movzx  ecx,ax
c0017fe3:	0f b7 f6             	movzx  esi,si
c0017fe6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017fe9:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0017fee:	0f 84 35 05 00 00    	je     c0018529 <Vm::faultHandler(regs*)+0x6cc>
c0017ff4:	ed                   	in     eax,dx
c0017ff5:	83 ec 04             	sub    esp,0x4
c0017ff8:	50                   	push   eax
c0017ff9:	51                   	push   ecx
c0017ffa:	56                   	push   esi
c0017ffb:	e8 48 fe ff ff       	call   c0017e48 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018000:	83 c4 10             	add    esp,0x10
c0018003:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018006:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001800a:	0f 84 9d 05 00 00    	je     c00185ad <Vm::faultHandler(regs*)+0x750>
c0018010:	83 e8 04             	sub    eax,0x4
c0018013:	25 ff ff 00 00       	and    eax,0xffff
c0018018:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001801b:	eb 9f                	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c001801d:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c0018022:	83 f8 06             	cmp    eax,0x6
c0018025:	0f 87 60 03 00 00    	ja     c001838b <Vm::faultHandler(regs*)+0x52e>
c001802b:	ff 24 85 54 53 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdacac]
c0018032:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c0018037:	83 f8 06             	cmp    eax,0x6
c001803a:	0f 87 f6 02 00 00    	ja     c0018336 <Vm::faultHandler(regs*)+0x4d9>
c0018040:	ff 24 85 70 53 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdac90]
c0018047:	83 ec 08             	sub    esp,0x8
c001804a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001804e:	50                   	push   eax
c001804f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018053:	50                   	push   eax
c0018054:	e8 97 f7 ff ff       	call   c00177f0 <Vm::outbv(unsigned short, unsigned char)>
c0018059:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001805c:	83 c4 10             	add    esp,0x10
c001805f:	83 c0 02             	add    eax,0x2
c0018062:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018065:	b0 01                	mov    al,0x1
c0018067:	e9 73 fe ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c001806c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018070:	3d ee 00 00 00       	cmp    eax,0xee
c0018075:	0f 84 5a 04 00 00    	je     c00184d5 <Vm::faultHandler(regs*)+0x678>
c001807b:	83 ec 0c             	sub    esp,0xc
c001807e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018082:	52                   	push   edx
c0018083:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018087:	56                   	push   esi
c0018088:	51                   	push   ecx
c0018089:	50                   	push   eax
c001808a:	53                   	push   ebx
c001808b:	e8 bf fc ff ff       	call   c0017d4f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018090:	83 c4 20             	add    esp,0x20
c0018093:	b0 01                	mov    al,0x1
c0018095:	e9 45 fe ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c001809a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001809e:	89 d1                	mov    ecx,edx
c00180a0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00180a3:	c1 e1 08             	shl    ecx,0x8
c00180a6:	09 ca                	or     edx,ecx
c00180a8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00180ab:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00180af:	89 d1                	mov    ecx,edx
c00180b1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00180b5:	c1 e1 08             	shl    ecx,0x8
c00180b8:	09 ca                	or     edx,ecx
c00180ba:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00180bd:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00180c1:	89 d1                	mov    ecx,edx
c00180c3:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00180c7:	c1 e1 08             	shl    ecx,0x8
c00180ca:	09 ca                	or     edx,ecx
c00180cc:	81 ca 00 02 02 00    	or     edx,0x20200
c00180d2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00180d5:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00180d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00180df:	d1 e8                	shr    eax,1
c00180e1:	83 e0 01             	and    eax,0x1
c00180e4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00180e7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00180ea:	83 c0 06             	add    eax,0x6
c00180ed:	25 ff ff 00 00       	and    eax,0xffff
c00180f2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00180f5:	b0 01                	mov    al,0x1
c00180f7:	e9 e3 fd ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c00180fc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00180ff:	83 ec 0c             	sub    esp,0xc
c0018102:	b0 00                	mov    al,0x0
c0018104:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018107:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001810b:	50                   	push   eax
c001810c:	e8 cc f6 ff ff       	call   c00177dd <Vm::inbv(unsigned short)>
c0018111:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018114:	0f b6 c0             	movzx  eax,al
c0018117:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001811a:	09 c2                	or     edx,eax
c001811c:	83 c1 02             	add    ecx,0x2
c001811f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0018122:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0018125:	83 c4 10             	add    esp,0x10
c0018128:	b0 01                	mov    al,0x1
c001812a:	e9 b0 fd ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c001812f:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018134:	0f 85 7a 03 00 00    	jne    c00184b4 <Vm::faultHandler(regs*)+0x657>
c001813a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001813d:	81 e6 00 00 ff ff    	and    esi,0xffff0000
c0018143:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0018146:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001814a:	66 ed                	in     ax,dx
c001814c:	0f b7 c0             	movzx  eax,ax
c001814f:	09 f0                	or     eax,esi
c0018151:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018154:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018157:	83 c0 02             	add    eax,0x2
c001815a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001815d:	83 c4 1c             	add    esp,0x1c
c0018160:	b0 01                	mov    al,0x1
c0018162:	5b                   	pop    ebx
c0018163:	5e                   	pop    esi
c0018164:	5f                   	pop    edi
c0018165:	5d                   	pop    ebp
c0018166:	c3                   	ret    
c0018167:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001816a:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001816f:	0f 84 d7 02 00 00    	je     c001844c <Vm::faultHandler(regs*)+0x5ef>
c0018175:	83 ef 04             	sub    edi,0x4
c0018178:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001817e:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018184:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c0018187:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001818a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018190:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018194:	0f 84 22 fe ff ff    	je     c0017fbc <Vm::faultHandler(regs*)+0x15f>
c001819a:	80 ce 02             	or     dh,0x2
c001819d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00181a0:	e9 17 fe ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c00181a5:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00181aa:	0f 84 6b 02 00 00    	je     c001841b <Vm::faultHandler(regs*)+0x5be>
c00181b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00181b2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00181b8:	81 ca 00 02 02 00    	or     edx,0x20200
c00181be:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00181c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00181c3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00181c9:	c1 e8 09             	shr    eax,0x9
c00181cc:	83 e0 01             	and    eax,0x1
c00181cf:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00181d2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00181d5:	83 c0 04             	add    eax,0x4
c00181d8:	25 ff ff 00 00       	and    eax,0xffff
c00181dd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00181e0:	e9 d7 fd ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c00181e5:	83 ec 08             	sub    esp,0x8
c00181e8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00181ec:	50                   	push   eax
c00181ed:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00181f1:	50                   	push   eax
c00181f2:	e8 f9 f5 ff ff       	call   c00177f0 <Vm::outbv(unsigned short, unsigned char)>
c00181f7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00181fa:	83 c4 10             	add    esp,0x10
c00181fd:	83 c2 01             	add    edx,0x1
c0018200:	b0 01                	mov    al,0x1
c0018202:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018205:	e9 d5 fc ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c001820a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001820d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018210:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018215:	0f 84 ac 02 00 00    	je     c00184c7 <Vm::faultHandler(regs*)+0x66a>
c001821b:	ef                   	out    dx,eax
c001821c:	e9 9b fd ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c0018221:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018224:	83 c2 01             	add    edx,0x1
c0018227:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001822a:	e9 c6 fc ff ff       	jmp    c0017ef5 <Vm::faultHandler(regs*)+0x98>
c001822f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018234:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018238:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001823b:	83 c0 01             	add    eax,0x1
c001823e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018241:	b0 01                	mov    al,0x1
c0018243:	e9 97 fc ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c0018248:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001824b:	83 ec 0c             	sub    esp,0xc
c001824e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018252:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0018258:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001825b:	50                   	push   eax
c001825c:	e8 7c f5 ff ff       	call   c00177dd <Vm::inbv(unsigned short)>
c0018261:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0018264:	0f b6 c0             	movzx  eax,al
c0018267:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001826a:	09 c7                	or     edi,eax
c001826c:	83 c5 01             	add    ebp,0x1
c001826f:	89 7b 2c             	mov    DWORD PTR [ebx+0x2c],edi
c0018272:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0018275:	83 c4 10             	add    esp,0x10
c0018278:	b0 01                	mov    al,0x1
c001827a:	e9 60 fc ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c001827f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018282:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018287:	0f 85 34 02 00 00    	jne    c00184c1 <Vm::faultHandler(regs*)+0x664>
c001828d:	66 ed                	in     ax,dx
c001828f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018292:	0f b7 c0             	movzx  eax,ax
c0018295:	81 e2 00 00 ff ff    	and    edx,0xffff0000
c001829b:	09 d0                	or     eax,edx
c001829d:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00182a0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00182a3:	83 c1 01             	add    ecx,0x1
c00182a6:	b0 01                	mov    al,0x1
c00182a8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00182ab:	e9 2f fc ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c00182b0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00182b3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00182b7:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00182bc:	0f 84 0c 02 00 00    	je     c00184ce <Vm::faultHandler(regs*)+0x671>
c00182c2:	ef                   	out    dx,eax
c00182c3:	e9 8c fe ff ff       	jmp    c0018154 <Vm::faultHandler(regs*)+0x2f7>
c00182c8:	0f b6 74 24 04       	movzx  esi,BYTE PTR [esp+0x4]
c00182cd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00182d1:	50                   	push   eax
c00182d2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00182d6:	50                   	push   eax
c00182d7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00182db:	50                   	push   eax
c00182dc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00182e0:	50                   	push   eax
c00182e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00182e5:	50                   	push   eax
c00182e6:	56                   	push   esi
c00182e7:	56                   	push   esi
c00182e8:	68 cc 4f 02 c0       	push   0xc0024fcc
c00182ed:	e8 8a ec fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00182f2:	83 c4 20             	add    esp,0x20
c00182f5:	eb 05                	jmp    c00182fc <Vm::faultHandler(regs*)+0x49f>
c00182f7:	83 f8 5a             	cmp    eax,0x5a
c00182fa:	74 27                	je     c0018323 <Vm::faultHandler(regs*)+0x4c6>
c00182fc:	83 ec 0c             	sub    esp,0xc
c00182ff:	6a 60                	push   0x60
c0018301:	e8 d7 f4 ff ff       	call   c00177dd <Vm::inbv(unsigned short)>
c0018306:	83 c4 10             	add    esp,0x10
c0018309:	0f b6 c0             	movzx  eax,al
c001830c:	83 f8 1c             	cmp    eax,0x1c
c001830f:	75 e6                	jne    c00182f7 <Vm::faultHandler(regs*)+0x49a>
c0018311:	eb 10                	jmp    c0018323 <Vm::faultHandler(regs*)+0x4c6>
c0018313:	83 ec 0c             	sub    esp,0xc
c0018316:	6a 60                	push   0x60
c0018318:	e8 c0 f4 ff ff       	call   c00177dd <Vm::inbv(unsigned short)>
c001831d:	83 c4 10             	add    esp,0x10
c0018320:	0f b6 c0             	movzx  eax,al
c0018323:	83 f8 1c             	cmp    eax,0x1c
c0018326:	74 eb                	je     c0018313 <Vm::faultHandler(regs*)+0x4b6>
c0018328:	83 f8 5a             	cmp    eax,0x5a
c001832b:	74 e6                	je     c0018313 <Vm::faultHandler(regs*)+0x4b6>
c001832d:	31 c0                	xor    eax,eax
c001832f:	e9 ab fb ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c0018334:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018336:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0018339:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c001833e:	0f 85 9a 00 00 00    	jne    c00183de <Vm::faultHandler(regs*)+0x581>
c0018344:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018347:	0f b7 c5             	movzx  eax,bp
c001834a:	81 e1 00 04 00 00    	and    ecx,0x400
c0018350:	0f b7 d6             	movzx  edx,si
c0018353:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0018356:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001835b:	0f 84 f8 01 00 00    	je     c0018559 <Vm::faultHandler(regs*)+0x6fc>
c0018361:	83 ec 08             	sub    esp,0x8
c0018364:	50                   	push   eax
c0018365:	52                   	push   edx
c0018366:	e8 a1 fa ff ff       	call   c0017e0c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001836b:	83 c4 10             	add    esp,0x10
c001836e:	89 fa                	mov    edx,edi
c0018370:	ef                   	out    dx,eax
c0018371:	85 c9                	test   ecx,ecx
c0018373:	0f 84 44 02 00 00    	je     c00185bd <Vm::faultHandler(regs*)+0x760>
c0018379:	8d 45 fc             	lea    eax,[ebp-0x4]
c001837c:	25 ff ff 00 00       	and    eax,0xffff
c0018381:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018384:	e9 33 fc ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c0018389:	8b 33                	mov    esi,DWORD PTR [ebx]
c001838b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001838e:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0018393:	74 0b                	je     c00183a0 <Vm::faultHandler(regs*)+0x543>
c0018395:	3d ff ff 00 00       	cmp    eax,0xffff
c001839a:	0f 87 3a 02 00 00    	ja     c00185da <Vm::faultHandler(regs*)+0x77d>
c00183a0:	83 ec 08             	sub    esp,0x8
c00183a3:	0f b7 c0             	movzx  eax,ax
c00183a6:	50                   	push   eax
c00183a7:	0f b7 c6             	movzx  eax,si
c00183aa:	50                   	push   eax
c00183ab:	e8 39 fa ff ff       	call   c0017de9 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00183b0:	5e                   	pop    esi
c00183b1:	0f b6 c0             	movzx  eax,al
c00183b4:	5f                   	pop    edi
c00183b5:	50                   	push   eax
c00183b6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00183ba:	50                   	push   eax
c00183bb:	e8 30 f4 ff ff       	call   c00177f0 <Vm::outbv(unsigned short, unsigned char)>
c00183c0:	83 c4 10             	add    esp,0x10
c00183c3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00183c6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00183ca:	0f 84 ae 01 00 00    	je     c001857e <Vm::faultHandler(regs*)+0x721>
c00183d0:	83 e8 01             	sub    eax,0x1
c00183d3:	0f b7 c0             	movzx  eax,ax
c00183d6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00183d9:	e9 de fb ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c00183de:	81 fd ff ff 00 00    	cmp    ebp,0xffff
c00183e4:	0f 86 5a ff ff ff    	jbe    c0018344 <Vm::faultHandler(regs*)+0x4e7>
c00183ea:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00183ee:	50                   	push   eax
c00183ef:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00183f3:	50                   	push   eax
c00183f4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00183f8:	50                   	push   eax
c00183f9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00183fd:	50                   	push   eax
c00183fe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018402:	50                   	push   eax
c0018403:	6a 6f                	push   0x6f
c0018405:	6a 6f                	push   0x6f
c0018407:	68 9c 4f 02 c0       	push   0xc0024f9c
c001840c:	e8 6b eb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018411:	83 c4 20             	add    esp,0x20
c0018414:	31 c0                	xor    eax,eax
c0018416:	e9 c4 fa ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c001841b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001841e:	81 ca 00 02 02 00    	or     edx,0x20200
c0018424:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018427:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001842a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018430:	c1 e8 09             	shr    eax,0x9
c0018433:	83 e0 01             	and    eax,0x1
c0018436:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018439:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001843c:	83 c0 02             	add    eax,0x2
c001843f:	25 ff ff 00 00       	and    eax,0xffff
c0018444:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018447:	e9 70 fb ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c001844c:	83 ef 02             	sub    edi,0x2
c001844f:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018455:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c0018458:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001845c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018462:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018466:	0f 84 28 01 00 00    	je     c0018594 <Vm::faultHandler(regs*)+0x737>
c001846c:	80 ce 02             	or     dh,0x2
c001846f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018473:	e9 44 fb ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c0018478:	3d ff ff 00 00       	cmp    eax,0xffff
c001847d:	0f 86 5d fb ff ff    	jbe    c0017fe0 <Vm::faultHandler(regs*)+0x183>
c0018483:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018487:	50                   	push   eax
c0018488:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001848c:	50                   	push   eax
c001848d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018491:	50                   	push   eax
c0018492:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018496:	50                   	push   eax
c0018497:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001849b:	50                   	push   eax
c001849c:	6a 6d                	push   0x6d
c001849e:	6a 6d                	push   0x6d
c00184a0:	68 9c 4f 02 c0       	push   0xc0024f9c
c00184a5:	e8 d2 ea fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00184aa:	83 c4 20             	add    esp,0x20
c00184ad:	31 c0                	xor    eax,eax
c00184af:	e9 2b fa ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c00184b4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00184b8:	ed                   	in     eax,dx
c00184b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00184bc:	e9 93 fc ff ff       	jmp    c0018154 <Vm::faultHandler(regs*)+0x2f7>
c00184c1:	ed                   	in     eax,dx
c00184c2:	e9 d6 fd ff ff       	jmp    c001829d <Vm::faultHandler(regs*)+0x440>
c00184c7:	66 ef                	out    dx,ax
c00184c9:	e9 ee fa ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c00184ce:	66 ef                	out    dx,ax
c00184d0:	e9 7f fc ff ff       	jmp    c0018154 <Vm::faultHandler(regs*)+0x2f7>
c00184d5:	83 ec 0c             	sub    esp,0xc
c00184d8:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c00184db:	57                   	push   edi
c00184dc:	e8 b7 f3 ff ff       	call   c0017898 <Vm::mainloop3(unsigned long)>
c00184e1:	83 c4 10             	add    esp,0x10
c00184e4:	b0 01                	mov    al,0x1
c00184e6:	e9 f4 f9 ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c00184eb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00184ee:	e9 43 fe ff ff       	jmp    c0018336 <Vm::faultHandler(regs*)+0x4d9>
c00184f3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00184f6:	e9 3b fe ff ff       	jmp    c0018336 <Vm::faultHandler(regs*)+0x4d9>
c00184fb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00184fe:	e9 33 fe ff ff       	jmp    c0018336 <Vm::faultHandler(regs*)+0x4d9>
c0018503:	89 ee                	mov    esi,ebp
c0018505:	e9 2c fe ff ff       	jmp    c0018336 <Vm::faultHandler(regs*)+0x4d9>
c001850a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001850d:	e9 79 fe ff ff       	jmp    c001838b <Vm::faultHandler(regs*)+0x52e>
c0018512:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018515:	e9 71 fe ff ff       	jmp    c001838b <Vm::faultHandler(regs*)+0x52e>
c001851a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001851d:	e9 69 fe ff ff       	jmp    c001838b <Vm::faultHandler(regs*)+0x52e>
c0018522:	89 ee                	mov    esi,ebp
c0018524:	e9 62 fe ff ff       	jmp    c001838b <Vm::faultHandler(regs*)+0x52e>
c0018529:	66 ed                	in     ax,dx
c001852b:	83 ec 04             	sub    esp,0x4
c001852e:	0f b7 c0             	movzx  eax,ax
c0018531:	50                   	push   eax
c0018532:	51                   	push   ecx
c0018533:	56                   	push   esi
c0018534:	e8 f9 f8 ff ff       	call   c0017e32 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018539:	83 c4 10             	add    esp,0x10
c001853c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001853f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018543:	0f 84 84 00 00 00    	je     c00185cd <Vm::faultHandler(regs*)+0x770>
c0018549:	83 e8 02             	sub    eax,0x2
c001854c:	25 ff ff 00 00       	and    eax,0xffff
c0018551:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018554:	e9 63 fa ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c0018559:	83 ec 08             	sub    esp,0x8
c001855c:	50                   	push   eax
c001855d:	52                   	push   edx
c001855e:	e8 97 f8 ff ff       	call   c0017dfa <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018563:	83 c4 10             	add    esp,0x10
c0018566:	89 fa                	mov    edx,edi
c0018568:	66 ef                	out    dx,ax
c001856a:	85 c9                	test   ecx,ecx
c001856c:	74 32                	je     c00185a0 <Vm::faultHandler(regs*)+0x743>
c001856e:	8d 45 fe             	lea    eax,[ebp-0x2]
c0018571:	25 ff ff 00 00       	and    eax,0xffff
c0018576:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018579:	e9 3e fa ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c001857e:	83 c0 01             	add    eax,0x1
c0018581:	0f b7 c0             	movzx  eax,ax
c0018584:	e9 4d fe ff ff       	jmp    c00183d6 <Vm::faultHandler(regs*)+0x579>
c0018589:	83 c0 01             	add    eax,0x1
c001858c:	0f b7 c0             	movzx  eax,ax
c001858f:	e9 25 fa ff ff       	jmp    c0017fb9 <Vm::faultHandler(regs*)+0x15c>
c0018594:	80 e6 fd             	and    dh,0xfd
c0018597:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001859b:	e9 1c fa ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c00185a0:	8d 45 02             	lea    eax,[ebp+0x2]
c00185a3:	25 ff ff 00 00       	and    eax,0xffff
c00185a8:	e9 29 fe ff ff       	jmp    c00183d6 <Vm::faultHandler(regs*)+0x579>
c00185ad:	83 c0 04             	add    eax,0x4
c00185b0:	25 ff ff 00 00       	and    eax,0xffff
c00185b5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00185b8:	e9 ff f9 ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c00185bd:	8d 45 04             	lea    eax,[ebp+0x4]
c00185c0:	25 ff ff 00 00       	and    eax,0xffff
c00185c5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00185c8:	e9 ef f9 ff ff       	jmp    c0017fbc <Vm::faultHandler(regs*)+0x15f>
c00185cd:	83 c0 02             	add    eax,0x2
c00185d0:	25 ff ff 00 00       	and    eax,0xffff
c00185d5:	e9 df f9 ff ff       	jmp    c0017fb9 <Vm::faultHandler(regs*)+0x15c>
c00185da:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00185de:	50                   	push   eax
c00185df:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00185e3:	50                   	push   eax
c00185e4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00185e8:	50                   	push   eax
c00185e9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00185ed:	50                   	push   eax
c00185ee:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00185f2:	50                   	push   eax
c00185f3:	6a 6e                	push   0x6e
c00185f5:	6a 6e                	push   0x6e
c00185f7:	68 9c 4f 02 c0       	push   0xc0024f9c
c00185fc:	e8 7b e9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018601:	83 c4 20             	add    esp,0x20
c0018604:	31 c0                	xor    eax,eax
c0018606:	e9 d4 f8 ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>
c001860b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001860f:	50                   	push   eax
c0018610:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018614:	50                   	push   eax
c0018615:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018619:	50                   	push   eax
c001861a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001861e:	50                   	push   eax
c001861f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018623:	50                   	push   eax
c0018624:	6a 6c                	push   0x6c
c0018626:	6a 6c                	push   0x6c
c0018628:	68 9c 4f 02 c0       	push   0xc0024f9c
c001862d:	e8 4a e9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018632:	83 c4 20             	add    esp,0x20
c0018635:	31 c0                	xor    eax,eax
c0018637:	e9 a3 f8 ff ff       	jmp    c0017edf <Vm::faultHandler(regs*)+0x82>

c001863c <IOAPIC::close(int, int, void*)>:
c001863c:	b8 00 00 00 00       	mov    eax,0x0
c0018641:	c3                   	ret    

c0018642 <apicGetBase()>:
c0018642:	55                   	push   ebp
c0018643:	89 e5                	mov    ebp,esp
c0018645:	83 ec 18             	sub    esp,0x18
c0018648:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001864d:	83 e0 08             	and    eax,0x8
c0018650:	0f b6 c0             	movzx  eax,al
c0018653:	85 c0                	test   eax,eax
c0018655:	75 07                	jne    c001865e <apicGetBase()+0x1c>
c0018657:	b8 00 00 00 00       	mov    eax,0x0
c001865c:	eb 1b                	jmp    c0018679 <apicGetBase()+0x37>
c001865e:	83 ec 0c             	sub    esp,0xc
c0018661:	6a 1b                	push   0x1b
c0018663:	e8 61 15 00 00       	call   c0019bc9 <x86rdmsr(unsigned int)>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001866e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018671:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018674:	25 00 00 ff ff       	and    eax,0xffff0000
c0018679:	c9                   	leave  
c001867a:	c3                   	ret    
c001867b:	90                   	nop

c001867c <IOAPIC::IOAPIC()>:
c001867c:	83 ec 0c             	sub    esp,0xc
c001867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018683:	83 ec 08             	sub    esp,0x8
c0018686:	68 8c 53 02 c0       	push   0xc002538c
c001868b:	50                   	push   eax
c001868c:	e8 25 15 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0018691:	83 c4 10             	add    esp,0x10
c0018694:	ba ac 53 02 c0       	mov    edx,0xc00253ac
c0018699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001869d:	89 10                	mov    DWORD PTR [eax],edx
c001869f:	90                   	nop
c00186a0:	83 c4 0c             	add    esp,0xc
c00186a3:	c3                   	ret    

c00186a4 <apicOpen()>:
c00186a4:	55                   	push   ebp
c00186a5:	89 e5                	mov    ebp,esp
c00186a7:	53                   	push   ebx
c00186a8:	83 ec 34             	sub    esp,0x34
c00186ab:	83 ec 0c             	sub    esp,0xc
c00186ae:	68 94 53 02 c0       	push   0xc0025394
c00186b3:	e8 c4 e8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00186b8:	83 c4 10             	add    esp,0x10
c00186bb:	a0 40 cb 02 c0       	mov    al,ds:0xc002cb40
c00186c0:	83 f0 01             	xor    eax,0x1
c00186c3:	0f b6 c0             	movzx  eax,al
c00186c6:	85 c0                	test   eax,eax
c00186c8:	0f 84 a3 00 00 00    	je     c0018771 <apicOpen()+0xcd>
c00186ce:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00186d2:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c00186d7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00186db:	0f b6 c0             	movzx  eax,al
c00186de:	39 c2                	cmp    edx,eax
c00186e0:	0f 83 84 00 00 00    	jae    c001876a <apicOpen()+0xc6>
c00186e6:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c00186ed:	83 ec 0c             	sub    esp,0xc
c00186f0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00186f3:	e8 9f 71 ff ff       	call   c000f897 <malloc>
c00186f8:	83 c4 10             	add    esp,0x10
c00186fb:	89 c3                	mov    ebx,eax
c00186fd:	83 ec 0c             	sub    esp,0xc
c0018700:	53                   	push   ebx
c0018701:	e8 76 ff ff ff       	call   c001867c <IOAPIC::IOAPIC()>
c0018706:	83 c4 10             	add    esp,0x10
c0018709:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001870c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018710:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018713:	89 14 85 20 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd34e0],edx
c001871a:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c001871f:	83 c0 01             	add    eax,0x1
c0018722:	a3 00 cb 02 c0       	mov    ds:0xc002cb00,eax
c0018727:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001872c:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018732:	83 ec 08             	sub    esp,0x8
c0018735:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018738:	50                   	push   eax
c0018739:	e8 16 13 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c001873e:	83 c4 10             	add    esp,0x10
c0018741:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018744:	8b 00                	mov    eax,DWORD PTR [eax]
c0018746:	83 c0 08             	add    eax,0x8
c0018749:	8b 00                	mov    eax,DWORD PTR [eax]
c001874b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001874f:	6a 00                	push   0x0
c0018751:	6a 00                	push   0x0
c0018753:	52                   	push   edx
c0018754:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018757:	ff d0                	call   eax
c0018759:	83 c4 10             	add    esp,0x10
c001875c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001875f:	83 c0 01             	add    eax,0x1
c0018762:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0018765:	e9 68 ff ff ff       	jmp    c00186d2 <apicOpen()+0x2e>
c001876a:	c6 05 40 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb40,0x1
c0018771:	e8 cc fe ff ff       	call   c0018642 <apicGetBase()>
c0018776:	05 f0 00 00 00       	add    eax,0xf0
c001877b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001877e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018781:	8b 00                	mov    eax,DWORD PTR [eax]
c0018783:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018786:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001878d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0018794:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001879a:	89 10                	mov    DWORD PTR [eax],edx
c001879c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00187a3:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00187a8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00187ab:	7d 7c                	jge    c0018829 <apicOpen()+0x185>
c00187ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00187b0:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c00187b7:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c00187ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00187bd:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c00187c4:	c1 e8 08             	shr    eax,0x8
c00187c7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00187cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00187ce:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c00187d5:	c1 e8 18             	shr    eax,0x18
c00187d8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00187db:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00187df:	3d ff 00 00 00       	cmp    eax,0xff
c00187e4:	75 3a                	jne    c0018820 <apicOpen()+0x17c>
c00187e6:	e8 57 fe ff ff       	call   c0018642 <apicGetBase()>
c00187eb:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c00187ef:	83 fa 01             	cmp    edx,0x1
c00187f2:	75 07                	jne    c00187fb <apicOpen()+0x157>
c00187f4:	ba 60 03 00 00       	mov    edx,0x360
c00187f9:	eb 05                	jmp    c0018800 <apicOpen()+0x15c>
c00187fb:	ba 50 03 00 00       	mov    edx,0x350
c0018800:	01 d0                	add    eax,edx
c0018802:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018805:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018808:	8b 00                	mov    eax,DWORD PTR [eax]
c001880a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001880d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018814:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018818:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001881b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001881e:	89 10                	mov    DWORD PTR [eax],edx
c0018820:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018824:	e9 7a ff ff ff       	jmp    c00187a3 <apicOpen()+0xff>
c0018829:	90                   	nop
c001882a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001882d:	c9                   	leave  
c001882e:	c3                   	ret    
c001882f:	90                   	nop

c0018830 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018830:	55                   	push   ebp
c0018831:	89 e5                	mov    ebp,esp
c0018833:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018836:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001883c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001883f:	72 1d                	jb     c001885e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018844:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001884a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001884d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018853:	01 d0                	add    eax,edx
c0018855:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018858:	73 04                	jae    c001885e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001885a:	b0 01                	mov    al,0x1
c001885c:	eb 02                	jmp    c0018860 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001885e:	b0 00                	mov    al,0x0
c0018860:	5d                   	pop    ebp
c0018861:	c3                   	ret    

c0018862 <IOAPIC::read(int)>:
c0018862:	55                   	push   ebp
c0018863:	89 e5                	mov    ebp,esp
c0018865:	83 ec 10             	sub    esp,0x10
c0018868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001886b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018871:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018874:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018877:	0f b6 d0             	movzx  edx,al
c001887a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001887d:	89 10                	mov    DWORD PTR [eax],edx
c001887f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018882:	83 c0 10             	add    eax,0x10
c0018885:	8b 00                	mov    eax,DWORD PTR [eax]
c0018887:	c9                   	leave  
c0018888:	c3                   	ret    
c0018889:	90                   	nop

c001888a <IOAPIC::open(int, int, void*)>:
c001888a:	55                   	push   ebp
c001888b:	89 e5                	mov    ebp,esp
c001888d:	57                   	push   edi
c001888e:	56                   	push   esi
c001888f:	53                   	push   ebx
c0018890:	83 ec 04             	sub    esp,0x4
c0018893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018896:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018899:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001889f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00188a8:	8b 14 85 80 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4180]
c00188af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188b2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00188b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00188c1:	8b 14 85 00 bf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4100]
c00188c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188cb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00188d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188d4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00188da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188dd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00188e3:	0f b6 f0             	movzx  esi,al
c00188e6:	89 d0                	mov    eax,edx
c00188e8:	ba 00 00 00 00       	mov    edx,0x0
c00188ed:	89 c7                	mov    edi,eax
c00188ef:	83 e7 ff             	and    edi,0xffffffff
c00188f2:	89 f9                	mov    ecx,edi
c00188f4:	0f b6 da             	movzx  ebx,dl
c00188f7:	89 c8                	mov    eax,ecx
c00188f9:	89 da                	mov    edx,ebx
c00188fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00188fe:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018901:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018905:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018909:	83 e0 00             	and    eax,0x0
c001890c:	09 d0                	or     eax,edx
c001890e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018915:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001891b:	8d 50 01             	lea    edx,[eax+0x1]
c001891e:	88 d1                	mov    cl,dl
c0018920:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018923:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018929:	0f b6 d0             	movzx  edx,al
c001892c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001892f:	83 c2 08             	add    edx,0x8
c0018932:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018936:	0f b6 c9             	movzx  ecx,cl
c0018939:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001893f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018943:	6a 01                	push   0x1
c0018945:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018948:	e8 15 ff ff ff       	call   c0018862 <IOAPIC::read(int)>
c001894d:	83 c4 08             	add    esp,0x8
c0018950:	c1 f8 10             	sar    eax,0x10
c0018953:	0f b6 c0             	movzx  eax,al
c0018956:	8d 50 01             	lea    edx,[eax+0x1]
c0018959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001895c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0018962:	b8 00 00 00 00       	mov    eax,0x0
c0018967:	8d 65 f4             	lea    esp,[ebp-0xc]
c001896a:	5b                   	pop    ebx
c001896b:	5e                   	pop    esi
c001896c:	5f                   	pop    edi
c001896d:	5d                   	pop    ebp
c001896e:	c3                   	ret    
c001896f:	90                   	nop

c0018970 <IOAPIC::write(int, int)>:
c0018970:	55                   	push   ebp
c0018971:	89 e5                	mov    ebp,esp
c0018973:	83 ec 10             	sub    esp,0x10
c0018976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018979:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001897f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018982:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018985:	0f b6 d0             	movzx  edx,al
c0018988:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001898b:	89 10                	mov    DWORD PTR [eax],edx
c001898d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018990:	8d 50 10             	lea    edx,[eax+0x10]
c0018993:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018996:	89 02                	mov    DWORD PTR [edx],eax
c0018998:	90                   	nop
c0018999:	c9                   	leave  
c001899a:	c3                   	ret    
c001899b:	90                   	nop

c001899c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001899c:	55                   	push   ebp
c001899d:	89 e5                	mov    ebp,esp
c001899f:	53                   	push   ebx
c00189a0:	83 ec 2c             	sub    esp,0x2c
c00189a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00189a6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00189a9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00189ac:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00189af:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00189b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00189b5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00189b8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00189bb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00189be:	88 d8                	mov    al,bl
c00189c0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00189c3:	88 c8                	mov    al,cl
c00189c5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00189c8:	88 d0                	mov    al,dl
c00189ca:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00189cd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00189d1:	83 c0 08             	add    eax,0x8
c00189d4:	01 c0                	add    eax,eax
c00189d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00189d9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00189dd:	83 c0 08             	add    eax,0x8
c00189e0:	01 c0                	add    eax,eax
c00189e2:	83 c0 01             	add    eax,0x1
c00189e5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00189e8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00189eb:	50                   	push   eax
c00189ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00189ef:	e8 6e fe ff ff       	call   c0018862 <IOAPIC::read(int)>
c00189f4:	83 c4 08             	add    esp,0x8
c00189f7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00189fa:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018a01:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018a04:	c1 e0 18             	shl    eax,0x18
c0018a07:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0018a0a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0018a0d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018a10:	52                   	push   edx
c0018a11:	50                   	push   eax
c0018a12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018a15:	e8 56 ff ff ff       	call   c0018970 <IOAPIC::write(int, int)>
c0018a1a:	83 c4 0c             	add    esp,0xc
c0018a1d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018a20:	50                   	push   eax
c0018a21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018a24:	e8 39 fe ff ff       	call   c0018862 <IOAPIC::read(int)>
c0018a29:	83 c4 08             	add    esp,0x8
c0018a2c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018a2f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0018a36:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0018a3d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0018a44:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0018a48:	85 c0                	test   eax,eax
c0018a4a:	74 09                	je     c0018a55 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0018a4c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0018a53:	eb 07                	jmp    c0018a5c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0018a55:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0018a5c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0018a60:	85 c0                	test   eax,eax
c0018a62:	74 09                	je     c0018a6d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0018a64:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0018a6b:	eb 07                	jmp    c0018a74 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0018a6d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0018a74:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0018a7b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0018a7f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0018a82:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0018a85:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018a88:	52                   	push   edx
c0018a89:	50                   	push   eax
c0018a8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018a8d:	e8 de fe ff ff       	call   c0018970 <IOAPIC::write(int, int)>
c0018a92:	83 c4 0c             	add    esp,0xc
c0018a95:	90                   	nop
c0018a96:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018a99:	c9                   	leave  
c0018a9a:	c3                   	ret    
c0018a9b:	90                   	nop

c0018a9c <noCopro(unsigned long)>:
c0018a9c:	c3                   	ret    

c0018a9d <HalRestart()>:
c0018a9d:	e4 64                	in     al,0x64
c0018a9f:	a8 02                	test   al,0x2
c0018aa1:	75 fa                	jne    c0018a9d <HalRestart()>
c0018aa3:	b0 fe                	mov    al,0xfe
c0018aa5:	e6 64                	out    0x64,al
c0018aa7:	c3                   	ret    

c0018aa8 <HalShutdown()>:
c0018aa8:	c3                   	ret    

c0018aa9 <HalSleep()>:
c0018aa9:	c3                   	ret    

c0018aaa <CPU::close(int, int, void*)>:
c0018aaa:	31 c0                	xor    eax,eax
c0018aac:	c3                   	ret    

c0018aad <x86ReadCMOS(unsigned char)>:
c0018aad:	83 ec 14             	sub    esp,0x14
c0018ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ab4:	88 04 24             	mov    BYTE PTR [esp],al
c0018ab7:	a0 6c cb 02 c0       	mov    al,ds:0xc002cb6c
c0018abc:	0f b6 c0             	movzx  eax,al
c0018abf:	85 c0                	test   eax,eax
c0018ac1:	74 04                	je     c0018ac7 <x86ReadCMOS(unsigned char)+0x1a>
c0018ac3:	b2 00                	mov    dl,0x0
c0018ac5:	eb 02                	jmp    c0018ac9 <x86ReadCMOS(unsigned char)+0x1c>
c0018ac7:	b2 80                	mov    dl,0x80
c0018ac9:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018acc:	09 d0                	or     eax,edx
c0018ace:	0f b6 c0             	movzx  eax,al
c0018ad1:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018ad8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018adc:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018ae0:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018ae5:	ee                   	out    dx,al
c0018ae6:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018aed:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018af2:	89 c2                	mov    edx,eax
c0018af4:	ec                   	in     al,dx
c0018af5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018af9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018afd:	83 c4 14             	add    esp,0x14
c0018b00:	c3                   	ret    

c0018b01 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018b01:	83 ec 18             	sub    esp,0x18
c0018b04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b0c:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0018b10:	88 04 24             	mov    BYTE PTR [esp],al
c0018b13:	a0 6c cb 02 c0       	mov    al,ds:0xc002cb6c
c0018b18:	0f b6 c0             	movzx  eax,al
c0018b1b:	85 c0                	test   eax,eax
c0018b1d:	74 04                	je     c0018b23 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0018b1f:	b2 00                	mov    dl,0x0
c0018b21:	eb 02                	jmp    c0018b25 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018b23:	b2 80                	mov    dl,0x80
c0018b25:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018b29:	09 d0                	or     eax,edx
c0018b2b:	0f b6 c0             	movzx  eax,al
c0018b2e:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018b35:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018b39:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018b3d:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018b42:	ee                   	out    dx,al
c0018b43:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018b47:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018b4e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018b52:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018b56:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018b5b:	ee                   	out    dx,al
c0018b5c:	90                   	nop
c0018b5d:	83 c4 18             	add    esp,0x18
c0018b60:	c3                   	ret    

c0018b61 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018b61:	60                   	pusha  
c0018b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b6a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b6e:	9c                   	pushf  
c0018b6f:	fa                   	cli    
c0018b70:	0f 09                	wbinvd 
c0018b72:	0f 30                	wrmsr  
c0018b74:	9d                   	popf   
c0018b75:	89 c2                	mov    edx,eax
c0018b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b7b:	89 10                	mov    DWORD PTR [eax],edx
c0018b7d:	61                   	popa   
c0018b7e:	90                   	nop
c0018b7f:	c3                   	ret    

c0018b80 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018b80:	60                   	pusha  
c0018b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b85:	89 c1                	mov    ecx,eax
c0018b87:	9c                   	pushf  
c0018b88:	fa                   	cli    
c0018b89:	0f 09                	wbinvd 
c0018b8b:	31 c0                	xor    eax,eax
c0018b8d:	31 d2                	xor    edx,edx
c0018b8f:	0f 32                	rdmsr  
c0018b91:	9d                   	popf   
c0018b92:	89 c2                	mov    edx,eax
c0018b94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b98:	89 10                	mov    DWORD PTR [eax],edx
c0018b9a:	61                   	popa   
c0018b9b:	90                   	nop
c0018b9c:	c3                   	ret    

c0018b9d <AMD_K6_writeback(int, int, int)>:
c0018b9d:	83 ec 20             	sub    esp,0x20
c0018ba0:	a1 70 c1 02 c0       	mov    eax,ds:0xc002c170
c0018ba5:	c1 e8 14             	shr    eax,0x14
c0018ba8:	c1 e8 02             	shr    eax,0x2
c0018bab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018baf:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018bb4:	0f 85 9e 00 00 00    	jne    c0018c58 <AMD_K6_writeback(int, int, int)+0xbb>
c0018bba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bbe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018bc2:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0018bc7:	75 19                	jne    c0018be2 <AMD_K6_writeback(int, int, int)+0x45>
c0018bc9:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018bce:	7f 0a                	jg     c0018bda <AMD_K6_writeback(int, int, int)+0x3d>
c0018bd0:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0018bd8:	eb 08                	jmp    c0018be2 <AMD_K6_writeback(int, int, int)+0x45>
c0018bda:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018be2:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0018be7:	7c 6e                	jl     c0018c57 <AMD_K6_writeback(int, int, int)+0xba>
c0018be9:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018bee:	7e 09                	jle    c0018bf9 <AMD_K6_writeback(int, int, int)+0x5c>
c0018bf0:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0018bf5:	74 36                	je     c0018c2d <AMD_K6_writeback(int, int, int)+0x90>
c0018bf7:	eb 5e                	jmp    c0018c57 <AMD_K6_writeback(int, int, int)+0xba>
c0018bf9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018bfd:	50                   	push   eax
c0018bfe:	68 82 00 00 c0       	push   0xc0000082
c0018c03:	e8 78 ff ff ff       	call   c0018b80 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018c08:	83 c4 08             	add    esp,0x8
c0018c0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c0f:	01 c0                	add    eax,eax
c0018c11:	83 e0 7f             	and    eax,0x7f
c0018c14:	89 c2                	mov    edx,eax
c0018c16:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c1a:	50                   	push   eax
c0018c1b:	6a 00                	push   0x0
c0018c1d:	52                   	push   edx
c0018c1e:	68 82 00 00 c0       	push   0xc0000082
c0018c23:	e8 39 ff ff ff       	call   c0018b61 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018c28:	83 c4 10             	add    esp,0x10
c0018c2b:	eb 2b                	jmp    c0018c58 <AMD_K6_writeback(int, int, int)+0xbb>
c0018c2d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c31:	50                   	push   eax
c0018c32:	68 82 00 00 c0       	push   0xc0000082
c0018c37:	e8 44 ff ff ff       	call   c0018b80 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018c3c:	83 c4 08             	add    esp,0x8
c0018c3f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c43:	50                   	push   eax
c0018c44:	6a 00                	push   0x0
c0018c46:	6a 00                	push   0x0
c0018c48:	68 82 00 00 c0       	push   0xc0000082
c0018c4d:	e8 0f ff ff ff       	call   c0018b61 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018c52:	83 c4 10             	add    esp,0x10
c0018c55:	eb 01                	jmp    c0018c58 <AMD_K6_writeback(int, int, int)+0xbb>
c0018c57:	90                   	nop
c0018c58:	90                   	nop
c0018c59:	83 c4 20             	add    esp,0x20
c0018c5c:	c3                   	ret    

c0018c5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c5d:	56                   	push   esi
c0018c5e:	53                   	push   ebx
c0018c5f:	a1 80 6c 02 c0       	mov    eax,ds:0xc0026c80
c0018c64:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0018c68:	75 32                	jne    c0018c9c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c6a:	8b 15 60 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb60
c0018c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c74:	89 10                	mov    DWORD PTR [eax],edx
c0018c76:	8b 15 5c cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb5c
c0018c7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c80:	89 10                	mov    DWORD PTR [eax],edx
c0018c82:	8b 15 58 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb58
c0018c88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c8c:	89 10                	mov    DWORD PTR [eax],edx
c0018c8e:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0018c94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c98:	89 10                	mov    DWORD PTR [eax],edx
c0018c9a:	eb 5c                	jmp    c0018cf8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018c9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ca0:	ba 00 00 00 00       	mov    edx,0x0
c0018ca5:	89 d1                	mov    ecx,edx
c0018ca7:	0f a2                	cpuid  
c0018ca9:	89 c6                	mov    esi,eax
c0018cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018caf:	89 30                	mov    DWORD PTR [eax],esi
c0018cb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cb5:	89 18                	mov    DWORD PTR [eax],ebx
c0018cb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cbb:	89 08                	mov    DWORD PTR [eax],ecx
c0018cbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018cc1:	89 10                	mov    DWORD PTR [eax],edx
c0018cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018cc7:	a3 80 6c 02 c0       	mov    ds:0xc0026c80,eax
c0018ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cd2:	a3 60 cb 02 c0       	mov    ds:0xc002cb60,eax
c0018cd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cdd:	a3 5c cb 02 c0       	mov    ds:0xc002cb5c,eax
c0018ce2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ce6:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ce8:	a3 58 cb 02 c0       	mov    ds:0xc002cb58,eax
c0018ced:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018cf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cf3:	a3 54 cb 02 c0       	mov    ds:0xc002cb54,eax
c0018cf8:	5b                   	pop    ebx
c0018cf9:	5e                   	pop    esi
c0018cfa:	c3                   	ret    

c0018cfb <cpuidCheckEDX(unsigned int)>:
c0018cfb:	83 ec 10             	sub    esp,0x10
c0018cfe:	89 e0                	mov    eax,esp
c0018d00:	50                   	push   eax
c0018d01:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d05:	50                   	push   eax
c0018d06:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018d0a:	50                   	push   eax
c0018d0b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d0f:	50                   	push   eax
c0018d10:	6a 01                	push   0x1
c0018d12:	e8 46 ff ff ff       	call   c0018c5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d17:	83 c4 14             	add    esp,0x14
c0018d1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018d1d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018d21:	0f 95 c0             	setne  al
c0018d24:	83 c4 10             	add    esp,0x10
c0018d27:	c3                   	ret    

c0018d28 <cpuidCheckECX(unsigned int)>:
c0018d28:	83 ec 10             	sub    esp,0x10
c0018d2b:	89 e0                	mov    eax,esp
c0018d2d:	50                   	push   eax
c0018d2e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d32:	50                   	push   eax
c0018d33:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018d37:	50                   	push   eax
c0018d38:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d3c:	50                   	push   eax
c0018d3d:	6a 01                	push   0x1
c0018d3f:	e8 19 ff ff ff       	call   c0018c5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d44:	83 c4 14             	add    esp,0x14
c0018d47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d4b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018d4f:	0f 95 c0             	setne  al
c0018d52:	83 c4 10             	add    esp,0x10
c0018d55:	c3                   	ret    

c0018d56 <cpuidCheckExtendedEBX(unsigned int)>:
c0018d56:	83 ec 10             	sub    esp,0x10
c0018d59:	89 e0                	mov    eax,esp
c0018d5b:	50                   	push   eax
c0018d5c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d60:	50                   	push   eax
c0018d61:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018d65:	50                   	push   eax
c0018d66:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d6a:	50                   	push   eax
c0018d6b:	6a 07                	push   0x7
c0018d6d:	e8 eb fe ff ff       	call   c0018c5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d72:	83 c4 14             	add    esp,0x14
c0018d75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d79:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018d7d:	0f 95 c0             	setne  al
c0018d80:	83 c4 10             	add    esp,0x10
c0018d83:	c3                   	ret    

c0018d84 <cpuidCheckExtendedECX(unsigned int)>:
c0018d84:	83 ec 10             	sub    esp,0x10
c0018d87:	89 e0                	mov    eax,esp
c0018d89:	50                   	push   eax
c0018d8a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d8e:	50                   	push   eax
c0018d8f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018d93:	50                   	push   eax
c0018d94:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d98:	50                   	push   eax
c0018d99:	6a 07                	push   0x7
c0018d9b:	e8 bd fe ff ff       	call   c0018c5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018da0:	83 c4 14             	add    esp,0x14
c0018da3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018da7:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018dab:	0f 95 c0             	setne  al
c0018dae:	83 c4 10             	add    esp,0x10
c0018db1:	c3                   	ret    

c0018db2 <HalDetectFeatures()>:
c0018db2:	57                   	push   edi
c0018db3:	56                   	push   esi
c0018db4:	53                   	push   ebx
c0018db5:	81 ec 90 00 00 00    	sub    esp,0x90
c0018dbb:	83 ec 04             	sub    esp,0x4
c0018dbe:	6a 08                	push   0x8
c0018dc0:	6a 00                	push   0x0
c0018dc2:	68 8c cb 02 c0       	push   0xc002cb8c
c0018dc7:	e8 24 77 fe ff       	call   c00004f0 <memset>
c0018dcc:	83 c4 10             	add    esp,0x10
c0018dcf:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018dd4:	83 c8 04             	or     eax,0x4
c0018dd7:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018ddc:	83 ec 0c             	sub    esp,0xc
c0018ddf:	68 d0 53 02 c0       	push   0xc00253d0
c0018de4:	e8 93 e1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018de9:	83 c4 10             	add    esp,0x10
c0018dec:	e8 08 74 fe ff       	call   c00001f9 <detectCPUID>
c0018df1:	85 c0                	test   eax,eax
c0018df3:	0f 95 c0             	setne  al
c0018df6:	83 e0 01             	and    eax,0x1
c0018df9:	83 e0 01             	and    eax,0x1
c0018dfc:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018dff:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018e04:	83 e0 fd             	and    eax,0xfffffffd
c0018e07:	88 c2                	mov    dl,al
c0018e09:	88 c8                	mov    al,cl
c0018e0b:	09 d0                	or     eax,edx
c0018e0d:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018e12:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018e17:	83 e0 02             	and    eax,0x2
c0018e1a:	0f b6 c0             	movzx  eax,al
c0018e1d:	85 c0                	test   eax,eax
c0018e1f:	0f 84 84 02 00 00    	je     c00190a9 <HalDetectFeatures()+0x2f7>
c0018e25:	83 ec 0c             	sub    esp,0xc
c0018e28:	6a 20                	push   0x20
c0018e2a:	e8 cc fe ff ff       	call   c0018cfb <cpuidCheckEDX(unsigned int)>
c0018e2f:	83 c4 10             	add    esp,0x10
c0018e32:	83 e0 01             	and    eax,0x1
c0018e35:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018e3c:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018e41:	83 e0 f7             	and    eax,0xfffffff7
c0018e44:	88 c2                	mov    dl,al
c0018e46:	88 c8                	mov    al,cl
c0018e48:	09 d0                	or     eax,edx
c0018e4a:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018e4f:	83 ec 0c             	sub    esp,0xc
c0018e52:	68 00 00 00 04       	push   0x4000000
c0018e57:	e8 9f fe ff ff       	call   c0018cfb <cpuidCheckEDX(unsigned int)>
c0018e5c:	83 c4 10             	add    esp,0x10
c0018e5f:	89 c1                	mov    ecx,eax
c0018e61:	83 e1 01             	and    ecx,0x1
c0018e64:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018e69:	83 e0 fe             	and    eax,0xfffffffe
c0018e6c:	88 c2                	mov    dl,al
c0018e6e:	88 c8                	mov    al,cl
c0018e70:	09 d0                	or     eax,edx
c0018e72:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018e77:	83 ec 0c             	sub    esp,0xc
c0018e7a:	68 80 00 00 00       	push   0x80
c0018e7f:	e8 77 fe ff ff       	call   c0018cfb <cpuidCheckEDX(unsigned int)>
c0018e84:	83 c4 10             	add    esp,0x10
c0018e87:	89 c1                	mov    ecx,eax
c0018e89:	c1 e1 07             	shl    ecx,0x7
c0018e8c:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018e91:	83 e0 7f             	and    eax,0x7f
c0018e94:	88 c2                	mov    dl,al
c0018e96:	88 c8                	mov    al,cl
c0018e98:	09 d0                	or     eax,edx
c0018e9a:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018e9f:	83 ec 0c             	sub    esp,0xc
c0018ea2:	68 00 00 80 00       	push   0x800000
c0018ea7:	e8 4f fe ff ff       	call   c0018cfb <cpuidCheckEDX(unsigned int)>
c0018eac:	83 c4 10             	add    esp,0x10
c0018eaf:	83 e0 01             	and    eax,0x1
c0018eb2:	89 c1                	mov    ecx,eax
c0018eb4:	c1 e1 05             	shl    ecx,0x5
c0018eb7:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018ebc:	83 e0 df             	and    eax,0xffffffdf
c0018ebf:	88 c2                	mov    dl,al
c0018ec1:	88 c8                	mov    al,cl
c0018ec3:	09 d0                	or     eax,edx
c0018ec5:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018eca:	83 ec 0c             	sub    esp,0xc
c0018ecd:	6a 01                	push   0x1
c0018ecf:	e8 e4 43 ff ff       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0018ed4:	83 c4 10             	add    esp,0x10
c0018ed7:	0f b6 c0             	movzx  eax,al
c0018eda:	85 c0                	test   eax,eax
c0018edc:	75 17                	jne    c0018ef5 <HalDetectFeatures()+0x143>
c0018ede:	83 ec 0c             	sub    esp,0xc
c0018ee1:	68 00 04 00 00       	push   0x400
c0018ee6:	e8 cd 43 ff ff       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0018eeb:	83 c4 10             	add    esp,0x10
c0018eee:	0f b6 c0             	movzx  eax,al
c0018ef1:	85 c0                	test   eax,eax
c0018ef3:	74 04                	je     c0018ef9 <HalDetectFeatures()+0x147>
c0018ef5:	b0 01                	mov    al,0x1
c0018ef7:	eb 02                	jmp    c0018efb <HalDetectFeatures()+0x149>
c0018ef9:	b0 00                	mov    al,0x0
c0018efb:	0f b6 c0             	movzx  eax,al
c0018efe:	85 c0                	test   eax,eax
c0018f00:	74 0f                	je     c0018f11 <HalDetectFeatures()+0x15f>
c0018f02:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018f07:	83 e0 fe             	and    eax,0xfffffffe
c0018f0a:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018f0f:	eb 28                	jmp    c0018f39 <HalDetectFeatures()+0x187>
c0018f11:	83 ec 0c             	sub    esp,0xc
c0018f14:	68 00 02 00 00       	push   0x200
c0018f19:	e8 dd fd ff ff       	call   c0018cfb <cpuidCheckEDX(unsigned int)>
c0018f1e:	83 c4 10             	add    esp,0x10
c0018f21:	89 c1                	mov    ecx,eax
c0018f23:	83 e1 01             	and    ecx,0x1
c0018f26:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018f2b:	83 e0 fe             	and    eax,0xfffffffe
c0018f2e:	88 c2                	mov    dl,al
c0018f30:	88 c8                	mov    al,cl
c0018f32:	09 d0                	or     eax,edx
c0018f34:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018f39:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018f3e:	83 e0 01             	and    eax,0x1
c0018f41:	0f b6 c0             	movzx  eax,al
c0018f44:	85 c0                	test   eax,eax
c0018f46:	74 1c                	je     c0018f64 <HalDetectFeatures()+0x1b2>
c0018f48:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018f4d:	83 e0 08             	and    eax,0x8
c0018f50:	0f b6 c0             	movzx  eax,al
c0018f53:	85 c0                	test   eax,eax
c0018f55:	75 0d                	jne    c0018f64 <HalDetectFeatures()+0x1b2>
c0018f57:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018f5c:	83 e0 fe             	and    eax,0xfffffffe
c0018f5f:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018f64:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0018f6c:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0018f74:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0018f7c:	85 c0                	test   eax,eax
c0018f7e:	0f 84 ab 00 00 00    	je     c001902f <HalDetectFeatures()+0x27d>
c0018f84:	83 ec 0c             	sub    esp,0xc
c0018f87:	6a 01                	push   0x1
c0018f89:	e8 9a fd ff ff       	call   c0018d28 <cpuidCheckECX(unsigned int)>
c0018f8e:	83 c4 10             	add    esp,0x10
c0018f91:	83 e0 01             	and    eax,0x1
c0018f94:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018f97:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018f9c:	83 e0 fd             	and    eax,0xfffffffd
c0018f9f:	88 c2                	mov    dl,al
c0018fa1:	88 c8                	mov    al,cl
c0018fa3:	09 d0                	or     eax,edx
c0018fa5:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018faa:	83 ec 0c             	sub    esp,0xc
c0018fad:	68 00 02 00 00       	push   0x200
c0018fb2:	e8 71 fd ff ff       	call   c0018d28 <cpuidCheckECX(unsigned int)>
c0018fb7:	83 c4 10             	add    esp,0x10
c0018fba:	83 e0 01             	and    eax,0x1
c0018fbd:	89 c1                	mov    ecx,eax
c0018fbf:	c1 e1 04             	shl    ecx,0x4
c0018fc2:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018fc7:	83 e0 ef             	and    eax,0xffffffef
c0018fca:	88 c2                	mov    dl,al
c0018fcc:	88 c8                	mov    al,cl
c0018fce:	09 d0                	or     eax,edx
c0018fd0:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018fd5:	83 ec 0c             	sub    esp,0xc
c0018fd8:	68 00 00 08 00       	push   0x80000
c0018fdd:	e8 46 fd ff ff       	call   c0018d28 <cpuidCheckECX(unsigned int)>
c0018fe2:	83 c4 10             	add    esp,0x10
c0018fe5:	83 e0 01             	and    eax,0x1
c0018fe8:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018fef:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018ff4:	83 e0 fb             	and    eax,0xfffffffb
c0018ff7:	88 c2                	mov    dl,al
c0018ff9:	88 c8                	mov    al,cl
c0018ffb:	09 d0                	or     eax,edx
c0018ffd:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0019002:	83 ec 0c             	sub    esp,0xc
c0019005:	68 00 00 10 00       	push   0x100000
c001900a:	e8 19 fd ff ff       	call   c0018d28 <cpuidCheckECX(unsigned int)>
c001900f:	83 c4 10             	add    esp,0x10
c0019012:	83 e0 01             	and    eax,0x1
c0019015:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001901c:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019021:	83 e0 f7             	and    eax,0xfffffff7
c0019024:	88 c2                	mov    dl,al
c0019026:	88 c8                	mov    al,cl
c0019028:	09 d0                	or     eax,edx
c001902a:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c001902f:	83 ec 0c             	sub    esp,0xc
c0019032:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019036:	50                   	push   eax
c0019037:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001903b:	50                   	push   eax
c001903c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019040:	50                   	push   eax
c0019041:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019045:	50                   	push   eax
c0019046:	68 00 00 00 80       	push   0x80000000
c001904b:	e8 0d fc ff ff       	call   c0018c5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019050:	83 c4 20             	add    esp,0x20
c0019053:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019057:	3d 00 00 00 80       	cmp    eax,0x80000000
c001905c:	76 4b                	jbe    c00190a9 <HalDetectFeatures()+0x2f7>
c001905e:	83 ec 0c             	sub    esp,0xc
c0019061:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019065:	50                   	push   eax
c0019066:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001906a:	50                   	push   eax
c001906b:	8d 44 24 34          	lea    eax,[esp+0x34]
c001906f:	50                   	push   eax
c0019070:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019074:	50                   	push   eax
c0019075:	68 01 00 00 80       	push   0x80000001
c001907a:	e8 de fb ff ff       	call   c0018c5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001907f:	83 c4 20             	add    esp,0x20
c0019082:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019087:	83 e0 bf             	and    eax,0xffffffbf
c001908a:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c001908f:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019094:	83 e0 fd             	and    eax,0xfffffffd
c0019097:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c001909c:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c00190a1:	83 e0 fe             	and    eax,0xfffffffe
c00190a4:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c00190a9:	83 ec 0c             	sub    esp,0xc
c00190ac:	68 00 04 00 00       	push   0x400
c00190b1:	e8 02 42 ff ff       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00190b6:	83 c4 10             	add    esp,0x10
c00190b9:	0f b6 c0             	movzx  eax,al
c00190bc:	85 c0                	test   eax,eax
c00190be:	74 0d                	je     c00190cd <HalDetectFeatures()+0x31b>
c00190c0:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c00190c5:	83 e0 fb             	and    eax,0xfffffffb
c00190c8:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c00190cd:	c6 05 88 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb88,0x1
c00190d4:	83 ec 04             	sub    esp,0x4
c00190d7:	6a 0d                	push   0xd
c00190d9:	6a 00                	push   0x0
c00190db:	68 70 cb 02 c0       	push   0xc002cb70
c00190e0:	e8 0b 74 fe ff       	call   c00004f0 <memset>
c00190e5:	83 c4 10             	add    esp,0x10
c00190e8:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c00190ed:	83 e0 02             	and    eax,0x2
c00190f0:	0f b6 c0             	movzx  eax,al
c00190f3:	85 c0                	test   eax,eax
c00190f5:	0f 84 16 08 00 00    	je     c0019911 <HalDetectFeatures()+0xb5f>
c00190fb:	83 ec 0c             	sub    esp,0xc
c00190fe:	6a 10                	push   0x10
c0019100:	e8 f6 fb ff ff       	call   c0018cfb <cpuidCheckEDX(unsigned int)>
c0019105:	83 c4 10             	add    esp,0x10
c0019108:	83 e0 01             	and    eax,0x1
c001910b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019112:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019117:	83 e0 f7             	and    eax,0xfffffff7
c001911a:	88 c2                	mov    dl,al
c001911c:	88 c8                	mov    al,cl
c001911e:	09 d0                	or     eax,edx
c0019120:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0019125:	83 ec 0c             	sub    esp,0xc
c0019128:	6a 40                	push   0x40
c001912a:	e8 cc fb ff ff       	call   c0018cfb <cpuidCheckEDX(unsigned int)>
c001912f:	83 c4 10             	add    esp,0x10
c0019132:	83 e0 01             	and    eax,0x1
c0019135:	89 c1                	mov    ecx,eax
c0019137:	c1 e1 04             	shl    ecx,0x4
c001913a:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c001913f:	83 e0 ef             	and    eax,0xffffffef
c0019142:	88 c2                	mov    dl,al
c0019144:	88 c8                	mov    al,cl
c0019146:	09 d0                	or     eax,edx
c0019148:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c001914d:	83 ec 0c             	sub    esp,0xc
c0019150:	6a 08                	push   0x8
c0019152:	e8 a4 fb ff ff       	call   c0018cfb <cpuidCheckEDX(unsigned int)>
c0019157:	83 c4 10             	add    esp,0x10
c001915a:	83 e0 01             	and    eax,0x1
c001915d:	89 c1                	mov    ecx,eax
c001915f:	c1 e1 05             	shl    ecx,0x5
c0019162:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019167:	83 e0 df             	and    eax,0xffffffdf
c001916a:	88 c2                	mov    dl,al
c001916c:	88 c8                	mov    al,cl
c001916e:	09 d0                	or     eax,edx
c0019170:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0019175:	83 ec 0c             	sub    esp,0xc
c0019178:	68 00 20 00 00       	push   0x2000
c001917d:	e8 79 fb ff ff       	call   c0018cfb <cpuidCheckEDX(unsigned int)>
c0019182:	83 c4 10             	add    esp,0x10
c0019185:	83 e0 01             	and    eax,0x1
c0019188:	89 c1                	mov    ecx,eax
c001918a:	c1 e1 06             	shl    ecx,0x6
c001918d:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019192:	83 e0 bf             	and    eax,0xffffffbf
c0019195:	88 c2                	mov    dl,al
c0019197:	88 c8                	mov    al,cl
c0019199:	09 d0                	or     eax,edx
c001919b:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c00191a0:	83 ec 0c             	sub    esp,0xc
c00191a3:	68 00 00 01 00       	push   0x10000
c00191a8:	e8 4e fb ff ff       	call   c0018cfb <cpuidCheckEDX(unsigned int)>
c00191ad:	83 c4 10             	add    esp,0x10
c00191b0:	89 c1                	mov    ecx,eax
c00191b2:	c1 e1 07             	shl    ecx,0x7
c00191b5:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c00191ba:	83 e0 7f             	and    eax,0x7f
c00191bd:	88 c2                	mov    dl,al
c00191bf:	88 c8                	mov    al,cl
c00191c1:	09 d0                	or     eax,edx
c00191c3:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c00191c8:	83 ec 0c             	sub    esp,0xc
c00191cb:	6a 01                	push   0x1
c00191cd:	e8 29 fb ff ff       	call   c0018cfb <cpuidCheckEDX(unsigned int)>
c00191d2:	83 c4 10             	add    esp,0x10
c00191d5:	83 e0 01             	and    eax,0x1
c00191d8:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00191df:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00191e4:	83 e0 f7             	and    eax,0xfffffff7
c00191e7:	88 c2                	mov    dl,al
c00191e9:	88 c8                	mov    al,cl
c00191eb:	09 d0                	or     eax,edx
c00191ed:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00191f2:	83 ec 0c             	sub    esp,0xc
c00191f5:	68 00 08 00 00       	push   0x800
c00191fa:	e8 fc fa ff ff       	call   c0018cfb <cpuidCheckEDX(unsigned int)>
c00191ff:	83 c4 10             	add    esp,0x10
c0019202:	89 c1                	mov    ecx,eax
c0019204:	83 e1 01             	and    ecx,0x1
c0019207:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001920c:	83 e0 fe             	and    eax,0xfffffffe
c001920f:	88 c2                	mov    dl,al
c0019211:	88 c8                	mov    al,cl
c0019213:	09 d0                	or     eax,edx
c0019215:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c001921a:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c001921f:	83 e0 40             	and    eax,0x40
c0019222:	0f b6 c0             	movzx  eax,al
c0019225:	85 c0                	test   eax,eax
c0019227:	74 0a                	je     c0019233 <HalDetectFeatures()+0x481>
c0019229:	c7 05 68 cb 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002cb68,0x100
c0019233:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019238:	83 e0 80             	and    eax,0xffffff80
c001923b:	0f b6 c0             	movzx  eax,al
c001923e:	85 c0                	test   eax,eax
c0019240:	74 0a                	je     c001924c <HalDetectFeatures()+0x49a>
c0019242:	c7 05 64 cb 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002cb64,0x80
c001924c:	83 ec 0c             	sub    esp,0xc
c001924f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019253:	50                   	push   eax
c0019254:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019258:	50                   	push   eax
c0019259:	8d 44 24 24          	lea    eax,[esp+0x24]
c001925d:	50                   	push   eax
c001925e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019262:	50                   	push   eax
c0019263:	6a 00                	push   0x0
c0019265:	e8 f3 f9 ff ff       	call   c0018c5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001926a:	83 c4 20             	add    esp,0x20
c001926d:	c7 44 24 48 70 cb 02 c0 	mov    DWORD PTR [esp+0x48],0xc002cb70
c0019275:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019279:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001927d:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019285:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019289:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001928d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0019291:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0019295:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019299:	89 c6                	mov    esi,eax
c001929b:	89 d7                	mov    edi,edx
c001929d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001929f:	89 c8                	mov    eax,ecx
c00192a1:	89 fa                	mov    edx,edi
c00192a3:	89 f3                	mov    ebx,esi
c00192a5:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00192a9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00192ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00192b1:	b8 74 cb 02 c0       	mov    eax,0xc002cb74
c00192b6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00192ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192be:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00192c2:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00192ca:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00192ce:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00192d2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00192d6:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00192da:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00192de:	89 c6                	mov    esi,eax
c00192e0:	89 d7                	mov    edi,edx
c00192e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00192e4:	89 c8                	mov    eax,ecx
c00192e6:	89 fa                	mov    edx,edi
c00192e8:	89 f3                	mov    ebx,esi
c00192ea:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00192ee:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00192f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00192f6:	b8 78 cb 02 c0       	mov    eax,0xc002cb78
c00192fb:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0019302:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019306:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001930a:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0019312:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019319:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c001931d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019321:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019328:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001932c:	89 c6                	mov    esi,eax
c001932e:	89 d7                	mov    edi,edx
c0019330:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019332:	89 c8                	mov    eax,ecx
c0019334:	89 fa                	mov    edx,edi
c0019336:	89 f3                	mov    ebx,esi
c0019338:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001933c:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019340:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019344:	83 ec 08             	sub    esp,0x8
c0019347:	68 e5 53 02 c0       	push   0xc00253e5
c001934c:	68 70 cb 02 c0       	push   0xc002cb70
c0019351:	e8 fa 73 fe ff       	call   c0000750 <strcmp>
c0019356:	83 c4 10             	add    esp,0x10
c0019359:	85 c0                	test   eax,eax
c001935b:	74 19                	je     c0019376 <HalDetectFeatures()+0x5c4>
c001935d:	83 ec 08             	sub    esp,0x8
c0019360:	68 f2 53 02 c0       	push   0xc00253f2
c0019365:	68 70 cb 02 c0       	push   0xc002cb70
c001936a:	e8 e1 73 fe ff       	call   c0000750 <strcmp>
c001936f:	83 c4 10             	add    esp,0x10
c0019372:	85 c0                	test   eax,eax
c0019374:	75 04                	jne    c001937a <HalDetectFeatures()+0x5c8>
c0019376:	b0 01                	mov    al,0x1
c0019378:	eb 02                	jmp    c001937c <HalDetectFeatures()+0x5ca>
c001937a:	b0 00                	mov    al,0x0
c001937c:	0f b6 c0             	movzx  eax,al
c001937f:	85 c0                	test   eax,eax
c0019381:	74 0f                	je     c0019392 <HalDetectFeatures()+0x5e0>
c0019383:	c7 05 84 cb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x2
c001938d:	e9 0d 03 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c0019392:	83 ec 08             	sub    esp,0x8
c0019395:	68 ff 53 02 c0       	push   0xc00253ff
c001939a:	68 70 cb 02 c0       	push   0xc002cb70
c001939f:	e8 ac 73 fe ff       	call   c0000750 <strcmp>
c00193a4:	83 c4 10             	add    esp,0x10
c00193a7:	85 c0                	test   eax,eax
c00193a9:	74 19                	je     c00193c4 <HalDetectFeatures()+0x612>
c00193ab:	83 ec 08             	sub    esp,0x8
c00193ae:	68 0c 54 02 c0       	push   0xc002540c
c00193b3:	68 70 cb 02 c0       	push   0xc002cb70
c00193b8:	e8 93 73 fe ff       	call   c0000750 <strcmp>
c00193bd:	83 c4 10             	add    esp,0x10
c00193c0:	85 c0                	test   eax,eax
c00193c2:	75 04                	jne    c00193c8 <HalDetectFeatures()+0x616>
c00193c4:	b0 01                	mov    al,0x1
c00193c6:	eb 02                	jmp    c00193ca <HalDetectFeatures()+0x618>
c00193c8:	b0 00                	mov    al,0x0
c00193ca:	0f b6 c0             	movzx  eax,al
c00193cd:	85 c0                	test   eax,eax
c00193cf:	74 0f                	je     c00193e0 <HalDetectFeatures()+0x62e>
c00193d1:	c7 05 84 cb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x4
c00193db:	e9 bf 02 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c00193e0:	83 ec 08             	sub    esp,0x8
c00193e3:	68 19 54 02 c0       	push   0xc0025419
c00193e8:	68 70 cb 02 c0       	push   0xc002cb70
c00193ed:	e8 5e 73 fe ff       	call   c0000750 <strcmp>
c00193f2:	83 c4 10             	add    esp,0x10
c00193f5:	85 c0                	test   eax,eax
c00193f7:	74 19                	je     c0019412 <HalDetectFeatures()+0x660>
c00193f9:	83 ec 08             	sub    esp,0x8
c00193fc:	68 26 54 02 c0       	push   0xc0025426
c0019401:	68 70 cb 02 c0       	push   0xc002cb70
c0019406:	e8 45 73 fe ff       	call   c0000750 <strcmp>
c001940b:	83 c4 10             	add    esp,0x10
c001940e:	85 c0                	test   eax,eax
c0019410:	75 04                	jne    c0019416 <HalDetectFeatures()+0x664>
c0019412:	b0 01                	mov    al,0x1
c0019414:	eb 02                	jmp    c0019418 <HalDetectFeatures()+0x666>
c0019416:	b0 00                	mov    al,0x0
c0019418:	0f b6 c0             	movzx  eax,al
c001941b:	85 c0                	test   eax,eax
c001941d:	74 0f                	je     c001942e <HalDetectFeatures()+0x67c>
c001941f:	c7 05 84 cb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x5
c0019429:	e9 71 02 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c001942e:	83 ec 08             	sub    esp,0x8
c0019431:	68 33 54 02 c0       	push   0xc0025433
c0019436:	68 70 cb 02 c0       	push   0xc002cb70
c001943b:	e8 10 73 fe ff       	call   c0000750 <strcmp>
c0019440:	83 c4 10             	add    esp,0x10
c0019443:	85 c0                	test   eax,eax
c0019445:	0f 94 c0             	sete   al
c0019448:	0f b6 c0             	movzx  eax,al
c001944b:	85 c0                	test   eax,eax
c001944d:	74 0f                	je     c001945e <HalDetectFeatures()+0x6ac>
c001944f:	c7 05 84 cb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x1
c0019459:	e9 41 02 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c001945e:	83 ec 08             	sub    esp,0x8
c0019461:	68 40 54 02 c0       	push   0xc0025440
c0019466:	68 70 cb 02 c0       	push   0xc002cb70
c001946b:	e8 e0 72 fe ff       	call   c0000750 <strcmp>
c0019470:	83 c4 10             	add    esp,0x10
c0019473:	85 c0                	test   eax,eax
c0019475:	0f 94 c0             	sete   al
c0019478:	0f b6 c0             	movzx  eax,al
c001947b:	85 c0                	test   eax,eax
c001947d:	74 0f                	je     c001948e <HalDetectFeatures()+0x6dc>
c001947f:	c7 05 84 cb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x3
c0019489:	e9 11 02 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c001948e:	83 ec 08             	sub    esp,0x8
c0019491:	68 ff 53 02 c0       	push   0xc00253ff
c0019496:	68 70 cb 02 c0       	push   0xc002cb70
c001949b:	e8 b0 72 fe ff       	call   c0000750 <strcmp>
c00194a0:	83 c4 10             	add    esp,0x10
c00194a3:	85 c0                	test   eax,eax
c00194a5:	0f 94 c0             	sete   al
c00194a8:	0f b6 c0             	movzx  eax,al
c00194ab:	85 c0                	test   eax,eax
c00194ad:	74 0f                	je     c00194be <HalDetectFeatures()+0x70c>
c00194af:	c7 05 84 cb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x6
c00194b9:	e9 e1 01 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c00194be:	83 ec 08             	sub    esp,0x8
c00194c1:	68 4d 54 02 c0       	push   0xc002544d
c00194c6:	68 70 cb 02 c0       	push   0xc002cb70
c00194cb:	e8 80 72 fe ff       	call   c0000750 <strcmp>
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	85 c0                	test   eax,eax
c00194d5:	0f 94 c0             	sete   al
c00194d8:	0f b6 c0             	movzx  eax,al
c00194db:	85 c0                	test   eax,eax
c00194dd:	74 0f                	je     c00194ee <HalDetectFeatures()+0x73c>
c00194df:	c7 05 84 cb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x7
c00194e9:	e9 b1 01 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c00194ee:	83 ec 08             	sub    esp,0x8
c00194f1:	68 5a 54 02 c0       	push   0xc002545a
c00194f6:	68 70 cb 02 c0       	push   0xc002cb70
c00194fb:	e8 50 72 fe ff       	call   c0000750 <strcmp>
c0019500:	83 c4 10             	add    esp,0x10
c0019503:	85 c0                	test   eax,eax
c0019505:	0f 94 c0             	sete   al
c0019508:	0f b6 c0             	movzx  eax,al
c001950b:	85 c0                	test   eax,eax
c001950d:	74 0f                	je     c001951e <HalDetectFeatures()+0x76c>
c001950f:	c7 05 84 cb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x8
c0019519:	e9 81 01 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c001951e:	83 ec 08             	sub    esp,0x8
c0019521:	68 67 54 02 c0       	push   0xc0025467
c0019526:	68 70 cb 02 c0       	push   0xc002cb70
c001952b:	e8 20 72 fe ff       	call   c0000750 <strcmp>
c0019530:	83 c4 10             	add    esp,0x10
c0019533:	85 c0                	test   eax,eax
c0019535:	0f 94 c0             	sete   al
c0019538:	0f b6 c0             	movzx  eax,al
c001953b:	85 c0                	test   eax,eax
c001953d:	74 0f                	je     c001954e <HalDetectFeatures()+0x79c>
c001953f:	c7 05 84 cb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x9
c0019549:	e9 51 01 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c001954e:	83 ec 08             	sub    esp,0x8
c0019551:	68 74 54 02 c0       	push   0xc0025474
c0019556:	68 70 cb 02 c0       	push   0xc002cb70
c001955b:	e8 f0 71 fe ff       	call   c0000750 <strcmp>
c0019560:	83 c4 10             	add    esp,0x10
c0019563:	85 c0                	test   eax,eax
c0019565:	0f 94 c0             	sete   al
c0019568:	0f b6 c0             	movzx  eax,al
c001956b:	85 c0                	test   eax,eax
c001956d:	74 0f                	je     c001957e <HalDetectFeatures()+0x7cc>
c001956f:	c7 05 84 cb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xa
c0019579:	e9 21 01 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c001957e:	83 ec 08             	sub    esp,0x8
c0019581:	68 81 54 02 c0       	push   0xc0025481
c0019586:	68 70 cb 02 c0       	push   0xc002cb70
c001958b:	e8 c0 71 fe ff       	call   c0000750 <strcmp>
c0019590:	83 c4 10             	add    esp,0x10
c0019593:	85 c0                	test   eax,eax
c0019595:	0f 94 c0             	sete   al
c0019598:	0f b6 c0             	movzx  eax,al
c001959b:	85 c0                	test   eax,eax
c001959d:	74 0f                	je     c00195ae <HalDetectFeatures()+0x7fc>
c001959f:	c7 05 84 cb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xb
c00195a9:	e9 f1 00 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c00195ae:	83 ec 08             	sub    esp,0x8
c00195b1:	68 8e 54 02 c0       	push   0xc002548e
c00195b6:	68 70 cb 02 c0       	push   0xc002cb70
c00195bb:	e8 90 71 fe ff       	call   c0000750 <strcmp>
c00195c0:	83 c4 10             	add    esp,0x10
c00195c3:	85 c0                	test   eax,eax
c00195c5:	0f 94 c0             	sete   al
c00195c8:	0f b6 c0             	movzx  eax,al
c00195cb:	85 c0                	test   eax,eax
c00195cd:	74 0f                	je     c00195de <HalDetectFeatures()+0x82c>
c00195cf:	c7 05 84 cb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xc
c00195d9:	e9 c1 00 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c00195de:	83 ec 08             	sub    esp,0x8
c00195e1:	68 9b 54 02 c0       	push   0xc002549b
c00195e6:	68 70 cb 02 c0       	push   0xc002cb70
c00195eb:	e8 60 71 fe ff       	call   c0000750 <strcmp>
c00195f0:	83 c4 10             	add    esp,0x10
c00195f3:	85 c0                	test   eax,eax
c00195f5:	0f 94 c0             	sete   al
c00195f8:	0f b6 c0             	movzx  eax,al
c00195fb:	85 c0                	test   eax,eax
c00195fd:	74 0f                	je     c001960e <HalDetectFeatures()+0x85c>
c00195ff:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c0019609:	e9 91 00 00 00       	jmp    c001969f <HalDetectFeatures()+0x8ed>
c001960e:	83 ec 08             	sub    esp,0x8
c0019611:	68 a8 54 02 c0       	push   0xc00254a8
c0019616:	68 70 cb 02 c0       	push   0xc002cb70
c001961b:	e8 30 71 fe ff       	call   c0000750 <strcmp>
c0019620:	83 c4 10             	add    esp,0x10
c0019623:	85 c0                	test   eax,eax
c0019625:	0f 94 c0             	sete   al
c0019628:	0f b6 c0             	movzx  eax,al
c001962b:	85 c0                	test   eax,eax
c001962d:	74 0c                	je     c001963b <HalDetectFeatures()+0x889>
c001962f:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c0019639:	eb 64                	jmp    c001969f <HalDetectFeatures()+0x8ed>
c001963b:	83 ec 08             	sub    esp,0x8
c001963e:	68 b5 54 02 c0       	push   0xc00254b5
c0019643:	68 70 cb 02 c0       	push   0xc002cb70
c0019648:	e8 03 71 fe ff       	call   c0000750 <strcmp>
c001964d:	83 c4 10             	add    esp,0x10
c0019650:	85 c0                	test   eax,eax
c0019652:	0f 94 c0             	sete   al
c0019655:	0f b6 c0             	movzx  eax,al
c0019658:	85 c0                	test   eax,eax
c001965a:	74 0c                	je     c0019668 <HalDetectFeatures()+0x8b6>
c001965c:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c0019666:	eb 37                	jmp    c001969f <HalDetectFeatures()+0x8ed>
c0019668:	83 ec 08             	sub    esp,0x8
c001966b:	68 c2 54 02 c0       	push   0xc00254c2
c0019670:	68 70 cb 02 c0       	push   0xc002cb70
c0019675:	e8 d6 70 fe ff       	call   c0000750 <strcmp>
c001967a:	83 c4 10             	add    esp,0x10
c001967d:	85 c0                	test   eax,eax
c001967f:	0f 94 c0             	sete   al
c0019682:	0f b6 c0             	movzx  eax,al
c0019685:	85 c0                	test   eax,eax
c0019687:	74 0c                	je     c0019695 <HalDetectFeatures()+0x8e3>
c0019689:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c0019693:	eb 0a                	jmp    c001969f <HalDetectFeatures()+0x8ed>
c0019695:	c7 05 84 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x0
c001969f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196a3:	83 f8 06             	cmp    eax,0x6
c00196a6:	0f 86 cc 00 00 00    	jbe    c0019778 <HalDetectFeatures()+0x9c6>
c00196ac:	83 ec 0c             	sub    esp,0xc
c00196af:	68 80 00 00 00       	push   0x80
c00196b4:	e8 9d f6 ff ff       	call   c0018d56 <cpuidCheckExtendedEBX(unsigned int)>
c00196b9:	83 c4 10             	add    esp,0x10
c00196bc:	89 c1                	mov    ecx,eax
c00196be:	83 e1 01             	and    ecx,0x1
c00196c1:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00196c6:	83 e0 fe             	and    eax,0xfffffffe
c00196c9:	88 c2                	mov    dl,al
c00196cb:	88 c8                	mov    al,cl
c00196cd:	09 d0                	or     eax,edx
c00196cf:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00196d4:	83 ec 0c             	sub    esp,0xc
c00196d7:	68 00 00 10 00       	push   0x100000
c00196dc:	e8 75 f6 ff ff       	call   c0018d56 <cpuidCheckExtendedEBX(unsigned int)>
c00196e1:	83 c4 10             	add    esp,0x10
c00196e4:	83 e0 01             	and    eax,0x1
c00196e7:	89 c1                	mov    ecx,eax
c00196e9:	c1 e1 06             	shl    ecx,0x6
c00196ec:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00196f1:	83 e0 bf             	and    eax,0xffffffbf
c00196f4:	88 c2                	mov    dl,al
c00196f6:	88 c8                	mov    al,cl
c00196f8:	09 d0                	or     eax,edx
c00196fa:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00196ff:	83 ec 0c             	sub    esp,0xc
c0019702:	68 00 00 04 00       	push   0x40000
c0019707:	e8 4a f6 ff ff       	call   c0018d56 <cpuidCheckExtendedEBX(unsigned int)>
c001970c:	83 c4 10             	add    esp,0x10
c001970f:	83 e0 01             	and    eax,0x1
c0019712:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019715:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001971a:	83 e0 fd             	and    eax,0xfffffffd
c001971d:	88 c2                	mov    dl,al
c001971f:	88 c8                	mov    al,cl
c0019721:	09 d0                	or     eax,edx
c0019723:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019728:	83 ec 0c             	sub    esp,0xc
c001972b:	6a 04                	push   0x4
c001972d:	e8 52 f6 ff ff       	call   c0018d84 <cpuidCheckExtendedECX(unsigned int)>
c0019732:	83 c4 10             	add    esp,0x10
c0019735:	83 e0 01             	and    eax,0x1
c0019738:	89 c1                	mov    ecx,eax
c001973a:	c1 e1 05             	shl    ecx,0x5
c001973d:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019742:	83 e0 df             	and    eax,0xffffffdf
c0019745:	88 c2                	mov    dl,al
c0019747:	88 c8                	mov    al,cl
c0019749:	09 d0                	or     eax,edx
c001974b:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019750:	83 ec 0c             	sub    esp,0xc
c0019753:	6a 20                	push   0x20
c0019755:	e8 2a f6 ff ff       	call   c0018d84 <cpuidCheckExtendedECX(unsigned int)>
c001975a:	83 c4 10             	add    esp,0x10
c001975d:	83 e0 01             	and    eax,0x1
c0019760:	89 c1                	mov    ecx,eax
c0019762:	c1 e1 04             	shl    ecx,0x4
c0019765:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001976a:	83 e0 ef             	and    eax,0xffffffef
c001976d:	88 c2                	mov    dl,al
c001976f:	88 c8                	mov    al,cl
c0019771:	09 d0                	or     eax,edx
c0019773:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019778:	83 ec 0c             	sub    esp,0xc
c001977b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001977f:	50                   	push   eax
c0019780:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019784:	50                   	push   eax
c0019785:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019789:	50                   	push   eax
c001978a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001978e:	50                   	push   eax
c001978f:	6a 01                	push   0x1
c0019791:	e8 c7 f4 ff ff       	call   c0018c5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019796:	83 c4 20             	add    esp,0x20
c0019799:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001979d:	83 e0 0f             	and    eax,0xf
c00197a0:	a2 80 cb 02 c0       	mov    ds:0xc002cb80,al
c00197a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197a9:	c1 e8 04             	shr    eax,0x4
c00197ac:	83 e0 0f             	and    eax,0xf
c00197af:	a2 7e cb 02 c0       	mov    ds:0xc002cb7e,al
c00197b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197b8:	c1 e8 08             	shr    eax,0x8
c00197bb:	83 e0 0f             	and    eax,0xf
c00197be:	a2 7d cb 02 c0       	mov    ds:0xc002cb7d,al
c00197c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197c7:	c1 e8 0c             	shr    eax,0xc
c00197ca:	83 e0 03             	and    eax,0x3
c00197cd:	a2 7f cb 02 c0       	mov    ds:0xc002cb7f,al
c00197d2:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c00197d7:	0f b6 c0             	movzx  eax,al
c00197da:	83 f8 06             	cmp    eax,0x6
c00197dd:	74 0d                	je     c00197ec <HalDetectFeatures()+0xa3a>
c00197df:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c00197e4:	0f b6 c0             	movzx  eax,al
c00197e7:	83 f8 0f             	cmp    eax,0xf
c00197ea:	75 18                	jne    c0019804 <HalDetectFeatures()+0xa52>
c00197ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197f0:	c1 e8 10             	shr    eax,0x10
c00197f3:	c1 e0 04             	shl    eax,0x4
c00197f6:	88 c2                	mov    dl,al
c00197f8:	a0 7e cb 02 c0       	mov    al,ds:0xc002cb7e
c00197fd:	09 d0                	or     eax,edx
c00197ff:	a2 7e cb 02 c0       	mov    ds:0xc002cb7e,al
c0019804:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c0019809:	0f b6 c0             	movzx  eax,al
c001980c:	83 f8 0f             	cmp    eax,0xf
c001980f:	75 15                	jne    c0019826 <HalDetectFeatures()+0xa74>
c0019811:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019815:	c1 e8 14             	shr    eax,0x14
c0019818:	88 c2                	mov    dl,al
c001981a:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c001981f:	01 d0                	add    eax,edx
c0019821:	a2 7d cb 02 c0       	mov    ds:0xc002cb7d,al
c0019826:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c001982e:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019836:	85 c0                	test   eax,eax
c0019838:	74 2d                	je     c0019867 <HalDetectFeatures()+0xab5>
c001983a:	83 ec 0c             	sub    esp,0xc
c001983d:	68 00 00 00 40       	push   0x40000000
c0019842:	e8 e1 f4 ff ff       	call   c0018d28 <cpuidCheckECX(unsigned int)>
c0019847:	83 c4 10             	add    esp,0x10
c001984a:	83 e0 01             	and    eax,0x1
c001984d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019854:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019859:	83 e0 fb             	and    eax,0xfffffffb
c001985c:	88 c2                	mov    dl,al
c001985e:	88 c8                	mov    al,cl
c0019860:	09 d0                	or     eax,edx
c0019862:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0019867:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001986c:	83 c8 04             	or     eax,0x4
c001986f:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019874:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019879:	83 c8 08             	or     eax,0x8
c001987c:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019881:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019886:	83 c8 10             	or     eax,0x10
c0019889:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001988e:	83 ec 0c             	sub    esp,0xc
c0019891:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019895:	50                   	push   eax
c0019896:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001989a:	50                   	push   eax
c001989b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001989f:	50                   	push   eax
c00198a0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00198a4:	50                   	push   eax
c00198a5:	68 00 00 00 80       	push   0x80000000
c00198aa:	e8 ae f3 ff ff       	call   c0018c5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198af:	83 c4 20             	add    esp,0x20
c00198b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00198b6:	3d 00 00 00 80       	cmp    eax,0x80000000
c00198bb:	0f 86 96 01 00 00    	jbe    c0019a57 <HalDetectFeatures()+0xca5>
c00198c1:	83 ec 0c             	sub    esp,0xc
c00198c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198c8:	50                   	push   eax
c00198c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00198cd:	50                   	push   eax
c00198ce:	8d 44 24 24          	lea    eax,[esp+0x24]
c00198d2:	50                   	push   eax
c00198d3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00198d7:	50                   	push   eax
c00198d8:	68 01 00 00 80       	push   0x80000001
c00198dd:	e8 7b f3 ff ff       	call   c0018c5d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198e2:	83 c4 20             	add    esp,0x20
c00198e5:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00198ea:	83 e0 7f             	and    eax,0x7f
c00198ed:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00198f2:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00198f7:	83 e0 fb             	and    eax,0xfffffffb
c00198fa:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00198ff:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019904:	83 e0 fd             	and    eax,0xfffffffd
c0019907:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c001990c:	e9 46 01 00 00       	jmp    c0019a57 <HalDetectFeatures()+0xca5>
c0019911:	83 ec 08             	sub    esp,0x8
c0019914:	68 33 54 02 c0       	push   0xc0025433
c0019919:	68 70 cb 02 c0       	push   0xc002cb70
c001991e:	e8 1d 6d fe ff       	call   c0000640 <strcpy>
c0019923:	83 c4 10             	add    esp,0x10
c0019926:	c7 05 84 cb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x1
c0019930:	e8 8e 68 fe ff       	call   c00001c3 <is486>
c0019935:	85 c0                	test   eax,eax
c0019937:	0f 95 c0             	setne  al
c001993a:	0f b6 c0             	movzx  eax,al
c001993d:	85 c0                	test   eax,eax
c001993f:	0f 84 8d 00 00 00    	je     c00199d2 <HalDetectFeatures()+0xc20>
c0019945:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001994a:	83 c8 04             	or     eax,0x4
c001994d:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019952:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019957:	83 c8 08             	or     eax,0x8
c001995a:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001995f:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019964:	83 c8 10             	or     eax,0x10
c0019967:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001996c:	0f 20 c0             	mov    eax,cr0
c001996f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019973:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019977:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001997e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019985:	83 e0 04             	and    eax,0x4
c0019988:	74 1e                	je     c00199a8 <HalDetectFeatures()+0xbf6>
c001998a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019991:	83 e0 10             	and    eax,0x10
c0019994:	75 12                	jne    c00199a8 <HalDetectFeatures()+0xbf6>
c0019996:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001999b:	83 e0 f7             	and    eax,0xfffffff7
c001999e:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00199a3:	e9 af 00 00 00       	jmp    c0019a57 <HalDetectFeatures()+0xca5>
c00199a8:	e8 f1 67 fe ff       	call   c000019e <hasLegacyFPU>
c00199ad:	83 e0 01             	and    eax,0x1
c00199b0:	83 e0 01             	and    eax,0x1
c00199b3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00199ba:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00199bf:	83 e0 f7             	and    eax,0xfffffff7
c00199c2:	88 c2                	mov    dl,al
c00199c4:	88 c8                	mov    al,cl
c00199c6:	09 d0                	or     eax,edx
c00199c8:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00199cd:	e9 85 00 00 00       	jmp    c0019a57 <HalDetectFeatures()+0xca5>
c00199d2:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00199d7:	83 e0 fb             	and    eax,0xfffffffb
c00199da:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00199df:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00199e4:	83 e0 f7             	and    eax,0xfffffff7
c00199e7:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00199ec:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00199f1:	83 e0 ef             	and    eax,0xffffffef
c00199f4:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00199f9:	0f 20 c0             	mov    eax,cr0
c00199fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019a00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a04:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019a0b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019a12:	83 e0 04             	and    eax,0x4
c0019a15:	74 1b                	je     c0019a32 <HalDetectFeatures()+0xc80>
c0019a17:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019a1e:	83 e0 10             	and    eax,0x10
c0019a21:	75 0f                	jne    c0019a32 <HalDetectFeatures()+0xc80>
c0019a23:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019a28:	83 e0 f7             	and    eax,0xfffffff7
c0019a2b:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019a30:	eb 25                	jmp    c0019a57 <HalDetectFeatures()+0xca5>
c0019a32:	e8 67 67 fe ff       	call   c000019e <hasLegacyFPU>
c0019a37:	83 e0 01             	and    eax,0x1
c0019a3a:	83 e0 01             	and    eax,0x1
c0019a3d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019a44:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019a49:	83 e0 f7             	and    eax,0xfffffff7
c0019a4c:	88 c2                	mov    dl,al
c0019a4e:	88 c8                	mov    al,cl
c0019a50:	09 d0                	or     eax,edx
c0019a52:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019a57:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019a5c:	83 e0 08             	and    eax,0x8
c0019a5f:	0f b6 c0             	movzx  eax,al
c0019a62:	85 c0                	test   eax,eax
c0019a64:	75 25                	jne    c0019a8b <HalDetectFeatures()+0xcd9>
c0019a66:	e8 33 67 fe ff       	call   c000019e <hasLegacyFPU>
c0019a6b:	83 e0 01             	and    eax,0x1
c0019a6e:	83 e0 01             	and    eax,0x1
c0019a71:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019a78:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019a7d:	83 e0 f7             	and    eax,0xfffffff7
c0019a80:	88 c2                	mov    dl,al
c0019a82:	88 c8                	mov    al,cl
c0019a84:	09 d0                	or     eax,edx
c0019a86:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019a8b:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019a90:	83 e0 08             	and    eax,0x8
c0019a93:	0f b6 c0             	movzx  eax,al
c0019a96:	85 c0                	test   eax,eax
c0019a98:	74 0d                	je     c0019aa7 <HalDetectFeatures()+0xcf5>
c0019a9a:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019a9f:	83 c8 10             	or     eax,0x10
c0019aa2:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019aa7:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019aac:	83 e0 10             	and    eax,0x10
c0019aaf:	0f b6 c0             	movzx  eax,al
c0019ab2:	85 c0                	test   eax,eax
c0019ab4:	75 23                	jne    c0019ad9 <HalDetectFeatures()+0xd27>
c0019ab6:	e8 fb 7b 00 00       	call   c00216b6 <x87Detect>
c0019abb:	83 e0 01             	and    eax,0x1
c0019abe:	83 e0 01             	and    eax,0x1
c0019ac1:	89 c1                	mov    ecx,eax
c0019ac3:	c1 e1 04             	shl    ecx,0x4
c0019ac6:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019acb:	83 e0 ef             	and    eax,0xffffffef
c0019ace:	88 c2                	mov    dl,al
c0019ad0:	88 c8                	mov    al,cl
c0019ad2:	09 d0                	or     eax,edx
c0019ad4:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019ad9:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019ade:	83 e0 01             	and    eax,0x1
c0019ae1:	0f b6 c0             	movzx  eax,al
c0019ae4:	85 c0                	test   eax,eax
c0019ae6:	75 2d                	jne    c0019b15 <HalDetectFeatures()+0xd63>
c0019ae8:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019aed:	83 e0 02             	and    eax,0x2
c0019af0:	0f b6 c0             	movzx  eax,al
c0019af3:	85 c0                	test   eax,eax
c0019af5:	75 1e                	jne    c0019b15 <HalDetectFeatures()+0xd63>
c0019af7:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019afc:	83 e0 04             	and    eax,0x4
c0019aff:	0f b6 c0             	movzx  eax,al
c0019b02:	85 c0                	test   eax,eax
c0019b04:	75 0f                	jne    c0019b15 <HalDetectFeatures()+0xd63>
c0019b06:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019b0b:	83 e0 08             	and    eax,0x8
c0019b0e:	0f b6 c0             	movzx  eax,al
c0019b11:	85 c0                	test   eax,eax
c0019b13:	74 0d                	je     c0019b22 <HalDetectFeatures()+0xd70>
c0019b15:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b1a:	83 c8 80             	or     eax,0xffffff80
c0019b1d:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019b22:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b27:	83 e0 10             	and    eax,0x10
c0019b2a:	0f b6 c0             	movzx  eax,al
c0019b2d:	85 c0                	test   eax,eax
c0019b2f:	74 2f                	je     c0019b60 <HalDetectFeatures()+0xdae>
c0019b31:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b36:	83 e0 80             	and    eax,0xffffff80
c0019b39:	0f b6 c0             	movzx  eax,al
c0019b3c:	85 c0                	test   eax,eax
c0019b3e:	75 20                	jne    c0019b60 <HalDetectFeatures()+0xdae>
c0019b40:	e8 2b 7b 00 00       	call   c0021670 <sseDetect>
c0019b45:	83 e0 01             	and    eax,0x1
c0019b48:	89 c1                	mov    ecx,eax
c0019b4a:	c1 e1 07             	shl    ecx,0x7
c0019b4d:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b52:	83 e0 7f             	and    eax,0x7f
c0019b55:	88 c2                	mov    dl,al
c0019b57:	88 c8                	mov    al,cl
c0019b59:	09 d0                	or     eax,edx
c0019b5b:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019b60:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b65:	83 e0 80             	and    eax,0xffffff80
c0019b68:	0f b6 c0             	movzx  eax,al
c0019b6b:	85 c0                	test   eax,eax
c0019b6d:	74 1c                	je     c0019b8b <HalDetectFeatures()+0xdd9>
c0019b6f:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019b74:	83 e0 20             	and    eax,0x20
c0019b77:	0f b6 c0             	movzx  eax,al
c0019b7a:	85 c0                	test   eax,eax
c0019b7c:	75 0d                	jne    c0019b8b <HalDetectFeatures()+0xdd9>
c0019b7e:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019b83:	83 e0 df             	and    eax,0xffffffdf
c0019b86:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0019b8b:	c6 05 88 cb 02 c0 00 	mov    BYTE PTR ds:0xc002cb88,0x0
c0019b92:	90                   	nop
c0019b93:	81 c4 90 00 00 00    	add    esp,0x90
c0019b99:	5b                   	pop    ebx
c0019b9a:	5e                   	pop    esi
c0019b9b:	5f                   	pop    edi
c0019b9c:	c3                   	ret    

c0019b9d <HalEnableNMI()>:
c0019b9d:	c6 05 6c cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb6c,0x1
c0019ba4:	6a 10                	push   0x10
c0019ba6:	e8 02 ef ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c0019bab:	83 c4 04             	add    esp,0x4
c0019bae:	90                   	nop
c0019baf:	c3                   	ret    

c0019bb0 <HalDisableNMI()>:
c0019bb0:	c6 05 6c cb 02 c0 00 	mov    BYTE PTR ds:0xc002cb6c,0x0
c0019bb7:	6a 10                	push   0x10
c0019bb9:	e8 ef ee ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c0019bbe:	83 c4 04             	add    esp,0x4
c0019bc1:	90                   	nop
c0019bc2:	c3                   	ret    

c0019bc3 <HalGetNMIState()>:
c0019bc3:	a0 6c cb 02 c0       	mov    al,ds:0xc002cb6c
c0019bc8:	c3                   	ret    

c0019bc9 <x86rdmsr(unsigned int)>:
c0019bc9:	83 ec 1c             	sub    esp,0x1c
c0019bcc:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019bd1:	83 e0 08             	and    eax,0x8
c0019bd4:	0f b6 c0             	movzx  eax,al
c0019bd7:	85 c0                	test   eax,eax
c0019bd9:	75 10                	jne    c0019beb <x86rdmsr(unsigned int)+0x22>
c0019bdb:	83 ec 0c             	sub    esp,0xc
c0019bde:	68 ce 54 02 c0       	push   0xc00254ce
c0019be3:	e8 0c 61 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0019be8:	83 c4 10             	add    esp,0x10
c0019beb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bef:	89 c1                	mov    ecx,eax
c0019bf1:	0f 32                	rdmsr  
c0019bf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019bf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019bfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019c03:	83 c4 1c             	add    esp,0x1c
c0019c06:	c3                   	ret    

c0019c07 <x86wrmsr(unsigned int, unsigned long long)>:
c0019c07:	83 ec 1c             	sub    esp,0x1c
c0019c0a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019c0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019c12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019c16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019c1a:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019c1f:	83 e0 08             	and    eax,0x8
c0019c22:	0f b6 c0             	movzx  eax,al
c0019c25:	85 c0                	test   eax,eax
c0019c27:	75 10                	jne    c0019c39 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0019c29:	83 ec 0c             	sub    esp,0xc
c0019c2c:	68 d4 54 02 c0       	push   0xc00254d4
c0019c31:	e8 be 60 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0019c36:	83 c4 10             	add    esp,0x10
c0019c39:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019c3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019c45:	0f 30                	wrmsr  
c0019c47:	90                   	nop
c0019c48:	83 c4 1c             	add    esp,0x1c
c0019c4b:	c3                   	ret    

c0019c4c <HalHandleGeneralProtectionFault(void*, void*)>:
c0019c4c:	83 ec 0c             	sub    esp,0xc
c0019c4f:	83 ec 0c             	sub    esp,0xc
c0019c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c56:	e8 02 e2 ff ff       	call   c0017e5d <Vm::faultHandler(regs*)>
c0019c5b:	83 c4 10             	add    esp,0x10
c0019c5e:	83 c4 0c             	add    esp,0xc
c0019c61:	c3                   	ret    

c0019c62 <HalFindRSDP()>:
c0019c62:	83 ec 1c             	sub    esp,0x1c
c0019c65:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c0019c6a:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019c6f:	7e 17                	jle    c0019c88 <HalFindRSDP()+0x26>
c0019c71:	83 ec 0c             	sub    esp,0xc
c0019c74:	68 00 04 00 00       	push   0x400
c0019c79:	e8 3a 36 ff ff       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019c7e:	83 c4 10             	add    esp,0x10
c0019c81:	0f b6 c0             	movzx  eax,al
c0019c84:	85 c0                	test   eax,eax
c0019c86:	74 04                	je     c0019c8c <HalFindRSDP()+0x2a>
c0019c88:	b0 01                	mov    al,0x1
c0019c8a:	eb 02                	jmp    c0019c8e <HalFindRSDP()+0x2c>
c0019c8c:	b0 00                	mov    al,0x0
c0019c8e:	0f b6 c0             	movzx  eax,al
c0019c91:	85 c0                	test   eax,eax
c0019c93:	74 1d                	je     c0019cb2 <HalFindRSDP()+0x50>
c0019c95:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019c9a:	83 e0 fb             	and    eax,0xfffffffb
c0019c9d:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019ca2:	83 ec 0c             	sub    esp,0xc
c0019ca5:	68 da 54 02 c0       	push   0xc00254da
c0019caa:	e8 cd d2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019caf:	83 c4 10             	add    esp,0x10
c0019cb2:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019cb7:	83 e0 04             	and    eax,0x4
c0019cba:	0f b6 c0             	movzx  eax,al
c0019cbd:	85 c0                	test   eax,eax
c0019cbf:	75 17                	jne    c0019cd8 <HalFindRSDP()+0x76>
c0019cc1:	83 ec 0c             	sub    esp,0xc
c0019cc4:	68 e9 54 02 c0       	push   0xc00254e9
c0019cc9:	e8 ae d2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019cce:	83 c4 10             	add    esp,0x10
c0019cd1:	b8 00 00 00 00       	mov    eax,0x0
c0019cd6:	eb 63                	jmp    c0019d3b <HalFindRSDP()+0xd9>
c0019cd8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0019ce0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019ce8:	77 2f                	ja     c0019d19 <HalFindRSDP()+0xb7>
c0019cea:	83 ec 04             	sub    esp,0x4
c0019ced:	6a 08                	push   0x8
c0019cef:	68 f3 54 02 c0       	push   0xc00254f3
c0019cf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cf8:	e8 83 66 fe ff       	call   c0000380 <memcmp>
c0019cfd:	83 c4 10             	add    esp,0x10
c0019d00:	85 c0                	test   eax,eax
c0019d02:	0f 94 c0             	sete   al
c0019d05:	0f b6 c0             	movzx  eax,al
c0019d08:	85 c0                	test   eax,eax
c0019d0a:	74 06                	je     c0019d12 <HalFindRSDP()+0xb0>
c0019d0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d10:	eb 29                	jmp    c0019d3b <HalFindRSDP()+0xd9>
c0019d12:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019d17:	eb c7                	jmp    c0019ce0 <HalFindRSDP()+0x7e>
c0019d19:	83 ec 0c             	sub    esp,0xc
c0019d1c:	68 fc 54 02 c0       	push   0xc00254fc
c0019d21:	e8 56 d2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019d26:	83 c4 10             	add    esp,0x10
c0019d29:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019d2e:	83 e0 fb             	and    eax,0xfffffffb
c0019d31:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019d36:	b8 00 00 00 00       	mov    eax,0x0
c0019d3b:	83 c4 1c             	add    esp,0x1c
c0019d3e:	c3                   	ret    

c0019d3f <HalHandlePageFault(void*, void*)>:
c0019d3f:	83 ec 1c             	sub    esp,0x1c
c0019d42:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019d47:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019d4c:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0019d52:	0f 20 d2             	mov    edx,cr2
c0019d55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019d59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d5d:	83 ec 08             	sub    esp,0x8
c0019d60:	52                   	push   edx
c0019d61:	50                   	push   eax
c0019d62:	e8 8d a3 ff ff       	call   c00140f4 <VAS::tryLoadBackOffDisk(unsigned long)>
c0019d67:	83 c4 10             	add    esp,0x10
c0019d6a:	83 c4 1c             	add    esp,0x1c
c0019d6d:	c3                   	ret    

c0019d6e <HalHandleOpcodeFault(void*, void*)>:
c0019d6e:	83 ec 1c             	sub    esp,0x1c
c0019d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019d79:	a0 88 cb 02 c0       	mov    al,ds:0xc002cb88
c0019d7e:	0f b6 c0             	movzx  eax,al
c0019d81:	85 c0                	test   eax,eax
c0019d83:	74 25                	je     c0019daa <HalHandleOpcodeFault(void*, void*)+0x3c>
c0019d85:	83 ec 0c             	sub    esp,0xc
c0019d88:	68 f4 56 02 c0       	push   0xc00256f4
c0019d8d:	e8 ea d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019d92:	83 c4 10             	add    esp,0x10
c0019d95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019d9c:	8d 50 19             	lea    edx,[eax+0x19]
c0019d9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019da3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019da6:	b0 01                	mov    al,0x1
c0019da8:	eb 02                	jmp    c0019dac <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019daa:	b0 00                	mov    al,0x0
c0019dac:	83 c4 1c             	add    esp,0x1c
c0019daf:	c3                   	ret    

c0019db0 <HalDisplayDebugInfo(void*)>:
c0019db0:	83 ec 2c             	sub    esp,0x2c
c0019db3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019db7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dbb:	0f 20 c0             	mov    eax,cr0
c0019dbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019dc2:	0f 20 d0             	mov    eax,cr2
c0019dc5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019dc9:	0f 20 d8             	mov    eax,cr3
c0019dcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019dd0:	0f 20 e0             	mov    eax,cr4
c0019dd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019dd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ddb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019dde:	83 ec 08             	sub    esp,0x8
c0019de1:	50                   	push   eax
c0019de2:	68 16 55 02 c0       	push   0xc0025516
c0019de7:	e8 90 d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019dec:	83 c4 10             	add    esp,0x10
c0019def:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019df3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019df6:	83 ec 08             	sub    esp,0x8
c0019df9:	50                   	push   eax
c0019dfa:	68 07 55 02 c0       	push   0xc0025507
c0019dff:	e8 78 d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e04:	83 c4 10             	add    esp,0x10
c0019e07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e0b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0019e0e:	83 ec 08             	sub    esp,0x8
c0019e11:	50                   	push   eax
c0019e12:	68 12 55 02 c0       	push   0xc0025512
c0019e17:	e8 60 d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e1c:	83 c4 10             	add    esp,0x10
c0019e1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019e26:	83 ec 08             	sub    esp,0x8
c0019e29:	50                   	push   eax
c0019e2a:	68 21 55 02 c0       	push   0xc0025521
c0019e2f:	e8 48 d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e34:	83 c4 10             	add    esp,0x10
c0019e37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e3b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0019e3e:	83 ec 08             	sub    esp,0x8
c0019e41:	50                   	push   eax
c0019e42:	68 2c 55 02 c0       	push   0xc002552c
c0019e47:	e8 30 d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e4c:	83 c4 10             	add    esp,0x10
c0019e4f:	83 ec 08             	sub    esp,0x8
c0019e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e56:	68 37 55 02 c0       	push   0xc0025537
c0019e5b:	e8 1c d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e60:	83 c4 10             	add    esp,0x10
c0019e63:	83 ec 08             	sub    esp,0x8
c0019e66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e6a:	68 42 55 02 c0       	push   0xc0025542
c0019e6f:	e8 08 d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e74:	83 c4 10             	add    esp,0x10
c0019e77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e7b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019e7e:	c1 e0 05             	shl    eax,0x5
c0019e81:	8d 90 e0 69 02 c0    	lea    edx,[eax-0x3ffd9620]
c0019e87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e8b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019e8e:	83 ec 04             	sub    esp,0x4
c0019e91:	52                   	push   edx
c0019e92:	50                   	push   eax
c0019e93:	68 4d 55 02 c0       	push   0xc002554d
c0019e98:	e8 df d0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e9d:	83 c4 10             	add    esp,0x10
c0019ea0:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019ea5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019eab:	83 ec 0c             	sub    esp,0xc
c0019eae:	50                   	push   eax
c0019eaf:	e8 fb 84 ff ff       	call   c00123af <setActiveTerminal(VgaText*)>
c0019eb4:	83 c4 10             	add    esp,0x10
c0019eb7:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019ebc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ec2:	83 ec 08             	sub    esp,0x8
c0019ec5:	68 5c 55 02 c0       	push   0xc002555c
c0019eca:	50                   	push   eax
c0019ecb:	e8 2c 88 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c0019ed0:	83 c4 10             	add    esp,0x10
c0019ed3:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019ed8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ede:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ee2:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0019ee5:	83 ec 08             	sub    esp,0x8
c0019ee8:	52                   	push   edx
c0019ee9:	50                   	push   eax
c0019eea:	e8 c7 87 ff ff       	call   c00126b6 <VgaText::putx(unsigned int)>
c0019eef:	83 c4 10             	add    esp,0x10
c0019ef2:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019ef7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019efd:	83 ec 08             	sub    esp,0x8
c0019f00:	68 6a 55 02 c0       	push   0xc002556a
c0019f05:	50                   	push   eax
c0019f06:	e8 f1 87 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c0019f0b:	83 c4 10             	add    esp,0x10
c0019f0e:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f13:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f19:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0019f1e:	8b 12                	mov    edx,DWORD PTR [edx]
c0019f20:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019f23:	83 c2 0c             	add    edx,0xc
c0019f26:	83 ec 08             	sub    esp,0x8
c0019f29:	52                   	push   edx
c0019f2a:	50                   	push   eax
c0019f2b:	e8 cc 87 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c0019f30:	83 c4 10             	add    esp,0x10
c0019f33:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f38:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f3e:	83 ec 08             	sub    esp,0x8
c0019f41:	68 73 55 02 c0       	push   0xc0025573
c0019f46:	50                   	push   eax
c0019f47:	e8 b0 87 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c0019f4c:	83 c4 10             	add    esp,0x10
c0019f4f:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f54:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f5e:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0019f61:	83 ec 08             	sub    esp,0x8
c0019f64:	52                   	push   edx
c0019f65:	50                   	push   eax
c0019f66:	e8 4b 87 ff ff       	call   c00126b6 <VgaText::putx(unsigned int)>
c0019f6b:	83 c4 10             	add    esp,0x10
c0019f6e:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f73:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f79:	83 ec 08             	sub    esp,0x8
c0019f7c:	68 7b 55 02 c0       	push   0xc002557b
c0019f81:	50                   	push   eax
c0019f82:	e8 75 87 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c0019f87:	83 c4 10             	add    esp,0x10
c0019f8a:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f8f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f95:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f99:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019f9c:	83 ec 08             	sub    esp,0x8
c0019f9f:	52                   	push   edx
c0019fa0:	50                   	push   eax
c0019fa1:	e8 10 87 ff ff       	call   c00126b6 <VgaText::putx(unsigned int)>
c0019fa6:	83 c4 10             	add    esp,0x10
c0019fa9:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019fae:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019fb4:	83 ec 08             	sub    esp,0x8
c0019fb7:	68 83 55 02 c0       	push   0xc0025583
c0019fbc:	50                   	push   eax
c0019fbd:	e8 3a 87 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c0019fc2:	83 c4 10             	add    esp,0x10
c0019fc5:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019fca:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019fd0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019fd4:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019fd7:	83 ec 08             	sub    esp,0x8
c0019fda:	52                   	push   edx
c0019fdb:	50                   	push   eax
c0019fdc:	e8 d5 86 ff ff       	call   c00126b6 <VgaText::putx(unsigned int)>
c0019fe1:	83 c4 10             	add    esp,0x10
c0019fe4:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019fe9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019fef:	83 ec 08             	sub    esp,0x8
c0019ff2:	68 8b 55 02 c0       	push   0xc002558b
c0019ff7:	50                   	push   eax
c0019ff8:	e8 ff 86 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c0019ffd:	83 c4 10             	add    esp,0x10
c001a000:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a005:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a00b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a00f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a012:	83 ec 08             	sub    esp,0x8
c001a015:	52                   	push   edx
c001a016:	50                   	push   eax
c001a017:	e8 9a 86 ff ff       	call   c00126b6 <VgaText::putx(unsigned int)>
c001a01c:	83 c4 10             	add    esp,0x10
c001a01f:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a024:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a02a:	83 ec 08             	sub    esp,0x8
c001a02d:	68 93 55 02 c0       	push   0xc0025593
c001a032:	50                   	push   eax
c001a033:	e8 c4 86 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001a038:	83 c4 10             	add    esp,0x10
c001a03b:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a040:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a046:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a04a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a04d:	83 ec 08             	sub    esp,0x8
c001a050:	52                   	push   edx
c001a051:	50                   	push   eax
c001a052:	e8 5f 86 ff ff       	call   c00126b6 <VgaText::putx(unsigned int)>
c001a057:	83 c4 10             	add    esp,0x10
c001a05a:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a05f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a065:	83 ec 08             	sub    esp,0x8
c001a068:	68 9b 55 02 c0       	push   0xc002559b
c001a06d:	50                   	push   eax
c001a06e:	e8 89 86 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001a073:	83 c4 10             	add    esp,0x10
c001a076:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a07b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a081:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a085:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a088:	83 ec 08             	sub    esp,0x8
c001a08b:	52                   	push   edx
c001a08c:	50                   	push   eax
c001a08d:	e8 24 86 ff ff       	call   c00126b6 <VgaText::putx(unsigned int)>
c001a092:	83 c4 10             	add    esp,0x10
c001a095:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a09a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a0a0:	83 ec 08             	sub    esp,0x8
c001a0a3:	68 a3 55 02 c0       	push   0xc00255a3
c001a0a8:	50                   	push   eax
c001a0a9:	e8 4e 86 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001a0ae:	83 c4 10             	add    esp,0x10
c001a0b1:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a0b6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a0bc:	83 ec 08             	sub    esp,0x8
c001a0bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0c3:	50                   	push   eax
c001a0c4:	e8 ed 85 ff ff       	call   c00126b6 <VgaText::putx(unsigned int)>
c001a0c9:	83 c4 10             	add    esp,0x10
c001a0cc:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a0d1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a0d7:	83 ec 08             	sub    esp,0x8
c001a0da:	68 ac 55 02 c0       	push   0xc00255ac
c001a0df:	50                   	push   eax
c001a0e0:	e8 17 86 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001a0e5:	83 c4 10             	add    esp,0x10
c001a0e8:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a0ed:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a0f3:	83 ec 08             	sub    esp,0x8
c001a0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0fa:	50                   	push   eax
c001a0fb:	e8 b6 85 ff ff       	call   c00126b6 <VgaText::putx(unsigned int)>
c001a100:	83 c4 10             	add    esp,0x10
c001a103:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a108:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a10e:	83 ec 08             	sub    esp,0x8
c001a111:	68 b4 55 02 c0       	push   0xc00255b4
c001a116:	50                   	push   eax
c001a117:	e8 e0 85 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001a11c:	83 c4 10             	add    esp,0x10
c001a11f:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a124:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a12a:	83 ec 08             	sub    esp,0x8
c001a12d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a131:	50                   	push   eax
c001a132:	e8 7f 85 ff ff       	call   c00126b6 <VgaText::putx(unsigned int)>
c001a137:	83 c4 10             	add    esp,0x10
c001a13a:	fa                   	cli    
c001a13b:	f4                   	hlt    
c001a13c:	eb fe                	jmp    c001a13c <HalDisplayDebugInfo(void*)+0x38c>

c001a13e <HalReceivedNMI()>:
c001a13e:	83 ec 1c             	sub    esp,0x1c
c001a141:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a148:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a14c:	89 c2                	mov    edx,eax
c001a14e:	ec                   	in     al,dx
c001a14f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a153:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a157:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a15b:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a166:	89 c2                	mov    edx,eax
c001a168:	ec                   	in     al,dx
c001a169:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a16d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a171:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a175:	83 ec 0c             	sub    esp,0xc
c001a178:	68 bc 55 02 c0       	push   0xc00255bc
c001a17d:	e8 fa cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a182:	83 c4 10             	add    esp,0x10
c001a185:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a18a:	83 e0 10             	and    eax,0x10
c001a18d:	74 10                	je     c001a19f <HalReceivedNMI()+0x61>
c001a18f:	83 ec 0c             	sub    esp,0xc
c001a192:	68 cd 55 02 c0       	push   0xc00255cd
c001a197:	e8 58 5b ff ff       	call   c000fcf4 <KePanic(char const*)>
c001a19c:	83 c4 10             	add    esp,0x10
c001a19f:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a1a4:	83 e0 40             	and    eax,0x40
c001a1a7:	74 10                	je     c001a1b9 <HalReceivedNMI()+0x7b>
c001a1a9:	83 ec 0c             	sub    esp,0xc
c001a1ac:	68 da 55 02 c0       	push   0xc00255da
c001a1b1:	e8 3e 5b ff ff       	call   c000fcf4 <KePanic(char const*)>
c001a1b6:	83 c4 10             	add    esp,0x10
c001a1b9:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a1bd:	0f be c0             	movsx  eax,al
c001a1c0:	85 c0                	test   eax,eax
c001a1c2:	79 10                	jns    c001a1d4 <HalReceivedNMI()+0x96>
c001a1c4:	83 ec 0c             	sub    esp,0xc
c001a1c7:	68 e4 55 02 c0       	push   0xc00255e4
c001a1cc:	e8 23 5b ff ff       	call   c000fcf4 <KePanic(char const*)>
c001a1d1:	83 c4 10             	add    esp,0x10
c001a1d4:	90                   	nop
c001a1d5:	83 c4 1c             	add    esp,0x1c
c001a1d8:	c3                   	ret    

c001a1d9 <HalSystemIdle()>:
c001a1d9:	56                   	push   esi
c001a1da:	53                   	push   ebx
c001a1db:	83 ec 14             	sub    esp,0x14
c001a1de:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001a1e3:	83 e0 10             	and    eax,0x10
c001a1e6:	0f b6 c0             	movzx  eax,al
c001a1e9:	85 c0                	test   eax,eax
c001a1eb:	74 43                	je     c001a230 <HalSystemIdle()+0x57>
c001a1ed:	83 ec 0c             	sub    esp,0xc
c001a1f0:	68 e1 00 00 00       	push   0xe1
c001a1f5:	e8 cf f9 ff ff       	call   c0019bc9 <x86rdmsr(unsigned int)>
c001a1fa:	83 c4 10             	add    esp,0x10
c001a1fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a201:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a205:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a209:	83 e0 02             	and    eax,0x2
c001a20c:	89 c3                	mov    ebx,eax
c001a20e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a212:	83 e0 00             	and    eax,0x0
c001a215:	89 c6                	mov    esi,eax
c001a217:	83 ec 04             	sub    esp,0x4
c001a21a:	56                   	push   esi
c001a21b:	53                   	push   ebx
c001a21c:	68 e1 00 00 00       	push   0xe1
c001a221:	e8 e1 f9 ff ff       	call   c0019c07 <x86wrmsr(unsigned int, unsigned long long)>
c001a226:	83 c4 10             	add    esp,0x10
c001a229:	e8 66 5f fe ff       	call   c0000194 <doTPAUSE>
c001a22e:	eb 01                	jmp    c001a231 <HalSystemIdle()+0x58>
c001a230:	f4                   	hlt    
c001a231:	90                   	nop
c001a232:	83 c4 14             	add    esp,0x14
c001a235:	5b                   	pop    ebx
c001a236:	5e                   	pop    esi
c001a237:	c3                   	ret    

c001a238 <i386SaveCoprocessor(void*)>:
c001a238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a23c:	83 c0 3f             	add    eax,0x3f
c001a23f:	83 e0 c0             	and    eax,0xffffffc0
c001a242:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a246:	ff 25 50 cb 02 c0    	jmp    DWORD PTR ds:0xc002cb50

c001a24c <i386LoadCoprocessor(void*)>:
c001a24c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a250:	83 c0 3f             	add    eax,0x3f
c001a253:	83 e0 c0             	and    eax,0xffffffc0
c001a256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a25a:	ff 25 4c cb 02 c0    	jmp    DWORD PTR ds:0xc002cb4c

c001a260 <x87EmulHandler(regs*, void*)>:
c001a260:	53                   	push   ebx
c001a261:	83 ec 08             	sub    esp,0x8
c001a264:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a269:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a26d:	74 10                	je     c001a27f <x87EmulHandler(regs*, void*)+0x1f>
c001a26f:	83 ec 0c             	sub    esp,0xc
c001a272:	68 f1 55 02 c0       	push   0xc00255f1
c001a277:	e8 78 5a ff ff       	call   c000fcf4 <KePanic(char const*)>
c001a27c:	83 c4 10             	add    esp,0x10
c001a27f:	0f 20 c0             	mov    eax,cr0
c001a282:	a8 08                	test   al,0x8
c001a284:	74 59                	je     c001a2df <x87EmulHandler(regs*, void*)+0x7f>
c001a286:	0f 06                	clts   
c001a288:	a1 48 cb 02 c0       	mov    eax,ds:0xc002cb48
c001a28d:	85 c0                	test   eax,eax
c001a28f:	74 0e                	je     c001a29f <x87EmulHandler(regs*, void*)+0x3f>
c001a291:	83 ec 0c             	sub    esp,0xc
c001a294:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a297:	e8 9c ff ff ff       	call   c001a238 <i386SaveCoprocessor(void*)>
c001a29c:	83 c4 10             	add    esp,0x10
c001a29f:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a2a5:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a2a9:	75 12                	jne    c001a2bd <x87EmulHandler(regs*, void*)+0x5d>
c001a2ab:	83 ec 0c             	sub    esp,0xc
c001a2ae:	68 40 02 00 00       	push   0x240
c001a2b3:	e8 df 55 ff ff       	call   c000f897 <malloc>
c001a2b8:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a2bb:	eb 10                	jmp    c001a2cd <x87EmulHandler(regs*, void*)+0x6d>
c001a2bd:	83 ec 0c             	sub    esp,0xc
c001a2c0:	a1 48 cb 02 c0       	mov    eax,ds:0xc002cb48
c001a2c5:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a2c8:	e8 7f ff ff ff       	call   c001a24c <i386LoadCoprocessor(void*)>
c001a2cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2d2:	83 c4 10             	add    esp,0x10
c001a2d5:	a3 48 cb 02 c0       	mov    ds:0xc002cb48,eax
c001a2da:	83 c4 08             	add    esp,0x8
c001a2dd:	5b                   	pop    ebx
c001a2de:	c3                   	ret    
c001a2df:	83 ec 0c             	sub    esp,0xc
c001a2e2:	68 05 56 02 c0       	push   0xc0025605
c001a2e7:	e8 90 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a2ec:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001a2f4:	83 c4 18             	add    esp,0x18
c001a2f7:	5b                   	pop    ebx
c001a2f8:	e9 13 d3 ff ff       	jmp    c0017610 <KeTerminateCurrentThread(int)>

c001a2fd <HalInitialiseCoprocessor()>:
c001a2fd:	83 ec 10             	sub    esp,0x10
c001a300:	c7 05 48 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb48,0x0
c001a30a:	6a 00                	push   0x0
c001a30c:	68 60 a2 01 c0       	push   0xc001a260
c001a311:	6a 07                	push   0x7
c001a313:	e8 df 07 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a318:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001a31d:	83 c4 10             	add    esp,0x10
c001a320:	a8 80                	test   al,0x80
c001a322:	74 1c                	je     c001a340 <HalInitialiseCoprocessor()+0x43>
c001a324:	c7 05 50 cb 02 c0 88 16 02 c0 	mov    DWORD PTR ds:0xc002cb50,0xc0021688
c001a32e:	c7 05 4c cb 02 c0 90 16 02 c0 	mov    DWORD PTR ds:0xc002cb4c,0xc0021690
c001a338:	83 c4 0c             	add    esp,0xc
c001a33b:	e9 58 73 00 00       	jmp    c0021698 <sseInit>
c001a340:	a8 10                	test   al,0x10
c001a342:	74 1c                	je     c001a360 <HalInitialiseCoprocessor()+0x63>
c001a344:	c7 05 50 cb 02 c0 d7 16 02 c0 	mov    DWORD PTR ds:0xc002cb50,0xc00216d7
c001a34e:	c7 05 4c cb 02 c0 de 16 02 c0 	mov    DWORD PTR ds:0xc002cb4c,0xc00216de
c001a358:	83 c4 0c             	add    esp,0xc
c001a35b:	e9 85 73 00 00       	jmp    c00216e5 <x87Init>
c001a360:	c7 05 50 cb 02 c0 9c 8a 01 c0 	mov    DWORD PTR ds:0xc002cb50,0xc0018a9c
c001a36a:	c7 05 4c cb 02 c0 9c 8a 01 c0 	mov    DWORD PTR ds:0xc002cb4c,0xc0018a9c
c001a374:	0f 20 c0             	mov    eax,cr0
c001a377:	83 c8 04             	or     eax,0x4
c001a37a:	0f 22 c0             	mov    cr0,eax
c001a37d:	83 c4 0c             	add    esp,0xc
c001a380:	c3                   	ret    

c001a381 <HalPanic(char const*)>:
c001a381:	53                   	push   ebx
c001a382:	83 ec 10             	sub    esp,0x10
c001a385:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a389:	fa                   	cli    
c001a38a:	53                   	push   ebx
c001a38b:	68 1b 56 02 c0       	push   0xc002561b
c001a390:	e8 e7 cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a395:	a1 44 cb 02 c0       	mov    eax,ds:0xc002cb44
c001a39a:	83 c4 10             	add    esp,0x10
c001a39d:	85 c0                	test   eax,eax
c001a39f:	74 09                	je     c001a3aa <HalPanic(char const*)+0x29>
c001a3a1:	83 ec 0c             	sub    esp,0xc
c001a3a4:	53                   	push   ebx
c001a3a5:	ff d0                	call   eax
c001a3a7:	83 c4 10             	add    esp,0x10
c001a3aa:	a1 f4 c1 02 c0       	mov    eax,ds:0xc002c1f4
c001a3af:	85 c0                	test   eax,eax
c001a3b1:	0f 84 dc 00 00 00    	je     c001a493 <HalPanic(char const*)+0x112>
c001a3b7:	52                   	push   edx
c001a3b8:	6a 01                	push   0x1
c001a3ba:	6a 0f                	push   0xf
c001a3bc:	50                   	push   eax
c001a3bd:	e8 2c 7e ff ff       	call   c00121ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a3c2:	59                   	pop    ecx
c001a3c3:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a3c9:	e8 2c 80 ff ff       	call   c00123fa <VgaText::clearScreen()>
c001a3ce:	58                   	pop    eax
c001a3cf:	5a                   	pop    edx
c001a3d0:	68 a0 45 02 c0       	push   0xc00245a0
c001a3d5:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a3db:	e8 46 7e ff ff       	call   c0012226 <VgaText::setTitle(char*)>
c001a3e0:	83 c4 0c             	add    esp,0xc
c001a3e3:	6a 01                	push   0x1
c001a3e5:	6a 0f                	push   0xf
c001a3e7:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a3ed:	e8 fc 7d ff ff       	call   c00121ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a3f2:	59                   	pop    ecx
c001a3f3:	58                   	pop    eax
c001a3f4:	68 34 56 02 c0       	push   0xc0025634
c001a3f9:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a3ff:	e8 f8 82 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001a404:	83 c4 0c             	add    esp,0xc
c001a407:	6a 0f                	push   0xf
c001a409:	6a 01                	push   0x1
c001a40b:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a411:	e8 d8 7d ff ff       	call   c00121ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a416:	58                   	pop    eax
c001a417:	5a                   	pop    edx
c001a418:	68 3d 56 02 c0       	push   0xc002563d
c001a41d:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a423:	e8 d4 82 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001a428:	83 c4 0c             	add    esp,0xc
c001a42b:	6a 01                	push   0x1
c001a42d:	6a 0f                	push   0xf
c001a42f:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a435:	e8 b4 7d ff ff       	call   c00121ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a43a:	59                   	pop    ecx
c001a43b:	58                   	pop    eax
c001a43c:	68 81 56 02 c0       	push   0xc0025681
c001a441:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a447:	e8 b0 82 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001a44c:	58                   	pop    eax
c001a44d:	5a                   	pop    edx
c001a44e:	68 4a 56 02 c0       	push   0xc002564a
c001a453:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a459:	e8 9e 82 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001a45e:	59                   	pop    ecx
c001a45f:	58                   	pop    eax
c001a460:	68 84 56 02 c0       	push   0xc0025684
c001a465:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a46b:	e8 8c 82 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001a470:	58                   	pop    eax
c001a471:	5a                   	pop    edx
c001a472:	53                   	push   ebx
c001a473:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a479:	e8 7e 82 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001a47e:	59                   	pop    ecx
c001a47f:	5b                   	pop    ebx
c001a480:	68 81 56 02 c0       	push   0xc0025681
c001a485:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a48b:	e8 6c 82 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001a490:	83 c4 10             	add    esp,0x10
c001a493:	eb fe                	jmp    c001a493 <HalPanic(char const*)+0x112>

c001a495 <HalQueryPerformanceCounter()>:
c001a495:	31 c0                	xor    eax,eax
c001a497:	31 d2                	xor    edx,edx
c001a499:	f6 05 8e cb 02 c0 08 	test   BYTE PTR ds:0xc002cb8e,0x8
c001a4a0:	75 02                	jne    c001a4a4 <HalQueryPerformanceCounter()+0xf>
c001a4a2:	0f 31                	rdtsc  
c001a4a4:	c3                   	ret    

c001a4a5 <HalInitialise()>:
c001a4a5:	53                   	push   ebx
c001a4a6:	83 ec 08             	sub    esp,0x8
c001a4a9:	e8 04 e9 ff ff       	call   c0018db2 <HalDetectFeatures()>
c001a4ae:	83 ec 0c             	sub    esp,0xc
c001a4b1:	68 9d 8a 01 c0       	push   0xc0018a9d
c001a4b6:	e8 19 62 ff ff       	call   c00106d4 <KeRegisterRestartHandler(void (*)())>
c001a4bb:	c7 04 24 a8 8a 01 c0 	mov    DWORD PTR [esp],0xc0018aa8
c001a4c2:	e8 03 62 ff ff       	call   c00106ca <KeRegisterShutdownHandler(void (*)())>
c001a4c7:	c7 04 24 a9 8a 01 c0 	mov    DWORD PTR [esp],0xc0018aa9
c001a4ce:	e8 0b 62 ff ff       	call   c00106de <KeRegisterSleepHandler(void (*)())>
c001a4d3:	e8 e8 1e ff ff       	call   c000c3c0 <scanMADT()>
c001a4d8:	83 c4 10             	add    esp,0x10
c001a4db:	80 3d 40 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be40,0x0
c001a4e2:	75 0d                	jne    c001a4f1 <HalInitialise()+0x4c>
c001a4e4:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001a4e9:	83 e0 fe             	and    eax,0xfffffffe
c001a4ec:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c001a4f1:	e8 de 08 00 00       	call   c001add4 <picOpen()>
c001a4f6:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a4fd:	74 0a                	je     c001a509 <HalInitialise()+0x64>
c001a4ff:	e8 20 08 00 00       	call   c001ad24 <picDisable()>
c001a504:	e8 9b e1 ff ff       	call   c00186a4 <apicOpen()>
c001a509:	bb 0f 00 00 00       	mov    ebx,0xf
c001a50e:	50                   	push   eax
c001a50f:	6a 00                	push   0x0
c001a511:	68 d4 e8 00 c0       	push   0xc000e8d4
c001a516:	6a 02                	push   0x2
c001a518:	e8 da 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a51d:	83 c4 0c             	add    esp,0xc
c001a520:	6a 00                	push   0x0
c001a522:	68 4c e8 00 c0       	push   0xc000e84c
c001a527:	6a 06                	push   0x6
c001a529:	e8 c9 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a52e:	83 c4 0c             	add    esp,0xc
c001a531:	6a 00                	push   0x0
c001a533:	68 e4 e8 00 c0       	push   0xc000e8e4
c001a538:	6a 08                	push   0x8
c001a53a:	e8 b8 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a53f:	83 c4 0c             	add    esp,0xc
c001a542:	6a 00                	push   0x0
c001a544:	68 a4 e7 00 c0       	push   0xc000e7a4
c001a549:	6a 0d                	push   0xd
c001a54b:	e8 a7 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a550:	83 c4 0c             	add    esp,0xc
c001a553:	6a 00                	push   0x0
c001a555:	68 f8 e7 00 c0       	push   0xc000e7f8
c001a55a:	6a 0e                	push   0xe
c001a55c:	e8 96 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a561:	83 c4 0c             	add    esp,0xc
c001a564:	6a 00                	push   0x0
c001a566:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a56b:	6a 00                	push   0x0
c001a56d:	e8 85 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a572:	83 c4 0c             	add    esp,0xc
c001a575:	6a 00                	push   0x0
c001a577:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a57c:	6a 01                	push   0x1
c001a57e:	e8 74 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a583:	83 c4 0c             	add    esp,0xc
c001a586:	6a 00                	push   0x0
c001a588:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a58d:	6a 03                	push   0x3
c001a58f:	e8 63 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a594:	83 c4 0c             	add    esp,0xc
c001a597:	6a 00                	push   0x0
c001a599:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a59e:	6a 04                	push   0x4
c001a5a0:	e8 52 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5a5:	83 c4 0c             	add    esp,0xc
c001a5a8:	6a 00                	push   0x0
c001a5aa:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a5af:	6a 05                	push   0x5
c001a5b1:	e8 41 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5b6:	83 c4 0c             	add    esp,0xc
c001a5b9:	6a 00                	push   0x0
c001a5bb:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a5c0:	6a 00                	push   0x0
c001a5c2:	e8 30 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5c7:	83 c4 0c             	add    esp,0xc
c001a5ca:	6a 00                	push   0x0
c001a5cc:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a5d1:	6a 01                	push   0x1
c001a5d3:	e8 1f 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5d8:	83 c4 0c             	add    esp,0xc
c001a5db:	6a 00                	push   0x0
c001a5dd:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a5e2:	6a 09                	push   0x9
c001a5e4:	e8 0e 05 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5e9:	83 c4 0c             	add    esp,0xc
c001a5ec:	6a 00                	push   0x0
c001a5ee:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a5f3:	6a 0a                	push   0xa
c001a5f5:	e8 fd 04 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5fa:	83 c4 0c             	add    esp,0xc
c001a5fd:	6a 00                	push   0x0
c001a5ff:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a604:	6a 0b                	push   0xb
c001a606:	e8 ec 04 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a60b:	83 c4 10             	add    esp,0x10
c001a60e:	50                   	push   eax
c001a60f:	6a 00                	push   0x0
c001a611:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a616:	53                   	push   ebx
c001a617:	43                   	inc    ebx
c001a618:	e8 da 04 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a61d:	83 c4 10             	add    esp,0x10
c001a620:	83 fb 1e             	cmp    ebx,0x1e
c001a623:	75 e9                	jne    c001a60e <HalInitialise()+0x169>
c001a625:	50                   	push   eax
c001a626:	6a 00                	push   0x0
c001a628:	68 88 20 01 c0       	push   0xc0012088
c001a62d:	6a 60                	push   0x60
c001a62f:	e8 c3 04 00 00       	call   c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a634:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001a639:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a643:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a64a:	e8 48 52 ff ff       	call   c000f897 <malloc>
c001a64f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a652:	89 c3                	mov    ebx,eax
c001a654:	e8 e9 0e 00 00       	call   c001b542 <RTC::RTC()>
c001a659:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a663:	5a                   	pop    edx
c001a664:	59                   	pop    ecx
c001a665:	53                   	push   ebx
c001a666:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c001a66c:	e8 e3 f3 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001a671:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a673:	6a 00                	push   0x0
c001a675:	6a 00                	push   0x0
c001a677:	6a 00                	push   0x0
c001a679:	53                   	push   ebx
c001a67a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a67d:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001a682:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001a688:	83 c4 28             	add    esp,0x28
c001a68b:	5b                   	pop    ebx
c001a68c:	c3                   	ret    

c001a68d <HalMakeBeep(int)>:
c001a68d:	53                   	push   ebx
c001a68e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a692:	85 db                	test   ebx,ebx
c001a694:	75 07                	jne    c001a69d <HalMakeBeep(int)+0x10>
c001a696:	e4 61                	in     al,0x61
c001a698:	83 e0 fc             	and    eax,0xfffffffc
c001a69b:	eb 26                	jmp    c001a6c3 <HalMakeBeep(int)+0x36>
c001a69d:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a6a2:	99                   	cdq    
c001a6a3:	f7 fb                	idiv   ebx
c001a6a5:	89 c1                	mov    ecx,eax
c001a6a7:	b0 b6                	mov    al,0xb6
c001a6a9:	e6 43                	out    0x43,al
c001a6ab:	88 c8                	mov    al,cl
c001a6ad:	e6 42                	out    0x42,al
c001a6af:	89 c8                	mov    eax,ecx
c001a6b1:	c1 e8 08             	shr    eax,0x8
c001a6b4:	e6 42                	out    0x42,al
c001a6b6:	e4 61                	in     al,0x61
c001a6b8:	89 c2                	mov    edx,eax
c001a6ba:	83 ca 03             	or     edx,0x3
c001a6bd:	38 d0                	cmp    al,dl
c001a6bf:	74 04                	je     c001a6c5 <HalMakeBeep(int)+0x38>
c001a6c1:	88 d0                	mov    al,dl
c001a6c3:	e6 61                	out    0x61,al
c001a6c5:	5b                   	pop    ebx
c001a6c6:	c3                   	ret    

c001a6c7 <HalGetRand()>:
c001a6c7:	31 c0                	xor    eax,eax
c001a6c9:	c3                   	ret    

c001a6ca <HalEndOfInterrupt(int)>:
c001a6ca:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a6d1:	74 1d                	je     c001a6f0 <HalEndOfInterrupt(int)+0x26>
c001a6d3:	83 ec 18             	sub    esp,0x18
c001a6d6:	6a 1b                	push   0x1b
c001a6d8:	e8 ec f4 ff ff       	call   c0019bc9 <x86rdmsr(unsigned int)>
c001a6dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a6e2:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a6ec:	83 c4 1c             	add    esp,0x1c
c001a6ef:	c3                   	ret    
c001a6f0:	e9 63 08 00 00       	jmp    c001af58 <picEOI(int)>
c001a6f5:	90                   	nop

c001a6f6 <CPU::CPU()>:
c001a6f6:	83 ec 0c             	sub    esp,0xc
c001a6f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6fd:	83 ec 08             	sub    esp,0x8
c001a700:	68 22 54 02 c0       	push   0xc0025422
c001a705:	50                   	push   eax
c001a706:	e8 ab f4 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001a70b:	83 c4 10             	add    esp,0x10
c001a70e:	ba 20 57 02 c0       	mov    edx,0xc0025720
c001a713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a717:	89 10                	mov    DWORD PTR [eax],edx
c001a719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a71d:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a72b:	05 64 01 00 00       	add    eax,0x164
c001a730:	83 ec 0c             	sub    esp,0xc
c001a733:	50                   	push   eax
c001a734:	e8 fd 41 ff ff       	call   c000e936 <GDT::GDT()>
c001a739:	83 c4 10             	add    esp,0x10
c001a73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a740:	05 68 09 00 00       	add    eax,0x968
c001a745:	83 ec 0c             	sub    esp,0xc
c001a748:	50                   	push   eax
c001a749:	e8 3a 44 ff ff       	call   c000eb88 <IDT::IDT()>
c001a74e:	83 c4 10             	add    esp,0x10
c001a751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a755:	05 68 11 00 00       	add    eax,0x1168
c001a75a:	83 ec 0c             	sub    esp,0xc
c001a75d:	50                   	push   eax
c001a75e:	e8 75 84 ff ff       	call   c0012bd8 <TSS::TSS()>
c001a763:	83 c4 10             	add    esp,0x10
c001a766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a76a:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a774:	90                   	nop
c001a775:	83 c4 0c             	add    esp,0xc
c001a778:	c3                   	ret    
c001a779:	90                   	nop

c001a77a <CPU::setupSMEP()>:
c001a77a:	0f 20 e0             	mov    eax,cr4
c001a77d:	0d 00 00 10 00       	or     eax,0x100000
c001a782:	0f 22 e0             	mov    cr4,eax
c001a785:	c3                   	ret    

c001a786 <CPU::setupUMIP()>:
c001a786:	0f 20 e0             	mov    eax,cr4
c001a789:	80 cc 08             	or     ah,0x8
c001a78c:	0f 22 e0             	mov    cr4,eax
c001a78f:	c3                   	ret    

c001a790 <CPU::setupTSC()>:
c001a790:	0f 20 e0             	mov    eax,cr4
c001a793:	83 c8 04             	or     eax,0x4
c001a796:	0f 22 e0             	mov    cr4,eax
c001a799:	c3                   	ret    

c001a79a <CPU::setupLargePages()>:
c001a79a:	0f 20 e0             	mov    eax,cr4
c001a79d:	83 c8 10             	or     eax,0x10
c001a7a0:	0f 22 e0             	mov    cr4,eax
c001a7a3:	c3                   	ret    

c001a7a4 <CPU::setupPAT()>:
c001a7a4:	f6 05 8c cb 02 c0 08 	test   BYTE PTR ds:0xc002cb8c,0x8
c001a7ab:	74 28                	je     c001a7d5 <CPU::setupPAT()+0x31>
c001a7ad:	53                   	push   ebx
c001a7ae:	83 ec 14             	sub    esp,0x14
c001a7b1:	68 77 02 00 00       	push   0x277
c001a7b6:	e8 0e f4 ff ff       	call   c0019bc9 <x86rdmsr(unsigned int)>
c001a7bb:	83 c4 0c             	add    esp,0xc
c001a7be:	83 e2 f8             	and    edx,0xfffffff8
c001a7c1:	83 ca 01             	or     edx,0x1
c001a7c4:	52                   	push   edx
c001a7c5:	50                   	push   eax
c001a7c6:	68 77 02 00 00       	push   0x277
c001a7cb:	e8 37 f4 ff ff       	call   c0019c07 <x86wrmsr(unsigned int, unsigned long long)>
c001a7d0:	83 c4 18             	add    esp,0x18
c001a7d3:	5b                   	pop    ebx
c001a7d4:	c3                   	ret    
c001a7d5:	c3                   	ret    

c001a7d6 <CPU::setupMTRR()>:
c001a7d6:	c3                   	ret    
c001a7d7:	90                   	nop

c001a7d8 <CPU::setupGlobalPages()>:
c001a7d8:	0f 20 e0             	mov    eax,cr4
c001a7db:	0c 80                	or     al,0x80
c001a7dd:	0f 22 e0             	mov    cr4,eax
c001a7e0:	c3                   	ret    
c001a7e1:	90                   	nop

c001a7e2 <CPU::allowUsermodeDataAccess()>:
c001a7e2:	f6 05 8f cb 02 c0 40 	test   BYTE PTR ds:0xc002cb8f,0x40
c001a7e9:	74 03                	je     c001a7ee <CPU::allowUsermodeDataAccess()+0xc>
c001a7eb:	0f 01 cb             	stac   
c001a7ee:	c3                   	ret    
c001a7ef:	90                   	nop

c001a7f0 <CPU::prohibitUsermodeDataAccess()>:
c001a7f0:	f6 05 8f cb 02 c0 40 	test   BYTE PTR ds:0xc002cb8f,0x40
c001a7f7:	74 03                	je     c001a7fc <CPU::prohibitUsermodeDataAccess()+0xc>
c001a7f9:	0f 01 ca             	clac   
c001a7fc:	c3                   	ret    
c001a7fd:	90                   	nop

c001a7fe <CPU::setupSMAP()>:
c001a7fe:	0f 20 e0             	mov    eax,cr4
c001a801:	0d 00 00 20 00       	or     eax,0x200000
c001a806:	0f 22 e0             	mov    cr4,eax
c001a809:	eb e5                	jmp    c001a7f0 <CPU::prohibitUsermodeDataAccess()>
c001a80b:	90                   	nop

c001a80c <CPU::setupFeatures()>:
c001a80c:	53                   	push   ebx
c001a80d:	83 ec 08             	sub    esp,0x8
c001a810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a814:	f6 05 8f cb 02 c0 20 	test   BYTE PTR ds:0xc002cb8f,0x20
c001a81b:	74 18                	je     c001a835 <CPU::setupFeatures()+0x29>
c001a81d:	83 ec 0c             	sub    esp,0xc
c001a820:	68 8f 56 02 c0       	push   0xc002568f
c001a825:	e8 52 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a82a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a82d:	e8 54 ff ff ff       	call   c001a786 <CPU::setupUMIP()>
c001a832:	83 c4 10             	add    esp,0x10
c001a835:	f6 05 8e cb 02 c0 08 	test   BYTE PTR ds:0xc002cb8e,0x8
c001a83c:	74 18                	je     c001a856 <CPU::setupFeatures()+0x4a>
c001a83e:	83 ec 0c             	sub    esp,0xc
c001a841:	68 99 56 02 c0       	push   0xc0025699
c001a846:	e8 31 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a84b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a84e:	e8 3d ff ff ff       	call   c001a790 <CPU::setupTSC()>
c001a853:	83 c4 10             	add    esp,0x10
c001a856:	f6 05 8e cb 02 c0 20 	test   BYTE PTR ds:0xc002cb8e,0x20
c001a85d:	74 18                	je     c001a877 <CPU::setupFeatures()+0x6b>
c001a85f:	83 ec 0c             	sub    esp,0xc
c001a862:	68 a2 56 02 c0       	push   0xc00256a2
c001a867:	e8 10 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a86c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a86f:	e8 26 ff ff ff       	call   c001a79a <CPU::setupLargePages()>
c001a874:	83 c4 10             	add    esp,0x10
c001a877:	f6 05 8e cb 02 c0 40 	test   BYTE PTR ds:0xc002cb8e,0x40
c001a87e:	74 18                	je     c001a898 <CPU::setupFeatures()+0x8c>
c001a880:	83 ec 0c             	sub    esp,0xc
c001a883:	68 ab 56 02 c0       	push   0xc00256ab
c001a888:	e8 ef c6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a88d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a890:	e8 43 ff ff ff       	call   c001a7d8 <CPU::setupGlobalPages()>
c001a895:	83 c4 10             	add    esp,0x10
c001a898:	f6 05 8e cb 02 c0 80 	test   BYTE PTR ds:0xc002cb8e,0x80
c001a89f:	74 18                	je     c001a8b9 <CPU::setupFeatures()+0xad>
c001a8a1:	83 ec 0c             	sub    esp,0xc
c001a8a4:	68 bd 56 02 c0       	push   0xc00256bd
c001a8a9:	e8 ce c6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a8ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8b1:	e8 ee fe ff ff       	call   c001a7a4 <CPU::setupPAT()>
c001a8b6:	83 c4 10             	add    esp,0x10
c001a8b9:	f6 05 90 cb 02 c0 04 	test   BYTE PTR ds:0xc002cb90,0x4
c001a8c0:	74 11                	je     c001a8d3 <CPU::setupFeatures()+0xc7>
c001a8c2:	c7 44 24 10 c6 56 02 c0 	mov    DWORD PTR [esp+0x10],0xc00256c6
c001a8ca:	83 c4 08             	add    esp,0x8
c001a8cd:	5b                   	pop    ebx
c001a8ce:	e9 a9 c6 fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001a8d3:	83 c4 08             	add    esp,0x8
c001a8d6:	5b                   	pop    ebx
c001a8d7:	c3                   	ret    

c001a8d8 <CPU::open(int, int, void*)>:
c001a8d8:	55                   	push   ebp
c001a8d9:	57                   	push   edi
c001a8da:	56                   	push   esi
c001a8db:	53                   	push   ebx
c001a8dc:	83 ec 18             	sub    esp,0x18
c001a8df:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a8e3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a8e7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a8eb:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001a8f1:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001a8f7:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001a8fd:	50                   	push   eax
c001a8fe:	e8 95 40 ff ff       	call   c000e998 <GDT::setup()>
c001a903:	83 c4 0c             	add    esp,0xc
c001a906:	6a 00                	push   0x0
c001a908:	68 ef be ad de       	push   0xdeadbeef
c001a90d:	55                   	push   ebp
c001a90e:	e8 09 83 ff ff       	call   c0012c1c <TSS::setup(unsigned long, unsigned long)>
c001a913:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a916:	e8 e1 82 ff ff       	call   c0012bfc <TSS::flush()>
c001a91b:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001a921:	89 04 24             	mov    DWORD PTR [esp],eax
c001a924:	e8 d5 42 ff ff       	call   c000ebfe <IDT::setup()>
c001a929:	b8 00 04 00 00       	mov    eax,0x400
c001a92e:	0f 23 f8             	mov    dr7,eax
c001a931:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001a93b:	e8 a8 55 ff ff       	call   c000fee8 <Phys::allocatePage()>
c001a940:	83 c4 10             	add    esp,0x10
c001a943:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001a949:	85 f6                	test   esi,esi
c001a94b:	89 38                	mov    DWORD PTR [eax],edi
c001a94d:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a953:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a956:	74 10                	je     c001a968 <CPU::open(int, int, void*)+0x90>
c001a958:	50                   	push   eax
c001a959:	50                   	push   eax
c001a95a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a960:	56                   	push   esi
c001a961:	e8 62 8c ff ff       	call   c00135c8 <VAS::setCPUSpecific(unsigned long)>
c001a966:	eb 0d                	jmp    c001a975 <CPU::open(int, int, void*)+0x9d>
c001a968:	83 ec 0c             	sub    esp,0xc
c001a96b:	68 d0 56 02 c0       	push   0xc00256d0
c001a970:	e8 7f 53 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001a975:	83 c4 10             	add    esp,0x10
c001a978:	83 ec 0c             	sub    esp,0xc
c001a97b:	68 de 56 02 c0       	push   0xc00256de
c001a980:	e8 80 29 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001a985:	e8 1b fb ff ff       	call   c001a4a5 <HalInitialise()>
c001a98a:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001a991:	e8 22 29 ff ff       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a996:	0f b6 c0             	movzx  eax,al
c001a999:	83 f8 01             	cmp    eax,0x1
c001a99c:	19 c0                	sbb    eax,eax
c001a99e:	83 e0 46             	and    eax,0x46
c001a9a1:	83 c0 1e             	add    eax,0x1e
c001a9a4:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9a7:	e8 41 07 ff ff       	call   c000b0ed <setupTimer(int)>
c001a9ac:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001a9b2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001a9b9:	e8 fa 28 ff ff       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a9be:	83 c4 10             	add    esp,0x10
c001a9c1:	84 c0                	test   al,al
c001a9c3:	74 0c                	je     c001a9d1 <CPU::open(int, int, void*)+0xf9>
c001a9c5:	83 ec 0c             	sub    esp,0xc
c001a9c8:	53                   	push   ebx
c001a9c9:	e8 3e fe ff ff       	call   c001a80c <CPU::setupFeatures()>
c001a9ce:	83 c4 10             	add    esp,0x10
c001a9d1:	83 c4 0c             	add    esp,0xc
c001a9d4:	31 c0                	xor    eax,eax
c001a9d6:	5b                   	pop    ebx
c001a9d7:	5e                   	pop    esi
c001a9d8:	5f                   	pop    edi
c001a9d9:	5d                   	pop    ebp
c001a9da:	c3                   	ret    

c001a9db <convertLegacyIRQNumber(int)>:
c001a9db:	83 ec 0c             	sub    esp,0xc
c001a9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9e2:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a9e9:	74 0c                	je     c001a9f7 <convertLegacyIRQNumber(int)+0x1c>
c001a9eb:	83 f8 0f             	cmp    eax,0xf
c001a9ee:	7f 0b                	jg     c001a9fb <convertLegacyIRQNumber(int)+0x20>
c001a9f0:	0f b6 80 48 62 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9db8]
c001a9f7:	83 c4 0c             	add    esp,0xc
c001a9fa:	c3                   	ret    
c001a9fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a9ff:	83 ec 0c             	sub    esp,0xc
c001aa02:	68 44 57 02 c0       	push   0xc0025744
c001aa07:	e8 e8 52 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001aa0c:	83 c4 10             	add    esp,0x10
c001aa0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa13:	83 c4 0c             	add    esp,0xc
c001aa16:	c3                   	ret    

c001aa17 <KeSetupInterrupts()>:
c001aa17:	31 c0                	xor    eax,eax
c001aa19:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001aa23:	c7 80 a0 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3460],0x0
c001aa2d:	c7 80 a4 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd245c],0x0
c001aa37:	c7 80 a4 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd345c],0x0
c001aa41:	c7 80 a8 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2458],0x0
c001aa4b:	c7 80 a8 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3458],0x0
c001aa55:	c7 80 ac db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2454],0x0
c001aa5f:	c7 80 ac cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3454],0x0
c001aa69:	83 c0 10             	add    eax,0x10
c001aa6c:	3d 00 10 00 00       	cmp    eax,0x1000
c001aa71:	75 a6                	jne    c001aa19 <KeSetupInterrupts()+0x2>
c001aa73:	c3                   	ret    

c001aa74 <int_handler>:
c001aa74:	55                   	push   ebp
c001aa75:	57                   	push   edi
c001aa76:	56                   	push   esi
c001aa77:	53                   	push   ebx
c001aa78:	83 ec 0c             	sub    esp,0xc
c001aa7b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aa7f:	eb 02                	jmp    c001aa83 <int_handler+0xf>
c001aa81:	fa                   	cli    
c001aa82:	f4                   	hlt    
c001aa83:	e8 66 52 ff ff       	call   c000fcee <KeIsKernelInPanic()>
c001aa88:	84 c0                	test   al,al
c001aa8a:	75 f5                	jne    c001aa81 <int_handler+0xd>
c001aa8c:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001aa8f:	8d 46 e0             	lea    eax,[esi-0x20]
c001aa92:	83 f8 17             	cmp    eax,0x17
c001aa95:	76 40                	jbe    c001aad7 <int_handler+0x63>
c001aa97:	c1 e6 04             	shl    esi,0x4
c001aa9a:	31 db                	xor    ebx,ebx
c001aa9c:	8d ae a0 db 02 c0    	lea    ebp,[esi-0x3ffd2460]
c001aaa2:	81 c6 a0 cb 02 c0    	add    esi,0xc002cba0
c001aaa8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001aaac:	85 c0                	test   eax,eax
c001aaae:	74 13                	je     c001aac3 <int_handler+0x4f>
c001aab0:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001aab3:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001aab7:	74 2c                	je     c001aae5 <int_handler+0x71>
c001aab9:	83 ec 08             	sub    esp,0x8
c001aabc:	52                   	push   edx
c001aabd:	57                   	push   edi
c001aabe:	ff d0                	call   eax
c001aac0:	83 c4 10             	add    esp,0x10
c001aac3:	83 c3 01             	add    ebx,0x1
c001aac6:	83 fb 04             	cmp    ebx,0x4
c001aac9:	75 dd                	jne    c001aaa8 <int_handler+0x34>
c001aacb:	83 c4 0c             	add    esp,0xc
c001aace:	31 c0                	xor    eax,eax
c001aad0:	5b                   	pop    ebx
c001aad1:	31 d2                	xor    edx,edx
c001aad3:	5e                   	pop    esi
c001aad4:	5f                   	pop    edi
c001aad5:	5d                   	pop    ebp
c001aad6:	c3                   	ret    
c001aad7:	83 ec 0c             	sub    esp,0xc
c001aada:	50                   	push   eax
c001aadb:	e8 ea fb ff ff       	call   c001a6ca <HalEndOfInterrupt(int)>
c001aae0:	83 c4 10             	add    esp,0x10
c001aae3:	eb b2                	jmp    c001aa97 <int_handler+0x23>
c001aae5:	83 ec 08             	sub    esp,0x8
c001aae8:	52                   	push   edx
c001aae9:	57                   	push   edi
c001aaea:	ff d0                	call   eax
c001aaec:	83 c4 10             	add    esp,0x10
c001aaef:	83 c4 0c             	add    esp,0xc
c001aaf2:	5b                   	pop    ebx
c001aaf3:	5e                   	pop    esi
c001aaf4:	5f                   	pop    edi
c001aaf5:	5d                   	pop    ebp
c001aaf6:	c3                   	ret    

c001aaf7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001aaf7:	56                   	push   esi
c001aaf8:	31 c0                	xor    eax,eax
c001aafa:	53                   	push   ebx
c001aafb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001aaff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab03:	89 ca                	mov    edx,ecx
c001ab05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ab09:	c1 e2 04             	shl    edx,0x4
c001ab0c:	83 bc 82 a0 db 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd2460],0x0
c001ab14:	74 17                	je     c001ab2d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001ab16:	83 c0 01             	add    eax,0x1
c001ab19:	83 f8 04             	cmp    eax,0x4
c001ab1c:	75 ee                	jne    c001ab0c <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001ab1e:	c7 44 24 0c a5 57 02 c0 	mov    DWORD PTR [esp+0xc],0xc00257a5
c001ab26:	5b                   	pop    ebx
c001ab27:	5e                   	pop    esi
c001ab28:	e9 c7 51 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001ab2d:	8d 04 88             	lea    eax,[eax+ecx*4]
c001ab30:	89 1c 85 a0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2460],ebx
c001ab37:	89 34 85 a0 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3460],esi
c001ab3e:	5b                   	pop    ebx
c001ab3f:	5e                   	pop    esi
c001ab40:	c3                   	ret    

c001ab41 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001ab41:	57                   	push   edi
c001ab42:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001ab49:	56                   	push   esi
c001ab4a:	53                   	push   ebx
c001ab4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab53:	74 54                	je     c001aba9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001ab55:	89 c7                	mov    edi,eax
c001ab57:	84 c0                	test   al,al
c001ab59:	74 1d                	je     c001ab78 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001ab5b:	83 fe 0f             	cmp    esi,0xf
c001ab5e:	0f 8f d5 00 00 00    	jg     c001ac39 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001ab64:	0f b6 b6 48 62 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9db8]
c001ab6b:	0f b7 bc 36 20 be 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd41e0]
c001ab73:	d1 ef                	shr    edi,1
c001ab75:	83 e7 01             	and    edi,0x1
c001ab78:	83 ec 08             	sub    esp,0x8
c001ab7b:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c001ab80:	31 db                	xor    ebx,ebx
c001ab82:	50                   	push   eax
c001ab83:	68 b2 57 02 c0       	push   0xc00257b2
c001ab88:	e8 ef c3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ab8d:	83 c4 10             	add    esp,0x10
c001ab90:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c001ab95:	85 c0                	test   eax,eax
c001ab97:	7f 55                	jg     c001abee <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001ab99:	83 ec 0c             	sub    esp,0xc
c001ab9c:	68 c9 57 02 c0       	push   0xc00257c9
c001aba1:	e8 4e 51 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001aba6:	83 c4 10             	add    esp,0x10
c001aba9:	8d 7e 20             	lea    edi,[esi+0x20]
c001abac:	89 f8                	mov    eax,edi
c001abae:	31 d2                	xor    edx,edx
c001abb0:	c1 e0 04             	shl    eax,0x4
c001abb3:	8b 8c 90 a0 db 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd2460]
c001abba:	85 c9                	test   ecx,ecx
c001abbc:	0f 84 8e 00 00 00    	je     c001ac50 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001abc2:	83 c2 01             	add    edx,0x1
c001abc5:	83 fa 04             	cmp    edx,0x4
c001abc8:	75 e9                	jne    c001abb3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001abca:	83 ec 0c             	sub    esp,0xc
c001abcd:	68 80 57 02 c0       	push   0xc0025780
c001abd2:	e8 1d 51 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001abdf:	5b                   	pop    ebx
c001abe0:	5e                   	pop    esi
c001abe1:	5f                   	pop    edi
c001abe2:	c3                   	ret    
c001abe3:	83 c3 01             	add    ebx,0x1
c001abe6:	39 1d 00 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb00,ebx
c001abec:	7e ab                	jle    c001ab99 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001abee:	83 ec 08             	sub    esp,0x8
c001abf1:	8b 04 9d 20 cb 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd34e0]
c001abf8:	56                   	push   esi
c001abf9:	50                   	push   eax
c001abfa:	e8 31 dc ff ff       	call   c0018830 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001abff:	83 c4 10             	add    esp,0x10
c001ac02:	84 c0                	test   al,al
c001ac04:	74 dd                	je     c001abe3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001ac06:	83 ec 04             	sub    esp,0x4
c001ac09:	89 f8                	mov    eax,edi
c001ac0b:	8b 1c 9d 20 cb 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd34e0]
c001ac12:	0f b6 f8             	movzx  edi,al
c001ac15:	57                   	push   edi
c001ac16:	8d 7e 20             	lea    edi,[esi+0x20]
c001ac19:	6a 00                	push   0x0
c001ac1b:	89 f8                	mov    eax,edi
c001ac1d:	0f b6 c0             	movzx  eax,al
c001ac20:	50                   	push   eax
c001ac21:	89 f0                	mov    eax,esi
c001ac23:	6a 00                	push   0x0
c001ac25:	0f b6 c0             	movzx  eax,al
c001ac28:	6a 00                	push   0x0
c001ac2a:	50                   	push   eax
c001ac2b:	53                   	push   ebx
c001ac2c:	e8 6b dd ff ff       	call   c001899c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001ac31:	83 c4 20             	add    esp,0x20
c001ac34:	e9 73 ff ff ff       	jmp    c001abac <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001ac39:	83 ec 0c             	sub    esp,0xc
c001ac3c:	31 ff                	xor    edi,edi
c001ac3e:	68 44 57 02 c0       	push   0xc0025744
c001ac43:	e8 ac 50 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001ac48:	83 c4 10             	add    esp,0x10
c001ac4b:	e9 28 ff ff ff       	jmp    c001ab78 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001ac50:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ac53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac57:	89 14 85 a0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2460],edx
c001ac5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac62:	5b                   	pop    ebx
c001ac63:	89 14 85 a0 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3460],edx
c001ac6a:	89 f0                	mov    eax,esi
c001ac6c:	5e                   	pop    esi
c001ac6d:	5f                   	pop    edi
c001ac6e:	c3                   	ret    

c001ac6f <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001ac6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac73:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ac77:	c1 e0 04             	shl    eax,0x4
c001ac7a:	8d 50 10             	lea    edx,[eax+0x10]
c001ac7d:	39 88 a0 db 02 c0    	cmp    DWORD PTR [eax-0x3ffd2460],ecx
c001ac83:	74 08                	je     c001ac8d <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001ac85:	83 c0 04             	add    eax,0x4
c001ac88:	39 d0                	cmp    eax,edx
c001ac8a:	75 f1                	jne    c001ac7d <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001ac8c:	c3                   	ret    
c001ac8d:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001ac97:	c7 80 a0 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3460],0x0
c001aca1:	eb e2                	jmp    c001ac85 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001aca3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001aca3:	53                   	push   ebx
c001aca4:	83 ec 08             	sub    esp,0x8
c001aca7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001acab:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001acb0:	74 09                	je     c001acbb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001acb2:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001acb9:	75 37                	jne    c001acf2 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001acbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acbf:	83 c0 20             	add    eax,0x20
c001acc2:	c1 e0 04             	shl    eax,0x4
c001acc5:	8d 50 10             	lea    edx,[eax+0x10]
c001acc8:	39 98 a0 db 02 c0    	cmp    DWORD PTR [eax-0x3ffd2460],ebx
c001acce:	74 0c                	je     c001acdc <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001acd0:	83 c0 04             	add    eax,0x4
c001acd3:	39 d0                	cmp    eax,edx
c001acd5:	75 f1                	jne    c001acc8 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001acd7:	83 c4 08             	add    esp,0x8
c001acda:	5b                   	pop    ebx
c001acdb:	c3                   	ret    
c001acdc:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001ace6:	c7 80 a0 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3460],0x0
c001acf0:	eb de                	jmp    c001acd0 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001acf2:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001acf7:	7f 11                	jg     c001ad0a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001acf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acfd:	0f b6 80 48 62 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9db8]
c001ad04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad08:	eb b1                	jmp    c001acbb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001ad0a:	83 ec 0c             	sub    esp,0xc
c001ad0d:	68 d6 57 02 c0       	push   0xc00257d6
c001ad12:	e8 dd 4f ff ff       	call   c000fcf4 <KePanic(char const*)>
c001ad17:	83 c4 10             	add    esp,0x10
c001ad1a:	eb 9f                	jmp    c001acbb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>

c001ad1c <picIoWait()>:
c001ad1c:	eb 00                	jmp    c001ad1e <picIoWait()+0x2>
c001ad1e:	eb 00                	jmp    c001ad20 <picIoWait()+0x4>
c001ad20:	90                   	nop
c001ad21:	c3                   	ret    
c001ad22:	66 90                	xchg   ax,ax

c001ad24 <picDisable()>:
c001ad24:	83 ec 10             	sub    esp,0x10
c001ad27:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001ad2e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001ad33:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ad37:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ad3c:	ee                   	out    dx,al
c001ad3d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001ad44:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001ad49:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ad4d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001ad52:	ee                   	out    dx,al
c001ad53:	90                   	nop
c001ad54:	83 c4 10             	add    esp,0x10
c001ad57:	c3                   	ret    

c001ad58 <picGetIRQReg(int)>:
c001ad58:	83 ec 10             	sub    esp,0x10
c001ad5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad5f:	0f b6 c0             	movzx  eax,al
c001ad62:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001ad69:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001ad6d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ad71:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ad76:	ee                   	out    dx,al
c001ad77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad7b:	0f b6 c0             	movzx  eax,al
c001ad7e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001ad85:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ad89:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ad8d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ad92:	ee                   	out    dx,al
c001ad93:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001ad9a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001ad9f:	89 c2                	mov    edx,eax
c001ada1:	ec                   	in     al,dx
c001ada2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ada6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001adaa:	0f b6 c0             	movzx  eax,al
c001adad:	c1 e0 08             	shl    eax,0x8
c001adb0:	89 c1                	mov    ecx,eax
c001adb2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001adb9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001adbe:	89 c2                	mov    edx,eax
c001adc0:	ec                   	in     al,dx
c001adc1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001adc5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001adc9:	0f b6 c0             	movzx  eax,al
c001adcc:	09 c8                	or     eax,ecx
c001adce:	83 c4 10             	add    esp,0x10
c001add1:	c3                   	ret    
c001add2:	66 90                	xchg   ax,ax

c001add4 <picOpen()>:
c001add4:	83 ec 50             	sub    esp,0x50
c001add7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001adde:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ade3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ade7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adeb:	ee                   	out    dx,al
c001adec:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001adf3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001adf8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001adfc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae00:	ee                   	out    dx,al
c001ae01:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001ae09:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001ae11:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001ae18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae1c:	89 c2                	mov    edx,eax
c001ae1e:	ec                   	in     al,dx
c001ae1f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ae23:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001ae27:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001ae2b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001ae32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae36:	89 c2                	mov    edx,eax
c001ae38:	ec                   	in     al,dx
c001ae39:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001ae3d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001ae41:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001ae45:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001ae4c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001ae51:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ae55:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae59:	ee                   	out    dx,al
c001ae5a:	e8 bd fe ff ff       	call   c001ad1c <picIoWait()>
c001ae5f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001ae66:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001ae6b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001ae6f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae73:	ee                   	out    dx,al
c001ae74:	e8 a3 fe ff ff       	call   c001ad1c <picIoWait()>
c001ae79:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ae7d:	0f b6 c0             	movzx  eax,al
c001ae80:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001ae87:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001ae8b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001ae8f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ae93:	ee                   	out    dx,al
c001ae94:	e8 83 fe ff ff       	call   c001ad1c <picIoWait()>
c001ae99:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ae9d:	0f b6 c0             	movzx  eax,al
c001aea0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001aea7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001aeab:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aeaf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aeb3:	ee                   	out    dx,al
c001aeb4:	e8 63 fe ff ff       	call   c001ad1c <picIoWait()>
c001aeb9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001aec0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001aec5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001aec9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aecd:	ee                   	out    dx,al
c001aece:	e8 49 fe ff ff       	call   c001ad1c <picIoWait()>
c001aed3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001aeda:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001aedf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001aee3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aee7:	ee                   	out    dx,al
c001aee8:	e8 2f fe ff ff       	call   c001ad1c <picIoWait()>
c001aeed:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001aef4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001aef9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001aefd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001af01:	ee                   	out    dx,al
c001af02:	e8 15 fe ff ff       	call   c001ad1c <picIoWait()>
c001af07:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001af0e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001af13:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001af17:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001af1b:	ee                   	out    dx,al
c001af1c:	e8 fb fd ff ff       	call   c001ad1c <picIoWait()>
c001af21:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001af26:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001af2d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001af31:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001af35:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001af39:	ee                   	out    dx,al
c001af3a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001af3f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001af46:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001af4a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001af4e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001af52:	ee                   	out    dx,al
c001af53:	90                   	nop
c001af54:	83 c4 50             	add    esp,0x50
c001af57:	c3                   	ret    

c001af58 <picEOI(int)>:
c001af58:	83 ec 10             	sub    esp,0x10
c001af5b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001af60:	75 1e                	jne    c001af80 <picEOI(int)+0x28>
c001af62:	6a 0b                	push   0xb
c001af64:	e8 ef fd ff ff       	call   c001ad58 <picGetIRQReg(int)>
c001af69:	83 c4 04             	add    esp,0x4
c001af6c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001af71:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001af76:	25 80 00 00 00       	and    eax,0x80
c001af7b:	74 73                	je     c001aff0 <picEOI(int)+0x98>
c001af7d:	8d 76 00             	lea    esi,[esi+0x0]
c001af80:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001af85:	75 31                	jne    c001afb8 <picEOI(int)+0x60>
c001af87:	6a 0b                	push   0xb
c001af89:	e8 ca fd ff ff       	call   c001ad58 <picGetIRQReg(int)>
c001af8e:	83 c4 04             	add    esp,0x4
c001af91:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001af96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af9a:	98                   	cwde   
c001af9b:	85 c0                	test   eax,eax
c001af9d:	78 19                	js     c001afb8 <picEOI(int)+0x60>
c001af9f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001afa6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001afab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001afaf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001afb4:	ee                   	out    dx,al
c001afb5:	eb 3d                	jmp    c001aff4 <picEOI(int)+0x9c>
c001afb7:	90                   	nop
c001afb8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001afbd:	7e 19                	jle    c001afd8 <picEOI(int)+0x80>
c001afbf:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001afc6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001afcb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001afcf:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001afd4:	ee                   	out    dx,al
c001afd5:	8d 76 00             	lea    esi,[esi+0x0]
c001afd8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001afdf:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001afe4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001afe8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001afed:	ee                   	out    dx,al
c001afee:	eb 04                	jmp    c001aff4 <picEOI(int)+0x9c>
c001aff0:	90                   	nop
c001aff1:	8d 76 00             	lea    esi,[esi+0x0]
c001aff4:	83 c4 10             	add    esp,0x10
c001aff7:	c3                   	ret    

c001aff8 <RTC::open(int, int, void*)>:
c001aff8:	31 c0                	xor    eax,eax
c001affa:	c3                   	ret    
c001affb:	90                   	nop

c001affc <RTC::close(int, int, void*)>:
c001affc:	31 c0                	xor    eax,eax
c001affe:	c3                   	ret    
c001afff:	90                   	nop

c001b000 <RTC::timeInSecondsUTC()>:
c001b000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b004:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b00a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b010:	c3                   	ret    
c001b011:	90                   	nop

c001b012 <RTC::timeInDatetimeUTC()>:
c001b012:	53                   	push   ebx
c001b013:	83 ec 14             	sub    esp,0x14
c001b016:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b01a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b01e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b020:	50                   	push   eax
c001b021:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b024:	83 c4 0c             	add    esp,0xc
c001b027:	52                   	push   edx
c001b028:	50                   	push   eax
c001b029:	53                   	push   ebx
c001b02a:	e8 1b e6 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b02f:	89 d8                	mov    eax,ebx
c001b031:	83 c4 14             	add    esp,0x14
c001b034:	5b                   	pop    ebx
c001b035:	c2 04 00             	ret    0x4

c001b038 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b038:	56                   	push   esi
c001b039:	53                   	push   ebx
c001b03a:	83 ec 14             	sub    esp,0x14
c001b03d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b041:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b043:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b046:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b04a:	52                   	push   edx
c001b04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b053:	50                   	push   eax
c001b054:	e8 f1 e5 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b059:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b05d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b061:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b065:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b06d:	89 f0                	mov    eax,esi
c001b06f:	83 c4 20             	add    esp,0x20
c001b072:	5b                   	pop    ebx
c001b073:	5e                   	pop    esi
c001b074:	ff e0                	jmp    eax

c001b076 <RTC::~RTC()>:
c001b076:	83 ec 0c             	sub    esp,0xc
c001b079:	ba 00 58 02 c0       	mov    edx,0xc0025800
c001b07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b082:	89 10                	mov    DWORD PTR [eax],edx
c001b084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b088:	83 ec 0c             	sub    esp,0xc
c001b08b:	50                   	push   eax
c001b08c:	e8 5b e0 fe ff       	call   c00090ec <Clock::~Clock()>
c001b091:	83 c4 10             	add    esp,0x10
c001b094:	90                   	nop
c001b095:	83 c4 0c             	add    esp,0xc
c001b098:	c3                   	ret    
c001b099:	90                   	nop

c001b09a <RTC::~RTC()>:
c001b09a:	83 ec 0c             	sub    esp,0xc
c001b09d:	83 ec 0c             	sub    esp,0xc
c001b0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a4:	e8 cd ff ff ff       	call   c001b076 <RTC::~RTC()>
c001b0a9:	83 c4 10             	add    esp,0x10
c001b0ac:	83 ec 08             	sub    esp,0x8
c001b0af:	68 60 01 00 00       	push   0x160
c001b0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0b8:	e8 f3 22 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c001b0bd:	83 c4 10             	add    esp,0x10
c001b0c0:	83 c4 0c             	add    esp,0xc
c001b0c3:	c3                   	ret    

c001b0c4 <RTC::get_update_in_progress_flag()>:
c001b0c4:	83 ec 18             	sub    esp,0x18
c001b0c7:	6a 0a                	push   0xa
c001b0c9:	e8 df d9 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b0ce:	83 c4 1c             	add    esp,0x1c
c001b0d1:	0f b6 c0             	movzx  eax,al
c001b0d4:	c1 e8 07             	shr    eax,0x7
c001b0d7:	c3                   	ret    

c001b0d8 <RTC::completeRTCRefresh()>:
c001b0d8:	55                   	push   ebp
c001b0d9:	57                   	push   edi
c001b0da:	56                   	push   esi
c001b0db:	53                   	push   ebx
c001b0dc:	83 ec 3c             	sub    esp,0x3c
c001b0df:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001b0e5:	83 ec 0c             	sub    esp,0xc
c001b0e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b0ec:	e8 d3 ff ff ff       	call   c001b0c4 <RTC::get_update_in_progress_flag()>
c001b0f1:	83 c4 10             	add    esp,0x10
c001b0f4:	84 c0                	test   al,al
c001b0f6:	74 0e                	je     c001b106 <RTC::completeRTCRefresh()+0x2e>
c001b0f8:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b0fe:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001b104:	73 df                	jae    c001b0e5 <RTC::completeRTCRefresh()+0xd>
c001b106:	83 ec 0c             	sub    esp,0xc
c001b109:	6a 00                	push   0x0
c001b10b:	e8 9d d9 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b110:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b117:	89 c5                	mov    ebp,eax
c001b119:	e8 8f d9 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b11e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b125:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b129:	e8 7f d9 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b12e:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b135:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b139:	e8 6f d9 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b13e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b145:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b149:	e8 5f d9 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b14e:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b155:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b159:	e8 4f d9 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b15e:	0f b6 c0             	movzx  eax,al
c001b161:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b165:	83 c4 10             	add    esp,0x10
c001b168:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001b16e:	83 ec 0c             	sub    esp,0xc
c001b171:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b175:	e8 4a ff ff ff       	call   c001b0c4 <RTC::get_update_in_progress_flag()>
c001b17a:	83 c4 10             	add    esp,0x10
c001b17d:	84 c0                	test   al,al
c001b17f:	74 0e                	je     c001b18f <RTC::completeRTCRefresh()+0xb7>
c001b181:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b187:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001b18d:	73 df                	jae    c001b16e <RTC::completeRTCRefresh()+0x96>
c001b18f:	83 ec 0c             	sub    esp,0xc
c001b192:	6a 00                	push   0x0
c001b194:	e8 14 d9 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b199:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b1a0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b1a4:	e8 04 d9 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b1a9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b1b0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b1b4:	e8 f4 d8 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b1b9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b1c0:	88 c3                	mov    bl,al
c001b1c2:	e8 e6 d8 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b1c7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b1ce:	89 c6                	mov    esi,eax
c001b1d0:	e8 d8 d8 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b1d5:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b1dc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b1e0:	e8 c8 d8 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b1e5:	89 e9                	mov    ecx,ebp
c001b1e7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b1eb:	0f b6 f8             	movzx  edi,al
c001b1ee:	83 c4 10             	add    esp,0x10
c001b1f1:	0f b6 eb             	movzx  ebp,bl
c001b1f4:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b1f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b1fd:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b202:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b206:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b20a:	0f 94 c0             	sete   al
c001b20d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b211:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001b215:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b21a:	0f 94 c2             	sete   dl
c001b21d:	21 d0                	and    eax,edx
c001b21f:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b223:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b227:	0f 94 c2             	sete   dl
c001b22a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b22e:	21 c2                	and    edx,eax
c001b230:	89 f0                	mov    eax,esi
c001b232:	0f b6 c0             	movzx  eax,al
c001b235:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b239:	89 f0                	mov    eax,esi
c001b23b:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b23f:	0f 94 c0             	sete   al
c001b242:	21 d0                	and    eax,edx
c001b244:	31 d2                	xor    edx,edx
c001b246:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b24a:	0f 94 c2             	sete   dl
c001b24d:	85 c2                	test   edx,eax
c001b24f:	75 27                	jne    c001b278 <RTC::completeRTCRefresh()+0x1a0>
c001b251:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b255:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001b259:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b25d:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b261:	89 f0                	mov    eax,esi
c001b263:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001b267:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b26b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b26f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b273:	e9 f0 fe ff ff       	jmp    c001b168 <RTC::completeRTCRefresh()+0x90>
c001b278:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001b27c:	75 d3                	jne    c001b251 <RTC::completeRTCRefresh()+0x179>
c001b27e:	83 ec 0c             	sub    esp,0xc
c001b281:	6a 0b                	push   0xb
c001b283:	e8 25 d8 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b288:	83 c4 10             	add    esp,0x10
c001b28b:	a8 04                	test   al,0x4
c001b28d:	75 7a                	jne    c001b309 <RTC::completeRTCRefresh()+0x231>
c001b28f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b293:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b297:	83 e1 0f             	and    ecx,0xf
c001b29a:	c1 ea 04             	shr    edx,0x4
c001b29d:	83 e6 0f             	and    esi,0xf
c001b2a0:	6b d2 0a             	imul   edx,edx,0xa
c001b2a3:	c1 ef 04             	shr    edi,0x4
c001b2a6:	01 d1                	add    ecx,edx
c001b2a8:	6b ff 0a             	imul   edi,edi,0xa
c001b2ab:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b2af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b2b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b2b7:	c1 ea 04             	shr    edx,0x4
c001b2ba:	83 e1 0f             	and    ecx,0xf
c001b2bd:	6b d2 0a             	imul   edx,edx,0xa
c001b2c0:	01 d1                	add    ecx,edx
c001b2c2:	89 ea                	mov    edx,ebp
c001b2c4:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b2c8:	c1 ea 04             	shr    edx,0x4
c001b2cb:	89 d9                	mov    ecx,ebx
c001b2cd:	83 e2 07             	and    edx,0x7
c001b2d0:	83 e1 0f             	and    ecx,0xf
c001b2d3:	6b d2 0a             	imul   edx,edx,0xa
c001b2d6:	83 e3 80             	and    ebx,0xffffff80
c001b2d9:	01 d1                	add    ecx,edx
c001b2db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2df:	09 cb                	or     ebx,ecx
c001b2e1:	c1 ea 04             	shr    edx,0x4
c001b2e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2e8:	6b d2 0a             	imul   edx,edx,0xa
c001b2eb:	83 e1 0f             	and    ecx,0xf
c001b2ee:	01 d6                	add    esi,edx
c001b2f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b2f4:	c1 ea 04             	shr    edx,0x4
c001b2f7:	6b d2 0a             	imul   edx,edx,0xa
c001b2fa:	01 d1                	add    ecx,edx
c001b2fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b300:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b304:	83 e2 0f             	and    edx,0xf
c001b307:	01 d7                	add    edi,edx
c001b309:	a8 02                	test   al,0x2
c001b30b:	75 15                	jne    c001b322 <RTC::completeRTCRefresh()+0x24a>
c001b30d:	f6 c3 80             	test   bl,0x80
c001b310:	74 10                	je     c001b322 <RTC::completeRTCRefresh()+0x24a>
c001b312:	83 e3 7f             	and    ebx,0x7f
c001b315:	b9 18 00 00 00       	mov    ecx,0x18
c001b31a:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b31d:	99                   	cdq    
c001b31e:	f7 f9                	idiv   ecx
c001b320:	88 d3                	mov    bl,dl
c001b322:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001b328:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001b32e:	77 06                	ja     c001b336 <RTC::completeRTCRefresh()+0x25e>
c001b330:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b336:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b33b:	31 c9                	xor    ecx,ecx
c001b33d:	c1 e0 10             	shl    eax,0x10
c001b340:	89 cf                	mov    edi,ecx
c001b342:	c1 e5 10             	shl    ebp,0x10
c001b345:	31 d2                	xor    edx,edx
c001b347:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b34d:	09 c7                	or     edi,eax
c001b34f:	89 f0                	mov    eax,esi
c001b351:	89 f9                	mov    ecx,edi
c001b353:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b357:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b35b:	88 c2                	mov    dl,al
c001b35d:	88 d9                	mov    cl,bl
c001b35f:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001b363:	0f b7 c2             	movzx  eax,dx
c001b366:	09 e8                	or     eax,ebp
c001b368:	89 c2                	mov    edx,eax
c001b36a:	50                   	push   eax
c001b36b:	50                   	push   eax
c001b36c:	51                   	push   ecx
c001b36d:	52                   	push   edx
c001b36e:	e8 c9 de fe ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c001b373:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b377:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b37d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b383:	83 c4 4c             	add    esp,0x4c
c001b386:	5b                   	pop    ebx
c001b387:	5e                   	pop    esi
c001b388:	5f                   	pop    edi
c001b389:	5d                   	pop    ebp
c001b38a:	c3                   	ret    
c001b38b:	90                   	nop

c001b38c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b38c:	55                   	push   ebp
c001b38d:	57                   	push   edi
c001b38e:	56                   	push   esi
c001b38f:	53                   	push   ebx
c001b390:	83 ec 34             	sub    esp,0x34
c001b393:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b397:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b39b:	6a 00                	push   0x0
c001b39d:	89 fb                	mov    ebx,edi
c001b39f:	6a 00                	push   0x0
c001b3a1:	e8 5b d7 ff ff       	call   c0018b01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b3a6:	5d                   	pop    ebp
c001b3a7:	58                   	pop    eax
c001b3a8:	6a 00                	push   0x0
c001b3aa:	6a 02                	push   0x2
c001b3ac:	e8 50 d7 ff ff       	call   c0018b01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b3b1:	31 d2                	xor    edx,edx
c001b3b3:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b3ba:	89 f9                	mov    ecx,edi
c001b3bc:	89 f8                	mov    eax,edi
c001b3be:	c1 e9 10             	shr    ecx,0x10
c001b3c1:	0f b6 c4             	movzx  eax,ah
c001b3c4:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b3c8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b3cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b3d0:	b9 64 00 00 00       	mov    ecx,0x64
c001b3d5:	89 f0                	mov    eax,esi
c001b3d7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b3db:	89 f0                	mov    eax,esi
c001b3dd:	0f b6 c4             	movzx  eax,ah
c001b3e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b3e4:	89 f0                	mov    eax,esi
c001b3e6:	c1 e8 10             	shr    eax,0x10
c001b3e9:	f7 f1                	div    ecx
c001b3eb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b3ef:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b3f3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b3f7:	e8 b1 d6 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b3fc:	83 c4 10             	add    esp,0x10
c001b3ff:	89 c5                	mov    ebp,eax
c001b401:	a8 04                	test   al,0x4
c001b403:	75 6e                	jne    c001b473 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b405:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b409:	31 d2                	xor    edx,edx
c001b40b:	0f b6 c1             	movzx  eax,cl
c001b40e:	b9 0a 00 00 00       	mov    ecx,0xa
c001b413:	f7 f1                	div    ecx
c001b415:	c1 e0 04             	shl    eax,0x4
c001b418:	09 d0                	or     eax,edx
c001b41a:	31 d2                	xor    edx,edx
c001b41c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b420:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b425:	f7 f1                	div    ecx
c001b427:	c1 e0 04             	shl    eax,0x4
c001b42a:	09 d0                	or     eax,edx
c001b42c:	31 d2                	xor    edx,edx
c001b42e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b432:	0f b6 c3             	movzx  eax,bl
c001b435:	f7 f1                	div    ecx
c001b437:	c1 e0 04             	shl    eax,0x4
c001b43a:	09 d0                	or     eax,edx
c001b43c:	31 d2                	xor    edx,edx
c001b43e:	89 c3                	mov    ebx,eax
c001b440:	89 f0                	mov    eax,esi
c001b442:	0f b6 c0             	movzx  eax,al
c001b445:	f7 f1                	div    ecx
c001b447:	c1 e0 04             	shl    eax,0x4
c001b44a:	09 d0                	or     eax,edx
c001b44c:	31 d2                	xor    edx,edx
c001b44e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b452:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b457:	f7 f1                	div    ecx
c001b459:	c1 e0 04             	shl    eax,0x4
c001b45c:	09 d0                	or     eax,edx
c001b45e:	31 d2                	xor    edx,edx
c001b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b464:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b468:	f7 f1                	div    ecx
c001b46a:	c1 e0 04             	shl    eax,0x4
c001b46d:	09 d0                	or     eax,edx
c001b46f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b473:	83 e5 02             	and    ebp,0x2
c001b476:	75 1e                	jne    c001b496 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b478:	0f b6 c3             	movzx  eax,bl
c001b47b:	83 f8 0b             	cmp    eax,0xb
c001b47e:	76 10                	jbe    c001b490 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b480:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b483:	88 d3                	mov    bl,dl
c001b485:	84 d2                	test   dl,dl
c001b487:	75 02                	jne    c001b48b <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b489:	b3 0c                	mov    bl,0xc
c001b48b:	83 cb 80             	or     ebx,0xffffff80
c001b48e:	eb 06                	jmp    c001b496 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b490:	85 c0                	test   eax,eax
c001b492:	75 02                	jne    c001b496 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b494:	b3 0c                	mov    bl,0xc
c001b496:	0f b6 db             	movzx  ebx,bl
c001b499:	50                   	push   eax
c001b49a:	50                   	push   eax
c001b49b:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b4a0:	52                   	push   edx
c001b4a1:	6a 00                	push   0x0
c001b4a3:	e8 59 d6 ff ff       	call   c0018b01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4a8:	5a                   	pop    edx
c001b4a9:	59                   	pop    ecx
c001b4aa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b4af:	50                   	push   eax
c001b4b0:	6a 02                	push   0x2
c001b4b2:	e8 4a d6 ff ff       	call   c0018b01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4b7:	5e                   	pop    esi
c001b4b8:	5f                   	pop    edi
c001b4b9:	53                   	push   ebx
c001b4ba:	6a 04                	push   0x4
c001b4bc:	e8 40 d6 ff ff       	call   c0018b01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4c1:	5d                   	pop    ebp
c001b4c2:	58                   	pop    eax
c001b4c3:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b4c8:	52                   	push   edx
c001b4c9:	6a 07                	push   0x7
c001b4cb:	e8 31 d6 ff ff       	call   c0018b01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4d0:	58                   	pop    eax
c001b4d1:	5a                   	pop    edx
c001b4d2:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b4d7:	50                   	push   eax
c001b4d8:	6a 08                	push   0x8
c001b4da:	e8 22 d6 ff ff       	call   c0018b01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4df:	59                   	pop    ecx
c001b4e0:	5b                   	pop    ebx
c001b4e1:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b4e6:	55                   	push   ebp
c001b4e7:	6a 09                	push   0x9
c001b4e9:	e8 13 d6 ff ff       	call   c0018b01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4ee:	5e                   	pop    esi
c001b4ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b4f3:	e8 e0 fb ff ff       	call   c001b0d8 <RTC::completeRTCRefresh()>
c001b4f8:	83 c4 3c             	add    esp,0x3c
c001b4fb:	b0 01                	mov    al,0x1
c001b4fd:	5b                   	pop    ebx
c001b4fe:	5e                   	pop    esi
c001b4ff:	5f                   	pop    edi
c001b500:	5d                   	pop    ebp
c001b501:	c3                   	ret    

c001b502 <rtcIRQHandler(regs*, void*)>:
c001b502:	53                   	push   ebx
c001b503:	83 ec 14             	sub    esp,0x14
c001b506:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b50a:	6a 0c                	push   0xc
c001b50c:	e8 9c d5 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b511:	83 c4 10             	add    esp,0x10
c001b514:	a8 80                	test   al,0x80
c001b516:	74 24                	je     c001b53c <rtcIRQHandler(regs*, void*)+0x3a>
c001b518:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b51f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b526:	66 ff 05 a0 eb 02 c0 	inc    WORD PTR ds:0xc002eba0
c001b52d:	75 0d                	jne    c001b53c <rtcIRQHandler(regs*, void*)+0x3a>
c001b52f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b533:	83 c4 08             	add    esp,0x8
c001b536:	5b                   	pop    ebx
c001b537:	e9 9c fb ff ff       	jmp    c001b0d8 <RTC::completeRTCRefresh()>
c001b53c:	83 c4 08             	add    esp,0x8
c001b53f:	5b                   	pop    ebx
c001b540:	c3                   	ret    
c001b541:	90                   	nop

c001b542 <RTC::RTC()>:
c001b542:	83 ec 1c             	sub    esp,0x1c
c001b545:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b549:	83 ec 08             	sub    esp,0x8
c001b54c:	68 e3 57 02 c0       	push   0xc00257e3
c001b551:	50                   	push   eax
c001b552:	e8 5f db fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001b557:	83 c4 10             	add    esp,0x10
c001b55a:	ba 00 58 02 c0       	mov    edx,0xc0025800
c001b55f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b563:	89 10                	mov    DWORD PTR [eax],edx
c001b565:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b569:	83 ec 0c             	sub    esp,0xc
c001b56c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b570:	6a 01                	push   0x1
c001b572:	68 02 b5 01 c0       	push   0xc001b502
c001b577:	6a 08                	push   0x8
c001b579:	50                   	push   eax
c001b57a:	e8 81 e4 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b57f:	83 c4 20             	add    esp,0x20
c001b582:	89 c2                	mov    edx,eax
c001b584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b588:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b58e:	fa                   	cli    
c001b58f:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001b594:	83 c0 01             	add    eax,0x1
c001b597:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c001b59c:	83 ec 0c             	sub    esp,0xc
c001b59f:	6a 0b                	push   0xb
c001b5a1:	e8 07 d5 ff ff       	call   c0018aad <x86ReadCMOS(unsigned char)>
c001b5a6:	83 c4 10             	add    esp,0x10
c001b5a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b5ad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b5b1:	83 c8 10             	or     eax,0x10
c001b5b4:	0f b6 c0             	movzx  eax,al
c001b5b7:	83 ec 08             	sub    esp,0x8
c001b5ba:	50                   	push   eax
c001b5bb:	6a 0b                	push   0xb
c001b5bd:	e8 3f d5 ff ff       	call   c0018b01 <x86WriteCMOS(unsigned char, unsigned char)>
c001b5c2:	83 c4 10             	add    esp,0x10
c001b5c5:	83 ec 0c             	sub    esp,0xc
c001b5c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5cc:	e8 07 fb ff ff       	call   c001b0d8 <RTC::completeRTCRefresh()>
c001b5d1:	83 c4 10             	add    esp,0x10
c001b5d4:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001b5dc:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001b5e1:	85 c0                	test   eax,eax
c001b5e3:	75 01                	jne    c001b5e6 <RTC::RTC()+0xa4>
c001b5e5:	fb                   	sti    
c001b5e6:	90                   	nop
c001b5e7:	83 c4 1c             	add    esp,0x1c
c001b5ea:	c3                   	ret    
c001b5eb:	90                   	nop

c001b5ec <HalConsoleScroll(int, int)>:
c001b5ec:	83 ec 10             	sub    esp,0x10
c001b5ef:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b5f7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b5ff:	90                   	nop
c001b600:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b605:	0f 8f e1 00 00 00    	jg     c001b6ec <HalConsoleScroll(int, int)+0x100>
c001b60b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b613:	90                   	nop
c001b614:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b61c:	0f 8f be 00 00 00    	jg     c001b6e0 <HalConsoleScroll(int, int)+0xf4>
c001b622:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b626:	89 d0                	mov    eax,edx
c001b628:	c1 e0 02             	shl    eax,0x2
c001b62b:	01 d0                	add    eax,edx
c001b62d:	c1 e0 05             	shl    eax,0x5
c001b630:	89 c2                	mov    edx,eax
c001b632:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b636:	01 d0                	add    eax,edx
c001b638:	89 c2                	mov    edx,eax
c001b63a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b63e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b641:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b645:	89 d0                	mov    eax,edx
c001b647:	c1 e0 02             	shl    eax,0x2
c001b64a:	01 d0                	add    eax,edx
c001b64c:	c1 e0 05             	shl    eax,0x5
c001b64f:	89 c2                	mov    edx,eax
c001b651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b655:	01 d0                	add    eax,edx
c001b657:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b65d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b661:	01 c2                	add    edx,eax
c001b663:	8a 01                	mov    al,BYTE PTR [ecx]
c001b665:	88 02                	mov    BYTE PTR [edx],al
c001b667:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b66c:	75 66                	jne    c001b6d4 <HalConsoleScroll(int, int)+0xe8>
c001b66e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b672:	83 e0 01             	and    eax,0x1
c001b675:	74 39                	je     c001b6b0 <HalConsoleScroll(int, int)+0xc4>
c001b677:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b67b:	83 e0 0f             	and    eax,0xf
c001b67e:	88 c2                	mov    dl,al
c001b680:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b684:	c1 e0 04             	shl    eax,0x4
c001b687:	09 d0                	or     eax,edx
c001b689:	88 c1                	mov    cl,al
c001b68b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b68f:	89 d0                	mov    eax,edx
c001b691:	c1 e0 02             	shl    eax,0x2
c001b694:	01 d0                	add    eax,edx
c001b696:	c1 e0 05             	shl    eax,0x5
c001b699:	89 c2                	mov    edx,eax
c001b69b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b69f:	01 d0                	add    eax,edx
c001b6a1:	89 c2                	mov    edx,eax
c001b6a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6a7:	01 d0                	add    eax,edx
c001b6a9:	88 ca                	mov    dl,cl
c001b6ab:	88 10                	mov    BYTE PTR [eax],dl
c001b6ad:	eb 25                	jmp    c001b6d4 <HalConsoleScroll(int, int)+0xe8>
c001b6af:	90                   	nop
c001b6b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b6b4:	89 d0                	mov    eax,edx
c001b6b6:	c1 e0 02             	shl    eax,0x2
c001b6b9:	01 d0                	add    eax,edx
c001b6bb:	c1 e0 05             	shl    eax,0x5
c001b6be:	89 c2                	mov    edx,eax
c001b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6c4:	01 d0                	add    eax,edx
c001b6c6:	89 c2                	mov    edx,eax
c001b6c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6cc:	01 d0                	add    eax,edx
c001b6ce:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b6d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b6d4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b6d9:	e9 36 ff ff ff       	jmp    c001b614 <HalConsoleScroll(int, int)+0x28>
c001b6de:	66 90                	xchg   ax,ax
c001b6e0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b6e5:	e9 16 ff ff ff       	jmp    c001b600 <HalConsoleScroll(int, int)+0x14>
c001b6ea:	66 90                	xchg   ax,ax
c001b6ec:	90                   	nop
c001b6ed:	83 c4 10             	add    esp,0x10
c001b6f0:	c3                   	ret    
c001b6f1:	8d 76 00             	lea    esi,[esi+0x0]

c001b6f4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b6f4:	83 ec 14             	sub    esp,0x14
c001b6f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6fb:	88 04 24             	mov    BYTE PTR [esp],al
c001b6fe:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b701:	0f b6 c0             	movzx  eax,al
c001b704:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b708:	89 d1                	mov    ecx,edx
c001b70a:	83 e1 0f             	and    ecx,0xf
c001b70d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b711:	c1 e2 04             	shl    edx,0x4
c001b714:	0f b6 d2             	movzx  edx,dl
c001b717:	09 ca                	or     edx,ecx
c001b719:	c1 e2 08             	shl    edx,0x8
c001b71c:	09 d0                	or     eax,edx
c001b71e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b723:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b72b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b72f:	89 d0                	mov    eax,edx
c001b731:	c1 e0 02             	shl    eax,0x2
c001b734:	01 d0                	add    eax,edx
c001b736:	c1 e0 04             	shl    eax,0x4
c001b739:	89 c2                	mov    edx,eax
c001b73b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b73f:	01 d0                	add    eax,edx
c001b741:	01 c0                	add    eax,eax
c001b743:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b747:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b74b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001b750:	66 89 02             	mov    WORD PTR [edx],ax
c001b753:	90                   	nop
c001b754:	83 c4 14             	add    esp,0x14
c001b757:	c3                   	ret    

c001b758 <HalConsoleCursorUpdate(int, int)>:
c001b758:	83 ec 20             	sub    esp,0x20
c001b75b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b75f:	89 c2                	mov    edx,eax
c001b761:	c1 e2 02             	shl    edx,0x2
c001b764:	01 d0                	add    eax,edx
c001b766:	c1 e0 04             	shl    eax,0x4
c001b769:	89 c2                	mov    edx,eax
c001b76b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b76f:	01 d0                	add    eax,edx
c001b771:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b776:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b77d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b782:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b786:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b78a:	ee                   	out    dx,al
c001b78b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b790:	0f b6 c0             	movzx  eax,al
c001b793:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b79a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b79e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b7a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b7a6:	ee                   	out    dx,al
c001b7a7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b7ae:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b7b3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b7b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b7bb:	ee                   	out    dx,al
c001b7bc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b7c1:	c1 e8 08             	shr    eax,0x8
c001b7c4:	0f b6 c0             	movzx  eax,al
c001b7c7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b7ce:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b7d2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b7d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b7da:	ee                   	out    dx,al
c001b7db:	90                   	nop
c001b7dc:	83 c4 20             	add    esp,0x20
c001b7df:	c3                   	ret    

c001b7e0 <FAT::getName()>:
c001b7e0:	b8 34 58 02 c0       	mov    eax,0xc0025834
c001b7e5:	c3                   	ret    
c001b7e6:	66 90                	xchg   ax,ax

c001b7e8 <FAT::tell(void*, unsigned long long*)>:
c001b7e8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b7ed:	75 09                	jne    c001b7f8 <FAT::tell(void*, unsigned long long*)+0x10>
c001b7ef:	b8 04 00 00 00       	mov    eax,0x4
c001b7f4:	c3                   	ret    
c001b7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b7fd:	75 09                	jne    c001b808 <FAT::tell(void*, unsigned long long*)+0x20>
c001b7ff:	b8 04 00 00 00       	mov    eax,0x4
c001b804:	c3                   	ret    
c001b805:	8d 76 00             	lea    esi,[esi+0x0]
c001b808:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b80c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b80f:	ba 00 00 00 00       	mov    edx,0x0
c001b814:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b818:	89 01                	mov    DWORD PTR [ecx],eax
c001b81a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b81d:	b8 00 00 00 00       	mov    eax,0x0
c001b822:	c3                   	ret    
c001b823:	90                   	nop

c001b824 <FAT::stat(void*, unsigned long long*)>:
c001b824:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b829:	75 09                	jne    c001b834 <FAT::stat(void*, unsigned long long*)+0x10>
c001b82b:	b8 04 00 00 00       	mov    eax,0x4
c001b830:	c3                   	ret    
c001b831:	8d 76 00             	lea    esi,[esi+0x0]
c001b834:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b839:	75 09                	jne    c001b844 <FAT::stat(void*, unsigned long long*)+0x20>
c001b83b:	b8 04 00 00 00       	mov    eax,0x4
c001b840:	c3                   	ret    
c001b841:	8d 76 00             	lea    esi,[esi+0x0]
c001b844:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b848:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b84b:	ba 00 00 00 00       	mov    edx,0x0
c001b850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b854:	89 01                	mov    DWORD PTR [ecx],eax
c001b856:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b859:	b8 00 00 00 00       	mov    eax,0x0
c001b85e:	c3                   	ret    
c001b85f:	90                   	nop

c001b860 <FAT::~FAT()>:
c001b860:	83 ec 0c             	sub    esp,0xc
c001b863:	ba 80 58 02 c0       	mov    edx,0xc0025880
c001b868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b86c:	89 10                	mov    DWORD PTR [eax],edx
c001b86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b872:	83 ec 0c             	sub    esp,0xc
c001b875:	50                   	push   eax
c001b876:	e8 71 c5 fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001b87b:	83 c4 10             	add    esp,0x10
c001b87e:	90                   	nop
c001b87f:	83 c4 0c             	add    esp,0xc
c001b882:	c3                   	ret    
c001b883:	90                   	nop

c001b884 <FAT::~FAT()>:
c001b884:	83 ec 0c             	sub    esp,0xc
c001b887:	83 ec 0c             	sub    esp,0xc
c001b88a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b88e:	e8 cd ff ff ff       	call   c001b860 <FAT::~FAT()>
c001b893:	83 c4 10             	add    esp,0x10
c001b896:	83 ec 08             	sub    esp,0x8
c001b899:	6a 08                	push   0x8
c001b89b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b89f:	e8 0c 1b ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c001b8a4:	83 c4 10             	add    esp,0x10
c001b8a7:	83 c4 0c             	add    esp,0xc
c001b8aa:	c3                   	ret    
c001b8ab:	90                   	nop

c001b8ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b8ac:	83 ec 1c             	sub    esp,0x1c
c001b8af:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b8b6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b8bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b8bf:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b8c6:	83 f8 ff             	cmp    eax,0xffffffff
c001b8c9:	75 35                	jne    c001b900 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b8cb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b8cf:	88 c2                	mov    dl,al
c001b8d1:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b8d6:	01 d0                	add    eax,edx
c001b8d8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b8dc:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001b8e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b8e6:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001b8ed:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b8f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b8f6:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001b8fd:	eb 19                	jmp    c001b918 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b8ff:	90                   	nop
c001b900:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b904:	88 c2                	mov    dl,al
c001b906:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b90a:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b911:	01 d0                	add    eax,edx
c001b913:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b917:	90                   	nop
c001b918:	83 ec 04             	sub    esp,0x4
c001b91b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b91f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b923:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b927:	50                   	push   eax
c001b928:	e8 8b 98 fe ff       	call   c00051b8 <f_getlabel>
c001b92d:	83 c4 10             	add    esp,0x10
c001b930:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b934:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b939:	75 09                	jne    c001b944 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b93b:	b8 00 00 00 00       	mov    eax,0x0
c001b940:	eb 0a                	jmp    c001b94c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b942:	66 90                	xchg   ax,ax
c001b944:	b8 01 00 00 00       	mov    eax,0x1
c001b949:	8d 76 00             	lea    esi,[esi+0x0]
c001b94c:	83 c4 1c             	add    esp,0x1c
c001b94f:	c3                   	ret    

c001b950 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b950:	57                   	push   edi
c001b951:	83 ec 58             	sub    esp,0x58
c001b954:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b95c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b960:	b8 00 00 00 00       	mov    eax,0x0
c001b965:	b9 0f 00 00 00       	mov    ecx,0xf
c001b96a:	fc                   	cld    
c001b96b:	89 d7                	mov    edi,edx
c001b96d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b96f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b973:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b97a:	83 f8 ff             	cmp    eax,0xffffffff
c001b97d:	75 35                	jne    c001b9b4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b97f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b983:	88 c2                	mov    dl,al
c001b985:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b98a:	01 d0                	add    eax,edx
c001b98c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b990:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001b996:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b99a:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001b9a1:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b9a6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b9aa:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001b9b1:	eb 19                	jmp    c001b9cc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b9b3:	90                   	nop
c001b9b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b9b8:	88 c2                	mov    dl,al
c001b9ba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b9be:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b9c5:	01 d0                	add    eax,edx
c001b9c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b9cb:	90                   	nop
c001b9cc:	83 ec 08             	sub    esp,0x8
c001b9cf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b9d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b9d7:	50                   	push   eax
c001b9d8:	e8 63 4e fe ff       	call   c0000840 <strcat>
c001b9dd:	83 c4 10             	add    esp,0x10
c001b9e0:	83 ec 0c             	sub    esp,0xc
c001b9e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b9e7:	50                   	push   eax
c001b9e8:	e8 1c 99 fe ff       	call   c0005309 <f_setlabel>
c001b9ed:	83 c4 10             	add    esp,0x10
c001b9f0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b9f4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b9f9:	75 09                	jne    c001ba04 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b9fb:	b8 00 00 00 00       	mov    eax,0x0
c001ba00:	eb 0a                	jmp    c001ba0c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001ba02:	66 90                	xchg   ax,ax
c001ba04:	b8 01 00 00 00       	mov    eax,0x1
c001ba09:	8d 76 00             	lea    esi,[esi+0x0]
c001ba0c:	83 c4 58             	add    esp,0x58
c001ba0f:	5f                   	pop    edi
c001ba10:	c3                   	ret    
c001ba11:	90                   	nop
c001ba12:	66 90                	xchg   ax,ax

c001ba14 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ba14:	83 ec 2c             	sub    esp,0x2c
c001ba17:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ba1f:	83 ec 08             	sub    esp,0x8
c001ba22:	68 58 58 02 c0       	push   0xc0025858
c001ba27:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ba2b:	e8 20 4d fe ff       	call   c0000750 <strcmp>
c001ba30:	83 c4 10             	add    esp,0x10
c001ba33:	85 c0                	test   eax,eax
c001ba35:	0f 94 c0             	sete   al
c001ba38:	0f b6 c0             	movzx  eax,al
c001ba3b:	85 c0                	test   eax,eax
c001ba3d:	74 0d                	je     c001ba4c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001ba3f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ba47:	e9 c0 00 00 00       	jmp    c001bb0c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ba4c:	83 ec 08             	sub    esp,0x8
c001ba4f:	68 4a 58 02 c0       	push   0xc002584a
c001ba54:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ba58:	e8 f3 4c fe ff       	call   c0000750 <strcmp>
c001ba5d:	83 c4 10             	add    esp,0x10
c001ba60:	85 c0                	test   eax,eax
c001ba62:	0f 94 c0             	sete   al
c001ba65:	0f b6 c0             	movzx  eax,al
c001ba68:	85 c0                	test   eax,eax
c001ba6a:	74 10                	je     c001ba7c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001ba6c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ba74:	e9 93 00 00 00       	jmp    c001bb0c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ba79:	8d 76 00             	lea    esi,[esi+0x0]
c001ba7c:	83 ec 08             	sub    esp,0x8
c001ba7f:	68 50 58 02 c0       	push   0xc0025850
c001ba84:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ba88:	e8 c3 4c fe ff       	call   c0000750 <strcmp>
c001ba8d:	83 c4 10             	add    esp,0x10
c001ba90:	85 c0                	test   eax,eax
c001ba92:	0f 94 c0             	sete   al
c001ba95:	0f b6 c0             	movzx  eax,al
c001ba98:	85 c0                	test   eax,eax
c001ba9a:	74 0c                	je     c001baa8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001ba9c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001baa4:	eb 66                	jmp    c001bb0c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001baa6:	66 90                	xchg   ax,ax
c001baa8:	83 ec 08             	sub    esp,0x8
c001baab:	68 fc 27 02 c0       	push   0xc00227fc
c001bab0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bab4:	e8 97 4c fe ff       	call   c0000750 <strcmp>
c001bab9:	83 c4 10             	add    esp,0x10
c001babc:	85 c0                	test   eax,eax
c001babe:	0f 94 c0             	sete   al
c001bac1:	0f b6 c0             	movzx  eax,al
c001bac4:	85 c0                	test   eax,eax
c001bac6:	74 0c                	je     c001bad4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001bac8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001bad0:	eb 3a                	jmp    c001bb0c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bad2:	66 90                	xchg   ax,ax
c001bad4:	83 ec 08             	sub    esp,0x8
c001bad7:	68 56 58 02 c0       	push   0xc0025856
c001badc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bae0:	e8 6b 4c fe ff       	call   c0000750 <strcmp>
c001bae5:	83 c4 10             	add    esp,0x10
c001bae8:	85 c0                	test   eax,eax
c001baea:	0f 94 c0             	sete   al
c001baed:	0f b6 c0             	movzx  eax,al
c001baf0:	85 c0                	test   eax,eax
c001baf2:	74 0c                	je     c001bb00 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001baf4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001bafc:	eb 0e                	jmp    c001bb0c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bafe:	66 90                	xchg   ax,ax
c001bb00:	b8 08 00 00 00       	mov    eax,0x8
c001bb05:	e9 ea 00 00 00       	jmp    c001bbf4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bb0a:	66 90                	xchg   ax,ax
c001bb0c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001bb13:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001bb18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb1c:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001bb23:	83 f8 ff             	cmp    eax,0xffffffff
c001bb26:	75 34                	jne    c001bb5c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001bb28:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bb2c:	88 c2                	mov    dl,al
c001bb2e:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bb33:	01 d0                	add    eax,edx
c001bb35:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bb39:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001bb3f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb43:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001bb4a:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bb4f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bb53:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001bb5a:	eb 18                	jmp    c001bb74 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001bb5c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bb60:	88 c2                	mov    dl,al
c001bb62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb66:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001bb6d:	01 d0                	add    eax,edx
c001bb6f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bb73:	90                   	nop
c001bb74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb78:	88 04 24             	mov    BYTE PTR [esp],al
c001bb7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bb7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb83:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bb8b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001bb90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bb98:	83 ec 0c             	sub    esp,0xc
c001bb9b:	68 00 20 00 00       	push   0x2000
c001bba0:	e8 f2 3c ff ff       	call   c000f897 <malloc>
c001bba5:	83 c4 10             	add    esp,0x10
c001bba8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bbac:	68 00 20 00 00       	push   0x2000
c001bbb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bbb5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bbb9:	50                   	push   eax
c001bbba:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001bbbe:	50                   	push   eax
c001bbbf:	e8 42 9a fe ff       	call   c0005606 <f_mkfs>
c001bbc4:	83 c4 10             	add    esp,0x10
c001bbc7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bbcb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bbd0:	75 0a                	jne    c001bbdc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001bbd2:	b8 00 00 00 00       	mov    eax,0x0
c001bbd7:	eb 1b                	jmp    c001bbf4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bbd9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbdc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001bbe1:	75 09                	jne    c001bbec <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001bbe3:	b8 09 00 00 00       	mov    eax,0x9
c001bbe8:	eb 0a                	jmp    c001bbf4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bbea:	66 90                	xchg   ax,ax
c001bbec:	b8 01 00 00 00       	mov    eax,0x1
c001bbf1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbf4:	83 c4 2c             	add    esp,0x2c
c001bbf7:	c3                   	ret    

c001bbf8 <FAT::tryMount(LogicalDisk*, int)>:
c001bbf8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001bbfe:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bc03:	83 f8 14             	cmp    eax,0x14
c001bc06:	75 18                	jne    c001bc20 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001bc08:	83 ec 0c             	sub    esp,0xc
c001bc0b:	68 5c 58 02 c0       	push   0xc002585c
c001bc10:	e8 df 40 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001bc15:	83 c4 10             	add    esp,0x10
c001bc18:	b0 00                	mov    al,0x0
c001bc1a:	e9 ed 01 00 00       	jmp    c001be0c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bc1f:	90                   	nop
c001bc20:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bc27:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bc2d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bc33:	3d 00 02 00 00       	cmp    eax,0x200
c001bc38:	74 0a                	je     c001bc44 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001bc3a:	b0 00                	mov    al,0x0
c001bc3c:	e9 cb 01 00 00       	jmp    c001be0c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bc41:	8d 76 00             	lea    esi,[esi+0x0]
c001bc44:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001bc4c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bc53:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001bc5a:	83 f8 ff             	cmp    eax,0xffffffff
c001bc5d:	74 09                	je     c001bc68 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001bc5f:	b0 01                	mov    al,0x1
c001bc61:	e9 a6 01 00 00       	jmp    c001be0c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bc66:	66 90                	xchg   ax,ax
c001bc68:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001bc72:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001bc7a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001bc81:	88 c2                	mov    dl,al
c001bc83:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bc88:	01 d0                	add    eax,edx
c001bc8a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001bc91:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001bc97:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bc9e:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001bca5:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bcaa:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001bcb1:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001bcb8:	83 ec 0c             	sub    esp,0xc
c001bcbb:	68 34 02 00 00       	push   0x234
c001bcc0:	e8 d2 3b ff ff       	call   c000f897 <malloc>
c001bcc5:	83 c4 10             	add    esp,0x10
c001bcc8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001bccf:	83 ec 04             	sub    esp,0x4
c001bcd2:	6a 00                	push   0x0
c001bcd4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bcdb:	50                   	push   eax
c001bcdc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bce3:	e8 f9 80 fe ff       	call   c0003de1 <f_mount>
c001bce8:	83 c4 10             	add    esp,0x10
c001bceb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bcf2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001bcfa:	74 1c                	je     c001bd18 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001bcfc:	83 ec 0c             	sub    esp,0xc
c001bcff:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bd06:	e8 ac 3b ff ff       	call   c000f8b7 <rfree>
c001bd0b:	83 c4 10             	add    esp,0x10
c001bd0e:	b0 00                	mov    al,0x0
c001bd10:	e9 f7 00 00 00       	jmp    c001be0c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bd15:	8d 76 00             	lea    esi,[esi+0x0]
c001bd18:	83 ec 04             	sub    esp,0x4
c001bd1b:	68 00 01 00 00       	push   0x100
c001bd20:	6a 00                	push   0x0
c001bd22:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bd29:	50                   	push   eax
c001bd2a:	e8 c1 47 fe ff       	call   c00004f0 <memset>
c001bd2f:	83 c4 10             	add    esp,0x10
c001bd32:	83 ec 08             	sub    esp,0x8
c001bd35:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bd3c:	50                   	push   eax
c001bd3d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bd44:	50                   	push   eax
c001bd45:	e8 f6 4a fe ff       	call   c0000840 <strcat>
c001bd4a:	83 c4 10             	add    esp,0x10
c001bd4d:	83 ec 08             	sub    esp,0x8
c001bd50:	68 6a 58 02 c0       	push   0xc002586a
c001bd55:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bd5c:	50                   	push   eax
c001bd5d:	e8 de 4a fe ff       	call   c0000840 <strcat>
c001bd62:	83 c4 10             	add    esp,0x10
c001bd65:	83 ec 04             	sub    esp,0x4
c001bd68:	6a 01                	push   0x1
c001bd6a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001bd71:	50                   	push   eax
c001bd72:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd76:	50                   	push   eax
c001bd77:	e8 c7 80 fe ff       	call   c0003e43 <f_open>
c001bd7c:	83 c4 10             	add    esp,0x10
c001bd7f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bd86:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001bd8d:	85 c0                	test   eax,eax
c001bd8f:	74 0b                	je     c001bd9c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bd91:	78 31                	js     c001bdc4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bd93:	83 e8 04             	sub    eax,0x4
c001bd96:	83 f8 01             	cmp    eax,0x1
c001bd99:	77 29                	ja     c001bdc4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bd9b:	90                   	nop
c001bd9c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001bda4:	83 ec 0c             	sub    esp,0xc
c001bda7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bdab:	50                   	push   eax
c001bdac:	e8 61 88 fe ff       	call   c0004612 <f_close>
c001bdb1:	83 c4 10             	add    esp,0x10
c001bdb4:	90                   	nop
c001bdb5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001bdbd:	85 c0                	test   eax,eax
c001bdbf:	74 43                	je     c001be04 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001bdc1:	eb 31                	jmp    c001bdf4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bdc3:	90                   	nop
c001bdc4:	83 ec 0c             	sub    esp,0xc
c001bdc7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bdce:	e8 e4 3a ff ff       	call   c000f8b7 <rfree>
c001bdd3:	83 c4 10             	add    esp,0x10
c001bdd6:	83 ec 04             	sub    esp,0x4
c001bdd9:	6a 00                	push   0x0
c001bddb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bde2:	50                   	push   eax
c001bde3:	6a 00                	push   0x0
c001bde5:	e8 f7 7f fe ff       	call   c0003de1 <f_mount>
c001bdea:	83 c4 10             	add    esp,0x10
c001bded:	b0 00                	mov    al,0x0
c001bdef:	eb 1b                	jmp    c001be0c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bdf1:	8d 76 00             	lea    esi,[esi+0x0]
c001bdf4:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bdf9:	83 c0 01             	add    eax,0x1
c001bdfc:	a3 c0 eb 02 c0       	mov    ds:0xc002ebc0,eax
c001be01:	8d 76 00             	lea    esi,[esi+0x0]
c001be04:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001be0b:	90                   	nop
c001be0c:	81 c4 4c 03 00 00    	add    esp,0x34c
c001be12:	c3                   	ret    
c001be13:	90                   	nop

c001be14 <FAT::allocateSwapfile(char const*, int)>:
c001be14:	55                   	push   ebp
c001be15:	57                   	push   edi
c001be16:	56                   	push   esi
c001be17:	53                   	push   ebx
c001be18:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001be1e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001be29:	83 ec 0c             	sub    esp,0xc
c001be2c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001be33:	e8 5f 3a ff ff       	call   c000f897 <malloc>
c001be38:	83 c4 10             	add    esp,0x10
c001be3b:	89 c7                	mov    edi,eax
c001be3d:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001be42:	83 ec 04             	sub    esp,0x4
c001be45:	50                   	push   eax
c001be46:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001be4d:	57                   	push   edi
c001be4e:	e8 37 c3 fe ff       	call   c000818a <File::File(char const*, Process*)>
c001be53:	83 c4 10             	add    esp,0x10
c001be56:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001be5d:	83 ec 04             	sub    esp,0x4
c001be60:	8d 44 24 13          	lea    eax,[esp+0x13]
c001be64:	50                   	push   eax
c001be65:	8d 44 24 18          	lea    eax,[esp+0x18]
c001be69:	50                   	push   eax
c001be6a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001be71:	e8 34 c6 fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001be76:	83 c4 10             	add    esp,0x10
c001be79:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001be80:	c1 e0 14             	shl    eax,0x14
c001be83:	89 c7                	mov    edi,eax
c001be85:	89 c5                	mov    ebp,eax
c001be87:	c1 fd 1f             	sar    ebp,0x1f
c001be8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be92:	89 f9                	mov    ecx,edi
c001be94:	31 c1                	xor    ecx,eax
c001be96:	89 cb                	mov    ebx,ecx
c001be98:	89 e9                	mov    ecx,ebp
c001be9a:	31 d1                	xor    ecx,edx
c001be9c:	89 ce                	mov    esi,ecx
c001be9e:	89 f0                	mov    eax,esi
c001bea0:	09 d8                	or     eax,ebx
c001bea2:	0f 84 9c 00 00 00    	je     c001bf44 <FAT::allocateSwapfile(char const*, int)+0x130>
c001bea8:	83 ec 0c             	sub    esp,0xc
c001beab:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001beb2:	e8 bf c4 fe ff       	call   c0008376 <File::unlink()>
c001beb7:	83 c4 10             	add    esp,0x10
c001beba:	83 ec 08             	sub    esp,0x8
c001bebd:	6a 12                	push   0x12
c001bebf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bec6:	e8 dd c2 fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bed5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bedb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bee2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bee9:	c1 e0 14             	shl    eax,0x14
c001beec:	83 ec 04             	sub    esp,0x4
c001beef:	6a 01                	push   0x1
c001bef1:	50                   	push   eax
c001bef2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bef9:	e8 9b 95 fe ff       	call   c0005499 <f_expand>
c001befe:	83 c4 10             	add    esp,0x10
c001bf01:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bf08:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf0a:	83 c0 10             	add    eax,0x10
c001bf0d:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf0f:	83 ec 0c             	sub    esp,0xc
c001bf12:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bf16:	52                   	push   edx
c001bf17:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bf1b:	52                   	push   edx
c001bf1c:	6a 00                	push   0x0
c001bf1e:	68 00 04 00 00       	push   0x400
c001bf23:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bf2a:	ff d0                	call   eax
c001bf2c:	83 c4 20             	add    esp,0x20
c001bf2f:	83 ec 0c             	sub    esp,0xc
c001bf32:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bf39:	e8 c8 c2 fe ff       	call   c0008206 <File::close()>
c001bf3e:	83 c4 10             	add    esp,0x10
c001bf41:	8d 76 00             	lea    esi,[esi+0x0]
c001bf44:	83 ec 08             	sub    esp,0x8
c001bf47:	6a 01                	push   0x1
c001bf49:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bf50:	e8 53 c2 fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001bf55:	83 c4 10             	add    esp,0x10
c001bf58:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bf5f:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf61:	83 c0 0c             	add    eax,0xc
c001bf64:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf66:	83 ec 0c             	sub    esp,0xc
c001bf69:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bf6d:	52                   	push   edx
c001bf6e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bf72:	52                   	push   edx
c001bf73:	6a 00                	push   0x0
c001bf75:	6a 04                	push   0x4
c001bf77:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bf7e:	ff d0                	call   eax
c001bf80:	83 c4 20             	add    esp,0x20
c001bf83:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bf8a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bf90:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bf97:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bf9e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bfa1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bfa8:	83 ec 0c             	sub    esp,0xc
c001bfab:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bfb2:	e8 4f c2 fe ff       	call   c0008206 <File::close()>
c001bfb7:	83 c4 10             	add    esp,0x10
c001bfba:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bfc1:	ba 00 00 00 00       	mov    edx,0x0
c001bfc6:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bfcc:	5b                   	pop    ebx
c001bfcd:	5e                   	pop    esi
c001bfce:	5f                   	pop    edi
c001bfcf:	5d                   	pop    ebp
c001bfd0:	c3                   	ret    
c001bfd1:	90                   	nop
c001bfd2:	66 90                	xchg   ax,ax

c001bfd4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bfd4:	57                   	push   edi
c001bfd5:	56                   	push   esi
c001bfd6:	53                   	push   ebx
c001bfd7:	81 ec 50 02 00 00    	sub    esp,0x250
c001bfdd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001bfe5:	74 0d                	je     c001bff4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001bfe7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001bfef:	75 0f                	jne    c001c000 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001bff1:	8d 76 00             	lea    esi,[esi+0x0]
c001bff4:	b8 04 00 00 00       	mov    eax,0x4
c001bff9:	e9 3a 01 00 00       	jmp    c001c138 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bffe:	66 90                	xchg   ax,ax
c001c000:	83 ec 08             	sub    esp,0x8
c001c003:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c00a:	50                   	push   eax
c001c00b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c012:	e8 c8 88 fe ff       	call   c00048df <f_readdir>
c001c017:	83 c4 10             	add    esp,0x10
c001c01a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c021:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c028:	83 ec 0c             	sub    esp,0xc
c001c02b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c032:	83 c0 16             	add    eax,0x16
c001c035:	50                   	push   eax
c001c036:	e8 35 45 fe ff       	call   c0000570 <strlen>
c001c03b:	83 c4 10             	add    esp,0x10
c001c03e:	ba 00 00 00 00       	mov    edx,0x0
c001c043:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c047:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c04b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c052:	0f b6 c0             	movzx  eax,al
c001c055:	83 e0 10             	and    eax,0x10
c001c058:	74 0a                	je     c001c064 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c05a:	b8 02 00 00 00       	mov    eax,0x2
c001c05f:	eb 0b                	jmp    c001c06c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c061:	8d 76 00             	lea    esi,[esi+0x0]
c001c064:	b8 01 00 00 00       	mov    eax,0x1
c001c069:	8d 76 00             	lea    esi,[esi+0x0]
c001c06c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c070:	83 ec 08             	sub    esp,0x8
c001c073:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c07a:	83 c0 16             	add    eax,0x16
c001c07d:	50                   	push   eax
c001c07e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c082:	83 c0 10             	add    eax,0x10
c001c085:	50                   	push   eax
c001c086:	e8 b5 45 fe ff       	call   c0000640 <strcpy>
c001c08b:	83 c4 10             	add    esp,0x10
c001c08e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c095:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c09c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c0a0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c0a7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c0ae:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c0b5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c0bc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c0c3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c0ca:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c0d1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c0d8:	89 c6                	mov    esi,eax
c001c0da:	89 d7                	mov    edi,edx
c001c0dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c0de:	89 c8                	mov    eax,ecx
c001c0e0:	89 fa                	mov    edx,edi
c001c0e2:	89 f3                	mov    ebx,esi
c001c0e4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c0eb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c0f2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c0f9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c100:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c106:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c10d:	0f be c0             	movsx  eax,al
c001c110:	85 c0                	test   eax,eax
c001c112:	75 08                	jne    c001c11c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c114:	b8 07 00 00 00       	mov    eax,0x7
c001c119:	eb 1d                	jmp    c001c138 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c11b:	90                   	nop
c001c11c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c123:	85 c0                	test   eax,eax
c001c125:	75 09                	jne    c001c130 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c127:	b8 00 00 00 00       	mov    eax,0x0
c001c12c:	eb 0a                	jmp    c001c138 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c12e:	66 90                	xchg   ax,ax
c001c130:	b8 01 00 00 00       	mov    eax,0x1
c001c135:	8d 76 00             	lea    esi,[esi+0x0]
c001c138:	81 c4 50 02 00 00    	add    esp,0x250
c001c13e:	5b                   	pop    ebx
c001c13f:	5e                   	pop    esi
c001c140:	5f                   	pop    edi
c001c141:	c3                   	ret    
c001c142:	66 90                	xchg   ax,ax

c001c144 <FAT::read(void*, unsigned long, void*, int*)>:
c001c144:	83 ec 1c             	sub    esp,0x1c
c001c147:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c14c:	74 0a                	je     c001c158 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c14e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c153:	75 0b                	jne    c001c160 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c155:	8d 76 00             	lea    esi,[esi+0x0]
c001c158:	b8 04 00 00 00       	mov    eax,0x4
c001c15d:	eb 41                	jmp    c001c1a0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c15f:	90                   	nop
c001c160:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c164:	50                   	push   eax
c001c165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c169:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c16d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c171:	e8 90 7f fe ff       	call   c0004106 <f_read>
c001c176:	83 c4 10             	add    esp,0x10
c001c179:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c17d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c181:	89 c2                	mov    edx,eax
c001c183:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c187:	89 10                	mov    DWORD PTR [eax],edx
c001c189:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c18d:	85 c0                	test   eax,eax
c001c18f:	75 07                	jne    c001c198 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c191:	b8 00 00 00 00       	mov    eax,0x0
c001c196:	eb 08                	jmp    c001c1a0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c198:	b8 01 00 00 00       	mov    eax,0x1
c001c19d:	8d 76 00             	lea    esi,[esi+0x0]
c001c1a0:	83 c4 1c             	add    esp,0x1c
c001c1a3:	c3                   	ret    

c001c1a4 <FAT::write(void*, unsigned long, void*, int*)>:
c001c1a4:	83 ec 1c             	sub    esp,0x1c
c001c1a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c1ac:	74 0a                	je     c001c1b8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c1ae:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c1b3:	75 0b                	jne    c001c1c0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c1b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1b8:	b8 04 00 00 00       	mov    eax,0x4
c001c1bd:	eb 41                	jmp    c001c200 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c1bf:	90                   	nop
c001c1c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c1c4:	50                   	push   eax
c001c1c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c1c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c1cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c1d1:	e8 2f 81 fe ff       	call   c0004305 <f_write>
c001c1d6:	83 c4 10             	add    esp,0x10
c001c1d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1e1:	89 c2                	mov    edx,eax
c001c1e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c1e7:	89 10                	mov    DWORD PTR [eax],edx
c001c1e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1ed:	85 c0                	test   eax,eax
c001c1ef:	75 07                	jne    c001c1f8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c1f1:	b8 00 00 00 00       	mov    eax,0x0
c001c1f6:	eb 08                	jmp    c001c200 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c1f8:	b8 01 00 00 00       	mov    eax,0x1
c001c1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001c200:	83 c4 1c             	add    esp,0x1c
c001c203:	c3                   	ret    

c001c204 <FAT::close(void*)>:
c001c204:	83 ec 1c             	sub    esp,0x1c
c001c207:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c20c:	75 0a                	jne    c001c218 <FAT::close(void*)+0x14>
c001c20e:	b8 04 00 00 00       	mov    eax,0x4
c001c213:	eb 3f                	jmp    c001c254 <FAT::close(void*)+0x50>
c001c215:	8d 76 00             	lea    esi,[esi+0x0]
c001c218:	83 ec 0c             	sub    esp,0xc
c001c21b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c21f:	e8 ee 83 fe ff       	call   c0004612 <f_close>
c001c224:	83 c4 10             	add    esp,0x10
c001c227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c22b:	83 ec 0c             	sub    esp,0xc
c001c22e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c232:	e8 70 36 ff ff       	call   c000f8a7 <free>
c001c237:	83 c4 10             	add    esp,0x10
c001c23a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c23e:	85 c0                	test   eax,eax
c001c240:	75 0a                	jne    c001c24c <FAT::close(void*)+0x48>
c001c242:	b8 00 00 00 00       	mov    eax,0x0
c001c247:	eb 0b                	jmp    c001c254 <FAT::close(void*)+0x50>
c001c249:	8d 76 00             	lea    esi,[esi+0x0]
c001c24c:	b8 01 00 00 00       	mov    eax,0x1
c001c251:	8d 76 00             	lea    esi,[esi+0x0]
c001c254:	83 c4 1c             	add    esp,0x1c
c001c257:	c3                   	ret    

c001c258 <FAT::closeDir(void*)>:
c001c258:	83 ec 1c             	sub    esp,0x1c
c001c25b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c260:	75 0a                	jne    c001c26c <FAT::closeDir(void*)+0x14>
c001c262:	b8 04 00 00 00       	mov    eax,0x4
c001c267:	eb 3f                	jmp    c001c2a8 <FAT::closeDir(void*)+0x50>
c001c269:	8d 76 00             	lea    esi,[esi+0x0]
c001c26c:	83 ec 0c             	sub    esp,0xc
c001c26f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c273:	e8 45 86 fe ff       	call   c00048bd <f_closedir>
c001c278:	83 c4 10             	add    esp,0x10
c001c27b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c27f:	83 ec 0c             	sub    esp,0xc
c001c282:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c286:	e8 1c 36 ff ff       	call   c000f8a7 <free>
c001c28b:	83 c4 10             	add    esp,0x10
c001c28e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c292:	85 c0                	test   eax,eax
c001c294:	75 0a                	jne    c001c2a0 <FAT::closeDir(void*)+0x48>
c001c296:	b8 00 00 00 00       	mov    eax,0x0
c001c29b:	eb 0b                	jmp    c001c2a8 <FAT::closeDir(void*)+0x50>
c001c29d:	8d 76 00             	lea    esi,[esi+0x0]
c001c2a0:	b8 01 00 00 00       	mov    eax,0x1
c001c2a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2a8:	83 c4 1c             	add    esp,0x1c
c001c2ab:	c3                   	ret    

c001c2ac <FAT::truncate(void*, unsigned long long)>:
c001c2ac:	83 ec 2c             	sub    esp,0x2c
c001c2af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c2b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c2bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2bf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c2c4:	75 0a                	jne    c001c2d0 <FAT::truncate(void*, unsigned long long)+0x24>
c001c2c6:	b8 04 00 00 00       	mov    eax,0x4
c001c2cb:	eb 47                	jmp    c001c314 <FAT::truncate(void*, unsigned long long)+0x68>
c001c2cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c2d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c2d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c2d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2db:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c2e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2e7:	83 ec 08             	sub    esp,0x8
c001c2ea:	50                   	push   eax
c001c2eb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c2ef:	e8 4d 83 fe ff       	call   c0004641 <f_lseek>
c001c2f4:	83 c4 10             	add    esp,0x10
c001c2f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c2fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c2ff:	85 c0                	test   eax,eax
c001c301:	75 09                	jne    c001c30c <FAT::truncate(void*, unsigned long long)+0x60>
c001c303:	b8 00 00 00 00       	mov    eax,0x0
c001c308:	eb 0a                	jmp    c001c314 <FAT::truncate(void*, unsigned long long)+0x68>
c001c30a:	66 90                	xchg   ax,ax
c001c30c:	b8 01 00 00 00       	mov    eax,0x1
c001c311:	8d 76 00             	lea    esi,[esi+0x0]
c001c314:	83 c4 2c             	add    esp,0x2c
c001c317:	c3                   	ret    

c001c318 <FAT::seek(void*, unsigned long long)>:
c001c318:	83 ec 2c             	sub    esp,0x2c
c001c31b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c31f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c323:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c327:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c32b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c330:	75 0a                	jne    c001c33c <FAT::seek(void*, unsigned long long)+0x24>
c001c332:	b8 04 00 00 00       	mov    eax,0x4
c001c337:	eb 33                	jmp    c001c36c <FAT::seek(void*, unsigned long long)+0x54>
c001c339:	8d 76 00             	lea    esi,[esi+0x0]
c001c33c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c340:	83 ec 08             	sub    esp,0x8
c001c343:	50                   	push   eax
c001c344:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c348:	e8 f4 82 fe ff       	call   c0004641 <f_lseek>
c001c34d:	83 c4 10             	add    esp,0x10
c001c350:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c354:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c358:	85 c0                	test   eax,eax
c001c35a:	75 08                	jne    c001c364 <FAT::seek(void*, unsigned long long)+0x4c>
c001c35c:	b8 00 00 00 00       	mov    eax,0x0
c001c361:	eb 09                	jmp    c001c36c <FAT::seek(void*, unsigned long long)+0x54>
c001c363:	90                   	nop
c001c364:	b8 01 00 00 00       	mov    eax,0x1
c001c369:	8d 76 00             	lea    esi,[esi+0x0]
c001c36c:	83 c4 2c             	add    esp,0x2c
c001c36f:	c3                   	ret    

c001c370 <fatWrapperReadDisk>:
c001c370:	53                   	push   ebx
c001c371:	83 ec 18             	sub    esp,0x18
c001c374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c378:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c37c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c381:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c388:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c38c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c390:	ba 00 00 00 00       	mov    edx,0x0
c001c395:	83 ec 0c             	sub    esp,0xc
c001c398:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c39c:	53                   	push   ebx
c001c39d:	52                   	push   edx
c001c39e:	50                   	push   eax
c001c39f:	51                   	push   ecx
c001c3a0:	e8 03 e7 fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001c3a5:	83 c4 20             	add    esp,0x20
c001c3a8:	83 c4 18             	add    esp,0x18
c001c3ab:	5b                   	pop    ebx
c001c3ac:	c3                   	ret    
c001c3ad:	8d 76 00             	lea    esi,[esi+0x0]

c001c3b0 <fatWrapperWriteDisk>:
c001c3b0:	53                   	push   ebx
c001c3b1:	83 ec 18             	sub    esp,0x18
c001c3b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c3bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c3c1:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c3c8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c3cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c3d0:	ba 00 00 00 00       	mov    edx,0x0
c001c3d5:	83 ec 0c             	sub    esp,0xc
c001c3d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c3dc:	53                   	push   ebx
c001c3dd:	52                   	push   edx
c001c3de:	50                   	push   eax
c001c3df:	51                   	push   ecx
c001c3e0:	e8 2f e7 fe ff       	call   c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>
c001c3e5:	83 c4 20             	add    esp,0x20
c001c3e8:	83 c4 18             	add    esp,0x18
c001c3eb:	5b                   	pop    ebx
c001c3ec:	c3                   	ret    
c001c3ed:	8d 76 00             	lea    esi,[esi+0x0]

c001c3f0 <fatWrapperIoctl>:
c001c3f0:	53                   	push   ebx
c001c3f1:	83 ec 28             	sub    esp,0x28
c001c3f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c3f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c3fc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c400:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c404:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c409:	83 f8 02             	cmp    eax,0x2
c001c40c:	75 32                	jne    c001c440 <fatWrapperIoctl+0x50>
c001c40e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c412:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c416:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c41b:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001c422:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c428:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c42e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c432:	66 89 02             	mov    WORD PTR [edx],ax
c001c435:	b8 00 00 00 00       	mov    eax,0x0
c001c43a:	e9 c5 00 00 00       	jmp    c001c504 <fatWrapperIoctl+0x114>
c001c43f:	90                   	nop
c001c440:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c445:	83 f8 01             	cmp    eax,0x1
c001c448:	75 6a                	jne    c001c4b4 <fatWrapperIoctl+0xc4>
c001c44a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c44e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c452:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c457:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001c45e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c464:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c46a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c470:	89 c8                	mov    eax,ecx
c001c472:	89 da                	mov    edx,ebx
c001c474:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c478:	c1 e0 0a             	shl    eax,0xa
c001c47b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c480:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001c487:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c48d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c493:	89 cb                	mov    ebx,ecx
c001c495:	c1 fb 1f             	sar    ebx,0x1f
c001c498:	53                   	push   ebx
c001c499:	51                   	push   ecx
c001c49a:	52                   	push   edx
c001c49b:	50                   	push   eax
c001c49c:	e8 53 55 00 00       	call   c00219f4 <__udivdi3>
c001c4a1:	83 c4 10             	add    esp,0x10
c001c4a4:	89 c2                	mov    edx,eax
c001c4a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c4aa:	89 10                	mov    DWORD PTR [eax],edx
c001c4ac:	b8 00 00 00 00       	mov    eax,0x0
c001c4b1:	eb 51                	jmp    c001c504 <fatWrapperIoctl+0x114>
c001c4b3:	90                   	nop
c001c4b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4b9:	85 c0                	test   eax,eax
c001c4bb:	75 07                	jne    c001c4c4 <fatWrapperIoctl+0xd4>
c001c4bd:	b8 00 00 00 00       	mov    eax,0x0
c001c4c2:	eb 40                	jmp    c001c504 <fatWrapperIoctl+0x114>
c001c4c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4c9:	83 f8 03             	cmp    eax,0x3
c001c4cc:	75 1a                	jne    c001c4e8 <fatWrapperIoctl+0xf8>
c001c4ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c4d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c4da:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c4e0:	b8 00 00 00 00       	mov    eax,0x0
c001c4e5:	eb 1d                	jmp    c001c504 <fatWrapperIoctl+0x114>
c001c4e7:	90                   	nop
c001c4e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4ed:	83 f8 04             	cmp    eax,0x4
c001c4f0:	75 0a                	jne    c001c4fc <fatWrapperIoctl+0x10c>
c001c4f2:	b8 00 00 00 00       	mov    eax,0x0
c001c4f7:	eb 0b                	jmp    c001c504 <fatWrapperIoctl+0x114>
c001c4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c4fc:	b8 04 00 00 00       	mov    eax,0x4
c001c501:	8d 76 00             	lea    esi,[esi+0x0]
c001c504:	83 c4 28             	add    esp,0x28
c001c507:	5b                   	pop    ebx
c001c508:	c3                   	ret    
c001c509:	90                   	nop
c001c50a:	66 90                	xchg   ax,ax

c001c50c <FAT::FAT()>:
c001c50c:	83 ec 1c             	sub    esp,0x1c
c001c50f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c513:	83 ec 0c             	sub    esp,0xc
c001c516:	50                   	push   eax
c001c517:	e8 ac b8 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001c51c:	83 c4 10             	add    esp,0x10
c001c51f:	ba 80 58 02 c0       	mov    edx,0xc0025880
c001c524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c528:	89 10                	mov    DWORD PTR [eax],edx
c001c52a:	c7 05 c0 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc0,0x0
c001c534:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c53c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c541:	7f 19                	jg     c001c55c <FAT::FAT()+0x50>
c001c543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c547:	c7 04 85 e0 eb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1420],0xffffffff
c001c552:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c557:	eb e3                	jmp    c001c53c <FAT::FAT()+0x30>
c001c559:	8d 76 00             	lea    esi,[esi+0x0]
c001c55c:	90                   	nop
c001c55d:	83 c4 1c             	add    esp,0x1c
c001c560:	c3                   	ret    
c001c561:	90                   	nop
c001c562:	66 90                	xchg   ax,ax

c001c564 <FAT::fixFilepath(char*)>:
c001c564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c568:	8a 00                	mov    al,BYTE PTR [eax]
c001c56a:	0f be c0             	movsx  eax,al
c001c56d:	83 f8 40             	cmp    eax,0x40
c001c570:	7e 2e                	jle    c001c5a0 <FAT::fixFilepath(char*)+0x3c>
c001c572:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c576:	8a 00                	mov    al,BYTE PTR [eax]
c001c578:	83 e8 41             	sub    eax,0x41
c001c57b:	88 c2                	mov    dl,al
c001c57d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c581:	88 10                	mov    BYTE PTR [eax],dl
c001c583:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c587:	8a 00                	mov    al,BYTE PTR [eax]
c001c589:	0f be c0             	movsx  eax,al
c001c58c:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001c593:	83 c0 30             	add    eax,0x30
c001c596:	88 c2                	mov    dl,al
c001c598:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c59c:	88 10                	mov    BYTE PTR [eax],dl
c001c59e:	66 90                	xchg   ax,ax
c001c5a0:	90                   	nop
c001c5a1:	c3                   	ret    
c001c5a2:	66 90                	xchg   ax,ax

c001c5a4 <FAT::open(char const*, void**, FileOpenMode)>:
c001c5a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c5aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c5b2:	74 0c                	je     c001c5c0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c5b4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c5bc:	75 0e                	jne    c001c5cc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c5be:	66 90                	xchg   ax,ax
c001c5c0:	b8 04 00 00 00       	mov    eax,0x4
c001c5c5:	e9 46 01 00 00       	jmp    c001c710 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c5ca:	66 90                	xchg   ax,ax
c001c5cc:	83 ec 08             	sub    esp,0x8
c001c5cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c5d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5da:	50                   	push   eax
c001c5db:	e8 60 40 fe ff       	call   c0000640 <strcpy>
c001c5e0:	83 c4 10             	add    esp,0x10
c001c5e3:	83 ec 08             	sub    esp,0x8
c001c5e6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c5ea:	50                   	push   eax
c001c5eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c5f2:	e8 6d ff ff ff       	call   c001c564 <FAT::fixFilepath(char*)>
c001c5f7:	83 c4 10             	add    esp,0x10
c001c5fa:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c602:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c609:	83 e0 01             	and    eax,0x1
c001c60c:	74 12                	je     c001c620 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c60e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c615:	83 c8 01             	or     eax,0x1
c001c618:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c61f:	90                   	nop
c001c620:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c627:	83 e0 04             	and    eax,0x4
c001c62a:	74 24                	je     c001c650 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c62c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c633:	83 c8 30             	or     eax,0x30
c001c636:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c63d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c644:	83 c8 02             	or     eax,0x2
c001c647:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c64e:	66 90                	xchg   ax,ax
c001c650:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c657:	83 e0 02             	and    eax,0x2
c001c65a:	74 14                	je     c001c670 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c65c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c663:	83 c8 02             	or     eax,0x2
c001c666:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c66d:	8d 76 00             	lea    esi,[esi+0x0]
c001c670:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c677:	83 e0 08             	and    eax,0x8
c001c67a:	74 14                	je     c001c690 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c67c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c683:	83 c8 04             	or     eax,0x4
c001c686:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c68d:	8d 76 00             	lea    esi,[esi+0x0]
c001c690:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c697:	83 e0 10             	and    eax,0x10
c001c69a:	74 14                	je     c001c6b0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c69c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c6a3:	83 c8 08             	or     eax,0x8
c001c6a6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c6ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c6b0:	83 ec 0c             	sub    esp,0xc
c001c6b3:	68 28 02 00 00       	push   0x228
c001c6b8:	e8 da 31 ff ff       	call   c000f897 <malloc>
c001c6bd:	83 c4 10             	add    esp,0x10
c001c6c0:	89 c2                	mov    edx,eax
c001c6c2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c6c9:	89 10                	mov    DWORD PTR [eax],edx
c001c6cb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c6d3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c6da:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6dc:	83 ec 04             	sub    esp,0x4
c001c6df:	52                   	push   edx
c001c6e0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c6e4:	52                   	push   edx
c001c6e5:	50                   	push   eax
c001c6e6:	e8 58 77 fe ff       	call   c0003e43 <f_open>
c001c6eb:	83 c4 10             	add    esp,0x10
c001c6ee:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c6f5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c6fd:	74 09                	je     c001c708 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c6ff:	b8 01 00 00 00       	mov    eax,0x1
c001c704:	eb 0a                	jmp    c001c710 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c706:	66 90                	xchg   ax,ax
c001c708:	b8 00 00 00 00       	mov    eax,0x0
c001c70d:	8d 76 00             	lea    esi,[esi+0x0]
c001c710:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c716:	c3                   	ret    
c001c717:	90                   	nop

c001c718 <FAT::openDir(char const*, void**)>:
c001c718:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c71e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c726:	74 0c                	je     c001c734 <FAT::openDir(char const*, void**)+0x1c>
c001c728:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c730:	75 0e                	jne    c001c740 <FAT::openDir(char const*, void**)+0x28>
c001c732:	66 90                	xchg   ax,ax
c001c734:	b8 04 00 00 00       	mov    eax,0x4
c001c739:	e9 82 00 00 00       	jmp    c001c7c0 <FAT::openDir(char const*, void**)+0xa8>
c001c73e:	66 90                	xchg   ax,ax
c001c740:	83 ec 08             	sub    esp,0x8
c001c743:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c74a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c74e:	50                   	push   eax
c001c74f:	e8 ec 3e fe ff       	call   c0000640 <strcpy>
c001c754:	83 c4 10             	add    esp,0x10
c001c757:	83 ec 08             	sub    esp,0x8
c001c75a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c75e:	50                   	push   eax
c001c75f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c766:	e8 f9 fd ff ff       	call   c001c564 <FAT::fixFilepath(char*)>
c001c76b:	83 c4 10             	add    esp,0x10
c001c76e:	83 ec 0c             	sub    esp,0xc
c001c771:	6a 30                	push   0x30
c001c773:	e8 1f 31 ff ff       	call   c000f897 <malloc>
c001c778:	83 c4 10             	add    esp,0x10
c001c77b:	89 c2                	mov    edx,eax
c001c77d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c784:	89 10                	mov    DWORD PTR [eax],edx
c001c786:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c78d:	8b 00                	mov    eax,DWORD PTR [eax]
c001c78f:	83 ec 08             	sub    esp,0x8
c001c792:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c796:	52                   	push   edx
c001c797:	50                   	push   eax
c001c798:	e8 55 80 fe ff       	call   c00047f2 <f_opendir>
c001c79d:	83 c4 10             	add    esp,0x10
c001c7a0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c7a7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c7af:	74 07                	je     c001c7b8 <FAT::openDir(char const*, void**)+0xa0>
c001c7b1:	b8 01 00 00 00       	mov    eax,0x1
c001c7b6:	eb 08                	jmp    c001c7c0 <FAT::openDir(char const*, void**)+0xa8>
c001c7b8:	b8 00 00 00 00       	mov    eax,0x0
c001c7bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c7c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c7c6:	c3                   	ret    
c001c7c7:	90                   	nop

c001c7c8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c7c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c7ce:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c7d6:	75 0c                	jne    c001c7e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c7d8:	b8 04 00 00 00       	mov    eax,0x4
c001c7dd:	e9 d6 00 00 00       	jmp    c001c8b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c7e2:	66 90                	xchg   ax,ax
c001c7e4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c7ec:	75 0a                	jne    c001c7f8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c7ee:	b8 04 00 00 00       	mov    eax,0x4
c001c7f3:	e9 c0 00 00 00       	jmp    c001c8b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c7f8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c800:	75 0a                	jne    c001c80c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c802:	b8 04 00 00 00       	mov    eax,0x4
c001c807:	e9 ac 00 00 00       	jmp    c001c8b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c80c:	83 ec 08             	sub    esp,0x8
c001c80f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c816:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c81d:	50                   	push   eax
c001c81e:	e8 1d 3e fe ff       	call   c0000640 <strcpy>
c001c823:	83 c4 10             	add    esp,0x10
c001c826:	83 ec 08             	sub    esp,0x8
c001c829:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c830:	50                   	push   eax
c001c831:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c838:	e8 27 fd ff ff       	call   c001c564 <FAT::fixFilepath(char*)>
c001c83d:	83 c4 10             	add    esp,0x10
c001c840:	83 ec 08             	sub    esp,0x8
c001c843:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c847:	50                   	push   eax
c001c848:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c84f:	50                   	push   eax
c001c850:	e8 1c 81 fe ff       	call   c0004971 <f_stat>
c001c855:	83 c4 10             	add    esp,0x10
c001c858:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c85f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c866:	85 c0                	test   eax,eax
c001c868:	74 0a                	je     c001c874 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c86a:	83 f8 04             	cmp    eax,0x4
c001c86d:	74 39                	je     c001c8a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c86f:	eb 3f                	jmp    c001c8b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001c871:	8d 76 00             	lea    esi,[esi+0x0]
c001c874:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c878:	0f b6 c0             	movzx  eax,al
c001c87b:	83 e0 10             	and    eax,0x10
c001c87e:	0f 95 c2             	setne  dl
c001c881:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c888:	88 10                	mov    BYTE PTR [eax],dl
c001c88a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c88e:	ba 00 00 00 00       	mov    edx,0x0
c001c893:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c89a:	89 01                	mov    DWORD PTR [ecx],eax
c001c89c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c89f:	b8 00 00 00 00       	mov    eax,0x0
c001c8a4:	eb 12                	jmp    c001c8b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c8a6:	66 90                	xchg   ax,ax
c001c8a8:	b8 02 00 00 00       	mov    eax,0x2
c001c8ad:	eb 09                	jmp    c001c8b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c8af:	90                   	nop
c001c8b0:	b8 01 00 00 00       	mov    eax,0x1
c001c8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8b8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c8be:	c3                   	ret    
c001c8bf:	90                   	nop

c001c8c0 <FAT::unlink(char const*)>:
c001c8c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c8c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c8ce:	75 08                	jne    c001c8d8 <FAT::unlink(char const*)+0x18>
c001c8d0:	b8 04 00 00 00       	mov    eax,0x4
c001c8d5:	eb 61                	jmp    c001c938 <FAT::unlink(char const*)+0x78>
c001c8d7:	90                   	nop
c001c8d8:	83 ec 08             	sub    esp,0x8
c001c8db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c8e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c8e6:	50                   	push   eax
c001c8e7:	e8 54 3d fe ff       	call   c0000640 <strcpy>
c001c8ec:	83 c4 10             	add    esp,0x10
c001c8ef:	83 ec 08             	sub    esp,0x8
c001c8f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c8f6:	50                   	push   eax
c001c8f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c8fe:	e8 61 fc ff ff       	call   c001c564 <FAT::fixFilepath(char*)>
c001c903:	83 c4 10             	add    esp,0x10
c001c906:	83 ec 0c             	sub    esp,0xc
c001c909:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c90d:	50                   	push   eax
c001c90e:	e8 d0 82 fe ff       	call   c0004be3 <f_unlink>
c001c913:	83 c4 10             	add    esp,0x10
c001c916:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c91d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c924:	85 c0                	test   eax,eax
c001c926:	75 08                	jne    c001c930 <FAT::unlink(char const*)+0x70>
c001c928:	b8 00 00 00 00       	mov    eax,0x0
c001c92d:	eb 09                	jmp    c001c938 <FAT::unlink(char const*)+0x78>
c001c92f:	90                   	nop
c001c930:	b8 01 00 00 00       	mov    eax,0x1
c001c935:	8d 76 00             	lea    esi,[esi+0x0]
c001c938:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c93e:	c3                   	ret    
c001c93f:	90                   	nop

c001c940 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c940:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c946:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c94d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c954:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c958:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c95c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c964:	75 0a                	jne    c001c970 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c966:	b8 04 00 00 00       	mov    eax,0x4
c001c96b:	e9 7c 01 00 00       	jmp    c001caec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001c970:	83 ec 08             	sub    esp,0x8
c001c973:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c97a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c97e:	50                   	push   eax
c001c97f:	e8 bc 3c fe ff       	call   c0000640 <strcpy>
c001c984:	83 c4 10             	add    esp,0x10
c001c987:	83 ec 08             	sub    esp,0x8
c001c98a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c98e:	50                   	push   eax
c001c98f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c996:	e8 c9 fb ff ff       	call   c001c564 <FAT::fixFilepath(char*)>
c001c99b:	83 c4 10             	add    esp,0x10
c001c99e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c9a6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c9ae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c9b3:	83 e0 01             	and    eax,0x1
c001c9b6:	74 14                	je     c001c9cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001c9b8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c9bf:	83 c8 01             	or     eax,0x1
c001c9c2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c9c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c9cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c9d1:	83 e0 02             	and    eax,0x2
c001c9d4:	74 12                	je     c001c9e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c9d6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c9dd:	83 c8 20             	or     eax,0x20
c001c9e0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c9e7:	90                   	nop
c001c9e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c9ed:	83 e0 04             	and    eax,0x4
c001c9f0:	74 12                	je     c001ca04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001c9f2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c9f9:	83 c8 04             	or     eax,0x4
c001c9fc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ca03:	90                   	nop
c001ca04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ca09:	83 e0 08             	and    eax,0x8
c001ca0c:	74 12                	je     c001ca20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001ca0e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ca15:	83 c8 02             	or     eax,0x2
c001ca18:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ca1f:	90                   	nop
c001ca20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ca25:	83 e0 01             	and    eax,0x1
c001ca28:	74 12                	je     c001ca3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001ca2a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ca31:	83 c8 01             	or     eax,0x1
c001ca34:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ca3b:	90                   	nop
c001ca3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ca41:	83 e0 02             	and    eax,0x2
c001ca44:	74 12                	je     c001ca58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001ca46:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ca4d:	83 c8 20             	or     eax,0x20
c001ca50:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ca57:	90                   	nop
c001ca58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ca5d:	83 e0 04             	and    eax,0x4
c001ca60:	74 12                	je     c001ca74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001ca62:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ca69:	83 c8 04             	or     eax,0x4
c001ca6c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ca73:	90                   	nop
c001ca74:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ca79:	83 e0 08             	and    eax,0x8
c001ca7c:	74 12                	je     c001ca90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001ca7e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ca85:	83 c8 02             	or     eax,0x2
c001ca88:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ca8f:	90                   	nop
c001ca90:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001ca97:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ca9e:	09 d0                	or     eax,edx
c001caa0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001caa7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001caaf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001cab7:	83 ec 04             	sub    esp,0x4
c001caba:	52                   	push   edx
c001cabb:	50                   	push   eax
c001cabc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cac0:	50                   	push   eax
c001cac1:	e8 92 85 fe ff       	call   c0005058 <f_chmod>
c001cac6:	83 c4 10             	add    esp,0x10
c001cac9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001cad0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001cad7:	85 c0                	test   eax,eax
c001cad9:	75 09                	jne    c001cae4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001cadb:	b8 00 00 00 00       	mov    eax,0x0
c001cae0:	eb 0a                	jmp    c001caec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001cae2:	66 90                	xchg   ax,ax
c001cae4:	b8 01 00 00 00       	mov    eax,0x1
c001cae9:	8d 76 00             	lea    esi,[esi+0x0]
c001caec:	81 c4 2c 01 00 00    	add    esp,0x12c
c001caf2:	c3                   	ret    
c001caf3:	90                   	nop

c001caf4 <FAT::rename(char const*, char const*)>:
c001caf4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cafa:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001cb02:	74 0c                	je     c001cb10 <FAT::rename(char const*, char const*)+0x1c>
c001cb04:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001cb0c:	75 0e                	jne    c001cb1c <FAT::rename(char const*, char const*)+0x28>
c001cb0e:	66 90                	xchg   ax,ax
c001cb10:	b8 04 00 00 00       	mov    eax,0x4
c001cb15:	e9 9e 00 00 00       	jmp    c001cbb8 <FAT::rename(char const*, char const*)+0xc4>
c001cb1a:	66 90                	xchg   ax,ax
c001cb1c:	83 ec 08             	sub    esp,0x8
c001cb1f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cb26:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cb2d:	50                   	push   eax
c001cb2e:	e8 0d 3b fe ff       	call   c0000640 <strcpy>
c001cb33:	83 c4 10             	add    esp,0x10
c001cb36:	83 ec 08             	sub    esp,0x8
c001cb39:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001cb40:	50                   	push   eax
c001cb41:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cb48:	e8 17 fa ff ff       	call   c001c564 <FAT::fixFilepath(char*)>
c001cb4d:	83 c4 10             	add    esp,0x10
c001cb50:	83 ec 08             	sub    esp,0x8
c001cb53:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001cb5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb5e:	50                   	push   eax
c001cb5f:	e8 dc 3a fe ff       	call   c0000640 <strcpy>
c001cb64:	83 c4 10             	add    esp,0x10
c001cb67:	83 ec 08             	sub    esp,0x8
c001cb6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cb6e:	50                   	push   eax
c001cb6f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cb76:	e8 e9 f9 ff ff       	call   c001c564 <FAT::fixFilepath(char*)>
c001cb7b:	83 c4 10             	add    esp,0x10
c001cb7e:	83 ec 08             	sub    esp,0x8
c001cb81:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cb85:	50                   	push   eax
c001cb86:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cb8d:	50                   	push   eax
c001cb8e:	e8 0d 83 fe ff       	call   c0004ea0 <f_rename>
c001cb93:	83 c4 10             	add    esp,0x10
c001cb96:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001cb9d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001cba4:	85 c0                	test   eax,eax
c001cba6:	75 08                	jne    c001cbb0 <FAT::rename(char const*, char const*)+0xbc>
c001cba8:	b8 00 00 00 00       	mov    eax,0x0
c001cbad:	eb 09                	jmp    c001cbb8 <FAT::rename(char const*, char const*)+0xc4>
c001cbaf:	90                   	nop
c001cbb0:	b8 01 00 00 00       	mov    eax,0x1
c001cbb5:	8d 76 00             	lea    esi,[esi+0x0]
c001cbb8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cbbe:	c3                   	ret    
c001cbbf:	90                   	nop

c001cbc0 <FAT::mkdir(char const*)>:
c001cbc0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cbc6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cbce:	75 08                	jne    c001cbd8 <FAT::mkdir(char const*)+0x18>
c001cbd0:	b8 04 00 00 00       	mov    eax,0x4
c001cbd5:	eb 61                	jmp    c001cc38 <FAT::mkdir(char const*)+0x78>
c001cbd7:	90                   	nop
c001cbd8:	83 ec 08             	sub    esp,0x8
c001cbdb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cbe2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cbe6:	50                   	push   eax
c001cbe7:	e8 54 3a fe ff       	call   c0000640 <strcpy>
c001cbec:	83 c4 10             	add    esp,0x10
c001cbef:	83 ec 08             	sub    esp,0x8
c001cbf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cbf6:	50                   	push   eax
c001cbf7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cbfe:	e8 61 f9 ff ff       	call   c001c564 <FAT::fixFilepath(char*)>
c001cc03:	83 c4 10             	add    esp,0x10
c001cc06:	83 ec 0c             	sub    esp,0xc
c001cc09:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cc0d:	50                   	push   eax
c001cc0e:	e8 f2 80 fe ff       	call   c0004d05 <f_mkdir>
c001cc13:	83 c4 10             	add    esp,0x10
c001cc16:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cc1d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cc24:	85 c0                	test   eax,eax
c001cc26:	75 08                	jne    c001cc30 <FAT::mkdir(char const*)+0x70>
c001cc28:	b8 00 00 00 00       	mov    eax,0x0
c001cc2d:	eb 09                	jmp    c001cc38 <FAT::mkdir(char const*)+0x78>
c001cc2f:	90                   	nop
c001cc30:	b8 01 00 00 00       	mov    eax,0x1
c001cc35:	8d 76 00             	lea    esi,[esi+0x0]
c001cc38:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cc3e:	c3                   	ret    
c001cc3f:	90                   	nop

c001cc40 <FAT::exists(char const*)>:
c001cc40:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cc46:	83 ec 08             	sub    esp,0x8
c001cc49:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cc50:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cc54:	50                   	push   eax
c001cc55:	e8 e6 39 fe ff       	call   c0000640 <strcpy>
c001cc5a:	83 c4 10             	add    esp,0x10
c001cc5d:	83 ec 08             	sub    esp,0x8
c001cc60:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cc64:	50                   	push   eax
c001cc65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cc6c:	e8 f3 f8 ff ff       	call   c001c564 <FAT::fixFilepath(char*)>
c001cc71:	83 c4 10             	add    esp,0x10
c001cc74:	83 ec 08             	sub    esp,0x8
c001cc77:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001cc7e:	50                   	push   eax
c001cc7f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cc83:	50                   	push   eax
c001cc84:	e8 e8 7c fe ff       	call   c0004971 <f_stat>
c001cc89:	83 c4 10             	add    esp,0x10
c001cc8c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001cc93:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cc9a:	85 c0                	test   eax,eax
c001cc9c:	75 06                	jne    c001cca4 <FAT::exists(char const*)+0x64>
c001cc9e:	b0 01                	mov    al,0x1
c001cca0:	eb 06                	jmp    c001cca8 <FAT::exists(char const*)+0x68>
c001cca2:	66 90                	xchg   ax,ax
c001cca4:	b0 00                	mov    al,0x0
c001cca6:	66 90                	xchg   ax,ax
c001cca8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ccae:	c3                   	ret    
c001ccaf:	90                   	nop

c001ccb0 <isoReadDiscSectorHelper>:
c001ccb0:	83 ec 2c             	sub    esp,0x2c
c001ccb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ccb7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ccbb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ccc0:	83 e8 41             	sub    eax,0x41
c001ccc3:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001ccca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ccce:	ba 00 00 00 00       	mov    edx,0x0
c001ccd3:	83 ec 0c             	sub    esp,0xc
c001ccd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccda:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ccde:	52                   	push   edx
c001ccdf:	50                   	push   eax
c001cce0:	51                   	push   ecx
c001cce1:	e8 c2 dd fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001cce6:	83 c4 20             	add    esp,0x20
c001cce9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cced:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ccf2:	74 0c                	je     c001cd00 <isoReadDiscSectorHelper+0x50>
c001ccf4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ccf8:	c1 e0 0b             	shl    eax,0xb
c001ccfb:	eb 0b                	jmp    c001cd08 <isoReadDiscSectorHelper+0x58>
c001ccfd:	8d 76 00             	lea    esi,[esi+0x0]
c001cd00:	b8 00 00 00 00       	mov    eax,0x0
c001cd05:	8d 76 00             	lea    esi,[esi+0x0]
c001cd08:	83 c4 2c             	add    esp,0x2c
c001cd0b:	c3                   	ret    

c001cd0c <iso_kprintf>:
c001cd0c:	83 ec 0c             	sub    esp,0xc
c001cd0f:	83 ec 08             	sub    esp,0x8
c001cd12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd16:	68 58 55 02 c0       	push   0xc0025558
c001cd1b:	e8 5c a2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	90                   	nop
c001cd24:	83 c4 0c             	add    esp,0xc
c001cd27:	c3                   	ret    

c001cd28 <iso_kprintfd>:
c001cd28:	83 ec 0c             	sub    esp,0xc
c001cd2b:	83 ec 08             	sub    esp,0x8
c001cd2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd32:	68 99 4a 02 c0       	push   0xc0024a99
c001cd37:	e8 40 a2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cd3c:	83 c4 10             	add    esp,0x10
c001cd3f:	90                   	nop
c001cd40:	83 c4 0c             	add    esp,0xc
c001cd43:	c3                   	ret    

c001cd44 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001cd44:	b8 08 00 00 00       	mov    eax,0x8
c001cd49:	c3                   	ret    

c001cd4a <ISO9660::truncate(void*, unsigned long long)>:
c001cd4a:	b8 01 00 00 00       	mov    eax,0x1
c001cd4f:	c3                   	ret    

c001cd50 <ISO9660::getName()>:
c001cd50:	b8 e4 58 02 c0       	mov    eax,0xc00258e4
c001cd55:	c3                   	ret    

c001cd56 <ISO9660::closeDir(void*)>:
c001cd56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd5a:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd5c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001cd5f:	90                   	nop

c001cd60 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001cd60:	b8 01 00 00 00       	mov    eax,0x1
c001cd65:	c3                   	ret    

c001cd66 <ISO9660::unlink(char const*)>:
c001cd66:	b8 01 00 00 00       	mov    eax,0x1
c001cd6b:	c3                   	ret    

c001cd6c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001cd6c:	b8 03 00 00 00       	mov    eax,0x3
c001cd71:	c3                   	ret    

c001cd72 <ISO9660::rename(char const*, char const*)>:
c001cd72:	b8 01 00 00 00       	mov    eax,0x1
c001cd77:	c3                   	ret    

c001cd78 <ISO9660::mkdir(char const*)>:
c001cd78:	b8 01 00 00 00       	mov    eax,0x1
c001cd7d:	c3                   	ret    

c001cd7e <ISO9660::~ISO9660()>:
c001cd7e:	83 ec 0c             	sub    esp,0xc
c001cd81:	ba 24 5a 02 c0       	mov    edx,0xc0025a24
c001cd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd8a:	89 10                	mov    DWORD PTR [eax],edx
c001cd8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd90:	83 ec 0c             	sub    esp,0xc
c001cd93:	50                   	push   eax
c001cd94:	e8 53 b0 fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001cd99:	83 c4 10             	add    esp,0x10
c001cd9c:	90                   	nop
c001cd9d:	83 c4 0c             	add    esp,0xc
c001cda0:	c3                   	ret    
c001cda1:	90                   	nop

c001cda2 <ISO9660::~ISO9660()>:
c001cda2:	83 ec 0c             	sub    esp,0xc
c001cda5:	83 ec 0c             	sub    esp,0xc
c001cda8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdac:	e8 cd ff ff ff       	call   c001cd7e <ISO9660::~ISO9660()>
c001cdb1:	83 c4 10             	add    esp,0x10
c001cdb4:	83 ec 08             	sub    esp,0x8
c001cdb7:	6a 08                	push   0x8
c001cdb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdbd:	e8 ee 05 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c001cdc2:	83 c4 10             	add    esp,0x10
c001cdc5:	83 c4 0c             	add    esp,0xc
c001cdc8:	c3                   	ret    
c001cdc9:	90                   	nop

c001cdca <ISO9660::exists(char const*)>:
c001cdca:	83 ec 18             	sub    esp,0x18
c001cdcd:	68 ff 58 02 c0       	push   0xc00258ff
c001cdd2:	e8 1d 2f ff ff       	call   c000fcf4 <KePanic(char const*)>
c001cdd7:	31 c0                	xor    eax,eax
c001cdd9:	83 c4 1c             	add    esp,0x1c
c001cddc:	c3                   	ret    
c001cddd:	90                   	nop

c001cdde <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cdde:	56                   	push   esi
c001cddf:	53                   	push   ebx
c001cde0:	53                   	push   ebx
c001cde1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cde5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cde9:	85 db                	test   ebx,ebx
c001cdeb:	0f 84 ca 00 00 00    	je     c001cebb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001cdf1:	85 f6                	test   esi,esi
c001cdf3:	0f 84 c2 00 00 00    	je     c001cebb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001cdf9:	b8 03 00 00 00       	mov    eax,0x3
c001cdfe:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001ce03:	0f 85 b7 00 00 00    	jne    c001cec0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ce09:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ce0b:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001ce12:	38 0d c0 ec 02 c0    	cmp    BYTE PTR ds:0xc002ecc0,cl
c001ce18:	74 1b                	je     c001ce35 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ce1a:	85 c0                	test   eax,eax
c001ce1c:	74 10                	je     c001ce2e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ce1e:	83 ec 0c             	sub    esp,0xc
c001ce21:	68 1d 59 02 c0       	push   0xc002591d
c001ce26:	e8 c9 2e ff ff       	call   c000fcf4 <KePanic(char const*)>
c001ce2b:	83 c4 10             	add    esp,0x10
c001ce2e:	8a 03                	mov    al,BYTE PTR [ebx]
c001ce30:	a2 c0 ec 02 c0       	mov    ds:0xc002ecc0,al
c001ce35:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ce38:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001ce3f:	85 c0                	test   eax,eax
c001ce41:	74 09                	je     c001ce4c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ce43:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ce4a:	74 48                	je     c001ce94 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ce4c:	83 ec 0c             	sub    esp,0xc
c001ce4f:	68 2d 59 02 c0       	push   0xc002592d
c001ce54:	e8 23 a1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ce59:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ce5c:	83 c4 10             	add    esp,0x10
c001ce5f:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001ce66:	85 c0                	test   eax,eax
c001ce68:	74 17                	je     c001ce81 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001ce6a:	83 ec 0c             	sub    esp,0xc
c001ce6d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001ce74:	68 4d 59 02 c0       	push   0xc002594d
c001ce79:	e8 fe a0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ce7e:	83 c4 10             	add    esp,0x10
c001ce81:	83 ec 0c             	sub    esp,0xc
c001ce84:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001ce8b:	50                   	push   eax
c001ce8c:	e8 9d 9d fe ff       	call   c0006c2e <init_percd>
c001ce91:	83 c4 10             	add    esp,0x10
c001ce94:	83 c3 03             	add    ebx,0x3
c001ce97:	51                   	push   ecx
c001ce98:	51                   	push   ecx
c001ce99:	6a 00                	push   0x0
c001ce9b:	53                   	push   ebx
c001ce9c:	e8 54 98 fe ff       	call   c00066f5 <iso_open>
c001cea1:	83 c4 10             	add    esp,0x10
c001cea4:	89 c2                	mov    edx,eax
c001cea6:	b8 01 00 00 00       	mov    eax,0x1
c001ceab:	83 fa ff             	cmp    edx,0xffffffff
c001ceae:	74 10                	je     c001cec0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ceb0:	83 c2 32             	add    edx,0x32
c001ceb3:	31 c0                	xor    eax,eax
c001ceb5:	01 d2                	add    edx,edx
c001ceb7:	89 16                	mov    DWORD PTR [esi],edx
c001ceb9:	eb 05                	jmp    c001cec0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cebb:	b8 04 00 00 00       	mov    eax,0x4
c001cec0:	5a                   	pop    edx
c001cec1:	5b                   	pop    ebx
c001cec2:	5e                   	pop    esi
c001cec3:	c3                   	ret    

c001cec4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001cec4:	53                   	push   ebx
c001cec5:	83 ec 08             	sub    esp,0x8
c001cec8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cecc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ced0:	85 c0                	test   eax,eax
c001ced2:	74 2d                	je     c001cf01 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ced4:	85 db                	test   ebx,ebx
c001ced6:	74 29                	je     c001cf01 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ced8:	b9 02 00 00 00       	mov    ecx,0x2
c001cedd:	52                   	push   edx
c001cede:	99                   	cdq    
c001cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cee3:	f7 f9                	idiv   ecx
c001cee5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cee9:	83 e8 32             	sub    eax,0x32
c001ceec:	50                   	push   eax
c001ceed:	e8 ab 98 fe ff       	call   c000679d <iso_read>
c001cef2:	83 c4 10             	add    esp,0x10
c001cef5:	89 03                	mov    DWORD PTR [ebx],eax
c001cef7:	09 d0                	or     eax,edx
c001cef9:	0f 94 c0             	sete   al
c001cefc:	0f b6 c0             	movzx  eax,al
c001ceff:	eb 05                	jmp    c001cf06 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001cf01:	b8 04 00 00 00       	mov    eax,0x4
c001cf06:	83 c4 08             	add    esp,0x8
c001cf09:	5b                   	pop    ebx
c001cf0a:	c3                   	ret    
c001cf0b:	90                   	nop

c001cf0c <ISO9660::seek(void*, unsigned long long)>:
c001cf0c:	57                   	push   edi
c001cf0d:	56                   	push   esi
c001cf0e:	b8 04 00 00 00       	mov    eax,0x4
c001cf13:	51                   	push   ecx
c001cf14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf18:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cf1c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cf20:	85 d2                	test   edx,edx
c001cf22:	74 26                	je     c001cf4a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001cf24:	6a 00                	push   0x0
c001cf26:	b9 02 00 00 00       	mov    ecx,0x2
c001cf2b:	57                   	push   edi
c001cf2c:	89 d0                	mov    eax,edx
c001cf2e:	56                   	push   esi
c001cf2f:	99                   	cdq    
c001cf30:	f7 f9                	idiv   ecx
c001cf32:	83 e8 32             	sub    eax,0x32
c001cf35:	50                   	push   eax
c001cf36:	e8 78 99 fe ff       	call   c00068b3 <iso_seek>
c001cf3b:	83 c4 10             	add    esp,0x10
c001cf3e:	31 f0                	xor    eax,esi
c001cf40:	31 fa                	xor    edx,edi
c001cf42:	09 d0                	or     eax,edx
c001cf44:	0f 95 c0             	setne  al
c001cf47:	0f b6 c0             	movzx  eax,al
c001cf4a:	5a                   	pop    edx
c001cf4b:	5e                   	pop    esi
c001cf4c:	5f                   	pop    edi
c001cf4d:	c3                   	ret    

c001cf4e <ISO9660::tell(void*, unsigned long long*)>:
c001cf4e:	53                   	push   ebx
c001cf4f:	83 ec 08             	sub    esp,0x8
c001cf52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf56:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cf5a:	85 c0                	test   eax,eax
c001cf5c:	74 24                	je     c001cf82 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cf5e:	85 db                	test   ebx,ebx
c001cf60:	74 20                	je     c001cf82 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cf62:	83 ec 0c             	sub    esp,0xc
c001cf65:	b9 02 00 00 00       	mov    ecx,0x2
c001cf6a:	99                   	cdq    
c001cf6b:	f7 f9                	idiv   ecx
c001cf6d:	83 e8 32             	sub    eax,0x32
c001cf70:	50                   	push   eax
c001cf71:	e8 c1 99 fe ff       	call   c0006937 <iso_tell>
c001cf76:	83 c4 10             	add    esp,0x10
c001cf79:	89 03                	mov    DWORD PTR [ebx],eax
c001cf7b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001cf7e:	31 c0                	xor    eax,eax
c001cf80:	eb 05                	jmp    c001cf87 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001cf82:	b8 04 00 00 00       	mov    eax,0x4
c001cf87:	83 c4 08             	add    esp,0x8
c001cf8a:	5b                   	pop    ebx
c001cf8b:	c3                   	ret    

c001cf8c <ISO9660::stat(void*, unsigned long long*)>:
c001cf8c:	53                   	push   ebx
c001cf8d:	83 ec 14             	sub    esp,0x14
c001cf90:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cf94:	68 71 59 02 c0       	push   0xc0025971
c001cf99:	e8 de 9f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cf9e:	83 c4 10             	add    esp,0x10
c001cfa1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cfa6:	74 2c                	je     c001cfd4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001cfa8:	85 db                	test   ebx,ebx
c001cfaa:	74 28                	je     c001cfd4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001cfac:	83 ec 0c             	sub    esp,0xc
c001cfaf:	b9 02 00 00 00       	mov    ecx,0x2
c001cfb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfb8:	99                   	cdq    
c001cfb9:	f7 f9                	idiv   ecx
c001cfbb:	83 e8 32             	sub    eax,0x32
c001cfbe:	50                   	push   eax
c001cfbf:	e8 a4 99 fe ff       	call   c0006968 <iso_total>
c001cfc4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cfcb:	89 03                	mov    DWORD PTR [ebx],eax
c001cfcd:	83 c4 10             	add    esp,0x10
c001cfd0:	31 c0                	xor    eax,eax
c001cfd2:	eb 05                	jmp    c001cfd9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001cfd4:	b8 04 00 00 00       	mov    eax,0x4
c001cfd9:	83 c4 08             	add    esp,0x8
c001cfdc:	5b                   	pop    ebx
c001cfdd:	c3                   	ret    

c001cfde <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cfde:	55                   	push   ebp
c001cfdf:	57                   	push   edi
c001cfe0:	56                   	push   esi
c001cfe1:	53                   	push   ebx
c001cfe2:	83 ec 18             	sub    esp,0x18
c001cfe5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cfe9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cfed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cff1:	68 79 59 02 c0       	push   0xc0025979
c001cff6:	e8 81 9f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cffb:	83 c4 10             	add    esp,0x10
c001cffe:	85 ff                	test   edi,edi
c001d000:	0f 94 c0             	sete   al
c001d003:	85 f6                	test   esi,esi
c001d005:	0f 94 c2             	sete   dl
c001d008:	09 d0                	or     eax,edx
c001d00a:	a8 01                	test   al,0x1
c001d00c:	0f 85 dd 00 00 00    	jne    c001d0ef <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d012:	85 db                	test   ebx,ebx
c001d014:	0f 84 d5 00 00 00    	je     c001d0ef <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d01a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d01d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d023:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d02a:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001d031:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d033:	38 0d c0 ec 02 c0    	cmp    BYTE PTR ds:0xc002ecc0,cl
c001d039:	74 1b                	je     c001d056 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d03b:	85 c0                	test   eax,eax
c001d03d:	74 10                	je     c001d04f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d03f:	83 ec 0c             	sub    esp,0xc
c001d042:	68 1d 59 02 c0       	push   0xc002591d
c001d047:	e8 a8 2c ff ff       	call   c000fcf4 <KePanic(char const*)>
c001d04c:	83 c4 10             	add    esp,0x10
c001d04f:	8a 03                	mov    al,BYTE PTR [ebx]
c001d051:	a2 c0 ec 02 c0       	mov    ds:0xc002ecc0,al
c001d056:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d059:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001d060:	85 c0                	test   eax,eax
c001d062:	74 09                	je     c001d06d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d064:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d06b:	74 51                	je     c001d0be <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d06d:	83 ec 0c             	sub    esp,0xc
c001d070:	68 81 59 02 c0       	push   0xc0025981
c001d075:	e8 02 9f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d07a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d07d:	83 c4 10             	add    esp,0x10
c001d080:	83 3c 85 dc b9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4624],0x0
c001d088:	74 21                	je     c001d0ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d08a:	83 ec 0c             	sub    esp,0xc
c001d08d:	68 a1 59 02 c0       	push   0xc00259a1
c001d092:	e8 e5 9e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d097:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d09a:	83 c4 10             	add    esp,0x10
c001d09d:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001d0a4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d0ab:	83 ec 0c             	sub    esp,0xc
c001d0ae:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001d0b5:	50                   	push   eax
c001d0b6:	e8 73 9b fe ff       	call   c0006c2e <init_percd>
c001d0bb:	83 c4 10             	add    esp,0x10
c001d0be:	83 c3 03             	add    ebx,0x3
c001d0c1:	52                   	push   edx
c001d0c2:	52                   	push   edx
c001d0c3:	6a 00                	push   0x0
c001d0c5:	53                   	push   ebx
c001d0c6:	e8 2a 96 fe ff       	call   c00066f5 <iso_open>
c001d0cb:	83 c4 10             	add    esp,0x10
c001d0ce:	89 c5                	mov    ebp,eax
c001d0d0:	83 f8 ff             	cmp    eax,0xffffffff
c001d0d3:	75 21                	jne    c001d0f6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d0d5:	50                   	push   eax
c001d0d6:	50                   	push   eax
c001d0d7:	6a 01                	push   0x1
c001d0d9:	53                   	push   ebx
c001d0da:	e8 16 96 fe ff       	call   c00066f5 <iso_open>
c001d0df:	83 c4 10             	add    esp,0x10
c001d0e2:	ba 02 00 00 00       	mov    edx,0x2
c001d0e7:	40                   	inc    eax
c001d0e8:	74 2b                	je     c001d115 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d0ea:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d0ed:	eb 24                	jmp    c001d113 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d0ef:	ba 04 00 00 00       	mov    edx,0x4
c001d0f4:	eb 1f                	jmp    c001d115 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d0f6:	83 ec 0c             	sub    esp,0xc
c001d0f9:	50                   	push   eax
c001d0fa:	e8 69 98 fe ff       	call   c0006968 <iso_total>
c001d0ff:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d106:	89 07                	mov    DWORD PTR [edi],eax
c001d108:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d10b:	e8 6f 96 fe ff       	call   c000677f <iso_close>
c001d110:	83 c4 10             	add    esp,0x10
c001d113:	31 d2                	xor    edx,edx
c001d115:	83 c4 0c             	add    esp,0xc
c001d118:	89 d0                	mov    eax,edx
c001d11a:	5b                   	pop    ebx
c001d11b:	5e                   	pop    esi
c001d11c:	5f                   	pop    edi
c001d11d:	5d                   	pop    ebp
c001d11e:	c3                   	ret    
c001d11f:	90                   	nop

c001d120 <ISO9660::close(void*)>:
c001d120:	83 ec 0c             	sub    esp,0xc
c001d123:	b8 04 00 00 00       	mov    eax,0x4
c001d128:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d12c:	85 d2                	test   edx,edx
c001d12e:	74 1b                	je     c001d14b <ISO9660::close(void*)+0x2b>
c001d130:	83 ec 0c             	sub    esp,0xc
c001d133:	b9 02 00 00 00       	mov    ecx,0x2
c001d138:	89 d0                	mov    eax,edx
c001d13a:	99                   	cdq    
c001d13b:	f7 f9                	idiv   ecx
c001d13d:	83 e8 32             	sub    eax,0x32
c001d140:	50                   	push   eax
c001d141:	e8 39 96 fe ff       	call   c000677f <iso_close>
c001d146:	83 c4 10             	add    esp,0x10
c001d149:	31 c0                	xor    eax,eax
c001d14b:	83 c4 0c             	add    esp,0xc
c001d14e:	c3                   	ret    
c001d14f:	90                   	nop

c001d150 <ISO9660::openDir(char const*, void**)>:
c001d150:	56                   	push   esi
c001d151:	53                   	push   ebx
c001d152:	50                   	push   eax
c001d153:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d157:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d15b:	85 db                	test   ebx,ebx
c001d15d:	0f 84 bd 00 00 00    	je     c001d220 <ISO9660::openDir(char const*, void**)+0xd0>
c001d163:	85 f6                	test   esi,esi
c001d165:	0f 84 b5 00 00 00    	je     c001d220 <ISO9660::openDir(char const*, void**)+0xd0>
c001d16b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d16d:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001d174:	38 15 c0 ec 02 c0    	cmp    BYTE PTR ds:0xc002ecc0,dl
c001d17a:	74 1b                	je     c001d197 <ISO9660::openDir(char const*, void**)+0x47>
c001d17c:	85 c0                	test   eax,eax
c001d17e:	74 10                	je     c001d190 <ISO9660::openDir(char const*, void**)+0x40>
c001d180:	83 ec 0c             	sub    esp,0xc
c001d183:	68 1d 59 02 c0       	push   0xc002591d
c001d188:	e8 67 2b ff ff       	call   c000fcf4 <KePanic(char const*)>
c001d18d:	83 c4 10             	add    esp,0x10
c001d190:	8a 03                	mov    al,BYTE PTR [ebx]
c001d192:	a2 c0 ec 02 c0       	mov    ds:0xc002ecc0,al
c001d197:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d19a:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001d1a1:	85 c0                	test   eax,eax
c001d1a3:	74 10                	je     c001d1b5 <ISO9660::openDir(char const*, void**)+0x65>
c001d1a5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d1ac:	74 1a                	je     c001d1c8 <ISO9660::openDir(char const*, void**)+0x78>
c001d1ae:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d1b5:	83 ec 0c             	sub    esp,0xc
c001d1b8:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001d1bf:	50                   	push   eax
c001d1c0:	e8 69 9a fe ff       	call   c0006c2e <init_percd>
c001d1c5:	83 c4 10             	add    esp,0x10
c001d1c8:	83 c3 03             	add    ebx,0x3
c001d1cb:	50                   	push   eax
c001d1cc:	50                   	push   eax
c001d1cd:	6a 01                	push   0x1
c001d1cf:	53                   	push   ebx
c001d1d0:	e8 20 95 fe ff       	call   c00066f5 <iso_open>
c001d1d5:	83 c4 10             	add    esp,0x10
c001d1d8:	89 c3                	mov    ebx,eax
c001d1da:	83 f8 ff             	cmp    eax,0xffffffff
c001d1dd:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001d1e2:	75 1c                	jne    c001d200 <ISO9660::openDir(char const*, void**)+0xb0>
c001d1e4:	53                   	push   ebx
c001d1e5:	53                   	push   ebx
c001d1e6:	68 c5 59 02 c0       	push   0xc00259c5
c001d1eb:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d1f1:	e8 06 55 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001d1f6:	83 c4 10             	add    esp,0x10
c001d1f9:	b8 01 00 00 00       	mov    eax,0x1
c001d1fe:	eb 25                	jmp    c001d225 <ISO9660::openDir(char const*, void**)+0xd5>
c001d200:	01 db                	add    ebx,ebx
c001d202:	51                   	push   ecx
c001d203:	83 c3 65             	add    ebx,0x65
c001d206:	51                   	push   ecx
c001d207:	68 d8 59 02 c0       	push   0xc00259d8
c001d20c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d212:	e8 e5 54 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001d217:	89 1e                	mov    DWORD PTR [esi],ebx
c001d219:	83 c4 10             	add    esp,0x10
c001d21c:	31 c0                	xor    eax,eax
c001d21e:	eb 05                	jmp    c001d225 <ISO9660::openDir(char const*, void**)+0xd5>
c001d220:	b8 04 00 00 00       	mov    eax,0x4
c001d225:	5a                   	pop    edx
c001d226:	5b                   	pop    ebx
c001d227:	5e                   	pop    esi
c001d228:	c3                   	ret    
c001d229:	90                   	nop

c001d22a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d22a:	55                   	push   ebp
c001d22b:	57                   	push   edi
c001d22c:	56                   	push   esi
c001d22d:	53                   	push   ebx
c001d22e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d234:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d23b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d242:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001d24a:	0f 84 e7 00 00 00    	je     c001d337 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d250:	85 db                	test   ebx,ebx
c001d252:	0f 84 df 00 00 00    	je     c001d337 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d258:	83 ec 0c             	sub    esp,0xc
c001d25b:	68 eb 59 02 c0       	push   0xc00259eb
c001d260:	e8 17 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d265:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d26c:	b9 02 00 00 00       	mov    ecx,0x2
c001d271:	99                   	cdq    
c001d272:	f7 f9                	idiv   ecx
c001d274:	83 e8 32             	sub    eax,0x32
c001d277:	89 04 24             	mov    DWORD PTR [esp],eax
c001d27a:	e8 3b 97 fe ff       	call   c00069ba <iso_readdir>
c001d27f:	83 c4 10             	add    esp,0x10
c001d282:	89 c6                	mov    esi,eax
c001d284:	85 c0                	test   eax,eax
c001d286:	75 37                	jne    c001d2bf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001d288:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001d28d:	56                   	push   esi
c001d28e:	56                   	push   esi
c001d28f:	68 f6 59 02 c0       	push   0xc00259f6
c001d294:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d29a:	e8 5d 54 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001d29f:	83 c4 0c             	add    esp,0xc
c001d2a2:	68 10 01 00 00       	push   0x110
c001d2a7:	6a 00                	push   0x0
c001d2a9:	57                   	push   edi
c001d2aa:	e8 41 32 fe ff       	call   c00004f0 <memset>
c001d2af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d2b5:	83 c4 10             	add    esp,0x10
c001d2b8:	b8 01 00 00 00       	mov    eax,0x1
c001d2bd:	eb 7d                	jmp    c001d33c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d2bf:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d2c5:	8d 68 08             	lea    ebp,[eax+0x8]
c001d2c8:	83 ec 0c             	sub    esp,0xc
c001d2cb:	55                   	push   ebp
c001d2cc:	e8 9f 32 fe ff       	call   c0000570 <strlen>
c001d2d1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d2d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2dd:	83 c4 10             	add    esp,0x10
c001d2e0:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001d2e4:	75 0a                	jne    c001d2f0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001d2e6:	b8 02 00 00 00       	mov    eax,0x2
c001d2eb:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001d2ee:	74 05                	je     c001d2f5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001d2f0:	b8 01 00 00 00       	mov    eax,0x1
c001d2f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2f9:	50                   	push   eax
c001d2fa:	50                   	push   eax
c001d2fb:	55                   	push   ebp
c001d2fc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d300:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d304:	50                   	push   eax
c001d305:	e8 36 33 fe ff       	call   c0000640 <strcpy>
c001d30a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d311:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d313:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001d319:	5a                   	pop    edx
c001d31a:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001d31f:	59                   	pop    ecx
c001d320:	68 09 5a 02 c0       	push   0xc0025a09
c001d325:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d32b:	e8 cc 53 ff ff       	call   c00126fc <VgaText::puts(char const*)>
c001d330:	83 c4 10             	add    esp,0x10
c001d333:	31 c0                	xor    eax,eax
c001d335:	eb 05                	jmp    c001d33c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d337:	b8 04 00 00 00       	mov    eax,0x4
c001d33c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d342:	5b                   	pop    ebx
c001d343:	5e                   	pop    esi
c001d344:	5f                   	pop    edi
c001d345:	5d                   	pop    ebp
c001d346:	c3                   	ret    

c001d347 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d347:	57                   	push   edi
c001d348:	56                   	push   esi
c001d349:	53                   	push   ebx
c001d34a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d34e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d352:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d356:	39 35 c4 ec 02 c0    	cmp    DWORD PTR ds:0xc002ecc4,esi
c001d35c:	0f be cb             	movsx  ecx,bl
c001d35f:	75 0b                	jne    c001d36c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d361:	0f be 05 84 6c 02 c0 	movsx  eax,BYTE PTR ds:0xc0026c84
c001d368:	39 c8                	cmp    eax,ecx
c001d36a:	74 47                	je     c001d3b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d36c:	83 ec 0c             	sub    esp,0xc
c001d36f:	31 d2                	xor    edx,edx
c001d371:	68 e0 ec 02 c0       	push   0xc002ece0
c001d376:	6a 01                	push   0x1
c001d378:	52                   	push   edx
c001d379:	56                   	push   esi
c001d37a:	ff 34 8d dc b9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4624]
c001d381:	e8 22 d7 fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001d386:	83 c4 20             	add    esp,0x20
c001d389:	85 c0                	test   eax,eax
c001d38b:	75 0e                	jne    c001d39b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d38d:	89 35 c4 ec 02 c0    	mov    DWORD PTR ds:0xc002ecc4,esi
c001d393:	88 1d 84 6c 02 c0    	mov    BYTE PTR ds:0xc0026c84,bl
c001d399:	eb 18                	jmp    c001d3b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d39b:	50                   	push   eax
c001d39c:	68 00 08 00 00       	push   0x800
c001d3a1:	6a 00                	push   0x0
c001d3a3:	57                   	push   edi
c001d3a4:	e8 47 31 fe ff       	call   c00004f0 <memset>
c001d3a9:	83 c4 10             	add    esp,0x10
c001d3ac:	b8 01 00 00 00       	mov    eax,0x1
c001d3b1:	eb 0e                	jmp    c001d3c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d3b3:	be e0 ec 02 c0       	mov    esi,0xc002ece0
c001d3b8:	b9 00 08 00 00       	mov    ecx,0x800
c001d3bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d3bf:	31 c0                	xor    eax,eax
c001d3c1:	5b                   	pop    ebx
c001d3c2:	5e                   	pop    esi
c001d3c3:	5f                   	pop    edi
c001d3c4:	c3                   	ret    
c001d3c5:	90                   	nop

c001d3c6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001d3c6:	53                   	push   ebx
c001d3c7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d3cd:	c7 05 c4 ec 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002ecc4,0xdeadbeef
c001d3d7:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d3de:	8d 58 41             	lea    ebx,[eax+0x41]
c001d3e1:	0f be db             	movsx  ebx,bl
c001d3e4:	53                   	push   ebx
c001d3e5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d3e9:	50                   	push   eax
c001d3ea:	6a 10                	push   0x10
c001d3ec:	e8 56 ff ff ff       	call   c001d347 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d3f1:	83 c4 10             	add    esp,0x10
c001d3f4:	31 d2                	xor    edx,edx
c001d3f6:	85 c0                	test   eax,eax
c001d3f8:	75 33                	jne    c001d42d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d3fa:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d3ff:	75 2c                	jne    c001d42d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d401:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d406:	75 25                	jne    c001d42d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d408:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d40d:	75 1e                	jne    c001d42d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d40f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d414:	75 17                	jne    c001d42d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d416:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d41b:	75 10                	jne    c001d42d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d41d:	83 ec 0c             	sub    esp,0xc
c001d420:	53                   	push   ebx
c001d421:	e8 08 98 fe ff       	call   c0006c2e <init_percd>
c001d426:	83 c4 10             	add    esp,0x10
c001d429:	40                   	inc    eax
c001d42a:	0f 95 c2             	setne  dl
c001d42d:	88 d0                	mov    al,dl
c001d42f:	81 c4 08 08 00 00    	add    esp,0x808
c001d435:	5b                   	pop    ebx
c001d436:	c3                   	ret    
c001d437:	90                   	nop

c001d438 <ISO9660::ISO9660()>:
c001d438:	83 ec 0c             	sub    esp,0xc
c001d43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d43f:	83 ec 0c             	sub    esp,0xc
c001d442:	50                   	push   eax
c001d443:	e8 80 a9 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001d448:	83 c4 10             	add    esp,0x10
c001d44b:	ba 24 5a 02 c0       	mov    edx,0xc0025a24
c001d450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d454:	89 10                	mov    DWORD PTR [eax],edx
c001d456:	e8 e5 98 fe ff       	call   c0006d40 <fs_iso9660_init>
c001d45b:	90                   	nop
c001d45c:	83 c4 0c             	add    esp,0xc
c001d45f:	c3                   	ret    

c001d460 <SoundCard::beginPlayback()>:
c001d460:	c7 44 24 04 88 5a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025a88
c001d468:	e9 87 28 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001d46d:	90                   	nop

c001d46e <SoundCard::stopPlayback()>:
c001d46e:	c7 44 24 04 88 5a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025a88
c001d476:	e9 79 28 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001d47b:	90                   	nop

c001d47c <SoundCard::SoundCard(char const*)>:
c001d47c:	83 ec 1c             	sub    esp,0x1c
c001d47f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d483:	83 ec 08             	sub    esp,0x8
c001d486:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d48a:	50                   	push   eax
c001d48b:	e8 26 c7 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001d490:	83 c4 10             	add    esp,0x10
c001d493:	ba d4 5a 02 c0       	mov    edx,0xc0025ad4
c001d498:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d49c:	89 10                	mov    DWORD PTR [eax],edx
c001d49e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d4a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ad:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d4b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4bb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d4c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4c9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d4d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4d7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d4e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d4e9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d4ee:	7f 1a                	jg     c001d50a <SoundCard::SoundCard(char const*)+0x8e>
c001d4f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d4f8:	83 c2 54             	add    edx,0x54
c001d4fb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d503:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d508:	eb df                	jmp    c001d4e9 <SoundCard::SoundCard(char const*)+0x6d>
c001d50a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d50e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d515:	90                   	nop
c001d516:	83 c4 1c             	add    esp,0x1c
c001d519:	c3                   	ret    

c001d51a <SoundCard::~SoundCard()>:
c001d51a:	83 ec 0c             	sub    esp,0xc
c001d51d:	ba d4 5a 02 c0       	mov    edx,0xc0025ad4
c001d522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d526:	89 10                	mov    DWORD PTR [eax],edx
c001d528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d52c:	83 ec 0c             	sub    esp,0xc
c001d52f:	50                   	push   eax
c001d530:	e8 21 c4 fe ff       	call   c0009956 <Device::~Device()>
c001d535:	83 c4 10             	add    esp,0x10
c001d538:	90                   	nop
c001d539:	83 c4 0c             	add    esp,0xc
c001d53c:	c3                   	ret    
c001d53d:	90                   	nop

c001d53e <SoundCard::~SoundCard()>:
c001d53e:	83 ec 0c             	sub    esp,0xc
c001d541:	83 ec 0c             	sub    esp,0xc
c001d544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d548:	e8 cd ff ff ff       	call   c001d51a <SoundCard::~SoundCard()>
c001d54d:	83 c4 10             	add    esp,0x10
c001d550:	83 ec 08             	sub    esp,0x8
c001d553:	68 e8 01 00 00       	push   0x1e8
c001d558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d55c:	e8 4f fe fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c001d561:	83 c4 10             	add    esp,0x10
c001d564:	83 c4 0c             	add    esp,0xc
c001d567:	c3                   	ret    

c001d568 <SoundCard::configureRates(int, int, int)>:
c001d568:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d56c:	31 c0                	xor    eax,eax
c001d56e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d575:	75 20                	jne    c001d597 <SoundCard::configureRates(int, int, int)+0x2f>
c001d577:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d57b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d585:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d58f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d595:	b0 01                	mov    al,0x1
c001d597:	c3                   	ret    

c001d598 <SoundCard::getSamples16(int, short*)>:
c001d598:	55                   	push   ebp
c001d599:	57                   	push   edi
c001d59a:	31 ff                	xor    edi,edi
c001d59c:	56                   	push   esi
c001d59d:	53                   	push   ebx
c001d59e:	31 db                	xor    ebx,ebx
c001d5a0:	83 ec 10             	sub    esp,0x10
c001d5a3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d5a7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d5ab:	8d 04 36             	lea    eax,[esi+esi*1]
c001d5ae:	50                   	push   eax
c001d5af:	6a 00                	push   0x0
c001d5b1:	55                   	push   ebp
c001d5b2:	e8 39 2f fe ff       	call   c00004f0 <memset>
c001d5b7:	83 c4 10             	add    esp,0x10
c001d5ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5be:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d5c5:	85 c0                	test   eax,eax
c001d5c7:	74 1b                	je     c001d5e4 <SoundCard::getSamples16(int, short*)+0x4c>
c001d5c9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d5cd:	75 15                	jne    c001d5e4 <SoundCard::getSamples16(int, short*)+0x4c>
c001d5cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d5d3:	55                   	push   ebp
c001d5d4:	56                   	push   esi
c001d5d5:	50                   	push   eax
c001d5d6:	e8 8d 03 00 00       	call   c001d968 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d5db:	83 c4 10             	add    esp,0x10
c001d5de:	39 c7                	cmp    edi,eax
c001d5e0:	7d 02                	jge    c001d5e4 <SoundCard::getSamples16(int, short*)+0x4c>
c001d5e2:	89 c7                	mov    edi,eax
c001d5e4:	43                   	inc    ebx
c001d5e5:	83 fb 20             	cmp    ebx,0x20
c001d5e8:	75 d0                	jne    c001d5ba <SoundCard::getSamples16(int, short*)+0x22>
c001d5ea:	83 c4 0c             	add    esp,0xc
c001d5ed:	89 f8                	mov    eax,edi
c001d5ef:	5b                   	pop    ebx
c001d5f0:	5e                   	pop    esi
c001d5f1:	5f                   	pop    edi
c001d5f2:	5d                   	pop    ebp
c001d5f3:	c3                   	ret    

c001d5f4 <SoundCard::getSamples32(int, int*)>:
c001d5f4:	55                   	push   ebp
c001d5f5:	57                   	push   edi
c001d5f6:	31 ff                	xor    edi,edi
c001d5f8:	56                   	push   esi
c001d5f9:	31 f6                	xor    esi,esi
c001d5fb:	53                   	push   ebx
c001d5fc:	83 ec 10             	sub    esp,0x10
c001d5ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d603:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d607:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d60b:	c1 e0 02             	shl    eax,0x2
c001d60e:	50                   	push   eax
c001d60f:	6a 00                	push   0x0
c001d611:	55                   	push   ebp
c001d612:	e8 d9 2e fe ff       	call   c00004f0 <memset>
c001d617:	83 c4 10             	add    esp,0x10
c001d61a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d621:	85 c0                	test   eax,eax
c001d623:	74 1b                	je     c001d640 <SoundCard::getSamples32(int, int*)+0x4c>
c001d625:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d629:	75 15                	jne    c001d640 <SoundCard::getSamples32(int, int*)+0x4c>
c001d62b:	53                   	push   ebx
c001d62c:	55                   	push   ebp
c001d62d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d631:	50                   	push   eax
c001d632:	e8 fd 03 00 00       	call   c001da34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d637:	83 c4 10             	add    esp,0x10
c001d63a:	39 c6                	cmp    esi,eax
c001d63c:	7d 02                	jge    c001d640 <SoundCard::getSamples32(int, int*)+0x4c>
c001d63e:	89 c6                	mov    esi,eax
c001d640:	47                   	inc    edi
c001d641:	83 ff 20             	cmp    edi,0x20
c001d644:	75 d4                	jne    c001d61a <SoundCard::getSamples32(int, int*)+0x26>
c001d646:	85 f6                	test   esi,esi
c001d648:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d64f:	75 0f                	jne    c001d660 <SoundCard::getSamples32(int, int*)+0x6c>
c001d651:	85 c0                	test   eax,eax
c001d653:	74 1b                	je     c001d670 <SoundCard::getSamples32(int, int*)+0x7c>
c001d655:	83 ec 0c             	sub    esp,0xc
c001d658:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d65a:	53                   	push   ebx
c001d65b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d65e:	eb 0d                	jmp    c001d66d <SoundCard::getSamples32(int, int*)+0x79>
c001d660:	85 c0                	test   eax,eax
c001d662:	75 0c                	jne    c001d670 <SoundCard::getSamples32(int, int*)+0x7c>
c001d664:	83 ec 0c             	sub    esp,0xc
c001d667:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d669:	53                   	push   ebx
c001d66a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d66d:	83 c4 10             	add    esp,0x10
c001d670:	83 c4 0c             	add    esp,0xc
c001d673:	89 f0                	mov    eax,esi
c001d675:	5b                   	pop    ebx
c001d676:	5e                   	pop    esi
c001d677:	5f                   	pop    edi
c001d678:	5d                   	pop    ebp
c001d679:	c3                   	ret    

c001d67a <SoundCard::addChannel(SoundPort*)>:
c001d67a:	83 ec 0c             	sub    esp,0xc
c001d67d:	31 c0                	xor    eax,eax
c001d67f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d683:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d68b:	74 1b                	je     c001d6a8 <SoundCard::addChannel(SoundPort*)+0x2e>
c001d68d:	40                   	inc    eax
c001d68e:	83 f8 20             	cmp    eax,0x20
c001d691:	75 f0                	jne    c001d683 <SoundCard::addChannel(SoundPort*)+0x9>
c001d693:	83 ec 0c             	sub    esp,0xc
c001d696:	68 ad 5a 02 c0       	push   0xc0025aad
c001d69b:	e8 54 26 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001d6a0:	83 c4 10             	add    esp,0x10
c001d6a3:	83 c8 ff             	or     eax,0xffffffff
c001d6a6:	eb 0b                	jmp    c001d6b3 <SoundCard::addChannel(SoundPort*)+0x39>
c001d6a8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d6ac:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d6b3:	83 c4 0c             	add    esp,0xc
c001d6b6:	c3                   	ret    
c001d6b7:	90                   	nop

c001d6b8 <SoundCard::removeChannel(int)>:
c001d6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d6c0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d6cb:	c3                   	ret    

c001d6cc <SoundPort::SoundPort(int, int, int, int)>:
c001d6cc:	83 ec 0c             	sub    esp,0xc
c001d6cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6d3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6de:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d6ea:	89 10                	mov    DWORD PTR [eax],edx
c001d6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d6f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6fb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d6ff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d702:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d707:	75 13                	jne    c001d71c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d70d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d70f:	05 a0 0f 00 00       	add    eax,0xfa0
c001d714:	01 c0                	add    eax,eax
c001d716:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d71a:	66 90                	xchg   ax,ax
c001d71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d720:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d724:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d72b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d736:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d739:	c1 e0 02             	shl    eax,0x2
c001d73c:	83 ec 0c             	sub    esp,0xc
c001d73f:	50                   	push   eax
c001d740:	e8 52 21 ff ff       	call   c000f897 <malloc>
c001d745:	83 c4 10             	add    esp,0x10
c001d748:	89 c2                	mov    edx,eax
c001d74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d74e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d751:	90                   	nop
c001d752:	83 c4 0c             	add    esp,0xc
c001d755:	c3                   	ret    
c001d756:	66 90                	xchg   ax,ax

c001d758 <SoundPort::~SoundPort()>:
c001d758:	83 ec 0c             	sub    esp,0xc
c001d75b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d75f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d762:	85 c0                	test   eax,eax
c001d764:	74 1e                	je     c001d784 <SoundPort::~SoundPort()+0x2c>
c001d766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d76a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d76d:	83 ec 0c             	sub    esp,0xc
c001d770:	50                   	push   eax
c001d771:	e8 31 21 ff ff       	call   c000f8a7 <free>
c001d776:	83 c4 10             	add    esp,0x10
c001d779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d77d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d784:	90                   	nop
c001d785:	83 c4 0c             	add    esp,0xc
c001d788:	c3                   	ret    
c001d789:	90                   	nop
c001d78a:	66 90                	xchg   ax,ax

c001d78c <SoundPort::unpause()>:
c001d78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d790:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d794:	c3                   	ret    
c001d795:	90                   	nop
c001d796:	66 90                	xchg   ax,ax

c001d798 <SoundPort::pause()>:
c001d798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d79c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d7a0:	c3                   	ret    
c001d7a1:	90                   	nop
c001d7a2:	66 90                	xchg   ax,ax

c001d7a4 <SoundPort::getBufferUsed()>:
c001d7a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d7ab:	c3                   	ret    

c001d7ac <SoundPort::getBufferSize()>:
c001d7ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d7b3:	c3                   	ret    

c001d7b4 <SoundPort::buffer8(signed char*, int)>:
c001d7b4:	55                   	push   ebp
c001d7b5:	57                   	push   edi
c001d7b6:	56                   	push   esi
c001d7b7:	53                   	push   ebx
c001d7b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d7bc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d7c0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d7c3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d7c6:	74 70                	je     c001d838 <SoundPort::buffer8(signed char*, int)+0x84>
c001d7c8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7cc:	85 c9                	test   ecx,ecx
c001d7ce:	7e 68                	jle    c001d838 <SoundPort::buffer8(signed char*, int)+0x84>
c001d7d0:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d7d4:	8d 48 01             	lea    ecx,[eax+0x1]
c001d7d7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d7da:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d7dd:	89 f1                	mov    ecx,esi
c001d7df:	c1 e1 18             	shl    ecx,0x18
c001d7e2:	29 f1                	sub    ecx,esi
c001d7e4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d7e7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d7ea:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d7ed:	74 51                	je     c001d840 <SoundPort::buffer8(signed char*, int)+0x8c>
c001d7ef:	31 ff                	xor    edi,edi
c001d7f1:	eb 25                	jmp    c001d818 <SoundPort::buffer8(signed char*, int)+0x64>
c001d7f3:	90                   	nop
c001d7f4:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d7f9:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d7fc:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d7ff:	89 f3                	mov    ebx,esi
c001d801:	c1 e3 18             	shl    ebx,0x18
c001d804:	29 f3                	sub    ebx,esi
c001d806:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d809:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d80c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d80f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d812:	74 1c                	je     c001d830 <SoundPort::buffer8(signed char*, int)+0x7c>
c001d814:	89 c7                	mov    edi,eax
c001d816:	66 90                	xchg   ax,ax
c001d818:	8d 47 01             	lea    eax,[edi+0x1]
c001d81b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d81f:	75 d3                	jne    c001d7f4 <SoundPort::buffer8(signed char*, int)+0x40>
c001d821:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d825:	8d 76 00             	lea    esi,[esi+0x0]
c001d828:	5b                   	pop    ebx
c001d829:	5e                   	pop    esi
c001d82a:	5f                   	pop    edi
c001d82b:	5d                   	pop    ebp
c001d82c:	c3                   	ret    
c001d82d:	8d 76 00             	lea    esi,[esi+0x0]
c001d830:	5b                   	pop    ebx
c001d831:	8d 47 02             	lea    eax,[edi+0x2]
c001d834:	5e                   	pop    esi
c001d835:	5f                   	pop    edi
c001d836:	5d                   	pop    ebp
c001d837:	c3                   	ret    
c001d838:	5b                   	pop    ebx
c001d839:	31 c0                	xor    eax,eax
c001d83b:	5e                   	pop    esi
c001d83c:	5f                   	pop    edi
c001d83d:	5d                   	pop    ebp
c001d83e:	c3                   	ret    
c001d83f:	90                   	nop
c001d840:	b8 01 00 00 00       	mov    eax,0x1
c001d845:	eb e1                	jmp    c001d828 <SoundPort::buffer8(signed char*, int)+0x74>
c001d847:	90                   	nop

c001d848 <SoundPort::buffer16(short*, int)>:
c001d848:	55                   	push   ebp
c001d849:	57                   	push   edi
c001d84a:	56                   	push   esi
c001d84b:	53                   	push   ebx
c001d84c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d850:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d854:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d857:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d85a:	74 70                	je     c001d8cc <SoundPort::buffer16(short*, int)+0x84>
c001d85c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d860:	85 c9                	test   ecx,ecx
c001d862:	7e 68                	jle    c001d8cc <SoundPort::buffer16(short*, int)+0x84>
c001d864:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001d868:	8d 48 01             	lea    ecx,[eax+0x1]
c001d86b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d86e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d871:	89 f1                	mov    ecx,esi
c001d873:	c1 e1 10             	shl    ecx,0x10
c001d876:	29 f1                	sub    ecx,esi
c001d878:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d87b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d87e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d881:	74 51                	je     c001d8d4 <SoundPort::buffer16(short*, int)+0x8c>
c001d883:	31 ff                	xor    edi,edi
c001d885:	eb 25                	jmp    c001d8ac <SoundPort::buffer16(short*, int)+0x64>
c001d887:	90                   	nop
c001d888:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001d88d:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d890:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d893:	89 f3                	mov    ebx,esi
c001d895:	c1 e3 10             	shl    ebx,0x10
c001d898:	29 f3                	sub    ebx,esi
c001d89a:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d89d:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d8a0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d8a3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d8a6:	74 1c                	je     c001d8c4 <SoundPort::buffer16(short*, int)+0x7c>
c001d8a8:	89 c7                	mov    edi,eax
c001d8aa:	66 90                	xchg   ax,ax
c001d8ac:	8d 47 01             	lea    eax,[edi+0x1]
c001d8af:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d8b3:	75 d3                	jne    c001d888 <SoundPort::buffer16(short*, int)+0x40>
c001d8b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d8bc:	5b                   	pop    ebx
c001d8bd:	5e                   	pop    esi
c001d8be:	5f                   	pop    edi
c001d8bf:	5d                   	pop    ebp
c001d8c0:	c3                   	ret    
c001d8c1:	8d 76 00             	lea    esi,[esi+0x0]
c001d8c4:	5b                   	pop    ebx
c001d8c5:	8d 47 02             	lea    eax,[edi+0x2]
c001d8c8:	5e                   	pop    esi
c001d8c9:	5f                   	pop    edi
c001d8ca:	5d                   	pop    ebp
c001d8cb:	c3                   	ret    
c001d8cc:	5b                   	pop    ebx
c001d8cd:	31 c0                	xor    eax,eax
c001d8cf:	5e                   	pop    esi
c001d8d0:	5f                   	pop    edi
c001d8d1:	5d                   	pop    ebp
c001d8d2:	c3                   	ret    
c001d8d3:	90                   	nop
c001d8d4:	b8 01 00 00 00       	mov    eax,0x1
c001d8d9:	eb e1                	jmp    c001d8bc <SoundPort::buffer16(short*, int)+0x74>
c001d8db:	90                   	nop

c001d8dc <SoundPort::buffer32(int*, int)>:
c001d8dc:	55                   	push   ebp
c001d8dd:	57                   	push   edi
c001d8de:	56                   	push   esi
c001d8df:	53                   	push   ebx
c001d8e0:	83 ec 04             	sub    esp,0x4
c001d8e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d8e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8eb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d8ee:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d8f2:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8f5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d8f8:	74 5a                	je     c001d954 <SoundPort::buffer32(int*, int)+0x78>
c001d8fa:	85 c0                	test   eax,eax
c001d8fc:	7e 56                	jle    c001d954 <SoundPort::buffer32(int*, int)+0x78>
c001d8fe:	8d 71 01             	lea    esi,[ecx+0x1]
c001d901:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d904:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d907:	8b 37                	mov    esi,DWORD PTR [edi]
c001d909:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d90c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d90f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d912:	74 4c                	je     c001d960 <SoundPort::buffer32(int*, int)+0x84>
c001d914:	31 f6                	xor    esi,esi
c001d916:	eb 1c                	jmp    c001d934 <SoundPort::buffer32(int*, int)+0x58>
c001d918:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d91b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d91e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d921:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d924:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d928:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d92b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d92e:	74 18                	je     c001d948 <SoundPort::buffer32(int*, int)+0x6c>
c001d930:	89 de                	mov    esi,ebx
c001d932:	66 90                	xchg   ax,ax
c001d934:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d937:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001d93a:	75 dc                	jne    c001d918 <SoundPort::buffer32(int*, int)+0x3c>
c001d93c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d93f:	90                   	nop
c001d940:	83 c4 04             	add    esp,0x4
c001d943:	5b                   	pop    ebx
c001d944:	5e                   	pop    esi
c001d945:	5f                   	pop    edi
c001d946:	5d                   	pop    ebp
c001d947:	c3                   	ret    
c001d948:	83 c4 04             	add    esp,0x4
c001d94b:	8d 46 02             	lea    eax,[esi+0x2]
c001d94e:	5b                   	pop    ebx
c001d94f:	5e                   	pop    esi
c001d950:	5f                   	pop    edi
c001d951:	5d                   	pop    ebp
c001d952:	c3                   	ret    
c001d953:	90                   	nop
c001d954:	83 c4 04             	add    esp,0x4
c001d957:	31 c0                	xor    eax,eax
c001d959:	5b                   	pop    ebx
c001d95a:	5e                   	pop    esi
c001d95b:	5f                   	pop    edi
c001d95c:	5d                   	pop    ebp
c001d95d:	c3                   	ret    
c001d95e:	66 90                	xchg   ax,ax
c001d960:	b8 01 00 00 00       	mov    eax,0x1
c001d965:	eb d9                	jmp    c001d940 <SoundPort::buffer32(int*, int)+0x64>
c001d967:	90                   	nop

c001d968 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d968:	57                   	push   edi
c001d969:	56                   	push   esi
c001d96a:	53                   	push   ebx
c001d96b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d96f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d973:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d979:	39 03                	cmp    DWORD PTR [ebx],eax
c001d97b:	74 13                	je     c001d990 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d97d:	83 ec 0c             	sub    esp,0xc
c001d980:	68 00 5b 02 c0       	push   0xc0025b00
c001d985:	e8 6a 23 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001d98a:	83 c4 10             	add    esp,0x10
c001d98d:	8d 76 00             	lea    esi,[esi+0x0]
c001d990:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d996:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d999:	74 11                	je     c001d9ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d99b:	83 ec 0c             	sub    esp,0xc
c001d99e:	68 3f 5b 02 c0       	push   0xc0025b3f
c001d9a3:	e8 4c 23 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001d9a8:	83 c4 10             	add    esp,0x10
c001d9ab:	90                   	nop
c001d9ac:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d9b2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d9b5:	74 11                	je     c001d9c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d9b7:	83 ec 0c             	sub    esp,0xc
c001d9ba:	68 3f 5b 02 c0       	push   0xc0025b3f
c001d9bf:	e8 30 23 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001d9c4:	83 c4 10             	add    esp,0x10
c001d9c7:	90                   	nop
c001d9c8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001d9cb:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001d9cf:	7e 07                	jle    c001d9d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d9d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9d5:	8d 76 00             	lea    esi,[esi+0x0]
c001d9d8:	85 f6                	test   esi,esi
c001d9da:	7e 2c                	jle    c001da08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001d9dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d9e0:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d9e3:	31 c9                	xor    ecx,ecx
c001d9e5:	01 d7                	add    edi,edx
c001d9e7:	90                   	nop
c001d9e8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d9eb:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d9ee:	85 c0                	test   eax,eax
c001d9f0:	79 06                	jns    c001d9f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d9f2:	05 ff 7f 00 00       	add    eax,0x7fff
c001d9f7:	90                   	nop
c001d9f8:	c1 f8 0f             	sar    eax,0xf
c001d9fb:	83 c1 04             	add    ecx,0x4
c001d9fe:	66 01 02             	add    WORD PTR [edx],ax
c001da01:	83 c2 02             	add    edx,0x2
c001da04:	39 d7                	cmp    edi,edx
c001da06:	75 e0                	jne    c001d9e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001da08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001da0b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001da0e:	83 ec 04             	sub    esp,0x4
c001da11:	29 f0                	sub    eax,esi
c001da13:	c1 e0 02             	shl    eax,0x2
c001da16:	50                   	push   eax
c001da17:	8d 04 b2             	lea    eax,[edx+esi*4]
c001da1a:	50                   	push   eax
c001da1b:	52                   	push   edx
c001da1c:	e8 af 29 fe ff       	call   c00003d0 <memmove>
c001da21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001da24:	83 c4 10             	add    esp,0x10
c001da27:	29 f0                	sub    eax,esi
c001da29:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001da2c:	89 f0                	mov    eax,esi
c001da2e:	5b                   	pop    ebx
c001da2f:	5e                   	pop    esi
c001da30:	5f                   	pop    edi
c001da31:	c3                   	ret    
c001da32:	66 90                	xchg   ax,ax

c001da34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001da34:	57                   	push   edi
c001da35:	56                   	push   esi
c001da36:	53                   	push   ebx
c001da37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da3b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001da3f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001da43:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001da49:	39 06                	cmp    DWORD PTR [esi],eax
c001da4b:	74 13                	je     c001da60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001da4d:	83 ec 0c             	sub    esp,0xc
c001da50:	68 20 5b 02 c0       	push   0xc0025b20
c001da55:	e8 9a 22 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001da5a:	83 c4 10             	add    esp,0x10
c001da5d:	8d 76 00             	lea    esi,[esi+0x0]
c001da60:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001da66:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001da69:	74 11                	je     c001da7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001da6b:	83 ec 0c             	sub    esp,0xc
c001da6e:	68 5b 5b 02 c0       	push   0xc0025b5b
c001da73:	e8 7c 22 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001da78:	83 c4 10             	add    esp,0x10
c001da7b:	90                   	nop
c001da7c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001da82:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001da85:	74 11                	je     c001da98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001da87:	83 ec 0c             	sub    esp,0xc
c001da8a:	68 5b 5b 02 c0       	push   0xc0025b5b
c001da8f:	e8 60 22 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001da94:	83 c4 10             	add    esp,0x10
c001da97:	90                   	nop
c001da98:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001da9b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001da9f:	7e 07                	jle    c001daa8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001daa1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001daa5:	8d 76 00             	lea    esi,[esi+0x0]
c001daa8:	85 ff                	test   edi,edi
c001daaa:	7e 1c                	jle    c001dac8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001daac:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001dab3:	31 c0                	xor    eax,eax
c001dab5:	8d 76 00             	lea    esi,[esi+0x0]
c001dab8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001dabb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001dabe:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001dac1:	83 c0 04             	add    eax,0x4
c001dac4:	39 c1                	cmp    ecx,eax
c001dac6:	75 f0                	jne    c001dab8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001dac8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001dacb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001dace:	83 ec 04             	sub    esp,0x4
c001dad1:	29 f8                	sub    eax,edi
c001dad3:	c1 e0 02             	shl    eax,0x2
c001dad6:	50                   	push   eax
c001dad7:	8d 04 ba             	lea    eax,[edx+edi*4]
c001dada:	50                   	push   eax
c001dadb:	52                   	push   edx
c001dadc:	e8 ef 28 fe ff       	call   c00003d0 <memmove>
c001dae1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001dae4:	83 c4 10             	add    esp,0x10
c001dae7:	29 f8                	sub    eax,edi
c001dae9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001daec:	89 f8                	mov    eax,edi
c001daee:	5b                   	pop    ebx
c001daef:	5e                   	pop    esi
c001daf0:	5f                   	pop    edi
c001daf1:	c3                   	ret    

c001daf2 <PCI::open(int, int, void*)>:
c001daf2:	83 ec 18             	sub    esp,0x18
c001daf5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001daf9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dafd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001db03:	8b 10                	mov    edx,DWORD PTR [eax]
c001db05:	50                   	push   eax
c001db06:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001db09:	31 c0                	xor    eax,eax
c001db0b:	83 c4 1c             	add    esp,0x1c
c001db0e:	c3                   	ret    
c001db0f:	90                   	nop

c001db10 <PCI::close(int, int, void*)>:
c001db10:	31 c0                	xor    eax,eax
c001db12:	c3                   	ret    
c001db13:	90                   	nop

c001db14 <PCI::PCI()>:
c001db14:	83 ec 0c             	sub    esp,0xc
c001db17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db1b:	83 ec 08             	sub    esp,0x8
c001db1e:	68 77 5b 02 c0       	push   0xc0025b77
c001db23:	50                   	push   eax
c001db24:	e8 3b ae fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001db29:	83 c4 10             	add    esp,0x10
c001db2c:	ba 84 5c 02 c0       	mov    edx,0xc0025c84
c001db31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db35:	89 10                	mov    DWORD PTR [eax],edx
c001db37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db3b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001db45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db49:	a3 e0 f4 02 c0       	mov    ds:0xc002f4e0,eax
c001db4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db52:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db58:	0f b6 d0             	movzx  edx,al
c001db5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db5f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001db66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db70:	0f b6 d0             	movzx  edx,al
c001db73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db77:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001db7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db80:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db86:	8d 50 01             	lea    edx,[eax+0x1]
c001db89:	88 d1                	mov    cl,dl
c001db8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db8f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001db95:	0f b6 d0             	movzx  edx,al
c001db98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db9c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dba0:	83 c9 c0             	or     ecx,0xffffffc0
c001dba3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dba7:	90                   	nop
c001dba8:	83 c4 0c             	add    esp,0xc
c001dbab:	c3                   	ret    

c001dbac <PCI::readBAR8(unsigned int, int)>:
c001dbac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dbb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbb4:	f6 c2 01             	test   dl,0x1
c001dbb7:	74 07                	je     c001dbc0 <PCI::readBAR8(unsigned int, int)+0x14>
c001dbb9:	83 e2 fc             	and    edx,0xfffffffc
c001dbbc:	01 c2                	add    edx,eax
c001dbbe:	ec                   	in     al,dx
c001dbbf:	c3                   	ret    
c001dbc0:	83 e2 f0             	and    edx,0xfffffff0
c001dbc3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001dbc6:	c3                   	ret    
c001dbc7:	90                   	nop

c001dbc8 <PCI::readBAR16(unsigned int, int)>:
c001dbc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dbcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbd0:	f6 c2 01             	test   dl,0x1
c001dbd3:	74 08                	je     c001dbdd <PCI::readBAR16(unsigned int, int)+0x15>
c001dbd5:	83 e2 fc             	and    edx,0xfffffffc
c001dbd8:	01 c2                	add    edx,eax
c001dbda:	66 ed                	in     ax,dx
c001dbdc:	c3                   	ret    
c001dbdd:	83 e2 f0             	and    edx,0xfffffff0
c001dbe0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001dbe4:	c3                   	ret    
c001dbe5:	90                   	nop

c001dbe6 <PCI::readBAR32(unsigned int, int)>:
c001dbe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dbea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbee:	f6 c2 01             	test   dl,0x1
c001dbf1:	74 07                	je     c001dbfa <PCI::readBAR32(unsigned int, int)+0x14>
c001dbf3:	83 e2 fc             	and    edx,0xfffffffc
c001dbf6:	01 c2                	add    edx,eax
c001dbf8:	ed                   	in     eax,dx
c001dbf9:	c3                   	ret    
c001dbfa:	83 e2 f0             	and    edx,0xfffffff0
c001dbfd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001dc00:	c3                   	ret    
c001dc01:	90                   	nop

c001dc02 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001dc02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc0e:	f6 c2 01             	test   dl,0x1
c001dc11:	74 07                	je     c001dc1a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dc13:	83 e2 fc             	and    edx,0xfffffffc
c001dc16:	01 ca                	add    edx,ecx
c001dc18:	ee                   	out    dx,al
c001dc19:	c3                   	ret    
c001dc1a:	83 e2 f0             	and    edx,0xfffffff0
c001dc1d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dc20:	c3                   	ret    
c001dc21:	90                   	nop

c001dc22 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001dc22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc2e:	f6 c2 01             	test   dl,0x1
c001dc31:	74 08                	je     c001dc3b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dc33:	83 e2 fc             	and    edx,0xfffffffc
c001dc36:	01 ca                	add    edx,ecx
c001dc38:	66 ef                	out    dx,ax
c001dc3a:	c3                   	ret    
c001dc3b:	83 e2 f0             	and    edx,0xfffffff0
c001dc3e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001dc42:	c3                   	ret    
c001dc43:	90                   	nop

c001dc44 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001dc44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc50:	f6 c2 01             	test   dl,0x1
c001dc53:	74 07                	je     c001dc5c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dc55:	83 e2 fc             	and    edx,0xfffffffc
c001dc58:	01 ca                	add    edx,ecx
c001dc5a:	ef                   	out    dx,eax
c001dc5b:	c3                   	ret    
c001dc5c:	83 e2 f0             	and    edx,0xfffffff0
c001dc5f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dc62:	c3                   	ret    
c001dc63:	90                   	nop

c001dc64 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dc64:	55                   	push   ebp
c001dc65:	57                   	push   edi
c001dc66:	56                   	push   esi
c001dc67:	53                   	push   ebx
c001dc68:	83 ec 0c             	sub    esp,0xc
c001dc6b:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001dc70:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dc74:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dc78:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dc7c:	83 fe 07             	cmp    esi,0x7
c001dc7f:	76 10                	jbe    c001dc91 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001dc81:	83 ec 0c             	sub    esp,0xc
c001dc84:	68 7f 5b 02 c0       	push   0xc0025b7f
c001dc89:	e8 66 20 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001dc8e:	83 c4 10             	add    esp,0x10
c001dc91:	0f b6 db             	movzx  ebx,bl
c001dc94:	83 fb 0f             	cmp    ebx,0xf
c001dc97:	76 10                	jbe    c001dca9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001dc99:	83 ec 0c             	sub    esp,0xc
c001dc9c:	68 af 5b 02 c0       	push   0xc0025baf
c001dca1:	e8 4e 20 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001dca6:	83 c4 10             	add    esp,0x10
c001dca9:	8d 04 36             	lea    eax,[esi+esi*1]
c001dcac:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dcb1:	83 c8 f0             	or     eax,0xfffffff0
c001dcb4:	ee                   	out    dx,al
c001dcb5:	ba fa 0c 00 00       	mov    edx,0xcfa
c001dcba:	89 e8                	mov    eax,ebp
c001dcbc:	ee                   	out    dx,al
c001dcbd:	83 c4 0c             	add    esp,0xc
c001dcc0:	89 d8                	mov    eax,ebx
c001dcc2:	89 f9                	mov    ecx,edi
c001dcc4:	c1 e0 08             	shl    eax,0x8
c001dcc7:	0f b6 d9             	movzx  ebx,cl
c001dcca:	83 e3 fc             	and    ebx,0xfffffffc
c001dccd:	09 d8                	or     eax,ebx
c001dccf:	5b                   	pop    ebx
c001dcd0:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001dcd5:	5e                   	pop    esi
c001dcd6:	5f                   	pop    edi
c001dcd7:	5d                   	pop    ebp
c001dcd8:	c3                   	ret    
c001dcd9:	90                   	nop

c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dcda:	57                   	push   edi
c001dcdb:	56                   	push   esi
c001dcdc:	53                   	push   ebx
c001dcdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dce1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dce5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001dceb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dcef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dcf3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dcf7:	83 ff 01             	cmp    edi,0x1
c001dcfa:	75 3f                	jne    c001dd3b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001dcfc:	89 de                	mov    esi,ebx
c001dcfe:	0f b6 c0             	movzx  eax,al
c001dd01:	81 e6 fc 00 00 00    	and    esi,0xfc
c001dd07:	c1 e0 10             	shl    eax,0x10
c001dd0a:	0f b6 c9             	movzx  ecx,cl
c001dd0d:	09 f0                	or     eax,esi
c001dd0f:	c1 e1 08             	shl    ecx,0x8
c001dd12:	0f b6 d2             	movzx  edx,dl
c001dd15:	09 c8                	or     eax,ecx
c001dd17:	c1 e2 0b             	shl    edx,0xb
c001dd1a:	09 d0                	or     eax,edx
c001dd1c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dd21:	0d 00 00 00 80       	or     eax,0x80000000
c001dd26:	ef                   	out    dx,eax
c001dd27:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dd2c:	ed                   	in     eax,dx
c001dd2d:	83 e3 02             	and    ebx,0x2
c001dd30:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001dd37:	d3 e8                	shr    eax,cl
c001dd39:	eb 44                	jmp    c001dd7f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001dd3b:	83 ff 02             	cmp    edi,0x2
c001dd3e:	75 2d                	jne    c001dd6d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001dd40:	83 ec 0c             	sub    esp,0xc
c001dd43:	0f b6 c9             	movzx  ecx,cl
c001dd46:	0f b6 d2             	movzx  edx,dl
c001dd49:	0f b6 fb             	movzx  edi,bl
c001dd4c:	0f b6 c0             	movzx  eax,al
c001dd4f:	57                   	push   edi
c001dd50:	51                   	push   ecx
c001dd51:	52                   	push   edx
c001dd52:	50                   	push   eax
c001dd53:	56                   	push   esi
c001dd54:	e8 0b ff ff ff       	call   c001dc64 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd59:	89 c2                	mov    edx,eax
c001dd5b:	ed                   	in     eax,dx
c001dd5c:	83 e3 02             	and    ebx,0x2
c001dd5f:	83 c4 20             	add    esp,0x20
c001dd62:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001dd69:	d3 e8                	shr    eax,cl
c001dd6b:	eb 12                	jmp    c001dd7f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001dd6d:	83 ec 0c             	sub    esp,0xc
c001dd70:	68 df 5b 02 c0       	push   0xc0025bdf
c001dd75:	e8 7a 1f ff ff       	call   c000fcf4 <KePanic(char const*)>
c001dd7a:	83 c4 10             	add    esp,0x10
c001dd7d:	31 c0                	xor    eax,eax
c001dd7f:	5b                   	pop    ebx
c001dd80:	5e                   	pop    esi
c001dd81:	5f                   	pop    edi
c001dd82:	c3                   	ret    
c001dd83:	90                   	nop

c001dd84 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001dd84:	83 ec 18             	sub    esp,0x18
c001dd87:	6a 00                	push   0x0
c001dd89:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd8e:	50                   	push   eax
c001dd8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd94:	50                   	push   eax
c001dd95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd9a:	50                   	push   eax
c001dd9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd9f:	e8 36 ff ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dda4:	83 c4 2c             	add    esp,0x2c
c001dda7:	c3                   	ret    

c001dda8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001dda8:	83 ec 18             	sub    esp,0x18
c001ddab:	6a 0e                	push   0xe
c001ddad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ddb2:	50                   	push   eax
c001ddb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ddb8:	50                   	push   eax
c001ddb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ddbe:	50                   	push   eax
c001ddbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ddc3:	e8 12 ff ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddc8:	83 c4 2c             	add    esp,0x2c
c001ddcb:	0f b6 c0             	movzx  eax,al
c001ddce:	c3                   	ret    
c001ddcf:	90                   	nop

c001ddd0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ddd0:	55                   	push   ebp
c001ddd1:	57                   	push   edi
c001ddd2:	56                   	push   esi
c001ddd3:	53                   	push   ebx
c001ddd4:	83 ec 18             	sub    esp,0x18
c001ddd7:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001dddc:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001dde1:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001dde6:	6a 0a                	push   0xa
c001dde8:	56                   	push   esi
c001dde9:	55                   	push   ebp
c001ddea:	57                   	push   edi
c001ddeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddef:	e8 e6 fe ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddf4:	83 c4 14             	add    esp,0x14
c001ddf7:	89 c3                	mov    ebx,eax
c001ddf9:	6a 0a                	push   0xa
c001ddfb:	0f b6 db             	movzx  ebx,bl
c001ddfe:	56                   	push   esi
c001ddff:	55                   	push   ebp
c001de00:	57                   	push   edi
c001de01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de05:	e8 d0 fe ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de0a:	83 c4 2c             	add    esp,0x2c
c001de0d:	25 00 ff 00 00       	and    eax,0xff00
c001de12:	09 d8                	or     eax,ebx
c001de14:	5b                   	pop    ebx
c001de15:	5e                   	pop    esi
c001de16:	5f                   	pop    edi
c001de17:	5d                   	pop    ebp
c001de18:	c3                   	ret    
c001de19:	90                   	nop

c001de1a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001de1a:	83 ec 18             	sub    esp,0x18
c001de1d:	6a 08                	push   0x8
c001de1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de24:	50                   	push   eax
c001de25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de2a:	50                   	push   eax
c001de2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de30:	50                   	push   eax
c001de31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de35:	e8 a0 fe ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de3a:	83 c4 2c             	add    esp,0x2c
c001de3d:	0f b6 c4             	movzx  eax,ah
c001de40:	c3                   	ret    
c001de41:	90                   	nop

c001de42 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001de42:	83 ec 18             	sub    esp,0x18
c001de45:	6a 08                	push   0x8
c001de47:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de4c:	50                   	push   eax
c001de4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de52:	50                   	push   eax
c001de53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de58:	50                   	push   eax
c001de59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de5d:	e8 78 fe ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de62:	83 c4 2c             	add    esp,0x2c
c001de65:	c3                   	ret    

c001de66 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001de66:	83 ec 18             	sub    esp,0x18
c001de69:	6a 3c                	push   0x3c
c001de6b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de70:	50                   	push   eax
c001de71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de76:	50                   	push   eax
c001de77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de7c:	50                   	push   eax
c001de7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de81:	e8 54 fe ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de86:	83 c4 2c             	add    esp,0x2c
c001de89:	c3                   	ret    

c001de8a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001de8a:	83 ec 18             	sub    esp,0x18
c001de8d:	6a 18                	push   0x18
c001de8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de94:	50                   	push   eax
c001de95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de9a:	50                   	push   eax
c001de9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dea0:	50                   	push   eax
c001dea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dea5:	e8 30 fe ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001deaa:	83 c4 2c             	add    esp,0x2c
c001dead:	0f b6 c4             	movzx  eax,ah
c001deb0:	c3                   	ret    
c001deb1:	90                   	nop

c001deb2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001deb2:	55                   	push   ebp
c001deb3:	57                   	push   edi
c001deb4:	56                   	push   esi
c001deb5:	53                   	push   ebx
c001deb6:	83 ec 28             	sub    esp,0x28
c001deb9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001debd:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001dec2:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001dec7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001decc:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ded3:	8d 43 12             	lea    eax,[ebx+0x12]
c001ded6:	83 c3 10             	add    ebx,0x10
c001ded9:	0f b6 c0             	movzx  eax,al
c001dedc:	0f b6 db             	movzx  ebx,bl
c001dedf:	50                   	push   eax
c001dee0:	51                   	push   ecx
c001dee1:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001dee5:	57                   	push   edi
c001dee6:	55                   	push   ebp
c001dee7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001deeb:	e8 ea fd ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001def0:	83 c4 14             	add    esp,0x14
c001def3:	89 c6                	mov    esi,eax
c001def5:	53                   	push   ebx
c001def6:	c1 e6 10             	shl    esi,0x10
c001def9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001defd:	51                   	push   ecx
c001defe:	57                   	push   edi
c001deff:	55                   	push   ebp
c001df00:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001df04:	e8 d1 fd ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df09:	83 c4 3c             	add    esp,0x3c
c001df0c:	0f b7 c0             	movzx  eax,ax
c001df0f:	5b                   	pop    ebx
c001df10:	09 f0                	or     eax,esi
c001df12:	5e                   	pop    esi
c001df13:	5f                   	pop    edi
c001df14:	5d                   	pop    ebp
c001df15:	c3                   	ret    

c001df16 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001df16:	55                   	push   ebp
c001df17:	57                   	push   edi
c001df18:	56                   	push   esi
c001df19:	53                   	push   ebx
c001df1a:	83 ec 0c             	sub    esp,0xc
c001df1d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001df21:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001df25:	89 f5                	mov    ebp,esi
c001df27:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001df2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df35:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001df39:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df3d:	83 f9 01             	cmp    ecx,0x1
c001df40:	75 5d                	jne    c001df9f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001df42:	0f b6 c8             	movzx  ecx,al
c001df45:	0f b6 d2             	movzx  edx,dl
c001df48:	c1 e1 10             	shl    ecx,0x10
c001df4b:	c1 e2 0b             	shl    edx,0xb
c001df4e:	89 f0                	mov    eax,esi
c001df50:	25 fc 00 00 00       	and    eax,0xfc
c001df55:	09 c1                	or     ecx,eax
c001df57:	89 e8                	mov    eax,ebp
c001df59:	0f b6 c0             	movzx  eax,al
c001df5c:	c1 e0 08             	shl    eax,0x8
c001df5f:	09 c1                	or     ecx,eax
c001df61:	09 d1                	or     ecx,edx
c001df63:	ba f8 0c 00 00       	mov    edx,0xcf8
c001df68:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001df6e:	89 c8                	mov    eax,ecx
c001df70:	ef                   	out    dx,eax
c001df71:	ba fc 0c 00 00       	mov    edx,0xcfc
c001df76:	ed                   	in     eax,dx
c001df77:	0f b7 db             	movzx  ebx,bx
c001df7a:	83 e6 02             	and    esi,0x2
c001df7d:	74 0a                	je     c001df89 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001df7f:	0f b7 d0             	movzx  edx,ax
c001df82:	c1 e3 10             	shl    ebx,0x10
c001df85:	09 d3                	or     ebx,edx
c001df87:	eb 05                	jmp    c001df8e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001df89:	66 31 c0             	xor    ax,ax
c001df8c:	09 c3                	or     ebx,eax
c001df8e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001df93:	89 c8                	mov    eax,ecx
c001df95:	ef                   	out    dx,eax
c001df96:	ba fc 0c 00 00       	mov    edx,0xcfc
c001df9b:	89 d8                	mov    eax,ebx
c001df9d:	eb 41                	jmp    c001dfe0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001df9f:	83 f9 02             	cmp    ecx,0x2
c001dfa2:	75 45                	jne    c001dfe9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001dfa4:	83 ec 0c             	sub    esp,0xc
c001dfa7:	0f b6 d2             	movzx  edx,dl
c001dfaa:	89 f1                	mov    ecx,esi
c001dfac:	0f b6 c0             	movzx  eax,al
c001dfaf:	0f b6 f1             	movzx  esi,cl
c001dfb2:	89 e9                	mov    ecx,ebp
c001dfb4:	56                   	push   esi
c001dfb5:	0f b6 c9             	movzx  ecx,cl
c001dfb8:	51                   	push   ecx
c001dfb9:	52                   	push   edx
c001dfba:	50                   	push   eax
c001dfbb:	57                   	push   edi
c001dfbc:	e8 a3 fc ff ff       	call   c001dc64 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfc1:	89 c2                	mov    edx,eax
c001dfc3:	ed                   	in     eax,dx
c001dfc4:	83 c4 20             	add    esp,0x20
c001dfc7:	0f b7 db             	movzx  ebx,bx
c001dfca:	f6 c2 02             	test   dl,0x2
c001dfcd:	74 0c                	je     c001dfdb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001dfcf:	0f b7 c8             	movzx  ecx,ax
c001dfd2:	89 d8                	mov    eax,ebx
c001dfd4:	c1 e0 10             	shl    eax,0x10
c001dfd7:	09 c8                	or     eax,ecx
c001dfd9:	eb 05                	jmp    c001dfe0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001dfdb:	66 31 c0             	xor    ax,ax
c001dfde:	09 d8                	or     eax,ebx
c001dfe0:	ef                   	out    dx,eax
c001dfe1:	83 c4 0c             	add    esp,0xc
c001dfe4:	5b                   	pop    ebx
c001dfe5:	5e                   	pop    esi
c001dfe6:	5f                   	pop    edi
c001dfe7:	5d                   	pop    ebp
c001dfe8:	c3                   	ret    
c001dfe9:	c7 44 24 20 df 5b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025bdf
c001dff1:	83 c4 0c             	add    esp,0xc
c001dff4:	5b                   	pop    ebx
c001dff5:	5e                   	pop    esi
c001dff6:	5f                   	pop    edi
c001dff7:	5d                   	pop    ebp
c001dff8:	e9 f7 1c ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001dffd:	90                   	nop

c001dffe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001dffe:	55                   	push   ebp
c001dfff:	57                   	push   edi
c001e000:	56                   	push   esi
c001e001:	53                   	push   ebx
c001e002:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e008:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001e00f:	80 3d ec f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f4ec,0x0
c001e016:	0f 85 bd 00 00 00    	jne    c001e0d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e01c:	83 ec 0c             	sub    esp,0xc
c001e01f:	68 14 01 00 00       	push   0x114
c001e024:	e8 6e 18 ff ff       	call   c000f897 <malloc>
c001e029:	83 c4 0c             	add    esp,0xc
c001e02c:	89 c3                	mov    ebx,eax
c001e02e:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c001e034:	68 e5 5b 02 c0       	push   0xc0025be5
c001e039:	50                   	push   eax
c001e03a:	e8 4b a1 fe ff       	call   c000818a <File::File(char const*, Process*)>
c001e03f:	83 c4 10             	add    esp,0x10
c001e042:	85 db                	test   ebx,ebx
c001e044:	0f 84 67 02 00 00    	je     c001e2b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e04a:	56                   	push   esi
c001e04b:	56                   	push   esi
c001e04c:	6a 01                	push   0x1
c001e04e:	53                   	push   ebx
c001e04f:	e8 54 a1 fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001e054:	83 c4 10             	add    esp,0x10
c001e057:	85 c0                	test   eax,eax
c001e059:	0f 85 52 02 00 00    	jne    c001e2b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e05f:	52                   	push   edx
c001e060:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e064:	50                   	push   eax
c001e065:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e069:	50                   	push   eax
c001e06a:	53                   	push   ebx
c001e06b:	e8 3a a4 fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001e070:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e074:	40                   	inc    eax
c001e075:	89 04 24             	mov    DWORD PTR [esp],eax
c001e078:	e8 1a 18 ff ff       	call   c000f897 <malloc>
c001e07d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e081:	a3 e8 f4 02 c0       	mov    ds:0xc002f4e8,eax
c001e086:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e08a:	59                   	pop    ecx
c001e08b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e08d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e091:	51                   	push   ecx
c001e092:	50                   	push   eax
c001e093:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e097:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e09b:	53                   	push   ebx
c001e09c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e09f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e0a3:	83 c4 20             	add    esp,0x20
c001e0a6:	89 c8                	mov    eax,ecx
c001e0a8:	99                   	cdq    
c001e0a9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e0ad:	0f 85 fe 01 00 00    	jne    c001e2b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e0b3:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e0b7:	0f 85 f4 01 00 00    	jne    c001e2b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e0bd:	83 ec 0c             	sub    esp,0xc
c001e0c0:	53                   	push   ebx
c001e0c1:	e8 40 a1 fe ff       	call   c0008206 <File::close()>
c001e0c6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e0ca:	c6 05 ec f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4ec,0x1
c001e0d1:	a3 e4 f4 02 c0       	mov    ds:0xc002f4e4,eax
c001e0d6:	83 c4 10             	add    esp,0x10
c001e0d9:	a1 e4 f4 02 c0       	mov    eax,ds:0xc002f4e4
c001e0de:	8b 1d e8 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f4e8
c001e0e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e0e8:	31 f6                	xor    esi,esi
c001e0ea:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e0f2:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e0f9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e0fe:	31 c9                	xor    ecx,ecx
c001e100:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e108:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e10d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e115:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e119:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e121:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e125:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e129:	0f 8e 82 01 00 00    	jle    c001e2b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e12f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001e132:	d4 40                	aam    0x40
c001e134:	d5 39                	aad    0x39
c001e136:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e13a:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001e13e:	d4 40                	aam    0x40
c001e140:	d5 39                	aad    0x39
c001e142:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e146:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001e14a:	d4 40                	aam    0x40
c001e14c:	d5 39                	aad    0x39
c001e14e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e152:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001e156:	d4 40                	aam    0x40
c001e158:	d5 39                	aad    0x39
c001e15a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e15e:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001e162:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e166:	3c 56                	cmp    al,0x56
c001e168:	74 43                	je     c001e1ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001e16a:	d4 40                	aam    0x40
c001e16c:	d5 39                	aad    0x39
c001e16e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e171:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001e175:	0f b6 c9             	movzx  ecx,cl
c001e178:	c1 e1 04             	shl    ecx,0x4
c001e17b:	d4 40                	aam    0x40
c001e17d:	d5 39                	aad    0x39
c001e17f:	83 e8 30             	sub    eax,0x30
c001e182:	0f b6 c0             	movzx  eax,al
c001e185:	09 c1                	or     ecx,eax
c001e187:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001e18b:	c1 e1 04             	shl    ecx,0x4
c001e18e:	d4 40                	aam    0x40
c001e190:	d5 39                	aad    0x39
c001e192:	83 e8 30             	sub    eax,0x30
c001e195:	0f b6 c0             	movzx  eax,al
c001e198:	09 c1                	or     ecx,eax
c001e19a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001e19e:	c1 e1 04             	shl    ecx,0x4
c001e1a1:	d4 40                	aam    0x40
c001e1a3:	d5 39                	aad    0x39
c001e1a5:	83 e8 30             	sub    eax,0x30
c001e1a8:	0f b6 c0             	movzx  eax,al
c001e1ab:	09 c1                	or     ecx,eax
c001e1ad:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001e1b1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001e1b5:	3c 58                	cmp    al,0x58
c001e1b7:	74 47                	je     c001e200 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001e1b9:	d4 40                	aam    0x40
c001e1bb:	d5 39                	aad    0x39
c001e1bd:	8d 50 d0             	lea    edx,[eax-0x30]
c001e1c0:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001e1c4:	0f b6 d2             	movzx  edx,dl
c001e1c7:	c1 e2 04             	shl    edx,0x4
c001e1ca:	d4 40                	aam    0x40
c001e1cc:	d5 39                	aad    0x39
c001e1ce:	83 e8 30             	sub    eax,0x30
c001e1d1:	0f b6 c0             	movzx  eax,al
c001e1d4:	09 c2                	or     edx,eax
c001e1d6:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001e1da:	c1 e2 04             	shl    edx,0x4
c001e1dd:	d4 40                	aam    0x40
c001e1df:	d5 39                	aad    0x39
c001e1e1:	83 e8 30             	sub    eax,0x30
c001e1e4:	0f b6 c0             	movzx  eax,al
c001e1e7:	09 c2                	or     edx,eax
c001e1e9:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001e1ed:	c1 e2 04             	shl    edx,0x4
c001e1f0:	d4 40                	aam    0x40
c001e1f2:	d5 39                	aad    0x39
c001e1f4:	83 e8 30             	sub    eax,0x30
c001e1f7:	0f b6 c0             	movzx  eax,al
c001e1fa:	09 c2                	or     edx,eax
c001e1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e200:	83 c6 10             	add    esi,0x10
c001e203:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e207:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001e20b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001e20f:	83 fa 0a             	cmp    edx,0xa
c001e212:	74 0b                	je     c001e21f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001e214:	47                   	inc    edi
c001e215:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e219:	75 19                	jne    c001e234 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001e21b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001e21f:	31 c0                	xor    eax,eax
c001e221:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001e226:	0f 94 c0             	sete   al
c001e229:	01 c6                	add    esi,eax
c001e22b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e230:	75 0b                	jne    c001e23d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001e232:	eb 14                	jmp    c001e248 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001e234:	46                   	inc    esi
c001e235:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001e238:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e23b:	eb ca                	jmp    c001e207 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001e23d:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001e242:	0f 85 dd fe ff ff    	jne    c001e125 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e248:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001e24d:	74 10                	je     c001e25f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001e24f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e254:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e259:	0f 85 c6 fe ff ff    	jne    c001e125 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e25f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e263:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e267:	83 e8 30             	sub    eax,0x30
c001e26a:	83 ef 30             	sub    edi,0x30
c001e26d:	c1 e0 04             	shl    eax,0x4
c001e270:	09 f8                	or     eax,edi
c001e272:	0f b6 c0             	movzx  eax,al
c001e275:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e279:	0f 85 a6 fe ff ff    	jne    c001e125 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e27f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e283:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001e287:	83 e8 30             	sub    eax,0x30
c001e28a:	83 ef 30             	sub    edi,0x30
c001e28d:	c1 e0 04             	shl    eax,0x4
c001e290:	09 f8                	or     eax,edi
c001e292:	0f b6 c0             	movzx  eax,al
c001e295:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e299:	0f 85 86 fe ff ff    	jne    c001e125 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e29f:	50                   	push   eax
c001e2a0:	50                   	push   eax
c001e2a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e2a5:	50                   	push   eax
c001e2a6:	55                   	push   ebp
c001e2a7:	e8 94 23 fe ff       	call   c0000640 <strcpy>
c001e2ac:	83 c4 10             	add    esp,0x10
c001e2af:	eb 06                	jmp    c001e2b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001e2b1:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001e2b5:	31 ed                	xor    ebp,ebp
c001e2b7:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e2bd:	89 e8                	mov    eax,ebp
c001e2bf:	5b                   	pop    ebx
c001e2c0:	5e                   	pop    esi
c001e2c1:	5f                   	pop    edi
c001e2c2:	5d                   	pop    ebp
c001e2c3:	c3                   	ret    

c001e2c4 <PCI::checkBus(unsigned char)>:
c001e2c4:	56                   	push   esi
c001e2c5:	53                   	push   ebx
c001e2c6:	31 db                	xor    ebx,ebx
c001e2c8:	51                   	push   ecx
c001e2c9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e2ce:	52                   	push   edx
c001e2cf:	53                   	push   ebx
c001e2d0:	43                   	inc    ebx
c001e2d1:	56                   	push   esi
c001e2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2d6:	e8 6f 03 00 00       	call   c001e64a <PCI::checkDevice(unsigned char, unsigned char)>
c001e2db:	83 c4 10             	add    esp,0x10
c001e2de:	83 fb 20             	cmp    ebx,0x20
c001e2e1:	75 eb                	jne    c001e2ce <PCI::checkBus(unsigned char)+0xa>
c001e2e3:	58                   	pop    eax
c001e2e4:	5b                   	pop    ebx
c001e2e5:	5e                   	pop    esi
c001e2e6:	c3                   	ret    
c001e2e7:	90                   	nop

c001e2e8 <PCI::foundDevice(PCIDeviceInfo)>:
c001e2e8:	55                   	push   ebp
c001e2e9:	57                   	push   edi
c001e2ea:	56                   	push   esi
c001e2eb:	53                   	push   ebx
c001e2ec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e2f2:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e2fa:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001e301:	3d ff ff 00 00       	cmp    eax,0xffff
c001e306:	0f 84 b7 01 00 00    	je     c001e4c3 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e30c:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001e314:	66 81 fb 06 04       	cmp    bx,0x406
c001e319:	75 32                	jne    c001e34d <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e31b:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e323:	50                   	push   eax
c001e324:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e32c:	50                   	push   eax
c001e32d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e335:	50                   	push   eax
c001e336:	55                   	push   ebp
c001e337:	e8 4e fb ff ff       	call   c001de8a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e33c:	59                   	pop    ecx
c001e33d:	0f b6 c0             	movzx  eax,al
c001e340:	5b                   	pop    ebx
c001e341:	50                   	push   eax
c001e342:	55                   	push   ebp
c001e343:	e8 7c ff ff ff       	call   c001e2c4 <PCI::checkBus(unsigned char)>
c001e348:	e9 16 01 00 00       	jmp    c001e463 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001e34d:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e354:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001e35a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001e35e:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001e365:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001e36d:	85 c0                	test   eax,eax
c001e36f:	74 36                	je     c001e3a7 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001e371:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e374:	85 d2                	test   edx,edx
c001e376:	74 2b                	je     c001e3a3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e378:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001e37e:	31 f9                	xor    ecx,edi
c001e380:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001e386:	75 1b                	jne    c001e3a3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e38c:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001e392:	75 0f                	jne    c001e3a3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e394:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e39b:	39 f2                	cmp    edx,esi
c001e39d:	0f 84 20 01 00 00    	je     c001e4c3 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e3a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3a5:	eb c6                	jmp    c001e36d <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e3a7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e3ab:	be 18 5c 02 c0       	mov    esi,0xc0025c18
c001e3b0:	b9 07 00 00 00       	mov    ecx,0x7
c001e3b5:	fc                   	cld    
c001e3b6:	31 d2                	xor    edx,edx
c001e3b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e3ba:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e3c1:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e3c5:	b9 12 00 00 00       	mov    ecx,0x12
c001e3ca:	83 ec 0c             	sub    esp,0xc
c001e3cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e3cf:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e3d7:	b9 0a 00 00 00       	mov    ecx,0xa
c001e3dc:	f7 f1                	div    ecx
c001e3de:	83 c0 30             	add    eax,0x30
c001e3e1:	83 c2 30             	add    edx,0x30
c001e3e4:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e3e8:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e3ec:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e3f4:	31 d2                	xor    edx,edx
c001e3f6:	f7 f1                	div    ecx
c001e3f8:	83 c0 30             	add    eax,0x30
c001e3fb:	83 c2 30             	add    edx,0x30
c001e3fe:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e402:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e406:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e40a:	50                   	push   eax
c001e40b:	e8 f5 ee fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001e410:	83 c4 10             	add    esp,0x10
c001e413:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001e419:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e420:	75 46                	jne    c001e468 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001e422:	83 ec 0c             	sub    esp,0xc
c001e425:	68 64 01 00 00       	push   0x164
c001e42a:	e8 68 14 ff ff       	call   c000f897 <malloc>
c001e42f:	89 c3                	mov    ebx,eax
c001e431:	89 04 24             	mov    DWORD PTR [esp],eax
c001e434:	e8 3b 11 00 00       	call   c001f574 <SATABus::SATABus()>
c001e439:	58                   	pop    eax
c001e43a:	5a                   	pop    edx
c001e43b:	53                   	push   ebx
c001e43c:	55                   	push   ebp
c001e43d:	e8 12 b6 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001e442:	83 ec 1c             	sub    esp,0x1c
c001e445:	b9 09 00 00 00       	mov    ecx,0x9
c001e44a:	89 e7                	mov    edi,esp
c001e44c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e44e:	53                   	push   ebx
c001e44f:	e8 46 b5 fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001e454:	83 c4 30             	add    esp,0x30
c001e457:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e459:	6a 00                	push   0x0
c001e45b:	6a 00                	push   0x0
c001e45d:	6a 00                	push   0x0
c001e45f:	53                   	push   ebx
c001e460:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e463:	83 c4 10             	add    esp,0x10
c001e466:	eb 5b                	jmp    c001e4c3 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e468:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001e46e:	75 19                	jne    c001e489 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001e470:	83 ec 0c             	sub    esp,0xc
c001e473:	68 70 02 00 00       	push   0x270
c001e478:	e8 1a 14 ff ff       	call   c000f897 <malloc>
c001e47d:	89 c3                	mov    ebx,eax
c001e47f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e482:	e8 93 02 00 00       	call   c001e71a <IDE::IDE()>
c001e487:	eb b0                	jmp    c001e439 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001e489:	83 ec 0c             	sub    esp,0xc
c001e48c:	68 58 01 00 00       	push   0x158
c001e491:	e8 01 14 ff ff       	call   c000f897 <malloc>
c001e496:	89 c3                	mov    ebx,eax
c001e498:	58                   	pop    eax
c001e499:	5a                   	pop    edx
c001e49a:	68 fe 5b 02 c0       	push   0xc0025bfe
c001e49f:	53                   	push   ebx
c001e4a0:	e8 63 b8 fe ff       	call   c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>
c001e4a5:	59                   	pop    ecx
c001e4a6:	5f                   	pop    edi
c001e4a7:	53                   	push   ebx
c001e4a8:	55                   	push   ebp
c001e4a9:	e8 a6 b5 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001e4ae:	83 ec 1c             	sub    esp,0x1c
c001e4b1:	b9 09 00 00 00       	mov    ecx,0x9
c001e4b6:	89 e7                	mov    edi,esp
c001e4b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e4ba:	53                   	push   ebx
c001e4bb:	e8 da b4 fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001e4c0:	83 c4 30             	add    esp,0x30
c001e4c3:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e4c9:	5b                   	pop    ebx
c001e4ca:	5e                   	pop    esi
c001e4cb:	5f                   	pop    edi
c001e4cc:	5d                   	pop    ebp
c001e4cd:	c3                   	ret    

c001e4ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e4ce:	55                   	push   ebp
c001e4cf:	57                   	push   edi
c001e4d0:	56                   	push   esi
c001e4d1:	53                   	push   ebx
c001e4d2:	83 ec 68             	sub    esp,0x68
c001e4d5:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e4d9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e4e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4e4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e4eb:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e4f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e4f4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e4fb:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e500:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e504:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e509:	6a 0c                	push   0xc
c001e50b:	57                   	push   edi
c001e50c:	53                   	push   ebx
c001e50d:	56                   	push   esi
c001e50e:	55                   	push   ebp
c001e50f:	e8 c6 f7 ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e514:	83 c4 20             	add    esp,0x20
c001e517:	57                   	push   edi
c001e518:	53                   	push   ebx
c001e519:	56                   	push   esi
c001e51a:	55                   	push   ebp
c001e51b:	e8 b0 f8 ff ff       	call   c001ddd0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e520:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e525:	57                   	push   edi
c001e526:	53                   	push   ebx
c001e527:	56                   	push   esi
c001e528:	55                   	push   ebp
c001e529:	e8 38 f9 ff ff       	call   c001de66 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e52e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e532:	83 c4 14             	add    esp,0x14
c001e535:	6a 3c                	push   0x3c
c001e537:	57                   	push   edi
c001e538:	53                   	push   ebx
c001e539:	56                   	push   esi
c001e53a:	55                   	push   ebp
c001e53b:	e8 9a f7 ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e540:	0f b6 c4             	movzx  eax,ah
c001e543:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e547:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e54b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e54f:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001e554:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001e55a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e560:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e564:	83 c4 20             	add    esp,0x20
c001e567:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e56c:	74 30                	je     c001e59e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e56e:	31 c0                	xor    eax,eax
c001e570:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e574:	7e 28                	jle    c001e59e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e576:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e57e:	39 cb                	cmp    ebx,ecx
c001e580:	75 19                	jne    c001e59b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e582:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e58a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e58e:	75 0b                	jne    c001e59b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e590:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e597:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e59b:	40                   	inc    eax
c001e59c:	eb d2                	jmp    c001e570 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e59e:	31 d2                	xor    edx,edx
c001e5a0:	83 ec 0c             	sub    esp,0xc
c001e5a3:	57                   	push   edi
c001e5a4:	53                   	push   ebx
c001e5a5:	56                   	push   esi
c001e5a6:	52                   	push   edx
c001e5a7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e5ab:	55                   	push   ebp
c001e5ac:	e8 01 f9 ff ff       	call   c001deb2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e5b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e5b5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e5b9:	42                   	inc    edx
c001e5ba:	83 c4 20             	add    esp,0x20
c001e5bd:	83 fa 06             	cmp    edx,0x6
c001e5c0:	75 de                	jne    c001e5a0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e5c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e5c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5ca:	c1 e2 08             	shl    edx,0x8
c001e5cd:	83 ec 0c             	sub    esp,0xc
c001e5d0:	0f b6 c4             	movzx  eax,ah
c001e5d3:	09 d0                	or     eax,edx
c001e5d5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e5da:	6a 02                	push   0x2
c001e5dc:	57                   	push   edi
c001e5dd:	53                   	push   ebx
c001e5de:	56                   	push   esi
c001e5df:	55                   	push   ebp
c001e5e0:	e8 f5 f6 ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e5e5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e5ea:	83 c4 20             	add    esp,0x20
c001e5ed:	57                   	push   edi
c001e5ee:	53                   	push   ebx
c001e5ef:	56                   	push   esi
c001e5f0:	55                   	push   ebp
c001e5f1:	e8 24 f8 ff ff       	call   c001de1a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e5f6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e5fa:	57                   	push   edi
c001e5fb:	53                   	push   ebx
c001e5fc:	56                   	push   esi
c001e5fd:	55                   	push   ebp
c001e5fe:	e8 81 f7 ff ff       	call   c001dd84 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e603:	b9 09 00 00 00       	mov    ecx,0x9
c001e608:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e60d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e611:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e615:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e619:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e61d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e621:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e625:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e629:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e62d:	83 ec 0c             	sub    esp,0xc
c001e630:	fc                   	cld    
c001e631:	89 e7                	mov    edi,esp
c001e633:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e637:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e639:	55                   	push   ebp
c001e63a:	e8 a9 fc ff ff       	call   c001e2e8 <PCI::foundDevice(PCIDeviceInfo)>
c001e63f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e645:	5b                   	pop    ebx
c001e646:	5e                   	pop    esi
c001e647:	5f                   	pop    edi
c001e648:	5d                   	pop    ebp
c001e649:	c3                   	ret    

c001e64a <PCI::checkDevice(unsigned char, unsigned char)>:
c001e64a:	55                   	push   ebp
c001e64b:	57                   	push   edi
c001e64c:	56                   	push   esi
c001e64d:	53                   	push   ebx
c001e64e:	83 ec 0c             	sub    esp,0xc
c001e651:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e655:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e65a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e65f:	6a 00                	push   0x0
c001e661:	56                   	push   esi
c001e662:	57                   	push   edi
c001e663:	55                   	push   ebp
c001e664:	e8 1b f7 ff ff       	call   c001dd84 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e669:	6a 00                	push   0x0
c001e66b:	56                   	push   esi
c001e66c:	57                   	push   edi
c001e66d:	55                   	push   ebp
c001e66e:	e8 5b fe ff ff       	call   c001e4ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e673:	83 c4 20             	add    esp,0x20
c001e676:	6a 00                	push   0x0
c001e678:	56                   	push   esi
c001e679:	57                   	push   edi
c001e67a:	55                   	push   ebp
c001e67b:	e8 28 f7 ff ff       	call   c001dda8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e680:	83 c4 10             	add    esp,0x10
c001e683:	a8 80                	test   al,0x80
c001e685:	74 2d                	je     c001e6b4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e687:	bb 01 00 00 00       	mov    ebx,0x1
c001e68c:	53                   	push   ebx
c001e68d:	56                   	push   esi
c001e68e:	57                   	push   edi
c001e68f:	55                   	push   ebp
c001e690:	e8 ef f6 ff ff       	call   c001dd84 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e695:	83 c4 10             	add    esp,0x10
c001e698:	0f b7 c0             	movzx  eax,ax
c001e69b:	3d ff ff 00 00       	cmp    eax,0xffff
c001e6a0:	74 0c                	je     c001e6ae <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e6a2:	53                   	push   ebx
c001e6a3:	56                   	push   esi
c001e6a4:	57                   	push   edi
c001e6a5:	55                   	push   ebp
c001e6a6:	e8 23 fe ff ff       	call   c001e4ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e6ab:	83 c4 10             	add    esp,0x10
c001e6ae:	43                   	inc    ebx
c001e6af:	83 fb 08             	cmp    ebx,0x8
c001e6b2:	75 d8                	jne    c001e68c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e6b4:	83 c4 0c             	add    esp,0xc
c001e6b7:	5b                   	pop    ebx
c001e6b8:	5e                   	pop    esi
c001e6b9:	5f                   	pop    edi
c001e6ba:	5d                   	pop    ebp
c001e6bb:	c3                   	ret    

c001e6bc <PCI::detect()>:
c001e6bc:	56                   	push   esi
c001e6bd:	53                   	push   ebx
c001e6be:	53                   	push   ebx
c001e6bf:	31 db                	xor    ebx,ebx
c001e6c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e6c5:	6a 00                	push   0x0
c001e6c7:	6a 00                	push   0x0
c001e6c9:	6a 00                	push   0x0
c001e6cb:	56                   	push   esi
c001e6cc:	e8 d7 f6 ff ff       	call   c001dda8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e6d1:	83 c4 10             	add    esp,0x10
c001e6d4:	a8 80                	test   al,0x80
c001e6d6:	75 21                	jne    c001e6f9 <PCI::detect()+0x3d>
c001e6d8:	51                   	push   ecx
c001e6d9:	51                   	push   ecx
c001e6da:	6a 00                	push   0x0
c001e6dc:	56                   	push   esi
c001e6dd:	e8 e2 fb ff ff       	call   c001e2c4 <PCI::checkBus(unsigned char)>
c001e6e2:	83 c4 10             	add    esp,0x10
c001e6e5:	eb 2a                	jmp    c001e711 <PCI::detect()+0x55>
c001e6e7:	52                   	push   edx
c001e6e8:	52                   	push   edx
c001e6e9:	53                   	push   ebx
c001e6ea:	43                   	inc    ebx
c001e6eb:	56                   	push   esi
c001e6ec:	e8 d3 fb ff ff       	call   c001e2c4 <PCI::checkBus(unsigned char)>
c001e6f1:	83 c4 10             	add    esp,0x10
c001e6f4:	83 fb 08             	cmp    ebx,0x8
c001e6f7:	74 18                	je     c001e711 <PCI::detect()+0x55>
c001e6f9:	53                   	push   ebx
c001e6fa:	6a 00                	push   0x0
c001e6fc:	6a 00                	push   0x0
c001e6fe:	56                   	push   esi
c001e6ff:	e8 80 f6 ff ff       	call   c001dd84 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e704:	83 c4 10             	add    esp,0x10
c001e707:	0f b7 c0             	movzx  eax,ax
c001e70a:	3d ff ff 00 00       	cmp    eax,0xffff
c001e70f:	74 d6                	je     c001e6e7 <PCI::detect()+0x2b>
c001e711:	58                   	pop    eax
c001e712:	5b                   	pop    ebx
c001e713:	5e                   	pop    esi
c001e714:	c3                   	ret    
c001e715:	90                   	nop

c001e716 <IDE::close(int, int, void*)>:
c001e716:	83 c8 ff             	or     eax,0xffffffff
c001e719:	c3                   	ret    

c001e71a <IDE::IDE()>:
c001e71a:	83 ec 0c             	sub    esp,0xc
c001e71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e721:	83 ec 08             	sub    esp,0x8
c001e724:	68 a8 5c 02 c0       	push   0xc0025ca8
c001e729:	50                   	push   eax
c001e72a:	e8 7d b6 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001e72f:	83 c4 10             	add    esp,0x10
c001e732:	ba d4 5d 02 c0       	mov    edx,0xc0025dd4
c001e737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e73b:	89 10                	mov    DWORD PTR [eax],edx
c001e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e741:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e748:	90                   	nop
c001e749:	83 c4 0c             	add    esp,0xc
c001e74c:	c3                   	ret    
c001e74d:	90                   	nop

c001e74e <IDE::prepareInterrupt(unsigned char)>:
c001e74e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e753:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e757:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e75f:	c3                   	ret    

c001e760 <selectDrive(unsigned char, unsigned char)>:
c001e760:	c3                   	ret    
c001e761:	90                   	nop

c001e762 <IDE::getBase(unsigned char)>:
c001e762:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e767:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e76b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e773:	c3                   	ret    

c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e774:	55                   	push   ebp
c001e775:	57                   	push   edi
c001e776:	56                   	push   esi
c001e777:	53                   	push   ebx
c001e778:	83 ec 1c             	sub    esp,0x1c
c001e77b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e77f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e783:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e786:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e78a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e78e:	80 f9 03             	cmp    cl,0x3
c001e791:	77 4f                	ja     c001e7e2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e797:	0f b6 fa             	movzx  edi,dl
c001e79a:	0f b6 db             	movzx  ebx,bl
c001e79d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e7a0:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e7a5:	80 ca 80             	or     dl,0x80
c001e7a8:	52                   	push   edx
c001e7a9:	6a 0c                	push   0xc
c001e7ab:	57                   	push   edi
c001e7ac:	56                   	push   esi
c001e7ad:	e8 c2 ff ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7b2:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e7b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e7bb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e7bf:	ee                   	out    dx,al
c001e7c0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e7c5:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001e7c9:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e7cd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e7d1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e7d9:	83 c4 2c             	add    esp,0x2c
c001e7dc:	5b                   	pop    ebx
c001e7dd:	5e                   	pop    esi
c001e7de:	5f                   	pop    edi
c001e7df:	5d                   	pop    ebp
c001e7e0:	eb 92                	jmp    c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7e2:	0f b6 cb             	movzx  ecx,bl
c001e7e5:	83 f9 07             	cmp    ecx,0x7
c001e7e8:	77 12                	ja     c001e7fc <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e7ea:	0f b6 d2             	movzx  edx,dl
c001e7ed:	0f b6 db             	movzx  ebx,bl
c001e7f0:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001e7f8:	01 da                	add    edx,ebx
c001e7fa:	eb 2f                	jmp    c001e82b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e7fc:	83 f9 0d             	cmp    ecx,0xd
c001e7ff:	77 13                	ja     c001e814 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e801:	0f b6 d2             	movzx  edx,dl
c001e804:	0f b6 db             	movzx  ebx,bl
c001e807:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001e80e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e812:	eb 17                	jmp    c001e82b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e814:	83 f9 15             	cmp    ecx,0x15
c001e817:	77 13                	ja     c001e82c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001e819:	0f b6 d2             	movzx  edx,dl
c001e81c:	0f b6 db             	movzx  ebx,bl
c001e81f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001e827:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e82b:	ee                   	out    dx,al
c001e82c:	83 c4 1c             	add    esp,0x1c
c001e82f:	5b                   	pop    ebx
c001e830:	5e                   	pop    esi
c001e831:	5f                   	pop    edi
c001e832:	5d                   	pop    ebp
c001e833:	c3                   	ret    

c001e834 <IDE::read(unsigned char, unsigned char)>:
c001e834:	55                   	push   ebp
c001e835:	57                   	push   edi
c001e836:	56                   	push   esi
c001e837:	53                   	push   ebx
c001e838:	83 ec 1c             	sub    esp,0x1c
c001e83b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e83f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e843:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e846:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e84a:	3c 03                	cmp    al,0x3
c001e84c:	77 40                	ja     c001e88e <IDE::read(unsigned char, unsigned char)+0x5a>
c001e84e:	0f b6 f9             	movzx  edi,cl
c001e851:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e854:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e859:	0c 80                	or     al,0x80
c001e85b:	50                   	push   eax
c001e85c:	6a 0c                	push   0xc
c001e85e:	57                   	push   edi
c001e85f:	56                   	push   esi
c001e860:	e8 0f ff ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e865:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001e86a:	0f b6 d3             	movzx  edx,bl
c001e86d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e871:	ec                   	in     al,dx
c001e872:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e876:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e87b:	52                   	push   edx
c001e87c:	6a 0c                	push   0xc
c001e87e:	57                   	push   edi
c001e87f:	56                   	push   esi
c001e880:	e8 ef fe ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e885:	83 c4 20             	add    esp,0x20
c001e888:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e88c:	eb 4c                	jmp    c001e8da <IDE::read(unsigned char, unsigned char)+0xa6>
c001e88e:	0f b6 d3             	movzx  edx,bl
c001e891:	83 fa 07             	cmp    edx,0x7
c001e894:	77 12                	ja     c001e8a8 <IDE::read(unsigned char, unsigned char)+0x74>
c001e896:	0f b6 c9             	movzx  ecx,cl
c001e899:	0f b6 d3             	movzx  edx,bl
c001e89c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001e8a4:	01 c2                	add    edx,eax
c001e8a6:	eb 31                	jmp    c001e8d9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e8a8:	83 fa 0d             	cmp    edx,0xd
c001e8ab:	77 13                	ja     c001e8c0 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e8ad:	0f b6 c9             	movzx  ecx,cl
c001e8b0:	0f b6 d3             	movzx  edx,bl
c001e8b3:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001e8ba:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e8be:	eb 19                	jmp    c001e8d9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e8c0:	31 c0                	xor    eax,eax
c001e8c2:	83 fa 15             	cmp    edx,0x15
c001e8c5:	77 13                	ja     c001e8da <IDE::read(unsigned char, unsigned char)+0xa6>
c001e8c7:	0f b6 c9             	movzx  ecx,cl
c001e8ca:	0f b6 d3             	movzx  edx,bl
c001e8cd:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001e8d5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e8d9:	ec                   	in     al,dx
c001e8da:	83 c4 1c             	add    esp,0x1c
c001e8dd:	5b                   	pop    ebx
c001e8de:	5e                   	pop    esi
c001e8df:	5f                   	pop    edi
c001e8e0:	5d                   	pop    ebp
c001e8e1:	c3                   	ret    

c001e8e2 <IDE::waitInterrupt(unsigned char)>:
c001e8e2:	55                   	push   ebp
c001e8e3:	57                   	push   edi
c001e8e4:	56                   	push   esi
c001e8e5:	53                   	push   ebx
c001e8e6:	31 db                	xor    ebx,ebx
c001e8e8:	83 ec 0c             	sub    esp,0xc
c001e8eb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e8ef:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e8f4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e8fc:	89 e8                	mov    eax,ebp
c001e8fe:	84 c0                	test   al,al
c001e900:	75 31                	jne    c001e933 <IDE::waitInterrupt(unsigned char)+0x51>
c001e902:	52                   	push   edx
c001e903:	6a 0c                	push   0xc
c001e905:	56                   	push   esi
c001e906:	57                   	push   edi
c001e907:	e8 28 ff ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001e90c:	83 c4 10             	add    esp,0x10
c001e90f:	a8 01                	test   al,0x1
c001e911:	75 28                	jne    c001e93b <IDE::waitInterrupt(unsigned char)+0x59>
c001e913:	f6 c3 04             	test   bl,0x4
c001e916:	75 13                	jne    c001e92b <IDE::waitInterrupt(unsigned char)+0x49>
c001e918:	83 fb 32             	cmp    ebx,0x32
c001e91b:	7e 0e                	jle    c001e92b <IDE::waitInterrupt(unsigned char)+0x49>
c001e91d:	50                   	push   eax
c001e91e:	50                   	push   eax
c001e91f:	6a 00                	push   0x0
c001e921:	6a 64                	push   0x64
c001e923:	e8 dc 86 ff ff       	call   c0017004 <milliTenthSleep(unsigned long long)>
c001e928:	83 c4 10             	add    esp,0x10
c001e92b:	83 fb 3c             	cmp    ebx,0x3c
c001e92e:	74 0b                	je     c001e93b <IDE::waitInterrupt(unsigned char)+0x59>
c001e930:	43                   	inc    ebx
c001e931:	eb c1                	jmp    c001e8f4 <IDE::waitInterrupt(unsigned char)+0x12>
c001e933:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e93b:	83 c4 0c             	add    esp,0xc
c001e93e:	89 e8                	mov    eax,ebp
c001e940:	5b                   	pop    ebx
c001e941:	5e                   	pop    esi
c001e942:	5f                   	pop    edi
c001e943:	5d                   	pop    ebp
c001e944:	c3                   	ret    

c001e945 <ideChannel0IRQHandler(regs*, void*)>:
c001e945:	83 ec 10             	sub    esp,0x10
c001e948:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e94c:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e953:	6a 07                	push   0x7
c001e955:	6a 00                	push   0x0
c001e957:	50                   	push   eax
c001e958:	e8 d7 fe ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001e95d:	83 c4 1c             	add    esp,0x1c
c001e960:	c3                   	ret    

c001e961 <ideChannel1IRQHandler(regs*, void*)>:
c001e961:	83 ec 10             	sub    esp,0x10
c001e964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e968:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e96f:	6a 07                	push   0x7
c001e971:	6a 01                	push   0x1
c001e973:	50                   	push   eax
c001e974:	e8 bb fe ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001e979:	83 c4 1c             	add    esp,0x1c
c001e97c:	c3                   	ret    
c001e97d:	90                   	nop

c001e97e <IDE::enableIRQs(unsigned char, bool)>:
c001e97e:	57                   	push   edi
c001e97f:	b8 02 00 00 00       	mov    eax,0x2
c001e984:	56                   	push   esi
c001e985:	53                   	push   ebx
c001e986:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e98a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e98e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e993:	74 02                	je     c001e997 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001e995:	31 c0                	xor    eax,eax
c001e997:	0f b6 db             	movzx  ebx,bl
c001e99a:	bf 04 00 00 00       	mov    edi,0x4
c001e99f:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001e9a6:	50                   	push   eax
c001e9a7:	6a 0c                	push   0xc
c001e9a9:	53                   	push   ebx
c001e9aa:	56                   	push   esi
c001e9ab:	e8 c4 fd ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9b0:	83 c4 10             	add    esp,0x10
c001e9b3:	50                   	push   eax
c001e9b4:	6a 0c                	push   0xc
c001e9b6:	53                   	push   ebx
c001e9b7:	56                   	push   esi
c001e9b8:	e8 77 fe ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001e9bd:	83 c4 10             	add    esp,0x10
c001e9c0:	4f                   	dec    edi
c001e9c1:	75 f0                	jne    c001e9b3 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001e9c3:	5b                   	pop    ebx
c001e9c4:	5e                   	pop    esi
c001e9c5:	5f                   	pop    edi
c001e9c6:	c3                   	ret    
c001e9c7:	90                   	nop

c001e9c8 <IDE::open(int, int, void*)>:
c001e9c8:	57                   	push   edi
c001e9c9:	56                   	push   esi
c001e9ca:	53                   	push   ebx
c001e9cb:	83 ec 10             	sub    esp,0x10
c001e9ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e9d2:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e9db:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e9e4:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e9eb:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e9f2:	0f 85 84 02 00 00    	jne    c001ec7c <IDE::open(int, int, void*)+0x2b4>
c001e9f8:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e9fe:	a8 70                	test   al,0x70
c001ea00:	75 44                	jne    c001ea46 <IDE::open(int, int, void*)+0x7e>
c001ea02:	ba 20 84 00 00       	mov    edx,0x8420
c001ea07:	0f a3 c2             	bt     edx,eax
c001ea0a:	73 3a                	jae    c001ea46 <IDE::open(int, int, void*)+0x7e>
c001ea0c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ea12:	83 ec 0c             	sub    esp,0xc
c001ea15:	83 e0 fc             	and    eax,0xfffffffc
c001ea18:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ea1f:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ea25:	83 e0 fc             	and    eax,0xfffffffc
c001ea28:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ea2f:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ea35:	83 e0 fc             	and    eax,0xfffffffc
c001ea38:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ea3f:	68 ed 32 02 c0       	push   0xc00232ed
c001ea44:	eb 60                	jmp    c001eaa6 <IDE::open(int, int, void*)+0xde>
c001ea46:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ea50:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ea5a:	be 64 00 00 00       	mov    esi,0x64
c001ea5f:	57                   	push   edi
c001ea60:	57                   	push   edi
c001ea61:	68 c0 5c 02 c0       	push   0xc0025cc0
c001ea66:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001ea6a:	57                   	push   edi
c001ea6b:	e8 d0 1b fe ff       	call   c0000640 <strcpy>
c001ea70:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001ea77:	31 d2                	xor    edx,edx
c001ea79:	89 c8                	mov    eax,ecx
c001ea7b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ea7e:	f7 f6                	div    esi
c001ea80:	be 0a 00 00 00       	mov    esi,0xa
c001ea85:	83 c0 30             	add    eax,0x30
c001ea88:	31 d2                	xor    edx,edx
c001ea8a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ea8e:	89 c8                	mov    eax,ecx
c001ea90:	f7 f6                	div    esi
c001ea92:	89 d1                	mov    ecx,edx
c001ea94:	31 d2                	xor    edx,edx
c001ea96:	83 c1 30             	add    ecx,0x30
c001ea99:	f7 f6                	div    esi
c001ea9b:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001ea9f:	83 c2 30             	add    edx,0x30
c001eaa2:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001eaa6:	e8 5a e8 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eaab:	bf f8 0c 00 00       	mov    edi,0xcf8
c001eab0:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001eab7:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eabe:	c1 e1 10             	shl    ecx,0x10
c001eac1:	c1 e0 0b             	shl    eax,0xb
c001eac4:	83 c4 10             	add    esp,0x10
c001eac7:	09 c1                	or     ecx,eax
c001eac9:	89 fa                	mov    edx,edi
c001eacb:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ead2:	c1 e0 08             	shl    eax,0x8
c001ead5:	09 c1                	or     ecx,eax
c001ead7:	89 c8                	mov    eax,ecx
c001ead9:	0d 08 00 00 80       	or     eax,0x80000008
c001eade:	ef                   	out    dx,eax
c001eadf:	be fc 0c 00 00       	mov    esi,0xcfc
c001eae4:	89 f2                	mov    edx,esi
c001eae6:	ed                   	in     eax,dx
c001eae7:	c1 e8 10             	shr    eax,0x10
c001eaea:	3d ff ff 00 00       	cmp    eax,0xffff
c001eaef:	0f 84 e5 00 00 00    	je     c001ebda <IDE::open(int, int, void*)+0x212>
c001eaf5:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001eafb:	89 fa                	mov    edx,edi
c001eafd:	89 c8                	mov    eax,ecx
c001eaff:	ef                   	out    dx,eax
c001eb00:	b0 fe                	mov    al,0xfe
c001eb02:	89 f2                	mov    edx,esi
c001eb04:	ee                   	out    dx,al
c001eb05:	89 c8                	mov    eax,ecx
c001eb07:	89 fa                	mov    edx,edi
c001eb09:	ef                   	out    dx,eax
c001eb0a:	89 f2                	mov    edx,esi
c001eb0c:	ed                   	in     eax,dx
c001eb0d:	3c fe                	cmp    al,0xfe
c001eb0f:	0f 85 85 00 00 00    	jne    c001eb9a <IDE::open(int, int, void*)+0x1d2>
c001eb15:	83 ec 0c             	sub    esp,0xc
c001eb18:	68 23 33 02 c0       	push   0xc0023323
c001eb1d:	e8 e3 e7 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eb22:	c7 04 24 c6 5c 02 c0 	mov    DWORD PTR [esp],0xc0025cc6
c001eb29:	e8 4e 84 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001eb2e:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001eb38:	c7 04 24 08 36 02 c0 	mov    DWORD PTR [esp],0xc0023608
c001eb3f:	e8 c1 e7 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eb44:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001eb4b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eb52:	c1 e1 10             	shl    ecx,0x10
c001eb55:	c1 e0 08             	shl    eax,0x8
c001eb58:	89 fa                	mov    edx,edi
c001eb5a:	09 c1                	or     ecx,eax
c001eb5c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eb63:	c1 e0 0b             	shl    eax,0xb
c001eb66:	09 c1                	or     ecx,eax
c001eb68:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001eb6e:	89 c8                	mov    eax,ecx
c001eb70:	ef                   	out    dx,eax
c001eb71:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001eb77:	89 f2                	mov    edx,esi
c001eb79:	ee                   	out    dx,al
c001eb7a:	89 c8                	mov    eax,ecx
c001eb7c:	89 fa                	mov    edx,edi
c001eb7e:	ef                   	out    dx,eax
c001eb7f:	89 f2                	mov    edx,esi
c001eb81:	ed                   	in     eax,dx
c001eb82:	0f b6 c0             	movzx  eax,al
c001eb85:	83 c4 10             	add    esp,0x10
c001eb88:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001eb8e:	74 5a                	je     c001ebea <IDE::open(int, int, void*)+0x222>
c001eb90:	83 ec 0c             	sub    esp,0xc
c001eb93:	68 db 5c 02 c0       	push   0xc0025cdb
c001eb98:	eb 48                	jmp    c001ebe2 <IDE::open(int, int, void*)+0x21a>
c001eb9a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001eba3:	75 2b                	jne    c001ebd0 <IDE::open(int, int, void*)+0x208>
c001eba5:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ebac:	3d 80 00 00 00       	cmp    eax,0x80
c001ebb1:	74 07                	je     c001ebba <IDE::open(int, int, void*)+0x1f2>
c001ebb3:	3d 8a 00 00 00       	cmp    eax,0x8a
c001ebb8:	75 16                	jne    c001ebd0 <IDE::open(int, int, void*)+0x208>
c001ebba:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ebc1:	83 ec 0c             	sub    esp,0xc
c001ebc4:	68 de 2d 02 c0       	push   0xc0022dde
c001ebc9:	e8 37 e7 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001ebce:	eb 17                	jmp    c001ebe7 <IDE::open(int, int, void*)+0x21f>
c001ebd0:	83 ec 0c             	sub    esp,0xc
c001ebd3:	68 e3 5c 02 c0       	push   0xc0025ce3
c001ebd8:	eb 08                	jmp    c001ebe2 <IDE::open(int, int, void*)+0x21a>
c001ebda:	83 ec 0c             	sub    esp,0xc
c001ebdd:	68 14 5d 02 c0       	push   0xc0025d14
c001ebe2:	e8 0d 11 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001ebe7:	83 c4 10             	add    esp,0x10
c001ebea:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001ebf1:	0f 84 bf 00 00 00    	je     c001ecb6 <IDE::open(int, int, void*)+0x2ee>
c001ebf7:	83 ec 0c             	sub    esp,0xc
c001ebfa:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ec00:	83 e0 fc             	and    eax,0xfffffffc
c001ec03:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ec0a:	83 c0 08             	add    eax,0x8
c001ec0d:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ec14:	68 3e 5d 02 c0       	push   0xc0025d3e
c001ec19:	e8 5e 83 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ec1e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ec25:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ec2c:	50                   	push   eax
c001ec2d:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ec34:	50                   	push   eax
c001ec35:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ec3c:	50                   	push   eax
c001ec3d:	ff 35 e0 f4 02 c0    	push   DWORD PTR ds:0xc002f4e0
c001ec43:	e8 92 f0 ff ff       	call   c001dcda <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ec48:	83 c4 18             	add    esp,0x18
c001ec4b:	83 c8 07             	or     eax,0x7
c001ec4e:	0f b7 c0             	movzx  eax,ax
c001ec51:	50                   	push   eax
c001ec52:	6a 04                	push   0x4
c001ec54:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ec5b:	50                   	push   eax
c001ec5c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ec63:	50                   	push   eax
c001ec64:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ec6b:	50                   	push   eax
c001ec6c:	ff 35 e0 f4 02 c0    	push   DWORD PTR ds:0xc002f4e0
c001ec72:	e8 9f f2 ff ff       	call   c001df16 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001ec77:	83 c4 20             	add    esp,0x20
c001ec7a:	eb 3a                	jmp    c001ecb6 <IDE::open(int, int, void*)+0x2ee>
c001ec7c:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ec82:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ec89:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ec90:	05 06 02 00 00       	add    eax,0x206
c001ec95:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ec9c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001eca3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ecaa:	05 06 02 00 00       	add    eax,0x206
c001ecaf:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ecb6:	83 ec 0c             	sub    esp,0xc
c001ecb9:	68 c0 3b 02 c0       	push   0xc0023bc0
c001ecbe:	e8 42 e6 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001ecc3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ecc9:	83 c4 10             	add    esp,0x10
c001eccc:	89 c2                	mov    edx,eax
c001ecce:	83 e2 0f             	and    edx,0xf
c001ecd1:	83 fa 08             	cmp    edx,0x8
c001ecd4:	75 0a                	jne    c001ece0 <IDE::open(int, int, void*)+0x318>
c001ecd6:	83 e8 02             	sub    eax,0x2
c001ecd9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ece0:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ece6:	89 c2                	mov    edx,eax
c001ece8:	83 e2 0f             	and    edx,0xf
c001eceb:	83 fa 08             	cmp    edx,0x8
c001ecee:	75 0a                	jne    c001ecfa <IDE::open(int, int, void*)+0x332>
c001ecf0:	83 e8 02             	sub    eax,0x2
c001ecf3:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ecfa:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ed01:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ed08:	89 d0                	mov    eax,edx
c001ed0a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ed0d:	8d 7a 01             	lea    edi,[edx+0x1]
c001ed10:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ed14:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ed18:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ed1c:	83 e1 3f             	and    ecx,0x3f
c001ed1f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ed23:	89 f9                	mov    ecx,edi
c001ed25:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ed2c:	0f b6 c9             	movzx  ecx,cl
c001ed2f:	8d 78 02             	lea    edi,[eax+0x2]
c001ed32:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ed35:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ed39:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ed3d:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ed41:	83 e2 3f             	and    edx,0x3f
c001ed44:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ed48:	89 f9                	mov    ecx,edi
c001ed4a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ed50:	0f b6 d1             	movzx  edx,cl
c001ed53:	8d 78 03             	lea    edi,[eax+0x3]
c001ed56:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ed59:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ed5d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ed61:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ed65:	83 e1 3f             	and    ecx,0x3f
c001ed68:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ed6c:	89 fa                	mov    edx,edi
c001ed6e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ed74:	0f b6 ca             	movzx  ecx,dl
c001ed77:	8d 78 04             	lea    edi,[eax+0x4]
c001ed7a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ed7d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ed81:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ed85:	89 fa                	mov    edx,edi
c001ed87:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ed8d:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ed91:	83 e2 3f             	and    edx,0x3f
c001ed94:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ed98:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ed9f:	66 85 f6             	test   si,si
c001eda2:	74 24                	je     c001edc8 <IDE::open(int, int, void*)+0x400>
c001eda4:	89 f9                	mov    ecx,edi
c001eda6:	83 c0 05             	add    eax,0x5
c001eda9:	0f b6 d1             	movzx  edx,cl
c001edac:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001edaf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001edb3:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001edb7:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001edbd:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001edc1:	83 e0 3f             	and    eax,0x3f
c001edc4:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001edc8:	83 ec 0c             	sub    esp,0xc
c001edcb:	68 56 5d 02 c0       	push   0xc0025d56
c001edd0:	e8 30 e5 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001edd5:	58                   	pop    eax
c001edd6:	5a                   	pop    edx
c001edd7:	6a 00                	push   0x0
c001edd9:	53                   	push   ebx
c001edda:	e8 6f f9 ff ff       	call   c001e74e <IDE::prepareInterrupt(unsigned char)>
c001eddf:	59                   	pop    ecx
c001ede0:	5e                   	pop    esi
c001ede1:	6a 01                	push   0x1
c001ede3:	53                   	push   ebx
c001ede4:	e8 65 f9 ff ff       	call   c001e74e <IDE::prepareInterrupt(unsigned char)>
c001ede9:	c7 04 24 d8 55 02 c0 	mov    DWORD PTR [esp],0xc00255d8
c001edf0:	e8 10 e5 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001edf5:	83 c4 0c             	add    esp,0xc
c001edf8:	6a 00                	push   0x0
c001edfa:	6a 00                	push   0x0
c001edfc:	53                   	push   ebx
c001edfd:	e8 7c fb ff ff       	call   c001e97e <IDE::enableIRQs(unsigned char, bool)>
c001ee02:	83 c4 0c             	add    esp,0xc
c001ee05:	6a 00                	push   0x0
c001ee07:	6a 01                	push   0x1
c001ee09:	53                   	push   ebx
c001ee0a:	e8 6f fb ff ff       	call   c001e97e <IDE::enableIRQs(unsigned char, bool)>
c001ee0f:	c7 04 24 58 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d58
c001ee16:	e8 ea e4 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001ee1b:	83 c4 10             	add    esp,0x10
c001ee1e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ee25:	74 3c                	je     c001ee63 <IDE::open(int, int, void*)+0x49b>
c001ee27:	83 ec 0c             	sub    esp,0xc
c001ee2a:	53                   	push   ebx
c001ee2b:	6a 01                	push   0x1
c001ee2d:	68 45 e9 01 c0       	push   0xc001e945
c001ee32:	6a 0e                	push   0xe
c001ee34:	53                   	push   ebx
c001ee35:	e8 c6 ab fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee3a:	83 c4 14             	add    esp,0x14
c001ee3d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ee43:	53                   	push   ebx
c001ee44:	6a 01                	push   0x1
c001ee46:	68 61 e9 01 c0       	push   0xc001e961
c001ee4b:	6a 0f                	push   0xf
c001ee4d:	53                   	push   ebx
c001ee4e:	e8 ad ab fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee53:	83 c4 14             	add    esp,0x14
c001ee56:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ee5c:	68 0e 38 02 c0       	push   0xc002380e
c001ee61:	eb 40                	jmp    c001eea3 <IDE::open(int, int, void*)+0x4db>
c001ee63:	83 ec 0c             	sub    esp,0xc
c001ee66:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ee70:	53                   	push   ebx
c001ee71:	6a 00                	push   0x0
c001ee73:	68 45 e9 01 c0       	push   0xc001e945
c001ee78:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ee7e:	53                   	push   ebx
c001ee7f:	e8 7c ab fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee84:	83 c4 14             	add    esp,0x14
c001ee87:	53                   	push   ebx
c001ee88:	6a 00                	push   0x0
c001ee8a:	68 61 e9 01 c0       	push   0xc001e961
c001ee8f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ee95:	53                   	push   ebx
c001ee96:	e8 65 ab fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee9b:	83 c4 14             	add    esp,0x14
c001ee9e:	68 76 45 02 c0       	push   0xc0024576
c001eea3:	e8 5d e4 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eea8:	83 c4 10             	add    esp,0x10
c001eeab:	83 ec 0c             	sub    esp,0xc
c001eeae:	68 5a 5d 02 c0       	push   0xc0025d5a
c001eeb3:	e8 4d e4 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eeb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eeba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eebd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001eec0:	c7 04 24 e9 49 02 c0 	mov    DWORD PTR [esp],0xc00249e9
c001eec7:	e8 39 e4 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eecc:	83 c4 0c             	add    esp,0xc
c001eecf:	6a 07                	push   0x7
c001eed1:	6a 00                	push   0x0
c001eed3:	53                   	push   ebx
c001eed4:	e8 5b f9 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001eed9:	83 c4 0c             	add    esp,0xc
c001eedc:	6a 07                	push   0x7
c001eede:	6a 01                	push   0x1
c001eee0:	53                   	push   ebx
c001eee1:	e8 4e f9 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001eee6:	c7 04 24 80 42 02 c0 	mov    DWORD PTR [esp],0xc0024280
c001eeed:	e8 13 e4 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eef2:	83 c4 0c             	add    esp,0xc
c001eef5:	6a 01                	push   0x1
c001eef7:	6a 00                	push   0x0
c001eef9:	53                   	push   ebx
c001eefa:	e8 7f fa ff ff       	call   c001e97e <IDE::enableIRQs(unsigned char, bool)>
c001eeff:	83 c4 0c             	add    esp,0xc
c001ef02:	6a 01                	push   0x1
c001ef04:	6a 01                	push   0x1
c001ef06:	53                   	push   ebx
c001ef07:	e8 72 fa ff ff       	call   c001e97e <IDE::enableIRQs(unsigned char, bool)>
c001ef0c:	c7 04 24 5d 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d5d
c001ef13:	e8 ed e3 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001ef18:	83 c4 20             	add    esp,0x20
c001ef1b:	31 c0                	xor    eax,eax
c001ef1d:	5b                   	pop    ebx
c001ef1e:	5e                   	pop    esi
c001ef1f:	5f                   	pop    edi
c001ef20:	c3                   	ret    
c001ef21:	90                   	nop

c001ef22 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ef22:	55                   	push   ebp
c001ef23:	57                   	push   edi
c001ef24:	56                   	push   esi
c001ef25:	53                   	push   ebx
c001ef26:	83 ec 1c             	sub    esp,0x1c
c001ef29:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ef2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ef31:	8d 42 f8             	lea    eax,[edx-0x8]
c001ef34:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef38:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ef3c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ef40:	3c 03                	cmp    al,0x3
c001ef42:	77 5a                	ja     c001ef9e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001ef44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ef48:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ef4c:	0f b6 db             	movzx  ebx,bl
c001ef4f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ef52:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ef57:	0c 80                	or     al,0x80
c001ef59:	50                   	push   eax
c001ef5a:	6a 0c                	push   0xc
c001ef5c:	53                   	push   ebx
c001ef5d:	56                   	push   esi
c001ef5e:	e8 11 f8 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef63:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ef68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ef70:	0f b6 d2             	movzx  edx,dl
c001ef73:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ef77:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ef79:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ef7e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ef82:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ef86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ef8a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ef92:	83 c4 2c             	add    esp,0x2c
c001ef95:	5b                   	pop    ebx
c001ef96:	5e                   	pop    esi
c001ef97:	5f                   	pop    edi
c001ef98:	5d                   	pop    ebp
c001ef99:	e9 d6 f7 ff ff       	jmp    c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef9e:	0f b6 c2             	movzx  eax,dl
c001efa1:	83 f8 07             	cmp    eax,0x7
c001efa4:	77 12                	ja     c001efb8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001efa6:	0f b6 c2             	movzx  eax,dl
c001efa9:	0f b6 db             	movzx  ebx,bl
c001efac:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001efb4:	01 c2                	add    edx,eax
c001efb6:	eb 2f                	jmp    c001efe7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001efb8:	83 f8 0d             	cmp    eax,0xd
c001efbb:	77 13                	ja     c001efd0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001efbd:	0f b6 db             	movzx  ebx,bl
c001efc0:	0f b6 d2             	movzx  edx,dl
c001efc3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001efca:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001efce:	eb 17                	jmp    c001efe7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001efd0:	83 f8 15             	cmp    eax,0x15
c001efd3:	77 14                	ja     c001efe9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001efd5:	0f b6 db             	movzx  ebx,bl
c001efd8:	0f b6 d2             	movzx  edx,dl
c001efdb:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001efe3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001efe7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001efe9:	83 c4 1c             	add    esp,0x1c
c001efec:	5b                   	pop    ebx
c001efed:	5e                   	pop    esi
c001efee:	5f                   	pop    edi
c001efef:	5d                   	pop    ebp
c001eff0:	c3                   	ret    
c001eff1:	90                   	nop

c001eff2 <IDE::detect()>:
c001eff2:	55                   	push   ebp
c001eff3:	57                   	push   edi
c001eff4:	56                   	push   esi
c001eff5:	53                   	push   ebx
c001eff6:	81 ec 28 02 00 00    	sub    esp,0x228
c001effc:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f003:	68 5f 5d 02 c0       	push   0xc0025d5f
c001f008:	e8 f8 e2 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f00d:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f013:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f017:	83 c4 10             	add    esp,0x10
c001f01a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f01f:	0f 85 2f 04 00 00    	jne    c001f454 <IDE::detect()+0x462>
c001f025:	83 ec 0c             	sub    esp,0xc
c001f028:	31 f6                	xor    esi,esi
c001f02a:	68 62 5d 02 c0       	push   0xc0025d62
c001f02f:	31 ff                	xor    edi,edi
c001f031:	e8 cf e2 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f036:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f03d:	83 c4 10             	add    esp,0x10
c001f040:	83 ec 0c             	sub    esp,0xc
c001f043:	68 65 5d 02 c0       	push   0xc0025d65
c001f048:	e8 b8 e2 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f04d:	83 c4 10             	add    esp,0x10
c001f050:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f057:	83 ec 0c             	sub    esp,0xc
c001f05a:	31 ed                	xor    ebp,ebp
c001f05c:	68 68 5d 02 c0       	push   0xc0025d68
c001f061:	e8 9f e2 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f066:	89 f8                	mov    eax,edi
c001f068:	c1 e0 06             	shl    eax,0x6
c001f06b:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f073:	c7 04 24 6b 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d6b
c001f07a:	e8 86 e2 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f07f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f083:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08b:	c1 e0 04             	shl    eax,0x4
c001f08e:	83 c8 a0             	or     eax,0xffffffa0
c001f091:	0f b6 c0             	movzx  eax,al
c001f094:	50                   	push   eax
c001f095:	6a 06                	push   0x6
c001f097:	56                   	push   esi
c001f098:	53                   	push   ebx
c001f099:	e8 d6 f6 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f09e:	83 c4 1c             	add    esp,0x1c
c001f0a1:	6a 0c                	push   0xc
c001f0a3:	56                   	push   esi
c001f0a4:	53                   	push   ebx
c001f0a5:	e8 8a f7 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f0aa:	83 c4 0c             	add    esp,0xc
c001f0ad:	6a 0c                	push   0xc
c001f0af:	56                   	push   esi
c001f0b0:	53                   	push   ebx
c001f0b1:	e8 7e f7 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f0b6:	83 c4 0c             	add    esp,0xc
c001f0b9:	6a 0c                	push   0xc
c001f0bb:	56                   	push   esi
c001f0bc:	53                   	push   ebx
c001f0bd:	e8 72 f7 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f0c2:	83 c4 0c             	add    esp,0xc
c001f0c5:	6a 0c                	push   0xc
c001f0c7:	56                   	push   esi
c001f0c8:	53                   	push   ebx
c001f0c9:	e8 66 f7 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f0ce:	c7 04 24 6e 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d6e
c001f0d5:	e8 2b e2 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f0da:	68 ec 00 00 00       	push   0xec
c001f0df:	6a 07                	push   0x7
c001f0e1:	56                   	push   esi
c001f0e2:	53                   	push   ebx
c001f0e3:	e8 8c f6 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0e8:	83 c4 1c             	add    esp,0x1c
c001f0eb:	6a 0c                	push   0xc
c001f0ed:	56                   	push   esi
c001f0ee:	53                   	push   ebx
c001f0ef:	e8 40 f7 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f0f4:	83 c4 0c             	add    esp,0xc
c001f0f7:	6a 0c                	push   0xc
c001f0f9:	56                   	push   esi
c001f0fa:	53                   	push   ebx
c001f0fb:	e8 34 f7 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f100:	83 c4 0c             	add    esp,0xc
c001f103:	6a 0c                	push   0xc
c001f105:	56                   	push   esi
c001f106:	53                   	push   ebx
c001f107:	e8 28 f7 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f10c:	83 c4 0c             	add    esp,0xc
c001f10f:	6a 0c                	push   0xc
c001f111:	56                   	push   esi
c001f112:	53                   	push   ebx
c001f113:	e8 1c f7 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f118:	c7 04 24 71 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d71
c001f11f:	e8 e1 e1 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f124:	83 c4 0c             	add    esp,0xc
c001f127:	6a 0c                	push   0xc
c001f129:	56                   	push   esi
c001f12a:	53                   	push   ebx
c001f12b:	e8 04 f7 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f130:	83 c4 10             	add    esp,0x10
c001f133:	84 c0                	test   al,al
c001f135:	75 1f                	jne    c001f156 <IDE::detect()+0x164>
c001f137:	83 ec 0c             	sub    esp,0xc
c001f13a:	68 74 5d 02 c0       	push   0xc0025d74
c001f13f:	e8 c1 e1 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f144:	e9 e9 02 00 00       	jmp    c001f432 <IDE::detect()+0x440>
c001f149:	a8 80                	test   al,0x80
c001f14b:	74 21                	je     c001f16e <IDE::detect()+0x17c>
c001f14d:	45                   	inc    ebp
c001f14e:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f154:	7f 1e                	jg     c001f174 <IDE::detect()+0x182>
c001f156:	50                   	push   eax
c001f157:	6a 0c                	push   0xc
c001f159:	56                   	push   esi
c001f15a:	53                   	push   ebx
c001f15b:	e8 d4 f6 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f160:	83 c4 10             	add    esp,0x10
c001f163:	a8 01                	test   al,0x1
c001f165:	74 e2                	je     c001f149 <IDE::detect()+0x157>
c001f167:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f16c:	eb 23                	jmp    c001f191 <IDE::detect()+0x19f>
c001f16e:	a8 08                	test   al,0x8
c001f170:	74 db                	je     c001f14d <IDE::detect()+0x15b>
c001f172:	eb 18                	jmp    c001f18c <IDE::detect()+0x19a>
c001f174:	50                   	push   eax
c001f175:	50                   	push   eax
c001f176:	6a 00                	push   0x0
c001f178:	6a 32                	push   0x32
c001f17a:	e8 85 7e ff ff       	call   c0017004 <milliTenthSleep(unsigned long long)>
c001f17f:	83 c4 10             	add    esp,0x10
c001f182:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f188:	75 cc                	jne    c001f156 <IDE::detect()+0x164>
c001f18a:	eb db                	jmp    c001f167 <IDE::detect()+0x175>
c001f18c:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f191:	83 ec 0c             	sub    esp,0xc
c001f194:	68 77 5d 02 c0       	push   0xc0025d77
c001f199:	e8 67 e1 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f19e:	83 c4 10             	add    esp,0x10
c001f1a1:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f1a6:	74 5f                	je     c001f207 <IDE::detect()+0x215>
c001f1a8:	51                   	push   ecx
c001f1a9:	6a 04                	push   0x4
c001f1ab:	56                   	push   esi
c001f1ac:	53                   	push   ebx
c001f1ad:	e8 82 f6 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f1b2:	83 c4 0c             	add    esp,0xc
c001f1b5:	89 c5                	mov    ebp,eax
c001f1b7:	6a 05                	push   0x5
c001f1b9:	56                   	push   esi
c001f1ba:	53                   	push   ebx
c001f1bb:	e8 74 f6 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f1c0:	83 c4 10             	add    esp,0x10
c001f1c3:	89 e9                	mov    ecx,ebp
c001f1c5:	0f b6 c0             	movzx  eax,al
c001f1c8:	0f b6 e9             	movzx  ebp,cl
c001f1cb:	83 fd 14             	cmp    ebp,0x14
c001f1ce:	75 07                	jne    c001f1d7 <IDE::detect()+0x1e5>
c001f1d0:	3d eb 00 00 00       	cmp    eax,0xeb
c001f1d5:	eb 0e                	jmp    c001f1e5 <IDE::detect()+0x1f3>
c001f1d7:	3d 96 00 00 00       	cmp    eax,0x96
c001f1dc:	0f 85 53 02 00 00    	jne    c001f435 <IDE::detect()+0x443>
c001f1e2:	83 fd 69             	cmp    ebp,0x69
c001f1e5:	0f 85 4a 02 00 00    	jne    c001f435 <IDE::detect()+0x443>
c001f1eb:	68 a1 00 00 00       	push   0xa1
c001f1f0:	6a 07                	push   0x7
c001f1f2:	56                   	push   esi
c001f1f3:	53                   	push   ebx
c001f1f4:	e8 7b f5 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1f9:	58                   	pop    eax
c001f1fa:	5a                   	pop    edx
c001f1fb:	6a 00                	push   0x0
c001f1fd:	6a 0a                	push   0xa
c001f1ff:	e8 00 7e ff ff       	call   c0017004 <milliTenthSleep(unsigned long long)>
c001f204:	83 c4 10             	add    esp,0x10
c001f207:	83 ec 0c             	sub    esp,0xc
c001f20a:	89 fd                	mov    ebp,edi
c001f20c:	68 7a 5d 02 c0       	push   0xc0025d7a
c001f211:	c1 e5 06             	shl    ebp,0x6
c001f214:	e8 ec e0 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f219:	01 dd                	add    ebp,ebx
c001f21b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f21f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f226:	52                   	push   edx
c001f227:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f22b:	6a 00                	push   0x0
c001f22d:	56                   	push   esi
c001f22e:	53                   	push   ebx
c001f22f:	e8 ee fc ff ff       	call   c001ef22 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f234:	83 c4 14             	add    esp,0x14
c001f237:	68 7e 5d 02 c0       	push   0xc0025d7e
c001f23c:	e8 c4 e0 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f241:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f246:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f24d:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f254:	89 f0                	mov    eax,esi
c001f256:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f25c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f260:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f26a:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f271:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f279:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f280:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f288:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f28e:	c7 04 24 82 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d82
c001f295:	e8 6b e0 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f29a:	83 c4 10             	add    esp,0x10
c001f29d:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f2a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f2a8:	74 09                	je     c001f2b3 <IDE::detect()+0x2c1>
c001f2aa:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f2b1:	eb 07                	jmp    c001f2ba <IDE::detect()+0x2c8>
c001f2b3:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f2ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f2be:	89 f8                	mov    eax,edi
c001f2c0:	83 ec 0c             	sub    esp,0xc
c001f2c3:	c1 e0 06             	shl    eax,0x6
c001f2c6:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f2c9:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f2cf:	68 86 5d 02 c0       	push   0xc0025d86
c001f2d4:	e8 2c e0 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f2d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f2dd:	89 e8                	mov    eax,ebp
c001f2df:	83 c4 10             	add    esp,0x10
c001f2e2:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f2e5:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f2e8:	83 c0 02             	add    eax,0x2
c001f2eb:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f2f1:	83 c2 02             	add    edx,0x2
c001f2f4:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f2f7:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f2fd:	39 d5                	cmp    ebp,edx
c001f2ff:	75 e4                	jne    c001f2e5 <IDE::detect()+0x2f3>
c001f301:	89 f8                	mov    eax,edi
c001f303:	c1 e0 06             	shl    eax,0x6
c001f306:	01 d8                	add    eax,ebx
c001f308:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f30f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f316:	c1 ea 09             	shr    edx,0x9
c001f319:	83 e2 01             	and    edx,0x1
c001f31c:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f323:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f329:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f32d:	74 0c                	je     c001f33b <IDE::detect()+0x349>
c001f32f:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f338:	0f 95 c2             	setne  dl
c001f33b:	83 ec 0c             	sub    esp,0xc
c001f33e:	89 fd                	mov    ebp,edi
c001f340:	c1 e5 06             	shl    ebp,0x6
c001f343:	01 dd                	add    ebp,ebx
c001f345:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f34b:	68 8a 5d 02 c0       	push   0xc0025d8a
c001f350:	e8 b0 df fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f355:	83 c4 10             	add    esp,0x10
c001f358:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f35d:	75 66                	jne    c001f3c5 <IDE::detect()+0x3d3>
c001f35f:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f366:	0f 84 b8 00 00 00    	je     c001f424 <IDE::detect()+0x432>
c001f36c:	83 ec 0c             	sub    esp,0xc
c001f36f:	68 8e 5d 02 c0       	push   0xc0025d8e
c001f374:	e8 8c df fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f379:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f380:	e8 12 05 ff ff       	call   c000f897 <malloc>
c001f385:	89 04 24             	mov    DWORD PTR [esp],eax
c001f388:	89 c5                	mov    ebp,eax
c001f38a:	e8 43 05 00 00       	call   c001f8d2 <ATA::ATA()>
c001f38f:	c7 04 24 92 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d92
c001f396:	e8 6a df fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f39b:	59                   	pop    ecx
c001f39c:	58                   	pop    eax
c001f39d:	55                   	push   ebp
c001f39e:	53                   	push   ebx
c001f39f:	e8 b0 a6 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f3a4:	c7 04 24 97 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d97
c001f3ab:	e8 55 df fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f3b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f3b3:	53                   	push   ebx
c001f3b4:	57                   	push   edi
c001f3b5:	6a 00                	push   0x0
c001f3b7:	55                   	push   ebp
c001f3b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f3bb:	83 c4 14             	add    esp,0x14
c001f3be:	68 9c 5d 02 c0       	push   0xc0025d9c
c001f3c3:	eb 57                	jmp    c001f41c <IDE::detect()+0x42a>
c001f3c5:	83 ec 0c             	sub    esp,0xc
c001f3c8:	68 a1 5d 02 c0       	push   0xc0025da1
c001f3cd:	e8 33 df fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f3d2:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f3d9:	e8 b9 04 ff ff       	call   c000f897 <malloc>
c001f3de:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3e1:	89 c5                	mov    ebp,eax
c001f3e3:	e8 98 0c 00 00       	call   c0020080 <ATAPI::ATAPI()>
c001f3e8:	c7 04 24 a7 5d 02 c0 	mov    DWORD PTR [esp],0xc0025da7
c001f3ef:	e8 11 df fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f3f4:	58                   	pop    eax
c001f3f5:	5a                   	pop    edx
c001f3f6:	55                   	push   ebp
c001f3f7:	53                   	push   ebx
c001f3f8:	e8 57 a6 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f3fd:	c7 04 24 ae 5d 02 c0 	mov    DWORD PTR [esp],0xc0025dae
c001f404:	e8 fc de fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f409:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f40c:	53                   	push   ebx
c001f40d:	57                   	push   edi
c001f40e:	6a 00                	push   0x0
c001f410:	55                   	push   ebp
c001f411:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f414:	83 c4 14             	add    esp,0x14
c001f417:	68 b5 5d 02 c0       	push   0xc0025db5
c001f41c:	e8 e4 de fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f421:	83 c4 10             	add    esp,0x10
c001f424:	83 ec 0c             	sub    esp,0xc
c001f427:	47                   	inc    edi
c001f428:	68 bc 5d 02 c0       	push   0xc0025dbc
c001f42d:	e8 d3 de fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f432:	83 c4 10             	add    esp,0x10
c001f435:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f439:	74 0c                	je     c001f447 <IDE::detect()+0x455>
c001f43b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f442:	e9 10 fc ff ff       	jmp    c001f057 <IDE::detect()+0x65>
c001f447:	4e                   	dec    esi
c001f448:	74 0a                	je     c001f454 <IDE::detect()+0x462>
c001f44a:	be 01 00 00 00       	mov    esi,0x1
c001f44f:	e9 ec fb ff ff       	jmp    c001f040 <IDE::detect()+0x4e>
c001f454:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f45a:	5b                   	pop    ebx
c001f45b:	5e                   	pop    esi
c001f45c:	5f                   	pop    edi
c001f45d:	5d                   	pop    ebp
c001f45e:	c3                   	ret    
c001f45f:	90                   	nop

c001f460 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f460:	55                   	push   ebp
c001f461:	57                   	push   edi
c001f462:	56                   	push   esi
c001f463:	53                   	push   ebx
c001f464:	83 ec 1c             	sub    esp,0x1c
c001f467:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f46b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f46f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f473:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f477:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f47b:	88 c3                	mov    bl,al
c001f47d:	25 ff 00 00 00       	and    eax,0xff
c001f482:	0f 84 88 00 00 00    	je     c001f510 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f488:	83 ec 0c             	sub    esp,0xc
c001f48b:	89 c7                	mov    edi,eax
c001f48d:	68 c0 5d 02 c0       	push   0xc0025dc0
c001f492:	e8 e5 7a fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f497:	83 c4 10             	add    esp,0x10
c001f49a:	83 ff 01             	cmp    edi,0x1
c001f49d:	74 6b                	je     c001f50a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f49f:	83 ff 02             	cmp    edi,0x2
c001f4a2:	75 58                	jne    c001f4fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f4a4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f4a9:	01 ff                	add    edi,edi
c001f4ab:	50                   	push   eax
c001f4ac:	09 fe                	or     esi,edi
c001f4ae:	6a 01                	push   0x1
c001f4b0:	89 f0                	mov    eax,esi
c001f4b2:	0f b6 f0             	movzx  esi,al
c001f4b5:	c1 e6 06             	shl    esi,0x6
c001f4b8:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f4c0:	50                   	push   eax
c001f4c1:	55                   	push   ebp
c001f4c2:	e8 6d f3 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f4c7:	83 c4 10             	add    esp,0x10
c001f4ca:	a8 01                	test   al,0x1
c001f4cc:	74 02                	je     c001f4d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f4ce:	b3 07                	mov    bl,0x7
c001f4d0:	a8 02                	test   al,0x2
c001f4d2:	74 02                	je     c001f4d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f4d4:	b3 03                	mov    bl,0x3
c001f4d6:	a8 04                	test   al,0x4
c001f4d8:	74 02                	je     c001f4dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f4da:	b3 14                	mov    bl,0x14
c001f4dc:	a8 08                	test   al,0x8
c001f4de:	74 02                	je     c001f4e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f4e0:	b3 03                	mov    bl,0x3
c001f4e2:	a8 10                	test   al,0x10
c001f4e4:	74 02                	je     c001f4e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f4e6:	b3 15                	mov    bl,0x15
c001f4e8:	a8 20                	test   al,0x20
c001f4ea:	74 02                	je     c001f4ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f4ec:	b3 03                	mov    bl,0x3
c001f4ee:	a8 40                	test   al,0x40
c001f4f0:	74 02                	je     c001f4f4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f4f2:	b3 16                	mov    bl,0x16
c001f4f4:	a8 80                	test   al,0x80
c001f4f6:	74 18                	je     c001f510 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f4f8:	b3 0d                	mov    bl,0xd
c001f4fa:	eb 14                	jmp    c001f510 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f4fc:	83 ff 03             	cmp    edi,0x3
c001f4ff:	74 0d                	je     c001f50e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f501:	83 ff 04             	cmp    edi,0x4
c001f504:	75 0a                	jne    c001f510 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f506:	b3 08                	mov    bl,0x8
c001f508:	eb 06                	jmp    c001f510 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f50a:	b3 13                	mov    bl,0x13
c001f50c:	eb 02                	jmp    c001f510 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f50e:	b3 17                	mov    bl,0x17
c001f510:	83 c4 1c             	add    esp,0x1c
c001f513:	88 d8                	mov    al,bl
c001f515:	5b                   	pop    ebx
c001f516:	5e                   	pop    esi
c001f517:	5f                   	pop    edi
c001f518:	5d                   	pop    ebp
c001f519:	c3                   	ret    

c001f51a <IDE::polling(unsigned char, unsigned int)>:
c001f51a:	57                   	push   edi
c001f51b:	56                   	push   esi
c001f51c:	53                   	push   ebx
c001f51d:	bb 04 00 00 00       	mov    ebx,0x4
c001f522:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f526:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f52b:	52                   	push   edx
c001f52c:	6a 0c                	push   0xc
c001f52e:	56                   	push   esi
c001f52f:	57                   	push   edi
c001f530:	e8 ff f2 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f535:	83 c4 10             	add    esp,0x10
c001f538:	4b                   	dec    ebx
c001f539:	75 f0                	jne    c001f52b <IDE::polling(unsigned char, unsigned int)+0x11>
c001f53b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f540:	50                   	push   eax
c001f541:	6a 0c                	push   0xc
c001f543:	56                   	push   esi
c001f544:	57                   	push   edi
c001f545:	e8 ea f2 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f54a:	83 c4 10             	add    esp,0x10
c001f54d:	a8 01                	test   al,0x1
c001f54f:	75 17                	jne    c001f568 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f551:	a8 20                	test   al,0x20
c001f553:	75 0f                	jne    c001f564 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f555:	4b                   	dec    ebx
c001f556:	74 10                	je     c001f568 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f558:	a8 80                	test   al,0x80
c001f55a:	75 e4                	jne    c001f540 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f55c:	a8 08                	test   al,0x8
c001f55e:	74 e0                	je     c001f540 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f560:	31 c0                	xor    eax,eax
c001f562:	eb 06                	jmp    c001f56a <IDE::polling(unsigned char, unsigned int)+0x50>
c001f564:	b0 01                	mov    al,0x1
c001f566:	eb 02                	jmp    c001f56a <IDE::polling(unsigned char, unsigned int)+0x50>
c001f568:	b0 02                	mov    al,0x2
c001f56a:	5b                   	pop    ebx
c001f56b:	5e                   	pop    esi
c001f56c:	5f                   	pop    edi
c001f56d:	c3                   	ret    

c001f56e <SATABus::close(int, int, void*)>:
c001f56e:	31 c0                	xor    eax,eax
c001f570:	c3                   	ret    
c001f571:	90                   	nop

c001f572 <SATABus::detect()>:
c001f572:	c3                   	ret    
c001f573:	90                   	nop

c001f574 <SATABus::SATABus()>:
c001f574:	83 ec 0c             	sub    esp,0xc
c001f577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f57b:	83 ec 08             	sub    esp,0x8
c001f57e:	68 f8 5d 02 c0       	push   0xc0025df8
c001f583:	50                   	push   eax
c001f584:	e8 23 a8 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001f589:	83 c4 10             	add    esp,0x10
c001f58c:	ba 24 5e 02 c0       	mov    edx,0xc0025e24
c001f591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f595:	89 10                	mov    DWORD PTR [eax],edx
c001f597:	83 ec 0c             	sub    esp,0xc
c001f59a:	6a 50                	push   0x50
c001f59c:	e8 18 0a ff ff       	call   c000ffb9 <Phys::allocateContiguousPages(int)>
c001f5a1:	83 c4 10             	add    esp,0x10
c001f5a4:	89 c2                	mov    edx,eax
c001f5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5aa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f5b0:	83 ec 0c             	sub    esp,0xc
c001f5b3:	6a 50                	push   0x50
c001f5b5:	e8 6d 3d ff ff       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c001f5ba:	83 c4 10             	add    esp,0x10
c001f5bd:	89 c2                	mov    edx,eax
c001f5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f5c9:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c001f5ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f5d2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f5d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f5dc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f5e2:	83 ec 0c             	sub    esp,0xc
c001f5e5:	6a 03                	push   0x3
c001f5e7:	6a 50                	push   0x50
c001f5e9:	51                   	push   ecx
c001f5ea:	52                   	push   edx
c001f5eb:	50                   	push   eax
c001f5ec:	e8 03 46 ff ff       	call   c0013bf4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f5f1:	83 c4 20             	add    esp,0x20
c001f5f4:	90                   	nop
c001f5f5:	83 c4 0c             	add    esp,0xc
c001f5f8:	c3                   	ret    
c001f5f9:	90                   	nop

c001f5fa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f5fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f5fe:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f601:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f604:	09 c2                	or     edx,eax
c001f606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f60a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f610:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f612:	31 c0                	xor    eax,eax
c001f614:	c1 e9 08             	shr    ecx,0x8
c001f617:	83 e1 0f             	and    ecx,0xf
c001f61a:	39 c8                	cmp    eax,ecx
c001f61c:	74 0a                	je     c001f628 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f61e:	f6 c2 01             	test   dl,0x1
c001f621:	74 08                	je     c001f62b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f623:	d1 ea                	shr    edx,1
c001f625:	40                   	inc    eax
c001f626:	eb f2                	jmp    c001f61a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f628:	83 c8 ff             	or     eax,0xffffffff
c001f62b:	c3                   	ret    

c001f62c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f62c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f630:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f633:	89 c2                	mov    edx,eax
c001f635:	c1 ea 08             	shr    edx,0x8
c001f638:	83 e2 0f             	and    edx,0xf
c001f63b:	4a                   	dec    edx
c001f63c:	75 32                	jne    c001f670 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f63e:	83 e0 0f             	and    eax,0xf
c001f641:	83 f8 03             	cmp    eax,0x3
c001f644:	75 2a                	jne    c001f670 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f646:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f649:	b8 02 00 00 00       	mov    eax,0x2
c001f64e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f654:	74 1c                	je     c001f672 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f656:	b8 04 00 00 00       	mov    eax,0x4
c001f65b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f661:	74 0f                	je     c001f672 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f663:	31 c0                	xor    eax,eax
c001f665:	83 fa 03             	cmp    edx,0x3
c001f668:	0f 94 c0             	sete   al
c001f66b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f66f:	c3                   	ret    
c001f670:	31 c0                	xor    eax,eax
c001f672:	c3                   	ret    
c001f673:	90                   	nop

c001f674 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f674:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f678:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f67b:	0f ba e2 0f          	bt     edx,0xf
c001f67f:	72 f7                	jb     c001f678 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f681:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f684:	83 ca 10             	or     edx,0x10
c001f687:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f68a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f68d:	83 ca 01             	or     edx,0x1
c001f690:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f693:	c3                   	ret    

c001f694 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f694:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f698:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f69b:	83 e2 fe             	and    edx,0xfffffffe
c001f69e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f6a1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f6a4:	83 e2 ef             	and    edx,0xffffffef
c001f6a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f6aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f6ad:	0f ba e2 0e          	bt     edx,0xe
c001f6b1:	72 f7                	jb     c001f6aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f6b3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f6b6:	0f ba e2 0f          	bt     edx,0xf
c001f6ba:	72 ee                	jb     c001f6aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f6bc:	c3                   	ret    
c001f6bd:	90                   	nop

c001f6be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f6be:	55                   	push   ebp
c001f6bf:	57                   	push   edi
c001f6c0:	56                   	push   esi
c001f6c1:	53                   	push   ebx
c001f6c2:	83 ec 1c             	sub    esp,0x1c
c001f6c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f6c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f6cd:	53                   	push   ebx
c001f6ce:	56                   	push   esi
c001f6cf:	e8 c0 ff ff ff       	call   c001f694 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f6d4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f6d8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f6de:	83 ec 0c             	sub    esp,0xc
c001f6e1:	c1 e5 0a             	shl    ebp,0xa
c001f6e4:	01 e8                	add    eax,ebp
c001f6e6:	89 03                	mov    DWORD PTR [ebx],eax
c001f6e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f6ea:	68 00 04 00 00       	push   0x400
c001f6ef:	6a 00                	push   0x0
c001f6f1:	50                   	push   eax
c001f6f2:	e8 f9 0d fe ff       	call   c00004f0 <memset>
c001f6f7:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f6fd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001f701:	01 e8                	add    eax,ebp
c001f703:	83 c4 1c             	add    esp,0x1c
c001f706:	89 03                	mov    DWORD PTR [ebx],eax
c001f708:	c1 e2 08             	shl    edx,0x8
c001f70b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f712:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001f718:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f71e:	01 f8                	add    eax,edi
c001f720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f723:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f726:	68 00 01 00 00       	push   0x100
c001f72b:	6a 00                	push   0x0
c001f72d:	50                   	push   eax
c001f72e:	e8 bd 0d fe ff       	call   c00004f0 <memset>
c001f733:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001f739:	01 fa                	add    edx,edi
c001f73b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f73f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f742:	c1 e7 0d             	shl    edi,0xd
c001f745:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f74c:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f752:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f758:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f75c:	31 ff                	xor    edi,edi
c001f75e:	83 c4 10             	add    esp,0x10
c001f761:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f76b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f771:	83 c5 20             	add    ebp,0x20
c001f774:	01 f8                	add    eax,edi
c001f776:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f779:	52                   	push   edx
c001f77a:	68 00 01 00 00       	push   0x100
c001f77f:	6a 00                	push   0x0
c001f781:	50                   	push   eax
c001f782:	e8 69 0d fe ff       	call   c00004f0 <memset>
c001f787:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f78b:	83 c4 10             	add    esp,0x10
c001f78e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f794:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f79b:	01 f8                	add    eax,edi
c001f79d:	81 c7 00 01 00 00    	add    edi,0x100
c001f7a3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f7a6:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f7ac:	75 b3                	jne    c001f761 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001f7ae:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f7b5:	50                   	push   eax
c001f7b6:	50                   	push   eax
c001f7b7:	53                   	push   ebx
c001f7b8:	56                   	push   esi
c001f7b9:	e8 b6 fe ff ff       	call   c001f674 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f7be:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f7c5:	83 c4 2c             	add    esp,0x2c
c001f7c8:	5b                   	pop    ebx
c001f7c9:	5e                   	pop    esi
c001f7ca:	5f                   	pop    edi
c001f7cb:	5d                   	pop    ebp
c001f7cc:	c3                   	ret    
c001f7cd:	90                   	nop

c001f7ce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f7ce:	55                   	push   ebp
c001f7cf:	57                   	push   edi
c001f7d0:	56                   	push   esi
c001f7d1:	53                   	push   ebx
c001f7d2:	31 db                	xor    ebx,ebx
c001f7d4:	83 ec 0c             	sub    esp,0xc
c001f7d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f7db:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f7df:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f7e2:	f7 c7 01 00 00 00    	test   edi,0x1
c001f7e8:	74 7a                	je     c001f864 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f7ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f7ee:	89 d8                	mov    eax,ebx
c001f7f0:	c1 e0 07             	shl    eax,0x7
c001f7f3:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f7fa:	55                   	push   ebp
c001f7fb:	56                   	push   esi
c001f7fc:	e8 2b fe ff ff       	call   c001f62c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f801:	5a                   	pop    edx
c001f802:	83 f8 01             	cmp    eax,0x1
c001f805:	59                   	pop    ecx
c001f806:	75 21                	jne    c001f829 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f808:	50                   	push   eax
c001f809:	53                   	push   ebx
c001f80a:	55                   	push   ebp
c001f80b:	56                   	push   esi
c001f80c:	e8 ad fe ff ff       	call   c001f6be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f811:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f818:	e8 7a 00 ff ff       	call   c000f897 <malloc>
c001f81d:	89 c5                	mov    ebp,eax
c001f81f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f822:	e8 25 0f 00 00       	call   c002074c <SATA::SATA()>
c001f827:	eb 24                	jmp    c001f84d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f829:	83 f8 04             	cmp    eax,0x4
c001f82c:	75 36                	jne    c001f864 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f82e:	51                   	push   ecx
c001f82f:	53                   	push   ebx
c001f830:	55                   	push   ebp
c001f831:	56                   	push   esi
c001f832:	e8 87 fe ff ff       	call   c001f6be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f837:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f83e:	e8 54 00 ff ff       	call   c000f897 <malloc>
c001f843:	89 c5                	mov    ebp,eax
c001f845:	89 04 24             	mov    DWORD PTR [esp],eax
c001f848:	e8 97 12 00 00       	call   c0020ae4 <SATAPI::SATAPI()>
c001f84d:	58                   	pop    eax
c001f84e:	5a                   	pop    edx
c001f84f:	55                   	push   ebp
c001f850:	56                   	push   esi
c001f851:	e8 fe a1 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f856:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f859:	56                   	push   esi
c001f85a:	6a 00                	push   0x0
c001f85c:	53                   	push   ebx
c001f85d:	55                   	push   ebp
c001f85e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f861:	83 c4 20             	add    esp,0x20
c001f864:	d1 ef                	shr    edi,1
c001f866:	43                   	inc    ebx
c001f867:	83 fb 20             	cmp    ebx,0x20
c001f86a:	0f 85 72 ff ff ff    	jne    c001f7e2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f870:	83 c4 0c             	add    esp,0xc
c001f873:	5b                   	pop    ebx
c001f874:	5e                   	pop    esi
c001f875:	5f                   	pop    edi
c001f876:	5d                   	pop    ebp
c001f877:	c3                   	ret    

c001f878 <SATABus::open(int, int, void*)>:
c001f878:	53                   	push   ebx
c001f879:	83 ec 08             	sub    esp,0x8
c001f87c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f880:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f886:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f88c:	e8 77 72 ff ff       	call   c0016b08 <KeDisablePreemption()>
c001f891:	52                   	push   edx
c001f892:	52                   	push   edx
c001f893:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f899:	53                   	push   ebx
c001f89a:	e8 2f ff ff ff       	call   c001f7ce <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f89f:	e8 8c 72 ff ff       	call   c0016b30 <KeRestorePreemption()>
c001f8a4:	31 c0                	xor    eax,eax
c001f8a6:	83 c4 18             	add    esp,0x18
c001f8a9:	5b                   	pop    ebx
c001f8aa:	c3                   	ret    
c001f8ab:	90                   	nop

c001f8ac <ATA::close(int, int, void*)>:
c001f8ac:	83 ec 0c             	sub    esp,0xc
c001f8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f8b9:	85 c0                	test   eax,eax
c001f8bb:	74 0c                	je     c001f8c9 <ATA::close(int, int, void*)+0x1d>
c001f8bd:	83 ec 0c             	sub    esp,0xc
c001f8c0:	8b 10                	mov    edx,DWORD PTR [eax]
c001f8c2:	50                   	push   eax
c001f8c3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f8c6:	83 c4 10             	add    esp,0x10
c001f8c9:	31 c0                	xor    eax,eax
c001f8cb:	83 c4 0c             	add    esp,0xc
c001f8ce:	c3                   	ret    
c001f8cf:	90                   	nop

c001f8d0 <ATA::powerSaving(PowerSavingLevel)>:
c001f8d0:	c3                   	ret    
c001f8d1:	90                   	nop

c001f8d2 <ATA::ATA()>:
c001f8d2:	83 ec 0c             	sub    esp,0xc
c001f8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d9:	83 ec 04             	sub    esp,0x4
c001f8dc:	68 00 02 00 00       	push   0x200
c001f8e1:	68 a5 5f 02 c0       	push   0xc0025fa5
c001f8e6:	50                   	push   eax
c001f8e7:	e8 4a a5 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f8ec:	83 c4 10             	add    esp,0x10
c001f8ef:	ba 0c 5f 02 c0       	mov    edx,0xc0025f0c
c001f8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f8:	89 10                	mov    DWORD PTR [eax],edx
c001f8fa:	90                   	nop
c001f8fb:	83 c4 0c             	add    esp,0xc
c001f8fe:	c3                   	ret    
c001f8ff:	90                   	nop

c001f900 <ATA::flush(bool)>:
c001f900:	53                   	push   ebx
c001f901:	83 ec 08             	sub    esp,0x8
c001f904:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f908:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f90d:	83 f8 01             	cmp    eax,0x1
c001f910:	19 c0                	sbb    eax,eax
c001f912:	83 e0 fd             	and    eax,0xfffffffd
c001f915:	05 ea 00 00 00       	add    eax,0xea
c001f91a:	50                   	push   eax
c001f91b:	6a 07                	push   0x7
c001f91d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f924:	50                   	push   eax
c001f925:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f92b:	e8 44 ee ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f930:	83 c4 0c             	add    esp,0xc
c001f933:	6a 00                	push   0x0
c001f935:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f93c:	50                   	push   eax
c001f93d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f943:	e8 d2 fb ff ff       	call   c001f51a <IDE::polling(unsigned char, unsigned int)>
c001f948:	83 c4 18             	add    esp,0x18
c001f94b:	5b                   	pop    ebx
c001f94c:	c3                   	ret    
c001f94d:	90                   	nop

c001f94e <ATA::readyForCommand()>:
c001f94e:	56                   	push   esi
c001f94f:	53                   	push   ebx
c001f950:	31 db                	xor    ebx,ebx
c001f952:	50                   	push   eax
c001f953:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f957:	50                   	push   eax
c001f958:	6a 0c                	push   0xc
c001f95a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f961:	50                   	push   eax
c001f962:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f968:	e8 c7 ee ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c001f96d:	83 c4 10             	add    esp,0x10
c001f970:	a8 88                	test   al,0x88
c001f972:	74 20                	je     c001f994 <ATA::readyForCommand()+0x46>
c001f974:	43                   	inc    ebx
c001f975:	83 fb 63             	cmp    ebx,0x63
c001f978:	7e dd                	jle    c001f957 <ATA::readyForCommand()+0x9>
c001f97a:	51                   	push   ecx
c001f97b:	51                   	push   ecx
c001f97c:	6a 00                	push   0x0
c001f97e:	6a 0a                	push   0xa
c001f980:	e8 7f 76 ff ff       	call   c0017004 <milliTenthSleep(unsigned long long)>
c001f985:	83 c4 10             	add    esp,0x10
c001f988:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f98e:	75 c7                	jne    c001f957 <ATA::readyForCommand()+0x9>
c001f990:	31 c0                	xor    eax,eax
c001f992:	eb 02                	jmp    c001f996 <ATA::readyForCommand()+0x48>
c001f994:	b0 01                	mov    al,0x1
c001f996:	5a                   	pop    edx
c001f997:	5b                   	pop    ebx
c001f998:	5e                   	pop    esi
c001f999:	c3                   	ret    

c001f99a <ATA::access(unsigned long long, int, void*, bool)>:
c001f99a:	55                   	push   ebp
c001f99b:	57                   	push   edi
c001f99c:	56                   	push   esi
c001f99d:	53                   	push   ebx
c001f99e:	83 ec 2c             	sub    esp,0x2c
c001f9a1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f9a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f9a9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f9ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f9b1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f9b5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f9b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f9bd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f9c7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f9cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9d1:	c1 e0 06             	shl    eax,0x6
c001f9d4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f9dc:	74 5d                	je     c001fa3b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001f9de:	89 fa                	mov    edx,edi
c001f9e0:	89 f0                	mov    eax,esi
c001f9e2:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f9e6:	c1 ea 1c             	shr    edx,0x1c
c001f9e9:	89 d1                	mov    ecx,edx
c001f9eb:	09 c1                	or     ecx,eax
c001f9ed:	74 25                	je     c001fa14 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001f9ef:	31 ed                	xor    ebp,ebp
c001f9f1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f9f8:	89 fa                	mov    edx,edi
c001f9fa:	89 f0                	mov    eax,esi
c001f9fc:	0f ad d0             	shrd   eax,edx,cl
c001f9ff:	d3 ea                	shr    edx,cl
c001fa01:	f6 c1 20             	test   cl,0x20
c001fa04:	74 02                	je     c001fa08 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001fa06:	89 d0                	mov    eax,edx
c001fa08:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fa0c:	45                   	inc    ebp
c001fa0d:	83 fd 06             	cmp    ebp,0x6
c001fa10:	75 df                	jne    c001f9f1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001fa12:	eb 76                	jmp    c001fa8a <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001fa14:	89 f0                	mov    eax,esi
c001fa16:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fa1b:	89 fa                	mov    edx,edi
c001fa1d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fa24:	0f ac d0 10          	shrd   eax,edx,0x10
c001fa28:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fa2d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fa31:	c1 ee 18             	shr    esi,0x18
c001fa34:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fa39:	eb 56                	jmp    c001fa91 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001fa3b:	6a 00                	push   0x0
c001fa3d:	6a 3f                	push   0x3f
c001fa3f:	57                   	push   edi
c001fa40:	56                   	push   esi
c001fa41:	e8 ae 20 00 00       	call   c0021af4 <__umoddi3>
c001fa46:	83 c4 10             	add    esp,0x10
c001fa49:	40                   	inc    eax
c001fa4a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fa4e:	6a 00                	push   0x0
c001fa50:	68 f0 03 00 00       	push   0x3f0
c001fa55:	57                   	push   edi
c001fa56:	56                   	push   esi
c001fa57:	e8 98 1f 00 00       	call   c00219f4 <__udivdi3>
c001fa5c:	83 c4 10             	add    esp,0x10
c001fa5f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fa64:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fa6b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fa70:	6a 00                	push   0x0
c001fa72:	6a 3f                	push   0x3f
c001fa74:	57                   	push   edi
c001fa75:	56                   	push   esi
c001fa76:	e8 79 1f 00 00       	call   c00219f4 <__udivdi3>
c001fa7b:	83 c4 10             	add    esp,0x10
c001fa7e:	83 e0 0f             	and    eax,0xf
c001fa81:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fa86:	89 c6                	mov    esi,eax
c001fa88:	eb 07                	jmp    c001fa91 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001fa8a:	31 f6                	xor    esi,esi
c001fa8c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001fa91:	55                   	push   ebp
c001fa92:	6a 00                	push   0x0
c001fa94:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa9b:	50                   	push   eax
c001fa9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001faa0:	e8 d9 ee ff ff       	call   c001e97e <IDE::enableIRQs(unsigned char, bool)>
c001faa5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001faa8:	e8 a1 fe ff ff       	call   c001f94e <ATA::readyForCommand()>
c001faad:	83 c4 10             	add    esp,0x10
c001fab0:	84 c0                	test   al,al
c001fab2:	75 0a                	jne    c001fabe <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001fab4:	be 01 00 00 00       	mov    esi,0x1
c001fab9:	e9 c2 02 00 00       	jmp    c001fd80 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001fabe:	fa                   	cli    
c001fabf:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001fac5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001facb:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001fad0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fad6:	75 0a                	jne    c001fae2 <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001fad8:	c1 e0 04             	shl    eax,0x4
c001fadb:	09 c6                	or     esi,eax
c001fadd:	83 ce a0             	or     esi,0xffffffa0
c001fae0:	eb 08                	jmp    c001faea <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001fae2:	c1 e0 04             	shl    eax,0x4
c001fae5:	09 c6                	or     esi,eax
c001fae7:	83 ce e0             	or     esi,0xffffffe0
c001faea:	89 f0                	mov    eax,esi
c001faec:	0f b6 d2             	movzx  edx,dl
c001faef:	0f b6 f0             	movzx  esi,al
c001faf2:	56                   	push   esi
c001faf3:	6a 06                	push   0x6
c001faf5:	52                   	push   edx
c001faf6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fafc:	e8 73 ec ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb01:	83 c4 10             	add    esp,0x10
c001fb04:	6a 00                	push   0x0
c001fb06:	6a 01                	push   0x1
c001fb08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb0f:	50                   	push   eax
c001fb10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb16:	e8 59 ec ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb1b:	83 c4 10             	add    esp,0x10
c001fb1e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001fb23:	83 f8 02             	cmp    eax,0x2
c001fb26:	75 6e                	jne    c001fb96 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001fb28:	6a 00                	push   0x0
c001fb2a:	6a 08                	push   0x8
c001fb2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb33:	50                   	push   eax
c001fb34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb3a:	e8 35 ec ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb3f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fb44:	50                   	push   eax
c001fb45:	6a 09                	push   0x9
c001fb47:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb4e:	50                   	push   eax
c001fb4f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb55:	e8 1a ec ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb5a:	83 c4 20             	add    esp,0x20
c001fb5d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fb62:	50                   	push   eax
c001fb63:	6a 0a                	push   0xa
c001fb65:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb6c:	50                   	push   eax
c001fb6d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb73:	e8 fc eb ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb78:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fb7d:	50                   	push   eax
c001fb7e:	6a 0b                	push   0xb
c001fb80:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb87:	50                   	push   eax
c001fb88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb8e:	e8 e1 eb ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb93:	83 c4 20             	add    esp,0x20
c001fb96:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fb9b:	50                   	push   eax
c001fb9c:	6a 02                	push   0x2
c001fb9e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fba5:	50                   	push   eax
c001fba6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbac:	e8 c3 eb ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbb1:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fbb6:	50                   	push   eax
c001fbb7:	6a 03                	push   0x3
c001fbb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbc0:	50                   	push   eax
c001fbc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbc7:	e8 a8 eb ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbcc:	83 c4 20             	add    esp,0x20
c001fbcf:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fbd4:	50                   	push   eax
c001fbd5:	6a 04                	push   0x4
c001fbd7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbde:	50                   	push   eax
c001fbdf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbe5:	e8 8a eb ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbea:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fbef:	50                   	push   eax
c001fbf0:	6a 05                	push   0x5
c001fbf2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbf9:	50                   	push   eax
c001fbfa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc00:	e8 6f eb ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc05:	83 c4 20             	add    esp,0x20
c001fc08:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fc0d:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001fc12:	74 13                	je     c001fc27 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001fc14:	83 f8 02             	cmp    eax,0x2
c001fc17:	74 20                	je     c001fc39 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001fc19:	48                   	dec    eax
c001fc1a:	0f 85 94 fe ff ff    	jne    c001fab4 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001fc20:	b8 30 00 00 00       	mov    eax,0x30
c001fc25:	eb 1e                	jmp    c001fc45 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001fc27:	83 f8 02             	cmp    eax,0x2
c001fc2a:	74 14                	je     c001fc40 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001fc2c:	48                   	dec    eax
c001fc2d:	b8 20 00 00 00       	mov    eax,0x20
c001fc32:	74 11                	je     c001fc45 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001fc34:	e9 7b fe ff ff       	jmp    c001fab4 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001fc39:	b8 34 00 00 00       	mov    eax,0x34
c001fc3e:	eb 05                	jmp    c001fc45 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001fc40:	b8 24 00 00 00       	mov    eax,0x24
c001fc45:	50                   	push   eax
c001fc46:	6a 07                	push   0x7
c001fc48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc4f:	50                   	push   eax
c001fc50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc56:	e8 19 eb ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc5b:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c001fc62:	83 c4 10             	add    esp,0x10
c001fc65:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c001fc6c:	75 01                	jne    c001fc6f <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001fc6e:	fb                   	sti    
c001fc6f:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001fc73:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001fc78:	85 f6                	test   esi,esi
c001fc7a:	0f 84 dd 00 00 00    	je     c001fd5d <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001fc80:	57                   	push   edi
c001fc81:	6a 01                	push   0x1
c001fc83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc8a:	50                   	push   eax
c001fc8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc91:	e8 84 f8 ff ff       	call   c001f51a <IDE::polling(unsigned char, unsigned int)>
c001fc96:	83 c4 10             	add    esp,0x10
c001fc99:	0f b6 c0             	movzx  eax,al
c001fc9c:	85 c0                	test   eax,eax
c001fc9e:	74 23                	je     c001fcc3 <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001fca0:	50                   	push   eax
c001fca1:	89 c6                	mov    esi,eax
c001fca3:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fcaa:	50                   	push   eax
c001fcab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcb2:	50                   	push   eax
c001fcb3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcb9:	e8 a2 f7 ff ff       	call   c001f460 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fcbe:	e9 ba 00 00 00       	jmp    c001fd7d <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001fcc3:	85 ed                	test   ebp,ebp
c001fcc5:	74 49                	je     c001fd10 <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001fcc7:	fa                   	cli    
c001fcc8:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001fcce:	31 c9                	xor    ecx,ecx
c001fcd0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fcd4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fcd8:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001fcdc:	51                   	push   ecx
c001fcdd:	51                   	push   ecx
c001fcde:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fce5:	50                   	push   eax
c001fce6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcec:	e8 71 ea ff ff       	call   c001e762 <IDE::getBase(unsigned char)>
c001fcf1:	89 c2                	mov    edx,eax
c001fcf3:	89 f8                	mov    eax,edi
c001fcf5:	66 ef                	out    dx,ax
c001fcf7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fcfb:	83 c4 10             	add    esp,0x10
c001fcfe:	41                   	inc    ecx
c001fcff:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001fd05:	75 c9                	jne    c001fcd0 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001fd07:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c001fd0e:	eb 35                	jmp    c001fd45 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001fd10:	fa                   	cli    
c001fd11:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001fd17:	52                   	push   edx
c001fd18:	52                   	push   edx
c001fd19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd20:	50                   	push   eax
c001fd21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd27:	e8 36 ea ff ff       	call   c001e762 <IDE::getBase(unsigned char)>
c001fd2c:	b9 00 01 00 00       	mov    ecx,0x100
c001fd31:	89 c2                	mov    edx,eax
c001fd33:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001fd37:	fc                   	cld    
c001fd38:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001fd3b:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c001fd42:	83 c4 10             	add    esp,0x10
c001fd45:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c001fd4c:	75 01                	jne    c001fd4f <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001fd4e:	fb                   	sti    
c001fd4f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001fd57:	4e                   	dec    esi
c001fd58:	e9 1b ff ff ff       	jmp    c001fc78 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001fd5d:	31 f6                	xor    esi,esi
c001fd5f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fd64:	74 1a                	je     c001fd80 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001fd66:	50                   	push   eax
c001fd67:	50                   	push   eax
c001fd68:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001fd6d:	83 f8 02             	cmp    eax,0x2
c001fd70:	0f 94 c0             	sete   al
c001fd73:	0f b6 c0             	movzx  eax,al
c001fd76:	50                   	push   eax
c001fd77:	53                   	push   ebx
c001fd78:	e8 83 fb ff ff       	call   c001f900 <ATA::flush(bool)>
c001fd7d:	83 c4 10             	add    esp,0x10
c001fd80:	83 c4 2c             	add    esp,0x2c
c001fd83:	89 f0                	mov    eax,esi
c001fd85:	5b                   	pop    ebx
c001fd86:	5e                   	pop    esi
c001fd87:	5f                   	pop    edi
c001fd88:	5d                   	pop    ebp
c001fd89:	c3                   	ret    

c001fd8a <ATA::read(unsigned long long, int, void*)>:
c001fd8a:	57                   	push   edi
c001fd8b:	b8 04 00 00 00       	mov    eax,0x4
c001fd90:	56                   	push   esi
c001fd91:	53                   	push   ebx
c001fd92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fd96:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fd9a:	8d 7a ff             	lea    edi,[edx-0x1]
c001fd9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fda1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fda5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fdab:	77 25                	ja     c001fdd2 <ATA::read(unsigned long long, int, void*)+0x48>
c001fdad:	b8 06 00 00 00       	mov    eax,0x6
c001fdb2:	85 f6                	test   esi,esi
c001fdb4:	74 1c                	je     c001fdd2 <ATA::read(unsigned long long, int, void*)+0x48>
c001fdb6:	50                   	push   eax
c001fdb7:	50                   	push   eax
c001fdb8:	6a 00                	push   0x0
c001fdba:	56                   	push   esi
c001fdbb:	52                   	push   edx
c001fdbc:	53                   	push   ebx
c001fdbd:	51                   	push   ecx
c001fdbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fdc2:	e8 d3 fb ff ff       	call   c001f99a <ATA::access(unsigned long long, int, void*, bool)>
c001fdc7:	83 c4 20             	add    esp,0x20
c001fdca:	85 c0                	test   eax,eax
c001fdcc:	0f 95 c0             	setne  al
c001fdcf:	0f b6 c0             	movzx  eax,al
c001fdd2:	5b                   	pop    ebx
c001fdd3:	5e                   	pop    esi
c001fdd4:	5f                   	pop    edi
c001fdd5:	c3                   	ret    

c001fdd6 <ATA::write(unsigned long long, int, void*)>:
c001fdd6:	57                   	push   edi
c001fdd7:	b8 04 00 00 00       	mov    eax,0x4
c001fddc:	56                   	push   esi
c001fddd:	53                   	push   ebx
c001fdde:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fde2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fde6:	8d 7a ff             	lea    edi,[edx-0x1]
c001fde9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fded:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fdf1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fdf7:	77 25                	ja     c001fe1e <ATA::write(unsigned long long, int, void*)+0x48>
c001fdf9:	b8 06 00 00 00       	mov    eax,0x6
c001fdfe:	85 f6                	test   esi,esi
c001fe00:	74 1c                	je     c001fe1e <ATA::write(unsigned long long, int, void*)+0x48>
c001fe02:	50                   	push   eax
c001fe03:	50                   	push   eax
c001fe04:	6a 01                	push   0x1
c001fe06:	56                   	push   esi
c001fe07:	52                   	push   edx
c001fe08:	53                   	push   ebx
c001fe09:	51                   	push   ecx
c001fe0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fe0e:	e8 87 fb ff ff       	call   c001f99a <ATA::access(unsigned long long, int, void*, bool)>
c001fe13:	83 c4 20             	add    esp,0x20
c001fe16:	85 c0                	test   eax,eax
c001fe18:	0f 95 c0             	setne  al
c001fe1b:	0f b6 c0             	movzx  eax,al
c001fe1e:	5b                   	pop    ebx
c001fe1f:	5e                   	pop    esi
c001fe20:	5f                   	pop    edi
c001fe21:	c3                   	ret    

c001fe22 <ATA::detectCHS()>:
c001fe22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fe26:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fe2c:	c1 e0 06             	shl    eax,0x6
c001fe2f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fe35:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fe3f:	c7 44 24 04 48 5e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025e48
c001fe47:	e9 a8 fe fe ff       	jmp    c000fcf4 <KePanic(char const*)>

c001fe4c <ATA::open(int, int, void*)>:
c001fe4c:	53                   	push   ebx
c001fe4d:	83 ec 08             	sub    esp,0x8
c001fe50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fe54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fe58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fe5c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fe62:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fe68:	c1 e0 06             	shl    eax,0x6
c001fe6b:	01 d0                	add    eax,edx
c001fe6d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fe74:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fe7a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fe81:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fe8b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fe91:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fe98:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fe9f:	75 0c                	jne    c001fead <ATA::open(int, int, void*)+0x61>
c001fea1:	83 ec 0c             	sub    esp,0xc
c001fea4:	53                   	push   ebx
c001fea5:	e8 78 ff ff ff       	call   c001fe22 <ATA::detectCHS()>
c001feaa:	83 c4 10             	add    esp,0x10
c001fead:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001feb3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001feb9:	c1 e0 06             	shl    eax,0x6
c001febc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fec3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fecd:	d1 e8                	shr    eax,1
c001fecf:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fed5:	6a 04                	push   0x4
c001fed7:	6a 0c                	push   0xc
c001fed9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fee0:	50                   	push   eax
c001fee1:	52                   	push   edx
c001fee2:	e8 8d e8 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fee7:	90                   	nop
c001fee8:	90                   	nop
c001fee9:	6a 00                	push   0x0
c001feeb:	6a 0c                	push   0xc
c001feed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fef4:	50                   	push   eax
c001fef5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fefb:	e8 74 e8 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff00:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ff06:	83 c4 20             	add    esp,0x20
c001ff09:	c1 e0 06             	shl    eax,0x6
c001ff0c:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001ff12:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001ff19:	0f 84 00 01 00 00    	je     c002001f <ATA::open(int, int, void*)+0x1d3>
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	6a 08                	push   0x8
c001ff24:	e8 90 00 ff ff       	call   c000ffb9 <Phys::allocateContiguousPages(int)>
c001ff29:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ff2f:	c7 04 24 5a 5e 02 c0 	mov    DWORD PTR [esp],0xc0025e5a
c001ff36:	e8 41 70 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ff3b:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ff42:	e8 e0 33 ff ff       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c001ff47:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ff4d:	6a 03                	push   0x3
c001ff4f:	50                   	push   eax
c001ff50:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ff56:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c001ff5c:	e8 a9 3a ff ff       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ff61:	83 c4 20             	add    esp,0x20
c001ff64:	e8 7f ff fe ff       	call   c000fee8 <Phys::allocatePage()>
c001ff69:	83 ec 0c             	sub    esp,0xc
c001ff6c:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001ff72:	6a 01                	push   0x1
c001ff74:	e8 ae 33 ff ff       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c001ff79:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001ff7f:	6a 03                	push   0x3
c001ff81:	50                   	push   eax
c001ff82:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001ff88:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c001ff8e:	e8 77 3a ff ff       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ff93:	83 c4 14             	add    esp,0x14
c001ff96:	68 93 5e 02 c0       	push   0xc0025e93
c001ff9b:	e8 dc 6f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ffa0:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001ffa7:	50                   	push   eax
c001ffa8:	6a 12                	push   0x12
c001ffaa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffb1:	50                   	push   eax
c001ffb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffb8:	e8 b7 e7 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffbd:	83 c4 20             	add    esp,0x20
c001ffc0:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001ffc6:	0f b6 c4             	movzx  eax,ah
c001ffc9:	50                   	push   eax
c001ffca:	6a 13                	push   0x13
c001ffcc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffd3:	50                   	push   eax
c001ffd4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffda:	e8 95 e7 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffdf:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001ffe6:	50                   	push   eax
c001ffe7:	6a 14                	push   0x14
c001ffe9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fff0:	50                   	push   eax
c001fff1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fff7:	e8 78 e7 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fffc:	83 c4 20             	add    esp,0x20
c001ffff:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c0020006:	50                   	push   eax
c0020007:	6a 15                	push   0x15
c0020009:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020010:	50                   	push   eax
c0020011:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020017:	e8 58 e7 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002001c:	83 c4 10             	add    esp,0x10
c002001f:	83 ec 0c             	sub    esp,0xc
c0020022:	53                   	push   ebx
c0020023:	e8 76 9e fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020028:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002002b:	e8 0e ad fe ff       	call   c000ad3e <createPartitionsForDisk(PhysicalDisk*)>
c0020030:	31 c0                	xor    eax,eax
c0020032:	83 c4 18             	add    esp,0x18
c0020035:	5b                   	pop    ebx
c0020036:	c3                   	ret    

c0020037 <combineCharAndColour(char, unsigned char)>:
c0020037:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002003c:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c0020042:	c1 e0 08             	shl    eax,0x8
c0020045:	09 d0                	or     eax,edx
c0020047:	c3                   	ret    

c0020048 <combineColours(unsigned char, unsigned char)>:
c0020048:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002004d:	c1 e0 04             	shl    eax,0x4
c0020050:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0020054:	c3                   	ret    
c0020055:	90                   	nop

c0020056 <ATAPI::write(unsigned long long, int, void*)>:
c0020056:	b8 03 00 00 00       	mov    eax,0x3
c002005b:	c3                   	ret    

c002005c <ATAPI::close(int, int, void*)>:
c002005c:	83 ec 0c             	sub    esp,0xc
c002005f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020063:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020069:	85 c0                	test   eax,eax
c002006b:	74 0c                	je     c0020079 <ATAPI::close(int, int, void*)+0x1d>
c002006d:	83 ec 0c             	sub    esp,0xc
c0020070:	8b 10                	mov    edx,DWORD PTR [eax]
c0020072:	50                   	push   eax
c0020073:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020076:	83 c4 10             	add    esp,0x10
c0020079:	31 c0                	xor    eax,eax
c002007b:	83 c4 0c             	add    esp,0xc
c002007e:	c3                   	ret    
c002007f:	90                   	nop

c0020080 <ATAPI::ATAPI()>:
c0020080:	83 ec 0c             	sub    esp,0xc
c0020083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020087:	83 ec 04             	sub    esp,0x4
c002008a:	68 00 08 00 00       	push   0x800
c002008f:	68 45 60 02 c0       	push   0xc0026045
c0020094:	50                   	push   eax
c0020095:	e8 9c 9d fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002009a:	83 c4 10             	add    esp,0x10
c002009d:	ba 54 5f 02 c0       	mov    edx,0xc0025f54
c00200a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a6:	89 10                	mov    DWORD PTR [eax],edx
c00200a8:	90                   	nop
c00200a9:	83 c4 0c             	add    esp,0xc
c00200ac:	c3                   	ret    
c00200ad:	90                   	nop

c00200ae <ATAPI::readyForCommand()>:
c00200ae:	56                   	push   esi
c00200af:	53                   	push   ebx
c00200b0:	31 db                	xor    ebx,ebx
c00200b2:	50                   	push   eax
c00200b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00200b7:	50                   	push   eax
c00200b8:	6a 0c                	push   0xc
c00200ba:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00200c1:	50                   	push   eax
c00200c2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00200c8:	e8 67 e7 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c00200cd:	83 c4 10             	add    esp,0x10
c00200d0:	a8 88                	test   al,0x88
c00200d2:	74 26                	je     c00200fa <ATAPI::readyForCommand()+0x4c>
c00200d4:	43                   	inc    ebx
c00200d5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00200db:	7e da                	jle    c00200b7 <ATAPI::readyForCommand()+0x9>
c00200dd:	51                   	push   ecx
c00200de:	51                   	push   ecx
c00200df:	6a 00                	push   0x0
c00200e1:	68 5e 01 00 00       	push   0x15e
c00200e6:	e8 19 6f ff ff       	call   c0017004 <milliTenthSleep(unsigned long long)>
c00200eb:	83 c4 10             	add    esp,0x10
c00200ee:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00200f4:	75 c1                	jne    c00200b7 <ATAPI::readyForCommand()+0x9>
c00200f6:	31 c0                	xor    eax,eax
c00200f8:	eb 02                	jmp    c00200fc <ATAPI::readyForCommand()+0x4e>
c00200fa:	b0 01                	mov    al,0x1
c00200fc:	5a                   	pop    edx
c00200fd:	5b                   	pop    ebx
c00200fe:	5e                   	pop    esi
c00200ff:	c3                   	ret    

c0020100 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020100:	55                   	push   ebp
c0020101:	57                   	push   edi
c0020102:	56                   	push   esi
c0020103:	53                   	push   ebx
c0020104:	83 ec 20             	sub    esp,0x20
c0020107:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002010b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002010f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020113:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020117:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002011b:	6a 01                	push   0x1
c002011d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020124:	50                   	push   eax
c0020125:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002012b:	e8 4e e8 ff ff       	call   c001e97e <IDE::enableIRQs(unsigned char, bool)>
c0020130:	5e                   	pop    esi
c0020131:	58                   	pop    eax
c0020132:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020139:	50                   	push   eax
c002013a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020140:	e8 09 e6 ff ff       	call   c001e74e <IDE::prepareInterrupt(unsigned char)>
c0020145:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020148:	e8 61 ff ff ff       	call   c00200ae <ATAPI::readyForCommand()>
c002014d:	83 c4 10             	add    esp,0x10
c0020150:	84 c0                	test   al,al
c0020152:	75 0a                	jne    c002015e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020154:	bb 01 00 00 00       	mov    ebx,0x1
c0020159:	e9 60 02 00 00       	jmp    c00203be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002015e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0020164:	c1 e0 04             	shl    eax,0x4
c0020167:	0f b6 c0             	movzx  eax,al
c002016a:	50                   	push   eax
c002016b:	6a 06                	push   0x6
c002016d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020174:	50                   	push   eax
c0020175:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002017b:	e8 f4 e5 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020180:	6a 00                	push   0x0
c0020182:	6a 01                	push   0x1
c0020184:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002018b:	50                   	push   eax
c002018c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020192:	e8 dd e5 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020197:	83 c4 20             	add    esp,0x20
c002019a:	0f b6 c3             	movzx  eax,bl
c002019d:	0f b6 df             	movzx  ebx,bh
c00201a0:	50                   	push   eax
c00201a1:	6a 04                	push   0x4
c00201a3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201aa:	50                   	push   eax
c00201ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201b1:	e8 be e5 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201b6:	53                   	push   ebx
c00201b7:	6a 05                	push   0x5
c00201b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201c0:	50                   	push   eax
c00201c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201c7:	e8 a8 e5 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201cc:	83 c4 20             	add    esp,0x20
c00201cf:	68 a0 00 00 00       	push   0xa0
c00201d4:	6a 07                	push   0x7
c00201d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201dd:	50                   	push   eax
c00201de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201e4:	e8 8b e5 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201e9:	83 c4 0c             	add    esp,0xc
c00201ec:	6a 01                	push   0x1
c00201ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201f5:	50                   	push   eax
c00201f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201fc:	e8 19 f3 ff ff       	call   c001f51a <IDE::polling(unsigned char, unsigned int)>
c0020201:	83 c4 10             	add    esp,0x10
c0020204:	0f b6 d8             	movzx  ebx,al
c0020207:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002020d:	85 db                	test   ebx,ebx
c002020f:	74 20                	je     c0020231 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0020211:	53                   	push   ebx
c0020212:	0f b6 c0             	movzx  eax,al
c0020215:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002021c:	52                   	push   edx
c002021d:	50                   	push   eax
c002021e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020224:	e8 37 f2 ff ff       	call   c001f460 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020229:	83 c4 10             	add    esp,0x10
c002022c:	e9 8d 01 00 00       	jmp    c00203be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020231:	0f b6 c0             	movzx  eax,al
c0020234:	53                   	push   ebx
c0020235:	53                   	push   ebx
c0020236:	50                   	push   eax
c0020237:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002023d:	e8 20 e5 ff ff       	call   c001e762 <IDE::getBase(unsigned char)>
c0020242:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020246:	b9 06 00 00 00       	mov    ecx,0x6
c002024b:	89 c2                	mov    edx,eax
c002024d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020250:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020254:	83 c4 10             	add    esp,0x10
c0020257:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002025c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020260:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020266:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002026d:	85 db                	test   ebx,ebx
c002026f:	0f 84 ec 00 00 00    	je     c0020361 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c0020275:	51                   	push   ecx
c0020276:	51                   	push   ecx
c0020277:	52                   	push   edx
c0020278:	50                   	push   eax
c0020279:	e8 64 e6 ff ff       	call   c001e8e2 <IDE::waitInterrupt(unsigned char)>
c002027e:	83 c4 10             	add    esp,0x10
c0020281:	84 c0                	test   al,al
c0020283:	0f 84 cb fe ff ff    	je     c0020154 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020289:	56                   	push   esi
c002028a:	56                   	push   esi
c002028b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020292:	50                   	push   eax
c0020293:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020299:	e8 b0 e4 ff ff       	call   c001e74e <IDE::prepareInterrupt(unsigned char)>
c002029e:	83 c4 0c             	add    esp,0xc
c00202a1:	6a 04                	push   0x4
c00202a3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202aa:	50                   	push   eax
c00202ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202b1:	e8 7e e5 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c00202b6:	83 c4 0c             	add    esp,0xc
c00202b9:	89 c6                	mov    esi,eax
c00202bb:	6a 05                	push   0x5
c00202bd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202c4:	50                   	push   eax
c00202c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202cb:	e8 64 e5 ff ff       	call   c001e834 <IDE::read(unsigned char, unsigned char)>
c00202d0:	89 f1                	mov    ecx,esi
c00202d2:	0f b6 c0             	movzx  eax,al
c00202d5:	0f b6 f1             	movzx  esi,cl
c00202d8:	c1 e0 08             	shl    eax,0x8
c00202db:	09 c6                	or     esi,eax
c00202dd:	d1 fe                	sar    esi,1
c00202df:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00202e3:	83 c4 10             	add    esp,0x10
c00202e6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00202eb:	74 41                	je     c002032e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c00202ed:	31 c9                	xor    ecx,ecx
c00202ef:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00202f5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00202fc:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020300:	75 0a                	jne    c002030c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c0020302:	01 c9                	add    ecx,ecx
c0020304:	01 cd                	add    ebp,ecx
c0020306:	4b                   	dec    ebx
c0020307:	e9 54 ff ff ff       	jmp    c0020260 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002030c:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020311:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020315:	51                   	push   ecx
c0020316:	51                   	push   ecx
c0020317:	52                   	push   edx
c0020318:	50                   	push   eax
c0020319:	e8 44 e4 ff ff       	call   c001e762 <IDE::getBase(unsigned char)>
c002031e:	89 c2                	mov    edx,eax
c0020320:	89 f0                	mov    eax,esi
c0020322:	66 ef                	out    dx,ax
c0020324:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020328:	83 c4 10             	add    esp,0x10
c002032b:	41                   	inc    ecx
c002032c:	eb c1                	jmp    c00202ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002032e:	31 f6                	xor    esi,esi
c0020330:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020336:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002033d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020341:	75 06                	jne    c0020349 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c0020343:	01 f6                	add    esi,esi
c0020345:	01 f5                	add    ebp,esi
c0020347:	eb bd                	jmp    c0020306 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c0020349:	51                   	push   ecx
c002034a:	51                   	push   ecx
c002034b:	52                   	push   edx
c002034c:	50                   	push   eax
c002034d:	e8 10 e4 ff ff       	call   c001e762 <IDE::getBase(unsigned char)>
c0020352:	89 c2                	mov    edx,eax
c0020354:	66 ed                	in     ax,dx
c0020356:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002035b:	83 c4 10             	add    esp,0x10
c002035e:	46                   	inc    esi
c002035f:	eb cf                	jmp    c0020330 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c0020361:	51                   	push   ecx
c0020362:	51                   	push   ecx
c0020363:	52                   	push   edx
c0020364:	50                   	push   eax
c0020365:	e8 78 e5 ff ff       	call   c001e8e2 <IDE::waitInterrupt(unsigned char)>
c002036a:	83 c4 10             	add    esp,0x10
c002036d:	84 c0                	test   al,al
c002036f:	0f 84 df fd ff ff    	je     c0020154 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020375:	bb a0 86 01 00       	mov    ebx,0x186a0
c002037a:	52                   	push   edx
c002037b:	52                   	push   edx
c002037c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020383:	50                   	push   eax
c0020384:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002038a:	e8 bf e3 ff ff       	call   c001e74e <IDE::prepareInterrupt(unsigned char)>
c002038f:	83 c4 10             	add    esp,0x10
c0020392:	50                   	push   eax
c0020393:	50                   	push   eax
c0020394:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002039b:	50                   	push   eax
c002039c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203a2:	e8 bb e3 ff ff       	call   c001e762 <IDE::getBase(unsigned char)>
c00203a7:	8d 50 07             	lea    edx,[eax+0x7]
c00203aa:	ec                   	in     al,dx
c00203ab:	83 c4 10             	add    esp,0x10
c00203ae:	a8 88                	test   al,0x88
c00203b0:	74 0a                	je     c00203bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c00203b2:	4b                   	dec    ebx
c00203b3:	75 dd                	jne    c0020392 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c00203b5:	bb 02 00 00 00       	mov    ebx,0x2
c00203ba:	eb 02                	jmp    c00203be <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c00203bc:	31 db                	xor    ebx,ebx
c00203be:	83 c4 1c             	add    esp,0x1c
c00203c1:	89 d8                	mov    eax,ebx
c00203c3:	5b                   	pop    ebx
c00203c4:	5e                   	pop    esi
c00203c5:	5f                   	pop    edi
c00203c6:	5d                   	pop    ebp
c00203c7:	c3                   	ret    

c00203c8 <ATAPI::diskRemoved()>:
c00203c8:	53                   	push   ebx
c00203c9:	83 ec 14             	sub    esp,0x14
c00203cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00203d0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00203d7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00203dd:	e8 4c a6 fe ff       	call   c000aa2e <LogicalDisk::unmount()>
c00203e2:	58                   	pop    eax
c00203e3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00203e9:	e8 1e b0 fe ff       	call   c000b40c <VCache::writeWriteBuffer()>
c00203ee:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00203f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00203f8:	83 c4 18             	add    esp,0x18
c00203fb:	5b                   	pop    ebx
c00203fc:	e9 fb af fe ff       	jmp    c000b3fc <VCache::invalidateReadBuffer()>
c0020401:	90                   	nop

c0020402 <ATAPI::eject()>:
c0020402:	57                   	push   edi
c0020403:	b9 03 00 00 00       	mov    ecx,0x3
c0020408:	53                   	push   ebx
c0020409:	83 ec 14             	sub    esp,0x14
c002040c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020410:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020414:	fc                   	cld    
c0020415:	31 c0                	xor    eax,eax
c0020417:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020419:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002041e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020423:	50                   	push   eax
c0020424:	50                   	push   eax
c0020425:	6a 00                	push   0x0
c0020427:	6a 00                	push   0x0
c0020429:	6a 00                	push   0x0
c002042b:	6a 02                	push   0x2
c002042d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020431:	50                   	push   eax
c0020432:	53                   	push   ebx
c0020433:	e8 c8 fc ff ff       	call   c0020100 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020438:	83 c4 14             	add    esp,0x14
c002043b:	53                   	push   ebx
c002043c:	e8 87 ff ff ff       	call   c00203c8 <ATAPI::diskRemoved()>
c0020441:	83 c4 24             	add    esp,0x24
c0020444:	31 c0                	xor    eax,eax
c0020446:	5b                   	pop    ebx
c0020447:	5f                   	pop    edi
c0020448:	c3                   	ret    
c0020449:	90                   	nop

c002044a <ATAPI::diskInserted()>:
c002044a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002044e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020455:	c3                   	ret    

c0020456 <ATAPI::detectMedia()>:
c0020456:	56                   	push   esi
c0020457:	53                   	push   ebx
c0020458:	83 ec 28             	sub    esp,0x28
c002045b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002045f:	6a 0c                	push   0xc
c0020461:	6a 00                	push   0x0
c0020463:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020467:	56                   	push   esi
c0020468:	e8 83 00 fe ff       	call   c00004f0 <memset>
c002046d:	58                   	pop    eax
c002046e:	5a                   	pop    edx
c002046f:	6a 00                	push   0x0
c0020471:	6a 00                	push   0x0
c0020473:	6a 00                	push   0x0
c0020475:	6a 00                	push   0x0
c0020477:	56                   	push   esi
c0020478:	53                   	push   ebx
c0020479:	e8 82 fc ff ff       	call   c0020100 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002047e:	83 c4 1c             	add    esp,0x1c
c0020481:	6a 0c                	push   0xc
c0020483:	6a 00                	push   0x0
c0020485:	56                   	push   esi
c0020486:	e8 65 00 fe ff       	call   c00004f0 <memset>
c002048b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020490:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020495:	59                   	pop    ecx
c0020496:	58                   	pop    eax
c0020497:	6a 01                	push   0x1
c0020499:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002049d:	50                   	push   eax
c002049e:	6a 00                	push   0x0
c00204a0:	6a 12                	push   0x12
c00204a2:	56                   	push   esi
c00204a3:	53                   	push   ebx
c00204a4:	e8 57 fc ff ff       	call   c0020100 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00204a9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00204ad:	83 c4 20             	add    esp,0x20
c00204b0:	83 e0 7f             	and    eax,0x7f
c00204b3:	83 f8 70             	cmp    eax,0x70
c00204b6:	74 15                	je     c00204cd <ATAPI::detectMedia()+0x77>
c00204b8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00204bf:	75 0c                	jne    c00204cd <ATAPI::detectMedia()+0x77>
c00204c1:	83 ec 0c             	sub    esp,0xc
c00204c4:	53                   	push   ebx
c00204c5:	e8 80 ff ff ff       	call   c002044a <ATAPI::diskInserted()>
c00204ca:	83 c4 10             	add    esp,0x10
c00204cd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00204d1:	83 e0 0f             	and    eax,0xf
c00204d4:	83 f8 02             	cmp    eax,0x2
c00204d7:	75 1b                	jne    c00204f4 <ATAPI::detectMedia()+0x9e>
c00204d9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00204de:	75 2d                	jne    c002050d <ATAPI::detectMedia()+0xb7>
c00204e0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00204e7:	74 24                	je     c002050d <ATAPI::detectMedia()+0xb7>
c00204e9:	83 ec 0c             	sub    esp,0xc
c00204ec:	53                   	push   ebx
c00204ed:	e8 d6 fe ff ff       	call   c00203c8 <ATAPI::diskRemoved()>
c00204f2:	eb 16                	jmp    c002050a <ATAPI::detectMedia()+0xb4>
c00204f4:	85 c0                	test   eax,eax
c00204f6:	75 15                	jne    c002050d <ATAPI::detectMedia()+0xb7>
c00204f8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00204ff:	75 0c                	jne    c002050d <ATAPI::detectMedia()+0xb7>
c0020501:	83 ec 0c             	sub    esp,0xc
c0020504:	53                   	push   ebx
c0020505:	e8 40 ff ff ff       	call   c002044a <ATAPI::diskInserted()>
c002050a:	83 c4 10             	add    esp,0x10
c002050d:	83 c4 24             	add    esp,0x24
c0020510:	5b                   	pop    ebx
c0020511:	5e                   	pop    esi
c0020512:	c3                   	ret    
c0020513:	90                   	nop

c0020514 <ATAPI::open(int, int, void*)>:
c0020514:	56                   	push   esi
c0020515:	53                   	push   ebx
c0020516:	50                   	push   eax
c0020517:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002051b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002051f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020523:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020529:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002052f:	c1 e0 06             	shl    eax,0x6
c0020532:	01 d0                	add    eax,edx
c0020534:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002053b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020541:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020548:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020552:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020558:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002055f:	6a 04                	push   0x4
c0020561:	6a 0c                	push   0xc
c0020563:	51                   	push   ecx
c0020564:	52                   	push   edx
c0020565:	e8 0a e2 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002056a:	90                   	nop
c002056b:	90                   	nop
c002056c:	6a 00                	push   0x0
c002056e:	6a 0c                	push   0xc
c0020570:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020577:	50                   	push   eax
c0020578:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002057e:	e8 f1 e1 ff ff       	call   c001e774 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020583:	83 c4 14             	add    esp,0x14
c0020586:	68 78 01 00 00       	push   0x178
c002058b:	e8 07 f3 fe ff       	call   c000f897 <malloc>
c0020590:	83 c4 0c             	add    esp,0xc
c0020593:	89 c6                	mov    esi,eax
c0020595:	6a 00                	push   0x0
c0020597:	68 ff ff ff 7f       	push   0x7fffffff
c002059c:	6a 00                	push   0x0
c002059e:	6a 00                	push   0x0
c00205a0:	53                   	push   ebx
c00205a1:	68 f7 60 02 c0       	push   0xc00260f7
c00205a6:	50                   	push   eax
c00205a7:	e8 c0 a2 fe ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00205ac:	83 c4 14             	add    esp,0x14
c00205af:	56                   	push   esi
c00205b0:	e8 77 a3 fe ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c00205b5:	5a                   	pop    edx
c00205b6:	0f be c0             	movsx  eax,al
c00205b9:	59                   	pop    ecx
c00205ba:	50                   	push   eax
c00205bb:	68 3c 5f 02 c0       	push   0xc0025f3c
c00205c0:	e8 b7 69 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00205c5:	58                   	pop    eax
c00205c6:	5a                   	pop    edx
c00205c7:	56                   	push   esi
c00205c8:	53                   	push   ebx
c00205c9:	e8 86 94 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c00205ce:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c00205d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00205d7:	e8 c2 98 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c00205dc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00205e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00205e6:	e8 6b fe ff ff       	call   c0020456 <ATAPI::detectMedia()>
c00205eb:	83 c4 14             	add    esp,0x14
c00205ee:	31 c0                	xor    eax,eax
c00205f0:	5b                   	pop    ebx
c00205f1:	5e                   	pop    esi
c00205f2:	c3                   	ret    
c00205f3:	90                   	nop

c00205f4 <ATAPI::read(unsigned long long, int, void*)>:
c00205f4:	55                   	push   ebp
c00205f5:	57                   	push   edi
c00205f6:	56                   	push   esi
c00205f7:	53                   	push   ebx
c00205f8:	83 ec 1c             	sub    esp,0x1c
c00205fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00205ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020603:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020607:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002060e:	74 3c                	je     c002064c <ATAPI::read(unsigned long long, int, void*)+0x58>
c0020610:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020614:	b9 03 00 00 00       	mov    ecx,0x3
c0020619:	fc                   	cld    
c002061a:	31 c0                	xor    eax,eax
c002061c:	0f ce                	bswap  esi
c002061e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020620:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020625:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020629:	89 e8                	mov    eax,ebp
c002062b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002062f:	50                   	push   eax
c0020630:	50                   	push   eax
c0020631:	55                   	push   ebp
c0020632:	c1 e5 0b             	shl    ebp,0xb
c0020635:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020639:	6a 00                	push   0x0
c002063b:	55                   	push   ebp
c002063c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020640:	50                   	push   eax
c0020641:	53                   	push   ebx
c0020642:	e8 b9 fa ff ff       	call   c0020100 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020647:	83 c4 20             	add    esp,0x20
c002064a:	eb 1a                	jmp    c0020666 <ATAPI::read(unsigned long long, int, void*)+0x72>
c002064c:	83 ec 0c             	sub    esp,0xc
c002064f:	53                   	push   ebx
c0020650:	e8 01 fe ff ff       	call   c0020456 <ATAPI::detectMedia()>
c0020655:	83 c4 10             	add    esp,0x10
c0020658:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002065f:	75 af                	jne    c0020610 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020661:	b8 02 00 00 00       	mov    eax,0x2
c0020666:	83 c4 1c             	add    esp,0x1c
c0020669:	5b                   	pop    ebx
c002066a:	5e                   	pop    esi
c002066b:	5f                   	pop    edi
c002066c:	5d                   	pop    ebp
c002066d:	c3                   	ret    

c002066e <SATA::close(int, int, void*)>:
c002066e:	83 ec 0c             	sub    esp,0xc
c0020671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020675:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002067b:	85 c0                	test   eax,eax
c002067d:	74 0c                	je     c002068b <SATA::close(int, int, void*)+0x1d>
c002067f:	83 ec 0c             	sub    esp,0xc
c0020682:	8b 10                	mov    edx,DWORD PTR [eax]
c0020684:	50                   	push   eax
c0020685:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020688:	83 c4 10             	add    esp,0x10
c002068b:	31 c0                	xor    eax,eax
c002068d:	83 c4 0c             	add    esp,0xc
c0020690:	c3                   	ret    
c0020691:	90                   	nop

c0020692 <SATA::powerSaving(PowerSavingLevel)>:
c0020692:	c3                   	ret    
c0020693:	90                   	nop

c0020694 <SATA::open(int, int, void*)>:
c0020694:	56                   	push   esi
c0020695:	53                   	push   ebx
c0020696:	83 ec 10             	sub    esp,0x10
c0020699:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002069d:	68 84 5f 02 c0       	push   0xc0025f84
c00206a2:	e8 d5 68 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00206a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00206ab:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00206b5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00206bb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00206c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00206c9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00206d3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00206d9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00206e0:	e8 03 f8 fe ff       	call   c000fee8 <Phys::allocatePage()>
c00206e5:	89 c6                	mov    esi,eax
c00206e7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00206ed:	81 c6 00 10 00 00    	add    esi,0x1000
c00206f3:	e8 f0 f7 fe ff       	call   c000fee8 <Phys::allocatePage()>
c00206f8:	83 c4 10             	add    esp,0x10
c00206fb:	39 c6                	cmp    esi,eax
c00206fd:	74 10                	je     c002070f <SATA::open(int, int, void*)+0x7b>
c00206ff:	83 ec 0c             	sub    esp,0xc
c0020702:	68 90 5f 02 c0       	push   0xc0025f90
c0020707:	e8 e8 f5 fe ff       	call   c000fcf4 <KePanic(char const*)>
c002070c:	83 c4 10             	add    esp,0x10
c002070f:	83 ec 0c             	sub    esp,0xc
c0020712:	6a 02                	push   0x2
c0020714:	e8 0e 2c ff ff       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c0020719:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002071f:	6a 03                	push   0x3
c0020721:	50                   	push   eax
c0020722:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020728:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c002072e:	e8 d7 32 ff ff       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0020733:	83 c4 14             	add    esp,0x14
c0020736:	53                   	push   ebx
c0020737:	e8 62 97 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c002073c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002073f:	e8 fa a5 fe ff       	call   c000ad3e <createPartitionsForDisk(PhysicalDisk*)>
c0020744:	83 c4 14             	add    esp,0x14
c0020747:	31 c0                	xor    eax,eax
c0020749:	5b                   	pop    ebx
c002074a:	5e                   	pop    esi
c002074b:	c3                   	ret    

c002074c <SATA::SATA()>:
c002074c:	83 ec 0c             	sub    esp,0xc
c002074f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020753:	83 ec 04             	sub    esp,0x4
c0020756:	68 00 02 00 00       	push   0x200
c002075b:	68 a4 5f 02 c0       	push   0xc0025fa4
c0020760:	50                   	push   eax
c0020761:	e8 d0 96 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020766:	83 c4 10             	add    esp,0x10
c0020769:	ba 14 60 02 c0       	mov    edx,0xc0026014
c002076e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020772:	89 10                	mov    DWORD PTR [eax],edx
c0020774:	90                   	nop
c0020775:	83 c4 0c             	add    esp,0xc
c0020778:	c3                   	ret    
c0020779:	90                   	nop

c002077a <SATA::access(unsigned long long, int, void*, bool)>:
c002077a:	55                   	push   ebp
c002077b:	57                   	push   edi
c002077c:	56                   	push   esi
c002077d:	53                   	push   ebx
c002077e:	83 ec 2c             	sub    esp,0x2c
c0020781:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020785:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020789:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002078d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020791:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020795:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020799:	fa                   	cli    
c002079a:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c00207a0:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00207a5:	7e 10                	jle    c00207b7 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c00207a7:	83 ec 0c             	sub    esp,0xc
c00207aa:	68 b4 5f 02 c0       	push   0xc0025fb4
c00207af:	e8 40 f5 fe ff       	call   c000fcf4 <KePanic(char const*)>
c00207b4:	83 c4 10             	add    esp,0x10
c00207b7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00207bd:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00207c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00207c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00207cd:	89 d0                	mov    eax,edx
c00207cf:	c1 e0 07             	shl    eax,0x7
c00207d2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00207d6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00207e0:	51                   	push   ecx
c00207e1:	8d 42 02             	lea    eax,[edx+0x2]
c00207e4:	51                   	push   ecx
c00207e5:	c1 e0 07             	shl    eax,0x7
c00207e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00207ec:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00207f0:	50                   	push   eax
c00207f1:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00207f7:	e8 fe ed ff ff       	call   c001f5fa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00207fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020800:	83 c4 10             	add    esp,0x10
c0020803:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020808:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002080c:	0f 84 a4 01 00 00    	je     c00209b6 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0020812:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020816:	c1 e0 09             	shl    eax,0x9
c0020819:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002081e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020822:	74 0e                	je     c0020832 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0020824:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002082a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002082e:	89 c1                	mov    ecx,eax
c0020830:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020832:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020838:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002083c:	8d 42 02             	lea    eax,[edx+0x2]
c002083f:	c1 e0 07             	shl    eax,0x7
c0020842:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020846:	8b 00                	mov    eax,DWORD PTR [eax]
c0020848:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002084e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020854:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020858:	c1 e1 05             	shl    ecx,0x5
c002085b:	01 c8                	add    eax,ecx
c002085d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020861:	83 e1 01             	and    ecx,0x1
c0020864:	89 ce                	mov    esi,ecx
c0020866:	8a 08                	mov    cl,BYTE PTR [eax]
c0020868:	c1 e6 06             	shl    esi,0x6
c002086b:	83 e1 bf             	and    ecx,0xffffffbf
c002086e:	09 f1                	or     ecx,esi
c0020870:	88 08                	mov    BYTE PTR [eax],cl
c0020872:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020874:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002087a:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020880:	89 08                	mov    DWORD PTR [eax],ecx
c0020882:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020888:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002088e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020894:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020897:	50                   	push   eax
c0020898:	68 90 00 00 00       	push   0x90
c002089d:	6a 00                	push   0x0
c002089f:	56                   	push   esi
c00208a0:	e8 4b fc fd ff       	call   c00004f0 <memset>
c00208a5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00208ab:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00208b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00208b5:	83 c4 10             	add    esp,0x10
c00208b8:	48                   	dec    eax
c00208b9:	25 ff ff 3f 00       	and    eax,0x3fffff
c00208be:	89 c1                	mov    ecx,eax
c00208c0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00208c6:	25 00 00 c0 ff       	and    eax,0xffc00000
c00208cb:	09 c8                	or     eax,ecx
c00208cd:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00208d3:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c00208d9:	83 c8 80             	or     eax,0xffffff80
c00208dc:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c00208e2:	66 8b 06             	mov    ax,WORD PTR [esi]
c00208e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00208e9:	25 00 7f 00 00       	and    eax,0x7f00
c00208ee:	0d 27 80 ff ff       	or     eax,0xffff8027
c00208f3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00208f8:	66 89 06             	mov    WORD PTR [esi],ax
c00208fb:	b0 35                	mov    al,0x35
c00208fd:	75 02                	jne    c0020901 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c00208ff:	b0 25                	mov    al,0x25
c0020901:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020904:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0020908:	89 e8                	mov    eax,ebp
c002090a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002090e:	c1 e8 10             	shr    eax,0x10
c0020911:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020914:	89 e8                	mov    eax,ebp
c0020916:	c1 e8 18             	shr    eax,0x18
c0020919:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002091c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020920:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020923:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020927:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002092a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002092e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020932:	89 d6                	mov    esi,edx
c0020934:	31 c0                	xor    eax,eax
c0020936:	c1 e6 07             	shl    esi,0x7
c0020939:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002093d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0020943:	80 e1 88             	and    cl,0x88
c0020946:	74 0a                	je     c0020952 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020948:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002094d:	74 0a                	je     c0020959 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002094f:	40                   	inc    eax
c0020950:	eb eb                	jmp    c002093d <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0020952:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020957:	75 0a                	jne    c0020963 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020959:	83 ec 0c             	sub    esp,0xc
c002095c:	68 ed 5f 02 c0       	push   0xc0025fed
c0020961:	eb 36                	jmp    c0020999 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c0020963:	b8 01 00 00 00       	mov    eax,0x1
c0020968:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002096c:	c1 e2 07             	shl    edx,0x7
c002096f:	d3 e0                	shl    eax,cl
c0020971:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0020975:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002097b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020981:	85 c8                	test   eax,ecx
c0020983:	74 25                	je     c00209aa <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0020985:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002098b:	0f ba e1 1e          	bt     ecx,0x1e
c002098f:	73 ea                	jae    c002097b <SATA::access(unsigned long long, int, void*, bool)+0x201>
c0020991:	83 ec 0c             	sub    esp,0xc
c0020994:	68 fb 5f 02 c0       	push   0xc0025ffb
c0020999:	e8 de 65 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002099e:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00209a5:	83 c4 10             	add    esp,0x10
c00209a8:	eb 13                	jmp    c00209bd <SATA::access(unsigned long long, int, void*, bool)+0x243>
c00209aa:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00209b0:	0f ba e0 1e          	bt     eax,0x1e
c00209b4:	73 18                	jae    c00209ce <SATA::access(unsigned long long, int, void*, bool)+0x254>
c00209b6:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00209bd:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00209c4:	75 01                	jne    c00209c7 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c00209c6:	fb                   	sti    
c00209c7:	b8 01 00 00 00       	mov    eax,0x1
c00209cc:	eb 2c                	jmp    c00209fa <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00209ce:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00209d3:	75 10                	jne    c00209e5 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c00209d5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00209db:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00209df:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00209e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00209e5:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00209ec:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00209f1:	85 c0                	test   eax,eax
c00209f3:	75 03                	jne    c00209f8 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c00209f5:	fb                   	sti    
c00209f6:	eb 02                	jmp    c00209fa <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00209f8:	31 c0                	xor    eax,eax
c00209fa:	83 c4 2c             	add    esp,0x2c
c00209fd:	5b                   	pop    ebx
c00209fe:	5e                   	pop    esi
c00209ff:	5f                   	pop    edi
c0020a00:	5d                   	pop    ebp
c0020a01:	c3                   	ret    

c0020a02 <SATA::read(unsigned long long, int, void*)>:
c0020a02:	57                   	push   edi
c0020a03:	b8 04 00 00 00       	mov    eax,0x4
c0020a08:	56                   	push   esi
c0020a09:	53                   	push   ebx
c0020a0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020a0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020a12:	8d 7a ff             	lea    edi,[edx-0x1]
c0020a15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020a19:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020a1d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020a23:	77 25                	ja     c0020a4a <SATA::read(unsigned long long, int, void*)+0x48>
c0020a25:	b8 06 00 00 00       	mov    eax,0x6
c0020a2a:	85 f6                	test   esi,esi
c0020a2c:	74 1c                	je     c0020a4a <SATA::read(unsigned long long, int, void*)+0x48>
c0020a2e:	50                   	push   eax
c0020a2f:	50                   	push   eax
c0020a30:	6a 00                	push   0x0
c0020a32:	56                   	push   esi
c0020a33:	52                   	push   edx
c0020a34:	53                   	push   ebx
c0020a35:	51                   	push   ecx
c0020a36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020a3a:	e8 3b fd ff ff       	call   c002077a <SATA::access(unsigned long long, int, void*, bool)>
c0020a3f:	83 c4 20             	add    esp,0x20
c0020a42:	85 c0                	test   eax,eax
c0020a44:	0f 95 c0             	setne  al
c0020a47:	0f b6 c0             	movzx  eax,al
c0020a4a:	5b                   	pop    ebx
c0020a4b:	5e                   	pop    esi
c0020a4c:	5f                   	pop    edi
c0020a4d:	c3                   	ret    

c0020a4e <SATA::write(unsigned long long, int, void*)>:
c0020a4e:	55                   	push   ebp
c0020a4f:	b8 04 00 00 00       	mov    eax,0x4
c0020a54:	57                   	push   edi
c0020a55:	56                   	push   esi
c0020a56:	53                   	push   ebx
c0020a57:	83 ec 0c             	sub    esp,0xc
c0020a5a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020a5e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020a62:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020a65:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020a69:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020a6d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020a73:	77 3d                	ja     c0020ab2 <SATA::write(unsigned long long, int, void*)+0x64>
c0020a75:	b8 06 00 00 00       	mov    eax,0x6
c0020a7a:	85 ed                	test   ebp,ebp
c0020a7c:	74 34                	je     c0020ab2 <SATA::write(unsigned long long, int, void*)+0x64>
c0020a7e:	c1 e3 09             	shl    ebx,0x9
c0020a81:	01 eb                	add    ebx,ebp
c0020a83:	89 d6                	mov    esi,edx
c0020a85:	89 cf                	mov    edi,ecx
c0020a87:	83 c6 01             	add    esi,0x1
c0020a8a:	83 d7 00             	adc    edi,0x0
c0020a8d:	50                   	push   eax
c0020a8e:	50                   	push   eax
c0020a8f:	6a 01                	push   0x1
c0020a91:	55                   	push   ebp
c0020a92:	81 c5 00 02 00 00    	add    ebp,0x200
c0020a98:	6a 01                	push   0x1
c0020a9a:	51                   	push   ecx
c0020a9b:	52                   	push   edx
c0020a9c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020aa0:	e8 d5 fc ff ff       	call   c002077a <SATA::access(unsigned long long, int, void*, bool)>
c0020aa5:	83 c4 20             	add    esp,0x20
c0020aa8:	89 f2                	mov    edx,esi
c0020aaa:	89 f9                	mov    ecx,edi
c0020aac:	39 dd                	cmp    ebp,ebx
c0020aae:	75 d3                	jne    c0020a83 <SATA::write(unsigned long long, int, void*)+0x35>
c0020ab0:	31 c0                	xor    eax,eax
c0020ab2:	83 c4 0c             	add    esp,0xc
c0020ab5:	5b                   	pop    ebx
c0020ab6:	5e                   	pop    esi
c0020ab7:	5f                   	pop    edi
c0020ab8:	5d                   	pop    ebp
c0020ab9:	c3                   	ret    

c0020aba <SATAPI::write(unsigned long long, int, void*)>:
c0020aba:	b8 03 00 00 00       	mov    eax,0x3
c0020abf:	c3                   	ret    

c0020ac0 <SATAPI::close(int, int, void*)>:
c0020ac0:	83 ec 0c             	sub    esp,0xc
c0020ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ac7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020acd:	85 c0                	test   eax,eax
c0020acf:	74 0c                	je     c0020add <SATAPI::close(int, int, void*)+0x1d>
c0020ad1:	83 ec 0c             	sub    esp,0xc
c0020ad4:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ad6:	50                   	push   eax
c0020ad7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020ada:	83 c4 10             	add    esp,0x10
c0020add:	31 c0                	xor    eax,eax
c0020adf:	83 c4 0c             	add    esp,0xc
c0020ae2:	c3                   	ret    
c0020ae3:	90                   	nop

c0020ae4 <SATAPI::SATAPI()>:
c0020ae4:	83 ec 0c             	sub    esp,0xc
c0020ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aeb:	83 ec 04             	sub    esp,0x4
c0020aee:	68 00 08 00 00       	push   0x800
c0020af3:	68 44 60 02 c0       	push   0xc0026044
c0020af8:	50                   	push   eax
c0020af9:	e8 38 93 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020afe:	83 c4 10             	add    esp,0x10
c0020b01:	ba 38 61 02 c0       	mov    edx,0xc0026138
c0020b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b0a:	89 10                	mov    DWORD PTR [eax],edx
c0020b0c:	90                   	nop
c0020b0d:	83 c4 0c             	add    esp,0xc
c0020b10:	c3                   	ret    
c0020b11:	90                   	nop

c0020b12 <SATAPI::diskRemoved()>:
c0020b12:	c3                   	ret    
c0020b13:	90                   	nop

c0020b14 <SATAPI::diskInserted()>:
c0020b14:	83 ec 18             	sub    esp,0x18
c0020b17:	68 50 60 02 c0       	push   0xc0026050
c0020b1c:	e8 5b 64 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020b21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b25:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020b2c:	83 c4 1c             	add    esp,0x1c
c0020b2f:	c3                   	ret    

c0020b30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020b30:	55                   	push   ebp
c0020b31:	57                   	push   edi
c0020b32:	56                   	push   esi
c0020b33:	53                   	push   ebx
c0020b34:	83 ec 34             	sub    esp,0x34
c0020b37:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020b3b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020b3f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0020b43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020b47:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0020b4b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020b51:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020b57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020b5b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020b61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020b65:	83 c0 02             	add    eax,0x2
c0020b68:	c1 e0 07             	shl    eax,0x7
c0020b6b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020b6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b77:	c1 e0 07             	shl    eax,0x7
c0020b7a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020b7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020b82:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020b8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020b90:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020b96:	e8 5f ea ff ff       	call   c001f5fa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020b9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020b9f:	83 c4 10             	add    esp,0x10
c0020ba2:	b8 01 00 00 00       	mov    eax,0x1
c0020ba7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020bac:	0f 84 57 02 00 00    	je     c0020e09 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0020bb2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020bbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bbe:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020bc4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020bca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020bce:	c1 e1 05             	shl    ecx,0x5
c0020bd1:	01 c8                	add    eax,ecx
c0020bd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020bd5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020bdb:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020be1:	89 08                	mov    DWORD PTR [eax],ecx
c0020be3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020be9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020bef:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020bf5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020bf8:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020bfb:	50                   	push   eax
c0020bfc:	68 90 00 00 00       	push   0x90
c0020c01:	6a 00                	push   0x0
c0020c03:	53                   	push   ebx
c0020c04:	e8 e7 f8 fd ff       	call   c00004f0 <memset>
c0020c09:	b9 0c 00 00 00       	mov    ecx,0xc
c0020c0e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020c12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020c14:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020c1a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020c1e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020c24:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020c28:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020c2c:	48                   	dec    eax
c0020c2d:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020c32:	89 c1                	mov    ecx,eax
c0020c34:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020c3a:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020c3f:	09 c8                	or     eax,ecx
c0020c41:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020c47:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020c4d:	83 c8 80             	or     eax,0xffffff80
c0020c50:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0020c56:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020c59:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020c5d:	25 00 7f 00 00       	and    eax,0x7f00
c0020c62:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020c66:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020c6b:	66 89 03             	mov    WORD PTR [ebx],ax
c0020c6e:	89 d0                	mov    eax,edx
c0020c70:	c1 ea 18             	shr    edx,0x18
c0020c73:	c1 e8 10             	shr    eax,0x10
c0020c76:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020c79:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020c7c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020c80:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020c83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c87:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020c8a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020c8e:	83 c4 10             	add    esp,0x10
c0020c91:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020c95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020c99:	31 c0                	xor    eax,eax
c0020c9b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020ca1:	80 e1 88             	and    cl,0x88
c0020ca4:	74 0a                	je     c0020cb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c0020ca6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020cab:	74 0a                	je     c0020cb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c0020cad:	40                   	inc    eax
c0020cae:	eb eb                	jmp    c0020c9b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0020cb0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020cb5:	75 43                	jne    c0020cfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0020cb7:	83 ec 0c             	sub    esp,0xc
c0020cba:	68 68 60 02 c0       	push   0xc0026068
c0020cbf:	e8 b8 62 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020cc4:	58                   	pop    eax
c0020cc5:	5a                   	pop    edx
c0020cc6:	68 7d 60 02 c0       	push   0xc002607d
c0020ccb:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c0020cd1:	e8 26 1a ff ff       	call   c00126fc <VgaText::puts(char const*)>
c0020cd6:	59                   	pop    ecx
c0020cd7:	5b                   	pop    ebx
c0020cd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020cdc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020ce2:	e8 ad e9 ff ff       	call   c001f694 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020ce7:	5e                   	pop    esi
c0020ce8:	5f                   	pop    edi
c0020ce9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020ced:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020cf3:	e8 7c e9 ff ff       	call   c001f674 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020cf8:	eb 48                	jmp    c0020d42 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c0020cfa:	be 01 00 00 00       	mov    esi,0x1
c0020cff:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020d03:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020d07:	d3 e6                	shl    esi,cl
c0020d09:	c1 e7 07             	shl    edi,0x7
c0020d0c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020d12:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c0020d17:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020d1b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020d21:	85 c6                	test   esi,eax
c0020d23:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020d29:	0f 84 a7 00 00 00    	je     c0020dd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c0020d2f:	0f ba e0 1e          	bt     eax,0x1e
c0020d33:	73 1a                	jae    c0020d4f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c0020d35:	83 ec 0c             	sub    esp,0xc
c0020d38:	68 8f 60 02 c0       	push   0xc002608f
c0020d3d:	e8 3a 62 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020d42:	83 c4 10             	add    esp,0x10
c0020d45:	b8 01 00 00 00       	mov    eax,0x1
c0020d4a:	e9 ba 00 00 00       	jmp    c0020e09 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0020d4f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c0020d55:	83 f8 0d             	cmp    eax,0xd
c0020d58:	77 0b                	ja     c0020d65 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c0020d5a:	50                   	push   eax
c0020d5b:	50                   	push   eax
c0020d5c:	6a 00                	push   0x0
c0020d5e:	68 c8 00 00 00       	push   0xc8
c0020d63:	eb 2a                	jmp    c0020d8f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020d65:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c0020d6b:	83 f8 0d             	cmp    eax,0xd
c0020d6e:	77 0b                	ja     c0020d7b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c0020d70:	51                   	push   ecx
c0020d71:	51                   	push   ecx
c0020d72:	6a 00                	push   0x0
c0020d74:	68 58 02 00 00       	push   0x258
c0020d79:	eb 14                	jmp    c0020d8f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020d7b:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c0020d81:	83 f8 06             	cmp    eax,0x6
c0020d84:	77 11                	ja     c0020d97 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020d86:	52                   	push   edx
c0020d87:	52                   	push   edx
c0020d88:	6a 00                	push   0x0
c0020d8a:	68 dc 05 00 00       	push   0x5dc
c0020d8f:	e8 70 62 ff ff       	call   c0017004 <milliTenthSleep(unsigned long long)>
c0020d94:	83 c4 10             	add    esp,0x10
c0020d97:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020d9b:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0020d9e:	75 06                	jne    c0020da6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c0020da0:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0020da4:	74 16                	je     c0020dbc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0020da6:	83 fb 06             	cmp    ebx,0x6
c0020da9:	77 11                	ja     c0020dbc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0020dab:	50                   	push   eax
c0020dac:	50                   	push   eax
c0020dad:	6a 00                	push   0x0
c0020daf:	68 c4 09 00 00       	push   0x9c4
c0020db4:	e8 4b 62 ff ff       	call   c0017004 <milliTenthSleep(unsigned long long)>
c0020db9:	83 c4 10             	add    esp,0x10
c0020dbc:	43                   	inc    ebx
c0020dbd:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c0020dc3:	0f 85 52 ff ff ff    	jne    c0020d1b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c0020dc9:	83 ec 0c             	sub    esp,0xc
c0020dcc:	68 a2 60 02 c0       	push   0xc00260a2
c0020dd1:	e9 67 ff ff ff       	jmp    c0020d3d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0020dd6:	0f ba e0 1e          	bt     eax,0x1e
c0020dda:	73 0d                	jae    c0020de9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c0020ddc:	83 ec 0c             	sub    esp,0xc
c0020ddf:	68 b6 60 02 c0       	push   0xc00260b6
c0020de4:	e9 54 ff ff ff       	jmp    c0020d3d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0020de9:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020dee:	74 17                	je     c0020e07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0020df0:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020df5:	74 10                	je     c0020e07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0020df7:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020dfd:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020e01:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020e05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e07:	31 c0                	xor    eax,eax
c0020e09:	83 c4 2c             	add    esp,0x2c
c0020e0c:	5b                   	pop    ebx
c0020e0d:	5e                   	pop    esi
c0020e0e:	5f                   	pop    edi
c0020e0f:	5d                   	pop    ebp
c0020e10:	c3                   	ret    
c0020e11:	90                   	nop

c0020e12 <SATAPI::eject()>:
c0020e12:	57                   	push   edi
c0020e13:	b9 03 00 00 00       	mov    ecx,0x3
c0020e18:	83 ec 18             	sub    esp,0x18
c0020e1b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020e1f:	fc                   	cld    
c0020e20:	31 c0                	xor    eax,eax
c0020e22:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020e24:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020e29:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020e2e:	50                   	push   eax
c0020e2f:	6a 00                	push   0x0
c0020e31:	6a 00                	push   0x0
c0020e33:	6a 00                	push   0x0
c0020e35:	6a 00                	push   0x0
c0020e37:	6a 02                	push   0x2
c0020e39:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020e3d:	50                   	push   eax
c0020e3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020e42:	e8 e9 fc ff ff       	call   c0020b30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020e47:	31 c0                	xor    eax,eax
c0020e49:	83 c4 38             	add    esp,0x38
c0020e4c:	5f                   	pop    edi
c0020e4d:	c3                   	ret    

c0020e4e <SATAPI::detectMedia()>:
c0020e4e:	53                   	push   ebx
c0020e4f:	83 ec 14             	sub    esp,0x14
c0020e52:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020e56:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020e5c:	e8 ab a5 fe ff       	call   c000b40c <VCache::writeWriteBuffer()>
c0020e61:	59                   	pop    ecx
c0020e62:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020e68:	e8 8f a5 fe ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c0020e6d:	c7 04 24 cb 60 02 c0 	mov    DWORD PTR [esp],0xc00260cb
c0020e74:	e8 03 61 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020e79:	83 c4 10             	add    esp,0x10
c0020e7c:	31 c0                	xor    eax,eax
c0020e7e:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c0020e85:	85 d2                	test   edx,edx
c0020e87:	74 0f                	je     c0020e98 <SATAPI::detectMedia()+0x4a>
c0020e89:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0020e8f:	75 07                	jne    c0020e98 <SATAPI::detectMedia()+0x4a>
c0020e91:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0020e98:	40                   	inc    eax
c0020e99:	83 f8 1a             	cmp    eax,0x1a
c0020e9c:	75 e0                	jne    c0020e7e <SATAPI::detectMedia()+0x30>
c0020e9e:	83 c4 08             	add    esp,0x8
c0020ea1:	5b                   	pop    ebx
c0020ea2:	c3                   	ret    
c0020ea3:	90                   	nop

c0020ea4 <SATAPI::open(int, int, void*)>:
c0020ea4:	56                   	push   esi
c0020ea5:	53                   	push   ebx
c0020ea6:	51                   	push   ecx
c0020ea7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020eab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020eaf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020eb9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020ebf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020ec9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ecd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020ed7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020edd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020ee4:	e8 ff ef fe ff       	call   c000fee8 <Phys::allocatePage()>
c0020ee9:	89 c6                	mov    esi,eax
c0020eeb:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020ef1:	81 c6 00 10 00 00    	add    esi,0x1000
c0020ef7:	e8 ec ef fe ff       	call   c000fee8 <Phys::allocatePage()>
c0020efc:	39 c6                	cmp    esi,eax
c0020efe:	74 10                	je     c0020f10 <SATAPI::open(int, int, void*)+0x6c>
c0020f00:	83 ec 0c             	sub    esp,0xc
c0020f03:	68 e0 60 02 c0       	push   0xc00260e0
c0020f08:	e8 e7 ed fe ff       	call   c000fcf4 <KePanic(char const*)>
c0020f0d:	83 c4 10             	add    esp,0x10
c0020f10:	83 ec 0c             	sub    esp,0xc
c0020f13:	6a 02                	push   0x2
c0020f15:	e8 0d 24 ff ff       	call   c0013327 <Virt::allocateKernelVirtualPages(int)>
c0020f1a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020f20:	6a 03                	push   0x3
c0020f22:	50                   	push   eax
c0020f23:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020f29:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c0020f2f:	e8 d6 2a ff ff       	call   c0013a0a <VAS::mapPage(unsigned long, unsigned long, int)>
c0020f34:	83 c4 14             	add    esp,0x14
c0020f37:	68 78 01 00 00       	push   0x178
c0020f3c:	e8 56 e9 fe ff       	call   c000f897 <malloc>
c0020f41:	83 c4 0c             	add    esp,0xc
c0020f44:	89 c6                	mov    esi,eax
c0020f46:	6a 00                	push   0x0
c0020f48:	68 ff ff ff 7f       	push   0x7fffffff
c0020f4d:	6a 00                	push   0x0
c0020f4f:	6a 00                	push   0x0
c0020f51:	53                   	push   ebx
c0020f52:	68 f6 60 02 c0       	push   0xc00260f6
c0020f57:	50                   	push   eax
c0020f58:	e8 0f 99 fe ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020f5d:	83 c4 14             	add    esp,0x14
c0020f60:	56                   	push   esi
c0020f61:	e8 c6 99 fe ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c0020f66:	5a                   	pop    edx
c0020f67:	0f be c0             	movsx  eax,al
c0020f6a:	59                   	pop    ecx
c0020f6b:	50                   	push   eax
c0020f6c:	68 3c 5f 02 c0       	push   0xc0025f3c
c0020f71:	e8 06 60 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020f76:	58                   	pop    eax
c0020f77:	5a                   	pop    edx
c0020f78:	56                   	push   esi
c0020f79:	53                   	push   ebx
c0020f7a:	e8 d5 8a fe ff       	call   c0009a54 <Device::addChild(Device*)>
c0020f7f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020f85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020f88:	e8 11 8f fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020f8d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020f94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020f97:	e8 b2 fe ff ff       	call   c0020e4e <SATAPI::detectMedia()>
c0020f9c:	83 c4 14             	add    esp,0x14
c0020f9f:	31 c0                	xor    eax,eax
c0020fa1:	5b                   	pop    ebx
c0020fa2:	5e                   	pop    esi
c0020fa3:	c3                   	ret    

c0020fa4 <SATAPI::read(unsigned long long, int, void*)>:
c0020fa4:	57                   	push   edi
c0020fa5:	56                   	push   esi
c0020fa6:	53                   	push   ebx
c0020fa7:	83 ec 30             	sub    esp,0x30
c0020faa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020fae:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0020fb2:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0020fb6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020fba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020fbe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020fc2:	83 fe 04             	cmp    esi,0x4
c0020fc5:	7e 10                	jle    c0020fd7 <SATAPI::read(unsigned long long, int, void*)+0x33>
c0020fc7:	83 ec 0c             	sub    esp,0xc
c0020fca:	68 04 61 02 c0       	push   0xc0026104
c0020fcf:	e8 20 ed fe ff       	call   c000fcf4 <KePanic(char const*)>
c0020fd4:	83 c4 10             	add    esp,0x10
c0020fd7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020fdd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020fe3:	51                   	push   ecx
c0020fe4:	50                   	push   eax
c0020fe5:	83 c0 02             	add    eax,0x2
c0020fe8:	c1 e0 07             	shl    eax,0x7
c0020feb:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0020ff1:	50                   	push   eax
c0020ff2:	52                   	push   edx
c0020ff3:	e8 c6 e6 ff ff       	call   c001f6be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0020ff8:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0020ffc:	b9 03 00 00 00       	mov    ecx,0x3
c0021001:	fc                   	cld    
c0021002:	31 c0                	xor    eax,eax
c0021004:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021006:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002100b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0021010:	83 c4 0c             	add    esp,0xc
c0021013:	6a 00                	push   0x0
c0021015:	6a 00                	push   0x0
c0021017:	6a 00                	push   0x0
c0021019:	6a 00                	push   0x0
c002101b:	6a 02                	push   0x2
c002101d:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021021:	50                   	push   eax
c0021022:	53                   	push   ebx
c0021023:	e8 08 fb ff ff       	call   c0020b30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021028:	83 c4 20             	add    esp,0x20
c002102b:	85 c0                	test   eax,eax
c002102d:	75 44                	jne    c0021073 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002102f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021033:	b9 03 00 00 00       	mov    ecx,0x3
c0021038:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002103a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002103e:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0021043:	0f c8                	bswap  eax
c0021045:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0021049:	89 f0                	mov    eax,esi
c002104b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002104f:	50                   	push   eax
c0021050:	56                   	push   esi
c0021051:	c1 e6 0b             	shl    esi,0xb
c0021054:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0021058:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002105c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021060:	56                   	push   esi
c0021061:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021065:	50                   	push   eax
c0021066:	53                   	push   ebx
c0021067:	e8 c4 fa ff ff       	call   c0020b30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002106c:	83 c4 20             	add    esp,0x20
c002106f:	85 c0                	test   eax,eax
c0021071:	74 14                	je     c0021087 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c0021073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021077:	83 ec 0c             	sub    esp,0xc
c002107a:	53                   	push   ebx
c002107b:	e8 ce fd ff ff       	call   c0020e4e <SATAPI::detectMedia()>
c0021080:	83 c4 10             	add    esp,0x10
c0021083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021087:	83 c4 30             	add    esp,0x30
c002108a:	5b                   	pop    ebx
c002108b:	5e                   	pop    esi
c002108c:	5f                   	pop    edi
c002108d:	c3                   	ret    
c002108e:	66 90                	xchg   ax,ax

c0021090 <APICTimer::close(int, int, void*)>:
c0021090:	b8 00 00 00 00       	mov    eax,0x0
c0021095:	c3                   	ret    
c0021096:	66 90                	xchg   ax,ax

c0021098 <apicTimerHandler(regs*, void*)>:
c0021098:	83 ec 0c             	sub    esp,0xc
c002109b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002109f:	8b 08                	mov    ecx,DWORD PTR [eax]
c00210a1:	b8 10 27 00 00       	mov    eax,0x2710
c00210a6:	ba 00 00 00 00       	mov    edx,0x0
c00210ab:	f7 f1                	div    ecx
c00210ad:	83 ec 0c             	sub    esp,0xc
c00210b0:	50                   	push   eax
c00210b1:	e8 72 a0 fe ff       	call   c000b128 <timerHandler(unsigned int)>
c00210b6:	83 c4 10             	add    esp,0x10
c00210b9:	90                   	nop
c00210ba:	83 c4 0c             	add    esp,0xc
c00210bd:	c3                   	ret    
c00210be:	66 90                	xchg   ax,ax

c00210c0 <APICTimer::open(int, int, void*)>:
c00210c0:	83 ec 0c             	sub    esp,0xc
c00210c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00210c9:	83 c0 24             	add    eax,0x24
c00210cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00210ce:	83 ec 08             	sub    esp,0x8
c00210d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210d9:	ff d0                	call   eax
c00210db:	83 c4 10             	add    esp,0x10
c00210de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00210e6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00210ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00210f4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00210fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00210fe:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021104:	83 ec 0c             	sub    esp,0xc
c0021107:	51                   	push   ecx
c0021108:	6a 01                	push   0x1
c002110a:	68 98 10 02 c0       	push   0xc0021098
c002110f:	52                   	push   edx
c0021110:	50                   	push   eax
c0021111:	e8 ea 88 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021116:	83 c4 20             	add    esp,0x20
c0021119:	89 c2                	mov    edx,eax
c002111b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002111f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021125:	b8 00 00 00 00       	mov    eax,0x0
c002112a:	83 c4 0c             	add    esp,0xc
c002112d:	c3                   	ret    
c002112e:	66 90                	xchg   ax,ax

c0021130 <APICTimer::write(int)>:
c0021130:	83 ec 0c             	sub    esp,0xc
c0021133:	83 ec 0c             	sub    esp,0xc
c0021136:	68 68 61 02 c0       	push   0xc0026168
c002113b:	e8 b4 eb fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021140:	83 c4 10             	add    esp,0x10
c0021143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021147:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002114b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021151:	90                   	nop
c0021152:	83 c4 0c             	add    esp,0xc
c0021155:	c3                   	ret    
c0021156:	66 90                	xchg   ax,ax

c0021158 <APICTimer::APICTimer()>:
c0021158:	83 ec 0c             	sub    esp,0xc
c002115b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002115f:	83 ec 08             	sub    esp,0x8
c0021162:	68 78 61 02 c0       	push   0xc0026178
c0021167:	50                   	push   eax
c0021168:	e8 ef 9e fe ff       	call   c000b05c <Timer::Timer(char const*)>
c002116d:	83 c4 10             	add    esp,0x10
c0021170:	ba 8c 61 02 c0       	mov    edx,0xc002618c
c0021175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021179:	89 10                	mov    DWORD PTR [eax],edx
c002117b:	90                   	nop
c002117c:	83 c4 0c             	add    esp,0xc
c002117f:	c3                   	ret    

c0021180 <PIT::write(int)>:
c0021180:	83 ec 10             	sub    esp,0x10
c0021183:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021187:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002118b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021191:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021195:	a3 f8 f4 02 c0       	mov    ds:0xc002f4f8,eax
c002119a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002119f:	89 c2                	mov    edx,eax
c00211a1:	c1 fa 1f             	sar    edx,0x1f
c00211a4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00211a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00211ac:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00211b3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00211b8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00211bc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00211c1:	ee                   	out    dx,al
c00211c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211c6:	0f b6 c0             	movzx  eax,al
c00211c9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00211d0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00211d4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00211d8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00211dd:	ee                   	out    dx,al
c00211de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211e2:	c1 f8 08             	sar    eax,0x8
c00211e5:	0f b6 c0             	movzx  eax,al
c00211e8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00211ef:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00211f3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00211f7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00211fc:	ee                   	out    dx,al
c00211fd:	90                   	nop
c00211fe:	83 c4 10             	add    esp,0x10
c0021201:	c3                   	ret    
c0021202:	66 90                	xchg   ax,ax

c0021204 <pitHandler(regs*, void*)>:
c0021204:	83 ec 0c             	sub    esp,0xc
c0021207:	8b 0d f8 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f4f8
c002120d:	b8 10 27 00 00       	mov    eax,0x2710
c0021212:	89 c2                	mov    edx,eax
c0021214:	c1 fa 1f             	sar    edx,0x1f
c0021217:	f7 f9                	idiv   ecx
c0021219:	83 ec 0c             	sub    esp,0xc
c002121c:	50                   	push   eax
c002121d:	e8 06 9f fe ff       	call   c000b128 <timerHandler(unsigned int)>
c0021222:	83 c4 10             	add    esp,0x10
c0021225:	90                   	nop
c0021226:	83 c4 0c             	add    esp,0xc
c0021229:	c3                   	ret    
c002122a:	66 90                	xchg   ax,ax

c002122c <PIT::open(int, int, void*)>:
c002122c:	83 ec 0c             	sub    esp,0xc
c002122f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021233:	8b 00                	mov    eax,DWORD PTR [eax]
c0021235:	83 c0 24             	add    eax,0x24
c0021238:	8b 00                	mov    eax,DWORD PTR [eax]
c002123a:	83 ec 08             	sub    esp,0x8
c002123d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021245:	ff d0                	call   eax
c0021247:	83 c4 10             	add    esp,0x10
c002124a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002124e:	83 ec 0c             	sub    esp,0xc
c0021251:	6a 00                	push   0x0
c0021253:	6a 01                	push   0x1
c0021255:	68 04 12 02 c0       	push   0xc0021204
c002125a:	6a 00                	push   0x0
c002125c:	50                   	push   eax
c002125d:	e8 9e 87 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021262:	83 c4 20             	add    esp,0x20
c0021265:	89 c2                	mov    edx,eax
c0021267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002126b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021271:	b8 00 00 00 00       	mov    eax,0x0
c0021276:	83 c4 0c             	add    esp,0xc
c0021279:	c3                   	ret    
c002127a:	66 90                	xchg   ax,ax

c002127c <PIT::close(int, int, void*)>:
c002127c:	83 ec 0c             	sub    esp,0xc
c002127f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021283:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002128d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021291:	6a 01                	push   0x1
c0021293:	68 04 12 02 c0       	push   0xc0021204
c0021298:	6a 00                	push   0x0
c002129a:	50                   	push   eax
c002129b:	e8 96 87 fe ff       	call   c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00212a0:	83 c4 10             	add    esp,0x10
c00212a3:	b8 00 00 00 00       	mov    eax,0x0
c00212a8:	83 c4 0c             	add    esp,0xc
c00212ab:	c3                   	ret    

c00212ac <PIT::PIT()>:
c00212ac:	83 ec 0c             	sub    esp,0xc
c00212af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212b3:	83 ec 08             	sub    esp,0x8
c00212b6:	68 b4 61 02 c0       	push   0xc00261b4
c00212bb:	50                   	push   eax
c00212bc:	e8 9b 9d fe ff       	call   c000b05c <Timer::Timer(char const*)>
c00212c1:	83 c4 10             	add    esp,0x10
c00212c4:	ba dc 61 02 c0       	mov    edx,0xc00261dc
c00212c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212cd:	89 10                	mov    DWORD PTR [eax],edx
c00212cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00212d9:	0f b6 d0             	movzx  edx,al
c00212dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00212e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00212f1:	0f b6 d0             	movzx  edx,al
c00212f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00212fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021301:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021307:	8d 50 01             	lea    edx,[eax+0x1]
c002130a:	88 d1                	mov    cl,dl
c002130c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021310:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021316:	0f b6 d0             	movzx  edx,al
c0021319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002131d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021321:	83 e1 3f             	and    ecx,0x3f
c0021324:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021328:	90                   	nop
c0021329:	83 c4 0c             	add    esp,0xc
c002132c:	c3                   	ret    
c002132d:	66 90                	xchg   ax,ax
c002132f:	90                   	nop

c0021330 <avxDetect>:
c0021330:	b8 01 00 00 00       	mov    eax,0x1
c0021335:	0f a2                	cpuid  
c0021337:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002133d:	74 15                	je     c0021354 <avxDetect.noAVX>
c002133f:	b8 01 00 00 00       	mov    eax,0x1
c0021344:	0f a2                	cpuid  
c0021346:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002134c:	74 06                	je     c0021354 <avxDetect.noAVX>
c002134e:	b8 01 00 00 00       	mov    eax,0x1
c0021353:	c3                   	ret    

c0021354 <avxDetect.noAVX>:
c0021354:	b8 00 00 00 00       	mov    eax,0x0
c0021359:	c3                   	ret    

c002135a <avxSave>:
c002135a:	53                   	push   ebx
c002135b:	52                   	push   edx
c002135c:	31 c0                	xor    eax,eax
c002135e:	48                   	dec    eax
c002135f:	89 c2                	mov    edx,eax
c0021361:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021365:	0f ae 23             	xsave  [ebx]
c0021368:	5a                   	pop    edx
c0021369:	5b                   	pop    ebx
c002136a:	c3                   	ret    

c002136b <avxLoad>:
c002136b:	53                   	push   ebx
c002136c:	52                   	push   edx
c002136d:	31 c0                	xor    eax,eax
c002136f:	48                   	dec    eax
c0021370:	89 c2                	mov    edx,eax
c0021372:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021376:	0f ae 2b             	xrstor [ebx]
c0021379:	5a                   	pop    edx
c002137a:	5b                   	pop    ebx
c002137b:	c3                   	ret    

c002137c <avxInit>:
c002137c:	e8 17 03 00 00       	call   c0021698 <sseInit>
c0021381:	50                   	push   eax
c0021382:	51                   	push   ecx
c0021383:	0f 20 e0             	mov    eax,cr4
c0021386:	0d 00 00 04 00       	or     eax,0x40000
c002138b:	0f 22 e0             	mov    cr4,eax
c002138e:	31 c9                	xor    ecx,ecx
c0021390:	0f 01 d0             	xgetbv 
c0021393:	0d 07 00 00 00       	or     eax,0x7
c0021398:	0f 01 d1             	xsetbv 
c002139b:	59                   	pop    ecx
c002139c:	58                   	pop    eax
c002139d:	c3                   	ret    

c002139e <avxClose>:
c002139e:	c3                   	ret    
c002139f:	90                   	nop

c00213a0 <isr0>:
c00213a0:	fa                   	cli    
c00213a1:	68 00 00 00 00       	push   0x0
c00213a6:	68 00 00 00 00       	push   0x0
c00213ab:	e9 56 01 00 00       	jmp    c0021506 <int_common_stub>

c00213b0 <isr1>:
c00213b0:	fa                   	cli    
c00213b1:	6a 00                	push   0x0
c00213b3:	6a 01                	push   0x1
c00213b5:	e9 4c 01 00 00       	jmp    c0021506 <int_common_stub>

c00213ba <isr2>:
c00213ba:	fa                   	cli    
c00213bb:	6a 00                	push   0x0
c00213bd:	6a 02                	push   0x2
c00213bf:	e9 42 01 00 00       	jmp    c0021506 <int_common_stub>

c00213c4 <isr3>:
c00213c4:	fa                   	cli    
c00213c5:	6a 00                	push   0x0
c00213c7:	6a 03                	push   0x3
c00213c9:	e9 38 01 00 00       	jmp    c0021506 <int_common_stub>

c00213ce <isr4>:
c00213ce:	fa                   	cli    
c00213cf:	6a 00                	push   0x0
c00213d1:	6a 04                	push   0x4
c00213d3:	e9 2e 01 00 00       	jmp    c0021506 <int_common_stub>

c00213d8 <isr5>:
c00213d8:	fa                   	cli    
c00213d9:	6a 00                	push   0x0
c00213db:	6a 05                	push   0x5
c00213dd:	e9 24 01 00 00       	jmp    c0021506 <int_common_stub>

c00213e2 <isr6>:
c00213e2:	fa                   	cli    
c00213e3:	6a 00                	push   0x0
c00213e5:	6a 06                	push   0x6
c00213e7:	e9 1a 01 00 00       	jmp    c0021506 <int_common_stub>

c00213ec <isr7>:
c00213ec:	fa                   	cli    
c00213ed:	6a 00                	push   0x0
c00213ef:	6a 07                	push   0x7
c00213f1:	e9 10 01 00 00       	jmp    c0021506 <int_common_stub>

c00213f6 <isr8>:
c00213f6:	fa                   	cli    
c00213f7:	6a 08                	push   0x8
c00213f9:	e9 08 01 00 00       	jmp    c0021506 <int_common_stub>

c00213fe <isr9>:
c00213fe:	fa                   	cli    
c00213ff:	6a 00                	push   0x0
c0021401:	6a 09                	push   0x9
c0021403:	e9 fe 00 00 00       	jmp    c0021506 <int_common_stub>

c0021408 <isr10>:
c0021408:	fa                   	cli    
c0021409:	6a 0a                	push   0xa
c002140b:	e9 f6 00 00 00       	jmp    c0021506 <int_common_stub>

c0021410 <isr11>:
c0021410:	fa                   	cli    
c0021411:	6a 0b                	push   0xb
c0021413:	e9 ee 00 00 00       	jmp    c0021506 <int_common_stub>

c0021418 <isr12>:
c0021418:	fa                   	cli    
c0021419:	6a 0c                	push   0xc
c002141b:	e9 e6 00 00 00       	jmp    c0021506 <int_common_stub>

c0021420 <isr13>:
c0021420:	fa                   	cli    
c0021421:	6a 0d                	push   0xd
c0021423:	53                   	push   ebx
c0021424:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021428:	81 fb c5 15 02 c0    	cmp    ebx,0xc00215c5
c002142e:	5b                   	pop    ebx
c002142f:	0f 84 92 01 00 00    	je     c00215c7 <finishSignal2>
c0021435:	e9 cc 00 00 00       	jmp    c0021506 <int_common_stub>

c002143a <isr14>:
c002143a:	fa                   	cli    
c002143b:	6a 0e                	push   0xe
c002143d:	e9 c4 00 00 00       	jmp    c0021506 <int_common_stub>

c0021442 <isr15>:
c0021442:	fa                   	cli    
c0021443:	6a 00                	push   0x0
c0021445:	6a 0f                	push   0xf
c0021447:	e9 ba 00 00 00       	jmp    c0021506 <int_common_stub>

c002144c <isr16>:
c002144c:	fa                   	cli    
c002144d:	6a 00                	push   0x0
c002144f:	6a 10                	push   0x10
c0021451:	e9 b0 00 00 00       	jmp    c0021506 <int_common_stub>

c0021456 <isr17>:
c0021456:	fa                   	cli    
c0021457:	6a 00                	push   0x0
c0021459:	6a 11                	push   0x11
c002145b:	e9 a6 00 00 00       	jmp    c0021506 <int_common_stub>

c0021460 <isr18>:
c0021460:	fa                   	cli    
c0021461:	6a 00                	push   0x0
c0021463:	6a 12                	push   0x12
c0021465:	e9 9c 00 00 00       	jmp    c0021506 <int_common_stub>

c002146a <irq3>:
c002146a:	fa                   	cli    
c002146b:	6a 00                	push   0x0
c002146d:	6a 23                	push   0x23
c002146f:	e9 92 00 00 00       	jmp    c0021506 <int_common_stub>

c0021474 <irq4>:
c0021474:	fa                   	cli    
c0021475:	6a 00                	push   0x0
c0021477:	6a 24                	push   0x24
c0021479:	e9 88 00 00 00       	jmp    c0021506 <int_common_stub>

c002147e <irq5>:
c002147e:	fa                   	cli    
c002147f:	6a 00                	push   0x0
c0021481:	6a 25                	push   0x25
c0021483:	e9 7e 00 00 00       	jmp    c0021506 <int_common_stub>

c0021488 <irq6>:
c0021488:	fa                   	cli    
c0021489:	6a 00                	push   0x0
c002148b:	6a 26                	push   0x26
c002148d:	e9 74 00 00 00       	jmp    c0021506 <int_common_stub>

c0021492 <irq7>:
c0021492:	fa                   	cli    
c0021493:	6a 00                	push   0x0
c0021495:	6a 27                	push   0x27
c0021497:	e9 6a 00 00 00       	jmp    c0021506 <int_common_stub>

c002149c <irq8>:
c002149c:	fa                   	cli    
c002149d:	6a 00                	push   0x0
c002149f:	6a 28                	push   0x28
c00214a1:	e9 60 00 00 00       	jmp    c0021506 <int_common_stub>

c00214a6 <irq9>:
c00214a6:	fa                   	cli    
c00214a7:	6a 00                	push   0x0
c00214a9:	6a 29                	push   0x29
c00214ab:	e9 56 00 00 00       	jmp    c0021506 <int_common_stub>

c00214b0 <irq10>:
c00214b0:	fa                   	cli    
c00214b1:	6a 00                	push   0x0
c00214b3:	6a 2a                	push   0x2a
c00214b5:	e9 4c 00 00 00       	jmp    c0021506 <int_common_stub>

c00214ba <irq11>:
c00214ba:	fa                   	cli    
c00214bb:	6a 00                	push   0x0
c00214bd:	6a 2b                	push   0x2b
c00214bf:	e9 42 00 00 00       	jmp    c0021506 <int_common_stub>

c00214c4 <irq12>:
c00214c4:	fa                   	cli    
c00214c5:	6a 00                	push   0x0
c00214c7:	6a 2c                	push   0x2c
c00214c9:	e9 38 00 00 00       	jmp    c0021506 <int_common_stub>

c00214ce <irq13>:
c00214ce:	fa                   	cli    
c00214cf:	6a 00                	push   0x0
c00214d1:	6a 2d                	push   0x2d
c00214d3:	e9 2e 00 00 00       	jmp    c0021506 <int_common_stub>

c00214d8 <irq14>:
c00214d8:	fa                   	cli    
c00214d9:	6a 00                	push   0x0
c00214db:	6a 2e                	push   0x2e
c00214dd:	e9 24 00 00 00       	jmp    c0021506 <int_common_stub>

c00214e2 <irq15>:
c00214e2:	fa                   	cli    
c00214e3:	6a 00                	push   0x0
c00214e5:	6a 2f                	push   0x2f
c00214e7:	e9 1a 00 00 00       	jmp    c0021506 <int_common_stub>

c00214ec <irq1>:
c00214ec:	fa                   	cli    
c00214ed:	6a 00                	push   0x0
c00214ef:	6a 21                	push   0x21
c00214f1:	eb 13                	jmp    c0021506 <int_common_stub>

c00214f3 <irq2>:
c00214f3:	fa                   	cli    
c00214f4:	6a 00                	push   0x0
c00214f6:	6a 22                	push   0x22
c00214f8:	eb 0c                	jmp    c0021506 <int_common_stub>

c00214fa <isr96>:
c00214fa:	6a 00                	push   0x0
c00214fc:	6a 60                	push   0x60
c00214fe:	fb                   	sti    
c00214ff:	eb 05                	jmp    c0021506 <int_common_stub>

c0021501 <irq0>:
c0021501:	fa                   	cli    
c0021502:	6a 00                	push   0x0
c0021504:	6a 20                	push   0x20

c0021506 <int_common_stub>:
c0021506:	60                   	pusha  
c0021507:	1e                   	push   ds
c0021508:	06                   	push   es
c0021509:	0f a0                	push   fs
c002150b:	0f a8                	push   gs
c002150d:	66 b8 10 00          	mov    ax,0x10
c0021511:	66 8e d8             	mov    ds,ax
c0021514:	66 8e c0             	mov    es,ax
c0021517:	66 8e e0             	mov    fs,ax
c002151a:	66 8e e8             	mov    gs,ax
c002151d:	54                   	push   esp
c002151e:	fc                   	cld    
c002151f:	e8 50 95 ff ff       	call   c001aa74 <int_handler>
c0021524:	81 c4 04 00 00 00    	add    esp,0x4
c002152a:	0f a9                	pop    gs
c002152c:	0f a1                	pop    fs
c002152e:	07                   	pop    es
c002152f:	1f                   	pop    ds
c0021530:	e8 26 fc fe ff       	call   c001115b <KiCheckSignalZ>
c0021535:	85 c0                	test   eax,eax
c0021537:	75 08                	jne    c0021541 <doSignals>
c0021539:	61                   	popa   
c002153a:	81 c4 08 00 00 00    	add    esp,0x8
c0021540:	cf                   	iret   

c0021541 <doSignals>:
c0021541:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021546:	61                   	popa   
c0021547:	53                   	push   ebx
c0021548:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002154e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021551:	5b                   	pop    ebx
c0021552:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021557:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002155a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002155d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021560:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021563:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021566:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021569:	81 c4 08 00 00 00    	add    esp,0x8
c002156f:	5e                   	pop    esi
c0021570:	5b                   	pop    ebx
c0021571:	59                   	pop    ecx
c0021572:	5a                   	pop    edx
c0021573:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021576:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021579:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002157c:	52                   	push   edx
c002157d:	51                   	push   ecx
c002157e:	53                   	push   ebx
c002157f:	56                   	push   esi
c0021580:	81 ec 08 00 00 00    	sub    esp,0x8
c0021586:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021589:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002158c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002158f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021592:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021595:	60                   	pusha  
c0021596:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002159c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002159f:	89 e3                	mov    ebx,esp
c00215a1:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c00215a4:	52                   	push   edx
c00215a5:	68 c5 15 02 c0       	push   0xc00215c5
c00215aa:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c00215ad:	89 dc                	mov    esp,ebx
c00215af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00215b2:	68 23 00 00 00       	push   0x23
c00215b7:	51                   	push   ecx
c00215b8:	68 02 02 00 00       	push   0x202
c00215bd:	68 1b 00 00 00       	push   0x1b
c00215c2:	ff 36                	push   DWORD PTR [esi]
c00215c4:	cf                   	iret   

c00215c5 <finishSignal>:
c00215c5:	cd 0f                	int    0xf

c00215c7 <finishSignal2>:
c00215c7:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c00215cd:	e8 15 fc fe ff       	call   c00111e7 <KiFinishSignalZ>
c00215d2:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c00215d8:	68 23 00 00 00       	push   0x23
c00215dd:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00215e0:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00215e3:	68 1b 00 00 00       	push   0x1b
c00215e8:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c00215eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00215ee:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00215f1:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00215f4:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00215f7:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c00215fa:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00215fd:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021600:	cf                   	iret   
c0021601:	90                   	nop
c0021602:	90                   	nop
c0021603:	90                   	nop

c0021604 <irq16>:
c0021604:	fa                   	cli    
c0021605:	6a 00                	push   0x0
c0021607:	6a 30                	push   0x30
c0021609:	e9 f8 fe ff ff       	jmp    c0021506 <int_common_stub>

c002160e <irq17>:
c002160e:	fa                   	cli    
c002160f:	6a 00                	push   0x0
c0021611:	6a 31                	push   0x31
c0021613:	e9 ee fe ff ff       	jmp    c0021506 <int_common_stub>

c0021618 <irq18>:
c0021618:	fa                   	cli    
c0021619:	6a 00                	push   0x0
c002161b:	6a 32                	push   0x32
c002161d:	e9 e4 fe ff ff       	jmp    c0021506 <int_common_stub>

c0021622 <irq19>:
c0021622:	fa                   	cli    
c0021623:	6a 00                	push   0x0
c0021625:	6a 33                	push   0x33
c0021627:	e9 da fe ff ff       	jmp    c0021506 <int_common_stub>

c002162c <irq20>:
c002162c:	fa                   	cli    
c002162d:	6a 00                	push   0x0
c002162f:	6a 34                	push   0x34
c0021631:	e9 d0 fe ff ff       	jmp    c0021506 <int_common_stub>

c0021636 <irq21>:
c0021636:	fa                   	cli    
c0021637:	6a 00                	push   0x0
c0021639:	6a 35                	push   0x35
c002163b:	e9 c6 fe ff ff       	jmp    c0021506 <int_common_stub>

c0021640 <irq22>:
c0021640:	fa                   	cli    
c0021641:	6a 00                	push   0x0
c0021643:	6a 36                	push   0x36
c0021645:	e9 bc fe ff ff       	jmp    c0021506 <int_common_stub>

c002164a <irq23>:
c002164a:	fa                   	cli    
c002164b:	6a 00                	push   0x0
c002164d:	6a 37                	push   0x37
c002164f:	e9 b2 fe ff ff       	jmp    c0021506 <int_common_stub>
c0021654:	66 90                	xchg   ax,ax
c0021656:	66 90                	xchg   ax,ax
c0021658:	66 90                	xchg   ax,ax
c002165a:	66 90                	xchg   ax,ax
c002165c:	66 90                	xchg   ax,ax
c002165e:	66 90                	xchg   ax,ax

c0021660 <i386GetRDRAND>:
c0021660:	b9 64 00 00 00       	mov    ecx,0x64

c0021665 <retry>:
c0021665:	0f c7 f0             	rdrand eax
c0021668:	72 05                	jb     c002166f <retry.done>
c002166a:	e2 f9                	loop   c0021665 <retry>

c002166c <retry.fail>:
c002166c:	31 c0                	xor    eax,eax
c002166e:	c3                   	ret    

c002166f <retry.done>:
c002166f:	c3                   	ret    

c0021670 <sseDetect>:
c0021670:	b8 01 00 00 00       	mov    eax,0x1
c0021675:	0f a2                	cpuid  
c0021677:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002167d:	74 06                	je     c0021685 <sseDetect.noSSE>
c002167f:	b8 01 00 00 00       	mov    eax,0x1
c0021684:	c3                   	ret    

c0021685 <sseDetect.noSSE>:
c0021685:	31 c0                	xor    eax,eax
c0021687:	c3                   	ret    

c0021688 <sseSave>:
c0021688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002168c:	0f ae 00             	fxsave [eax]
c002168f:	c3                   	ret    

c0021690 <sseLoad>:
c0021690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021694:	0f ae 08             	fxrstor [eax]
c0021697:	c3                   	ret    

c0021698 <sseInit>:
c0021698:	e8 48 00 00 00       	call   c00216e5 <x87Init>
c002169d:	0f 20 e0             	mov    eax,cr4
c00216a0:	66 0d 00 06          	or     ax,0x600
c00216a4:	0f 22 e0             	mov    cr4,eax
c00216a7:	c3                   	ret    

c00216a8 <sseClose>:
c00216a8:	c3                   	ret    
c00216a9:	66 90                	xchg   ax,ax
c00216ab:	66 90                	xchg   ax,ax
c00216ad:	66 90                	xchg   ax,ax
c00216af:	90                   	nop

c00216b0 <value_37F>:
c00216b0:	7f 03                	jg     c00216b5 <value_37A+0x1>

c00216b2 <value_37E>:
c00216b2:	7e 03                	jle    c00216b7 <x87Detect+0x1>

c00216b4 <value_37A>:
c00216b4:	7a 03                	jp     c00216b9 <x87Detect+0x3>

c00216b6 <x87Detect>:
c00216b6:	53                   	push   ebx
c00216b7:	51                   	push   ecx
c00216b8:	52                   	push   edx
c00216b9:	b8 01 00 00 00       	mov    eax,0x1
c00216be:	0f a2                	cpuid  
c00216c0:	f7 c2 01 00 00 00    	test   edx,0x1
c00216c6:	74 06                	je     c00216ce <x87Detect.nox87>
c00216c8:	b8 01 00 00 00       	mov    eax,0x1
c00216cd:	c3                   	ret    

c00216ce <x87Detect.nox87>:
c00216ce:	b8 00 00 00 00       	mov    eax,0x0
c00216d3:	5a                   	pop    edx
c00216d4:	59                   	pop    ecx
c00216d5:	5b                   	pop    ebx
c00216d6:	c3                   	ret    

c00216d7 <x87Save>:
c00216d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216db:	dd 30                	fnsave [eax]
c00216dd:	c3                   	ret    

c00216de <x87Load>:
c00216de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216e2:	dd 20                	frstor [eax]
c00216e4:	c3                   	ret    

c00216e5 <x87Init>:
c00216e5:	0f 20 c0             	mov    eax,cr0
c00216e8:	66 25 fb ff          	and    ax,0xfffb
c00216ec:	66 0d 22 00          	or     ax,0x22
c00216f0:	0f 22 c0             	mov    cr0,eax
c00216f3:	db e3                	fninit 
c00216f5:	0f 06                	clts   
c00216f7:	d9 2d b4 16 02 c0    	fldcw  WORD PTR ds:0xc00216b4
c00216fd:	c3                   	ret    

c00216fe <x87Close>:
c00216fe:	c3                   	ret    
c00216ff:	90                   	nop

c0021700 <__do_global_ctors_aux>:
c0021700:	a1 b4 26 02 c0       	mov    eax,ds:0xc00226b4
c0021705:	83 f8 ff             	cmp    eax,0xffffffff
c0021708:	74 1a                	je     c0021724 <__do_global_ctors_aux+0x24>
c002170a:	55                   	push   ebp
c002170b:	89 e5                	mov    ebp,esp
c002170d:	53                   	push   ebx
c002170e:	52                   	push   edx
c002170f:	bb b4 26 02 c0       	mov    ebx,0xc00226b4
c0021714:	ff d0                	call   eax
c0021716:	83 eb 04             	sub    ebx,0x4
c0021719:	8b 03                	mov    eax,DWORD PTR [ebx]
c002171b:	83 f8 ff             	cmp    eax,0xffffffff
c002171e:	75 f4                	jne    c0021714 <__do_global_ctors_aux+0x14>
c0021720:	58                   	pop    eax
c0021721:	5b                   	pop    ebx
c0021722:	5d                   	pop    ebp
c0021723:	c3                   	ret    
c0021724:	c3                   	ret    
c0021725:	66 90                	xchg   ax,ax
c0021727:	90                   	nop

c0021728 <__divdi3>:
c0021728:	55                   	push   ebp
c0021729:	57                   	push   edi
c002172a:	56                   	push   esi
c002172b:	53                   	push   ebx
c002172c:	83 ec 1c             	sub    esp,0x1c
c002172f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021733:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021737:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002173a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002173e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021742:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021746:	85 db                	test   ebx,ebx
c0021748:	0f 88 8e 00 00 00    	js     c00217dc <__divdi3+0xb4>
c002174e:	89 dd                	mov    ebp,ebx
c0021750:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021758:	89 d3                	mov    ebx,edx
c002175a:	85 d2                	test   edx,edx
c002175c:	79 0d                	jns    c002176b <__divdi3+0x43>
c002175e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021762:	f7 d8                	neg    eax
c0021764:	83 d2 00             	adc    edx,0x0
c0021767:	f7 da                	neg    edx
c0021769:	89 d3                	mov    ebx,edx
c002176b:	89 c7                	mov    edi,eax
c002176d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021770:	85 db                	test   ebx,ebx
c0021772:	75 48                	jne    c00217bc <__divdi3+0x94>
c0021774:	39 ef                	cmp    edi,ebp
c0021776:	76 24                	jbe    c002179c <__divdi3+0x74>
c0021778:	89 ea                	mov    edx,ebp
c002177a:	f7 f7                	div    edi
c002177c:	89 c1                	mov    ecx,eax
c002177e:	31 f6                	xor    esi,esi
c0021780:	89 c8                	mov    eax,ecx
c0021782:	89 f2                	mov    edx,esi
c0021784:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021788:	85 c9                	test   ecx,ecx
c002178a:	74 07                	je     c0021793 <__divdi3+0x6b>
c002178c:	f7 d8                	neg    eax
c002178e:	83 d2 00             	adc    edx,0x0
c0021791:	f7 da                	neg    edx
c0021793:	83 c4 1c             	add    esp,0x1c
c0021796:	5b                   	pop    ebx
c0021797:	5e                   	pop    esi
c0021798:	5f                   	pop    edi
c0021799:	5d                   	pop    ebp
c002179a:	c3                   	ret    
c002179b:	90                   	nop
c002179c:	85 ff                	test   edi,edi
c002179e:	75 0b                	jne    c00217ab <__divdi3+0x83>
c00217a0:	b8 01 00 00 00       	mov    eax,0x1
c00217a5:	31 d2                	xor    edx,edx
c00217a7:	f7 f3                	div    ebx
c00217a9:	89 c7                	mov    edi,eax
c00217ab:	31 d2                	xor    edx,edx
c00217ad:	89 e8                	mov    eax,ebp
c00217af:	f7 f7                	div    edi
c00217b1:	89 c6                	mov    esi,eax
c00217b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00217b6:	f7 f7                	div    edi
c00217b8:	89 c1                	mov    ecx,eax
c00217ba:	eb c4                	jmp    c0021780 <__divdi3+0x58>
c00217bc:	39 eb                	cmp    ebx,ebp
c00217be:	77 3c                	ja     c00217fc <__divdi3+0xd4>
c00217c0:	0f bd f3             	bsr    esi,ebx
c00217c3:	83 f6 1f             	xor    esi,0x1f
c00217c6:	75 40                	jne    c0021808 <__divdi3+0xe0>
c00217c8:	39 eb                	cmp    ebx,ebp
c00217ca:	72 09                	jb     c00217d5 <__divdi3+0xad>
c00217cc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00217cf:	0f 87 97 00 00 00    	ja     c002186c <__divdi3+0x144>
c00217d5:	b9 01 00 00 00       	mov    ecx,0x1
c00217da:	eb a4                	jmp    c0021780 <__divdi3+0x58>
c00217dc:	f7 d9                	neg    ecx
c00217de:	83 d3 00             	adc    ebx,0x0
c00217e1:	f7 db                	neg    ebx
c00217e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00217e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00217ea:	89 dd                	mov    ebp,ebx
c00217ec:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00217f4:	e9 5f ff ff ff       	jmp    c0021758 <__divdi3+0x30>
c00217f9:	8d 76 00             	lea    esi,[esi+0x0]
c00217fc:	31 f6                	xor    esi,esi
c00217fe:	31 c9                	xor    ecx,ecx
c0021800:	e9 7b ff ff ff       	jmp    c0021780 <__divdi3+0x58>
c0021805:	8d 76 00             	lea    esi,[esi+0x0]
c0021808:	b8 20 00 00 00       	mov    eax,0x20
c002180d:	29 f0                	sub    eax,esi
c002180f:	89 f1                	mov    ecx,esi
c0021811:	d3 e3                	shl    ebx,cl
c0021813:	89 fa                	mov    edx,edi
c0021815:	88 c1                	mov    cl,al
c0021817:	d3 ea                	shr    edx,cl
c0021819:	09 da                	or     edx,ebx
c002181b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002181f:	89 f1                	mov    ecx,esi
c0021821:	d3 e7                	shl    edi,cl
c0021823:	89 eb                	mov    ebx,ebp
c0021825:	88 c1                	mov    cl,al
c0021827:	d3 eb                	shr    ebx,cl
c0021829:	89 f1                	mov    ecx,esi
c002182b:	d3 e5                	shl    ebp,cl
c002182d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021830:	88 c1                	mov    cl,al
c0021832:	d3 ea                	shr    edx,cl
c0021834:	09 d5                	or     ebp,edx
c0021836:	89 e8                	mov    eax,ebp
c0021838:	89 da                	mov    edx,ebx
c002183a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002183e:	89 d3                	mov    ebx,edx
c0021840:	89 c5                	mov    ebp,eax
c0021842:	f7 e7                	mul    edi
c0021844:	39 d3                	cmp    ebx,edx
c0021846:	72 18                	jb     c0021860 <__divdi3+0x138>
c0021848:	74 0a                	je     c0021854 <__divdi3+0x12c>
c002184a:	89 e9                	mov    ecx,ebp
c002184c:	31 f6                	xor    esi,esi
c002184e:	e9 2d ff ff ff       	jmp    c0021780 <__divdi3+0x58>
c0021853:	90                   	nop
c0021854:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021857:	89 f1                	mov    ecx,esi
c0021859:	d3 e7                	shl    edi,cl
c002185b:	39 c7                	cmp    edi,eax
c002185d:	73 eb                	jae    c002184a <__divdi3+0x122>
c002185f:	90                   	nop
c0021860:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021863:	31 f6                	xor    esi,esi
c0021865:	e9 16 ff ff ff       	jmp    c0021780 <__divdi3+0x58>
c002186a:	66 90                	xchg   ax,ax
c002186c:	31 c9                	xor    ecx,ecx
c002186e:	e9 0d ff ff ff       	jmp    c0021780 <__divdi3+0x58>
c0021873:	90                   	nop

c0021874 <__moddi3>:
c0021874:	55                   	push   ebp
c0021875:	57                   	push   edi
c0021876:	56                   	push   esi
c0021877:	53                   	push   ebx
c0021878:	83 ec 2c             	sub    esp,0x2c
c002187b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002187f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021883:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021887:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002188b:	85 db                	test   ebx,ebx
c002188d:	0f 88 85 00 00 00    	js     c0021918 <__moddi3+0xa4>
c0021893:	89 de                	mov    esi,ebx
c0021895:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002189d:	89 d7                	mov    edi,edx
c002189f:	85 d2                	test   edx,edx
c00218a1:	79 09                	jns    c00218ac <__moddi3+0x38>
c00218a3:	f7 d8                	neg    eax
c00218a5:	83 d2 00             	adc    edx,0x0
c00218a8:	f7 da                	neg    edx
c00218aa:	89 d7                	mov    edi,edx
c00218ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00218b0:	89 cd                	mov    ebp,ecx
c00218b2:	85 ff                	test   edi,edi
c00218b4:	75 52                	jne    c0021908 <__moddi3+0x94>
c00218b6:	89 c3                	mov    ebx,eax
c00218b8:	39 f0                	cmp    eax,esi
c00218ba:	76 24                	jbe    c00218e0 <__moddi3+0x6c>
c00218bc:	89 c8                	mov    eax,ecx
c00218be:	89 f2                	mov    edx,esi
c00218c0:	f7 f3                	div    ebx
c00218c2:	89 d6                	mov    esi,edx
c00218c4:	89 f0                	mov    eax,esi
c00218c6:	31 d2                	xor    edx,edx
c00218c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218cc:	85 c9                	test   ecx,ecx
c00218ce:	74 07                	je     c00218d7 <__moddi3+0x63>
c00218d0:	f7 d8                	neg    eax
c00218d2:	83 d2 00             	adc    edx,0x0
c00218d5:	f7 da                	neg    edx
c00218d7:	83 c4 2c             	add    esp,0x2c
c00218da:	5b                   	pop    ebx
c00218db:	5e                   	pop    esi
c00218dc:	5f                   	pop    edi
c00218dd:	5d                   	pop    ebp
c00218de:	c3                   	ret    
c00218df:	90                   	nop
c00218e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00218e4:	85 db                	test   ebx,ebx
c00218e6:	75 0d                	jne    c00218f5 <__moddi3+0x81>
c00218e8:	b8 01 00 00 00       	mov    eax,0x1
c00218ed:	31 d2                	xor    edx,edx
c00218ef:	f7 f7                	div    edi
c00218f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00218f5:	89 f0                	mov    eax,esi
c00218f7:	31 d2                	xor    edx,edx
c00218f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00218fd:	f7 f7                	div    edi
c00218ff:	89 e8                	mov    eax,ebp
c0021901:	f7 f7                	div    edi
c0021903:	89 d6                	mov    esi,edx
c0021905:	eb bd                	jmp    c00218c4 <__moddi3+0x50>
c0021907:	90                   	nop
c0021908:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002190c:	39 f7                	cmp    edi,esi
c002190e:	76 20                	jbe    c0021930 <__moddi3+0xbc>
c0021910:	89 c8                	mov    eax,ecx
c0021912:	89 f2                	mov    edx,esi
c0021914:	eb b2                	jmp    c00218c8 <__moddi3+0x54>
c0021916:	66 90                	xchg   ax,ax
c0021918:	f7 d9                	neg    ecx
c002191a:	83 d3 00             	adc    ebx,0x0
c002191d:	f7 db                	neg    ebx
c002191f:	89 de                	mov    esi,ebx
c0021921:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021929:	e9 6f ff ff ff       	jmp    c002189d <__moddi3+0x29>
c002192e:	66 90                	xchg   ax,ax
c0021930:	0f bd c7             	bsr    eax,edi
c0021933:	83 f0 1f             	xor    eax,0x1f
c0021936:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002193a:	75 24                	jne    c0021960 <__moddi3+0xec>
c002193c:	39 f7                	cmp    edi,esi
c002193e:	72 06                	jb     c0021946 <__moddi3+0xd2>
c0021940:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021944:	77 0c                	ja     c0021952 <__moddi3+0xde>
c0021946:	89 e9                	mov    ecx,ebp
c0021948:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002194c:	19 fe                	sbb    esi,edi
c002194e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021952:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021956:	89 f2                	mov    edx,esi
c0021958:	e9 6b ff ff ff       	jmp    c00218c8 <__moddi3+0x54>
c002195d:	8d 76 00             	lea    esi,[esi+0x0]
c0021960:	b8 20 00 00 00       	mov    eax,0x20
c0021965:	89 c2                	mov    edx,eax
c0021967:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002196b:	29 da                	sub    edx,ebx
c002196d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021971:	88 d9                	mov    cl,bl
c0021973:	d3 e7                	shl    edi,cl
c0021975:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021979:	88 d1                	mov    cl,dl
c002197b:	d3 e8                	shr    eax,cl
c002197d:	09 c7                	or     edi,eax
c002197f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021983:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021987:	89 d8                	mov    eax,ebx
c0021989:	88 d9                	mov    cl,bl
c002198b:	d3 e7                	shl    edi,cl
c002198d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021991:	89 f3                	mov    ebx,esi
c0021993:	88 d1                	mov    cl,dl
c0021995:	d3 eb                	shr    ebx,cl
c0021997:	89 c7                	mov    edi,eax
c0021999:	88 c1                	mov    cl,al
c002199b:	d3 e6                	shl    esi,cl
c002199d:	89 e8                	mov    eax,ebp
c002199f:	88 d1                	mov    cl,dl
c00219a1:	d3 e8                	shr    eax,cl
c00219a3:	09 f0                	or     eax,esi
c00219a5:	89 f9                	mov    ecx,edi
c00219a7:	d3 e5                	shl    ebp,cl
c00219a9:	89 da                	mov    edx,ebx
c00219ab:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00219af:	89 d3                	mov    ebx,edx
c00219b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00219b5:	89 c6                	mov    esi,eax
c00219b7:	89 d1                	mov    ecx,edx
c00219b9:	39 d3                	cmp    ebx,edx
c00219bb:	72 27                	jb     c00219e4 <__moddi3+0x170>
c00219bd:	74 21                	je     c00219e0 <__moddi3+0x16c>
c00219bf:	29 f5                	sub    ebp,esi
c00219c1:	19 cb                	sbb    ebx,ecx
c00219c3:	89 de                	mov    esi,ebx
c00219c5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00219c9:	d3 e6                	shl    esi,cl
c00219cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00219cf:	89 f9                	mov    ecx,edi
c00219d1:	d3 ed                	shr    ebp,cl
c00219d3:	09 ee                	or     esi,ebp
c00219d5:	89 f0                	mov    eax,esi
c00219d7:	d3 eb                	shr    ebx,cl
c00219d9:	89 da                	mov    edx,ebx
c00219db:	e9 e8 fe ff ff       	jmp    c00218c8 <__moddi3+0x54>
c00219e0:	39 c5                	cmp    ebp,eax
c00219e2:	73 db                	jae    c00219bf <__moddi3+0x14b>
c00219e4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00219e8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00219ec:	89 d1                	mov    ecx,edx
c00219ee:	89 c6                	mov    esi,eax
c00219f0:	eb cd                	jmp    c00219bf <__moddi3+0x14b>
c00219f2:	66 90                	xchg   ax,ax

c00219f4 <__udivdi3>:
c00219f4:	55                   	push   ebp
c00219f5:	57                   	push   edi
c00219f6:	56                   	push   esi
c00219f7:	53                   	push   ebx
c00219f8:	83 ec 1c             	sub    esp,0x1c
c00219fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00219ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021a03:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021a07:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021a0b:	85 d2                	test   edx,edx
c0021a0d:	75 41                	jne    c0021a50 <__udivdi3+0x5c>
c0021a0f:	39 f7                	cmp    edi,esi
c0021a11:	76 15                	jbe    c0021a28 <__udivdi3+0x34>
c0021a13:	89 e8                	mov    eax,ebp
c0021a15:	89 f2                	mov    edx,esi
c0021a17:	f7 f7                	div    edi
c0021a19:	31 db                	xor    ebx,ebx
c0021a1b:	89 da                	mov    edx,ebx
c0021a1d:	83 c4 1c             	add    esp,0x1c
c0021a20:	5b                   	pop    ebx
c0021a21:	5e                   	pop    esi
c0021a22:	5f                   	pop    edi
c0021a23:	5d                   	pop    ebp
c0021a24:	c3                   	ret    
c0021a25:	8d 76 00             	lea    esi,[esi+0x0]
c0021a28:	89 f9                	mov    ecx,edi
c0021a2a:	85 ff                	test   edi,edi
c0021a2c:	75 0b                	jne    c0021a39 <__udivdi3+0x45>
c0021a2e:	b8 01 00 00 00       	mov    eax,0x1
c0021a33:	31 d2                	xor    edx,edx
c0021a35:	f7 f7                	div    edi
c0021a37:	89 c1                	mov    ecx,eax
c0021a39:	31 d2                	xor    edx,edx
c0021a3b:	89 f0                	mov    eax,esi
c0021a3d:	f7 f1                	div    ecx
c0021a3f:	89 c3                	mov    ebx,eax
c0021a41:	89 e8                	mov    eax,ebp
c0021a43:	f7 f1                	div    ecx
c0021a45:	89 da                	mov    edx,ebx
c0021a47:	83 c4 1c             	add    esp,0x1c
c0021a4a:	5b                   	pop    ebx
c0021a4b:	5e                   	pop    esi
c0021a4c:	5f                   	pop    edi
c0021a4d:	5d                   	pop    ebp
c0021a4e:	c3                   	ret    
c0021a4f:	90                   	nop
c0021a50:	39 f2                	cmp    edx,esi
c0021a52:	77 1c                	ja     c0021a70 <__udivdi3+0x7c>
c0021a54:	0f bd da             	bsr    ebx,edx
c0021a57:	83 f3 1f             	xor    ebx,0x1f
c0021a5a:	75 24                	jne    c0021a80 <__udivdi3+0x8c>
c0021a5c:	39 f2                	cmp    edx,esi
c0021a5e:	72 08                	jb     c0021a68 <__udivdi3+0x74>
c0021a60:	39 ef                	cmp    edi,ebp
c0021a62:	0f 87 84 00 00 00    	ja     c0021aec <__udivdi3+0xf8>
c0021a68:	b8 01 00 00 00       	mov    eax,0x1
c0021a6d:	eb ac                	jmp    c0021a1b <__udivdi3+0x27>
c0021a6f:	90                   	nop
c0021a70:	31 db                	xor    ebx,ebx
c0021a72:	31 c0                	xor    eax,eax
c0021a74:	89 da                	mov    edx,ebx
c0021a76:	83 c4 1c             	add    esp,0x1c
c0021a79:	5b                   	pop    ebx
c0021a7a:	5e                   	pop    esi
c0021a7b:	5f                   	pop    edi
c0021a7c:	5d                   	pop    ebp
c0021a7d:	c3                   	ret    
c0021a7e:	66 90                	xchg   ax,ax
c0021a80:	b8 20 00 00 00       	mov    eax,0x20
c0021a85:	29 d8                	sub    eax,ebx
c0021a87:	88 d9                	mov    cl,bl
c0021a89:	d3 e2                	shl    edx,cl
c0021a8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021a8f:	89 fa                	mov    edx,edi
c0021a91:	88 c1                	mov    cl,al
c0021a93:	d3 ea                	shr    edx,cl
c0021a95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021a99:	09 d1                	or     ecx,edx
c0021a9b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a9f:	88 d9                	mov    cl,bl
c0021aa1:	d3 e7                	shl    edi,cl
c0021aa3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021aa7:	89 f7                	mov    edi,esi
c0021aa9:	88 c1                	mov    cl,al
c0021aab:	d3 ef                	shr    edi,cl
c0021aad:	88 d9                	mov    cl,bl
c0021aaf:	d3 e6                	shl    esi,cl
c0021ab1:	89 ea                	mov    edx,ebp
c0021ab3:	88 c1                	mov    cl,al
c0021ab5:	d3 ea                	shr    edx,cl
c0021ab7:	09 d6                	or     esi,edx
c0021ab9:	89 f0                	mov    eax,esi
c0021abb:	89 fa                	mov    edx,edi
c0021abd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021ac1:	89 d7                	mov    edi,edx
c0021ac3:	89 c6                	mov    esi,eax
c0021ac5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021ac9:	39 d7                	cmp    edi,edx
c0021acb:	72 13                	jb     c0021ae0 <__udivdi3+0xec>
c0021acd:	74 09                	je     c0021ad8 <__udivdi3+0xe4>
c0021acf:	89 f0                	mov    eax,esi
c0021ad1:	31 db                	xor    ebx,ebx
c0021ad3:	e9 43 ff ff ff       	jmp    c0021a1b <__udivdi3+0x27>
c0021ad8:	88 d9                	mov    cl,bl
c0021ada:	d3 e5                	shl    ebp,cl
c0021adc:	39 c5                	cmp    ebp,eax
c0021ade:	73 ef                	jae    c0021acf <__udivdi3+0xdb>
c0021ae0:	8d 46 ff             	lea    eax,[esi-0x1]
c0021ae3:	31 db                	xor    ebx,ebx
c0021ae5:	e9 31 ff ff ff       	jmp    c0021a1b <__udivdi3+0x27>
c0021aea:	66 90                	xchg   ax,ax
c0021aec:	31 c0                	xor    eax,eax
c0021aee:	e9 28 ff ff ff       	jmp    c0021a1b <__udivdi3+0x27>
c0021af3:	90                   	nop

c0021af4 <__umoddi3>:
c0021af4:	55                   	push   ebp
c0021af5:	57                   	push   edi
c0021af6:	56                   	push   esi
c0021af7:	53                   	push   ebx
c0021af8:	83 ec 1c             	sub    esp,0x1c
c0021afb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021aff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021b03:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021b07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021b0b:	89 da                	mov    edx,ebx
c0021b0d:	85 c0                	test   eax,eax
c0021b0f:	75 37                	jne    c0021b48 <__umoddi3+0x54>
c0021b11:	39 df                	cmp    edi,ebx
c0021b13:	76 13                	jbe    c0021b28 <__umoddi3+0x34>
c0021b15:	89 f0                	mov    eax,esi
c0021b17:	f7 f7                	div    edi
c0021b19:	89 d0                	mov    eax,edx
c0021b1b:	31 d2                	xor    edx,edx
c0021b1d:	83 c4 1c             	add    esp,0x1c
c0021b20:	5b                   	pop    ebx
c0021b21:	5e                   	pop    esi
c0021b22:	5f                   	pop    edi
c0021b23:	5d                   	pop    ebp
c0021b24:	c3                   	ret    
c0021b25:	8d 76 00             	lea    esi,[esi+0x0]
c0021b28:	89 fd                	mov    ebp,edi
c0021b2a:	85 ff                	test   edi,edi
c0021b2c:	75 0b                	jne    c0021b39 <__umoddi3+0x45>
c0021b2e:	b8 01 00 00 00       	mov    eax,0x1
c0021b33:	31 d2                	xor    edx,edx
c0021b35:	f7 f7                	div    edi
c0021b37:	89 c5                	mov    ebp,eax
c0021b39:	89 d8                	mov    eax,ebx
c0021b3b:	31 d2                	xor    edx,edx
c0021b3d:	f7 f5                	div    ebp
c0021b3f:	89 f0                	mov    eax,esi
c0021b41:	f7 f5                	div    ebp
c0021b43:	89 d0                	mov    eax,edx
c0021b45:	eb d4                	jmp    c0021b1b <__umoddi3+0x27>
c0021b47:	90                   	nop
c0021b48:	89 f1                	mov    ecx,esi
c0021b4a:	39 d8                	cmp    eax,ebx
c0021b4c:	76 0a                	jbe    c0021b58 <__umoddi3+0x64>
c0021b4e:	89 f0                	mov    eax,esi
c0021b50:	83 c4 1c             	add    esp,0x1c
c0021b53:	5b                   	pop    ebx
c0021b54:	5e                   	pop    esi
c0021b55:	5f                   	pop    edi
c0021b56:	5d                   	pop    ebp
c0021b57:	c3                   	ret    
c0021b58:	0f bd e8             	bsr    ebp,eax
c0021b5b:	83 f5 1f             	xor    ebp,0x1f
c0021b5e:	75 1c                	jne    c0021b7c <__umoddi3+0x88>
c0021b60:	39 d8                	cmp    eax,ebx
c0021b62:	72 04                	jb     c0021b68 <__umoddi3+0x74>
c0021b64:	39 f7                	cmp    edi,esi
c0021b66:	77 08                	ja     c0021b70 <__umoddi3+0x7c>
c0021b68:	89 da                	mov    edx,ebx
c0021b6a:	29 fe                	sub    esi,edi
c0021b6c:	19 c2                	sbb    edx,eax
c0021b6e:	89 f1                	mov    ecx,esi
c0021b70:	89 c8                	mov    eax,ecx
c0021b72:	83 c4 1c             	add    esp,0x1c
c0021b75:	5b                   	pop    ebx
c0021b76:	5e                   	pop    esi
c0021b77:	5f                   	pop    edi
c0021b78:	5d                   	pop    ebp
c0021b79:	c3                   	ret    
c0021b7a:	66 90                	xchg   ax,ax
c0021b7c:	ba 20 00 00 00       	mov    edx,0x20
c0021b81:	29 ea                	sub    edx,ebp
c0021b83:	89 e9                	mov    ecx,ebp
c0021b85:	d3 e0                	shl    eax,cl
c0021b87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b8b:	89 f8                	mov    eax,edi
c0021b8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b91:	88 d1                	mov    cl,dl
c0021b93:	d3 e8                	shr    eax,cl
c0021b95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021b99:	09 c1                	or     ecx,eax
c0021b9b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021b9f:	89 e9                	mov    ecx,ebp
c0021ba1:	d3 e7                	shl    edi,cl
c0021ba3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021ba7:	89 d8                	mov    eax,ebx
c0021ba9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bad:	88 d1                	mov    cl,dl
c0021baf:	d3 e8                	shr    eax,cl
c0021bb1:	89 c7                	mov    edi,eax
c0021bb3:	89 e9                	mov    ecx,ebp
c0021bb5:	d3 e3                	shl    ebx,cl
c0021bb7:	89 f0                	mov    eax,esi
c0021bb9:	88 d1                	mov    cl,dl
c0021bbb:	d3 e8                	shr    eax,cl
c0021bbd:	09 d8                	or     eax,ebx
c0021bbf:	89 e9                	mov    ecx,ebp
c0021bc1:	d3 e6                	shl    esi,cl
c0021bc3:	89 f3                	mov    ebx,esi
c0021bc5:	89 fa                	mov    edx,edi
c0021bc7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021bcb:	89 d1                	mov    ecx,edx
c0021bcd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021bd1:	89 c6                	mov    esi,eax
c0021bd3:	89 d7                	mov    edi,edx
c0021bd5:	39 d1                	cmp    ecx,edx
c0021bd7:	72 27                	jb     c0021c00 <__umoddi3+0x10c>
c0021bd9:	74 21                	je     c0021bfc <__umoddi3+0x108>
c0021bdb:	89 ca                	mov    edx,ecx
c0021bdd:	29 f3                	sub    ebx,esi
c0021bdf:	19 fa                	sbb    edx,edi
c0021be1:	89 d0                	mov    eax,edx
c0021be3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021be7:	d3 e0                	shl    eax,cl
c0021be9:	89 e9                	mov    ecx,ebp
c0021beb:	d3 eb                	shr    ebx,cl
c0021bed:	09 d8                	or     eax,ebx
c0021bef:	d3 ea                	shr    edx,cl
c0021bf1:	83 c4 1c             	add    esp,0x1c
c0021bf4:	5b                   	pop    ebx
c0021bf5:	5e                   	pop    esi
c0021bf6:	5f                   	pop    edi
c0021bf7:	5d                   	pop    ebp
c0021bf8:	c3                   	ret    
c0021bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0021bfc:	39 c3                	cmp    ebx,eax
c0021bfe:	73 db                	jae    c0021bdb <__umoddi3+0xe7>
c0021c00:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021c04:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021c08:	89 d7                	mov    edi,edx
c0021c0a:	89 c6                	mov    esi,eax
c0021c0c:	eb cd                	jmp    c0021bdb <__umoddi3+0xe7>

Disassembly of section .init:

c0021c0e <_init>:
c0021c0e:	55                   	push   ebp
c0021c0f:	89 e5                	mov    ebp,esp
c0021c11:	e8 de e4 fd ff       	call   c00000f4 <frame_dummy>
c0021c16:	e8 e5 fa ff ff       	call   c0021700 <__do_global_ctors_aux>
c0021c1b:	5d                   	pop    ebp
c0021c1c:	c3                   	ret    

Disassembly of section .fini:

c0021c1d <_fini>:
c0021c1d:	55                   	push   ebp
c0021c1e:	89 e5                	mov    ebp,esp
c0021c20:	e8 5f e4 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021c25:	5d                   	pop    ebp
c0021c26:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021c28 <DriverlessDevice::~DriverlessDevice()>:
c0021c28:	ba bc 36 02 c0       	mov    edx,0xc00236bc
c0021c2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c31:	89 10                	mov    DWORD PTR [eax],edx
c0021c33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c37:	50                   	push   eax
c0021c38:	e8 19 7d fe ff       	call   c0009956 <Device::~Device()>
c0021c3d:	83 c4 04             	add    esp,0x4
c0021c40:	90                   	nop
c0021c41:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021c42 <DriverlessDevice::~DriverlessDevice()>:
c0021c42:	83 ec 0c             	sub    esp,0xc
c0021c45:	83 ec 0c             	sub    esp,0xc
c0021c48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c4c:	e8 d7 ff ff ff       	call   c0021c28 <DriverlessDevice::~DriverlessDevice()>
c0021c51:	83 c4 10             	add    esp,0x10
c0021c54:	83 ec 08             	sub    esp,0x8
c0021c57:	68 58 01 00 00       	push   0x158
c0021c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c60:	e8 4b b7 fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0021c65:	83 c4 10             	add    esp,0x10
c0021c68:	83 c4 0c             	add    esp,0xc
c0021c6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021c6c <LinkedList<Device>::addElement(Device*)>:
c0021c6c:	83 ec 0c             	sub    esp,0xc
c0021c6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021c74:	75 10                	jne    c0021c86 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021c76:	83 ec 0c             	sub    esp,0xc
c0021c79:	68 50 36 02 c0       	push   0xc0023650
c0021c7e:	e8 71 e0 fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021c83:	83 c4 10             	add    esp,0x10
c0021c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c8c:	85 c0                	test   eax,eax
c0021c8e:	74 3a                	je     c0021cca <LinkedList<Device>::addElement(Device*)+0x5e>
c0021c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c97:	85 c0                	test   eax,eax
c0021c99:	74 2f                	je     c0021cca <LinkedList<Device>::addElement(Device*)+0x5e>
c0021c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ca2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ca6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021cb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cbe:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021cc8:	eb 68                	jmp    c0021d32 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cd0:	85 c0                	test   eax,eax
c0021cd2:	75 4e                	jne    c0021d22 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cdb:	85 c0                	test   eax,eax
c0021cdd:	75 43                	jne    c0021d22 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ce7:	89 10                	mov    DWORD PTR [eax],edx
c0021ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ced:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021cf1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cfb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d0c:	85 c0                	test   eax,eax
c0021d0e:	74 22                	je     c0021d32 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021d10:	83 ec 0c             	sub    esp,0xc
c0021d13:	68 72 36 02 c0       	push   0xc0023672
c0021d18:	e8 d7 df fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021d1d:	83 c4 10             	add    esp,0x10
c0021d20:	eb 10                	jmp    c0021d32 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021d22:	83 ec 0c             	sub    esp,0xc
c0021d25:	68 7c 36 02 c0       	push   0xc002367c
c0021d2a:	e8 c5 df fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021d2f:	83 c4 10             	add    esp,0x10
c0021d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d39:	8d 50 01             	lea    edx,[eax+0x1]
c0021d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d40:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021d43:	90                   	nop
c0021d44:	83 c4 0c             	add    esp,0xc
c0021d47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021d48 <LinkedList<Device>::LinkedList()>:
c0021d48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021d5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021d7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021d88:	90                   	nop
c0021d89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021d8c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021d8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d92:	85 c0                	test   eax,eax
c0021d94:	75 0e                	jne    c0021da4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021d96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d9d:	85 c0                	test   eax,eax
c0021d9f:	75 03                	jne    c0021da4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021da1:	b0 01                	mov    al,0x1
c0021da3:	c3                   	ret    
c0021da4:	b0 00                	mov    al,0x0
c0021da6:	90                   	nop
c0021da7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021da8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021da8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021db0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021db0:	83 ec 0c             	sub    esp,0xc
c0021db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021db7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021db9:	85 c0                	test   eax,eax
c0021dbb:	75 17                	jne    c0021dd4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021dbd:	83 ec 0c             	sub    esp,0xc
c0021dc0:	68 ec 38 02 c0       	push   0xc00238ec
c0021dc5:	e8 2a df fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021dca:	83 c4 10             	add    esp,0x10
c0021dcd:	e9 96 00 00 00       	jmp    c0021e68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021dd2:	66 90                	xchg   ax,ax
c0021dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ddb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021dde:	85 c0                	test   eax,eax
c0021de0:	0f 95 c0             	setne  al
c0021de3:	0f b6 c0             	movzx  eax,al
c0021de6:	85 c0                	test   eax,eax
c0021de8:	74 12                	je     c0021dfc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0021dea:	83 ec 0c             	sub    esp,0xc
c0021ded:	68 37 39 02 c0       	push   0xc0023937
c0021df2:	e8 fd de fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021df7:	83 c4 10             	add    esp,0x10
c0021dfa:	66 90                	xchg   ax,ax
c0021dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e02:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021e05:	85 c0                	test   eax,eax
c0021e07:	0f 94 c0             	sete   al
c0021e0a:	0f b6 c0             	movzx  eax,al
c0021e0d:	85 c0                	test   eax,eax
c0021e0f:	74 33                	je     c0021e44 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e15:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e2d:	83 f8 01             	cmp    eax,0x1
c0021e30:	74 22                	je     c0021e54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021e32:	83 ec 0c             	sub    esp,0xc
c0021e35:	68 10 39 02 c0       	push   0xc0023910
c0021e3a:	e8 b5 de fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021e3f:	83 c4 10             	add    esp,0x10
c0021e42:	eb 10                	jmp    c0021e54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e48:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e4a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e51:	89 10                	mov    DWORD PTR [eax],edx
c0021e53:	90                   	nop
c0021e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e5b:	8d 50 ff             	lea    edx,[eax-0x1]
c0021e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021e65:	8d 76 00             	lea    esi,[esi+0x0]
c0021e68:	83 c4 0c             	add    esp,0xc
c0021e6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021e6c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021e6c:	83 ec 0c             	sub    esp,0xc
c0021e6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021e74:	75 12                	jne    c0021e88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021e76:	83 ec 0c             	sub    esp,0xc
c0021e79:	68 50 36 02 c0       	push   0xc0023650
c0021e7e:	e8 71 de fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021e83:	83 c4 10             	add    esp,0x10
c0021e86:	66 90                	xchg   ax,ax
c0021e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e8e:	85 c0                	test   eax,eax
c0021e90:	74 36                	je     c0021ec8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e99:	85 c0                	test   eax,eax
c0021e9b:	74 2b                	je     c0021ec8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ea1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ea4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ea8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021eb3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ebd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021ec4:	eb 6a                	jmp    c0021f30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021ec6:	66 90                	xchg   ax,ax
c0021ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ecc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ece:	85 c0                	test   eax,eax
c0021ed0:	75 4e                	jne    c0021f20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ed9:	85 c0                	test   eax,eax
c0021edb:	75 43                	jne    c0021f20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021edd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ee1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ee5:	89 10                	mov    DWORD PTR [eax],edx
c0021ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021eef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ef9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f07:	85 c0                	test   eax,eax
c0021f09:	74 25                	je     c0021f30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021f0b:	83 ec 0c             	sub    esp,0xc
c0021f0e:	68 72 36 02 c0       	push   0xc0023672
c0021f13:	e8 dc dd fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021f18:	83 c4 10             	add    esp,0x10
c0021f1b:	eb 13                	jmp    c0021f30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0021f20:	83 ec 0c             	sub    esp,0xc
c0021f23:	68 7c 36 02 c0       	push   0xc002367c
c0021f28:	e8 c7 dd fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021f2d:	83 c4 10             	add    esp,0x10
c0021f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f37:	8d 50 01             	lea    edx,[eax+0x1]
c0021f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021f41:	90                   	nop
c0021f42:	83 c4 0c             	add    esp,0xc
c0021f45:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021f48 <ACPI::~ACPI()>:
c0021f48:	83 ec 0c             	sub    esp,0xc
c0021f4b:	ba 6c 3d 02 c0       	mov    edx,0xc0023d6c
c0021f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f54:	89 10                	mov    DWORD PTR [eax],edx
c0021f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f5a:	83 ec 0c             	sub    esp,0xc
c0021f5d:	50                   	push   eax
c0021f5e:	e8 f3 79 fe ff       	call   c0009956 <Device::~Device()>
c0021f63:	83 c4 10             	add    esp,0x10
c0021f66:	90                   	nop
c0021f67:	83 c4 0c             	add    esp,0xc
c0021f6a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021f6c <ACPI::~ACPI()>:
c0021f6c:	83 ec 0c             	sub    esp,0xc
c0021f6f:	83 ec 0c             	sub    esp,0xc
c0021f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f76:	e8 cd ff ff ff       	call   c0021f48 <ACPI::~ACPI()>
c0021f7b:	83 c4 10             	add    esp,0x10
c0021f7e:	83 ec 08             	sub    esp,0x8
c0021f81:	68 64 12 00 00       	push   0x1264
c0021f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f8a:	e8 21 b4 fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0021f8f:	83 c4 10             	add    esp,0x10
c0021f92:	83 c4 0c             	add    esp,0xc
c0021f95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021f98 <LinkedList<Device>::~LinkedList()>:
c0021f98:	90                   	nop
c0021f99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021f9c <LinkedList<Device>::isEmpty()>:
c0021f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fa2:	85 c0                	test   eax,eax
c0021fa4:	75 0e                	jne    c0021fb4 <LinkedList<Device>::isEmpty()+0x18>
c0021fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021faa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fad:	85 c0                	test   eax,eax
c0021faf:	75 03                	jne    c0021fb4 <LinkedList<Device>::isEmpty()+0x18>
c0021fb1:	b0 01                	mov    al,0x1
c0021fb3:	c3                   	ret    
c0021fb4:	b0 00                	mov    al,0x0
c0021fb6:	90                   	nop
c0021fb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021fb8 <LinkedList<Device>::getFirstElement()>:
c0021fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fbe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021fc0 <LinkedList<Device>::removeFirst()>:
c0021fc0:	83 ec 0c             	sub    esp,0xc
c0021fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fc9:	85 c0                	test   eax,eax
c0021fcb:	75 17                	jne    c0021fe4 <LinkedList<Device>::removeFirst()+0x24>
c0021fcd:	83 ec 0c             	sub    esp,0xc
c0021fd0:	68 ec 38 02 c0       	push   0xc00238ec
c0021fd5:	e8 1a dd fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021fda:	83 c4 10             	add    esp,0x10
c0021fdd:	e9 92 00 00 00       	jmp    c0022074 <LinkedList<Device>::removeFirst()+0xb4>
c0021fe2:	66 90                	xchg   ax,ax
c0021fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021feb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021ff1:	85 c0                	test   eax,eax
c0021ff3:	74 13                	je     c0022008 <LinkedList<Device>::removeFirst()+0x48>
c0021ff5:	83 ec 0c             	sub    esp,0xc
c0021ff8:	68 37 39 02 c0       	push   0xc0023937
c0021ffd:	e8 f2 dc fe ff       	call   c000fcf4 <KePanic(char const*)>
c0022002:	83 c4 10             	add    esp,0x10
c0022005:	8d 76 00             	lea    esi,[esi+0x0]
c0022008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200c:	8b 00                	mov    eax,DWORD PTR [eax]
c002200e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022014:	85 c0                	test   eax,eax
c0022016:	75 34                	jne    c002204c <LinkedList<Device>::removeFirst()+0x8c>
c0022018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002201c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022026:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002202d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022031:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022034:	83 f8 01             	cmp    eax,0x1
c0022037:	74 27                	je     c0022060 <LinkedList<Device>::removeFirst()+0xa0>
c0022039:	83 ec 0c             	sub    esp,0xc
c002203c:	68 10 39 02 c0       	push   0xc0023910
c0022041:	e8 ae dc fe ff       	call   c000fcf4 <KePanic(char const*)>
c0022046:	83 c4 10             	add    esp,0x10
c0022049:	eb 15                	jmp    c0022060 <LinkedList<Device>::removeFirst()+0xa0>
c002204b:	90                   	nop
c002204c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022050:	8b 00                	mov    eax,DWORD PTR [eax]
c0022052:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205c:	89 10                	mov    DWORD PTR [eax],edx
c002205e:	66 90                	xchg   ax,ax
c0022060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022064:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022067:	8d 50 ff             	lea    edx,[eax-0x1]
c002206a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002206e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022071:	8d 76 00             	lea    esi,[esi+0x0]
c0022074:	83 c4 0c             	add    esp,0xc
c0022077:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022078 <Computer::~Computer()>:
c0022078:	83 ec 0c             	sub    esp,0xc
c002207b:	ba e4 3e 02 c0       	mov    edx,0xc0023ee4
c0022080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022084:	89 10                	mov    DWORD PTR [eax],edx
c0022086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002208a:	83 ec 0c             	sub    esp,0xc
c002208d:	50                   	push   eax
c002208e:	e8 c3 78 fe ff       	call   c0009956 <Device::~Device()>
c0022093:	83 c4 10             	add    esp,0x10
c0022096:	90                   	nop
c0022097:	83 c4 0c             	add    esp,0xc
c002209a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002209c <Computer::~Computer()>:
c002209c:	83 ec 0c             	sub    esp,0xc
c002209f:	83 ec 0c             	sub    esp,0xc
c00220a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220a6:	e8 cd ff ff ff       	call   c0022078 <Computer::~Computer()>
c00220ab:	83 c4 10             	add    esp,0x10
c00220ae:	83 ec 08             	sub    esp,0x8
c00220b1:	68 68 01 00 00       	push   0x168
c00220b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220ba:	e8 f1 b2 fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00220bf:	83 c4 10             	add    esp,0x10
c00220c2:	83 c4 0c             	add    esp,0xc
c00220c5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00220c6 <idleCommon()>:
c00220c6:	83 ec 0c             	sub    esp,0xc
c00220c9:	fa                   	cli    
c00220ca:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c00220d0:	e8 3b 4d ff ff       	call   c0016e10 <schedule()>
c00220d5:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00220dc:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00220e3:	75 01                	jne    c00220e6 <idleCommon()+0x20>
c00220e5:	fb                   	sti    
c00220e6:	83 c4 0c             	add    esp,0xc
c00220e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00220ea <LinkedList<UnixFile>::~LinkedList()>:
c00220ea:	90                   	nop
c00220eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00220ec <LinkedList<UnixFile>::LinkedList()>:
c00220ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00220f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022101:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022105:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002210c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022110:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002211a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022121:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022125:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002212c:	90                   	nop
c002212d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002212e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002212e:	83 ec 0c             	sub    esp,0xc
c0022131:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022136:	75 10                	jne    c0022148 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022138:	83 ec 0c             	sub    esp,0xc
c002213b:	68 50 36 02 c0       	push   0xc0023650
c0022140:	e8 af db fe ff       	call   c000fcf4 <KePanic(char const*)>
c0022145:	83 c4 10             	add    esp,0x10
c0022148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002214c:	8b 00                	mov    eax,DWORD PTR [eax]
c002214e:	85 c0                	test   eax,eax
c0022150:	74 34                	je     c0022186 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022159:	85 c0                	test   eax,eax
c002215b:	74 29                	je     c0022186 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002215d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022161:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022164:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022168:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002216b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022173:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002217d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022184:	eb 65                	jmp    c00221eb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218a:	8b 00                	mov    eax,DWORD PTR [eax]
c002218c:	85 c0                	test   eax,eax
c002218e:	75 4b                	jne    c00221db <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022194:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022197:	85 c0                	test   eax,eax
c0022199:	75 40                	jne    c00221db <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002219b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002219f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00221a3:	89 10                	mov    DWORD PTR [eax],edx
c00221a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00221ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00221b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00221be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221c5:	85 c0                	test   eax,eax
c00221c7:	74 22                	je     c00221eb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00221c9:	83 ec 0c             	sub    esp,0xc
c00221cc:	68 72 36 02 c0       	push   0xc0023672
c00221d1:	e8 1e db fe ff       	call   c000fcf4 <KePanic(char const*)>
c00221d6:	83 c4 10             	add    esp,0x10
c00221d9:	eb 10                	jmp    c00221eb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00221db:	83 ec 0c             	sub    esp,0xc
c00221de:	68 7c 36 02 c0       	push   0xc002367c
c00221e3:	e8 0c db fe ff       	call   c000fcf4 <KePanic(char const*)>
c00221e8:	83 c4 10             	add    esp,0x10
c00221eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221f2:	8d 50 01             	lea    edx,[eax+0x1]
c00221f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00221fc:	90                   	nop
c00221fd:	83 c4 0c             	add    esp,0xc
c0022200:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022202 <LinkedList<UnixFile>::getFirstElement()>:
c0022202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022206:	8b 00                	mov    eax,DWORD PTR [eax]
c0022208:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002220a <LinkedList<UnixFile>::removeFirst()>:
c002220a:	83 ec 0c             	sub    esp,0xc
c002220d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022211:	8b 00                	mov    eax,DWORD PTR [eax]
c0022213:	85 c0                	test   eax,eax
c0022215:	75 12                	jne    c0022229 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022217:	83 ec 0c             	sub    esp,0xc
c002221a:	68 ec 38 02 c0       	push   0xc00238ec
c002221f:	e8 d0 da fe ff       	call   c000fcf4 <KePanic(char const*)>
c0022224:	83 c4 10             	add    esp,0x10
c0022227:	eb 7e                	jmp    c00222a7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002222d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022230:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022233:	85 c0                	test   eax,eax
c0022235:	74 10                	je     c0022247 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022237:	83 ec 0c             	sub    esp,0xc
c002223a:	68 37 39 02 c0       	push   0xc0023937
c002223f:	e8 b0 da fe ff       	call   c000fcf4 <KePanic(char const*)>
c0022244:	83 c4 10             	add    esp,0x10
c0022247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224b:	8b 00                	mov    eax,DWORD PTR [eax]
c002224d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022250:	85 c0                	test   eax,eax
c0022252:	75 33                	jne    c0022287 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022258:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002225e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022262:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022270:	83 f8 01             	cmp    eax,0x1
c0022273:	74 21                	je     c0022296 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022275:	83 ec 0c             	sub    esp,0xc
c0022278:	68 10 39 02 c0       	push   0xc0023910
c002227d:	e8 72 da fe ff       	call   c000fcf4 <KePanic(char const*)>
c0022282:	83 c4 10             	add    esp,0x10
c0022285:	eb 0f                	jmp    c0022296 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228b:	8b 00                	mov    eax,DWORD PTR [eax]
c002228d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022294:	89 10                	mov    DWORD PTR [eax],edx
c0022296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002229d:	8d 50 ff             	lea    edx,[eax-0x1]
c00222a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222a7:	83 c4 0c             	add    esp,0xc
c00222aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00222ac <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00222ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00222b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00222b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00222b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00222bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00222bc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00222bc:	90                   	nop
c00222bd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00222c0 <ThreadControlBlock::ThreadControlBlock()>:
c00222c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222c4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00222cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222cf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00222d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222da:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00222e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222e5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00222ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222f0:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00222f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222fb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00222ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022303:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022307:	90                   	nop
c0022308:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002230c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002230c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022310:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002231a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022321:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022325:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002232c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022330:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002233a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022345:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002234c:	90                   	nop
c002234d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002234e <IOAPIC::~IOAPIC()>:
c002234e:	83 ec 0c             	sub    esp,0xc
c0022351:	ba ac 53 02 c0       	mov    edx,0xc00253ac
c0022356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002235a:	89 10                	mov    DWORD PTR [eax],edx
c002235c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022360:	83 ec 0c             	sub    esp,0xc
c0022363:	50                   	push   eax
c0022364:	e8 ed 75 fe ff       	call   c0009956 <Device::~Device()>
c0022369:	83 c4 10             	add    esp,0x10
c002236c:	90                   	nop
c002236d:	83 c4 0c             	add    esp,0xc
c0022370:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022372 <IOAPIC::~IOAPIC()>:
c0022372:	83 ec 0c             	sub    esp,0xc
c0022375:	83 ec 0c             	sub    esp,0xc
c0022378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002237c:	e8 cd ff ff ff       	call   c002234e <IOAPIC::~IOAPIC()>
c0022381:	83 c4 10             	add    esp,0x10
c0022384:	83 ec 08             	sub    esp,0x8
c0022387:	68 68 01 00 00       	push   0x168
c002238c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022390:	e8 1b b0 fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0022395:	83 c4 10             	add    esp,0x10
c0022398:	83 c4 0c             	add    esp,0xc
c002239b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002239c <CPU::~CPU()>:
c002239c:	83 ec 0c             	sub    esp,0xc
c002239f:	ba 20 57 02 c0       	mov    edx,0xc0025720
c00223a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a8:	89 10                	mov    DWORD PTR [eax],edx
c00223aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ae:	83 ec 0c             	sub    esp,0xc
c00223b1:	50                   	push   eax
c00223b2:	e8 9f 75 fe ff       	call   c0009956 <Device::~Device()>
c00223b7:	83 c4 10             	add    esp,0x10
c00223ba:	90                   	nop
c00223bb:	83 c4 0c             	add    esp,0xc
c00223be:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00223c0 <CPU::~CPU()>:
c00223c0:	83 ec 0c             	sub    esp,0xc
c00223c3:	83 ec 0c             	sub    esp,0xc
c00223c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223ca:	e8 cd ff ff ff       	call   c002239c <CPU::~CPU()>
c00223cf:	83 c4 10             	add    esp,0x10
c00223d2:	83 ec 08             	sub    esp,0x8
c00223d5:	68 78 11 00 00       	push   0x1178
c00223da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223de:	e8 cd af fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00223e3:	83 c4 10             	add    esp,0x10
c00223e6:	83 c4 0c             	add    esp,0xc
c00223e9:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00223ea <PCI::~PCI()>:
c00223ea:	83 ec 0c             	sub    esp,0xc
c00223ed:	ba 84 5c 02 c0       	mov    edx,0xc0025c84
c00223f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f6:	89 10                	mov    DWORD PTR [eax],edx
c00223f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223fc:	83 ec 0c             	sub    esp,0xc
c00223ff:	50                   	push   eax
c0022400:	e8 97 65 fe ff       	call   c000899c <Bus::~Bus()>
c0022405:	83 c4 10             	add    esp,0x10
c0022408:	90                   	nop
c0022409:	83 c4 0c             	add    esp,0xc
c002240c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002240e <PCI::~PCI()>:
c002240e:	83 ec 0c             	sub    esp,0xc
c0022411:	83 ec 0c             	sub    esp,0xc
c0022414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022418:	e8 cd ff ff ff       	call   c00223ea <PCI::~PCI()>
c002241d:	83 c4 10             	add    esp,0x10
c0022420:	83 ec 08             	sub    esp,0x8
c0022423:	68 5c 01 00 00       	push   0x15c
c0022428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002242c:	e8 7f af fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0022431:	83 c4 10             	add    esp,0x10
c0022434:	83 c4 0c             	add    esp,0xc
c0022437:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022438 <IDE::~IDE()>:
c0022438:	83 ec 0c             	sub    esp,0xc
c002243b:	ba d4 5d 02 c0       	mov    edx,0xc0025dd4
c0022440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022444:	89 10                	mov    DWORD PTR [eax],edx
c0022446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002244a:	83 ec 0c             	sub    esp,0xc
c002244d:	50                   	push   eax
c002244e:	e8 91 79 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0022453:	83 c4 10             	add    esp,0x10
c0022456:	90                   	nop
c0022457:	83 c4 0c             	add    esp,0xc
c002245a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002245c <IDE::~IDE()>:
c002245c:	83 ec 0c             	sub    esp,0xc
c002245f:	83 ec 0c             	sub    esp,0xc
c0022462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022466:	e8 cd ff ff ff       	call   c0022438 <IDE::~IDE()>
c002246b:	83 c4 10             	add    esp,0x10
c002246e:	83 ec 08             	sub    esp,0x8
c0022471:	68 70 02 00 00       	push   0x270
c0022476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002247a:	e8 31 af fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c002247f:	83 c4 10             	add    esp,0x10
c0022482:	83 c4 0c             	add    esp,0xc
c0022485:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022486 <SATABus::~SATABus()>:
c0022486:	83 ec 0c             	sub    esp,0xc
c0022489:	ba 24 5e 02 c0       	mov    edx,0xc0025e24
c002248e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022492:	89 10                	mov    DWORD PTR [eax],edx
c0022494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022498:	83 ec 0c             	sub    esp,0xc
c002249b:	50                   	push   eax
c002249c:	e8 43 79 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c00224a1:	83 c4 10             	add    esp,0x10
c00224a4:	90                   	nop
c00224a5:	83 c4 0c             	add    esp,0xc
c00224a8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00224aa <SATABus::~SATABus()>:
c00224aa:	83 ec 0c             	sub    esp,0xc
c00224ad:	83 ec 0c             	sub    esp,0xc
c00224b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224b4:	e8 cd ff ff ff       	call   c0022486 <SATABus::~SATABus()>
c00224b9:	83 c4 10             	add    esp,0x10
c00224bc:	83 ec 08             	sub    esp,0x8
c00224bf:	68 64 01 00 00       	push   0x164
c00224c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224c8:	e8 e3 ae fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00224cd:	83 c4 10             	add    esp,0x10
c00224d0:	83 c4 0c             	add    esp,0xc
c00224d3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00224d4 <ATA::~ATA()>:
c00224d4:	83 ec 0c             	sub    esp,0xc
c00224d7:	ba 0c 5f 02 c0       	mov    edx,0xc0025f0c
c00224dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224e0:	89 10                	mov    DWORD PTR [eax],edx
c00224e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224e6:	83 ec 0c             	sub    esp,0xc
c00224e9:	50                   	push   eax
c00224ea:	e8 d7 79 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c00224ef:	83 c4 10             	add    esp,0x10
c00224f2:	90                   	nop
c00224f3:	83 c4 0c             	add    esp,0xc
c00224f6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00224f8 <ATA::~ATA()>:
c00224f8:	83 ec 0c             	sub    esp,0xc
c00224fb:	83 ec 0c             	sub    esp,0xc
c00224fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022502:	e8 cd ff ff ff       	call   c00224d4 <ATA::~ATA()>
c0022507:	83 c4 10             	add    esp,0x10
c002250a:	83 ec 08             	sub    esp,0x8
c002250d:	68 8c 01 00 00       	push   0x18c
c0022512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022516:	e8 95 ae fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c002251b:	83 c4 10             	add    esp,0x10
c002251e:	83 c4 0c             	add    esp,0xc
c0022521:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022522 <ATAPI::~ATAPI()>:
c0022522:	83 ec 0c             	sub    esp,0xc
c0022525:	ba 54 5f 02 c0       	mov    edx,0xc0025f54
c002252a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002252e:	89 10                	mov    DWORD PTR [eax],edx
c0022530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022534:	83 ec 0c             	sub    esp,0xc
c0022537:	50                   	push   eax
c0022538:	e8 89 79 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c002253d:	83 c4 10             	add    esp,0x10
c0022540:	90                   	nop
c0022541:	83 c4 0c             	add    esp,0xc
c0022544:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022546 <ATAPI::~ATAPI()>:
c0022546:	83 ec 0c             	sub    esp,0xc
c0022549:	83 ec 0c             	sub    esp,0xc
c002254c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022550:	e8 cd ff ff ff       	call   c0022522 <ATAPI::~ATAPI()>
c0022555:	83 c4 10             	add    esp,0x10
c0022558:	83 ec 08             	sub    esp,0x8
c002255b:	68 84 01 00 00       	push   0x184
c0022560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022564:	e8 47 ae fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0022569:	83 c4 10             	add    esp,0x10
c002256c:	83 c4 0c             	add    esp,0xc
c002256f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022570 <SATA::~SATA()>:
c0022570:	83 ec 0c             	sub    esp,0xc
c0022573:	ba 14 60 02 c0       	mov    edx,0xc0026014
c0022578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002257c:	89 10                	mov    DWORD PTR [eax],edx
c002257e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022582:	83 ec 0c             	sub    esp,0xc
c0022585:	50                   	push   eax
c0022586:	e8 3b 79 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c002258b:	83 c4 10             	add    esp,0x10
c002258e:	90                   	nop
c002258f:	83 c4 0c             	add    esp,0xc
c0022592:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022594 <SATA::~SATA()>:
c0022594:	83 ec 0c             	sub    esp,0xc
c0022597:	83 ec 0c             	sub    esp,0xc
c002259a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002259e:	e8 cd ff ff ff       	call   c0022570 <SATA::~SATA()>
c00225a3:	83 c4 10             	add    esp,0x10
c00225a6:	83 ec 08             	sub    esp,0x8
c00225a9:	68 7c 01 00 00       	push   0x17c
c00225ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225b2:	e8 f9 ad fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00225b7:	83 c4 10             	add    esp,0x10
c00225ba:	83 c4 0c             	add    esp,0xc
c00225bd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00225be <SATAPI::~SATAPI()>:
c00225be:	83 ec 0c             	sub    esp,0xc
c00225c1:	ba 38 61 02 c0       	mov    edx,0xc0026138
c00225c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ca:	89 10                	mov    DWORD PTR [eax],edx
c00225cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225d0:	83 ec 0c             	sub    esp,0xc
c00225d3:	50                   	push   eax
c00225d4:	e8 ed 78 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c00225d9:	83 c4 10             	add    esp,0x10
c00225dc:	90                   	nop
c00225dd:	83 c4 0c             	add    esp,0xc
c00225e0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00225e2 <SATAPI::~SATAPI()>:
c00225e2:	83 ec 0c             	sub    esp,0xc
c00225e5:	83 ec 0c             	sub    esp,0xc
c00225e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225ec:	e8 cd ff ff ff       	call   c00225be <SATAPI::~SATAPI()>
c00225f1:	83 c4 10             	add    esp,0x10
c00225f4:	83 ec 08             	sub    esp,0x8
c00225f7:	68 84 01 00 00       	push   0x184
c00225fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022600:	e8 ab ad fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0022605:	83 c4 10             	add    esp,0x10
c0022608:	83 c4 0c             	add    esp,0xc
c002260b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002260c <APICTimer::~APICTimer()>:
c002260c:	83 ec 0c             	sub    esp,0xc
c002260f:	ba 8c 61 02 c0       	mov    edx,0xc002618c
c0022614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022618:	89 10                	mov    DWORD PTR [eax],edx
c002261a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002261e:	83 ec 0c             	sub    esp,0xc
c0022621:	50                   	push   eax
c0022622:	e8 6d 8a fe ff       	call   c000b094 <Timer::~Timer()>
c0022627:	83 c4 10             	add    esp,0x10
c002262a:	90                   	nop
c002262b:	83 c4 0c             	add    esp,0xc
c002262e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022630 <APICTimer::~APICTimer()>:
c0022630:	83 ec 0c             	sub    esp,0xc
c0022633:	83 ec 0c             	sub    esp,0xc
c0022636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002263a:	e8 cd ff ff ff       	call   c002260c <APICTimer::~APICTimer()>
c002263f:	83 c4 10             	add    esp,0x10
c0022642:	83 ec 08             	sub    esp,0x8
c0022645:	68 60 01 00 00       	push   0x160
c002264a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002264e:	e8 5d ad fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0022653:	83 c4 10             	add    esp,0x10
c0022656:	83 c4 0c             	add    esp,0xc
c0022659:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002265c <PIT::~PIT()>:
c002265c:	83 ec 0c             	sub    esp,0xc
c002265f:	ba dc 61 02 c0       	mov    edx,0xc00261dc
c0022664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022668:	89 10                	mov    DWORD PTR [eax],edx
c002266a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002266e:	83 ec 0c             	sub    esp,0xc
c0022671:	50                   	push   eax
c0022672:	e8 1d 8a fe ff       	call   c000b094 <Timer::~Timer()>
c0022677:	83 c4 10             	add    esp,0x10
c002267a:	90                   	nop
c002267b:	83 c4 0c             	add    esp,0xc
c002267e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022680 <PIT::~PIT()>:
c0022680:	83 ec 0c             	sub    esp,0xc
c0022683:	83 ec 0c             	sub    esp,0xc
c0022686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002268a:	e8 cd ff ff ff       	call   c002265c <PIT::~PIT()>
c002268f:	83 c4 10             	add    esp,0x10
c0022692:	83 ec 08             	sub    esp,0x8
c0022695:	68 5c 01 00 00       	push   0x15c
c002269a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002269e:	e8 0d ad fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00226a3:	83 c4 10             	add    esp,0x10
c00226a6:	83 c4 0c             	add    esp,0xc
c00226a9:	c3                   	ret    

Disassembly of section userkernel:

c0027000 <KiDefaultSignalHandlerAbort(int)>:
c0027000:	57                   	push   edi
c0027001:	b9 07 00 00 00       	mov    ecx,0x7
c0027006:	56                   	push   esi
c0027007:	be ef 43 02 c0       	mov    esi,0xc00243ef
c002700c:	83 ec 24             	sub    esp,0x24
c002700f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0027013:	fc                   	cld    
c0027014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002701a:	50                   	push   eax
c002701b:	6a 00                	push   0x0
c002701d:	6a 38                	push   0x38
c002701f:	6a 01                	push   0x1
c0027021:	e8 2c 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0027026:	83 c4 34             	add    esp,0x34
c0027029:	5e                   	pop    esi
c002702a:	5f                   	pop    edi
c002702b:	c3                   	ret    

c002702c <KiDefaultSignalHandlerTerminate(int)>:
c002702c:	57                   	push   edi
c002702d:	b9 08 00 00 00       	mov    ecx,0x8
c0027032:	56                   	push   esi
c0027033:	be 0b 44 02 c0       	mov    esi,0xc002440b
c0027038:	83 ec 24             	sub    esp,0x24
c002703b:	89 e7                	mov    edi,esp
c002703d:	fc                   	cld    
c002703e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027040:	54                   	push   esp
c0027041:	6a 00                	push   0x0
c0027043:	6a 37                	push   0x37
c0027045:	6a 01                	push   0x1
c0027047:	e8 06 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002704c:	83 c4 34             	add    esp,0x34
c002704f:	5e                   	pop    esi
c0027050:	5f                   	pop    edi
c0027051:	c3                   	ret    

c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0027052:	53                   	push   ebx
c0027053:	83 ec 10             	sub    esp,0x10
c0027056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002705a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027066:	cd 60                	int    0x60
c0027068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002706c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	5b                   	pop    ebx
c002707c:	c3                   	ret    

Disassembly of section align_previous:

c0028000 <DO_NOT_DELETE()>:
c0028000:	c3                   	ret    
