
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 af eb 00 00       	call   c000ebcf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 48 45 02 c0       	mov    eax,0xc0024548
c0000025:	3d 48 45 02 c0       	cmp    eax,0xc0024548
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 48 45 02 c0       	push   0xc0024548
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 48 45 02 c0       	mov    eax,0xc0024548
c0000051:	2d 48 45 02 c0       	sub    eax,0xc0024548
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 48 45 02 c0       	push   0xc0024548
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 10 08 02 c0       	mov    ebx,0xc0020810
c0000097:	81 eb 0c 08 02 c0    	sub    ebx,0xc002080c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 0c 08 02 c0       	mov    esi,0xc002080c
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 48 45 02 c0       	push   0xc0024548
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 48 45 02 c0       	push   0xc0024548
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 d7 4a 01 00       	call   c0014d84 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 84 2e 01 00       	call   c0013149 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b5 4a 01 00       	call   c0014d84 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 d6 4f 01 00       	call   c00152c4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 79 54 01 00       	call   c0015770 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 bd 02 c0 	lgdtd  ds:0xc002bd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 52 e4 00 00       	jmp    c000e7d1 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 20 08 02 c0 02 	test   BYTE PTR [edx-0x3ffdf7e0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 20 08 02 c0 01 	test   BYTE PTR [edx-0x3ffdf7e0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 20 08 02 c0 08 	test   BYTE PTR [edx-0x3ffdf7e0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 20 08 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf7e0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 20 08 02 c0 01 	test   BYTE PTR [edx-0x3ffdf7e0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 61 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 64 02 c0    	dec    DWORD PTR ds:0xc0026450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 64 02 c0    	sub    DWORD PTR ds:0xc0026464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 b1 da 00 00       	call   c000e911 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 be d9 00 00       	call   c000e8b3 <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 9d d8 00 00       	call   c000e87d <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 98 d8 00 00       	call   c000e8b3 <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 44 d7 00 00       	call   c000e87d <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 2a d7 00 00       	call   c000e87d <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 00 d7 00 00       	call   c000e87d <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00012e5:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c0001321:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001326:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001334:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001385:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c00013a0:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c000145a:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c0001460:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001467:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c000152d:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c0001533:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c000153a:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 24 09 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf6dc]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 41 83 01 00       	jmp    c001a2cc <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 6b 83 01 00       	jmp    c001a30c <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 8c 83 01 00       	jmp    c001a34c <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 80 0a 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf580]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 80 0a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf580]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba cc 31 02 c0       	mov    edx,0xc00231cc
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 3c 09 02 c0       	mov    edx,0xc002093c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 42 09 02 c0       	mov    eax,0xc0020942
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 00 0a 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf600]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 4b 09 02 c0       	mov    eax,0xc002094b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 80 0a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf580]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 d0 09 02 c0       	mov    eax,0xc00209d0
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb c0 09 02 c0       	mov    ebx,0xc00209c0
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 a0 09 02 c0       	mov    eax,0xc00209a0
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 b0 09 02 c0       	mov    eax,0xc00209b0
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 52 09 02 c0       	mov    edx,0xc0020952
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 5e 09 02 c0       	mov    edx,0xc002095e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 72 09 02 c0       	mov    edx,0xc0020972
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 7a 8b 00 00       	call   c000e991 <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 72 8b 00 00       	call   c000e9a1 <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c a0 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020da0
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 a0 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020da0
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 a0 0b 02 c0       	mov    eax,0xc0020ba0
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 e0 0a 02 c0       	mov    eax,0xc0020ae0
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 a0 0a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf560]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 a0 0e 02 c0       	push   0xc0020ea0
c0006303:	e8 60 49 01 00       	call   c001ac68 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 ae 0e 02 c0       	push   0xc0020eae
c000633b:	e8 28 49 01 00       	call   c001ac68 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 91 48 01 00       	call   c001ac0c <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 60 02 c0       	mov    eax,0xc0026080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 60 02 c0       	mov    eax,0xc0026020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 bd 0e 02 c0       	push   0xc0020ebd
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c0006746:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000674c:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006768:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00067e1:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00068d9:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c0006917:	05 40 65 02 c0       	add    eax,0xc0026540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00069d6:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 c0 0e 02 c0       	push   0xc0020ec0
c00069fa:	e8 69 42 01 00       	call   c001ac68 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 7d 42 01 00       	call   c001ac84 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 c5 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ec5
c0006a14:	e8 4f 42 01 00       	call   c001ac68 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006a20:	e8 5f 42 01 00       	call   c001ac84 <iso_kprintfd>
c0006a25:	c7 04 24 cb 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ecb
c0006a2c:	e8 37 42 01 00       	call   c001ac68 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006a38:	e8 47 42 01 00       	call   c001ac84 <iso_kprintfd>
c0006a3d:	c7 04 24 d1 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ed1
c0006a44:	e8 1f 42 01 00       	call   c001ac68 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006a50:	e8 2f 42 01 00       	call   c001ac84 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c0006ab6:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c0006b12:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 bd 0e 02 c0       	push   0xc0020ebd
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006bee:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006bf4:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 65 02 c0       	add    eax,0xc0026550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 da 0e 02 c0       	push   0xc0020eda
c0006c19:	e8 4a 40 01 00       	call   c001ac68 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006c4e:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 e5 0e 02 c0       	push   0xc0020ee5
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 ec 0e 02 c0       	push   0xc0020eec
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006cec:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006d0f:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 f3 0e 02 c0       	push   0xc0020ef3
c0006d30:	e8 33 3f 01 00       	call   c001ac68 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 fe 0e 02 c0       	push   0xc0020efe
c0006d4b:	e8 18 3f 01 00       	call   c001ac68 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 65 02 c0       	push   0xc0026540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006d75:	e8 17 7c 00 00       	call   c000e991 <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006d86:	e8 06 7c 00 00       	call   c000e991 <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 f1 7b 00 00       	call   c000e991 <malloc>
c0006da0:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 d8 7b 00 00       	call   c000e991 <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006de6:	e8 b6 7b 00 00       	call   c000e9a1 <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 a8 7b 00 00       	call   c000e9a1 <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 8e 7b 00 00       	call   c000e9a1 <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 79 7b 00 00       	call   c000e9a1 <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006e35:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 10 0f 02 c0       	mov    esi,0xc0020f10
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 0f 0f 02 c0       	mov    al,ds:0xc0020f0f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 20 0f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf0e0]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 70 10 02 c0       	push   0xc0021070
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 84 10 02 c0       	push   0xc0021084
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 8e 10 02 c0       	push   0xc002108e
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 98 10 02 c0       	push   0xc0021098
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 dc 11 02 c0       	push   0xc00211dc
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 a2 10 02 c0       	push   0xc00210a2
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 fc 11 02 c0       	push   0xc00211fc
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 b7 10 02 c0       	push   0xc00210b7
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 d1 10 02 c0       	push   0xc00210d1
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 00 3b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc500]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 24 12 02 c0       	push   0xc0021224
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 dc 11 02 c0       	push   0xc00211dc
c00071d4:	e8 0d 7b 00 00       	call   c000ece6 <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 6c 12 02 c0       	push   0xc002126c
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 6c 12 02 c0       	push   0xc002126c
c0007203:	e8 de 7a 00 00       	call   c000ece6 <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 dc 10 02 c0       	push   0xc00210dc
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 dc 10 02 c0       	push   0xc00210dc
c000722f:	e8 b2 7a 00 00       	call   c000ece6 <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 f9 10 02 c0       	push   0xc00210f9
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 f9 10 02 c0       	push   0xc00210f9
c000725b:	e8 86 7a 00 00       	call   c000ece6 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 8c 12 02 c0       	push   0xc002128c
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 8c 12 02 c0       	push   0xc002128c
c0007287:	e8 5a 7a 00 00       	call   c000ece6 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 b0 12 02 c0       	push   0xc00212b0
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 b0 12 02 c0       	push   0xc00212b0
c00072b3:	e8 2e 7a 00 00       	call   c000ece6 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 15 11 02 c0       	push   0xc0021115
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 15 11 02 c0       	push   0xc0021115
c00072df:	e8 02 7a 00 00       	call   c000ece6 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 31 11 02 c0       	push   0xc0021131
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 31 11 02 c0       	push   0xc0021131
c000730b:	e8 d6 79 00 00       	call   c000ece6 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 d0 12 02 c0       	push   0xc00212d0
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 d0 12 02 c0       	push   0xc00212d0
c0007337:	e8 aa 79 00 00       	call   c000ece6 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 f4 12 02 c0       	push   0xc00212f4
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 f4 12 02 c0       	push   0xc00212f4
c0007363:	e8 7e 79 00 00       	call   c000ece6 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 73 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 73 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 73 02 c0    	mov    BYTE PTR [ebx-0x3ffd8d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 c7 75 00 00       	call   c000e991 <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00073d5:	68 13 13 02 c0       	push   0xc0021313
c00073da:	50                   	push   eax
c00073db:	e8 32 0d 00 00       	call   c0008112 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 31 13 02 c0       	push   0xc0021331
c00073ef:	e8 f2 78 00 00       	call   c000ece6 <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 2f 0d 00 00       	call   c0008130 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 4b 13 02 c0       	push   0xc002134b
c0007410:	e8 d1 78 00 00       	call   c000ece6 <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 65 13 02 c0       	push   0xc0021365
c0007457:	e8 8a 78 00 00       	call   c000ece6 <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 6e 02 c0 	lea    edx,[esi*8-0x3ffd9120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 7f 13 02 c0       	push   0xc002137f
c0007487:	e8 5a 78 00 00       	call   c000ece6 <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 f3 0c 00 00       	call   c000818e <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 c0 62 00 00       	call   c000d799 <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 be 81 00 00       	call   c000f6b1 <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 93 02 c0    	mov    ebp,DWORD PTR ds:0xc0029300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 93 02 c0    	mov    DWORD PTR ds:0xc0029300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 99 13 02 c0       	push   0xc0021399
c000752c:	e8 b5 77 00 00       	call   c000ece6 <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd911c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 73 02 c0       	push   0xc0027300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 71 4f 00 00       	call   c000c582 <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 74 73 00 00       	call   c000e991 <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007628:	68 13 13 02 c0       	push   0xc0021313
c000762d:	50                   	push   eax
c000762e:	e8 df 0a 00 00       	call   c0008112 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 a2 13 02 c0       	push   0xc00213a2
c0007642:	e8 9f 76 00 00       	call   c000ece6 <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 a1 0d 00 00       	call   c00083f4 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 cc 0a 00 00       	call   c0008130 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 bf 13 02 c0       	push   0xc00213bf
c0007673:	e8 6e 76 00 00       	call   c000ece6 <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 0a 0b 00 00       	call   c000818e <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 92 0a 00 00       	call   c0008130 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 dc 13 02 c0       	push   0xc00213dc
c00076ad:	e8 34 76 00 00       	call   c000ece6 <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 93 02 c0    	inc    DWORD PTR ds:0xc0029300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 70 0a 00 00       	call   c000818e <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 6e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9120]
c0007790:	8b 14 dd e4 6e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd911c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 e5 71 00 00       	call   c000e991 <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00077b7:	68 13 13 02 c0       	push   0xc0021313
c00077bc:	50                   	push   eax
c00077bd:	e8 50 09 00 00       	call   c0008112 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 f7 13 02 c0       	push   0xc00213f7
c00077d1:	e8 10 75 00 00       	call   c000ece6 <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 10 0c 00 00       	call   c00083f4 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 3b 09 00 00       	call   c0008130 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 12 14 02 c0       	push   0xc0021412
c0007804:	e8 dd 74 00 00       	call   c000ece6 <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 25 09 00 00       	call   c000818e <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 07 09 00 00       	call   c000818e <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 be 70 00 00       	call   c000e991 <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 2d 08 00 00       	call   c0008112 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 36 08 00 00       	call   c0008130 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 9d 0a 00 00       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 77 07 00 00       	call   c000818e <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 5e 07 00 00       	call   c000818e <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 34 6f 00 00       	call   c000e991 <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 a5 06 00 00       	call   c0008130 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be 2d 14 02 c0       	mov    esi,0xc002142d
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 3a 06 00 00       	call   c000818e <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 22 06 00 00       	call   c000818e <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba ec 14 02 c0       	mov    edx,0xc00214ec
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 49 a1 00 00       	call   c0011e38 <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 ed 49 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba 08 15 02 c0       	mov    edx,0xc0021508
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 fb a0 00 00       	call   c0011e38 <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 9f 49 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba 80 14 02 c0       	mov    edx,0xc0021480
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 93 02 c0       	mov    ds:0xc0029304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba 80 14 02 c0       	mov    edx,0xc0021480
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 49 49 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 97 6b 00 00       	call   c000e991 <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 66 26 01 00       	call   c001a468 <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 83 6b 00 00       	call   c000e991 <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 7e 35 01 00       	call   c001b394 <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 25 2b 02 c0       	push   0xc0022b25
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 36 14 02 c0       	push   0xc0021436
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 51 14 02 c0       	push   0xc0021451
c000801f:	e8 c2 6c 00 00       	call   c000ece6 <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 04 9c 00 00       	call   c0011c52 <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba ec 14 02 c0       	mov    edx,0xc00214ec
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080a0:	83 e8 41             	sub    eax,0x41
c00080a3:	88 c2                	mov    dl,al
c00080a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080a9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080c1:	0f b6 c0             	movzx  eax,al
c00080c4:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080cb:	85 c0                	test   eax,eax
c00080cd:	74 3e                	je     c000810d <File::File(char const*, Process*, bool)+0xd9>
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080d9:	0f b6 c0             	movzx  eax,al
c00080dc:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080e3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00080e9:	85 c0                	test   eax,eax
c00080eb:	75 20                	jne    c000810d <File::File(char const*, Process*, bool)+0xd9>
c00080ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f7:	0f b6 c0             	movzx  eax,al
c00080fa:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008101:	83 ec 0c             	sub    esp,0xc
c0008104:	50                   	push   eax
c0008105:	e8 10 1f 00 00       	call   c000a01a <LogicalDisk::mount()>
c000810a:	83 c4 10             	add    esp,0x10
c000810d:	90                   	nop
c000810e:	83 c4 1c             	add    esp,0x1c
c0008111:	c3                   	ret    

c0008112 <File::File(char const*, Process*)>:
c0008112:	83 ec 0c             	sub    esp,0xc
c0008115:	6a 01                	push   0x1
c0008117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008123:	e8 0c ff ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008128:	83 c4 10             	add    esp,0x10
c000812b:	90                   	nop
c000812c:	83 c4 0c             	add    esp,0xc
c000812f:	c3                   	ret    

c0008130 <File::open(FileOpenMode)>:
c0008130:	53                   	push   ebx
c0008131:	b8 0b 00 00 00       	mov    eax,0xb
c0008136:	83 ec 08             	sub    esp,0x8
c0008139:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000813d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008144:	83 fa 19             	cmp    edx,0x19
c0008147:	77 40                	ja     c0008189 <File::open(FileOpenMode)+0x59>
c0008149:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008150:	85 d2                	test   edx,edx
c0008152:	74 35                	je     c0008189 <File::open(FileOpenMode)+0x59>
c0008154:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000815a:	85 d2                	test   edx,edx
c000815c:	74 2b                	je     c0008189 <File::open(FileOpenMode)+0x59>
c000815e:	b8 06 00 00 00       	mov    eax,0x6
c0008163:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008167:	75 20                	jne    c0008189 <File::open(FileOpenMode)+0x59>
c0008169:	8b 02                	mov    eax,DWORD PTR [edx]
c000816b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008171:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008175:	51                   	push   ecx
c0008176:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008179:	51                   	push   ecx
c000817a:	52                   	push   edx
c000817b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000817e:	83 c4 10             	add    esp,0x10
c0008181:	85 c0                	test   eax,eax
c0008183:	75 04                	jne    c0008189 <File::open(FileOpenMode)+0x59>
c0008185:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008189:	83 c4 08             	add    esp,0x8
c000818c:	5b                   	pop    ebx
c000818d:	c3                   	ret    

c000818e <File::close()>:
c000818e:	53                   	push   ebx
c000818f:	b8 0b 00 00 00       	mov    eax,0xb
c0008194:	83 ec 08             	sub    esp,0x8
c0008197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000819b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081a2:	83 f9 19             	cmp    ecx,0x19
c00081a5:	77 41                	ja     c00081e8 <File::close()+0x5a>
c00081a7:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c00081ae:	85 db                	test   ebx,ebx
c00081b0:	74 36                	je     c00081e8 <File::close()+0x5a>
c00081b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081b9:	74 2d                	je     c00081e8 <File::close()+0x5a>
c00081bb:	b8 05 00 00 00       	mov    eax,0x5
c00081c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081c4:	74 22                	je     c00081e8 <File::close()+0x5a>
c00081c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ca:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c00081d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081d7:	53                   	push   ebx
c00081d8:	53                   	push   ebx
c00081d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081e1:	50                   	push   eax
c00081e2:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	83 c4 08             	add    esp,0x8
c00081eb:	5b                   	pop    ebx
c00081ec:	c3                   	ret    
c00081ed:	90                   	nop

c00081ee <File::seek(unsigned long long)>:
c00081ee:	56                   	push   esi
c00081ef:	53                   	push   ebx
c00081f0:	b8 0b 00 00 00       	mov    eax,0xb
c00081f5:	51                   	push   ecx
c00081f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00081fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00081fe:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008205:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008209:	83 fa 19             	cmp    edx,0x19
c000820c:	77 31                	ja     c000823f <File::seek(unsigned long long)+0x51>
c000820e:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008215:	85 d2                	test   edx,edx
c0008217:	74 26                	je     c000823f <File::seek(unsigned long long)+0x51>
c0008219:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000821f:	85 d2                	test   edx,edx
c0008221:	74 1c                	je     c000823f <File::seek(unsigned long long)+0x51>
c0008223:	b8 05 00 00 00       	mov    eax,0x5
c0008228:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000822c:	74 11                	je     c000823f <File::seek(unsigned long long)+0x51>
c000822e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008230:	53                   	push   ebx
c0008231:	51                   	push   ecx
c0008232:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008238:	52                   	push   edx
c0008239:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000823c:	83 c4 10             	add    esp,0x10
c000823f:	5a                   	pop    edx
c0008240:	5b                   	pop    ebx
c0008241:	5e                   	pop    esi
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <File::truncate(unsigned long long)>:
c0008244:	56                   	push   esi
c0008245:	53                   	push   ebx
c0008246:	b8 0b 00 00 00       	mov    eax,0xb
c000824b:	51                   	push   ecx
c000824c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008250:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008254:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000825b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000825f:	83 fa 19             	cmp    edx,0x19
c0008262:	77 31                	ja     c0008295 <File::truncate(unsigned long long)+0x51>
c0008264:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000826b:	85 d2                	test   edx,edx
c000826d:	74 26                	je     c0008295 <File::truncate(unsigned long long)+0x51>
c000826f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008275:	85 d2                	test   edx,edx
c0008277:	74 1c                	je     c0008295 <File::truncate(unsigned long long)+0x51>
c0008279:	b8 05 00 00 00       	mov    eax,0x5
c000827e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008282:	74 11                	je     c0008295 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 02                	mov    eax,DWORD PTR [edx]
c0008286:	53                   	push   ebx
c0008287:	51                   	push   ecx
c0008288:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000828e:	52                   	push   edx
c000828f:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008292:	83 c4 10             	add    esp,0x10
c0008295:	5a                   	pop    edx
c0008296:	5b                   	pop    ebx
c0008297:	5e                   	pop    esi
c0008298:	c3                   	ret    
c0008299:	90                   	nop

c000829a <File::tell(unsigned long long*)>:
c000829a:	83 ec 0c             	sub    esp,0xc
c000829d:	b8 0b 00 00 00       	mov    eax,0xb
c00082a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082a6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082ad:	83 fa 19             	cmp    edx,0x19
c00082b0:	77 34                	ja     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082b2:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00082b9:	85 d2                	test   edx,edx
c00082bb:	74 29                	je     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082bd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082c3:	85 d2                	test   edx,edx
c00082c5:	74 1f                	je     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082c7:	b8 05 00 00 00       	mov    eax,0x5
c00082cc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082d0:	74 14                	je     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082d2:	50                   	push   eax
c00082d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082d9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082df:	52                   	push   edx
c00082e0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082e3:	83 c4 10             	add    esp,0x10
c00082e6:	83 c4 0c             	add    esp,0xc
c00082e9:	c3                   	ret    

c00082ea <File::rewind()>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	6a 00                	push   0x0
c00082ef:	6a 00                	push   0x0
c00082f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082f5:	e8 f4 fe ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00082fa:	83 c4 1c             	add    esp,0x1c
c00082fd:	c3                   	ret    

c00082fe <File::unlink()>:
c00082fe:	83 ec 0c             	sub    esp,0xc
c0008301:	b8 0b 00 00 00       	mov    eax,0xb
c0008306:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000830a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008311:	83 f9 19             	cmp    ecx,0x19
c0008314:	77 2f                	ja     c0008345 <File::unlink()+0x47>
c0008316:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000831d:	85 c9                	test   ecx,ecx
c000831f:	74 24                	je     c0008345 <File::unlink()+0x47>
c0008321:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008327:	85 c9                	test   ecx,ecx
c0008329:	74 1a                	je     c0008345 <File::unlink()+0x47>
c000832b:	b8 06 00 00 00       	mov    eax,0x6
c0008330:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008334:	75 0f                	jne    c0008345 <File::unlink()+0x47>
c0008336:	83 c2 0d             	add    edx,0xd
c0008339:	50                   	push   eax
c000833a:	50                   	push   eax
c000833b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000833d:	52                   	push   edx
c000833e:	51                   	push   ecx
c000833f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008342:	83 c4 10             	add    esp,0x10
c0008345:	83 c4 0c             	add    esp,0xc
c0008348:	c3                   	ret    
c0008349:	90                   	nop

c000834a <File::rename(char const*)>:
c000834a:	83 ec 0c             	sub    esp,0xc
c000834d:	b8 0b 00 00 00       	mov    eax,0xb
c0008352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008356:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000835d:	83 f9 19             	cmp    ecx,0x19
c0008360:	77 32                	ja     c0008394 <File::rename(char const*)+0x4a>
c0008362:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008369:	85 c9                	test   ecx,ecx
c000836b:	74 27                	je     c0008394 <File::rename(char const*)+0x4a>
c000836d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008373:	85 c9                	test   ecx,ecx
c0008375:	74 1d                	je     c0008394 <File::rename(char const*)+0x4a>
c0008377:	b8 06 00 00 00       	mov    eax,0x6
c000837c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008380:	75 12                	jne    c0008394 <File::rename(char const*)+0x4a>
c0008382:	83 c2 0d             	add    edx,0xd
c0008385:	50                   	push   eax
c0008386:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008388:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000838c:	52                   	push   edx
c000838d:	51                   	push   ecx
c000838e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008391:	83 c4 10             	add    esp,0x10
c0008394:	83 c4 0c             	add    esp,0xc
c0008397:	c3                   	ret    

c0008398 <File::chfatattr(unsigned char, unsigned char)>:
c0008398:	57                   	push   edi
c0008399:	b8 0b 00 00 00       	mov    eax,0xb
c000839e:	56                   	push   esi
c000839f:	53                   	push   ebx
c00083a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083b3:	83 f9 19             	cmp    ecx,0x19
c00083b6:	77 37                	ja     c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083b8:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00083bf:	85 c9                	test   ecx,ecx
c00083c1:	74 2c                	je     c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083c3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083c9:	85 c9                	test   ecx,ecx
c00083cb:	74 22                	je     c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083cd:	b8 06 00 00 00       	mov    eax,0x6
c00083d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083d6:	75 17                	jne    c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083da:	89 f0                	mov    eax,esi
c00083dc:	83 c2 0d             	add    edx,0xd
c00083df:	0f b6 f0             	movzx  esi,al
c00083e2:	0f b6 db             	movzx  ebx,bl
c00083e5:	56                   	push   esi
c00083e6:	53                   	push   ebx
c00083e7:	52                   	push   edx
c00083e8:	51                   	push   ecx
c00083e9:	ff 57 38             	call   DWORD PTR [edi+0x38]
c00083ec:	83 c4 10             	add    esp,0x10
c00083ef:	5b                   	pop    ebx
c00083f0:	5e                   	pop    esi
c00083f1:	5f                   	pop    edi
c00083f2:	c3                   	ret    
c00083f3:	90                   	nop

c00083f4 <File::exists()>:
c00083f4:	83 ec 0c             	sub    esp,0xc
c00083f7:	31 c0                	xor    eax,eax
c00083f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083fd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008404:	83 f9 19             	cmp    ecx,0x19
c0008407:	77 24                	ja     c000842d <File::exists()+0x39>
c0008409:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008410:	85 c9                	test   ecx,ecx
c0008412:	74 19                	je     c000842d <File::exists()+0x39>
c0008414:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000841a:	85 c9                	test   ecx,ecx
c000841c:	74 0f                	je     c000842d <File::exists()+0x39>
c000841e:	83 c2 0d             	add    edx,0xd
c0008421:	50                   	push   eax
c0008422:	50                   	push   eax
c0008423:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008425:	52                   	push   edx
c0008426:	51                   	push   ecx
c0008427:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000842a:	83 c4 10             	add    esp,0x10
c000842d:	83 c4 0c             	add    esp,0xc
c0008430:	c3                   	ret    
c0008431:	90                   	nop

c0008432 <File::stat(unsigned long long*, bool*)>:
c0008432:	56                   	push   esi
c0008433:	53                   	push   ebx
c0008434:	50                   	push   eax
c0008435:	b8 0b 00 00 00       	mov    eax,0xb
c000843a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000843e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008442:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008449:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000844d:	83 f9 19             	cmp    ecx,0x19
c0008450:	77 3d                	ja     c000848f <File::stat(unsigned long long*, bool*)+0x5d>
c0008452:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008459:	85 c9                	test   ecx,ecx
c000845b:	74 32                	je     c000848f <File::stat(unsigned long long*, bool*)+0x5d>
c000845d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008463:	85 c9                	test   ecx,ecx
c0008465:	74 28                	je     c000848f <File::stat(unsigned long long*, bool*)+0x5d>
c0008467:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008469:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000846d:	74 13                	je     c0008482 <File::stat(unsigned long long*, bool*)+0x50>
c000846f:	83 ec 04             	sub    esp,0x4
c0008472:	56                   	push   esi
c0008473:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008479:	51                   	push   ecx
c000847a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000847d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0008480:	eb 0a                	jmp    c000848c <File::stat(unsigned long long*, bool*)+0x5a>
c0008482:	53                   	push   ebx
c0008483:	83 c2 0d             	add    edx,0xd
c0008486:	56                   	push   esi
c0008487:	52                   	push   edx
c0008488:	51                   	push   ecx
c0008489:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	5a                   	pop    edx
c0008490:	5b                   	pop    ebx
c0008491:	5e                   	pop    esi
c0008492:	c3                   	ret    

c0008493 <Fs::setcwd(Process*, char*)>:
c0008493:	55                   	push   ebp
c0008494:	57                   	push   edi
c0008495:	56                   	push   esi
c0008496:	53                   	push   ebx
c0008497:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000849d:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084a4:	6a 00                	push   0x0
c00084a6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084ac:	57                   	push   edi
c00084ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084b4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084b8:	56                   	push   esi
c00084b9:	e8 5c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084be:	89 34 24             	mov    DWORD PTR [esp],esi
c00084c1:	e8 aa 80 ff ff       	call   c0000570 <strlen>
c00084c6:	83 c4 10             	add    esp,0x10
c00084c9:	83 f8 02             	cmp    eax,0x2
c00084cc:	77 15                	ja     c00084e3 <Fs::setcwd(Process*, char*)+0x50>
c00084ce:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084d3:	83 eb 41             	sub    ebx,0x41
c00084d6:	8b 04 9d 80 97 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6880]
c00084dd:	85 c0                	test   eax,eax
c00084df:	75 1c                	jne    c00084fd <Fs::setcwd(Process*, char*)+0x6a>
c00084e1:	eb 2f                	jmp    c0008512 <Fs::setcwd(Process*, char*)+0x7f>
c00084e3:	83 ec 0c             	sub    esp,0xc
c00084e6:	56                   	push   esi
c00084e7:	e8 84 80 ff ff       	call   c0000570 <strlen>
c00084ec:	83 c4 10             	add    esp,0x10
c00084ef:	83 f8 03             	cmp    eax,0x3
c00084f2:	75 57                	jne    c000854b <Fs::setcwd(Process*, char*)+0xb8>
c00084f4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00084f9:	75 50                	jne    c000854b <Fs::setcwd(Process*, char*)+0xb8>
c00084fb:	eb d1                	jmp    c00084ce <Fs::setcwd(Process*, char*)+0x3b>
c00084fd:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008504:	75 0c                	jne    c0008512 <Fs::setcwd(Process*, char*)+0x7f>
c0008506:	83 ec 0c             	sub    esp,0xc
c0008509:	50                   	push   eax
c000850a:	e8 0b 1b 00 00       	call   c000a01a <LogicalDisk::mount()>
c000850f:	83 c4 10             	add    esp,0x10
c0008512:	b8 03 00 00 00       	mov    eax,0x3
c0008517:	83 fb 19             	cmp    ebx,0x19
c000851a:	0f 87 c6 00 00 00    	ja     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c0008520:	8b 14 9d 80 97 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6880]
c0008527:	b8 05 00 00 00       	mov    eax,0x5
c000852c:	85 d2                	test   edx,edx
c000852e:	0f 84 b2 00 00 00    	je     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c0008534:	b8 06 00 00 00       	mov    eax,0x6
c0008539:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008540:	0f 85 92 00 00 00    	jne    c00085d8 <Fs::setcwd(Process*, char*)+0x145>
c0008546:	e9 9b 00 00 00       	jmp    c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c000854b:	83 ec 0c             	sub    esp,0xc
c000854e:	68 14 01 00 00       	push   0x114
c0008553:	e8 39 64 00 00       	call   c000e991 <malloc>
c0008558:	83 c4 0c             	add    esp,0xc
c000855b:	89 c3                	mov    ebx,eax
c000855d:	55                   	push   ebp
c000855e:	56                   	push   esi
c000855f:	50                   	push   eax
c0008560:	e8 ad fb ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0008565:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000856a:	83 c4 0c             	add    esp,0xc
c000856d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008571:	50                   	push   eax
c0008572:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008576:	50                   	push   eax
c0008577:	53                   	push   ebx
c0008578:	e8 b5 fe ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c000857d:	83 c4 10             	add    esp,0x10
c0008580:	83 f8 02             	cmp    eax,0x2
c0008583:	74 27                	je     c00085ac <Fs::setcwd(Process*, char*)+0x119>
c0008585:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000858a:	75 1c                	jne    c00085a8 <Fs::setcwd(Process*, char*)+0x115>
c000858c:	b8 02 00 00 00       	mov    eax,0x2
c0008591:	85 db                	test   ebx,ebx
c0008593:	74 51                	je     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	8b 03                	mov    eax,DWORD PTR [ebx]
c000859a:	53                   	push   ebx
c000859b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000859e:	83 c4 10             	add    esp,0x10
c00085a1:	b8 02 00 00 00       	mov    eax,0x2
c00085a6:	eb 3e                	jmp    c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c00085a8:	85 c0                	test   eax,eax
c00085aa:	74 1c                	je     c00085c8 <Fs::setcwd(Process*, char*)+0x135>
c00085ac:	b8 01 00 00 00       	mov    eax,0x1
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 31                	je     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 01 00 00 00       	mov    eax,0x1
c00085c6:	eb 1e                	jmp    c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 db                	test   ebx,ebx
c00085ca:	74 0c                	je     c00085d8 <Fs::setcwd(Process*, char*)+0x145>
c00085cc:	83 ec 0c             	sub    esp,0xc
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	53                   	push   ebx
c00085d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	50                   	push   eax
c00085d9:	50                   	push   eax
c00085da:	56                   	push   esi
c00085db:	57                   	push   edi
c00085dc:	e8 5f 80 ff ff       	call   c0000640 <strcpy>
c00085e1:	83 c4 10             	add    esp,0x10
c00085e4:	31 c0                	xor    eax,eax
c00085e6:	81 c4 1c 02 00 00    	add    esp,0x21c
c00085ec:	5b                   	pop    ebx
c00085ed:	5e                   	pop    esi
c00085ee:	5f                   	pop    edi
c00085ef:	5d                   	pop    ebp
c00085f0:	c3                   	ret    
c00085f1:	90                   	nop

c00085f2 <Directory::Directory(char const*, Process*)>:
c00085f2:	83 ec 0c             	sub    esp,0xc
c00085f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f9:	83 ec 08             	sub    esp,0x8
c00085fc:	6a 00                	push   0x0
c00085fe:	50                   	push   eax
c00085ff:	e8 4e 96 00 00       	call   c0011c52 <UnixFile::UnixFile(int)>
c0008604:	83 c4 10             	add    esp,0x10
c0008607:	ba 08 15 02 c0       	mov    edx,0xc0021508
c000860c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008610:	89 10                	mov    DWORD PTR [eax],edx
c0008612:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008617:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000861b:	0f 95 c0             	setne  al
c000861e:	0f b6 c0             	movzx  eax,al
c0008621:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008625:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000862b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000862f:	83 c2 0d             	add    edx,0xd
c0008632:	50                   	push   eax
c0008633:	51                   	push   ecx
c0008634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008638:	52                   	push   edx
c0008639:	e8 dc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000863e:	83 c4 10             	add    esp,0x10
c0008641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008645:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008648:	83 e8 41             	sub    eax,0x41
c000864b:	88 c2                	mov    dl,al
c000864d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008651:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000865f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008663:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008669:	0f b6 c0             	movzx  eax,al
c000866c:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008673:	85 c0                	test   eax,eax
c0008675:	74 3e                	je     c00086b5 <Directory::Directory(char const*, Process*)+0xc3>
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008681:	0f b6 c0             	movzx  eax,al
c0008684:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000868b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008691:	85 c0                	test   eax,eax
c0008693:	75 20                	jne    c00086b5 <Directory::Directory(char const*, Process*)+0xc3>
c0008695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008699:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000869f:	0f b6 c0             	movzx  eax,al
c00086a2:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	50                   	push   eax
c00086ad:	e8 68 19 00 00       	call   c000a01a <LogicalDisk::mount()>
c00086b2:	83 c4 10             	add    esp,0x10
c00086b5:	90                   	nop
c00086b6:	83 c4 0c             	add    esp,0xc
c00086b9:	c3                   	ret    

c00086ba <Directory::open()>:
c00086ba:	53                   	push   ebx
c00086bb:	b8 0b 00 00 00       	mov    eax,0xb
c00086c0:	83 ec 08             	sub    esp,0x8
c00086c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086c7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ce:	83 fa 19             	cmp    edx,0x19
c00086d1:	77 3d                	ja     c0008710 <Directory::open()+0x56>
c00086d3:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00086da:	85 d2                	test   edx,edx
c00086dc:	74 32                	je     c0008710 <Directory::open()+0x56>
c00086de:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086e4:	85 d2                	test   edx,edx
c00086e6:	74 28                	je     c0008710 <Directory::open()+0x56>
c00086e8:	b8 06 00 00 00       	mov    eax,0x6
c00086ed:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00086f1:	75 1d                	jne    c0008710 <Directory::open()+0x56>
c00086f3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00086f9:	50                   	push   eax
c00086fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00086fc:	51                   	push   ecx
c00086fd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008700:	51                   	push   ecx
c0008701:	52                   	push   edx
c0008702:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008705:	83 c4 10             	add    esp,0x10
c0008708:	85 c0                	test   eax,eax
c000870a:	75 04                	jne    c0008710 <Directory::open()+0x56>
c000870c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008710:	83 c4 08             	add    esp,0x8
c0008713:	5b                   	pop    ebx
c0008714:	c3                   	ret    
c0008715:	90                   	nop

c0008716 <Directory::close()>:
c0008716:	53                   	push   ebx
c0008717:	b8 0b 00 00 00       	mov    eax,0xb
c000871c:	83 ec 08             	sub    esp,0x8
c000871f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008723:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000872a:	83 f9 19             	cmp    ecx,0x19
c000872d:	77 41                	ja     c0008770 <Directory::close()+0x5a>
c000872f:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c0008736:	85 db                	test   ebx,ebx
c0008738:	74 36                	je     c0008770 <Directory::close()+0x5a>
c000873a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008741:	74 2d                	je     c0008770 <Directory::close()+0x5a>
c0008743:	b8 05 00 00 00       	mov    eax,0x5
c0008748:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000874c:	74 22                	je     c0008770 <Directory::close()+0x5a>
c000874e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008752:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c0008759:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000875f:	53                   	push   ebx
c0008760:	53                   	push   ebx
c0008761:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008763:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008769:	50                   	push   eax
c000876a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000876d:	83 c4 10             	add    esp,0x10
c0008770:	83 c4 08             	add    esp,0x8
c0008773:	5b                   	pop    ebx
c0008774:	c3                   	ret    
c0008775:	90                   	nop

c0008776 <Directory::unlink()>:
c0008776:	83 ec 0c             	sub    esp,0xc
c0008779:	b8 0b 00 00 00       	mov    eax,0xb
c000877e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008782:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008789:	83 f9 19             	cmp    ecx,0x19
c000878c:	77 2f                	ja     c00087bd <Directory::unlink()+0x47>
c000878e:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008795:	85 c9                	test   ecx,ecx
c0008797:	74 24                	je     c00087bd <Directory::unlink()+0x47>
c0008799:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000879f:	85 c9                	test   ecx,ecx
c00087a1:	74 1a                	je     c00087bd <Directory::unlink()+0x47>
c00087a3:	b8 06 00 00 00       	mov    eax,0x6
c00087a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087ac:	75 0f                	jne    c00087bd <Directory::unlink()+0x47>
c00087ae:	83 c2 0d             	add    edx,0xd
c00087b1:	50                   	push   eax
c00087b2:	50                   	push   eax
c00087b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087b5:	52                   	push   edx
c00087b6:	51                   	push   ecx
c00087b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087ba:	83 c4 10             	add    esp,0x10
c00087bd:	83 c4 0c             	add    esp,0xc
c00087c0:	c3                   	ret    
c00087c1:	90                   	nop

c00087c2 <Directory::rename(char const*)>:
c00087c2:	83 ec 0c             	sub    esp,0xc
c00087c5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087d5:	83 f9 19             	cmp    ecx,0x19
c00087d8:	77 32                	ja     c000880c <Directory::rename(char const*)+0x4a>
c00087da:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00087e1:	85 c9                	test   ecx,ecx
c00087e3:	74 27                	je     c000880c <Directory::rename(char const*)+0x4a>
c00087e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087eb:	85 c9                	test   ecx,ecx
c00087ed:	74 1d                	je     c000880c <Directory::rename(char const*)+0x4a>
c00087ef:	b8 06 00 00 00       	mov    eax,0x6
c00087f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087f8:	75 12                	jne    c000880c <Directory::rename(char const*)+0x4a>
c00087fa:	83 c2 0d             	add    edx,0xd
c00087fd:	50                   	push   eax
c00087fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008804:	52                   	push   edx
c0008805:	51                   	push   ecx
c0008806:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008809:	83 c4 10             	add    esp,0x10
c000880c:	83 c4 0c             	add    esp,0xc
c000880f:	c3                   	ret    

c0008810 <Directory::exists()>:
c0008810:	83 ec 0c             	sub    esp,0xc
c0008813:	31 c0                	xor    eax,eax
c0008815:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008819:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008820:	83 f9 19             	cmp    ecx,0x19
c0008823:	77 24                	ja     c0008849 <Directory::exists()+0x39>
c0008825:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000882c:	85 c9                	test   ecx,ecx
c000882e:	74 19                	je     c0008849 <Directory::exists()+0x39>
c0008830:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008836:	85 c9                	test   ecx,ecx
c0008838:	74 0f                	je     c0008849 <Directory::exists()+0x39>
c000883a:	83 c2 0d             	add    edx,0xd
c000883d:	50                   	push   eax
c000883e:	50                   	push   eax
c000883f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008841:	52                   	push   edx
c0008842:	51                   	push   ecx
c0008843:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008846:	83 c4 10             	add    esp,0x10
c0008849:	83 c4 0c             	add    esp,0xc
c000884c:	c3                   	ret    
c000884d:	90                   	nop

c000884e <Directory::read(dirent*)>:
c000884e:	83 ec 1c             	sub    esp,0x1c
c0008851:	b8 0b 00 00 00       	mov    eax,0xb
c0008856:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000885a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008861:	83 f9 19             	cmp    ecx,0x19
c0008864:	77 30                	ja     c0008896 <Directory::read(dirent*)+0x48>
c0008866:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000886d:	85 c9                	test   ecx,ecx
c000886f:	74 25                	je     c0008896 <Directory::read(dirent*)+0x48>
c0008871:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008878:	74 1c                	je     c0008896 <Directory::read(dirent*)+0x48>
c000887a:	83 ec 0c             	sub    esp,0xc
c000887d:	8b 02                	mov    eax,DWORD PTR [edx]
c000887f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0008883:	51                   	push   ecx
c0008884:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008888:	6a 00                	push   0x0
c000888a:	68 10 01 00 00       	push   0x110
c000888f:	52                   	push   edx
c0008890:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008893:	83 c4 20             	add    esp,0x20
c0008896:	83 c4 1c             	add    esp,0x1c
c0008899:	c3                   	ret    

c000889a <Directory::create()>:
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	b8 0b 00 00 00       	mov    eax,0xb
c00088a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088ad:	83 f9 19             	cmp    ecx,0x19
c00088b0:	77 2f                	ja     c00088e1 <Directory::create()+0x47>
c00088b2:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00088b9:	85 c9                	test   ecx,ecx
c00088bb:	74 24                	je     c00088e1 <Directory::create()+0x47>
c00088bd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088c3:	85 c9                	test   ecx,ecx
c00088c5:	74 1a                	je     c00088e1 <Directory::create()+0x47>
c00088c7:	b8 06 00 00 00       	mov    eax,0x6
c00088cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088d0:	75 0f                	jne    c00088e1 <Directory::create()+0x47>
c00088d2:	83 c2 0d             	add    edx,0xd
c00088d5:	50                   	push   eax
c00088d6:	50                   	push   eax
c00088d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088d9:	52                   	push   edx
c00088da:	51                   	push   ecx
c00088db:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088de:	83 c4 10             	add    esp,0x10
c00088e1:	83 c4 0c             	add    esp,0xc
c00088e4:	c3                   	ret    
c00088e5:	90                   	nop

c00088e6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00088e6:	b8 0a 00 00 00       	mov    eax,0xa
c00088eb:	c3                   	ret    

c00088ec <Bus::Bus(char const*)>:
c00088ec:	83 ec 0c             	sub    esp,0xc
c00088ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088f3:	83 ec 08             	sub    esp,0x8
c00088f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088fa:	50                   	push   eax
c00088fb:	e8 a0 08 00 00       	call   c00091a0 <Device::Device(char const*)>
c0008900:	83 c4 10             	add    esp,0x10
c0008903:	ba 24 15 02 c0       	mov    edx,0xc0021524
c0008908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890c:	89 10                	mov    DWORD PTR [eax],edx
c000890e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008912:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000891c:	90                   	nop
c000891d:	83 c4 0c             	add    esp,0xc
c0008920:	c3                   	ret    
c0008921:	90                   	nop
c0008922:	66 90                	xchg   ax,ax

c0008924 <Bus::~Bus()>:
c0008924:	83 ec 0c             	sub    esp,0xc
c0008927:	ba 24 15 02 c0       	mov    edx,0xc0021524
c000892c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008930:	89 10                	mov    DWORD PTR [eax],edx
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	83 ec 0c             	sub    esp,0xc
c0008939:	50                   	push   eax
c000893a:	e8 01 06 00 00       	call   c0008f40 <Device::~Device()>
c000893f:	83 c4 10             	add    esp,0x10
c0008942:	90                   	nop
c0008943:	83 c4 0c             	add    esp,0xc
c0008946:	c3                   	ret    
c0008947:	90                   	nop

c0008948 <Bus::~Bus()>:
c0008948:	83 ec 0c             	sub    esp,0xc
c000894b:	83 ec 0c             	sub    esp,0xc
c000894e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008952:	e8 cd ff ff ff       	call   c0008924 <Bus::~Bus()>
c0008957:	83 c4 10             	add    esp,0x10
c000895a:	83 ec 08             	sub    esp,0x8
c000895d:	68 58 01 00 00       	push   0x158
c0008962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008966:	e8 9d 3d 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000896b:	83 c4 10             	add    esp,0x10
c000896e:	83 c4 0c             	add    esp,0xc
c0008971:	c3                   	ret    

c0008972 <KeBeepThread(void*)>:
c0008972:	83 ec 0c             	sub    esp,0xc
c0008975:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000897a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000897e:	48                   	dec    eax
c000897f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0008984:	75 01                	jne    c0008987 <KeBeepThread(void*)+0x15>
c0008986:	fb                   	sti    
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	6b c2 0a             	imul   eax,edx,0xa
c000898d:	50                   	push   eax
c000898e:	e8 ad cd 00 00       	call   c0015740 <milliTenthSleep(unsigned int)>
c0008993:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000899a:	e8 31 fd 00 00       	call   c00186d0 <HalMakeBeep(int)>
c000899f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089a7:	83 c4 1c             	add    esp,0x1c
c00089aa:	e9 75 cc 00 00       	jmp    c0015624 <blockTask(TaskState)>

c00089af <KeBeep(int, int, bool)>:
c00089af:	56                   	push   esi
c00089b0:	53                   	push   ebx
c00089b1:	83 ec 10             	sub    esp,0x10
c00089b4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089c0:	e8 0b fd 00 00       	call   c00186d0 <HalMakeBeep(int)>
c00089c5:	83 c4 10             	add    esp,0x10
c00089c8:	89 f0                	mov    eax,esi
c00089ca:	84 c0                	test   al,al
c00089cc:	74 1e                	je     c00089ec <KeBeep(int, int, bool)+0x3d>
c00089ce:	83 ec 0c             	sub    esp,0xc
c00089d1:	6b db 0a             	imul   ebx,ebx,0xa
c00089d4:	53                   	push   ebx
c00089d5:	e8 66 cd 00 00       	call   c0015740 <milliTenthSleep(unsigned int)>
c00089da:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00089e2:	83 c4 14             	add    esp,0x14
c00089e5:	5b                   	pop    ebx
c00089e6:	5e                   	pop    esi
c00089e7:	e9 e4 fc 00 00       	jmp    c00186d0 <HalMakeBeep(int)>
c00089ec:	68 e6 00 00 00       	push   0xe6
c00089f1:	53                   	push   ebx
c00089f2:	68 72 89 00 c0       	push   0xc0008972
c00089f7:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00089fd:	e8 16 c9 00 00       	call   c0015318 <Process::createThread(void (*)(void*), void*, int)>
c0008a02:	83 c4 14             	add    esp,0x14
c0008a05:	5b                   	pop    ebx
c0008a06:	5e                   	pop    esi
c0008a07:	c3                   	ret    

c0008a08 <User::loadClockSettings()>:
c0008a08:	57                   	push   edi
c0008a09:	56                   	push   esi
c0008a0a:	53                   	push   ebx
c0008a0b:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a11:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a16:	68 48 15 02 c0       	push   0xc0021548
c0008a1b:	e8 40 3d 00 00       	call   c000c760 <CmOpen(char const*)>
c0008a20:	59                   	pop    ecx
c0008a21:	89 c3                	mov    ebx,eax
c0008a23:	5e                   	pop    esi
c0008a24:	68 6d 15 02 c0       	push   0xc002156d
c0008a29:	50                   	push   eax
c0008a2a:	e8 31 49 00 00       	call   c000d360 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a2f:	5f                   	pop    edi
c0008a30:	89 c6                	mov    esi,eax
c0008a32:	5a                   	pop    edx
c0008a33:	50                   	push   eax
c0008a34:	68 82 15 02 c0       	push   0xc0021582
c0008a39:	e8 26 e5 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a3e:	83 c4 10             	add    esp,0x10
c0008a41:	85 f6                	test   esi,esi
c0008a43:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a47:	7e 0c                	jle    c0008a55 <User::loadClockSettings()+0x4d>
c0008a49:	52                   	push   edx
c0008a4a:	57                   	push   edi
c0008a4b:	56                   	push   esi
c0008a4c:	53                   	push   ebx
c0008a4d:	e8 7e 3e 00 00       	call   c000c8d0 <CmGetString(Reghive_Tag*, int, char*)>
c0008a52:	83 c4 10             	add    esp,0x10
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	53                   	push   ebx
c0008a59:	e8 20 3e 00 00       	call   c000c87e <CmClose(Reghive_Tag*)>
c0008a5e:	83 c4 0c             	add    esp,0xc
c0008a61:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a66:	50                   	push   eax
c0008a67:	57                   	push   edi
c0008a68:	68 90 15 02 c0       	push   0xc0021590
c0008a6d:	e8 f2 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a72:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a76:	c6 05 08 93 02 c0 00 	mov    BYTE PTR ds:0xc0029308,0x0
c0008a7d:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008a80:	83 c4 10             	add    esp,0x10
c0008a83:	a8 fd                	test   al,0xfd
c0008a85:	75 50                	jne    c0008ad7 <User::loadClockSettings()+0xcf>
c0008a87:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008a8c:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008a91:	83 fb 2e             	cmp    ebx,0x2e
c0008a94:	75 07                	jne    c0008a9d <User::loadClockSettings()+0x95>
c0008a96:	b0 01                	mov    al,0x1
c0008a98:	83 fa 35             	cmp    edx,0x35
c0008a9b:	74 0f                	je     c0008aac <User::loadClockSettings()+0xa4>
c0008a9d:	31 c0                	xor    eax,eax
c0008a9f:	83 fa 2e             	cmp    edx,0x2e
c0008aa2:	75 08                	jne    c0008aac <User::loadClockSettings()+0xa4>
c0008aa4:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008aa9:	0f 94 c0             	sete   al
c0008aac:	a2 09 93 02 c0       	mov    ds:0xc0029309,al
c0008ab1:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ab6:	83 e8 30             	sub    eax,0x30
c0008ab9:	83 fa 2e             	cmp    edx,0x2e
c0008abc:	75 07                	jne    c0008ac5 <User::loadClockSettings()+0xbd>
c0008abe:	6b c0 0a             	imul   eax,eax,0xa
c0008ac1:	8d 44 03 d0          	lea    eax,[ebx+eax*1-0x30]
c0008ac5:	a3 0c 93 02 c0       	mov    ds:0xc002930c,eax
c0008aca:	80 f9 2d             	cmp    cl,0x2d
c0008acd:	75 19                	jne    c0008ae8 <User::loadClockSettings()+0xe0>
c0008acf:	f7 1d 0c 93 02 c0    	neg    DWORD PTR ds:0xc002930c
c0008ad5:	eb 11                	jmp    c0008ae8 <User::loadClockSettings()+0xe0>
c0008ad7:	c6 05 09 93 02 c0 00 	mov    BYTE PTR ds:0xc0029309,0x0
c0008ade:	c7 05 0c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002930c,0x0
c0008ae8:	50                   	push   eax
c0008ae9:	0f b6 05 09 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029309
c0008af0:	8d 04 80             	lea    eax,[eax+eax*4]
c0008af3:	50                   	push   eax
c0008af4:	ff 35 0c 93 02 c0    	push   DWORD PTR ds:0xc002930c
c0008afa:	68 a7 15 02 c0       	push   0xc00215a7
c0008aff:	e8 60 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b04:	81 c4 70 02 00 00    	add    esp,0x270
c0008b0a:	5b                   	pop    ebx
c0008b0b:	5e                   	pop    esi
c0008b0c:	5f                   	pop    edi
c0008b0d:	c3                   	ret    

c0008b0e <Clock::Clock(char const*)>:
c0008b0e:	83 ec 0c             	sub    esp,0xc
c0008b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b15:	83 ec 08             	sub    esp,0x8
c0008b18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b1c:	50                   	push   eax
c0008b1d:	e8 7e 06 00 00       	call   c00091a0 <Device::Device(char const*)>
c0008b22:	83 c4 10             	add    esp,0x10
c0008b25:	ba c0 15 02 c0       	mov    edx,0xc00215c0
c0008b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b2e:	89 10                	mov    DWORD PTR [eax],edx
c0008b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b34:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b3e:	90                   	nop
c0008b3f:	83 c4 0c             	add    esp,0xc
c0008b42:	c3                   	ret    
c0008b43:	90                   	nop

c0008b44 <Clock::~Clock()>:
c0008b44:	83 ec 0c             	sub    esp,0xc
c0008b47:	ba c0 15 02 c0       	mov    edx,0xc00215c0
c0008b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b50:	89 10                	mov    DWORD PTR [eax],edx
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	83 ec 0c             	sub    esp,0xc
c0008b59:	50                   	push   eax
c0008b5a:	e8 e1 03 00 00       	call   c0008f40 <Device::~Device()>
c0008b5f:	83 c4 10             	add    esp,0x10
c0008b62:	90                   	nop
c0008b63:	83 c4 0c             	add    esp,0xc
c0008b66:	c3                   	ret    
c0008b67:	90                   	nop

c0008b68 <Clock::~Clock()>:
c0008b68:	83 ec 0c             	sub    esp,0xc
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b72:	e8 cd ff ff ff       	call   c0008b44 <Clock::~Clock()>
c0008b77:	83 c4 10             	add    esp,0x10
c0008b7a:	83 ec 08             	sub    esp,0x8
c0008b7d:	68 58 01 00 00       	push   0x158
c0008b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b86:	e8 7d 3b 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0008b8b:	83 c4 10             	add    esp,0x10
c0008b8e:	83 c4 0c             	add    esp,0xc
c0008b91:	c3                   	ret    

c0008b92 <Clock::timeInSecondsLocal()>:
c0008b92:	53                   	push   ebx
c0008b93:	83 ec 14             	sub    esp,0x14
c0008b96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b9c:	50                   	push   eax
c0008b9d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008ba0:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008ba7:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008bad:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bb3:	89 cb                	mov    ebx,ecx
c0008bb5:	c1 fb 1f             	sar    ebx,0x1f
c0008bb8:	01 c8                	add    eax,ecx
c0008bba:	11 da                	adc    edx,ebx
c0008bbc:	83 c4 10             	add    esp,0x10
c0008bbf:	31 c9                	xor    ecx,ecx
c0008bc1:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008bc8:	74 05                	je     c0008bcf <Clock::timeInSecondsLocal()+0x3d>
c0008bca:	b9 08 07 00 00       	mov    ecx,0x708
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	01 c8                	add    eax,ecx
c0008bd3:	11 da                	adc    edx,ebx
c0008bd5:	83 c4 08             	add    esp,0x8
c0008bd8:	5b                   	pop    ebx
c0008bd9:	c3                   	ret    

c0008bda <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bda:	57                   	push   edi
c0008bdb:	56                   	push   esi
c0008bdc:	53                   	push   ebx
c0008bdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008be1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008be5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008be7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008beb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008bee:	0f b6 05 08 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029308
c0008bf5:	03 05 0c 93 02 c0    	add    eax,DWORD PTR ds:0xc002930c
c0008bfb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c01:	99                   	cdq    
c0008c02:	29 c6                	sub    esi,eax
c0008c04:	19 d7                	sbb    edi,edx
c0008c06:	89 f0                	mov    eax,esi
c0008c08:	89 fa                	mov    edx,edi
c0008c0a:	31 f6                	xor    esi,esi
c0008c0c:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008c13:	74 05                	je     c0008c1a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c15:	be 08 07 00 00       	mov    esi,0x708
c0008c1a:	31 ff                	xor    edi,edi
c0008c1c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c20:	29 f0                	sub    eax,esi
c0008c22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c26:	19 fa                	sbb    edx,edi
c0008c28:	89 d8                	mov    eax,ebx
c0008c2a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c2e:	5b                   	pop    ebx
c0008c2f:	5e                   	pop    esi
c0008c30:	5f                   	pop    edi
c0008c31:	ff e0                	jmp    eax

c0008c33 <datetimeToSeconds(datetime_t)>:
c0008c33:	55                   	push   ebp
c0008c34:	57                   	push   edi
c0008c35:	56                   	push   esi
c0008c36:	53                   	push   ebx
c0008c37:	83 ec 0c             	sub    esp,0xc
c0008c3a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008c3e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008c42:	89 d6                	mov    esi,edx
c0008c44:	0f b6 c7             	movzx  eax,bh
c0008c47:	c1 ee 10             	shr    esi,0x10
c0008c4a:	6b e8 3c             	imul   ebp,eax,0x3c
c0008c4d:	81 ee 6c 07 00 00    	sub    esi,0x76c
c0008c53:	0f b6 ce             	movzx  ecx,dh
c0008c56:	89 df                	mov    edi,ebx
c0008c58:	49                   	dec    ecx
c0008c59:	c1 ef 10             	shr    edi,0x10
c0008c5c:	0f b6 db             	movzx  ebx,bl
c0008c5f:	89 f8                	mov    eax,edi
c0008c61:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c0008c67:	0f b6 f8             	movzx  edi,al
c0008c6a:	0f b6 d2             	movzx  edx,dl
c0008c6d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0008c71:	01 d8                	add    eax,ebx
c0008c73:	0f b7 de             	movzx  ebx,si
c0008c76:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c79:	c1 f8 1f             	sar    eax,0x1f
c0008c7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c80:	0f b6 c1             	movzx  eax,cl
c0008c83:	8b 0c 85 00 16 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdea00]
c0008c8a:	83 f8 01             	cmp    eax,0x1
c0008c8d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0008c91:	76 27                	jbe    c0008cba <datetimeToSeconds(datetime_t)+0x87>
c0008c93:	83 e6 03             	and    esi,0x3
c0008c96:	75 22                	jne    c0008cba <datetimeToSeconds(datetime_t)+0x87>
c0008c98:	31 d2                	xor    edx,edx
c0008c9a:	be 64 00 00 00       	mov    esi,0x64
c0008c9f:	89 d8                	mov    eax,ebx
c0008ca1:	f7 f6                	div    esi
c0008ca3:	85 d2                	test   edx,edx
c0008ca5:	75 12                	jne    c0008cb9 <datetimeToSeconds(datetime_t)+0x86>
c0008ca7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cad:	be 90 01 00 00       	mov    esi,0x190
c0008cb2:	99                   	cdq    
c0008cb3:	f7 fe                	idiv   esi
c0008cb5:	85 d2                	test   edx,edx
c0008cb7:	75 01                	jne    c0008cba <datetimeToSeconds(datetime_t)+0x87>
c0008cb9:	41                   	inc    ecx
c0008cba:	83 fb 46             	cmp    ebx,0x46
c0008cbd:	76 48                	jbe    c0008d07 <datetimeToSeconds(datetime_t)+0xd4>
c0008cbf:	be 46 00 00 00       	mov    esi,0x46
c0008cc4:	bf 64 00 00 00       	mov    edi,0x64
c0008cc9:	bd 90 01 00 00       	mov    ebp,0x190
c0008cce:	b8 6d 01 00 00       	mov    eax,0x16d
c0008cd3:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cd9:	75 23                	jne    c0008cfe <datetimeToSeconds(datetime_t)+0xcb>
c0008cdb:	89 f0                	mov    eax,esi
c0008cdd:	99                   	cdq    
c0008cde:	f7 ff                	idiv   edi
c0008ce0:	b8 6e 01 00 00       	mov    eax,0x16e
c0008ce5:	85 d2                	test   edx,edx
c0008ce7:	75 15                	jne    c0008cfe <datetimeToSeconds(datetime_t)+0xcb>
c0008ce9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008cef:	99                   	cdq    
c0008cf0:	f7 fd                	idiv   ebp
c0008cf2:	83 fa 01             	cmp    edx,0x1
c0008cf5:	19 c0                	sbb    eax,eax
c0008cf7:	f7 d0                	not    eax
c0008cf9:	05 6e 01 00 00       	add    eax,0x16e
c0008cfe:	01 c1                	add    ecx,eax
c0008d00:	46                   	inc    esi
c0008d01:	39 de                	cmp    esi,ebx
c0008d03:	7c c9                	jl     c0008cce <datetimeToSeconds(datetime_t)+0x9b>
c0008d05:	eb 34                	jmp    c0008d3b <datetimeToSeconds(datetime_t)+0x108>
c0008d07:	74 32                	je     c0008d3b <datetimeToSeconds(datetime_t)+0x108>
c0008d09:	b8 45 00 00 00       	mov    eax,0x45
c0008d0e:	89 c2                	mov    edx,eax
c0008d10:	83 e2 03             	and    edx,0x3
c0008d13:	39 d8                	cmp    eax,ebx
c0008d15:	7e 0f                	jle    c0008d26 <datetimeToSeconds(datetime_t)+0xf3>
c0008d17:	83 fa 01             	cmp    edx,0x1
c0008d1a:	19 d2                	sbb    edx,edx
c0008d1c:	48                   	dec    eax
c0008d1d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d24:	eb e8                	jmp    c0008d0e <datetimeToSeconds(datetime_t)+0xdb>
c0008d26:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d2b:	85 d2                	test   edx,edx
c0008d2d:	75 0a                	jne    c0008d39 <datetimeToSeconds(datetime_t)+0x106>
c0008d2f:	83 fb 01             	cmp    ebx,0x1
c0008d32:	19 c0                	sbb    eax,eax
c0008d34:	05 6e 01 00 00       	add    eax,0x16e
c0008d39:	29 c1                	sub    ecx,eax
c0008d3b:	b8 80 51 01 00       	mov    eax,0x15180
c0008d40:	f7 e9                	imul   ecx
c0008d42:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d45:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d49:	83 c4 0c             	add    esp,0xc
c0008d4c:	5b                   	pop    ebx
c0008d4d:	5e                   	pop    esi
c0008d4e:	5f                   	pop    edi
c0008d4f:	5d                   	pop    ebp
c0008d50:	c3                   	ret    
c0008d51:	90                   	nop

c0008d52 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d52:	57                   	push   edi
c0008d53:	56                   	push   esi
c0008d54:	53                   	push   ebx
c0008d55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d59:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d5b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d66:	e8 c8 fe ff ff       	call   c0008c33 <datetimeToSeconds(datetime_t)>
c0008d6b:	59                   	pop    ecx
c0008d6c:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008d73:	5b                   	pop    ebx
c0008d74:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008d7a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008d80:	89 cb                	mov    ebx,ecx
c0008d82:	c1 fb 1f             	sar    ebx,0x1f
c0008d85:	29 c8                	sub    eax,ecx
c0008d87:	19 da                	sbb    edx,ebx
c0008d89:	31 c9                	xor    ecx,ecx
c0008d8b:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008d92:	74 05                	je     c0008d99 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008d94:	b9 08 07 00 00       	mov    ecx,0x708
c0008d99:	31 db                	xor    ebx,ebx
c0008d9b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008d9f:	29 c8                	sub    eax,ecx
c0008da1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008da5:	19 da                	sbb    edx,ebx
c0008da7:	89 f8                	mov    eax,edi
c0008da9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008dad:	5b                   	pop    ebx
c0008dae:	5e                   	pop    esi
c0008daf:	5f                   	pop    edi
c0008db0:	ff e0                	jmp    eax

c0008db2 <secondsToDatetime(unsigned long long)>:
c0008db2:	55                   	push   ebp
c0008db3:	57                   	push   edi
c0008db4:	56                   	push   esi
c0008db5:	53                   	push   ebx
c0008db6:	83 ec 1c             	sub    esp,0x1c
c0008db9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008dbd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008dc1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008dc5:	6a 00                	push   0x0
c0008dc7:	68 80 51 01 00       	push   0x15180
c0008dcc:	55                   	push   ebp
c0008dcd:	57                   	push   edi
c0008dce:	e8 71 6d 01 00       	call   c001fb44 <__udivdi3>
c0008dd3:	83 c4 10             	add    esp,0x10
c0008dd6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008ddc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008de0:	6a 00                	push   0x0
c0008de2:	68 80 51 01 00       	push   0x15180
c0008de7:	55                   	push   ebp
c0008de8:	57                   	push   edi
c0008de9:	bf 10 0e 00 00       	mov    edi,0xe10
c0008dee:	e8 51 6e 01 00       	call   c001fc44 <__umoddi3>
c0008df3:	83 c4 10             	add    esp,0x10
c0008df6:	99                   	cdq    
c0008df7:	f7 ff                	idiv   edi
c0008df9:	bf 3c 00 00 00       	mov    edi,0x3c
c0008dfe:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e01:	89 d0                	mov    eax,edx
c0008e03:	99                   	cdq    
c0008e04:	f7 ff                	idiv   edi
c0008e06:	85 db                	test   ebx,ebx
c0008e08:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e0b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e0e:	79 11                	jns    c0008e21 <secondsToDatetime(unsigned long long)+0x6f>
c0008e10:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e14:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e1a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e1f:	eb 07                	jmp    c0008e28 <secondsToDatetime(unsigned long long)+0x76>
c0008e21:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e26:	89 d8                	mov    eax,ebx
c0008e28:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e2d:	99                   	cdq    
c0008e2e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e33:	f7 f9                	idiv   ecx
c0008e35:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e3e:	31 d2                	xor    edx,edx
c0008e40:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e48:	01 c3                	add    ebx,eax
c0008e4a:	89 d8                	mov    eax,ebx
c0008e4c:	f7 f1                	div    ecx
c0008e4e:	31 d2                	xor    edx,edx
c0008e50:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e53:	89 d8                	mov    eax,ebx
c0008e55:	f7 f7                	div    edi
c0008e57:	31 d2                	xor    edx,edx
c0008e59:	29 c1                	sub    ecx,eax
c0008e5b:	89 d8                	mov    eax,ebx
c0008e5d:	f7 f5                	div    ebp
c0008e5f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e64:	29 c1                	sub    ecx,eax
c0008e66:	31 d2                	xor    edx,edx
c0008e68:	89 c8                	mov    eax,ecx
c0008e6a:	f7 f5                	div    ebp
c0008e6c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e75:	31 d2                	xor    edx,edx
c0008e77:	89 c8                	mov    eax,ecx
c0008e79:	f7 f5                	div    ebp
c0008e7b:	31 d2                	xor    edx,edx
c0008e7d:	01 c3                	add    ebx,eax
c0008e7f:	89 c8                	mov    eax,ecx
c0008e81:	f7 f7                	div    edi
c0008e83:	bf 99 00 00 00       	mov    edi,0x99
c0008e88:	29 c3                	sub    ebx,eax
c0008e8a:	31 d2                	xor    edx,edx
c0008e8c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008e94:	29 c3                	sub    ebx,eax
c0008e96:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008e99:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008e9c:	bb 05 00 00 00       	mov    ebx,0x5
c0008ea1:	83 c1 02             	add    ecx,0x2
c0008ea4:	89 c8                	mov    eax,ecx
c0008ea6:	f7 f7                	div    edi
c0008ea8:	31 d2                	xor    edx,edx
c0008eaa:	89 c7                	mov    edi,eax
c0008eac:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008eb2:	83 c0 02             	add    eax,0x2
c0008eb5:	f7 f3                	div    ebx
c0008eb7:	89 eb                	mov    ebx,ebp
c0008eb9:	29 c3                	sub    ebx,eax
c0008ebb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ec1:	88 1e                	mov    BYTE PTR [esi],bl
c0008ec3:	19 c0                	sbb    eax,eax
c0008ec5:	31 d2                	xor    edx,edx
c0008ec7:	83 e0 0c             	and    eax,0xc
c0008eca:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ece:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008ed6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008eda:	83 f9 01             	cmp    ecx,0x1
c0008edd:	0f 96 c2             	setbe  dl
c0008ee0:	41                   	inc    ecx
c0008ee1:	01 d0                	add    eax,edx
c0008ee3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008ee6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008eea:	83 c4 1c             	add    esp,0x1c
c0008eed:	89 f0                	mov    eax,esi
c0008eef:	5b                   	pop    ebx
c0008ef0:	5e                   	pop    esi
c0008ef1:	5f                   	pop    edi
c0008ef2:	5d                   	pop    ebp
c0008ef3:	c2 04 00             	ret    0x4

c0008ef6 <Clock::timeInDatetimeLocal()>:
c0008ef6:	53                   	push   ebx
c0008ef7:	83 ec 14             	sub    esp,0x14
c0008efa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008efe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f02:	e8 8b fc ff ff       	call   c0008b92 <Clock::timeInSecondsLocal()>
c0008f07:	83 c4 0c             	add    esp,0xc
c0008f0a:	52                   	push   edx
c0008f0b:	50                   	push   eax
c0008f0c:	53                   	push   ebx
c0008f0d:	e8 a0 fe ff ff       	call   c0008db2 <secondsToDatetime(unsigned long long)>
c0008f12:	89 d8                	mov    eax,ebx
c0008f14:	83 c4 14             	add    esp,0x14
c0008f17:	5b                   	pop    ebx
c0008f18:	c2 04 00             	ret    0x4
c0008f1b:	90                   	nop

c0008f1c <Device::hibernate()>:
c0008f1c:	c3                   	ret    
c0008f1d:	90                   	nop

c0008f1e <Device::wake()>:
c0008f1e:	c3                   	ret    
c0008f1f:	90                   	nop

c0008f20 <Device::detect()>:
c0008f20:	c3                   	ret    
c0008f21:	90                   	nop

c0008f22 <Device::disableLegacy()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Device::powerSaving(PowerSavingLevel)>:
c0008f24:	c3                   	ret    
c0008f25:	90                   	nop

c0008f26 <DriverlessDevice::close(int, int, void*)>:
c0008f26:	31 c0                	xor    eax,eax
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <DriverlessDevice::detect()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <DriverlessDevice::open(int, int, void*)>:
c0008f2c:	83 ec 18             	sub    esp,0x18
c0008f2f:	68 30 16 02 c0       	push   0xc0021630
c0008f34:	e8 ad 5d 00 00       	call   c000ece6 <KePanic(char const*)>
c0008f39:	83 c8 ff             	or     eax,0xffffffff
c0008f3c:	83 c4 1c             	add    esp,0x1c
c0008f3f:	c3                   	ret    

c0008f40 <Device::~Device()>:
c0008f40:	ba d4 16 02 c0       	mov    edx,0xc00216d4
c0008f45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f49:	89 10                	mov    DWORD PTR [eax],edx
c0008f4b:	90                   	nop
c0008f4c:	c3                   	ret    
c0008f4d:	90                   	nop

c0008f4e <Device::~Device()>:
c0008f4e:	83 ec 0c             	sub    esp,0xc
c0008f51:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f55:	e8 e6 ff ff ff       	call   c0008f40 <Device::~Device()>
c0008f5a:	83 c4 04             	add    esp,0x4
c0008f5d:	83 ec 08             	sub    esp,0x8
c0008f60:	68 58 01 00 00       	push   0x158
c0008f65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f69:	e8 9a 37 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0008f6e:	83 c4 10             	add    esp,0x10
c0008f71:	83 c4 0c             	add    esp,0xc
c0008f74:	c3                   	ret    
c0008f75:	90                   	nop

c0008f76 <Device::findAndLoadDriver()>:
c0008f76:	c7 44 24 04 4e 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc002164e
c0008f7e:	e9 e1 df ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0008f83:	90                   	nop

c0008f84 <Device::preOpenPCI(PCIDeviceInfo)>:
c0008f84:	57                   	push   edi
c0008f85:	b9 09 00 00 00       	mov    ecx,0x9
c0008f8a:	56                   	push   esi
c0008f8b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008f8f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008f93:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008f9d:	81 c7 18 01 00 00    	add    edi,0x118
c0008fa3:	fc                   	cld    
c0008fa4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008fa6:	5e                   	pop    esi
c0008fa7:	5f                   	pop    edi
c0008fa8:	c3                   	ret    
c0008fa9:	90                   	nop

c0008faa <Device::preOpenACPI(void*, char*, char*)>:
c0008faa:	57                   	push   edi
c0008fab:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fb0:	56                   	push   esi
c0008fb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fb9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fc3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008fc9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008fcf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008fd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fd5:	b9 0e 00 00 00       	mov    ecx,0xe
c0008fda:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0008fe0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008fe4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fe6:	5e                   	pop    esi
c0008fe7:	5f                   	pop    edi
c0008fe8:	c3                   	ret    
c0008fe9:	90                   	nop

c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0008fea:	53                   	push   ebx
c0008feb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008fef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ff3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ff7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008ffb:	0f b6 c0             	movzx  eax,al
c0008ffe:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009002:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009006:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000900a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000900e:	5b                   	pop    ebx
c000900f:	e9 85 fa 00 00       	jmp    c0018a99 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009014 <Device::getParent()>:
c0009014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009018:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000901e:	c3                   	ret    
c000901f:	90                   	nop

c0009020 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009020:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009024:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009028:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000902d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009031:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009035:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009039:	e9 bd fb 00 00       	jmp    c0018bfb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000903e <Device::addChild(Device*)>:
c000903e:	53                   	push   ebx
c000903f:	83 ec 08             	sub    esp,0x8
c0009042:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009046:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000904a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009050:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009056:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009058:	85 d2                	test   edx,edx
c000905a:	74 04                	je     c0009060 <Device::addChild(Device*)+0x22>
c000905c:	89 d3                	mov    ebx,edx
c000905e:	eb f6                	jmp    c0009056 <Device::addChild(Device*)+0x18>
c0009060:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009063:	83 ec 0c             	sub    esp,0xc
c0009066:	6a 08                	push   0x8
c0009068:	e8 24 59 00 00       	call   c000e991 <malloc>
c000906d:	89 03                	mov    DWORD PTR [ebx],eax
c000906f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009075:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000907c:	83 c4 18             	add    esp,0x18
c000907f:	5b                   	pop    ebx
c0009080:	c3                   	ret    
c0009081:	90                   	nop

c0009082 <Device::removeAllChildren()>:
c0009082:	56                   	push   esi
c0009083:	53                   	push   ebx
c0009084:	52                   	push   edx
c0009085:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009089:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000908f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009092:	74 17                	je     c00090ab <Device::removeAllChildren()+0x29>
c0009094:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009097:	85 c0                	test   eax,eax
c0009099:	74 0c                	je     c00090a7 <Device::removeAllChildren()+0x25>
c000909b:	83 ec 0c             	sub    esp,0xc
c000909e:	8b 10                	mov    edx,DWORD PTR [eax]
c00090a0:	50                   	push   eax
c00090a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090a9:	eb e4                	jmp    c000908f <Device::removeAllChildren()+0xd>
c00090ab:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090b7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090c4:	58                   	pop    eax
c00090c5:	5b                   	pop    ebx
c00090c6:	5e                   	pop    esi
c00090c7:	c3                   	ret    

c00090c8 <Device::hibernateAll()>:
c00090c8:	53                   	push   ebx
c00090c9:	83 ec 14             	sub    esp,0x14
c00090cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090d2:	53                   	push   ebx
c00090d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090e2:	74 0f                	je     c00090f3 <Device::hibernateAll()+0x2b>
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090ea:	e8 d9 ff ff ff       	call   c00090c8 <Device::hibernateAll()>
c00090ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090f1:	eb e9                	jmp    c00090dc <Device::hibernateAll()+0x14>
c00090f3:	83 c4 08             	add    esp,0x8
c00090f6:	5b                   	pop    ebx
c00090f7:	c3                   	ret    

c00090f8 <Device::wakeAll()>:
c00090f8:	53                   	push   ebx
c00090f9:	83 ec 14             	sub    esp,0x14
c00090fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009100:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009102:	53                   	push   ebx
c0009103:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009106:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000910c:	83 c4 10             	add    esp,0x10
c000910f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009112:	74 0f                	je     c0009123 <Device::wakeAll()+0x2b>
c0009114:	83 ec 0c             	sub    esp,0xc
c0009117:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911a:	e8 d9 ff ff ff       	call   c00090f8 <Device::wakeAll()>
c000911f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009121:	eb e9                	jmp    c000910c <Device::wakeAll()+0x14>
c0009123:	83 c4 08             	add    esp,0x8
c0009126:	5b                   	pop    ebx
c0009127:	c3                   	ret    

c0009128 <Device::detectAll()>:
c0009128:	53                   	push   ebx
c0009129:	83 ec 14             	sub    esp,0x14
c000912c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009130:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009132:	53                   	push   ebx
c0009133:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009136:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000913c:	83 c4 10             	add    esp,0x10
c000913f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009142:	74 0f                	je     c0009153 <Device::detectAll()+0x2b>
c0009144:	83 ec 0c             	sub    esp,0xc
c0009147:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000914a:	e8 d9 ff ff ff       	call   c0009128 <Device::detectAll()>
c000914f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009151:	eb e9                	jmp    c000913c <Device::detectAll()+0x14>
c0009153:	83 c4 08             	add    esp,0x8
c0009156:	5b                   	pop    ebx
c0009157:	c3                   	ret    

c0009158 <Device::disableLegacyAll()>:
c0009158:	c3                   	ret    
c0009159:	90                   	nop

c000915a <Device::loadDriversForAll()>:
c000915a:	c3                   	ret    
c000915b:	90                   	nop

c000915c <Device::powerSavingAll(PowerSavingLevel)>:
c000915c:	56                   	push   esi
c000915d:	53                   	push   ebx
c000915e:	83 ec 0c             	sub    esp,0xc
c0009161:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009165:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009169:	8b 03                	mov    eax,DWORD PTR [ebx]
c000916b:	56                   	push   esi
c000916c:	53                   	push   ebx
c000916d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009170:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009176:	83 c4 10             	add    esp,0x10
c0009179:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000917c:	74 0f                	je     c000918d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000917e:	52                   	push   edx
c000917f:	52                   	push   edx
c0009180:	56                   	push   esi
c0009181:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009184:	e8 d3 ff ff ff       	call   c000915c <Device::powerSavingAll(PowerSavingLevel)>
c0009189:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000918b:	eb e9                	jmp    c0009176 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000918d:	58                   	pop    eax
c000918e:	5b                   	pop    ebx
c000918f:	5e                   	pop    esi
c0009190:	c3                   	ret    
c0009191:	90                   	nop

c0009192 <Device::setName(char const*)>:
c0009192:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000919a:	e9 a1 74 ff ff       	jmp    c0000640 <strcpy>
c000919f:	90                   	nop

c00091a0 <Device::Device(char const*)>:
c00091a0:	83 ec 1c             	sub    esp,0x1c
c00091a3:	ba d4 16 02 c0       	mov    edx,0xc00216d4
c00091a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091ac:	89 10                	mov    DWORD PTR [eax],edx
c00091ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091c0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091ce:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00091d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091dc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00091e6:	83 ec 08             	sub    esp,0x8
c00091e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f1:	e8 9c ff ff ff       	call   c0009192 <Device::setName(char const*)>
c00091f6:	83 c4 10             	add    esp,0x10
c00091f9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009201:	83 ec 0c             	sub    esp,0xc
c0009204:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009208:	e8 84 57 00 00       	call   c000e991 <malloc>
c000920d:	83 c4 10             	add    esp,0x10
c0009210:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009216:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000921d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009221:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009227:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000922b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009231:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009237:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000923b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009241:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009257:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000925e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009262:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000926c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009270:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000927a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000927e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000928c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009296:	90                   	nop
c0009297:	83 c4 1c             	add    esp,0x1c
c000929a:	c3                   	ret    
c000929b:	90                   	nop

c000929c <Device::getName()>:
c000929c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a0:	05 d0 00 00 00       	add    eax,0xd0
c00092a5:	c3                   	ret    

c00092a6 <Device::closeAll()>:
c00092a6:	53                   	push   ebx
c00092a7:	83 ec 08             	sub    esp,0x8
c00092aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092ae:	53                   	push   ebx
c00092af:	e8 e8 ff ff ff       	call   c000929c <Device::getName()>
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	68 88 16 02 c0       	push   0xc0021688
c00092bb:	e8 a4 dc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00092c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092c2:	6a 00                	push   0x0
c00092c4:	6a 00                	push   0x0
c00092c6:	6a 00                	push   0x0
c00092c8:	53                   	push   ebx
c00092c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092d2:	83 c4 20             	add    esp,0x20
c00092d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00092d8:	74 12                	je     c00092ec <Device::closeAll()+0x46>
c00092da:	83 ec 0c             	sub    esp,0xc
c00092dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00092e0:	e8 c1 ff ff ff       	call   c00092a6 <Device::closeAll()>
c00092e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00092e7:	83 c4 10             	add    esp,0x10
c00092ea:	eb e9                	jmp    c00092d5 <Device::closeAll()+0x2f>
c00092ec:	83 c4 08             	add    esp,0x8
c00092ef:	5b                   	pop    ebx
c00092f0:	c3                   	ret    
c00092f1:	90                   	nop

c00092f2 <DriverlessDevice::DriverlessDevice(char const*)>:
c00092f2:	83 ec 0c             	sub    esp,0xc
c00092f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092f9:	83 ec 08             	sub    esp,0x8
c00092fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009300:	50                   	push   eax
c0009301:	e8 9a fe ff ff       	call   c00091a0 <Device::Device(char const*)>
c0009306:	83 c4 10             	add    esp,0x10
c0009309:	ba 00 17 02 c0       	mov    edx,0xc0021700
c000930e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009312:	89 10                	mov    DWORD PTR [eax],edx
c0009314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009318:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009322:	90                   	nop
c0009323:	83 c4 0c             	add    esp,0xc
c0009326:	c3                   	ret    
c0009327:	90                   	nop

c0009328 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009328:	57                   	push   edi
c0009329:	56                   	push   esi
c000932a:	53                   	push   ebx
c000932b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000932f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009333:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009337:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000933d:	75 0c                	jne    c000934b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000933f:	52                   	push   edx
c0009340:	52                   	push   edx
c0009341:	53                   	push   ebx
c0009342:	56                   	push   esi
c0009343:	e8 74 6a 01 00       	call   c001fdbc <LinkedList<Device>::addElement(Device*)>
c0009348:	83 c4 10             	add    esp,0x10
c000934b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009351:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009354:	74 12                	je     c0009368 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009356:	50                   	push   eax
c0009357:	57                   	push   edi
c0009358:	56                   	push   esi
c0009359:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000935c:	e8 c7 ff ff ff       	call   c0009328 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009361:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009363:	83 c4 10             	add    esp,0x10
c0009366:	eb e9                	jmp    c0009351 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009368:	5b                   	pop    ebx
c0009369:	5e                   	pop    esi
c000936a:	5f                   	pop    edi
c000936b:	c3                   	ret    

c000936c <getDevicesOfType(DeviceType)>:
c000936c:	53                   	push   ebx
c000936d:	83 ec 14             	sub    esp,0x14
c0009370:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009374:	53                   	push   ebx
c0009375:	e8 1e 6b 01 00       	call   c001fe98 <LinkedList<Device>::LinkedList()>
c000937a:	83 c4 0c             	add    esp,0xc
c000937d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009381:	53                   	push   ebx
c0009382:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0009388:	e8 9b ff ff ff       	call   c0009328 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000938d:	89 d8                	mov    eax,ebx
c000938f:	83 c4 18             	add    esp,0x18
c0009392:	5b                   	pop    ebx
c0009393:	c2 04 00             	ret    0x4
c0009396:	66 90                	xchg   ax,ax

c0009398 <HardDiskController::HardDiskController(char const*)>:
c0009398:	83 ec 0c             	sub    esp,0xc
c000939b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000939f:	83 ec 08             	sub    esp,0x8
c00093a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a6:	50                   	push   eax
c00093a7:	e8 f4 fd ff ff       	call   c00091a0 <Device::Device(char const*)>
c00093ac:	83 c4 10             	add    esp,0x10
c00093af:	ba 2c 17 02 c0       	mov    edx,0xc002172c
c00093b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093b8:	89 10                	mov    DWORD PTR [eax],edx
c00093ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093be:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093c8:	90                   	nop
c00093c9:	83 c4 0c             	add    esp,0xc
c00093cc:	c3                   	ret    
c00093cd:	90                   	nop
c00093ce:	66 90                	xchg   ax,ax

c00093d0 <HardDiskController::~HardDiskController()>:
c00093d0:	83 ec 0c             	sub    esp,0xc
c00093d3:	ba 2c 17 02 c0       	mov    edx,0xc002172c
c00093d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093dc:	89 10                	mov    DWORD PTR [eax],edx
c00093de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e2:	83 ec 0c             	sub    esp,0xc
c00093e5:	50                   	push   eax
c00093e6:	e8 55 fb ff ff       	call   c0008f40 <Device::~Device()>
c00093eb:	83 c4 10             	add    esp,0x10
c00093ee:	90                   	nop
c00093ef:	83 c4 0c             	add    esp,0xc
c00093f2:	c3                   	ret    
c00093f3:	90                   	nop

c00093f4 <HardDiskController::~HardDiskController()>:
c00093f4:	83 ec 0c             	sub    esp,0xc
c00093f7:	83 ec 0c             	sub    esp,0xc
c00093fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093fe:	e8 cd ff ff ff       	call   c00093d0 <HardDiskController::~HardDiskController()>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	83 ec 08             	sub    esp,0x8
c0009409:	68 58 01 00 00       	push   0x158
c000940e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009412:	e8 f1 32 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0009417:	83 c4 10             	add    esp,0x10
c000941a:	83 c4 0c             	add    esp,0xc
c000941d:	c3                   	ret    

c000941e <PhysicalDisk::eject()>:
c000941e:	83 c8 ff             	or     eax,0xffffffff
c0009421:	c3                   	ret    

c0009422 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009422:	83 ec 0c             	sub    esp,0xc
c0009425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009429:	83 ec 08             	sub    esp,0x8
c000942c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009430:	50                   	push   eax
c0009431:	e8 6a fd ff ff       	call   c00091a0 <Device::Device(char const*)>
c0009436:	83 c4 10             	add    esp,0x10
c0009439:	ba 58 17 02 c0       	mov    edx,0xc0021758
c000943e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009442:	89 10                	mov    DWORD PTR [eax],edx
c0009444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009448:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000944f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009453:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000945a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009470:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009484:	90                   	nop
c0009485:	83 c4 0c             	add    esp,0xc
c0009488:	c3                   	ret    
c0009489:	90                   	nop

c000948a <PhysicalDisk::startCache()>:
c000948a:	56                   	push   esi
c000948b:	53                   	push   ebx
c000948c:	83 ec 10             	sub    esp,0x10
c000948f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009493:	6a 44                	push   0x44
c0009495:	e8 f7 54 00 00       	call   c000e991 <malloc>
c000949a:	89 c6                	mov    esi,eax
c000949c:	58                   	pop    eax
c000949d:	5a                   	pop    edx
c000949e:	53                   	push   ebx
c000949f:	56                   	push   esi
c00094a0:	e8 1b 14 00 00       	call   c000a8c0 <VCache::VCache(PhysicalDisk*)>
c00094a5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094ab:	83 c4 14             	add    esp,0x14
c00094ae:	5b                   	pop    ebx
c00094af:	5e                   	pop    esi
c00094b0:	c3                   	ret    
c00094b1:	90                   	nop

c00094b2 <PhysicalDisk::~PhysicalDisk()>:
c00094b2:	83 ec 0c             	sub    esp,0xc
c00094b5:	ba 58 17 02 c0       	mov    edx,0xc0021758
c00094ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094be:	89 10                	mov    DWORD PTR [eax],edx
c00094c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c4:	83 ec 0c             	sub    esp,0xc
c00094c7:	50                   	push   eax
c00094c8:	e8 73 fa ff ff       	call   c0008f40 <Device::~Device()>
c00094cd:	83 c4 10             	add    esp,0x10
c00094d0:	90                   	nop
c00094d1:	83 c4 0c             	add    esp,0xc
c00094d4:	c3                   	ret    
c00094d5:	90                   	nop

c00094d6 <PhysicalDisk::~PhysicalDisk()>:
c00094d6:	83 ec 0c             	sub    esp,0xc
c00094d9:	83 ec 0c             	sub    esp,0xc
c00094dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094e0:	e8 cd ff ff ff       	call   c00094b2 <PhysicalDisk::~PhysicalDisk()>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	83 ec 08             	sub    esp,0x8
c00094eb:	68 6c 01 00 00       	push   0x16c
c00094f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094f4:	e8 0f 32 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c00094f9:	83 c4 10             	add    esp,0x10
c00094fc:	83 c4 0c             	add    esp,0xc
c00094ff:	c3                   	ret    

c0009500 <startGUI(void*)>:
c0009500:	55                   	push   ebp
c0009501:	89 e5                	mov    ebp,esp
c0009503:	53                   	push   ebx
c0009504:	83 ec 04             	sub    esp,0x4
c0009507:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000950c:	83 e8 01             	sub    eax,0x1
c000950f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009514:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009519:	85 c0                	test   eax,eax
c000951b:	75 01                	jne    c000951e <startGUI(void*)+0x1e>
c000951d:	fb                   	sti    
c000951e:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009524:	83 ec 08             	sub    esp,0x8
c0009527:	6a 01                	push   0x1
c0009529:	68 88 17 02 c0       	push   0xc0021788
c000952e:	e8 42 b5 00 00       	call   c0014a75 <Thr::loadDLL(char const*, bool)>
c0009533:	83 c4 10             	add    esp,0x10
c0009536:	83 ec 08             	sub    esp,0x8
c0009539:	53                   	push   ebx
c000953a:	50                   	push   eax
c000953b:	e8 87 b7 00 00       	call   c0014cc7 <Thr::executeDLL(unsigned long, void*)>
c0009540:	83 c4 10             	add    esp,0x10
c0009543:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009549:	83 ec 08             	sub    esp,0x8
c000954c:	6a 01                	push   0x1
c000954e:	68 a2 17 02 c0       	push   0xc00217a2
c0009553:	e8 1d b5 00 00       	call   c0014a75 <Thr::loadDLL(char const*, bool)>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	83 ec 08             	sub    esp,0x8
c000955e:	53                   	push   ebx
c000955f:	50                   	push   eax
c0009560:	e8 62 b7 00 00       	call   c0014cc7 <Thr::executeDLL(unsigned long, void*)>
c0009565:	83 c4 10             	add    esp,0x10
c0009568:	eb fe                	jmp    c0009568 <startGUI(void*)+0x68>

c000956a <startGUIVESA(void*)>:
c000956a:	55                   	push   ebp
c000956b:	89 e5                	mov    ebp,esp
c000956d:	53                   	push   ebx
c000956e:	83 ec 04             	sub    esp,0x4
c0009571:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009576:	83 e8 01             	sub    eax,0x1
c0009579:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000957e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009583:	85 c0                	test   eax,eax
c0009585:	75 01                	jne    c0009588 <startGUIVESA(void*)+0x1e>
c0009587:	fb                   	sti    
c0009588:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000958e:	83 ec 08             	sub    esp,0x8
c0009591:	6a 01                	push   0x1
c0009593:	68 c0 17 02 c0       	push   0xc00217c0
c0009598:	e8 d8 b4 00 00       	call   c0014a75 <Thr::loadDLL(char const*, bool)>
c000959d:	83 c4 10             	add    esp,0x10
c00095a0:	83 ec 08             	sub    esp,0x8
c00095a3:	53                   	push   ebx
c00095a4:	50                   	push   eax
c00095a5:	e8 1d b7 00 00       	call   c0014cc7 <Thr::executeDLL(unsigned long, void*)>
c00095aa:	83 c4 10             	add    esp,0x10
c00095ad:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c00095b3:	83 ec 08             	sub    esp,0x8
c00095b6:	6a 01                	push   0x1
c00095b8:	68 a2 17 02 c0       	push   0xc00217a2
c00095bd:	e8 b3 b4 00 00       	call   c0014a75 <Thr::loadDLL(char const*, bool)>
c00095c2:	83 c4 10             	add    esp,0x10
c00095c5:	83 ec 08             	sub    esp,0x8
c00095c8:	53                   	push   ebx
c00095c9:	50                   	push   eax
c00095ca:	e8 f8 b6 00 00       	call   c0014cc7 <Thr::executeDLL(unsigned long, void*)>
c00095cf:	83 c4 10             	add    esp,0x10
c00095d2:	eb fe                	jmp    c00095d2 <startGUIVESA(void*)+0x68>

c00095d4 <sendKeyToTerminal(unsigned char)>:
c00095d4:	55                   	push   ebp
c00095d5:	89 e5                	mov    ebp,esp
c00095d7:	83 ec 28             	sub    esp,0x28
c00095da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095dd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095e0:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00095e5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00095e9:	83 ec 08             	sub    esp,0x8
c00095ec:	52                   	push   edx
c00095ed:	50                   	push   eax
c00095ee:	e8 93 81 00 00       	call   c0011786 <VgaText::receiveKey(unsigned char)>
c00095f3:	83 c4 10             	add    esp,0x10
c00095f6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00095fa:	83 f8 0a             	cmp    eax,0xa
c00095fd:	74 16                	je     c0009615 <sendKeyToTerminal(unsigned char)+0x41>
c00095ff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009603:	83 f8 03             	cmp    eax,0x3
c0009606:	74 0d                	je     c0009615 <sendKeyToTerminal(unsigned char)+0x41>
c0009608:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000960c:	83 f8 1c             	cmp    eax,0x1c
c000960f:	0f 85 97 00 00 00    	jne    c00096ac <sendKeyToTerminal(unsigned char)+0xd8>
c0009615:	fa                   	cli    
c0009616:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000961b:	83 c0 01             	add    eax,0x1
c000961e:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009623:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009628:	83 c0 01             	add    eax,0x1
c000962b:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0009630:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c0009635:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009638:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0009642:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009646:	74 1f                	je     c0009667 <sendKeyToTerminal(unsigned char)+0x93>
c0009648:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000964b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000964e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009651:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009654:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009657:	83 ec 0c             	sub    esp,0xc
c000965a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000965d:	e8 fe c1 00 00       	call   c0015860 <unblockTask(ThreadControlBlock*)>
c0009662:	83 c4 10             	add    esp,0x10
c0009665:	eb db                	jmp    c0009642 <sendKeyToTerminal(unsigned char)+0x6e>
c0009667:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000966c:	83 e8 01             	sub    eax,0x1
c000966f:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0009674:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009679:	85 c0                	test   eax,eax
c000967b:	75 18                	jne    c0009695 <sendKeyToTerminal(unsigned char)+0xc1>
c000967d:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0009682:	85 c0                	test   eax,eax
c0009684:	74 0f                	je     c0009695 <sendKeyToTerminal(unsigned char)+0xc1>
c0009686:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0009690:	e8 d3 be 00 00       	call   c0015568 <schedule()>
c0009695:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000969a:	83 e8 01             	sub    eax,0x1
c000969d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00096a2:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00096a7:	85 c0                	test   eax,eax
c00096a9:	75 01                	jne    c00096ac <sendKeyToTerminal(unsigned char)+0xd8>
c00096ab:	fb                   	sti    
c00096ac:	90                   	nop
c00096ad:	c9                   	leave  
c00096ae:	c3                   	ret    

c00096af <sendKeyboardToken(KeyboardToken)>:
c00096af:	55                   	push   ebp
c00096b0:	89 e5                	mov    ebp,esp
c00096b2:	83 ec 18             	sub    esp,0x18
c00096b5:	e8 33 5f 00 00       	call   c000f5ed <KeUserIOReceived()>
c00096ba:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c0:	0f b7 c0             	movzx  eax,ax
c00096c3:	83 f2 01             	xor    edx,0x1
c00096c6:	88 90 40 93 02 c0    	mov    BYTE PTR [eax-0x3ffd6cc0],dl
c00096cc:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00096d1:	85 c0                	test   eax,eax
c00096d3:	74 24                	je     c00096f9 <sendKeyboardToken(KeyboardToken)+0x4a>
c00096d5:	8b 0d 28 93 02 c0    	mov    ecx,DWORD PTR ds:0xc0029328
c00096db:	83 ec 04             	sub    esp,0x4
c00096de:	68 40 93 02 c0       	push   0xc0029340
c00096e3:	83 ec 08             	sub    esp,0x8
c00096e6:	89 e2                	mov    edx,esp
c00096e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096eb:	89 02                	mov    DWORD PTR [edx],eax
c00096ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00096f0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00096f4:	ff d1                	call   ecx
c00096f6:	83 c4 10             	add    esp,0x10
c00096f9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00096fd:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009700:	0f b6 c0             	movzx  eax,al
c0009703:	85 c0                	test   eax,eax
c0009705:	0f 84 da 00 00 00    	je     c00097e5 <sendKeyboardToken(KeyboardToken)+0x136>
c000970b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000970e:	0f b7 c0             	movzx  eax,ax
c0009711:	3d 18 03 00 00       	cmp    eax,0x318
c0009716:	75 06                	jne    c000971e <sendKeyboardToken(KeyboardToken)+0x6f>
c0009718:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000971e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009721:	0f b7 c0             	movzx  eax,ax
c0009724:	3d 19 03 00 00       	cmp    eax,0x319
c0009729:	75 06                	jne    c0009731 <sendKeyboardToken(KeyboardToken)+0x82>
c000972b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009734:	0f b7 c0             	movzx  eax,ax
c0009737:	3d 1a 03 00 00       	cmp    eax,0x31a
c000973c:	75 06                	jne    c0009744 <sendKeyboardToken(KeyboardToken)+0x95>
c000973e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0009744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009747:	0f b7 c0             	movzx  eax,ax
c000974a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000974f:	75 06                	jne    c0009757 <sendKeyboardToken(KeyboardToken)+0xa8>
c0009751:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0009757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000975a:	0f b7 c0             	movzx  eax,ax
c000975d:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009762:	75 06                	jne    c000976a <sendKeyboardToken(KeyboardToken)+0xbb>
c0009764:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000976a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000976d:	0f b7 c0             	movzx  eax,ax
c0009770:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009775:	75 06                	jne    c000977d <sendKeyboardToken(KeyboardToken)+0xce>
c0009777:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000977d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009780:	0f b7 c0             	movzx  eax,ax
c0009783:	3d 1e 03 00 00       	cmp    eax,0x31e
c0009788:	75 06                	jne    c0009790 <sendKeyboardToken(KeyboardToken)+0xe1>
c000978a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0009790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009793:	0f b7 c0             	movzx  eax,ax
c0009796:	3d 1f 03 00 00       	cmp    eax,0x31f
c000979b:	75 06                	jne    c00097a3 <sendKeyboardToken(KeyboardToken)+0xf4>
c000979d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00097a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097a6:	0f b7 c0             	movzx  eax,ax
c00097a9:	3d 20 03 00 00       	cmp    eax,0x320
c00097ae:	75 06                	jne    c00097b6 <sendKeyboardToken(KeyboardToken)+0x107>
c00097b0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097b9:	0f b7 c0             	movzx  eax,ax
c00097bc:	3d 21 03 00 00       	cmp    eax,0x321
c00097c1:	75 06                	jne    c00097c9 <sendKeyboardToken(KeyboardToken)+0x11a>
c00097c3:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097cc:	0f b7 c0             	movzx  eax,ax
c00097cf:	3d 22 03 00 00       	cmp    eax,0x322
c00097d4:	0f 85 f1 00 00 00    	jne    c00098cb <sendKeyboardToken(KeyboardToken)+0x21c>
c00097da:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097e0:	e9 e6 00 00 00       	jmp    c00098cb <sendKeyboardToken(KeyboardToken)+0x21c>
c00097e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097e8:	0f b7 c0             	movzx  eax,ax
c00097eb:	3d 18 03 00 00       	cmp    eax,0x318
c00097f0:	75 0a                	jne    c00097fc <sendKeyboardToken(KeyboardToken)+0x14d>
c00097f2:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00097f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00097fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097ff:	0f b7 c0             	movzx  eax,ax
c0009802:	3d 19 03 00 00       	cmp    eax,0x319
c0009807:	75 0a                	jne    c0009813 <sendKeyboardToken(KeyboardToken)+0x164>
c0009809:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000980f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009816:	0f b7 c0             	movzx  eax,ax
c0009819:	3d 1a 03 00 00       	cmp    eax,0x31a
c000981e:	75 0a                	jne    c000982a <sendKeyboardToken(KeyboardToken)+0x17b>
c0009820:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0009826:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000982a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000982d:	0f b7 c0             	movzx  eax,ax
c0009830:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009835:	75 0a                	jne    c0009841 <sendKeyboardToken(KeyboardToken)+0x192>
c0009837:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000983d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009844:	0f b7 c0             	movzx  eax,ax
c0009847:	3d 1c 03 00 00       	cmp    eax,0x31c
c000984c:	75 0a                	jne    c0009858 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000984e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009854:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000985b:	0f b7 c0             	movzx  eax,ax
c000985e:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009863:	75 0a                	jne    c000986f <sendKeyboardToken(KeyboardToken)+0x1c0>
c0009865:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000986b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000986f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009872:	0f b7 c0             	movzx  eax,ax
c0009875:	3d 1e 03 00 00       	cmp    eax,0x31e
c000987a:	75 0a                	jne    c0009886 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000987c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0009882:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009889:	0f b7 c0             	movzx  eax,ax
c000988c:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009891:	75 0a                	jne    c000989d <sendKeyboardToken(KeyboardToken)+0x1ee>
c0009893:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0009899:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000989d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a0:	0f b7 c0             	movzx  eax,ax
c00098a3:	3d 20 03 00 00       	cmp    eax,0x320
c00098a8:	75 0a                	jne    c00098b4 <sendKeyboardToken(KeyboardToken)+0x205>
c00098aa:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b7:	0f b7 c0             	movzx  eax,ax
c00098ba:	3d 21 03 00 00       	cmp    eax,0x321
c00098bf:	75 0a                	jne    c00098cb <sendKeyboardToken(KeyboardToken)+0x21c>
c00098c1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ce:	0f b7 c0             	movzx  eax,ax
c00098d1:	3d 00 02 00 00       	cmp    eax,0x200
c00098d6:	75 2f                	jne    c0009907 <sendKeyboardToken(KeyboardToken)+0x258>
c00098d8:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c00098dd:	83 f0 01             	xor    eax,0x1
c00098e0:	0f b6 c0             	movzx  eax,al
c00098e3:	85 c0                	test   eax,eax
c00098e5:	74 20                	je     c0009907 <sendKeyboardToken(KeyboardToken)+0x258>
c00098e7:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00098ec:	6a 01                	push   0x1
c00098ee:	6a 00                	push   0x0
c00098f0:	68 00 95 00 c0       	push   0xc0009500
c00098f5:	50                   	push   eax
c00098f6:	e8 1d ba 00 00       	call   c0015318 <Process::createThread(void (*)(void*), void*, int)>
c00098fb:	83 c4 10             	add    esp,0x10
c00098fe:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c0009905:	eb 3a                	jmp    c0009941 <sendKeyboardToken(KeyboardToken)+0x292>
c0009907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000990a:	0f b7 c0             	movzx  eax,ax
c000990d:	3d 01 02 00 00       	cmp    eax,0x201
c0009912:	75 2d                	jne    c0009941 <sendKeyboardToken(KeyboardToken)+0x292>
c0009914:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c0009919:	83 f0 01             	xor    eax,0x1
c000991c:	0f b6 c0             	movzx  eax,al
c000991f:	85 c0                	test   eax,eax
c0009921:	74 1e                	je     c0009941 <sendKeyboardToken(KeyboardToken)+0x292>
c0009923:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0009928:	6a 01                	push   0x1
c000992a:	6a 00                	push   0x0
c000992c:	68 6a 95 00 c0       	push   0xc000956a
c0009931:	50                   	push   eax
c0009932:	e8 e1 b9 00 00       	call   c0015318 <Process::createThread(void (*)(void*), void*, int)>
c0009937:	83 c4 10             	add    esp,0x10
c000993a:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c0009941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009944:	0f b7 c0             	movzx  eax,ax
c0009947:	3d 25 03 00 00       	cmp    eax,0x325
c000994c:	75 06                	jne    c0009954 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000994e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009957:	0f b7 c0             	movzx  eax,ax
c000995a:	3d 24 03 00 00       	cmp    eax,0x324
c000995f:	75 06                	jne    c0009967 <sendKeyboardToken(KeyboardToken)+0x2b8>
c0009961:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0009967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000996a:	0f b7 c0             	movzx  eax,ax
c000996d:	3d 23 03 00 00       	cmp    eax,0x323
c0009972:	75 06                	jne    c000997a <sendKeyboardToken(KeyboardToken)+0x2cb>
c0009974:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000997a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000997d:	0f b7 c0             	movzx  eax,ax
c0009980:	3d 26 03 00 00       	cmp    eax,0x326
c0009985:	75 06                	jne    c000998d <sendKeyboardToken(KeyboardToken)+0x2de>
c0009987:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000998d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009990:	0f b7 c0             	movzx  eax,ax
c0009993:	3d 27 03 00 00       	cmp    eax,0x327
c0009998:	75 06                	jne    c00099a0 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000999a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00099a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099a3:	0f b7 c0             	movzx  eax,ax
c00099a6:	3d 22 03 00 00       	cmp    eax,0x322
c00099ab:	75 06                	jne    c00099b3 <sendKeyboardToken(KeyboardToken)+0x304>
c00099ad:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099b3:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099b7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099ba:	83 f0 01             	xor    eax,0x1
c00099bd:	0f b6 c0             	movzx  eax,al
c00099c0:	85 c0                	test   eax,eax
c00099c2:	74 7c                	je     c0009a40 <sendKeyboardToken(KeyboardToken)+0x391>
c00099c4:	a0 41 94 02 c0       	mov    al,ds:0xc0029441
c00099c9:	0f b6 c0             	movzx  eax,al
c00099cc:	85 c0                	test   eax,eax
c00099ce:	74 43                	je     c0009a13 <sendKeyboardToken(KeyboardToken)+0x364>
c00099d0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099d4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099d8:	85 c0                	test   eax,eax
c00099da:	74 2b                	je     c0009a07 <sendKeyboardToken(KeyboardToken)+0x358>
c00099dc:	8b 15 44 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029744
c00099e2:	89 d0                	mov    eax,edx
c00099e4:	c1 e0 02             	shl    eax,0x2
c00099e7:	01 d0                	add    eax,edx
c00099e9:	01 c0                	add    eax,eax
c00099eb:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099f3:	0f b7 c0             	movzx  eax,ax
c00099f6:	8d 50 d0             	lea    edx,[eax-0x30]
c00099f9:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c00099fe:	01 d0                	add    eax,edx
c0009a00:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c0009a05:	eb 71                	jmp    c0009a78 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a07:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a11:	eb 65                	jmp    c0009a78 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a13:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a18:	85 c0                	test   eax,eax
c0009a1a:	74 18                	je     c0009a34 <sendKeyboardToken(KeyboardToken)+0x385>
c0009a1c:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a21:	0f b6 c0             	movzx  eax,al
c0009a24:	83 ec 0c             	sub    esp,0xc
c0009a27:	50                   	push   eax
c0009a28:	e8 a7 fb ff ff       	call   c00095d4 <sendKeyToTerminal(unsigned char)>
c0009a2d:	83 c4 10             	add    esp,0x10
c0009a30:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a34:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a3e:	eb 38                	jmp    c0009a78 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a43:	0f b7 c0             	movzx  eax,ax
c0009a46:	3d 01 01 00 00       	cmp    eax,0x101
c0009a4b:	75 2b                	jne    c0009a78 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a4d:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a52:	85 c0                	test   eax,eax
c0009a54:	74 18                	je     c0009a6e <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a56:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a5b:	0f b6 c0             	movzx  eax,al
c0009a5e:	83 ec 0c             	sub    esp,0xc
c0009a61:	50                   	push   eax
c0009a62:	e8 6d fb ff ff       	call   c00095d4 <sendKeyToTerminal(unsigned char)>
c0009a67:	83 c4 10             	add    esp,0x10
c0009a6a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a6e:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a78:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a7b:	83 f0 01             	xor    eax,0x1
c0009a7e:	0f b6 c0             	movzx  eax,al
c0009a81:	85 c0                	test   eax,eax
c0009a83:	74 5a                	je     c0009adf <sendKeyboardToken(KeyboardToken)+0x430>
c0009a85:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009a88:	83 f0 01             	xor    eax,0x1
c0009a8b:	0f b6 c0             	movzx  eax,al
c0009a8e:	85 c0                	test   eax,eax
c0009a90:	74 4d                	je     c0009adf <sendKeyboardToken(KeyboardToken)+0x430>
c0009a92:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009a97:	83 f0 01             	xor    eax,0x1
c0009a9a:	0f b6 c0             	movzx  eax,al
c0009a9d:	85 c0                	test   eax,eax
c0009a9f:	74 3e                	je     c0009adf <sendKeyboardToken(KeyboardToken)+0x430>
c0009aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aa4:	0f b7 c0             	movzx  eax,ax
c0009aa7:	83 f8 1f             	cmp    eax,0x1f
c0009aaa:	76 0b                	jbe    c0009ab7 <sendKeyboardToken(KeyboardToken)+0x408>
c0009aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aaf:	0f b7 c0             	movzx  eax,ax
c0009ab2:	83 f8 7e             	cmp    eax,0x7e
c0009ab5:	76 16                	jbe    c0009acd <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aba:	0f b7 c0             	movzx  eax,ax
c0009abd:	83 f8 0a             	cmp    eax,0xa
c0009ac0:	74 0b                	je     c0009acd <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac5:	0f b7 c0             	movzx  eax,ax
c0009ac8:	83 f8 08             	cmp    eax,0x8
c0009acb:	75 12                	jne    c0009adf <sendKeyboardToken(KeyboardToken)+0x430>
c0009acd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ad0:	0f b6 c0             	movzx  eax,al
c0009ad3:	83 ec 0c             	sub    esp,0xc
c0009ad6:	50                   	push   eax
c0009ad7:	e8 f8 fa ff ff       	call   c00095d4 <sendKeyToTerminal(unsigned char)>
c0009adc:	83 c4 10             	add    esp,0x10
c0009adf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009ae2:	83 f0 01             	xor    eax,0x1
c0009ae5:	0f b6 c0             	movzx  eax,al
c0009ae8:	85 c0                	test   eax,eax
c0009aea:	74 5d                	je     c0009b49 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009aec:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009aef:	83 f0 01             	xor    eax,0x1
c0009af2:	0f b6 c0             	movzx  eax,al
c0009af5:	85 c0                	test   eax,eax
c0009af7:	74 50                	je     c0009b49 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009af9:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009afe:	0f b6 c0             	movzx  eax,al
c0009b01:	85 c0                	test   eax,eax
c0009b03:	74 44                	je     c0009b49 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b08:	0f b7 c0             	movzx  eax,ax
c0009b0b:	83 f8 3f             	cmp    eax,0x3f
c0009b0e:	76 39                	jbe    c0009b49 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b13:	0f b7 c0             	movzx  eax,ax
c0009b16:	83 f8 7f             	cmp    eax,0x7f
c0009b19:	77 2e                	ja     c0009b49 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b1e:	88 c2                	mov    dl,al
c0009b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b23:	0f b7 c0             	movzx  eax,ax
c0009b26:	83 f8 5f             	cmp    eax,0x5f
c0009b29:	76 04                	jbe    c0009b2f <sendKeyboardToken(KeyboardToken)+0x480>
c0009b2b:	b0 20                	mov    al,0x20
c0009b2d:	eb 02                	jmp    c0009b31 <sendKeyboardToken(KeyboardToken)+0x482>
c0009b2f:	b0 00                	mov    al,0x0
c0009b31:	89 d1                	mov    ecx,edx
c0009b33:	29 c1                	sub    ecx,eax
c0009b35:	89 c8                	mov    eax,ecx
c0009b37:	83 e8 40             	sub    eax,0x40
c0009b3a:	0f b6 c0             	movzx  eax,al
c0009b3d:	83 ec 0c             	sub    esp,0xc
c0009b40:	50                   	push   eax
c0009b41:	e8 8e fa ff ff       	call   c00095d4 <sendKeyToTerminal(unsigned char)>
c0009b46:	83 c4 10             	add    esp,0x10
c0009b49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b4c:	0f b7 c0             	movzx  eax,ax
c0009b4f:	3d 00 03 00 00       	cmp    eax,0x300
c0009b54:	75 12                	jne    c0009b68 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b56:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b59:	83 f0 01             	xor    eax,0x1
c0009b5c:	0f b6 c0             	movzx  eax,al
c0009b5f:	85 c0                	test   eax,eax
c0009b61:	74 05                	je     c0009b68 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b63:	e8 6b 73 00 00       	call   c0010ed3 <doTerminalCycle()>
c0009b68:	90                   	nop
c0009b69:	c9                   	leave  
c0009b6a:	c3                   	ret    

c0009b6b <clearInternalKeybuffer(VgaText*)>:
c0009b6b:	55                   	push   ebp
c0009b6c:	89 e5                	mov    ebp,esp
c0009b6e:	83 ec 08             	sub    esp,0x8
c0009b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b74:	05 02 01 00 00       	add    eax,0x102
c0009b79:	83 ec 0c             	sub    esp,0xc
c0009b7c:	50                   	push   eax
c0009b7d:	e8 ee 69 ff ff       	call   c0000570 <strlen>
c0009b82:	83 c4 10             	add    esp,0x10
c0009b85:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009b88:	81 c2 02 01 00 00    	add    edx,0x102
c0009b8e:	83 ec 04             	sub    esp,0x4
c0009b91:	50                   	push   eax
c0009b92:	6a 00                	push   0x0
c0009b94:	52                   	push   edx
c0009b95:	e8 56 69 ff ff       	call   c00004f0 <memset>
c0009b9a:	83 c4 10             	add    esp,0x10
c0009b9d:	90                   	nop
c0009b9e:	c9                   	leave  
c0009b9f:	c3                   	ret    

c0009ba0 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009ba0:	55                   	push   ebp
c0009ba1:	89 e5                	mov    ebp,esp
c0009ba3:	83 ec 18             	sub    esp,0x18
c0009ba6:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009bab:	85 c0                	test   eax,eax
c0009bad:	74 2a                	je     c0009bd9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009baf:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bb5:	8b 0d 28 93 02 c0    	mov    ecx,DWORD PTR ds:0xc0029328
c0009bbb:	83 ec 04             	sub    esp,0x4
c0009bbe:	68 40 93 02 c0       	push   0xc0029340
c0009bc3:	83 ec 08             	sub    esp,0x8
c0009bc6:	89 e2                	mov    edx,esp
c0009bc8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009bcb:	89 02                	mov    DWORD PTR [edx],eax
c0009bcd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009bd0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009bd4:	ff d1                	call   ecx
c0009bd6:	83 c4 10             	add    esp,0x10
c0009bd9:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009bde:	0f b6 c0             	movzx  eax,al
c0009be1:	85 c0                	test   eax,eax
c0009be3:	74 07                	je     c0009bec <readKeyboard(VgaText*, char*, unsigned long)+0x4c>
c0009be5:	c6 05 2c 93 02 c0 01 	mov    BYTE PTR ds:0xc002932c,0x1
c0009bec:	fb                   	sti    
c0009bed:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009bf4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bf8:	0f 84 2f 01 00 00    	je     c0009d2d <readKeyboard(VgaText*, char*, unsigned long)+0x18d>
c0009bfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c01:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c07:	0f be c0             	movsx  eax,al
c0009c0a:	85 c0                	test   eax,eax
c0009c0c:	75 2c                	jne    c0009c3a <readKeyboard(VgaText*, char*, unsigned long)+0x9a>
c0009c0e:	fa                   	cli    
c0009c0f:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c14:	83 c0 01             	add    eax,0x1
c0009c17:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c1c:	e8 47 b9 00 00       	call   c0015568 <schedule()>
c0009c21:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c26:	83 e8 01             	sub    eax,0x1
c0009c29:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c2e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c33:	85 c0                	test   eax,eax
c0009c35:	75 c7                	jne    c0009bfe <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c37:	fb                   	sti    
c0009c38:	eb c4                	jmp    c0009bfe <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c3a:	a0 2c 93 02 c0       	mov    al,ds:0xc002932c
c0009c3f:	0f b6 c0             	movzx  eax,al
c0009c42:	85 c0                	test   eax,eax
c0009c44:	74 0a                	je     c0009c50 <readKeyboard(VgaText*, char*, unsigned long)+0xb0>
c0009c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c49:	c6 80 02 01 00 00 0a 	mov    BYTE PTR [eax+0x102],0xa
c0009c50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c53:	8d 50 01             	lea    edx,[eax+0x1]
c0009c56:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c59:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c5c:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c62:	88 10                	mov    BYTE PTR [eax],dl
c0009c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c67:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c6d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c70:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c74:	83 f8 03             	cmp    eax,0x3
c0009c77:	75 1e                	jne    c0009c97 <readKeyboard(VgaText*, char*, unsigned long)+0xf7>
c0009c79:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c83:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c89:	83 ec 08             	sub    esp,0x8
c0009c8c:	6a 02                	push   0x2
c0009c8e:	50                   	push   eax
c0009c8f:	e8 87 61 00 00       	call   c000fe1b <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c94:	83 c4 10             	add    esp,0x10
c0009c97:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c9b:	83 f8 1c             	cmp    eax,0x1c
c0009c9e:	75 1e                	jne    c0009cbe <readKeyboard(VgaText*, char*, unsigned long)+0x11e>
c0009ca0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ca5:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ca7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009caa:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009cb0:	83 ec 08             	sub    esp,0x8
c0009cb3:	6a 09                	push   0x9
c0009cb5:	50                   	push   eax
c0009cb6:	e8 60 61 00 00       	call   c000fe1b <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cbb:	83 c4 10             	add    esp,0x10
c0009cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cc1:	05 02 01 00 00       	add    eax,0x102
c0009cc6:	83 ec 0c             	sub    esp,0xc
c0009cc9:	50                   	push   eax
c0009cca:	e8 a1 68 ff ff       	call   c0000570 <strlen>
c0009ccf:	83 c4 10             	add    esp,0x10
c0009cd2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cd5:	81 c2 02 01 00 00    	add    edx,0x102
c0009cdb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cde:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009ce1:	81 c2 02 01 00 00    	add    edx,0x102
c0009ce7:	83 ec 04             	sub    esp,0x4
c0009cea:	50                   	push   eax
c0009ceb:	51                   	push   ecx
c0009cec:	52                   	push   edx
c0009ced:	e8 de 66 ff ff       	call   c00003d0 <memmove>
c0009cf2:	83 c4 10             	add    esp,0x10
c0009cf5:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009cf9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009cfd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d01:	83 f8 0a             	cmp    eax,0xa
c0009d04:	74 22                	je     c0009d28 <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009d06:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d0a:	83 f8 03             	cmp    eax,0x3
c0009d0d:	74 19                	je     c0009d28 <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009d0f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d13:	83 f8 1c             	cmp    eax,0x1c
c0009d16:	74 10                	je     c0009d28 <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009d18:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009d1d:	0f b6 c0             	movzx  eax,al
c0009d20:	85 c0                	test   eax,eax
c0009d22:	0f 84 cc fe ff ff    	je     c0009bf4 <readKeyboard(VgaText*, char*, unsigned long)+0x54>
c0009d28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d2b:	eb 03                	jmp    c0009d30 <readKeyboard(VgaText*, char*, unsigned long)+0x190>
c0009d2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d30:	c9                   	leave  
c0009d31:	c3                   	ret    

c0009d32 <Keyboard::Keyboard(char const*)>:
c0009d32:	83 ec 0c             	sub    esp,0xc
c0009d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d39:	83 ec 08             	sub    esp,0x8
c0009d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d40:	50                   	push   eax
c0009d41:	e8 5a f4 ff ff       	call   c00091a0 <Device::Device(char const*)>
c0009d46:	83 c4 10             	add    esp,0x10
c0009d49:	ba e4 17 02 c0       	mov    edx,0xc00217e4
c0009d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d52:	89 10                	mov    DWORD PTR [eax],edx
c0009d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d58:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d62:	c6 05 24 93 02 c0 01 	mov    BYTE PTR ds:0xc0029324,0x1
c0009d69:	90                   	nop
c0009d6a:	83 c4 0c             	add    esp,0xc
c0009d6d:	c3                   	ret    

c0009d6e <Keyboard::~Keyboard()>:
c0009d6e:	83 ec 0c             	sub    esp,0xc
c0009d71:	ba e4 17 02 c0       	mov    edx,0xc00217e4
c0009d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d7a:	89 10                	mov    DWORD PTR [eax],edx
c0009d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d80:	83 ec 0c             	sub    esp,0xc
c0009d83:	50                   	push   eax
c0009d84:	e8 b7 f1 ff ff       	call   c0008f40 <Device::~Device()>
c0009d89:	83 c4 10             	add    esp,0x10
c0009d8c:	90                   	nop
c0009d8d:	83 c4 0c             	add    esp,0xc
c0009d90:	c3                   	ret    
c0009d91:	90                   	nop

c0009d92 <Keyboard::~Keyboard()>:
c0009d92:	83 ec 0c             	sub    esp,0xc
c0009d95:	83 ec 0c             	sub    esp,0xc
c0009d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d9c:	e8 cd ff ff ff       	call   c0009d6e <Keyboard::~Keyboard()>
c0009da1:	83 c4 10             	add    esp,0x10
c0009da4:	83 ec 08             	sub    esp,0x8
c0009da7:	68 5c 01 00 00       	push   0x15c
c0009dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009db0:	e8 53 29 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0009db5:	83 c4 10             	add    esp,0x10
c0009db8:	83 c4 0c             	add    esp,0xc
c0009dbb:	c3                   	ret    

c0009dbc <LogicalDisk::close(int, int, void*)>:
c0009dbc:	83 c8 ff             	or     eax,0xffffffff
c0009dbf:	c3                   	ret    

c0009dc0 <LogicalDisk::~LogicalDisk()>:
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	ba 5c 18 02 c0       	mov    edx,0xc002185c
c0009dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dcc:	89 10                	mov    DWORD PTR [eax],edx
c0009dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd2:	83 ec 0c             	sub    esp,0xc
c0009dd5:	50                   	push   eax
c0009dd6:	e8 65 f1 ff ff       	call   c0008f40 <Device::~Device()>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	90                   	nop
c0009ddf:	83 c4 0c             	add    esp,0xc
c0009de2:	c3                   	ret    
c0009de3:	90                   	nop

c0009de4 <LogicalDisk::~LogicalDisk()>:
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	83 ec 0c             	sub    esp,0xc
c0009dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dee:	e8 cd ff ff ff       	call   c0009dc0 <LogicalDisk::~LogicalDisk()>
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	83 ec 08             	sub    esp,0x8
c0009df9:	68 78 01 00 00       	push   0x178
c0009dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e02:	e8 01 29 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0009e07:	83 c4 10             	add    esp,0x10
c0009e0a:	83 c4 0c             	add    esp,0xc
c0009e0d:	c3                   	ret    

c0009e0e <LogicalDisk::open(int, int, void*)>:
c0009e0e:	83 ec 18             	sub    esp,0x18
c0009e11:	68 10 18 02 c0       	push   0xc0021810
c0009e16:	e8 cb 4e 00 00       	call   c000ece6 <KePanic(char const*)>
c0009e1b:	83 c8 ff             	or     eax,0xffffffff
c0009e1e:	83 c4 1c             	add    esp,0x1c
c0009e21:	c3                   	ret    

c0009e22 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e22:	53                   	push   ebx
c0009e23:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e2f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e35:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e3b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e41:	77 10                	ja     c0009e53 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e43:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e49:	89 d3                	mov    ebx,edx
c0009e4b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e51:	72 05                	jb     c0009e58 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e53:	83 c8 ff             	or     eax,0xffffffff
c0009e56:	89 c2                	mov    edx,eax
c0009e58:	5b                   	pop    ebx
c0009e59:	c3                   	ret    

c0009e5a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e5a:	56                   	push   esi
c0009e5b:	83 c8 ff             	or     eax,0xffffffff
c0009e5e:	53                   	push   ebx
c0009e5f:	89 c2                	mov    edx,eax
c0009e61:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e65:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e6d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e73:	77 27                	ja     c0009e9c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e75:	89 d8                	mov    eax,ebx
c0009e77:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e7d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e88:	89 c2                	mov    edx,eax
c0009e8a:	73 10                	jae    c0009e9c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e8c:	89 c8                	mov    eax,ecx
c0009e8e:	89 da                	mov    edx,ebx
c0009e90:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e96:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009e9c:	5b                   	pop    ebx
c0009e9d:	5e                   	pop    esi
c0009e9e:	c3                   	ret    
c0009e9f:	90                   	nop

c0009ea0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009ea0:	83 ec 1c             	sub    esp,0x1c
c0009ea3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009ea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009eb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009eb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009eba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009ebe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ec6:	83 ec 08             	sub    esp,0x8
c0009ec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ecd:	50                   	push   eax
c0009ece:	e8 cd f2 ff ff       	call   c00091a0 <Device::Device(char const*)>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	ba 5c 18 02 c0       	mov    edx,0xc002185c
c0009edb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009edf:	89 10                	mov    DWORD PTR [eax],edx
c0009ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ef0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009ef7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009efb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f06:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f10:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f1c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f22:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f28:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f2f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f33:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f39:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f47:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f51:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f5b:	90                   	nop
c0009f5c:	83 c4 1c             	add    esp,0x1c
c0009f5f:	c3                   	ret    

c0009f60 <LogicalDisk::assignDriveLetter()>:
c0009f60:	55                   	push   ebp
c0009f61:	57                   	push   edi
c0009f62:	56                   	push   esi
c0009f63:	53                   	push   ebx
c0009f64:	83 ec 14             	sub    esp,0x14
c0009f67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f71:	b0 41                	mov    al,0x41
c0009f73:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f79:	84 d2                	test   dl,dl
c0009f7b:	75 02                	jne    c0009f7f <LogicalDisk::assignDriveLetter()+0x1f>
c0009f7d:	b0 43                	mov    al,0x43
c0009f7f:	8b 3d 60 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029760
c0009f85:	0f b6 ca             	movzx  ecx,dl
c0009f88:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f8c:	0f be e8             	movsx  ebp,al
c0009f8f:	8b 3d 64 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029764
c0009f95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f99:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009f9d:	3c 43                	cmp    al,0x43
c0009f9f:	75 10                	jne    c0009fb1 <LogicalDisk::assignDriveLetter()+0x51>
c0009fa1:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009fa8:	75 5a                	jne    c000a004 <LogicalDisk::assignDriveLetter()+0xa4>
c0009faa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009faf:	75 53                	jne    c000a004 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fb1:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fb4:	ba 01 00 00 00       	mov    edx,0x1
c0009fb9:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fbc:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009fbf:	d3 e2                	shl    edx,cl
c0009fc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fc5:	89 d7                	mov    edi,edx
c0009fc7:	89 d6                	mov    esi,edx
c0009fc9:	c1 ff 1f             	sar    edi,0x1f
c0009fcc:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fd0:	21 f9                	and    ecx,edi
c0009fd2:	09 d1                	or     ecx,edx
c0009fd4:	75 2e                	jne    c000a004 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fd6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fde:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fe4:	09 f2                	or     edx,esi
c0009fe6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fe9:	89 15 60 97 02 c0    	mov    DWORD PTR ds:0xc0029760,edx
c0009fef:	89 1c b5 80 97 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6880],ebx
c0009ff6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ffa:	09 fa                	or     edx,edi
c0009ffc:	89 15 64 97 02 c0    	mov    DWORD PTR ds:0xc0029764,edx
c000a002:	eb 0d                	jmp    c000a011 <LogicalDisk::assignDriveLetter()+0xb1>
c000a004:	8d 50 01             	lea    edx,[eax+0x1]
c000a007:	45                   	inc    ebp
c000a008:	88 d0                	mov    al,dl
c000a00a:	80 fa 5b             	cmp    dl,0x5b
c000a00d:	75 8e                	jne    c0009f9d <LogicalDisk::assignDriveLetter()+0x3d>
c000a00f:	31 c0                	xor    eax,eax
c000a011:	83 c4 14             	add    esp,0x14
c000a014:	5b                   	pop    ebx
c000a015:	5e                   	pop    esi
c000a016:	5f                   	pop    edi
c000a017:	5d                   	pop    ebp
c000a018:	c3                   	ret    
c000a019:	90                   	nop

c000a01a <LogicalDisk::mount()>:
c000a01a:	56                   	push   esi
c000a01b:	53                   	push   ebx
c000a01c:	53                   	push   ebx
c000a01d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a021:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000a027:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a031:	85 db                	test   ebx,ebx
c000a033:	74 27                	je     c000a05c <LogicalDisk::mount()+0x42>
c000a035:	51                   	push   ecx
c000a036:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a03d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a03f:	83 e8 41             	sub    eax,0x41
c000a042:	50                   	push   eax
c000a043:	56                   	push   esi
c000a044:	53                   	push   ebx
c000a045:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a048:	83 c4 10             	add    esp,0x10
c000a04b:	84 c0                	test   al,al
c000a04d:	74 08                	je     c000a057 <LogicalDisk::mount()+0x3d>
c000a04f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a055:	eb 07                	jmp    c000a05e <LogicalDisk::mount()+0x44>
c000a057:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a05a:	eb d5                	jmp    c000a031 <LogicalDisk::mount()+0x17>
c000a05c:	31 c0                	xor    eax,eax
c000a05e:	5a                   	pop    edx
c000a05f:	5b                   	pop    ebx
c000a060:	5e                   	pop    esi
c000a061:	c3                   	ret    

c000a062 <LogicalDisk::unmount()>:
c000a062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a066:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a070:	c3                   	ret    
c000a071:	90                   	nop

c000a072 <LogicalDisk::eject()>:
c000a072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a076:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a07c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a07e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a082:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a085:	90                   	nop

c000a086 <LogicalDisk::unassignDriveLetter()>:
c000a086:	57                   	push   edi
c000a087:	56                   	push   esi
c000a088:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a08c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a093:	85 c9                	test   ecx,ecx
c000a095:	75 0f                	jne    c000a0a6 <LogicalDisk::unassignDriveLetter()+0x20>
c000a097:	c7 44 24 0c 34 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021834
c000a09f:	5e                   	pop    esi
c000a0a0:	5f                   	pop    edi
c000a0a1:	e9 40 4c 00 00       	jmp    c000ece6 <KePanic(char const*)>
c000a0a6:	83 e9 41             	sub    ecx,0x41
c000a0a9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0b0:	b8 01 00 00 00       	mov    eax,0x1
c000a0b5:	c7 04 8d 80 97 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6880],0x0
c000a0c0:	d3 e0                	shl    eax,cl
c000a0c2:	89 c7                	mov    edi,eax
c000a0c4:	f7 d0                	not    eax
c000a0c6:	c1 ff 1f             	sar    edi,0x1f
c000a0c9:	21 05 60 97 02 c0    	and    DWORD PTR ds:0xc0029760,eax
c000a0cf:	89 fe                	mov    esi,edi
c000a0d1:	f7 d6                	not    esi
c000a0d3:	21 35 64 97 02 c0    	and    DWORD PTR ds:0xc0029764,esi
c000a0d9:	5e                   	pop    esi
c000a0da:	5f                   	pop    edi
c000a0db:	c3                   	ret    

c000a0dc <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0dc:	57                   	push   edi
c000a0dd:	56                   	push   esi
c000a0de:	53                   	push   ebx
c000a0df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0ef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0f5:	77 41                	ja     c000a138 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0f7:	99                   	cdq    
c000a0f8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a0fe:	01 c8                	add    eax,ecx
c000a100:	11 da                	adc    edx,ebx
c000a102:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a108:	19 d7                	sbb    edi,edx
c000a10a:	72 33                	jb     c000a13f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a10c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a112:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a118:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a11c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a120:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a126:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a12c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a130:	5b                   	pop    ebx
c000a131:	5e                   	pop    esi
c000a132:	5f                   	pop    edi
c000a133:	e9 c8 0a 00 00       	jmp    c000ac00 <VCache::read(unsigned long long, int, void*)>
c000a138:	b8 05 00 00 00       	mov    eax,0x5
c000a13d:	eb 05                	jmp    c000a144 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a13f:	b8 07 00 00 00       	mov    eax,0x7
c000a144:	5b                   	pop    ebx
c000a145:	5e                   	pop    esi
c000a146:	5f                   	pop    edi
c000a147:	c3                   	ret    

c000a148 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a148:	57                   	push   edi
c000a149:	56                   	push   esi
c000a14a:	53                   	push   ebx
c000a14b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a14f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a153:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a157:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a15b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a161:	77 41                	ja     c000a1a4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a163:	99                   	cdq    
c000a164:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a16a:	01 c8                	add    eax,ecx
c000a16c:	11 da                	adc    edx,ebx
c000a16e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a174:	19 d7                	sbb    edi,edx
c000a176:	72 33                	jb     c000a1ab <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a178:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a17e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a184:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a188:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a18c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a192:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a198:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a19c:	5b                   	pop    ebx
c000a19d:	5e                   	pop    esi
c000a19e:	5f                   	pop    edi
c000a19f:	e9 68 09 00 00       	jmp    c000ab0c <VCache::write(unsigned long long, int, void*)>
c000a1a4:	b8 05 00 00 00       	mov    eax,0x5
c000a1a9:	eb 05                	jmp    c000a1b0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a1ab:	b8 07 00 00 00       	mov    eax,0x7
c000a1b0:	5b                   	pop    ebx
c000a1b1:	5e                   	pop    esi
c000a1b2:	5f                   	pop    edi
c000a1b3:	c3                   	ret    

c000a1b4 <Mouse::Mouse(char const*)>:
c000a1b4:	83 ec 0c             	sub    esp,0xc
c000a1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1bb:	83 ec 08             	sub    esp,0x8
c000a1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1c2:	50                   	push   eax
c000a1c3:	e8 d8 ef ff ff       	call   c00091a0 <Device::Device(char const*)>
c000a1c8:	83 c4 10             	add    esp,0x10
c000a1cb:	ba 88 18 02 c0       	mov    edx,0xc0021888
c000a1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d4:	89 10                	mov    DWORD PTR [eax],edx
c000a1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1da:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1e4:	90                   	nop
c000a1e5:	83 c4 0c             	add    esp,0xc
c000a1e8:	c3                   	ret    
c000a1e9:	90                   	nop
c000a1ea:	66 90                	xchg   ax,ax

c000a1ec <Mouse::~Mouse()>:
c000a1ec:	83 ec 0c             	sub    esp,0xc
c000a1ef:	ba 88 18 02 c0       	mov    edx,0xc0021888
c000a1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1fe:	83 ec 0c             	sub    esp,0xc
c000a201:	50                   	push   eax
c000a202:	e8 39 ed ff ff       	call   c0008f40 <Device::~Device()>
c000a207:	83 c4 10             	add    esp,0x10
c000a20a:	90                   	nop
c000a20b:	83 c4 0c             	add    esp,0xc
c000a20e:	c3                   	ret    
c000a20f:	90                   	nop

c000a210 <Mouse::~Mouse()>:
c000a210:	83 ec 0c             	sub    esp,0xc
c000a213:	83 ec 0c             	sub    esp,0xc
c000a216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a21a:	e8 cd ff ff ff       	call   c000a1ec <Mouse::~Mouse()>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	83 ec 08             	sub    esp,0x8
c000a225:	68 58 01 00 00       	push   0x158
c000a22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a22e:	e8 d5 24 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000a233:	83 c4 10             	add    esp,0x10
c000a236:	83 c4 0c             	add    esp,0xc
c000a239:	c3                   	ret    

c000a23a <NIC::getMAC()>:
c000a23a:	31 c0                	xor    eax,eax
c000a23c:	31 d2                	xor    edx,edx
c000a23e:	c3                   	ret    
c000a23f:	90                   	nop

c000a240 <NIC::write(int, unsigned char*, int*)>:
c000a240:	b8 01 00 00 00       	mov    eax,0x1
c000a245:	c3                   	ret    

c000a246 <NIC::NIC(char const*)>:
c000a246:	83 ec 0c             	sub    esp,0xc
c000a249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a24d:	83 ec 08             	sub    esp,0x8
c000a250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a254:	50                   	push   eax
c000a255:	e8 46 ef ff ff       	call   c00091a0 <Device::Device(char const*)>
c000a25a:	83 c4 10             	add    esp,0x10
c000a25d:	ba b4 18 02 c0       	mov    edx,0xc00218b4
c000a262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a266:	89 10                	mov    DWORD PTR [eax],edx
c000a268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a26c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a276:	90                   	nop
c000a277:	83 c4 0c             	add    esp,0xc
c000a27a:	c3                   	ret    
c000a27b:	90                   	nop

c000a27c <NIC::~NIC()>:
c000a27c:	83 ec 0c             	sub    esp,0xc
c000a27f:	ba b4 18 02 c0       	mov    edx,0xc00218b4
c000a284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a288:	89 10                	mov    DWORD PTR [eax],edx
c000a28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a28e:	83 ec 0c             	sub    esp,0xc
c000a291:	50                   	push   eax
c000a292:	e8 a9 ec ff ff       	call   c0008f40 <Device::~Device()>
c000a297:	83 c4 10             	add    esp,0x10
c000a29a:	90                   	nop
c000a29b:	83 c4 0c             	add    esp,0xc
c000a29e:	c3                   	ret    
c000a29f:	90                   	nop

c000a2a0 <NIC::~NIC()>:
c000a2a0:	83 ec 0c             	sub    esp,0xc
c000a2a3:	83 ec 0c             	sub    esp,0xc
c000a2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2aa:	e8 cd ff ff ff       	call   c000a27c <NIC::~NIC()>
c000a2af:	83 c4 10             	add    esp,0x10
c000a2b2:	83 ec 08             	sub    esp,0x8
c000a2b5:	68 58 01 00 00       	push   0x158
c000a2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2be:	e8 45 24 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	83 c4 0c             	add    esp,0xc
c000a2c9:	c3                   	ret    

c000a2ca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2ca:	55                   	push   ebp
c000a2cb:	57                   	push   edi
c000a2cc:	56                   	push   esi
c000a2cd:	53                   	push   ebx
c000a2ce:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2d4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000a2db:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000a2e2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000a2e9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000a2f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2f8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a2ff:	e8 98 ef ff ff       	call   c000929c <Device::getName()>
c000a304:	5a                   	pop    edx
c000a305:	59                   	pop    ecx
c000a306:	50                   	push   eax
c000a307:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a30b:	55                   	push   ebp
c000a30c:	e8 2f 63 ff ff       	call   c0000640 <strcpy>
c000a311:	5b                   	pop    ebx
c000a312:	58                   	pop    eax
c000a313:	68 e0 18 02 c0       	push   0xc00218e0
c000a318:	55                   	push   ebp
c000a319:	e8 22 65 ff ff       	call   c0000840 <strcat>
c000a31e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a325:	e8 67 46 00 00       	call   c000e991 <malloc>
c000a32a:	83 c4 0c             	add    esp,0xc
c000a32d:	89 c3                	mov    ebx,eax
c000a32f:	57                   	push   edi
c000a330:	56                   	push   esi
c000a331:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a335:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a339:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a340:	55                   	push   ebp
c000a341:	50                   	push   eax
c000a342:	e8 59 fb ff ff       	call   c0009ea0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a347:	83 c4 14             	add    esp,0x14
c000a34a:	53                   	push   ebx
c000a34b:	e8 10 fc ff ff       	call   c0009f60 <LogicalDisk::assignDriveLetter()>
c000a350:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a353:	e8 c2 fc ff ff       	call   c000a01a <LogicalDisk::mount()>
c000a358:	58                   	pop    eax
c000a359:	5a                   	pop    edx
c000a35a:	53                   	push   ebx
c000a35b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a362:	e8 d7 ec ff ff       	call   c000903e <Device::addChild(Device*)>
c000a367:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a36d:	5b                   	pop    ebx
c000a36e:	5e                   	pop    esi
c000a36f:	5f                   	pop    edi
c000a370:	5d                   	pop    ebp
c000a371:	c3                   	ret    

c000a372 <createPartitionsForDisk(PhysicalDisk*)>:
c000a372:	55                   	push   ebp
c000a373:	57                   	push   edi
c000a374:	56                   	push   esi
c000a375:	53                   	push   ebx
c000a376:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a37c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a383:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a389:	3d 00 02 00 00       	cmp    eax,0x200
c000a38e:	74 27                	je     c000a3b7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a390:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a396:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a39c:	83 ec 10             	sub    esp,0x10
c000a39f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a3a3:	99                   	cdq    
c000a3a4:	c1 e6 0a             	shl    esi,0xa
c000a3a7:	52                   	push   edx
c000a3a8:	89 fd                	mov    ebp,edi
c000a3aa:	50                   	push   eax
c000a3ab:	55                   	push   ebp
c000a3ac:	56                   	push   esi
c000a3ad:	e8 92 57 01 00       	call   c001fb44 <__udivdi3>
c000a3b2:	e9 b9 00 00 00       	jmp    c000a470 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3b7:	83 ec 0c             	sub    esp,0xc
c000a3ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3bc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3c0:	56                   	push   esi
c000a3c1:	6a 01                	push   0x1
c000a3c3:	6a 00                	push   0x0
c000a3c5:	6a 00                	push   0x0
c000a3c7:	53                   	push   ebx
c000a3c8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3cb:	83 c4 20             	add    esp,0x20
c000a3ce:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3d6:	75 0a                	jne    c000a3e2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3d8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3e0:	74 2c                	je     c000a40e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3e2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3e8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3f4:	83 ec 10             	sub    esp,0x10
c000a3f7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a3fb:	89 f7                	mov    edi,esi
c000a3fd:	c1 e0 0a             	shl    eax,0xa
c000a400:	c1 ff 1f             	sar    edi,0x1f
c000a403:	57                   	push   edi
c000a404:	56                   	push   esi
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	e8 38 57 01 00       	call   c001fb44 <__udivdi3>
c000a40c:	eb 62                	jmp    c000a470 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a40e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a415:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a41c:	89 cf                	mov    edi,ecx
c000a41e:	83 e2 7f             	and    edx,0x7f
c000a421:	83 e7 7f             	and    edi,0x7f
c000a424:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a42b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a42e:	83 e0 7f             	and    eax,0x7f
c000a431:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a434:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a43b:	83 e0 7f             	and    eax,0x7f
c000a43e:	01 d0                	add    eax,edx
c000a440:	89 c5                	mov    ebp,eax
c000a442:	84 c0                	test   al,al
c000a444:	74 41                	je     c000a487 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a446:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a44c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a452:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a458:	83 ec 10             	sub    esp,0x10
c000a45b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a45f:	89 f7                	mov    edi,esi
c000a461:	c1 e0 0a             	shl    eax,0xa
c000a464:	c1 ff 1f             	sar    edi,0x1f
c000a467:	57                   	push   edi
c000a468:	56                   	push   esi
c000a469:	52                   	push   edx
c000a46a:	50                   	push   eax
c000a46b:	e8 d4 56 01 00       	call   c001fb44 <__udivdi3>
c000a470:	83 c4 14             	add    esp,0x14
c000a473:	52                   	push   edx
c000a474:	50                   	push   eax
c000a475:	6a 00                	push   0x0
c000a477:	6a 00                	push   0x0
c000a479:	53                   	push   ebx
c000a47a:	e8 4b fe ff ff       	call   c000a2ca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a47f:	83 c4 20             	add    esp,0x20
c000a482:	e9 73 01 00 00       	jmp    c000a5fa <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a487:	89 f0                	mov    eax,esi
c000a489:	31 c9                	xor    ecx,ecx
c000a48b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a492:	75 02                	jne    c000a496 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a494:	89 cd                	mov    ebp,ecx
c000a496:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a49d:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000a4a4:	c1 e2 08             	shl    edx,0x8
c000a4a7:	c1 e6 10             	shl    esi,0x10
c000a4aa:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a4b2:	09 f2                	or     edx,esi
c000a4b4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4bc:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000a4c3:	83 c0 10             	add    eax,0x10
c000a4c6:	09 f2                	or     edx,esi
c000a4c8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4cf:	c1 e6 18             	shl    esi,0x18
c000a4d2:	09 f2                	or     edx,esi
c000a4d4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4db:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4df:	c1 e6 10             	shl    esi,0x10
c000a4e2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4e9:	c1 e2 08             	shl    edx,0x8
c000a4ec:	09 f2                	or     edx,esi
c000a4ee:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4f5:	09 f2                	or     edx,esi
c000a4f7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a4fe:	c1 e6 18             	shl    esi,0x18
c000a501:	09 f2                	or     edx,esi
c000a503:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a507:	41                   	inc    ecx
c000a508:	83 f9 04             	cmp    ecx,0x4
c000a50b:	0f 85 7a ff ff ff    	jne    c000a48b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a515:	83 f0 01             	xor    eax,0x1
c000a518:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a51c:	75 4f                	jne    c000a56d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a51e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a522:	83 f0 01             	xor    eax,0x1
c000a525:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a529:	75 42                	jne    c000a56d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a52b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a533:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a53b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a541:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a547:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a54d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a551:	89 f7                	mov    edi,esi
c000a553:	c1 e0 0a             	shl    eax,0xa
c000a556:	c1 ff 1f             	sar    edi,0x1f
c000a559:	57                   	push   edi
c000a55a:	56                   	push   esi
c000a55b:	52                   	push   edx
c000a55c:	50                   	push   eax
c000a55d:	e8 e2 55 01 00       	call   c001fb44 <__udivdi3>
c000a562:	83 c4 10             	add    esp,0x10
c000a565:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a569:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a56d:	89 e8                	mov    eax,ebp
c000a56f:	0f b6 e8             	movzx  ebp,al
c000a572:	85 ed                	test   ebp,ebp
c000a574:	74 50                	je     c000a5c6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a576:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a57a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a57e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a582:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a586:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a58a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a58e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a592:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a59e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a5a2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a5a6:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a5aa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5ae:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a5b6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5ba:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5be:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5c2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5c6:	31 ed                	xor    ebp,ebp
c000a5c8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5cc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5d0:	89 f8                	mov    eax,edi
c000a5d2:	09 f0                	or     eax,esi
c000a5d4:	74 1e                	je     c000a5f4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5d6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5da:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5de:	89 d1                	mov    ecx,edx
c000a5e0:	09 c1                	or     ecx,eax
c000a5e2:	74 10                	je     c000a5f4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5e4:	83 ec 0c             	sub    esp,0xc
c000a5e7:	57                   	push   edi
c000a5e8:	56                   	push   esi
c000a5e9:	52                   	push   edx
c000a5ea:	50                   	push   eax
c000a5eb:	53                   	push   ebx
c000a5ec:	e8 d9 fc ff ff       	call   c000a2ca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5f1:	83 c4 20             	add    esp,0x20
c000a5f4:	45                   	inc    ebp
c000a5f5:	83 fd 04             	cmp    ebp,0x4
c000a5f8:	75 ce                	jne    c000a5c8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5fa:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a600:	5b                   	pop    ebx
c000a601:	5e                   	pop    esi
c000a602:	5f                   	pop    edi
c000a603:	5d                   	pop    ebp
c000a604:	c3                   	ret    
c000a605:	66 90                	xchg   ax,ax
c000a607:	90                   	nop

c000a608 <Serial::Serial(char const*)>:
c000a608:	83 ec 0c             	sub    esp,0xc
c000a60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a60f:	83 ec 08             	sub    esp,0x8
c000a612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a616:	50                   	push   eax
c000a617:	e8 84 eb ff ff       	call   c00091a0 <Device::Device(char const*)>
c000a61c:	83 c4 10             	add    esp,0x10
c000a61f:	ba f4 18 02 c0       	mov    edx,0xc00218f4
c000a624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a628:	89 10                	mov    DWORD PTR [eax],edx
c000a62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a62e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a638:	90                   	nop
c000a639:	83 c4 0c             	add    esp,0xc
c000a63c:	c3                   	ret    
c000a63d:	90                   	nop
c000a63e:	66 90                	xchg   ax,ax

c000a640 <Serial::~Serial()>:
c000a640:	83 ec 0c             	sub    esp,0xc
c000a643:	ba f4 18 02 c0       	mov    edx,0xc00218f4
c000a648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a64c:	89 10                	mov    DWORD PTR [eax],edx
c000a64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a652:	83 ec 0c             	sub    esp,0xc
c000a655:	50                   	push   eax
c000a656:	e8 e5 e8 ff ff       	call   c0008f40 <Device::~Device()>
c000a65b:	83 c4 10             	add    esp,0x10
c000a65e:	90                   	nop
c000a65f:	83 c4 0c             	add    esp,0xc
c000a662:	c3                   	ret    
c000a663:	90                   	nop

c000a664 <Serial::~Serial()>:
c000a664:	83 ec 0c             	sub    esp,0xc
c000a667:	83 ec 0c             	sub    esp,0xc
c000a66a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a66e:	e8 cd ff ff ff       	call   c000a640 <Serial::~Serial()>
c000a673:	83 c4 10             	add    esp,0x10
c000a676:	83 ec 08             	sub    esp,0x8
c000a679:	68 58 01 00 00       	push   0x158
c000a67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a682:	e8 81 20 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000a687:	83 c4 10             	add    esp,0x10
c000a68a:	83 c4 0c             	add    esp,0xc
c000a68d:	c3                   	ret    
c000a68e:	66 90                	xchg   ax,ax

c000a690 <Timer::Timer(char const*)>:
c000a690:	83 ec 0c             	sub    esp,0xc
c000a693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a697:	83 ec 08             	sub    esp,0x8
c000a69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a69e:	50                   	push   eax
c000a69f:	e8 fc ea ff ff       	call   c00091a0 <Device::Device(char const*)>
c000a6a4:	83 c4 10             	add    esp,0x10
c000a6a7:	ba 8c 19 02 c0       	mov    edx,0xc002198c
c000a6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b0:	89 10                	mov    DWORD PTR [eax],edx
c000a6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6c0:	90                   	nop
c000a6c1:	83 c4 0c             	add    esp,0xc
c000a6c4:	c3                   	ret    
c000a6c5:	90                   	nop
c000a6c6:	66 90                	xchg   ax,ax

c000a6c8 <Timer::~Timer()>:
c000a6c8:	83 ec 0c             	sub    esp,0xc
c000a6cb:	ba 8c 19 02 c0       	mov    edx,0xc002198c
c000a6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6d4:	89 10                	mov    DWORD PTR [eax],edx
c000a6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6da:	83 ec 0c             	sub    esp,0xc
c000a6dd:	50                   	push   eax
c000a6de:	e8 5d e8 ff ff       	call   c0008f40 <Device::~Device()>
c000a6e3:	83 c4 10             	add    esp,0x10
c000a6e6:	90                   	nop
c000a6e7:	83 c4 0c             	add    esp,0xc
c000a6ea:	c3                   	ret    
c000a6eb:	90                   	nop

c000a6ec <Timer::~Timer()>:
c000a6ec:	83 ec 0c             	sub    esp,0xc
c000a6ef:	83 ec 0c             	sub    esp,0xc
c000a6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6f6:	e8 cd ff ff ff       	call   c000a6c8 <Timer::~Timer()>
c000a6fb:	83 c4 10             	add    esp,0x10
c000a6fe:	83 ec 08             	sub    esp,0x8
c000a701:	68 5c 01 00 00       	push   0x15c
c000a706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70a:	e8 f9 1f 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000a70f:	83 c4 10             	add    esp,0x10
c000a712:	83 c4 0c             	add    esp,0xc
c000a715:	c3                   	ret    

c000a716 <Timer::read()>:
c000a716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a71a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a720:	c3                   	ret    

c000a721 <setupTimer(int)>:
c000a721:	53                   	push   ebx
c000a722:	83 ec 14             	sub    esp,0x14
c000a725:	68 5c 01 00 00       	push   0x15c
c000a72a:	e8 62 42 00 00       	call   c000e991 <malloc>
c000a72f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a732:	89 c3                	mov    ebx,eax
c000a734:	e8 93 4c 01 00       	call   c001f3cc <PIT::PIT()>
c000a739:	58                   	pop    eax
c000a73a:	5a                   	pop    edx
c000a73b:	53                   	push   ebx
c000a73c:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000a742:	e8 f7 e8 ff ff       	call   c000903e <Device::addChild(Device*)>
c000a747:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a749:	6a 00                	push   0x0
c000a74b:	6a 00                	push   0x0
c000a74d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a751:	53                   	push   ebx
c000a752:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a755:	89 d8                	mov    eax,ebx
c000a757:	83 c4 28             	add    esp,0x28
c000a75a:	5b                   	pop    ebx
c000a75b:	c3                   	ret    

c000a75c <timerHandler(unsigned int)>:
c000a75c:	57                   	push   edi
c000a75d:	56                   	push   esi
c000a75e:	53                   	push   ebx
c000a75f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000a763:	01 3d ec 97 02 c0    	add    DWORD PTR ds:0xc00297ec,edi
c000a769:	80 3d 75 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d75,0x0
c000a770:	0f 84 46 01 00 00    	je     c000a8bc <timerHandler(unsigned int)+0x160>
c000a776:	fa                   	cli    
c000a777:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a77d:	83 ec 0c             	sub    esp,0xc
c000a780:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000a786:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a78b:	e8 4c 57 01 00       	call   c001fedc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a790:	83 c4 10             	add    esp,0x10
c000a793:	84 c0                	test   al,al
c000a795:	0f 85 a1 00 00 00    	jne    c000a83c <timerHandler(unsigned int)+0xe0>
c000a79b:	83 ec 0c             	sub    esp,0xc
c000a79e:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7a3:	e8 50 57 01 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7a8:	83 c4 10             	add    esp,0x10
c000a7ab:	89 c6                	mov    esi,eax
c000a7ad:	8d 76 00             	lea    esi,[esi+0x0]
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7b8:	e8 3b 57 01 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7bd:	c7 04 24 c0 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6c0
c000a7c4:	89 c3                	mov    ebx,eax
c000a7c6:	e8 35 57 01 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7cb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7ce:	83 c4 10             	add    esp,0x10
c000a7d1:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c000a7d7:	77 23                	ja     c000a7fc <timerHandler(unsigned int)+0xa0>
c000a7d9:	83 ec 0c             	sub    esp,0xc
c000a7dc:	53                   	push   ebx
c000a7dd:	e8 7e b0 00 00       	call   c0015860 <unblockTask(ThreadControlBlock*)>
c000a7e2:	83 c4 10             	add    esp,0x10
c000a7e5:	39 de                	cmp    esi,ebx
c000a7e7:	75 27                	jne    c000a810 <timerHandler(unsigned int)+0xb4>
c000a7e9:	83 ec 0c             	sub    esp,0xc
c000a7ec:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7f1:	e8 02 57 01 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7f6:	89 c6                	mov    esi,eax
c000a7f8:	eb 12                	jmp    c000a80c <timerHandler(unsigned int)+0xb0>
c000a7fa:	66 90                	xchg   ax,ax
c000a7fc:	50                   	push   eax
c000a7fd:	50                   	push   eax
c000a7fe:	53                   	push   ebx
c000a7ff:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a804:	e8 b3 57 01 00       	call   c001ffbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a809:	8d 76 00             	lea    esi,[esi+0x0]
c000a80c:	83 c4 10             	add    esp,0x10
c000a80f:	90                   	nop
c000a810:	83 ec 0c             	sub    esp,0xc
c000a813:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a818:	e8 bf 56 01 00       	call   c001fedc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	84 c0                	test   al,al
c000a822:	75 18                	jne    c000a83c <timerHandler(unsigned int)+0xe0>
c000a824:	83 ec 0c             	sub    esp,0xc
c000a827:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a82c:	e8 c7 56 01 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a831:	83 c4 10             	add    esp,0x10
c000a834:	39 f0                	cmp    eax,esi
c000a836:	0f 85 74 ff ff ff    	jne    c000a7b0 <timerHandler(unsigned int)+0x54>
c000a83c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a841:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000a845:	74 3d                	je     c000a884 <timerHandler(unsigned int)+0x128>
c000a847:	80 3d 74 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d74,0x0
c000a84e:	74 34                	je     c000a884 <timerHandler(unsigned int)+0x128>
c000a850:	fa                   	cli    
c000a851:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a857:	8b 15 ec 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297ec
c000a85d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a862:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c000a865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a86a:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c000a86d:	77 05                	ja     c000a874 <timerHandler(unsigned int)+0x118>
c000a86f:	e8 f4 ac 00 00       	call   c0015568 <schedule()>
c000a874:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000a879:	48                   	dec    eax
c000a87a:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000a87f:	75 03                	jne    c000a884 <timerHandler(unsigned int)+0x128>
c000a881:	fb                   	sti    
c000a882:	66 90                	xchg   ax,ax
c000a884:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000a889:	48                   	dec    eax
c000a88a:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000a88f:	75 1b                	jne    c000a8ac <timerHandler(unsigned int)+0x150>
c000a891:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000a898:	74 12                	je     c000a8ac <timerHandler(unsigned int)+0x150>
c000a89a:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000a8a4:	e8 bf ac 00 00       	call   c0015568 <schedule()>
c000a8a9:	8d 76 00             	lea    esi,[esi+0x0]
c000a8ac:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000a8b1:	48                   	dec    eax
c000a8b2:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000a8b7:	75 03                	jne    c000a8bc <timerHandler(unsigned int)+0x160>
c000a8b9:	fb                   	sti    
c000a8ba:	66 90                	xchg   ax,ax
c000a8bc:	5b                   	pop    ebx
c000a8bd:	5e                   	pop    esi
c000a8be:	5f                   	pop    edi
c000a8bf:	c3                   	ret    

c000a8c0 <VCache::VCache(PhysicalDisk*)>:
c000a8c0:	53                   	push   ebx
c000a8c1:	83 ec 18             	sub    esp,0x18
c000a8c4:	ba bc 19 02 c0       	mov    edx,0xc00219bc
c000a8c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8cd:	89 10                	mov    DWORD PTR [eax],edx
c000a8cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8de:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8f0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8fb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a902:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a909:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a90d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a918:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a91c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a920:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a927:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a92e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a932:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a93a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a93e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a942:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a94a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a951:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a959:	83 ec 0c             	sub    esp,0xc
c000a95c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a960:	e8 2c 40 00 00       	call   c000e991 <malloc>
c000a965:	83 c4 10             	add    esp,0x10
c000a968:	89 c3                	mov    ebx,eax
c000a96a:	83 ec 0c             	sub    esp,0xc
c000a96d:	53                   	push   ebx
c000a96e:	e8 59 43 00 00       	call   c000eccc <Mutex::Mutex()>
c000a973:	83 c4 10             	add    esp,0x10
c000a976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a97a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a981:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a985:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a98c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a993:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a997:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a99d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a9a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9a8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a9ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a9b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a9b8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a9bb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a9be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9c2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9d0:	05 00 02 00 00       	add    eax,0x200
c000a9d5:	c1 e0 03             	shl    eax,0x3
c000a9d8:	83 ec 0c             	sub    esp,0xc
c000a9db:	50                   	push   eax
c000a9dc:	e8 b0 3f 00 00       	call   c000e991 <malloc>
c000a9e1:	83 c4 10             	add    esp,0x10
c000a9e4:	89 c2                	mov    edx,eax
c000a9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9f1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a9f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9fc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000aa00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa04:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000aa0a:	89 d0                	mov    eax,edx
c000aa0c:	c1 e0 02             	shl    eax,0x2
c000aa0f:	01 d0                	add    eax,edx
c000aa11:	c1 e0 04             	shl    eax,0x4
c000aa14:	83 ec 0c             	sub    esp,0xc
c000aa17:	50                   	push   eax
c000aa18:	e8 74 3f 00 00       	call   c000e991 <malloc>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	89 c2                	mov    edx,eax
c000aa22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa26:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa29:	90                   	nop
c000aa2a:	83 c4 18             	add    esp,0x18
c000aa2d:	5b                   	pop    ebx
c000aa2e:	c3                   	ret    
c000aa2f:	90                   	nop

c000aa30 <VCache::invalidateReadBuffer()>:
c000aa30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa34:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa3a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa3e:	c3                   	ret    
c000aa3f:	90                   	nop

c000aa40 <VCache::writeWriteBuffer()>:
c000aa40:	53                   	push   ebx
c000aa41:	83 ec 08             	sub    esp,0x8
c000aa44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa48:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa4c:	74 1e                	je     c000aa6c <VCache::writeWriteBuffer()+0x2c>
c000aa4e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa51:	83 ec 0c             	sub    esp,0xc
c000aa54:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa56:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa59:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa5c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa5f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa62:	50                   	push   eax
c000aa63:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa66:	83 c4 20             	add    esp,0x20
c000aa69:	8d 76 00             	lea    esi,[esi+0x0]
c000aa6c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa73:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa7a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa7e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa85:	83 c4 08             	add    esp,0x8
c000aa88:	5b                   	pop    ebx
c000aa89:	c3                   	ret    
c000aa8a:	66 90                	xchg   ax,ax

c000aa8c <VCache::~VCache()>:
c000aa8c:	83 ec 0c             	sub    esp,0xc
c000aa8f:	ba bc 19 02 c0       	mov    edx,0xc00219bc
c000aa94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa98:	89 10                	mov    DWORD PTR [eax],edx
c000aa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aaa1:	0f b6 c0             	movzx  eax,al
c000aaa4:	85 c0                	test   eax,eax
c000aaa6:	74 10                	je     c000aab8 <VCache::~VCache()+0x2c>
c000aaa8:	83 ec 0c             	sub    esp,0xc
c000aaab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaaf:	e8 8c ff ff ff       	call   c000aa40 <VCache::writeWriteBuffer()>
c000aab4:	83 c4 10             	add    esp,0x10
c000aab7:	90                   	nop
c000aab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aabc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aabf:	83 ec 0c             	sub    esp,0xc
c000aac2:	50                   	push   eax
c000aac3:	e8 d9 3e 00 00       	call   c000e9a1 <free>
c000aac8:	83 c4 10             	add    esp,0x10
c000aacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aad2:	83 ec 0c             	sub    esp,0xc
c000aad5:	50                   	push   eax
c000aad6:	e8 c6 3e 00 00       	call   c000e9a1 <free>
c000aadb:	83 c4 10             	add    esp,0x10
c000aade:	90                   	nop
c000aadf:	83 c4 0c             	add    esp,0xc
c000aae2:	c3                   	ret    
c000aae3:	90                   	nop

c000aae4 <VCache::~VCache()>:
c000aae4:	83 ec 0c             	sub    esp,0xc
c000aae7:	83 ec 0c             	sub    esp,0xc
c000aaea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaee:	e8 99 ff ff ff       	call   c000aa8c <VCache::~VCache()>
c000aaf3:	83 c4 10             	add    esp,0x10
c000aaf6:	83 ec 08             	sub    esp,0x8
c000aaf9:	6a 44                	push   0x44
c000aafb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaff:	e8 04 1c 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000ab04:	83 c4 10             	add    esp,0x10
c000ab07:	83 c4 0c             	add    esp,0xc
c000ab0a:	c3                   	ret    
c000ab0b:	90                   	nop

c000ab0c <VCache::write(unsigned long long, int, void*)>:
c000ab0c:	55                   	push   ebp
c000ab0d:	57                   	push   edi
c000ab0e:	56                   	push   esi
c000ab0f:	53                   	push   ebx
c000ab10:	83 ec 1c             	sub    esp,0x1c
c000ab13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ab17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ab1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab1f:	e8 ac a7 00 00       	call   c00152d0 <KeDisablePreemption()>
c000ab24:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ab28:	74 0e                	je     c000ab38 <VCache::write(unsigned long long, int, void*)+0x2c>
c000ab2a:	83 ec 0c             	sub    esp,0xc
c000ab2d:	53                   	push   ebx
c000ab2e:	e8 fd fe ff ff       	call   c000aa30 <VCache::invalidateReadBuffer()>
c000ab33:	83 c4 10             	add    esp,0x10
c000ab36:	66 90                	xchg   ax,ax
c000ab38:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ab3c:	74 5e                	je     c000ab9c <VCache::write(unsigned long long, int, void*)+0x90>
c000ab3e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000ab41:	89 e8                	mov    eax,ebp
c000ab43:	99                   	cdq    
c000ab44:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ab47:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000ab4a:	89 c1                	mov    ecx,eax
c000ab4c:	89 d0                	mov    eax,edx
c000ab4e:	31 f1                	xor    ecx,esi
c000ab50:	31 f8                	xor    eax,edi
c000ab52:	09 c1                	or     ecx,eax
c000ab54:	75 3a                	jne    c000ab90 <VCache::write(unsigned long long, int, void*)+0x84>
c000ab56:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c000ab5b:	75 33                	jne    c000ab90 <VCache::write(unsigned long long, int, void*)+0x84>
c000ab5d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab60:	89 ef                	mov    edi,ebp
c000ab62:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab68:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ab6c:	0f af f9             	imul   edi,ecx
c000ab6f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ab72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab74:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab77:	40                   	inc    eax
c000ab78:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000ab7b:	83 f8 50             	cmp    eax,0x50
c000ab7e:	75 70                	jne    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	53                   	push   ebx
c000ab84:	e8 b7 fe ff ff       	call   c000aa40 <VCache::writeWriteBuffer()>
c000ab89:	83 c4 10             	add    esp,0x10
c000ab8c:	eb 62                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000ab8e:	66 90                	xchg   ax,ax
c000ab90:	83 ec 0c             	sub    esp,0xc
c000ab93:	53                   	push   ebx
c000ab94:	e8 a7 fe ff ff       	call   c000aa40 <VCache::writeWriteBuffer()>
c000ab99:	83 c4 10             	add    esp,0x10
c000ab9c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab9f:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c000aba4:	7f 22                	jg     c000abc8 <VCache::write(unsigned long long, int, void*)+0xbc>
c000aba6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000aba9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000abac:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000abb0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000abb4:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000abb7:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000abba:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000abc0:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abc4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abc6:	eb 28                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000abc8:	83 ec 0c             	sub    esp,0xc
c000abcb:	8b 10                	mov    edx,DWORD PTR [eax]
c000abcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abd5:	57                   	push   edi
c000abd6:	56                   	push   esi
c000abd7:	50                   	push   eax
c000abd8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000abdb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000abdf:	83 c4 20             	add    esp,0x20
c000abe2:	e8 11 a7 00 00       	call   c00152f8 <KeRestorePreemption()>
c000abe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000abeb:	eb 0b                	jmp    c000abf8 <VCache::write(unsigned long long, int, void*)+0xec>
c000abed:	8d 76 00             	lea    esi,[esi+0x0]
c000abf0:	e8 03 a7 00 00       	call   c00152f8 <KeRestorePreemption()>
c000abf5:	31 c0                	xor    eax,eax
c000abf7:	90                   	nop
c000abf8:	83 c4 1c             	add    esp,0x1c
c000abfb:	5b                   	pop    ebx
c000abfc:	5e                   	pop    esi
c000abfd:	5f                   	pop    edi
c000abfe:	5d                   	pop    ebp
c000abff:	c3                   	ret    

c000ac00 <VCache::read(unsigned long long, int, void*)>:
c000ac00:	55                   	push   ebp
c000ac01:	57                   	push   edi
c000ac02:	56                   	push   esi
c000ac03:	53                   	push   ebx
c000ac04:	83 ec 1c             	sub    esp,0x1c
c000ac07:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac0b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ac0f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ac13:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ac17:	e8 b4 a6 00 00       	call   c00152d0 <KeDisablePreemption()>
c000ac1c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac20:	74 0e                	je     c000ac30 <VCache::read(unsigned long long, int, void*)+0x30>
c000ac22:	83 ec 0c             	sub    esp,0xc
c000ac25:	53                   	push   ebx
c000ac26:	e8 15 fe ff ff       	call   c000aa40 <VCache::writeWriteBuffer()>
c000ac2b:	83 c4 10             	add    esp,0x10
c000ac2e:	66 90                	xchg   ax,ax
c000ac30:	83 fd 01             	cmp    ebp,0x1
c000ac33:	0f 85 97 00 00 00    	jne    c000acd0 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac39:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac40:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ac47:	0f 85 83 00 00 00    	jne    c000acd0 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac4d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ac50:	89 e9                	mov    ecx,ebp
c000ac52:	f7 d9                	neg    ecx
c000ac54:	89 c8                	mov    eax,ecx
c000ac56:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac5a:	c1 f8 1f             	sar    eax,0x1f
c000ac5d:	21 f1                	and    ecx,esi
c000ac5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ac63:	89 c8                	mov    eax,ecx
c000ac65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ac69:	21 f9                	and    ecx,edi
c000ac6b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ac6f:	89 ca                	mov    edx,ecx
c000ac71:	74 31                	je     c000aca4 <VCache::read(unsigned long long, int, void*)+0xa4>
c000ac73:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ac76:	75 2c                	jne    c000aca4 <VCache::read(unsigned long long, int, void*)+0xa4>
c000ac78:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000ac7b:	75 27                	jne    c000aca4 <VCache::read(unsigned long long, int, void*)+0xa4>
c000ac7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ac80:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac83:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ac87:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac8d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ac90:	48                   	dec    eax
c000ac91:	21 c6                	and    esi,eax
c000ac93:	0f af f1             	imul   esi,ecx
c000ac96:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ac99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac9b:	e8 58 a6 00 00       	call   c00152f8 <KeRestorePreemption()>
c000aca0:	31 c0                	xor    eax,eax
c000aca2:	eb 58                	jmp    c000acfc <VCache::read(unsigned long long, int, void*)+0xfc>
c000aca4:	83 ec 0c             	sub    esp,0xc
c000aca7:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000acab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acaf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000acb2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000acb5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000acb7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000acba:	55                   	push   ebp
c000acbb:	52                   	push   edx
c000acbc:	50                   	push   eax
c000acbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000acc1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000acc4:	83 c4 20             	add    esp,0x20
c000acc7:	85 c0                	test   eax,eax
c000acc9:	75 31                	jne    c000acfc <VCache::read(unsigned long long, int, void*)+0xfc>
c000accb:	eb b3                	jmp    c000ac80 <VCache::read(unsigned long long, int, void*)+0x80>
c000accd:	8d 76 00             	lea    esi,[esi+0x0]
c000acd0:	83 ec 0c             	sub    esp,0xc
c000acd3:	53                   	push   ebx
c000acd4:	e8 57 fd ff ff       	call   c000aa30 <VCache::invalidateReadBuffer()>
c000acd9:	5a                   	pop    edx
c000acda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000acdd:	8b 10                	mov    edx,DWORD PTR [eax]
c000acdf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ace3:	55                   	push   ebp
c000ace4:	57                   	push   edi
c000ace5:	56                   	push   esi
c000ace6:	50                   	push   eax
c000ace7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000acea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000acee:	83 c4 20             	add    esp,0x20
c000acf1:	e8 02 a6 00 00       	call   c00152f8 <KeRestorePreemption()>
c000acf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acfa:	66 90                	xchg   ax,ax
c000acfc:	83 c4 1c             	add    esp,0x1c
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	5f                   	pop    edi
c000ad02:	5d                   	pop    ebp
c000ad03:	c3                   	ret    

c000ad04 <Video::putrect(int, int, int, int, unsigned int)>:
c000ad04:	55                   	push   ebp
c000ad05:	57                   	push   edi
c000ad06:	56                   	push   esi
c000ad07:	53                   	push   ebx
c000ad08:	83 ec 1c             	sub    esp,0x1c
c000ad0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ad0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad13:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ad17:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ad1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad23:	01 df                	add    edi,ebx
c000ad25:	39 fb                	cmp    ebx,edi
c000ad27:	7d 1f                	jge    c000ad48 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ad29:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ad2d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ad31:	7d 12                	jge    c000ad45 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ad33:	8b 16                	mov    edx,DWORD PTR [esi]
c000ad35:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad39:	53                   	push   ebx
c000ad3a:	55                   	push   ebp
c000ad3b:	45                   	inc    ebp
c000ad3c:	56                   	push   esi
c000ad3d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ad40:	83 c4 10             	add    esp,0x10
c000ad43:	eb e8                	jmp    c000ad2d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad45:	43                   	inc    ebx
c000ad46:	eb dd                	jmp    c000ad25 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad48:	83 c4 1c             	add    esp,0x1c
c000ad4b:	5b                   	pop    ebx
c000ad4c:	5e                   	pop    esi
c000ad4d:	5f                   	pop    edi
c000ad4e:	5d                   	pop    ebp
c000ad4f:	c3                   	ret    

c000ad50 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	31 ff                	xor    edi,edi
c000ad54:	56                   	push   esi
c000ad55:	53                   	push   ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ad5d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad61:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ad68:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ad6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad71:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ad75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ad79:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ad7c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ad80:	01 f9                	add    ecx,edi
c000ad82:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ad86:	7d 2f                	jge    c000adb7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ad88:	31 f6                	xor    esi,esi
c000ad8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ad8e:	01 f2                	add    edx,esi
c000ad90:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ad94:	7d 1a                	jge    c000adb0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ad96:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ad99:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ad9c:	46                   	inc    esi
c000ad9d:	51                   	push   ecx
c000ad9e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ada2:	52                   	push   edx
c000ada3:	55                   	push   ebp
c000ada4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000adae:	eb da                	jmp    c000ad8a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000adb0:	47                   	inc    edi
c000adb1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000adb5:	eb c5                	jmp    c000ad7c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000adb7:	83 c4 1c             	add    esp,0x1c
c000adba:	5b                   	pop    ebx
c000adbb:	5e                   	pop    esi
c000adbc:	5f                   	pop    edi
c000adbd:	5d                   	pop    ebp
c000adbe:	c3                   	ret    
c000adbf:	90                   	nop

c000adc0 <Video::blit(unsigned int*, int, int, int, int)>:
c000adc0:	55                   	push   ebp
c000adc1:	57                   	push   edi
c000adc2:	56                   	push   esi
c000adc3:	53                   	push   ebx
c000adc4:	83 ec 1c             	sub    esp,0x1c
c000adc7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000adcb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000adcf:	85 c0                	test   eax,eax
c000add1:	79 02                	jns    c000add5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000add3:	31 c0                	xor    eax,eax
c000add5:	c1 e0 02             	shl    eax,0x2
c000add8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000addc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ade0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ade4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ade8:	39 d8                	cmp    eax,ebx
c000adea:	7e 49                	jle    c000ae35 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000adec:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000adf2:	7c 41                	jl     c000ae35 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000adf4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000adf8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000adfc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ae00:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000ae04:	39 f9                	cmp    ecx,edi
c000ae06:	7e 22                	jle    c000ae2a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000ae08:	83 c5 04             	add    ebp,0x4
c000ae0b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae11:	7c 14                	jl     c000ae27 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000ae13:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae15:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000ae18:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae1c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae20:	56                   	push   esi
c000ae21:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ae24:	83 c4 10             	add    esp,0x10
c000ae27:	47                   	inc    edi
c000ae28:	eb d2                	jmp    c000adfc <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000ae2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae2e:	43                   	inc    ebx
c000ae2f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ae33:	eb ab                	jmp    c000ade0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000ae35:	83 c4 1c             	add    esp,0x1c
c000ae38:	5b                   	pop    ebx
c000ae39:	5e                   	pop    esi
c000ae3a:	5f                   	pop    edi
c000ae3b:	5d                   	pop    ebp
c000ae3c:	c3                   	ret    
c000ae3d:	90                   	nop

c000ae3e <Video::clearScreen(unsigned int)>:
c000ae3e:	57                   	push   edi
c000ae3f:	56                   	push   esi
c000ae40:	53                   	push   ebx
c000ae41:	31 db                	xor    ebx,ebx
c000ae43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae47:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae4d:	7e 1f                	jle    c000ae6e <Video::clearScreen(unsigned int)+0x30>
c000ae4f:	31 ff                	xor    edi,edi
c000ae51:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae57:	7e 12                	jle    c000ae6b <Video::clearScreen(unsigned int)+0x2d>
c000ae59:	8b 06                	mov    eax,DWORD PTR [esi]
c000ae5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5f:	53                   	push   ebx
c000ae60:	57                   	push   edi
c000ae61:	47                   	inc    edi
c000ae62:	56                   	push   esi
c000ae63:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae66:	83 c4 10             	add    esp,0x10
c000ae69:	eb e6                	jmp    c000ae51 <Video::clearScreen(unsigned int)+0x13>
c000ae6b:	43                   	inc    ebx
c000ae6c:	eb d9                	jmp    c000ae47 <Video::clearScreen(unsigned int)+0x9>
c000ae6e:	5b                   	pop    ebx
c000ae6f:	5e                   	pop    esi
c000ae70:	5f                   	pop    edi
c000ae71:	c3                   	ret    

c000ae72 <Video::putpixel(int, int, unsigned int)>:
c000ae72:	c7 44 24 04 c4 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc00219c4
c000ae7a:	e9 67 3e 00 00       	jmp    c000ece6 <KePanic(char const*)>
c000ae7f:	90                   	nop

c000ae80 <Video::readPixelApprox(int, int)>:
c000ae80:	83 ec 18             	sub    esp,0x18
c000ae83:	68 e5 19 02 c0       	push   0xc00219e5
c000ae88:	e8 59 3e 00 00       	call   c000ece6 <KePanic(char const*)>
c000ae8d:	31 c0                	xor    eax,eax
c000ae8f:	83 c4 1c             	add    esp,0x1c
c000ae92:	c3                   	ret    
c000ae93:	90                   	nop

c000ae94 <Video::Video(char const*)>:
c000ae94:	83 ec 0c             	sub    esp,0xc
c000ae97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9b:	83 ec 08             	sub    esp,0x8
c000ae9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aea2:	50                   	push   eax
c000aea3:	e8 f8 e2 ff ff       	call   c00091a0 <Device::Device(char const*)>
c000aea8:	83 c4 10             	add    esp,0x10
c000aeab:	ba 88 1a 02 c0       	mov    edx,0xc0021a88
c000aeb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb4:	89 10                	mov    DWORD PTR [eax],edx
c000aeb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeba:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000aec4:	90                   	nop
c000aec5:	83 c4 0c             	add    esp,0xc
c000aec8:	c3                   	ret    
c000aec9:	90                   	nop

c000aeca <Video::~Video()>:
c000aeca:	83 ec 0c             	sub    esp,0xc
c000aecd:	ba 88 1a 02 c0       	mov    edx,0xc0021a88
c000aed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed6:	89 10                	mov    DWORD PTR [eax],edx
c000aed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	50                   	push   eax
c000aee0:	e8 5b e0 ff ff       	call   c0008f40 <Device::~Device()>
c000aee5:	83 c4 10             	add    esp,0x10
c000aee8:	90                   	nop
c000aee9:	83 c4 0c             	add    esp,0xc
c000aeec:	c3                   	ret    
c000aeed:	90                   	nop

c000aeee <Video::~Video()>:
c000aeee:	83 ec 0c             	sub    esp,0xc
c000aef1:	83 ec 0c             	sub    esp,0xc
c000aef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aef8:	e8 cd ff ff ff       	call   c000aeca <Video::~Video()>
c000aefd:	83 c4 10             	add    esp,0x10
c000af00:	83 ec 08             	sub    esp,0x8
c000af03:	68 64 01 00 00       	push   0x164
c000af08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af0c:	e8 f7 17 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	83 c4 0c             	add    esp,0xc
c000af17:	c3                   	ret    

c000af18 <Video::isMonochrome()>:
c000af18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af1c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000af22:	c3                   	ret    
c000af23:	90                   	nop

c000af24 <Video::getWidth()>:
c000af24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af28:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af2e:	c3                   	ret    
c000af2f:	90                   	nop

c000af30 <Video::getHeight()>:
c000af30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af34:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000af3a:	c3                   	ret    
c000af3b:	90                   	nop

c000af3c <Video::drawCursor(int, int, unsigned int*, int)>:
c000af3c:	55                   	push   ebp
c000af3d:	57                   	push   edi
c000af3e:	56                   	push   esi
c000af3f:	53                   	push   ebx
c000af40:	83 ec 2c             	sub    esp,0x2c
c000af43:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af47:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000af4b:	83 f8 01             	cmp    eax,0x1
c000af4e:	19 c9                	sbb    ecx,ecx
c000af50:	31 db                	xor    ebx,ebx
c000af52:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000af56:	89 cd                	mov    ebp,ecx
c000af58:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000af60:	f7 d5                	not    ebp
c000af62:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000af68:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000af6c:	01 d8                	add    eax,ebx
c000af6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af72:	56                   	push   esi
c000af73:	e8 b8 ff ff ff       	call   c000af30 <Video::getHeight()>
c000af78:	59                   	pop    ecx
c000af79:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af7d:	7e 70                	jle    c000afef <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000af7f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af83:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000af87:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000af8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000af8e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af92:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000af99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af9d:	89 f8                	mov    eax,edi
c000af9f:	83 c0 20             	add    eax,0x20
c000afa2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000afa6:	56                   	push   esi
c000afa7:	e8 78 ff ff ff       	call   c000af24 <Video::getWidth()>
c000afac:	5a                   	pop    edx
c000afad:	39 c7                	cmp    edi,eax
c000afaf:	7d 34                	jge    c000afe5 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000afb1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000afb6:	74 05                	je     c000afbd <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000afb8:	8b 06                	mov    eax,DWORD PTR [esi]
c000afba:	55                   	push   ebp
c000afbb:	eb 0d                	jmp    c000afca <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000afbd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000afc2:	74 12                	je     c000afd6 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000afc4:	8b 06                	mov    eax,DWORD PTR [esi]
c000afc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afce:	57                   	push   edi
c000afcf:	56                   	push   esi
c000afd0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000afd3:	83 c4 10             	add    esp,0x10
c000afd6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000afda:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000afde:	47                   	inc    edi
c000afdf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000afe3:	75 c1                	jne    c000afa6 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000afe5:	43                   	inc    ebx
c000afe6:	83 fb 20             	cmp    ebx,0x20
c000afe9:	0f 85 79 ff ff ff    	jne    c000af68 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000afef:	83 c4 2c             	add    esp,0x2c
c000aff2:	5b                   	pop    ebx
c000aff3:	5e                   	pop    esi
c000aff4:	5f                   	pop    edi
c000aff5:	5d                   	pop    ebp
c000aff6:	c3                   	ret    
c000aff7:	90                   	nop

c000aff8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000aff8:	55                   	push   ebp
c000aff9:	57                   	push   edi
c000affa:	56                   	push   esi
c000affb:	53                   	push   ebx
c000affc:	83 ec 48             	sub    esp,0x48
c000afff:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b003:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b007:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b00b:	c1 e0 08             	shl    eax,0x8
c000b00e:	01 d0                	add    eax,edx
c000b010:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b014:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b018:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b01c:	c1 e0 08             	shl    eax,0x8
c000b01f:	01 d0                	add    eax,edx
c000b021:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b025:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b029:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000b02e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b032:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b036:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b03d:	50                   	push   eax
c000b03e:	e8 4e 39 00 00       	call   c000e991 <malloc>
c000b043:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b047:	83 c4 10             	add    esp,0x10
c000b04a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b04f:	75 10                	jne    c000b061 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000b051:	83 ec 0c             	sub    esp,0xc
c000b054:	68 10 1a 02 c0       	push   0xc0021a10
c000b059:	e8 88 3c 00 00       	call   c000ece6 <KePanic(char const*)>
c000b05e:	83 c4 10             	add    esp,0x10
c000b061:	51                   	push   ecx
c000b062:	51                   	push   ecx
c000b063:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b067:	50                   	push   eax
c000b068:	68 20 1a 02 c0       	push   0xc0021a20
c000b06d:	e8 f2 be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b072:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b075:	83 e0 20             	and    eax,0x20
c000b078:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000b07c:	85 c0                	test   eax,eax
c000b07e:	5e                   	pop    esi
c000b07f:	0f 94 c0             	sete   al
c000b082:	5f                   	pop    edi
c000b083:	0f b6 c0             	movzx  eax,al
c000b086:	be 12 00 00 00       	mov    esi,0x12
c000b08b:	50                   	push   eax
c000b08c:	68 2a 1a 02 c0       	push   0xc0021a2a
c000b091:	e8 ce be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b096:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000b09a:	83 c4 10             	add    esp,0x10
c000b09d:	89 d0                	mov    eax,edx
c000b09f:	85 d2                	test   edx,edx
c000b0a1:	74 11                	je     c000b0b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000b0a3:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000b0a7:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b0ab:	c1 fe 03             	sar    esi,0x3
c000b0ae:	0f af f1             	imul   esi,ecx
c000b0b1:	83 c6 12             	add    esi,0x12
c000b0b4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b0b9:	74 07                	je     c000b0c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000b0bb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b0c0:	75 12                	jne    c000b0d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000b0c2:	83 ec 0c             	sub    esp,0xc
c000b0c5:	68 38 1a 02 c0       	push   0xc0021a38
c000b0ca:	e8 95 be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b0cf:	e9 a0 02 00 00       	jmp    c000b374 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000b0d4:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b0d8:	83 f9 02             	cmp    ecx,0x2
c000b0db:	74 0e                	je     c000b0eb <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000b0dd:	83 f9 0a             	cmp    ecx,0xa
c000b0e0:	0f 84 c8 00 00 00    	je     c000b1ae <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000b0e6:	e9 72 02 00 00       	jmp    c000b35d <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000b0eb:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b0f0:	75 0e                	jne    c000b100 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b0f2:	84 c0                	test   al,al
c000b0f4:	75 0a                	jne    c000b100 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b0f6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b0f9:	83 e8 18             	sub    eax,0x18
c000b0fc:	a8 f7                	test   al,0xf7
c000b0fe:	74 0d                	je     c000b10d <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000b100:	83 ec 0c             	sub    esp,0xc
c000b103:	68 4d 1a 02 c0       	push   0xc0021a4d
c000b108:	e9 58 02 00 00       	jmp    c000b365 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b10d:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000b112:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b11a:	31 c0                	xor    eax,eax
c000b11c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b120:	89 c7                	mov    edi,eax
c000b122:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b12a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b12f:	75 15                	jne    c000b146 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b131:	99                   	cdq    
c000b132:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b136:	85 d2                	test   edx,edx
c000b138:	75 0c                	jne    c000b146 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b13a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000b13e:	29 c7                	sub    edi,eax
c000b140:	4f                   	dec    edi
c000b141:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000b146:	31 d2                	xor    edx,edx
c000b148:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b14c:	75 08                	jne    c000b156 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000b14e:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000b153:	c1 e2 18             	shl    edx,0x18
c000b156:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000b15b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b15f:	c1 e1 10             	shl    ecx,0x10
c000b162:	8d 47 01             	lea    eax,[edi+0x1]
c000b165:	89 cd                	mov    ebp,ecx
c000b167:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000b16c:	c1 e1 08             	shl    ecx,0x8
c000b16f:	09 e9                	or     ecx,ebp
c000b171:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b175:	09 e9                	or     ecx,ebp
c000b177:	09 d1                	or     ecx,edx
c000b179:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b17d:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000b180:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b184:	c1 fa 03             	sar    edx,0x3
c000b187:	01 d6                	add    esi,edx
c000b189:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b18d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b191:	7e 04                	jle    c000b197 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000b193:	89 c7                	mov    edi,eax
c000b195:	eb 93                	jmp    c000b12a <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000b197:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b19b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b19f:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000b1a3:	0f 8f 77 ff ff ff    	jg     c000b120 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000b1a9:	e9 d3 01 00 00       	jmp    c000b381 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1ae:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b1b3:	75 0e                	jne    c000b1c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b1b5:	85 d2                	test   edx,edx
c000b1b7:	75 0a                	jne    c000b1c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b1b9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b1bc:	83 e8 18             	sub    eax,0x18
c000b1bf:	a8 f7                	test   al,0xf7
c000b1c1:	74 0d                	je     c000b1d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000b1c3:	83 ec 0c             	sub    esp,0xc
c000b1c6:	68 5b 1a 02 c0       	push   0xc0021a5b
c000b1cb:	e9 95 01 00 00       	jmp    c000b365 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b1d0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b1d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b1e0:	31 c9                	xor    ecx,ecx
c000b1e2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b1e6:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000b1ea:	0f 8e 91 01 00 00    	jle    c000b381 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1f0:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000b1f4:	0f 8d 87 01 00 00    	jge    c000b381 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1fa:	8d 46 01             	lea    eax,[esi+0x1]
c000b1fd:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b201:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b205:	83 fd 7f             	cmp    ebp,0x7f
c000b208:	89 e8                	mov    eax,ebp
c000b20a:	0f 8e 9d 00 00 00    	jle    c000b2ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000b210:	83 e0 7f             	and    eax,0x7f
c000b213:	31 d2                	xor    edx,edx
c000b215:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b219:	40                   	inc    eax
c000b21a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b21e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b222:	75 0a                	jne    c000b22e <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000b224:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000b229:	89 ea                	mov    edx,ebp
c000b22b:	c1 e2 18             	shl    edx,0x18
c000b22e:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000b233:	c1 e0 10             	shl    eax,0x10
c000b236:	89 c7                	mov    edi,eax
c000b238:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b23d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b241:	c1 e0 08             	shl    eax,0x8
c000b244:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b248:	09 f8                	or     eax,edi
c000b24a:	31 f6                	xor    esi,esi
c000b24c:	09 c5                	or     ebp,eax
c000b24e:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000b253:	09 d5                	or     ebp,edx
c000b255:	85 ff                	test   edi,edi
c000b257:	75 1d                	jne    c000b276 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b259:	89 c8                	mov    eax,ecx
c000b25b:	99                   	cdq    
c000b25c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b260:	85 d2                	test   edx,edx
c000b262:	75 12                	jne    c000b276 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b264:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b268:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b26c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b270:	49                   	dec    ecx
c000b271:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b27a:	8d 51 01             	lea    edx,[ecx+0x1]
c000b27d:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000b280:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000b284:	8d 46 01             	lea    eax,[esi+0x1]
c000b287:	7e 06                	jle    c000b28f <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000b289:	89 c6                	mov    esi,eax
c000b28b:	89 d1                	mov    ecx,edx
c000b28d:	eb c6                	jmp    c000b255 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000b28f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b293:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b297:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b29b:	c1 f8 03             	sar    eax,0x3
c000b29e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b2a2:	89 d1                	mov    ecx,edx
c000b2a4:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b2a8:	e9 35 ff ff ff       	jmp    c000b1e2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000b2ad:	8d 45 01             	lea    eax,[ebp+0x1]
c000b2b0:	31 f6                	xor    esi,esi
c000b2b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000b2bb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b2bf:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b2c4:	75 1d                	jne    c000b2e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b2c6:	89 c8                	mov    eax,ecx
c000b2c8:	99                   	cdq    
c000b2c9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b2cd:	85 d2                	test   edx,edx
c000b2cf:	75 12                	jne    c000b2e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b2d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2d5:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b2d9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b2dd:	49                   	dec    ecx
c000b2de:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b2e3:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b2eb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b2ef:	75 10                	jne    c000b301 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000b2f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2f5:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000b2fa:	c1 e7 18             	shl    edi,0x18
c000b2fd:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b305:	8d 51 01             	lea    edx,[ecx+0x1]
c000b308:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000b30d:	c1 e0 10             	shl    eax,0x10
c000b310:	89 c7                	mov    edi,eax
c000b312:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b316:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000b31b:	c1 e0 08             	shl    eax,0x8
c000b31e:	09 f8                	or     eax,edi
c000b320:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b324:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000b328:	09 f8                	or     eax,edi
c000b32a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000b32e:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b332:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000b335:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b339:	c1 f8 03             	sar    eax,0x3
c000b33c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b340:	8d 46 01             	lea    eax,[esi+0x1]
c000b343:	39 f5                	cmp    ebp,esi
c000b345:	7e 09                	jle    c000b350 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000b347:	89 c6                	mov    esi,eax
c000b349:	89 d1                	mov    ecx,edx
c000b34b:	e9 6f ff ff ff       	jmp    c000b2bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000b350:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b354:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b358:	e9 45 ff ff ff       	jmp    c000b2a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000b35d:	52                   	push   edx
c000b35e:	52                   	push   edx
c000b35f:	51                   	push   ecx
c000b360:	68 6a 1a 02 c0       	push   0xc0021a6a
c000b365:	e8 fa bb ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b36a:	58                   	pop    eax
c000b36b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b36f:	e8 2d 36 00 00       	call   c000e9a1 <free>
c000b374:	83 c4 10             	add    esp,0x10
c000b377:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b37f:	eb 14                	jmp    c000b395 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000b381:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b385:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b389:	89 18                	mov    DWORD PTR [eax],ebx
c000b38b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b38f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b393:	89 18                	mov    DWORD PTR [eax],ebx
c000b395:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b399:	83 c4 3c             	add    esp,0x3c
c000b39c:	5b                   	pop    ebx
c000b39d:	5e                   	pop    esi
c000b39e:	5f                   	pop    edi
c000b39f:	5d                   	pop    ebp
c000b3a0:	c3                   	ret    
c000b3a1:	90                   	nop

c000b3a2 <Video::putTGA(int, int, unsigned char*, int)>:
c000b3a2:	55                   	push   ebp
c000b3a3:	57                   	push   edi
c000b3a4:	56                   	push   esi
c000b3a5:	53                   	push   ebx
c000b3a6:	83 ec 28             	sub    esp,0x28
c000b3a9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b3ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3b1:	50                   	push   eax
c000b3b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3b6:	50                   	push   eax
c000b3b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3bf:	57                   	push   edi
c000b3c0:	e8 33 fc ff ff       	call   c000aff8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b3c5:	83 c4 20             	add    esp,0x20
c000b3c8:	85 c0                	test   eax,eax
c000b3ca:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b3ce:	74 3a                	je     c000b40a <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b3d0:	89 c6                	mov    esi,eax
c000b3d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b3d6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b3da:	39 d8                	cmp    eax,ebx
c000b3dc:	7e 2c                	jle    c000b40a <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b3de:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b3e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b3ea:	39 e8                	cmp    eax,ebp
c000b3ec:	7e 19                	jle    c000b407 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000b3ee:	83 c6 04             	add    esi,0x4
c000b3f1:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b3f4:	85 c0                	test   eax,eax
c000b3f6:	79 0c                	jns    c000b404 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000b3f8:	8b 17                	mov    edx,DWORD PTR [edi]
c000b3fa:	50                   	push   eax
c000b3fb:	53                   	push   ebx
c000b3fc:	55                   	push   ebp
c000b3fd:	57                   	push   edi
c000b3fe:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b401:	83 c4 10             	add    esp,0x10
c000b404:	45                   	inc    ebp
c000b405:	eb db                	jmp    c000b3e2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b407:	43                   	inc    ebx
c000b408:	eb c8                	jmp    c000b3d2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b40a:	83 c4 1c             	add    esp,0x1c
c000b40d:	5b                   	pop    ebx
c000b40e:	5e                   	pop    esi
c000b40f:	5f                   	pop    edi
c000b410:	5d                   	pop    ebp
c000b411:	c3                   	ret    
c000b412:	66 90                	xchg   ax,ax

c000b414 <ACPI::close(int, int, void*)>:
c000b414:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b419:	c3                   	ret    
c000b41a:	66 90                	xchg   ax,ax

c000b41c <loadACPITables(unsigned char*)>:
c000b41c:	57                   	push   edi
c000b41d:	56                   	push   esi
c000b41e:	53                   	push   ebx
c000b41f:	83 ec 60             	sub    esp,0x60
c000b422:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b427:	0f 84 43 02 00 00    	je     c000b670 <loadACPITables(unsigned char*)+0x254>
c000b42d:	a0 20 9a 02 c0       	mov    al,ds:0xc0029a20
c000b432:	0f b6 c0             	movzx  eax,al
c000b435:	85 c0                	test   eax,eax
c000b437:	74 7b                	je     c000b4b4 <loadACPITables(unsigned char*)+0x98>
c000b439:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b43d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b441:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b445:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b448:	83 e8 24             	sub    eax,0x24
c000b44b:	c1 e8 03             	shr    eax,0x3
c000b44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b452:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b45a:	66 90                	xchg   ax,ax
c000b45c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b460:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b464:	0f 8d ba 00 00 00    	jge    c000b524 <loadACPITables(unsigned char*)+0x108>
c000b46a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b46e:	83 c0 24             	add    eax,0x24
c000b471:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b475:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b479:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b47d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b481:	c1 e0 03             	shl    eax,0x3
c000b484:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b488:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b48c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b48f:	8b 00                	mov    eax,DWORD PTR [eax]
c000b491:	89 c1                	mov    ecx,eax
c000b493:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b498:	8d 50 01             	lea    edx,[eax+0x1]
c000b49b:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b4a1:	89 ca                	mov    edx,ecx
c000b4a3:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b4aa:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b4af:	eb ab                	jmp    c000b45c <loadACPITables(unsigned char*)+0x40>
c000b4b1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4b4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4b8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b4bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b4c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4c3:	83 e8 24             	sub    eax,0x24
c000b4c6:	c1 e8 02             	shr    eax,0x2
c000b4c9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b4cd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b4d5:	8d 76 00             	lea    esi,[esi+0x0]
c000b4d8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4dc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b4e0:	7d 42                	jge    c000b524 <loadACPITables(unsigned char*)+0x108>
c000b4e2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4e6:	83 c0 24             	add    eax,0x24
c000b4e9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b4ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b4f1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b4f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4f9:	c1 e0 02             	shl    eax,0x2
c000b4fc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b500:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b504:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b506:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b50b:	8d 50 01             	lea    edx,[eax+0x1]
c000b50e:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b514:	89 ca                	mov    edx,ecx
c000b516:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b51d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b522:	eb b4                	jmp    c000b4d8 <loadACPITables(unsigned char*)+0xbc>
c000b524:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b52c:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b531:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b535:	0f 8d 39 01 00 00    	jge    c000b674 <loadACPITables(unsigned char*)+0x258>
c000b53b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b53f:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b546:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b54a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b54e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b552:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b556:	25 ff 0f 00 00       	and    eax,0xfff
c000b55b:	89 c6                	mov    esi,eax
c000b55d:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b563:	83 ec 0c             	sub    esp,0xc
c000b566:	6a 01                	push   0x1
c000b568:	e8 34 6b 00 00       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c000b56d:	83 c4 10             	add    esp,0x10
c000b570:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b574:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b57a:	83 ec 0c             	sub    esp,0xc
c000b57d:	6a 01                	push   0x1
c000b57f:	6a 01                	push   0x1
c000b581:	50                   	push   eax
c000b582:	52                   	push   edx
c000b583:	53                   	push   ebx
c000b584:	e8 05 74 00 00       	call   c001298e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b589:	83 c4 20             	add    esp,0x20
c000b58c:	09 f0                	or     eax,esi
c000b58e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b592:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b596:	c1 e0 03             	shl    eax,0x3
c000b599:	05 20 98 02 c0       	add    eax,0xc0029820
c000b59e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b5aa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b5b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b5be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b5c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5c6:	89 c6                	mov    esi,eax
c000b5c8:	89 d7                	mov    edi,edx
c000b5ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5cc:	89 c8                	mov    eax,ecx
c000b5ce:	89 fa                	mov    edx,edi
c000b5d0:	89 f3                	mov    ebx,esi
c000b5d2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b5d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b5da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b5de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b5ed:	05 00 10 00 00       	add    eax,0x1000
c000b5f2:	c1 e8 0c             	shr    eax,0xc
c000b5f5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b5f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b601:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b605:	25 ff 0f 00 00       	and    eax,0xfff
c000b60a:	89 c6                	mov    esi,eax
c000b60c:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b612:	83 ec 0c             	sub    esp,0xc
c000b615:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b619:	e8 83 6a 00 00       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b625:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b62b:	83 ec 0c             	sub    esp,0xc
c000b62e:	6a 01                	push   0x1
c000b630:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b634:	50                   	push   eax
c000b635:	52                   	push   edx
c000b636:	53                   	push   ebx
c000b637:	e8 52 73 00 00       	call   c001298e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b63c:	83 c4 20             	add    esp,0x20
c000b63f:	09 f0                	or     eax,esi
c000b641:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b649:	83 ec 0c             	sub    esp,0xc
c000b64c:	50                   	push   eax
c000b64d:	e8 57 6d 00 00       	call   c00123a9 <Virt::freeKernelVirtualPages(unsigned long)>
c000b652:	83 c4 10             	add    esp,0x10
c000b655:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b659:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b65d:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b664:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b669:	e9 be fe ff ff       	jmp    c000b52c <loadACPITables(unsigned char*)+0x110>
c000b66e:	66 90                	xchg   ax,ax
c000b670:	90                   	nop
c000b671:	8d 76 00             	lea    esi,[esi+0x0]
c000b674:	83 c4 60             	add    esp,0x60
c000b677:	5b                   	pop    ebx
c000b678:	5e                   	pop    esi
c000b679:	5f                   	pop    edi
c000b67a:	c3                   	ret    
c000b67b:	90                   	nop

c000b67c <findRSDT(unsigned char*)>:
c000b67c:	57                   	push   edi
c000b67d:	56                   	push   esi
c000b67e:	53                   	push   ebx
c000b67f:	83 ec 50             	sub    esp,0x50
c000b682:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b687:	85 c0                	test   eax,eax
c000b689:	75 0d                	jne    c000b698 <findRSDT(unsigned char*)+0x1c>
c000b68b:	b8 00 00 00 00       	mov    eax,0x0
c000b690:	e9 2b 01 00 00       	jmp    c000b7c0 <findRSDT(unsigned char*)+0x144>
c000b695:	8d 76 00             	lea    esi,[esi+0x0]
c000b698:	89 e0                	mov    eax,esp
c000b69a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b69e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b6a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b6a6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b6ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b6b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b6ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b6be:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b6c2:	89 c6                	mov    esi,eax
c000b6c4:	89 d7                	mov    edi,edx
c000b6c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b6c8:	89 c8                	mov    eax,ecx
c000b6ca:	89 fa                	mov    edx,edi
c000b6cc:	89 f3                	mov    ebx,esi
c000b6ce:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b6d2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b6d6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b6da:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b6de:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b6e2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b6ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b6f2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6fa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b6fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b702:	25 ff 0f 00 00       	and    eax,0xfff
c000b707:	89 c6                	mov    esi,eax
c000b709:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b70f:	83 ec 0c             	sub    esp,0xc
c000b712:	6a 02                	push   0x2
c000b714:	e8 88 69 00 00       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c000b719:	83 c4 10             	add    esp,0x10
c000b71c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b720:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b726:	83 ec 0c             	sub    esp,0xc
c000b729:	6a 01                	push   0x1
c000b72b:	6a 02                	push   0x2
c000b72d:	50                   	push   eax
c000b72e:	52                   	push   edx
c000b72f:	53                   	push   ebx
c000b730:	e8 59 72 00 00       	call   c001298e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b735:	83 c4 20             	add    esp,0x20
c000b738:	09 f0                	or     eax,esi
c000b73a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b73e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b742:	25 ff 0f 00 00       	and    eax,0xfff
c000b747:	89 c6                	mov    esi,eax
c000b749:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b74f:	83 ec 0c             	sub    esp,0xc
c000b752:	6a 02                	push   0x2
c000b754:	e8 48 69 00 00       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c000b759:	83 c4 10             	add    esp,0x10
c000b75c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b760:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b766:	83 ec 0c             	sub    esp,0xc
c000b769:	6a 01                	push   0x1
c000b76b:	6a 02                	push   0x2
c000b76d:	50                   	push   eax
c000b76e:	52                   	push   edx
c000b76f:	53                   	push   ebx
c000b770:	e8 19 72 00 00       	call   c001298e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b775:	83 c4 20             	add    esp,0x20
c000b778:	09 f0                	or     eax,esi
c000b77a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b77e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b783:	85 c0                	test   eax,eax
c000b785:	75 11                	jne    c000b798 <findRSDT(unsigned char*)+0x11c>
c000b787:	c6 05 20 9a 02 c0 00 	mov    BYTE PTR ds:0xc0029a20,0x0
c000b78e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b792:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b796:	eb 24                	jmp    c000b7bc <findRSDT(unsigned char*)+0x140>
c000b798:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b79d:	83 f8 02             	cmp    eax,0x2
c000b7a0:	75 12                	jne    c000b7b4 <findRSDT(unsigned char*)+0x138>
c000b7a2:	c6 05 20 9a 02 c0 01 	mov    BYTE PTR ds:0xc0029a20,0x1
c000b7a9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7b1:	eb 09                	jmp    c000b7bc <findRSDT(unsigned char*)+0x140>
c000b7b3:	90                   	nop
c000b7b4:	b8 00 00 00 00       	mov    eax,0x0
c000b7b9:	eb 05                	jmp    c000b7c0 <findRSDT(unsigned char*)+0x144>
c000b7bb:	90                   	nop
c000b7bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b7c0:	83 c4 50             	add    esp,0x50
c000b7c3:	5b                   	pop    ebx
c000b7c4:	5e                   	pop    esi
c000b7c5:	5f                   	pop    edi
c000b7c6:	c3                   	ret    
c000b7c7:	90                   	nop

c000b7c8 <findDataTable(unsigned char*, char*)>:
c000b7c8:	83 ec 1c             	sub    esp,0x1c
c000b7cb:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b7d0:	75 0a                	jne    c000b7dc <findDataTable(unsigned char*, char*)+0x14>
c000b7d2:	b8 00 00 00 00       	mov    eax,0x0
c000b7d7:	eb 5f                	jmp    c000b838 <findDataTable(unsigned char*, char*)+0x70>
c000b7d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b7e4:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b7e9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b7ed:	7d 41                	jge    c000b830 <findDataTable(unsigned char*, char*)+0x68>
c000b7ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7f3:	c1 e0 03             	shl    eax,0x3
c000b7f6:	05 20 98 02 c0       	add    eax,0xc0029820
c000b7fb:	83 ec 04             	sub    esp,0x4
c000b7fe:	6a 04                	push   0x4
c000b800:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b804:	50                   	push   eax
c000b805:	e8 76 4b ff ff       	call   c0000380 <memcmp>
c000b80a:	83 c4 10             	add    esp,0x10
c000b80d:	85 c0                	test   eax,eax
c000b80f:	0f 94 c0             	sete   al
c000b812:	0f b6 c0             	movzx  eax,al
c000b815:	85 c0                	test   eax,eax
c000b817:	74 0f                	je     c000b828 <findDataTable(unsigned char*, char*)+0x60>
c000b819:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b81d:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b824:	eb 12                	jmp    c000b838 <findDataTable(unsigned char*, char*)+0x70>
c000b826:	66 90                	xchg   ax,ax
c000b828:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b82d:	eb b5                	jmp    c000b7e4 <findDataTable(unsigned char*, char*)+0x1c>
c000b82f:	90                   	nop
c000b830:	b8 00 00 00 00       	mov    eax,0x0
c000b835:	8d 76 00             	lea    esi,[esi+0x0]
c000b838:	83 c4 1c             	add    esp,0x1c
c000b83b:	c3                   	ret    

c000b83c <scanMADT()>:
c000b83c:	53                   	push   ebx
c000b83d:	83 ec 38             	sub    esp,0x38
c000b840:	c7 05 28 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a28,0x0
c000b84a:	c7 05 24 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a24,0x0
c000b854:	e8 c6 c4 00 00       	call   c0017d1f <HalFindRSDP()>
c000b859:	a3 28 9a 02 c0       	mov    ds:0xc0029a28,eax
c000b85e:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b863:	85 c0                	test   eax,eax
c000b865:	0f 84 11 04 00 00    	je     c000bc7c <scanMADT()+0x440>
c000b86b:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b870:	83 ec 0c             	sub    esp,0xc
c000b873:	50                   	push   eax
c000b874:	e8 03 fe ff ff       	call   c000b67c <findRSDT(unsigned char*)>
c000b879:	83 c4 10             	add    esp,0x10
c000b87c:	a3 24 9a 02 c0       	mov    ds:0xc0029a24,eax
c000b881:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b886:	85 c0                	test   eax,eax
c000b888:	0f 84 f2 03 00 00    	je     c000bc80 <scanMADT()+0x444>
c000b88e:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b893:	83 ec 0c             	sub    esp,0xc
c000b896:	50                   	push   eax
c000b897:	e8 80 fb ff ff       	call   c000b41c <loadACPITables(unsigned char*)>
c000b89c:	83 c4 10             	add    esp,0x10
c000b89f:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b8a4:	83 ec 08             	sub    esp,0x8
c000b8a7:	68 cc 1a 02 c0       	push   0xc0021acc
c000b8ac:	50                   	push   eax
c000b8ad:	e8 16 ff ff ff       	call   c000b7c8 <findDataTable(unsigned char*, char*)>
c000b8b2:	83 c4 10             	add    esp,0x10
c000b8b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b8b9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b8be:	0f 84 c0 03 00 00    	je     c000bc84 <scanMADT()+0x448>
c000b8c4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b8cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b8d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8d3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b8d7:	0f 87 af 03 00 00    	ja     c000bc8c <scanMADT()+0x450>
c000b8dd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b8e5:	0f 87 a1 03 00 00    	ja     c000bc8c <scanMADT()+0x450>
c000b8eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8ef:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b8f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8f7:	8d 50 01             	lea    edx,[eax+0x1]
c000b8fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b8fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b902:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b906:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b90a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b90e:	8d 50 01             	lea    edx,[eax+0x1]
c000b911:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b915:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b919:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b91d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b921:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b926:	83 f8 02             	cmp    eax,0x2
c000b929:	0f 86 59 03 00 00    	jbe    c000bc88 <scanMADT()+0x44c>
c000b92f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b934:	85 c0                	test   eax,eax
c000b936:	75 58                	jne    c000b990 <scanMADT()+0x154>
c000b938:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b93c:	8d 50 01             	lea    edx,[eax+0x1]
c000b93f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b943:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b949:	0f b6 d2             	movzx  edx,dl
c000b94c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b950:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b954:	88 82 60 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63a0],al
c000b95a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b95e:	8d 50 01             	lea    edx,[eax+0x1]
c000b961:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b965:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b96b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b96e:	88 0d 20 9c 02 c0    	mov    BYTE PTR ds:0xc0029c20,cl
c000b974:	0f b6 d2             	movzx  edx,dl
c000b977:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b97b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b97f:	88 82 40 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63c0],al
c000b985:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b98a:	e9 d9 02 00 00       	jmp    c000bc68 <scanMADT()+0x42c>
c000b98f:	90                   	nop
c000b990:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b995:	83 f8 01             	cmp    eax,0x1
c000b998:	0f 85 1a 01 00 00    	jne    c000bab8 <scanMADT()+0x27c>
c000b99e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9a2:	8d 50 01             	lea    edx,[eax+0x1]
c000b9a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9a9:	8a 15 e0 9a 02 c0    	mov    dl,BYTE PTR ds:0xc0029ae0
c000b9af:	0f b6 d2             	movzx  edx,dl
c000b9b2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b9b6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9ba:	88 82 00 9b 02 c0    	mov    BYTE PTR [edx-0x3ffd6500],al
c000b9c0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000b9c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b9c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9cd:	01 d0                	add    eax,edx
c000b9cf:	83 c0 2c             	add    eax,0x2c
c000b9d2:	8a 00                	mov    al,BYTE PTR [eax]
c000b9d4:	0f b6 d0             	movzx  edx,al
c000b9d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9db:	8d 48 01             	lea    ecx,[eax+0x1]
c000b9de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9e2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000b9e6:	0f b6 c0             	movzx  eax,al
c000b9e9:	c1 e0 08             	shl    eax,0x8
c000b9ec:	89 d1                	mov    ecx,edx
c000b9ee:	09 c1                	or     ecx,eax
c000b9f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9f4:	8d 50 02             	lea    edx,[eax+0x2]
c000b9f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9fb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000b9ff:	0f b6 c0             	movzx  eax,al
c000ba02:	c1 e0 10             	shl    eax,0x10
c000ba05:	09 c1                	or     ecx,eax
c000ba07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba0b:	8d 50 03             	lea    edx,[eax+0x3]
c000ba0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba12:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba16:	0f b6 c0             	movzx  eax,al
c000ba19:	c1 e0 18             	shl    eax,0x18
c000ba1c:	09 c1                	or     ecx,eax
c000ba1e:	89 ca                	mov    edx,ecx
c000ba20:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba25:	0f b6 c0             	movzx  eax,al
c000ba28:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c000ba2f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba3c:	01 d0                	add    eax,edx
c000ba3e:	83 c0 2c             	add    eax,0x2c
c000ba41:	8a 00                	mov    al,BYTE PTR [eax]
c000ba43:	0f b6 d0             	movzx  edx,al
c000ba46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba4a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba51:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba55:	0f b6 c0             	movzx  eax,al
c000ba58:	c1 e0 08             	shl    eax,0x8
c000ba5b:	89 d1                	mov    ecx,edx
c000ba5d:	09 c1                	or     ecx,eax
c000ba5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba63:	8d 50 02             	lea    edx,[eax+0x2]
c000ba66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba6a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba6e:	0f b6 c0             	movzx  eax,al
c000ba71:	c1 e0 10             	shl    eax,0x10
c000ba74:	09 c1                	or     ecx,eax
c000ba76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba7a:	8d 50 03             	lea    edx,[eax+0x3]
c000ba7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba81:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba85:	0f b6 c0             	movzx  eax,al
c000ba88:	c1 e0 18             	shl    eax,0x18
c000ba8b:	09 c1                	or     ecx,eax
c000ba8d:	89 ca                	mov    edx,ecx
c000ba8f:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba94:	0f b6 c0             	movzx  eax,al
c000ba97:	89 14 85 a0 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6460],edx
c000ba9e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000baa3:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000baa8:	83 c0 01             	add    eax,0x1
c000baab:	a2 e0 9a 02 c0       	mov    ds:0xc0029ae0,al
c000bab0:	e9 b3 01 00 00       	jmp    c000bc68 <scanMADT()+0x42c>
c000bab5:	8d 76 00             	lea    esi,[esi+0x0]
c000bab8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000babd:	83 f8 02             	cmp    eax,0x2
c000bac0:	0f 85 ea 00 00 00    	jne    c000bbb0 <scanMADT()+0x374>
c000bac6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baca:	8d 50 01             	lea    edx,[eax+0x1]
c000bacd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bad1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bad5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bad9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000badd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bae1:	8d 50 01             	lea    edx,[eax+0x1]
c000bae4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bae8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baec:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000baf0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000baf4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baf8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bafc:	01 d0                	add    eax,edx
c000bafe:	83 c0 2c             	add    eax,0x2c
c000bb01:	8a 00                	mov    al,BYTE PTR [eax]
c000bb03:	0f b6 d0             	movzx  edx,al
c000bb06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb0a:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb11:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb15:	0f b6 c0             	movzx  eax,al
c000bb18:	c1 e0 08             	shl    eax,0x8
c000bb1b:	89 d1                	mov    ecx,edx
c000bb1d:	09 c1                	or     ecx,eax
c000bb1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb23:	8d 50 02             	lea    edx,[eax+0x2]
c000bb26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb2a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb2e:	0f b6 c0             	movzx  eax,al
c000bb31:	c1 e0 10             	shl    eax,0x10
c000bb34:	09 c1                	or     ecx,eax
c000bb36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb3a:	8d 50 03             	lea    edx,[eax+0x3]
c000bb3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb41:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb45:	0f b6 c0             	movzx  eax,al
c000bb48:	c1 e0 18             	shl    eax,0x18
c000bb4b:	09 c8                	or     eax,ecx
c000bb4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb51:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb5e:	01 d0                	add    eax,edx
c000bb60:	83 c0 2c             	add    eax,0x2c
c000bb63:	8a 00                	mov    al,BYTE PTR [eax]
c000bb65:	0f b6 c0             	movzx  eax,al
c000bb68:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000bb6c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bb6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb73:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000bb77:	0f b6 d2             	movzx  edx,dl
c000bb7a:	c1 e2 08             	shl    edx,0x8
c000bb7d:	09 d0                	or     eax,edx
c000bb7f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bb84:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bb89:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bb8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bb92:	88 90 28 3b 02 c0    	mov    BYTE PTR [eax-0x3ffdc4d8],dl
c000bb98:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000bb9d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000bba2:	66 89 84 12 c0 9a 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6540],ax
c000bbaa:	e9 b9 00 00 00       	jmp    c000bc68 <scanMADT()+0x42c>
c000bbaf:	90                   	nop
c000bbb0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bbb5:	83 f8 04             	cmp    eax,0x4
c000bbb8:	0f 85 9a 00 00 00    	jne    c000bc58 <scanMADT()+0x41c>
c000bbbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbc2:	8d 50 01             	lea    edx,[eax+0x1]
c000bbc5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbcd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bbd1:	0f b6 c0             	movzx  eax,al
c000bbd4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbd8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbe0:	01 d0                	add    eax,edx
c000bbe2:	83 c0 2c             	add    eax,0x2c
c000bbe5:	8a 00                	mov    al,BYTE PTR [eax]
c000bbe7:	0f b6 d0             	movzx  edx,al
c000bbea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbee:	8d 48 01             	lea    ecx,[eax+0x1]
c000bbf1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbf5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bbf9:	0f b6 c0             	movzx  eax,al
c000bbfc:	c1 e0 08             	shl    eax,0x8
c000bbff:	09 d0                	or     eax,edx
c000bc01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc05:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bc0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc0e:	8d 50 01             	lea    edx,[eax+0x1]
c000bc11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc19:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc1d:	0f b6 c0             	movzx  eax,al
c000bc20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc28:	c1 e0 08             	shl    eax,0x8
c000bc2b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bc2f:	89 c1                	mov    ecx,eax
c000bc31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc35:	c1 e0 18             	shl    eax,0x18
c000bc38:	89 c3                	mov    ebx,eax
c000bc3a:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c000bc3f:	8d 50 01             	lea    edx,[eax+0x1]
c000bc42:	89 15 2c 9a 02 c0    	mov    DWORD PTR ds:0xc0029a2c,edx
c000bc48:	09 d9                	or     ecx,ebx
c000bc4a:	89 ca                	mov    edx,ecx
c000bc4c:	89 14 85 40 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65c0],edx
c000bc53:	eb 13                	jmp    c000bc68 <scanMADT()+0x42c>
c000bc55:	8d 76 00             	lea    esi,[esi+0x0]
c000bc58:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc5d:	83 f8 05             	cmp    eax,0x5
c000bc60:	75 06                	jne    c000bc68 <scanMADT()+0x42c>
c000bc62:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bc67:	90                   	nop
c000bc68:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bc6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc71:	01 d0                	add    eax,edx
c000bc73:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc77:	e9 50 fc ff ff       	jmp    c000b8cc <scanMADT()+0x90>
c000bc7c:	90                   	nop
c000bc7d:	eb 0d                	jmp    c000bc8c <scanMADT()+0x450>
c000bc7f:	90                   	nop
c000bc80:	90                   	nop
c000bc81:	eb 09                	jmp    c000bc8c <scanMADT()+0x450>
c000bc83:	90                   	nop
c000bc84:	90                   	nop
c000bc85:	eb 05                	jmp    c000bc8c <scanMADT()+0x450>
c000bc87:	90                   	nop
c000bc88:	90                   	nop
c000bc89:	8d 76 00             	lea    esi,[esi+0x0]
c000bc8c:	83 c4 38             	add    esp,0x38
c000bc8f:	5b                   	pop    ebx
c000bc90:	c3                   	ret    
c000bc91:	90                   	nop
c000bc92:	66 90                	xchg   ax,ax

c000bc94 <ACPI::ACPI()>:
c000bc94:	83 ec 0c             	sub    esp,0xc
c000bc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9b:	83 ec 08             	sub    esp,0x8
c000bc9e:	68 d1 1a 02 c0       	push   0xc0021ad1
c000bca3:	50                   	push   eax
c000bca4:	e8 f7 d4 ff ff       	call   c00091a0 <Device::Device(char const*)>
c000bca9:	83 c4 10             	add    esp,0x10
c000bcac:	ba cc 1c 02 c0       	mov    edx,0xc0021ccc
c000bcb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb5:	89 10                	mov    DWORD PTR [eax],edx
c000bcb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcbb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bcc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bcde:	e8 59 fb ff ff       	call   c000b83c <scanMADT()>
c000bce3:	90                   	nop
c000bce4:	83 c4 0c             	add    esp,0xc
c000bce7:	c3                   	ret    

c000bce8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bce8:	83 ec 2c             	sub    esp,0x2c
c000bceb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000bcef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bcf3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcf7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000bcfb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bd00:	88 d0                	mov    al,dl
c000bd02:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bd06:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bd0b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd13:	90                   	nop
c000bd14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd18:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bd1e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd22:	0f 8d b0 00 00 00    	jge    c000bdd8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bd28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd2c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd30:	83 c2 2a             	add    edx,0x2a
c000bd33:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bd37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bd3c:	0f b7 c0             	movzx  eax,ax
c000bd3f:	39 c2                	cmp    edx,eax
c000bd41:	0f 85 85 00 00 00    	jne    c000bdcc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd4f:	83 c2 2a             	add    edx,0x2a
c000bd52:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bd56:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bd5b:	0f b6 c0             	movzx  eax,al
c000bd5e:	39 c2                	cmp    edx,eax
c000bd60:	75 6a                	jne    c000bdcc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd62:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bd67:	85 c0                	test   eax,eax
c000bd69:	74 3d                	je     c000bda8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bd6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd73:	83 c2 2a             	add    edx,0x2a
c000bd76:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bd7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bd81:	39 c2                	cmp    edx,eax
c000bd83:	74 13                	je     c000bd98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bd85:	83 ec 0c             	sub    esp,0xc
c000bd88:	68 4c 1c 02 c0       	push   0xc0021c4c
c000bd8d:	e8 54 2f 00 00       	call   c000ece6 <KePanic(char const*)>
c000bd92:	83 c4 10             	add    esp,0x10
c000bd95:	8d 76 00             	lea    esi,[esi+0x0]
c000bd98:	83 ec 0c             	sub    esp,0xc
c000bd9b:	68 d6 1a 02 c0       	push   0xc0021ad6
c000bda0:	e8 41 2f 00 00       	call   c000ece6 <KePanic(char const*)>
c000bda5:	83 c4 10             	add    esp,0x10
c000bda8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bdac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdb4:	83 c2 2a             	add    edx,0x2a
c000bdb7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bdbb:	8b 02                	mov    eax,DWORD PTR [edx]
c000bdbd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bdc0:	89 01                	mov    DWORD PTR [ecx],eax
c000bdc2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bdc5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bdca:	66 90                	xchg   ax,ax
c000bdcc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bdd1:	e9 3e ff ff ff       	jmp    c000bd14 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bdd6:	66 90                	xchg   ax,ax
c000bdd8:	90                   	nop
c000bdd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bddd:	83 c4 2c             	add    esp,0x2c
c000bde0:	c2 04 00             	ret    0x4
c000bde3:	90                   	nop

c000bde4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bde4:	83 ec 1c             	sub    esp,0x1c
c000bde7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdeb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bdef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bdf3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000bdf8:	88 c8                	mov    al,cl
c000bdfa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000bdfe:	88 d0                	mov    al,dl
c000be00:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000be04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be08:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be12:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be15:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000be19:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000be1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be21:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000be2b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000be2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be32:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000be37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be3b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be41:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000be45:	83 c0 01             	add    eax,0x1
c000be48:	88 c1                	mov    cl,al
c000be4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be4e:	83 c2 2a             	add    edx,0x2a
c000be51:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000be55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be59:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be63:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000be6a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000be6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be72:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be78:	8d 50 01             	lea    edx,[eax+0x1]
c000be7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be7f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000be85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be89:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be8f:	3d 00 02 00 00       	cmp    eax,0x200
c000be94:	75 12                	jne    c000bea8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000be96:	83 ec 0c             	sub    esp,0xc
c000be99:	68 e5 1a 02 c0       	push   0xc0021ae5
c000be9e:	e8 43 2e 00 00       	call   c000ece6 <KePanic(char const*)>
c000bea3:	83 c4 10             	add    esp,0x10
c000bea6:	66 90                	xchg   ax,ax
c000bea8:	90                   	nop
c000bea9:	83 c4 1c             	add    esp,0x1c
c000beac:	c3                   	ret    
c000bead:	90                   	nop
c000beae:	66 90                	xchg   ax,ax

c000beb0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000beb0:	b8 00 00 00 00       	mov    eax,0x0
c000beb5:	c3                   	ret    
c000beb6:	66 90                	xchg   ax,ax

c000beb8 <ACPI::detectPCI()>:
c000beb8:	53                   	push   ebx
c000beb9:	83 ec 28             	sub    esp,0x28
c000bebc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bec1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000bec6:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000becb:	83 ec 08             	sub    esp,0x8
c000bece:	68 02 1b 02 c0       	push   0xc0021b02
c000bed3:	50                   	push   eax
c000bed4:	e8 ef f8 ff ff       	call   c000b7c8 <findDataTable(unsigned char*, char*)>
c000bed9:	83 c4 10             	add    esp,0x10
c000bedc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bee0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bee5:	74 0d                	je     c000bef4 <ACPI::detectPCI()+0x3c>
c000bee7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000beec:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bef1:	8d 76 00             	lea    esi,[esi+0x0]
c000bef4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000befc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf00:	8a 00                	mov    al,BYTE PTR [eax]
c000bf02:	0f b6 c0             	movzx  eax,al
c000bf05:	83 f8 01             	cmp    eax,0x1
c000bf08:	75 0e                	jne    c000bf18 <ACPI::detectPCI()+0x60>
c000bf0a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf0f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf14:	eb 2e                	jmp    c000bf44 <ACPI::detectPCI()+0x8c>
c000bf16:	66 90                	xchg   ax,ax
c000bf18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf1c:	8a 00                	mov    al,BYTE PTR [eax]
c000bf1e:	0f b6 c0             	movzx  eax,al
c000bf21:	83 f8 02             	cmp    eax,0x2
c000bf24:	75 1e                	jne    c000bf44 <ACPI::detectPCI()+0x8c>
c000bf26:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf2b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf30:	85 c0                	test   eax,eax
c000bf32:	74 10                	je     c000bf44 <ACPI::detectPCI()+0x8c>
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	68 7c 1c 02 c0       	push   0xc0021c7c
c000bf3c:	e8 a5 2d 00 00       	call   c000ece6 <KePanic(char const*)>
c000bf41:	83 c4 10             	add    esp,0x10
c000bf44:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bf48:	83 f0 01             	xor    eax,0x1
c000bf4b:	0f b6 c0             	movzx  eax,al
c000bf4e:	85 c0                	test   eax,eax
c000bf50:	74 46                	je     c000bf98 <ACPI::detectPCI()+0xe0>
c000bf52:	e8 d9 41 ff ff       	call   c0000130 <manualPCIProbe>
c000bf57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf5b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bf60:	75 0e                	jne    c000bf70 <ACPI::detectPCI()+0xb8>
c000bf62:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf67:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf6c:	eb 2a                	jmp    c000bf98 <ACPI::detectPCI()+0xe0>
c000bf6e:	66 90                	xchg   ax,ax
c000bf70:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bf75:	75 21                	jne    c000bf98 <ACPI::detectPCI()+0xe0>
c000bf77:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf7c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf81:	85 c0                	test   eax,eax
c000bf83:	74 13                	je     c000bf98 <ACPI::detectPCI()+0xe0>
c000bf85:	83 ec 0c             	sub    esp,0xc
c000bf88:	68 7c 1c 02 c0       	push   0xc0021c7c
c000bf8d:	e8 54 2d 00 00       	call   c000ece6 <KePanic(char const*)>
c000bf92:	83 c4 10             	add    esp,0x10
c000bf95:	8d 76 00             	lea    esi,[esi+0x0]
c000bf98:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bf9d:	85 c0                	test   eax,eax
c000bf9f:	0f 84 87 00 00 00    	je     c000c02c <ACPI::detectPCI()+0x174>
c000bfa5:	83 ec 0c             	sub    esp,0xc
c000bfa8:	68 07 1b 02 c0       	push   0xc0021b07
c000bfad:	e8 96 06 00 00       	call   c000c648 <KeSetBootMessage(char const*)>
c000bfb2:	83 c4 10             	add    esp,0x10
c000bfb5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000bfbd:	83 ec 0c             	sub    esp,0xc
c000bfc0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bfc4:	e8 c8 29 00 00       	call   c000e991 <malloc>
c000bfc9:	83 c4 10             	add    esp,0x10
c000bfcc:	89 c3                	mov    ebx,eax
c000bfce:	83 ec 0c             	sub    esp,0xc
c000bfd1:	53                   	push   ebx
c000bfd2:	e8 fd f9 00 00       	call   c001b9d4 <PCI::PCI()>
c000bfd7:	83 c4 10             	add    esp,0x10
c000bfda:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bfde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfe2:	83 ec 08             	sub    esp,0x8
c000bfe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe9:	50                   	push   eax
c000bfea:	e8 4f d0 ff ff       	call   c000903e <Device::addChild(Device*)>
c000bfef:	83 c4 10             	add    esp,0x10
c000bff2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bff6:	8b 00                	mov    eax,DWORD PTR [eax]
c000bff8:	83 c0 08             	add    eax,0x8
c000bffb:	8b 00                	mov    eax,DWORD PTR [eax]
c000bffd:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c002:	85 d2                	test   edx,edx
c000c004:	74 0a                	je     c000c010 <ACPI::detectPCI()+0x158>
c000c006:	ba 01 00 00 00       	mov    edx,0x1
c000c00b:	eb 0b                	jmp    c000c018 <ACPI::detectPCI()+0x160>
c000c00d:	8d 76 00             	lea    esi,[esi+0x0]
c000c010:	ba 02 00 00 00       	mov    edx,0x2
c000c015:	8d 76 00             	lea    esi,[esi+0x0]
c000c018:	6a 00                	push   0x0
c000c01a:	6a 00                	push   0x0
c000c01c:	52                   	push   edx
c000c01d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c021:	ff d0                	call   eax
c000c023:	83 c4 10             	add    esp,0x10
c000c026:	e9 91 00 00 00       	jmp    c000c0bc <ACPI::detectPCI()+0x204>
c000c02b:	90                   	nop
c000c02c:	83 ec 0c             	sub    esp,0xc
c000c02f:	68 1f 1b 02 c0       	push   0xc0021b1f
c000c034:	e8 0f 06 00 00       	call   c000c648 <KeSetBootMessage(char const*)>
c000c039:	83 c4 10             	add    esp,0x10
c000c03c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c043:	83 ec 0c             	sub    esp,0xc
c000c046:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c04a:	e8 42 29 00 00       	call   c000e991 <malloc>
c000c04f:	83 c4 10             	add    esp,0x10
c000c052:	89 c3                	mov    ebx,eax
c000c054:	83 ec 0c             	sub    esp,0xc
c000c057:	53                   	push   ebx
c000c058:	e8 7d 05 01 00       	call   c001c5da <IDE::IDE()>
c000c05d:	83 c4 10             	add    esp,0x10
c000c060:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c064:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c068:	83 ec 08             	sub    esp,0x8
c000c06b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c06f:	50                   	push   eax
c000c070:	e8 c9 cf ff ff       	call   c000903e <Device::addChild(Device*)>
c000c075:	83 c4 10             	add    esp,0x10
c000c078:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c07c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c08a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c093:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c097:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c0a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0a6:	83 c0 08             	add    eax,0x8
c000c0a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0ab:	6a 00                	push   0x0
c000c0ad:	6a 00                	push   0x0
c000c0af:	6a 00                	push   0x0
c000c0b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b5:	ff d0                	call   eax
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	66 90                	xchg   ax,ax
c000c0bc:	90                   	nop
c000c0bd:	83 c4 28             	add    esp,0x28
c000c0c0:	5b                   	pop    ebx
c000c0c1:	c3                   	ret    
c000c0c2:	66 90                	xchg   ax,ax

c000c0c4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c0c4:	83 ec 0c             	sub    esp,0xc
c000c0c7:	83 ec 0c             	sub    esp,0xc
c000c0ca:	68 34 1b 02 c0       	push   0xc0021b34
c000c0cf:	e8 12 2c 00 00       	call   c000ece6 <KePanic(char const*)>
c000c0d4:	83 c4 10             	add    esp,0x10
c000c0d7:	90                   	nop
c000c0d8:	83 c4 0c             	add    esp,0xc
c000c0db:	c3                   	ret    

c000c0dc <ACPI::open(int, int, void*)>:
c000c0dc:	57                   	push   edi
c000c0dd:	56                   	push   esi
c000c0de:	53                   	push   ebx
c000c0df:	81 ec 70 01 00 00    	sub    esp,0x170
c000c0e5:	83 ec 0c             	sub    esp,0xc
c000c0e8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c0ef:	e8 c4 fd ff ff       	call   c000beb8 <ACPI::detectPCI()>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	83 ec 0c             	sub    esp,0xc
c000c0fa:	68 a4 1c 02 c0       	push   0xc0021ca4
c000c0ff:	e8 44 05 00 00       	call   c000c648 <KeSetBootMessage(char const*)>
c000c104:	83 c4 10             	add    esp,0x10
c000c107:	b8 4c 05 00 00       	mov    eax,0x54c
c000c10c:	8a 00                	mov    al,BYTE PTR [eax]
c000c10e:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000c115:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c11d:	83 f8 01             	cmp    eax,0x1
c000c120:	75 12                	jne    c000c134 <ACPI::open(int, int, void*)+0x58>
c000c122:	83 ec 0c             	sub    esp,0xc
c000c125:	68 45 1b 02 c0       	push   0xc0021b45
c000c12a:	e8 cc 7e 00 00       	call   c0013ffb <Thr::loadKernelSymbolTable(char const*)>
c000c12f:	83 c4 10             	add    esp,0x10
c000c132:	eb 34                	jmp    c000c168 <ACPI::open(int, int, void*)+0x8c>
c000c134:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c13c:	3d bb 00 00 00       	cmp    eax,0xbb
c000c141:	75 15                	jne    c000c158 <ACPI::open(int, int, void*)+0x7c>
c000c143:	83 ec 0c             	sub    esp,0xc
c000c146:	68 63 1b 02 c0       	push   0xc0021b63
c000c14b:	e8 ab 7e 00 00       	call   c0013ffb <Thr::loadKernelSymbolTable(char const*)>
c000c150:	83 c4 10             	add    esp,0x10
c000c153:	eb 13                	jmp    c000c168 <ACPI::open(int, int, void*)+0x8c>
c000c155:	8d 76 00             	lea    esi,[esi+0x0]
c000c158:	83 ec 0c             	sub    esp,0xc
c000c15b:	68 81 1b 02 c0       	push   0xc0021b81
c000c160:	e8 81 2b 00 00       	call   c000ece6 <KePanic(char const*)>
c000c165:	83 c4 10             	add    esp,0x10
c000c168:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000c170:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000c17b:	83 ec 0c             	sub    esp,0xc
c000c17e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c185:	e8 07 28 00 00       	call   c000e991 <malloc>
c000c18a:	83 c4 10             	add    esp,0x10
c000c18d:	89 c3                	mov    ebx,eax
c000c18f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c194:	83 ec 04             	sub    esp,0x4
c000c197:	50                   	push   eax
c000c198:	68 9b 1b 02 c0       	push   0xc0021b9b
c000c19d:	53                   	push   ebx
c000c19e:	e8 6f bf ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c1a3:	83 c4 10             	add    esp,0x10
c000c1a6:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000c1ad:	83 ec 08             	sub    esp,0x8
c000c1b0:	6a 01                	push   0x1
c000c1b2:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c1b9:	e8 72 bf ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000c1be:	83 c4 10             	add    esp,0x10
c000c1c1:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000c1c8:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000c1d0:	75 16                	jne    c000c1e8 <ACPI::open(int, int, void*)+0x10c>
c000c1d2:	83 ec 0c             	sub    esp,0xc
c000c1d5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c1dc:	e8 ad bf ff ff       	call   c000818e <File::close()>
c000c1e1:	83 c4 10             	add    esp,0x10
c000c1e4:	eb 0a                	jmp    c000c1f0 <ACPI::open(int, int, void*)+0x114>
c000c1e6:	66 90                	xchg   ax,ax
c000c1e8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000c1f0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000c1f8:	74 1e                	je     c000c218 <ACPI::open(int, int, void*)+0x13c>
c000c1fa:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000c201:	8b 00                	mov    eax,DWORD PTR [eax]
c000c203:	83 c0 08             	add    eax,0x8
c000c206:	8b 00                	mov    eax,DWORD PTR [eax]
c000c208:	83 ec 0c             	sub    esp,0xc
c000c20b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c212:	ff d0                	call   eax
c000c214:	83 c4 10             	add    esp,0x10
c000c217:	90                   	nop
c000c218:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000c21f:	83 f0 01             	xor    eax,0x1
c000c222:	0f b6 c0             	movzx  eax,al
c000c225:	85 c0                	test   eax,eax
c000c227:	74 2f                	je     c000c258 <ACPI::open(int, int, void*)+0x17c>
c000c229:	83 ec 0c             	sub    esp,0xc
c000c22c:	68 b9 1b 02 c0       	push   0xc0021bb9
c000c231:	e8 12 04 00 00       	call   c000c648 <KeSetBootMessage(char const*)>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000c244:	83 ec 0c             	sub    esp,0xc
c000c247:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000c24e:	e8 7d 60 00 00       	call   c00122d0 <Virt::setupPageSwapping(int)>
c000c253:	83 c4 10             	add    esp,0x10
c000c256:	66 90                	xchg   ax,ax
c000c258:	83 ec 0c             	sub    esp,0xc
c000c25b:	68 d4 1b 02 c0       	push   0xc0021bd4
c000c260:	e8 e3 03 00 00       	call   c000c648 <KeSetBootMessage(char const*)>
c000c265:	83 c4 10             	add    esp,0x10
c000c268:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000c26f:	83 ec 08             	sub    esp,0x8
c000c272:	6a 13                	push   0x13
c000c274:	50                   	push   eax
c000c275:	e8 f2 d0 ff ff       	call   c000936c <getDevicesOfType(DeviceType)>
c000c27a:	83 c4 0c             	add    esp,0xc
c000c27d:	8d 76 00             	lea    esi,[esi+0x0]
c000c280:	83 ec 0c             	sub    esp,0xc
c000c283:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c28a:	50                   	push   eax
c000c28b:	e8 5c 3e 01 00       	call   c00200ec <LinkedList<Device>::isEmpty()>
c000c290:	83 c4 10             	add    esp,0x10
c000c293:	83 f0 01             	xor    eax,0x1
c000c296:	0f b6 c0             	movzx  eax,al
c000c299:	85 c0                	test   eax,eax
c000c29b:	0f 84 47 01 00 00    	je     c000c3e8 <ACPI::open(int, int, void*)+0x30c>
c000c2a1:	83 ec 0c             	sub    esp,0xc
c000c2a4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c2ab:	50                   	push   eax
c000c2ac:	e8 57 3e 01 00       	call   c0020108 <LinkedList<Device>::getFirstElement()>
c000c2b1:	83 c4 10             	add    esp,0x10
c000c2b4:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000c2bb:	83 ec 0c             	sub    esp,0xc
c000c2be:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c2c5:	50                   	push   eax
c000c2c6:	e8 45 3e 01 00       	call   c0020110 <LinkedList<Device>::removeFirst()>
c000c2cb:	83 c4 10             	add    esp,0x10
c000c2ce:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000c2d5:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000c2dc:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000c2e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000c2e7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000c2ed:	ba 09 00 00 00       	mov    edx,0x9
c000c2f2:	fc                   	cld    
c000c2f3:	89 c7                	mov    edi,eax
c000c2f5:	89 de                	mov    esi,ebx
c000c2f7:	89 d1                	mov    ecx,edx
c000c2f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c2fb:	83 ec 08             	sub    esp,0x8
c000c2fe:	8d 44 24 38          	lea    eax,[esp+0x38]
c000c302:	50                   	push   eax
c000c303:	83 ec 24             	sub    esp,0x24
c000c306:	89 e0                	mov    eax,esp
c000c308:	89 c3                	mov    ebx,eax
c000c30a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000c30e:	ba 09 00 00 00       	mov    edx,0x9
c000c313:	89 df                	mov    edi,ebx
c000c315:	89 c6                	mov    esi,eax
c000c317:	89 d1                	mov    ecx,edx
c000c319:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c31b:	e8 9e fb 00 00       	call   c001bebe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c320:	83 c4 30             	add    esp,0x30
c000c323:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000c32a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000c332:	0f 84 48 ff ff ff    	je     c000c280 <ACPI::open(int, int, void*)+0x1a4>
c000c338:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000c343:	83 ec 0c             	sub    esp,0xc
c000c346:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000c34d:	e8 3f 26 00 00       	call   c000e991 <malloc>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	89 c3                	mov    ebx,eax
c000c357:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c35c:	83 ec 04             	sub    esp,0x4
c000c35f:	50                   	push   eax
c000c360:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c367:	53                   	push   ebx
c000c368:	e8 a5 bd ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c36d:	83 c4 10             	add    esp,0x10
c000c370:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000c377:	83 ec 0c             	sub    esp,0xc
c000c37a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c381:	e8 6e c0 ff ff       	call   c00083f4 <File::exists()>
c000c386:	83 c4 10             	add    esp,0x10
c000c389:	0f b6 c0             	movzx  eax,al
c000c38c:	85 c0                	test   eax,eax
c000c38e:	74 28                	je     c000c3b8 <ACPI::open(int, int, void*)+0x2dc>
c000c390:	83 ec 08             	sub    esp,0x8
c000c393:	6a 01                	push   0x1
c000c395:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c39c:	e8 d4 86 00 00       	call   c0014a75 <Thr::loadDLL(char const*, bool)>
c000c3a1:	83 c4 10             	add    esp,0x10
c000c3a4:	83 ec 08             	sub    esp,0x8
c000c3a7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c3ae:	50                   	push   eax
c000c3af:	e8 13 89 00 00       	call   c0014cc7 <Thr::executeDLL(unsigned long, void*)>
c000c3b4:	83 c4 10             	add    esp,0x10
c000c3b7:	90                   	nop
c000c3b8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000c3c0:	0f 84 ba fe ff ff    	je     c000c280 <ACPI::open(int, int, void*)+0x1a4>
c000c3c6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000c3cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3cf:	83 c0 08             	add    eax,0x8
c000c3d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3d4:	83 ec 0c             	sub    esp,0xc
c000c3d7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c3de:	ff d0                	call   eax
c000c3e0:	83 c4 10             	add    esp,0x10
c000c3e3:	e9 98 fe ff ff       	jmp    c000c280 <ACPI::open(int, int, void*)+0x1a4>
c000c3e8:	83 ec 0c             	sub    esp,0xc
c000c3eb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c3f2:	50                   	push   eax
c000c3f3:	e8 f0 3c 01 00       	call   c00200e8 <LinkedList<Device>::~LinkedList()>
c000c3f8:	83 c4 10             	add    esp,0x10
c000c3fb:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000c401:	83 ec 08             	sub    esp,0x8
c000c404:	6a 01                	push   0x1
c000c406:	68 ee 1b 02 c0       	push   0xc0021bee
c000c40b:	e8 65 86 00 00       	call   c0014a75 <Thr::loadDLL(char const*, bool)>
c000c410:	83 c4 10             	add    esp,0x10
c000c413:	83 ec 08             	sub    esp,0x8
c000c416:	53                   	push   ebx
c000c417:	50                   	push   eax
c000c418:	e8 aa 88 00 00       	call   c0014cc7 <Thr::executeDLL(unsigned long, void*)>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c425:	85 c0                	test   eax,eax
c000c427:	0f 84 27 01 00 00    	je     c000c554 <ACPI::open(int, int, void*)+0x478>
c000c42d:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000c432:	85 c0                	test   eax,eax
c000c434:	0f 84 1a 01 00 00    	je     c000c554 <ACPI::open(int, int, void*)+0x478>
c000c43a:	83 ec 0c             	sub    esp,0xc
c000c43d:	68 0b 1c 02 c0       	push   0xc0021c0b
c000c442:	e8 01 02 00 00       	call   c000c648 <KeSetBootMessage(char const*)>
c000c447:	83 c4 10             	add    esp,0x10
c000c44a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000c455:	83 ec 0c             	sub    esp,0xc
c000c458:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000c45f:	e8 2d 25 00 00       	call   c000e991 <malloc>
c000c464:	83 c4 10             	add    esp,0x10
c000c467:	89 c3                	mov    ebx,eax
c000c469:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c46e:	83 ec 04             	sub    esp,0x4
c000c471:	50                   	push   eax
c000c472:	68 28 1c 02 c0       	push   0xc0021c28
c000c477:	53                   	push   ebx
c000c478:	e8 95 bc ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c47d:	83 c4 10             	add    esp,0x10
c000c480:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000c487:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c48f:	74 1f                	je     c000c4b0 <ACPI::open(int, int, void*)+0x3d4>
c000c491:	83 ec 0c             	sub    esp,0xc
c000c494:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c49b:	e8 54 bf ff ff       	call   c00083f4 <File::exists()>
c000c4a0:	83 c4 10             	add    esp,0x10
c000c4a3:	0f b6 c0             	movzx  eax,al
c000c4a6:	85 c0                	test   eax,eax
c000c4a8:	74 06                	je     c000c4b0 <ACPI::open(int, int, void*)+0x3d4>
c000c4aa:	b0 01                	mov    al,0x1
c000c4ac:	eb 06                	jmp    c000c4b4 <ACPI::open(int, int, void*)+0x3d8>
c000c4ae:	66 90                	xchg   ax,ax
c000c4b0:	b0 00                	mov    al,0x0
c000c4b2:	66 90                	xchg   ax,ax
c000c4b4:	0f b6 c0             	movzx  eax,al
c000c4b7:	85 c0                	test   eax,eax
c000c4b9:	74 25                	je     c000c4e0 <ACPI::open(int, int, void*)+0x404>
c000c4bb:	83 ec 08             	sub    esp,0x8
c000c4be:	6a 01                	push   0x1
c000c4c0:	68 28 1c 02 c0       	push   0xc0021c28
c000c4c5:	e8 ab 85 00 00       	call   c0014a75 <Thr::loadDLL(char const*, bool)>
c000c4ca:	83 c4 10             	add    esp,0x10
c000c4cd:	83 ec 08             	sub    esp,0x8
c000c4d0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000c4d7:	50                   	push   eax
c000c4d8:	e8 ea 87 00 00       	call   c0014cc7 <Thr::executeDLL(unsigned long, void*)>
c000c4dd:	83 c4 10             	add    esp,0x10
c000c4e0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c4e8:	74 2a                	je     c000c514 <ACPI::open(int, int, void*)+0x438>
c000c4ea:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c4f2:	74 20                	je     c000c514 <ACPI::open(int, int, void*)+0x438>
c000c4f4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000c4fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4fd:	83 c0 08             	add    eax,0x8
c000c500:	8b 00                	mov    eax,DWORD PTR [eax]
c000c502:	83 ec 0c             	sub    esp,0xc
c000c505:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c50c:	ff d0                	call   eax
c000c50e:	83 c4 10             	add    esp,0x10
c000c511:	8d 76 00             	lea    esi,[esi+0x0]
c000c514:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c519:	83 ec 08             	sub    esp,0x8
c000c51c:	68 45 1c 02 c0       	push   0xc0021c45
c000c521:	50                   	push   eax
c000c522:	e8 a1 f2 ff ff       	call   c000b7c8 <findDataTable(unsigned char*, char*)>
c000c527:	83 c4 10             	add    esp,0x10
c000c52a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000c531:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000c539:	74 19                	je     c000c554 <ACPI::open(int, int, void*)+0x478>
c000c53b:	83 ec 08             	sub    esp,0x8
c000c53e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c545:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c54c:	e8 73 fb ff ff       	call   c000c0c4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c551:	83 c4 10             	add    esp,0x10
c000c554:	b8 00 00 00 00       	mov    eax,0x0
c000c559:	81 c4 70 01 00 00    	add    esp,0x170
c000c55f:	5b                   	pop    ebx
c000c560:	5e                   	pop    esi
c000c561:	5f                   	pop    edi
c000c562:	c3                   	ret    

c000c563 <KeInitialiseAtexit()>:
c000c563:	83 ec 10             	sub    esp,0x10
c000c566:	c7 05 80 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x0
c000c570:	6a 60                	push   0x60
c000c572:	6a 00                	push   0x0
c000c574:	68 00 9d 02 c0       	push   0xc0029d00
c000c579:	e8 72 3f ff ff       	call   c00004f0 <memset>
c000c57e:	83 c4 1c             	add    esp,0x1c
c000c581:	c3                   	ret    

c000c582 <KeRegisterAtexit(void (*)(void*), void*)>:
c000c582:	a1 80 9c 02 c0       	mov    eax,ds:0xc0029c80
c000c587:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c58b:	89 14 85 00 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6300],edx
c000c592:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c596:	89 14 85 a0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6360],edx
c000c59d:	40                   	inc    eax
c000c59e:	a3 80 9c 02 c0       	mov    ds:0xc0029c80,eax
c000c5a3:	83 f8 17             	cmp    eax,0x17
c000c5a6:	7e 0d                	jle    c000c5b5 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c5a8:	c7 44 24 04 f0 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021cf0
c000c5b0:	e9 31 27 00 00       	jmp    c000ece6 <KePanic(char const*)>
c000c5b5:	c3                   	ret    

c000c5b6 <KeExecuteAtexit()>:
c000c5b6:	53                   	push   ebx
c000c5b7:	31 db                	xor    ebx,ebx
c000c5b9:	83 ec 08             	sub    esp,0x8
c000c5bc:	39 1d 80 9c 02 c0    	cmp    DWORD PTR ds:0xc0029c80,ebx
c000c5c2:	7e 50                	jle    c000c614 <KeExecuteAtexit()+0x5e>
c000c5c4:	8b 04 9d 00 9d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6300]
c000c5cb:	85 c0                	test   eax,eax
c000c5cd:	74 42                	je     c000c611 <KeExecuteAtexit()+0x5b>
c000c5cf:	51                   	push   ecx
c000c5d0:	50                   	push   eax
c000c5d1:	53                   	push   ebx
c000c5d2:	68 09 1d 02 c0       	push   0xc0021d09
c000c5d7:	e8 88 a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c5dc:	58                   	pop    eax
c000c5dd:	ff 34 9d a0 9c 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6360]
c000c5e4:	ff 14 9d 00 9d 02 c0 	call   DWORD PTR [ebx*4-0x3ffd6300]
c000c5eb:	c7 04 24 2b 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d2b
c000c5f2:	e8 6d a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c5f7:	c7 04 24 bb 20 02 c0 	mov    DWORD PTR [esp],0xc00220bb
c000c5fe:	c7 04 9d 00 9d 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd6300],0x0
c000c609:	e8 56 a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c60e:	83 c4 10             	add    esp,0x10
c000c611:	43                   	inc    ebx
c000c612:	eb a8                	jmp    c000c5bc <KeExecuteAtexit()+0x6>
c000c614:	83 c4 08             	add    esp,0x8
c000c617:	5b                   	pop    ebx
c000c618:	c3                   	ret    

c000c619 <KeDisplaySplashScreen()>:
c000c619:	53                   	push   ebx
c000c61a:	bb 01 00 00 00       	mov    ebx,0x1
c000c61f:	83 ec 08             	sub    esp,0x8
c000c622:	43                   	inc    ebx
c000c623:	0f be 83 2e 1d 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffde2d2]
c000c62a:	85 c0                	test   eax,eax
c000c62c:	74 15                	je     c000c643 <KeDisplaySplashScreen()+0x2a>
c000c62e:	83 ec 0c             	sub    esp,0xc
c000c631:	6a 01                	push   0x1
c000c633:	53                   	push   ebx
c000c634:	6a 00                	push   0x0
c000c636:	6a 0f                	push   0xf
c000c638:	50                   	push   eax
c000c639:	e8 12 d0 00 00       	call   c0019650 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c63e:	83 c4 20             	add    esp,0x20
c000c641:	eb df                	jmp    c000c622 <KeDisplaySplashScreen()+0x9>
c000c643:	83 c4 08             	add    esp,0x8
c000c646:	5b                   	pop    ebx
c000c647:	c3                   	ret    

c000c648 <KeSetBootMessage(char const*)>:
c000c648:	57                   	push   edi
c000c649:	56                   	push   esi
c000c64a:	53                   	push   ebx
c000c64b:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c651:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c658:	68 9e 00 00 00       	push   0x9e
c000c65d:	6a 00                	push   0x0
c000c65f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c663:	56                   	push   esi
c000c664:	e8 87 3e ff ff       	call   c00004f0 <memset>
c000c669:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c66c:	e8 ff 3e ff ff       	call   c0000570 <strlen>
c000c671:	ba 50 00 00 00       	mov    edx,0x50
c000c676:	83 c4 10             	add    esp,0x10
c000c679:	29 c2                	sub    edx,eax
c000c67b:	31 c9                	xor    ecx,ecx
c000c67d:	83 e2 fe             	and    edx,0xfffffffe
c000c680:	01 f2                	add    edx,esi
c000c682:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c687:	84 c0                	test   al,al
c000c689:	74 0a                	je     c000c695 <KeSetBootMessage(char const*)+0x4d>
c000c68b:	80 cc 07             	or     ah,0x7
c000c68e:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c692:	41                   	inc    ecx
c000c693:	eb ed                	jmp    c000c682 <KeSetBootMessage(char const*)+0x3a>
c000c695:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c69a:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c69f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6a1:	50                   	push   eax
c000c6a2:	50                   	push   eax
c000c6a3:	53                   	push   ebx
c000c6a4:	68 43 1d 02 c0       	push   0xc0021d43
c000c6a9:	e8 b6 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6ae:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c6b4:	5b                   	pop    ebx
c000c6b5:	5e                   	pop    esi
c000c6b6:	5f                   	pop    edi
c000c6b7:	c3                   	ret    

c000c6b8 <__cxa_atexit>:
c000c6b8:	31 c0                	xor    eax,eax
c000c6ba:	c3                   	ret    

c000c6bb <__cxa_finalize>:
c000c6bb:	c3                   	ret    

c000c6bc <__stack_chk_fail>:
c000c6bc:	55                   	push   ebp
c000c6bd:	89 e5                	mov    ebp,esp
c000c6bf:	83 ec 10             	sub    esp,0x10
c000c6c2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c6c5:	68 51 1d 02 c0       	push   0xc0021d51
c000c6ca:	e8 95 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6cf:	58                   	pop    eax
c000c6d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c6d3:	5a                   	pop    edx
c000c6d4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c6d7:	68 51 1d 02 c0       	push   0xc0021d51
c000c6dc:	e8 83 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6e1:	c7 04 24 59 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d59
c000c6e8:	e8 f9 25 00 00       	call   c000ece6 <KePanic(char const*)>
c000c6ed:	83 c4 10             	add    esp,0x10
c000c6f0:	c9                   	leave  
c000c6f1:	c3                   	ret    

c000c6f2 <__cxa_pure_virtual>:
c000c6f2:	83 ec 18             	sub    esp,0x18
c000c6f5:	68 71 1d 02 c0       	push   0xc0021d71
c000c6fa:	e8 e7 25 00 00       	call   c000ece6 <KePanic(char const*)>
c000c6ff:	83 c4 1c             	add    esp,0x1c
c000c702:	c3                   	ret    

c000c703 <operator new[](unsigned long)>:
c000c703:	e9 89 22 00 00       	jmp    c000e991 <malloc>

c000c708 <operator delete(void*, unsigned long)>:
c000c708:	e9 a4 22 00 00       	jmp    c000e9b1 <rfree>

c000c70d <operator delete[](void*)>:
c000c70d:	e9 9f 22 00 00       	jmp    c000e9b1 <rfree>

c000c712 <operator delete[](void*, unsigned long)>:
c000c712:	e9 9a 22 00 00       	jmp    c000e9b1 <rfree>
c000c717:	90                   	nop

c000c718 <CUnlockScheduler>:
c000c718:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c71d:	83 e8 01             	sub    eax,0x1
c000c720:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c725:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c72a:	85 c0                	test   eax,eax
c000c72c:	75 02                	jne    c000c730 <CUnlockScheduler+0x18>
c000c72e:	fb                   	sti    
c000c72f:	90                   	nop
c000c730:	90                   	nop
c000c731:	c3                   	ret    
c000c732:	66 90                	xchg   ax,ax

c000c734 <CLockScheduler>:
c000c734:	fa                   	cli    
c000c735:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c73a:	83 c0 01             	add    eax,0x1
c000c73d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c742:	90                   	nop
c000c743:	c3                   	ret    

c000c744 <CPrintf>:
c000c744:	83 ec 0c             	sub    esp,0xc
c000c747:	83 ec 08             	sub    esp,0x8
c000c74a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c74e:	68 84 1d 02 c0       	push   0xc0021d84
c000c753:	e8 0c a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c758:	83 c4 10             	add    esp,0x10
c000c75b:	90                   	nop
c000c75c:	83 c4 0c             	add    esp,0xc
c000c75f:	c3                   	ret    

c000c760 <CmOpen(char const*)>:
c000c760:	57                   	push   edi
c000c761:	56                   	push   esi
c000c762:	53                   	push   ebx
c000c763:	83 ec 1c             	sub    esp,0x1c
c000c766:	6a 30                	push   0x30
c000c768:	e8 24 22 00 00       	call   c000e991 <malloc>
c000c76d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c774:	89 c3                	mov    ebx,eax
c000c776:	e8 16 22 00 00       	call   c000e991 <malloc>
c000c77b:	83 c4 0c             	add    esp,0xc
c000c77e:	89 c6                	mov    esi,eax
c000c780:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000c786:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c78a:	50                   	push   eax
c000c78b:	e8 82 b9 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c790:	83 c4 0c             	add    esp,0xc
c000c793:	89 33                	mov    DWORD PTR [ebx],esi
c000c795:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c799:	50                   	push   eax
c000c79a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c79e:	50                   	push   eax
c000c79f:	56                   	push   esi
c000c7a0:	e8 8d bc ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c000c7a5:	5a                   	pop    edx
c000c7a6:	59                   	pop    ecx
c000c7a7:	6a 01                	push   0x1
c000c7a9:	ff 33                	push   DWORD PTR [ebx]
c000c7ab:	e8 80 b9 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000c7b0:	5e                   	pop    esi
c000c7b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b5:	e8 d7 21 00 00       	call   c000e991 <malloc>
c000c7ba:	5a                   	pop    edx
c000c7bb:	89 c7                	mov    edi,eax
c000c7bd:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c7c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7c3:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7c5:	56                   	push   esi
c000c7c6:	57                   	push   edi
c000c7c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7cf:	50                   	push   eax
c000c7d0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c7d3:	83 c4 14             	add    esp,0x14
c000c7d6:	ff 33                	push   DWORD PTR [ebx]
c000c7d8:	e8 b1 b9 ff ff       	call   c000818e <File::close()>
c000c7dd:	59                   	pop    ecx
c000c7de:	58                   	pop    eax
c000c7df:	6a 13                	push   0x13
c000c7e1:	ff 33                	push   DWORD PTR [ebx]
c000c7e3:	e8 48 b9 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000c7e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7ea:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7ec:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7ef:	57                   	push   edi
c000c7f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7f8:	50                   	push   eax
c000c7f9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c7fc:	83 c4 14             	add    esp,0x14
c000c7ff:	57                   	push   edi
c000c800:	e8 9c 21 00 00       	call   c000e9a1 <free>
c000c805:	83 c4 10             	add    esp,0x10
c000c808:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c80b:	75 10                	jne    c000c81d <CmOpen(char const*)+0xbd>
c000c80d:	83 ec 0c             	sub    esp,0xc
c000c810:	68 87 1d 02 c0       	push   0xc0021d87
c000c815:	e8 cc 24 00 00       	call   c000ece6 <KePanic(char const*)>
c000c81a:	83 c4 10             	add    esp,0x10
c000c81d:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c820:	50                   	push   eax
c000c821:	6a 00                	push   0x0
c000c823:	6a 00                	push   0x0
c000c825:	ff 33                	push   DWORD PTR [ebx]
c000c827:	e8 c2 b9 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c82c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c82e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c830:	89 34 24             	mov    DWORD PTR [esp],esi
c000c833:	57                   	push   edi
c000c834:	6a 00                	push   0x0
c000c836:	6a 2b                	push   0x2b
c000c838:	50                   	push   eax
c000c839:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c83c:	83 c4 1c             	add    esp,0x1c
c000c83f:	6a 00                	push   0x0
c000c841:	6a 00                	push   0x0
c000c843:	ff 33                	push   DWORD PTR [ebx]
c000c845:	e8 a4 b9 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c84a:	83 c4 0c             	add    esp,0xc
c000c84d:	6a 08                	push   0x8
c000c84f:	68 98 1d 02 c0       	push   0xc0021d98
c000c854:	57                   	push   edi
c000c855:	e8 26 3b ff ff       	call   c0000380 <memcmp>
c000c85a:	83 c4 10             	add    esp,0x10
c000c85d:	85 c0                	test   eax,eax
c000c85f:	74 10                	je     c000c871 <CmOpen(char const*)+0x111>
c000c861:	83 ec 0c             	sub    esp,0xc
c000c864:	68 a1 1d 02 c0       	push   0xc0021da1
c000c869:	e8 78 24 00 00       	call   c000ece6 <KePanic(char const*)>
c000c86e:	83 c4 10             	add    esp,0x10
c000c871:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c875:	89 d8                	mov    eax,ebx
c000c877:	83 c4 10             	add    esp,0x10
c000c87a:	5b                   	pop    ebx
c000c87b:	5e                   	pop    esi
c000c87c:	5f                   	pop    edi
c000c87d:	c3                   	ret    

c000c87e <CmClose(Reghive_Tag*)>:
c000c87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c882:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c886:	74 0b                	je     c000c893 <CmClose(Reghive_Tag*)+0x15>
c000c888:	8b 00                	mov    eax,DWORD PTR [eax]
c000c88a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c88e:	e9 fb b8 ff ff       	jmp    c000818e <File::close()>
c000c893:	c3                   	ret    

c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c894:	53                   	push   ebx
c000c895:	83 ec 18             	sub    esp,0x18
c000c898:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c89c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c8a0:	74 29                	je     c000c8cb <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c8a2:	50                   	push   eax
c000c8a3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c8a8:	99                   	cdq    
c000c8a9:	52                   	push   edx
c000c8aa:	50                   	push   eax
c000c8ab:	ff 33                	push   DWORD PTR [ebx]
c000c8ad:	e8 3c b9 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c8b2:	5a                   	pop    edx
c000c8b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8b5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c8b9:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8bb:	51                   	push   ecx
c000c8bc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c8c0:	6a 00                	push   0x0
c000c8c2:	6a 2b                	push   0x2b
c000c8c4:	50                   	push   eax
c000c8c5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c8c8:	83 c4 20             	add    esp,0x20
c000c8cb:	83 c4 18             	add    esp,0x18
c000c8ce:	5b                   	pop    ebx
c000c8cf:	c3                   	ret    

c000c8d0 <CmGetString(Reghive_Tag*, int, char*)>:
c000c8d0:	55                   	push   ebp
c000c8d1:	57                   	push   edi
c000c8d2:	56                   	push   esi
c000c8d3:	53                   	push   ebx
c000c8d4:	31 db                	xor    ebx,ebx
c000c8d6:	83 ec 70             	sub    esp,0x70
c000c8d9:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c8e0:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c8e4:	50                   	push   eax
c000c8e5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c8ec:	55                   	push   ebp
c000c8ed:	e8 a2 ff ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8f2:	83 c4 10             	add    esp,0x10
c000c8f5:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c8fa:	c1 e0 08             	shl    eax,0x8
c000c8fd:	89 c2                	mov    edx,eax
c000c8ff:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c904:	09 d0                	or     eax,edx
c000c906:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c90b:	c1 e0 08             	shl    eax,0x8
c000c90e:	09 d0                	or     eax,edx
c000c910:	74 25                	je     c000c937 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c912:	6b fb 0d             	imul   edi,ebx,0xd
c000c915:	52                   	push   edx
c000c916:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c91a:	52                   	push   edx
c000c91b:	50                   	push   eax
c000c91c:	55                   	push   ebp
c000c91d:	e8 72 ff ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c922:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c926:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c92d:	b9 27 00 00 00       	mov    ecx,0x27
c000c932:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c934:	83 c4 10             	add    esp,0x10
c000c937:	83 c3 03             	add    ebx,0x3
c000c93a:	83 fb 15             	cmp    ebx,0x15
c000c93d:	75 b6                	jne    c000c8f5 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c93f:	83 c4 6c             	add    esp,0x6c
c000c942:	5b                   	pop    ebx
c000c943:	5e                   	pop    esi
c000c944:	5f                   	pop    edi
c000c945:	5d                   	pop    ebp
c000c946:	c3                   	ret    

c000c947 <CmEnterDirectory(Reghive_Tag*, int)>:
c000c947:	83 ec 40             	sub    esp,0x40
c000c94a:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c94e:	50                   	push   eax
c000c94f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c953:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c957:	e8 38 ff ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	83 c8 ff             	or     eax,0xffffffff
c000c962:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c967:	75 19                	jne    c000c982 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c969:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c96e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c973:	c1 e0 08             	shl    eax,0x8
c000c976:	09 c2                	or     edx,eax
c000c978:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c97d:	c1 e0 10             	shl    eax,0x10
c000c980:	09 d0                	or     eax,edx
c000c982:	83 c4 3c             	add    esp,0x3c
c000c985:	c3                   	ret    

c000c986 <CmGetNext(Reghive_Tag*, int)>:
c000c986:	83 ec 40             	sub    esp,0x40
c000c989:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c98d:	50                   	push   eax
c000c98e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c992:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c996:	e8 f9 fe ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c99b:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c9a0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c9a5:	c1 e0 08             	shl    eax,0x8
c000c9a8:	09 c2                	or     edx,eax
c000c9aa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c9af:	83 c4 4c             	add    esp,0x4c
c000c9b2:	c1 e0 10             	shl    eax,0x10
c000c9b5:	09 d0                	or     eax,edx
c000c9b7:	c3                   	ret    

c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000c9b8:	53                   	push   ebx
c000c9b9:	83 ec 18             	sub    esp,0x18
c000c9bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c9c0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c9c4:	74 29                	je     c000c9ef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c9c6:	50                   	push   eax
c000c9c7:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c9cc:	99                   	cdq    
c000c9cd:	52                   	push   edx
c000c9ce:	50                   	push   eax
c000c9cf:	ff 33                	push   DWORD PTR [ebx]
c000c9d1:	e8 18 b8 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c9d6:	5a                   	pop    edx
c000c9d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9d9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c9dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9df:	51                   	push   ecx
c000c9e0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c9e4:	6a 00                	push   0x0
c000c9e6:	6a 2b                	push   0x2b
c000c9e8:	50                   	push   eax
c000c9e9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c9ec:	83 c4 20             	add    esp,0x20
c000c9ef:	83 c4 18             	add    esp,0x18
c000c9f2:	5b                   	pop    ebx
c000c9f3:	c3                   	ret    

c000c9f4 <CmFreeExtent(Reghive_Tag*, int)>:
c000c9f4:	53                   	push   ebx
c000c9f5:	83 ec 3c             	sub    esp,0x3c
c000c9f8:	6a 2b                	push   0x2b
c000c9fa:	6a 00                	push   0x0
c000c9fc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ca00:	53                   	push   ebx
c000ca01:	e8 ea 3a ff ff       	call   c00004f0 <memset>
c000ca06:	83 c4 0c             	add    esp,0xc
c000ca09:	53                   	push   ebx
c000ca0a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca0e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca12:	e8 a1 ff ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ca17:	83 c4 48             	add    esp,0x48
c000ca1a:	5b                   	pop    ebx
c000ca1b:	c3                   	ret    

c000ca1c <CmUpdateHeader(Reghive_Tag*)>:
c000ca1c:	83 ec 0c             	sub    esp,0xc
c000ca1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca23:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000ca27:	74 10                	je     c000ca39 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000ca29:	52                   	push   edx
c000ca2a:	8d 50 05             	lea    edx,[eax+0x5]
c000ca2d:	52                   	push   edx
c000ca2e:	6a 00                	push   0x0
c000ca30:	50                   	push   eax
c000ca31:	e8 82 ff ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ca36:	83 c4 10             	add    esp,0x10
c000ca39:	83 c4 0c             	add    esp,0xc
c000ca3c:	c3                   	ret    

c000ca3d <CmExpand(Reghive_Tag*, int)>:
c000ca3d:	57                   	push   edi
c000ca3e:	56                   	push   esi
c000ca3f:	83 ce ff             	or     esi,0xffffffff
c000ca42:	53                   	push   ebx
c000ca43:	83 ec 30             	sub    esp,0x30
c000ca46:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ca4a:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ca4e:	74 5f                	je     c000caaf <CmExpand(Reghive_Tag*, int)+0x72>
c000ca50:	31 d2                	xor    edx,edx
c000ca52:	31 f6                	xor    esi,esi
c000ca54:	50                   	push   eax
c000ca55:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000ca59:	52                   	push   edx
c000ca5a:	50                   	push   eax
c000ca5b:	ff 33                	push   DWORD PTR [ebx]
c000ca5d:	e8 8c b7 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000ca62:	83 c4 0c             	add    esp,0xc
c000ca65:	6a 2b                	push   0x2b
c000ca67:	6a 00                	push   0x0
c000ca69:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000ca6d:	57                   	push   edi
c000ca6e:	e8 7d 3a ff ff       	call   c00004f0 <memset>
c000ca73:	83 c4 10             	add    esp,0x10
c000ca76:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ca7a:	7d 1b                	jge    c000ca97 <CmExpand(Reghive_Tag*, int)+0x5a>
c000ca7c:	83 ec 0c             	sub    esp,0xc
c000ca7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca81:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000ca85:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca87:	46                   	inc    esi
c000ca88:	51                   	push   ecx
c000ca89:	57                   	push   edi
c000ca8a:	6a 00                	push   0x0
c000ca8c:	6a 2b                	push   0x2b
c000ca8e:	50                   	push   eax
c000ca8f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ca92:	83 c4 20             	add    esp,0x20
c000ca95:	eb df                	jmp    c000ca76 <CmExpand(Reghive_Tag*, int)+0x39>
c000ca97:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ca9b:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000ca9e:	83 ec 0c             	sub    esp,0xc
c000caa1:	01 f2                	add    edx,esi
c000caa3:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000caa6:	53                   	push   ebx
c000caa7:	e8 70 ff ff ff       	call   c000ca1c <CmUpdateHeader(Reghive_Tag*)>
c000caac:	83 c4 10             	add    esp,0x10
c000caaf:	83 c4 30             	add    esp,0x30
c000cab2:	89 f0                	mov    eax,esi
c000cab4:	5b                   	pop    ebx
c000cab5:	5e                   	pop    esi
c000cab6:	5f                   	pop    edi
c000cab7:	c3                   	ret    

c000cab8 <CmFindUnusedExtent(Reghive_Tag*)>:
c000cab8:	55                   	push   ebp
c000cab9:	57                   	push   edi
c000caba:	56                   	push   esi
c000cabb:	53                   	push   ebx
c000cabc:	83 cb ff             	or     ebx,0xffffffff
c000cabf:	83 ec 1c             	sub    esp,0x1c
c000cac2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cac6:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000caca:	74 68                	je     c000cb34 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cacc:	be 2b 00 00 00       	mov    esi,0x2b
c000cad1:	51                   	push   ecx
c000cad2:	31 ff                	xor    edi,edi
c000cad4:	6a 00                	push   0x0
c000cad6:	31 db                	xor    ebx,ebx
c000cad8:	6a 00                	push   0x0
c000cada:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cadd:	e8 0c b7 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000cae8:	76 3b                	jbe    c000cb25 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000caea:	83 ec 0c             	sub    esp,0xc
c000caed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000caf0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000caf4:	8b 10                	mov    edx,DWORD PTR [eax]
c000caf6:	51                   	push   ecx
c000caf7:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000cafb:	51                   	push   ecx
c000cafc:	6a 00                	push   0x0
c000cafe:	6a 01                	push   0x1
c000cb00:	50                   	push   eax
c000cb01:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb04:	83 c4 20             	add    esp,0x20
c000cb07:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000cb0c:	74 26                	je     c000cb34 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cb0e:	43                   	inc    ebx
c000cb0f:	52                   	push   edx
c000cb10:	57                   	push   edi
c000cb11:	56                   	push   esi
c000cb12:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb15:	e8 d4 b6 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000cb1a:	83 c6 2b             	add    esi,0x2b
c000cb1d:	83 d7 00             	adc    edi,0x0
c000cb20:	83 c4 10             	add    esp,0x10
c000cb23:	eb c0                	jmp    c000cae5 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000cb25:	50                   	push   eax
c000cb26:	50                   	push   eax
c000cb27:	6a 40                	push   0x40
c000cb29:	55                   	push   ebp
c000cb2a:	e8 0e ff ff ff       	call   c000ca3d <CmExpand(Reghive_Tag*, int)>
c000cb2f:	83 c4 10             	add    esp,0x10
c000cb32:	89 c3                	mov    ebx,eax
c000cb34:	83 c4 1c             	add    esp,0x1c
c000cb37:	89 d8                	mov    eax,ebx
c000cb39:	5b                   	pop    ebx
c000cb3a:	5e                   	pop    esi
c000cb3b:	5f                   	pop    edi
c000cb3c:	5d                   	pop    ebp
c000cb3d:	c3                   	ret    

c000cb3e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000cb3e:	55                   	push   ebp
c000cb3f:	57                   	push   edi
c000cb40:	56                   	push   esi
c000cb41:	53                   	push   ebx
c000cb42:	81 ec 88 00 00 00    	sub    esp,0x88
c000cb48:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000cb4f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb56:	e8 5d ff ff ff       	call   c000cab8 <CmFindUnusedExtent(Reghive_Tag*)>
c000cb5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cb5f:	83 c4 0c             	add    esp,0xc
c000cb62:	6a 2b                	push   0x2b
c000cb64:	6a 00                	push   0x0
c000cb66:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cb6a:	55                   	push   ebp
c000cb6b:	e8 80 39 ff ff       	call   c00004f0 <memset>
c000cb70:	83 c4 10             	add    esp,0x10
c000cb73:	85 db                	test   ebx,ebx
c000cb75:	74 12                	je     c000cb89 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cb77:	51                   	push   ecx
c000cb78:	55                   	push   ebp
c000cb79:	53                   	push   ebx
c000cb7a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb81:	e8 0e fd ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cb86:	83 c4 10             	add    esp,0x10
c000cb89:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cb8d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cb94:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cb99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb9b:	85 db                	test   ebx,ebx
c000cb9d:	74 49                	je     c000cbe8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cb9f:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cba4:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cba9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbad:	c1 e0 08             	shl    eax,0x8
c000cbb0:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cbb6:	09 c8                	or     eax,ecx
c000cbb8:	74 11                	je     c000cbcb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cbba:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cbbe:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cbc2:	c1 e8 10             	shr    eax,0x10
c000cbc5:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cbc9:	eb 0f                	jmp    c000cbda <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cbcb:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cbd0:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cbd5:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cbda:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cbde:	c1 ea 08             	shr    edx,0x8
c000cbe1:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cbe6:	eb 0f                	jmp    c000cbf7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cbe8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cbed:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cbf2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cbf7:	52                   	push   edx
c000cbf8:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cbfc:	50                   	push   eax
c000cbfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc01:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc08:	e8 ab fd ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	85 db                	test   ebx,ebx
c000cc12:	74 12                	je     c000cc26 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cc14:	50                   	push   eax
c000cc15:	55                   	push   ebp
c000cc16:	53                   	push   ebx
c000cc17:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc1e:	e8 95 fd ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc23:	83 c4 10             	add    esp,0x10
c000cc26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc2a:	83 c4 7c             	add    esp,0x7c
c000cc2d:	5b                   	pop    ebx
c000cc2e:	5e                   	pop    esi
c000cc2f:	5f                   	pop    edi
c000cc30:	5d                   	pop    ebp
c000cc31:	c3                   	ret    

c000cc32 <CmSetString(Reghive_Tag*, int, char const*)>:
c000cc32:	55                   	push   ebp
c000cc33:	57                   	push   edi
c000cc34:	56                   	push   esi
c000cc35:	53                   	push   ebx
c000cc36:	bb 27 00 00 00       	mov    ebx,0x27
c000cc3b:	81 ec 88 00 00 00    	sub    esp,0x88
c000cc41:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cc48:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cc4f:	e8 1c 39 ff ff       	call   c0000570 <strlen>
c000cc54:	8d 48 26             	lea    ecx,[eax+0x26]
c000cc57:	89 c8                	mov    eax,ecx
c000cc59:	99                   	cdq    
c000cc5a:	f7 fb                	idiv   ebx
c000cc5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc60:	83 c4 10             	add    esp,0x10
c000cc63:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cc69:	7e 10                	jle    c000cc7b <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cc6b:	83 ec 0c             	sub    esp,0xc
c000cc6e:	68 b2 1d 02 c0       	push   0xc0021db2
c000cc73:	e8 6e 20 00 00       	call   c000ece6 <KePanic(char const*)>
c000cc78:	83 c4 10             	add    esp,0x10
c000cc7b:	31 ff                	xor    edi,edi
c000cc7d:	50                   	push   eax
c000cc7e:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cc82:	53                   	push   ebx
c000cc83:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc8a:	56                   	push   esi
c000cc8b:	e8 04 fc ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc90:	83 c4 10             	add    esp,0x10
c000cc93:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000cc97:	89 d0                	mov    eax,edx
c000cc99:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000cc9d:	c1 e0 08             	shl    eax,0x8
c000cca0:	09 c2                	or     edx,eax
c000cca2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cca6:	c1 e2 08             	shl    edx,0x8
c000cca9:	09 c2                	or     edx,eax
c000ccab:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ccaf:	7e 76                	jle    c000cd27 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000ccb1:	85 d2                	test   edx,edx
c000ccb3:	75 25                	jne    c000ccda <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000ccb5:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000ccba:	8d 44 24 45          	lea    eax,[esp+0x45]
c000ccbe:	50                   	push   eax
c000ccbf:	6a 00                	push   0x0
c000ccc1:	6a 00                	push   0x0
c000ccc3:	56                   	push   esi
c000ccc4:	e8 75 fe ff ff       	call   c000cb3e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ccc9:	83 c4 10             	add    esp,0x10
c000cccc:	89 c2                	mov    edx,eax
c000ccce:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000ccd1:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000ccd4:	c1 f8 10             	sar    eax,0x10
c000ccd7:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000ccda:	55                   	push   ebp
c000ccdb:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000ccdf:	55                   	push   ebp
c000cce0:	52                   	push   edx
c000cce1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cce5:	56                   	push   esi
c000cce6:	e8 a9 fb ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cceb:	83 c4 0c             	add    esp,0xc
c000ccee:	6a 27                	push   0x27
c000ccf0:	6a 00                	push   0x0
c000ccf2:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000ccf6:	51                   	push   ecx
c000ccf7:	e8 f4 37 ff ff       	call   c00004f0 <memset>
c000ccfc:	83 c4 0c             	add    esp,0xc
c000ccff:	6b c7 27             	imul   eax,edi,0x27
c000cd02:	6a 27                	push   0x27
c000cd04:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000cd0b:	50                   	push   eax
c000cd0c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cd10:	51                   	push   ecx
c000cd11:	e8 6a 39 ff ff       	call   c0000680 <strncpy>
c000cd16:	83 c4 0c             	add    esp,0xc
c000cd19:	55                   	push   ebp
c000cd1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd1e:	52                   	push   edx
c000cd1f:	56                   	push   esi
c000cd20:	e8 93 fc ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cd25:	eb 19                	jmp    c000cd40 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000cd27:	85 d2                	test   edx,edx
c000cd29:	74 18                	je     c000cd43 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000cd2b:	51                   	push   ecx
c000cd2c:	51                   	push   ecx
c000cd2d:	52                   	push   edx
c000cd2e:	56                   	push   esi
c000cd2f:	e8 c0 fc ff ff       	call   c000c9f4 <CmFreeExtent(Reghive_Tag*, int)>
c000cd34:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cd38:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cd3c:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cd40:	83 c4 10             	add    esp,0x10
c000cd43:	47                   	inc    edi
c000cd44:	83 c3 03             	add    ebx,0x3
c000cd47:	83 ff 07             	cmp    edi,0x7
c000cd4a:	0f 85 43 ff ff ff    	jne    c000cc93 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cd50:	50                   	push   eax
c000cd51:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cd55:	50                   	push   eax
c000cd56:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cd5d:	56                   	push   esi
c000cd5e:	e8 55 fc ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cd63:	81 c4 8c 00 00 00    	add    esp,0x8c
c000cd69:	5b                   	pop    ebx
c000cd6a:	5e                   	pop    esi
c000cd6b:	5f                   	pop    edi
c000cd6c:	5d                   	pop    ebp
c000cd6d:	c3                   	ret    

c000cd6e <CmGetMatch(char*, char*, bool, bool*)>:
c000cd6e:	56                   	push   esi
c000cd6f:	53                   	push   ebx
c000cd70:	50                   	push   eax
c000cd71:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cd75:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cd7a:	74 25                	je     c000cda1 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000cd7c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cd7f:	31 db                	xor    ebx,ebx
c000cd81:	50                   	push   eax
c000cd82:	50                   	push   eax
c000cd83:	8d 04 9d 40 3b 02 c0 	lea    eax,[ebx*4-0x3ffdc4c0]
c000cd8a:	50                   	push   eax
c000cd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8f:	e8 bc 39 ff ff       	call   c0000750 <strcmp>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	85 c0                	test   eax,eax
c000cd99:	74 2e                	je     c000cdc9 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd9b:	43                   	inc    ebx
c000cd9c:	83 fb 3f             	cmp    ebx,0x3f
c000cd9f:	75 e0                	jne    c000cd81 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000cda1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cda4:	31 db                	xor    ebx,ebx
c000cda6:	8d 04 9d 40 3b 02 c0 	lea    eax,[ebx*4-0x3ffdc4c0]
c000cdad:	51                   	push   ecx
c000cdae:	51                   	push   ecx
c000cdaf:	50                   	push   eax
c000cdb0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cdb4:	e8 97 39 ff ff       	call   c0000750 <strcmp>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	85 c0                	test   eax,eax
c000cdbe:	74 09                	je     c000cdc9 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cdc0:	43                   	inc    ebx
c000cdc1:	83 fb 3f             	cmp    ebx,0x3f
c000cdc4:	75 e0                	jne    c000cda6 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cdc6:	83 cb ff             	or     ebx,0xffffffff
c000cdc9:	89 d8                	mov    eax,ebx
c000cdcb:	5a                   	pop    edx
c000cdcc:	5b                   	pop    ebx
c000cdcd:	5e                   	pop    esi
c000cdce:	c3                   	ret    

c000cdcf <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cdcf:	55                   	push   ebp
c000cdd0:	31 c0                	xor    eax,eax
c000cdd2:	57                   	push   edi
c000cdd3:	56                   	push   esi
c000cdd4:	53                   	push   ebx
c000cdd5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdd9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cddd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cddf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cde3:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cde6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cdea:	83 fd 1f             	cmp    ebp,0x1f
c000cded:	7f 0b                	jg     c000cdfa <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cdef:	0f b6 c2             	movzx  eax,dl
c000cdf2:	d3 e0                	shl    eax,cl
c000cdf4:	09 07                	or     DWORD PTR [edi],eax
c000cdf6:	b0 01                	mov    al,0x1
c000cdf8:	01 33                	add    DWORD PTR [ebx],esi
c000cdfa:	5b                   	pop    ebx
c000cdfb:	5e                   	pop    esi
c000cdfc:	5f                   	pop    edi
c000cdfd:	5d                   	pop    ebp
c000cdfe:	c3                   	ret    

c000cdff <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cdff:	57                   	push   edi
c000ce00:	56                   	push   esi
c000ce01:	53                   	push   ebx
c000ce02:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ce06:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ce0a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ce0e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ce12:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000ce14:	7c 17                	jl     c000ce2d <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000ce16:	8b 17                	mov    edx,DWORD PTR [edi]
c000ce18:	b8 01 00 00 00       	mov    eax,0x1
c000ce1d:	d3 e0                	shl    eax,cl
c000ce1f:	48                   	dec    eax
c000ce20:	21 d0                	and    eax,edx
c000ce22:	d3 ea                	shr    edx,cl
c000ce24:	89 17                	mov    DWORD PTR [edi],edx
c000ce26:	29 0b                	sub    DWORD PTR [ebx],ecx
c000ce28:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000ce2b:	eb 05                	jmp    c000ce32 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000ce2d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ce30:	31 c0                	xor    eax,eax
c000ce32:	5b                   	pop    ebx
c000ce33:	5e                   	pop    esi
c000ce34:	5f                   	pop    edi
c000ce35:	c3                   	ret    

c000ce36 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000ce36:	83 ec 40             	sub    esp,0x40
c000ce39:	8d 44 24 09          	lea    eax,[esp+0x9]
c000ce3d:	50                   	push   eax
c000ce3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce46:	e8 49 fa ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce4b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ce4f:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000ce53:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000ce57:	89 10                	mov    DWORD PTR [eax],edx
c000ce59:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000ce5c:	83 c4 4c             	add    esp,0x4c
c000ce5f:	c3                   	ret    

c000ce60 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000ce60:	55                   	push   ebp
c000ce61:	57                   	push   edi
c000ce62:	56                   	push   esi
c000ce63:	53                   	push   ebx
c000ce64:	83 ec 40             	sub    esp,0x40
c000ce67:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000ce6b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000ce6f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce73:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000ce77:	53                   	push   ebx
c000ce78:	56                   	push   esi
c000ce79:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ce7d:	e8 12 fa ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce82:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000ce86:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000ce8a:	83 c4 0c             	add    esp,0xc
c000ce8d:	53                   	push   ebx
c000ce8e:	56                   	push   esi
c000ce8f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ce93:	e8 20 fb ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ce98:	83 c4 4c             	add    esp,0x4c
c000ce9b:	5b                   	pop    ebx
c000ce9c:	5e                   	pop    esi
c000ce9d:	5f                   	pop    edi
c000ce9e:	5d                   	pop    ebp
c000ce9f:	c3                   	ret    

c000cea0 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000cea0:	55                   	push   ebp
c000cea1:	57                   	push   edi
c000cea2:	56                   	push   esi
c000cea3:	31 f6                	xor    esi,esi
c000cea5:	53                   	push   ebx
c000cea6:	31 db                	xor    ebx,ebx
c000cea8:	83 ec 40             	sub    esp,0x40
c000ceab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ceb3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cebb:	6a 12                	push   0x12
c000cebd:	68 ee 00 00 00       	push   0xee
c000cec2:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000cec6:	e8 25 36 ff ff       	call   c00004f0 <memset>
c000cecb:	83 c4 10             	add    esp,0x10
c000cece:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ced2:	6a 08                	push   0x8
c000ced4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ced8:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000cedc:	50                   	push   eax
c000cedd:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cee1:	55                   	push   ebp
c000cee2:	57                   	push   edi
c000cee3:	e8 e7 fe ff ff       	call   c000cdcf <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000ceef:	50                   	push   eax
c000cef0:	6a 06                	push   0x6
c000cef2:	55                   	push   ebp
c000cef3:	57                   	push   edi
c000cef4:	e8 06 ff ff ff       	call   c000cdff <CmGetShift(unsigned int*, int*, int, bool*)>
c000cef9:	83 c4 10             	add    esp,0x10
c000cefc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cf01:	74 07                	je     c000cf0a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000cf03:	46                   	inc    esi
c000cf04:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000cf08:	eb e1                	jmp    c000ceeb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000cf0a:	43                   	inc    ebx
c000cf0b:	83 fb 12             	cmp    ebx,0x12
c000cf0e:	75 c2                	jne    c000ced2 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000cf10:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cf14:	31 db                	xor    ebx,ebx
c000cf16:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000cf19:	50                   	push   eax
c000cf1a:	50                   	push   eax
c000cf1b:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000cf20:	43                   	inc    ebx
c000cf21:	8d 04 85 40 3b 02 c0 	lea    eax,[eax*4-0x3ffdc4c0]
c000cf28:	50                   	push   eax
c000cf29:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000cf2d:	e8 0e 39 ff ff       	call   c0000840 <strcat>
c000cf32:	83 c4 10             	add    esp,0x10
c000cf35:	83 fb 18             	cmp    ebx,0x18
c000cf38:	75 df                	jne    c000cf19 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000cf3a:	83 c4 3c             	add    esp,0x3c
c000cf3d:	31 c0                	xor    eax,eax
c000cf3f:	5b                   	pop    ebx
c000cf40:	5e                   	pop    esi
c000cf41:	5f                   	pop    edi
c000cf42:	5d                   	pop    ebp
c000cf43:	c3                   	ret    

c000cf44 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000cf44:	83 ec 40             	sub    esp,0x40
c000cf47:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cf4b:	50                   	push   eax
c000cf4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf50:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf54:	e8 3b f9 ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cf59:	58                   	pop    eax
c000cf5a:	5a                   	pop    edx
c000cf5b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000cf5f:	8d 44 24 15          	lea    eax,[esp+0x15]
c000cf63:	50                   	push   eax
c000cf64:	e8 37 ff ff ff       	call   c000cea0 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000cf69:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000cf6e:	83 c4 4c             	add    esp,0x4c
c000cf71:	c3                   	ret    

c000cf72 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000cf72:	55                   	push   ebp
c000cf73:	57                   	push   edi
c000cf74:	56                   	push   esi
c000cf75:	53                   	push   ebx
c000cf76:	31 db                	xor    ebx,ebx
c000cf78:	83 ec 70             	sub    esp,0x70
c000cf7b:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000cf82:	6a 30                	push   0x30
c000cf84:	6a 00                	push   0x0
c000cf86:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000cf8a:	56                   	push   esi
c000cf8b:	e8 60 35 ff ff       	call   c00004f0 <memset>
c000cf90:	83 c4 10             	add    esp,0x10
c000cf93:	83 ec 0c             	sub    esp,0xc
c000cf96:	57                   	push   edi
c000cf97:	e8 d4 35 ff ff       	call   c0000570 <strlen>
c000cf9c:	83 c4 10             	add    esp,0x10
c000cf9f:	39 d8                	cmp    eax,ebx
c000cfa1:	76 16                	jbe    c000cfb9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000cfa3:	83 ec 0c             	sub    esp,0xc
c000cfa6:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000cfaa:	50                   	push   eax
c000cfab:	e8 80 39 ff ff       	call   c0000930 <toupper>
c000cfb0:	83 c4 10             	add    esp,0x10
c000cfb3:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cfb6:	43                   	inc    ebx
c000cfb7:	eb da                	jmp    c000cf93 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000cfb9:	31 f6                	xor    esi,esi
c000cfbb:	52                   	push   edx
c000cfbc:	31 ff                	xor    edi,edi
c000cfbe:	6a 18                	push   0x18
c000cfc0:	6a 3f                	push   0x3f
c000cfc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cfc6:	50                   	push   eax
c000cfc7:	e8 24 35 ff ff       	call   c00004f0 <memset>
c000cfcc:	83 c4 10             	add    esp,0x10
c000cfcf:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000cfd3:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000cfd7:	84 c0                	test   al,al
c000cfd9:	0f 84 b0 00 00 00    	je     c000d08f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000cfdf:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000cfe3:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000cfe8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000cfec:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000cff1:	8d 6e 01             	lea    ebp,[esi+0x1]
c000cff4:	83 ec 0c             	sub    esp,0xc
c000cff7:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000cffb:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000cfff:	53                   	push   ebx
c000d000:	e8 6b 35 ff ff       	call   c0000570 <strlen>
c000d005:	83 c4 10             	add    esp,0x10
c000d008:	85 c0                	test   eax,eax
c000d00a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d00e:	74 0b                	je     c000d01b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000d010:	50                   	push   eax
c000d011:	6a 01                	push   0x1
c000d013:	53                   	push   ebx
c000d014:	8d 44 24 20          	lea    eax,[esp+0x20]
c000d018:	50                   	push   eax
c000d019:	eb 0a                	jmp    c000d025 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000d01b:	50                   	push   eax
c000d01c:	6a 00                	push   0x0
c000d01e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000d022:	50                   	push   eax
c000d023:	6a 00                	push   0x0
c000d025:	e8 44 fd ff ff       	call   c000cd6e <CmGetMatch(char*, char*, bool, bool*)>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	83 f8 ff             	cmp    eax,0xffffffff
c000d030:	75 1a                	jne    c000d04c <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000d032:	83 ec 0c             	sub    esp,0xc
c000d035:	68 c7 1d 02 c0       	push   0xc0021dc7
c000d03a:	e8 a7 1c 00 00       	call   c000ece6 <KePanic(char const*)>
c000d03f:	83 c4 10             	add    esp,0x10
c000d042:	b8 02 00 00 00       	mov    eax,0x2
c000d047:	e9 bc 00 00 00       	jmp    c000d108 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d04c:	83 ff 18             	cmp    edi,0x18
c000d04f:	75 1a                	jne    c000d06b <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000d051:	83 ec 0c             	sub    esp,0xc
c000d054:	68 dc 1d 02 c0       	push   0xc0021ddc
c000d059:	e8 88 1c 00 00       	call   c000ece6 <KePanic(char const*)>
c000d05e:	83 c4 10             	add    esp,0x10
c000d061:	b8 01 00 00 00       	mov    eax,0x1
c000d066:	e9 9d 00 00 00       	jmp    c000d108 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d06b:	47                   	inc    edi
c000d06c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d071:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d075:	74 02                	je     c000d079 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000d077:	89 ee                	mov    esi,ebp
c000d079:	83 ec 0c             	sub    esp,0xc
c000d07c:	53                   	push   ebx
c000d07d:	e8 ee 34 ff ff       	call   c0000570 <strlen>
c000d082:	83 c4 10             	add    esp,0x10
c000d085:	85 c0                	test   eax,eax
c000d087:	74 06                	je     c000d08f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d089:	46                   	inc    esi
c000d08a:	e9 40 ff ff ff       	jmp    c000cfcf <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d08f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d097:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d09f:	31 f6                	xor    esi,esi
c000d0a1:	50                   	push   eax
c000d0a2:	31 ff                	xor    edi,edi
c000d0a4:	6a 12                	push   0x12
c000d0a6:	68 ee 00 00 00       	push   0xee
c000d0ab:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d0b2:	e8 39 34 ff ff       	call   c00004f0 <memset>
c000d0b7:	83 c4 10             	add    esp,0x10
c000d0ba:	83 fe 17             	cmp    esi,0x17
c000d0bd:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d0c1:	7e 26                	jle    c000d0e9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000d0c3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d0c7:	50                   	push   eax
c000d0c8:	6a 08                	push   0x8
c000d0ca:	55                   	push   ebp
c000d0cb:	53                   	push   ebx
c000d0cc:	e8 2e fd ff ff       	call   c000cdff <CmGetShift(unsigned int*, int*, int, bool*)>
c000d0d1:	83 c4 10             	add    esp,0x10
c000d0d4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d0d9:	74 26                	je     c000d101 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000d0db:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d0e2:	4e                   	dec    esi
c000d0e3:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d0e6:	47                   	inc    edi
c000d0e7:	eb 1c                	jmp    c000d105 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d0e9:	6a 06                	push   0x6
c000d0eb:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000d0f0:	50                   	push   eax
c000d0f1:	55                   	push   ebp
c000d0f2:	53                   	push   ebx
c000d0f3:	e8 d7 fc ff ff       	call   c000cdcf <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d0f8:	83 c4 10             	add    esp,0x10
c000d0fb:	84 c0                	test   al,al
c000d0fd:	75 06                	jne    c000d105 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d0ff:	eb c2                	jmp    c000d0c3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000d101:	31 c0                	xor    eax,eax
c000d103:	eb 03                	jmp    c000d108 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d105:	46                   	inc    esi
c000d106:	eb b2                	jmp    c000d0ba <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000d108:	83 c4 6c             	add    esp,0x6c
c000d10b:	5b                   	pop    ebx
c000d10c:	5e                   	pop    esi
c000d10d:	5f                   	pop    edi
c000d10e:	5d                   	pop    ebp
c000d10f:	c3                   	ret    

c000d110 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d110:	53                   	push   ebx
c000d111:	83 ec 3c             	sub    esp,0x3c
c000d114:	6a 2b                	push   0x2b
c000d116:	6a 00                	push   0x0
c000d118:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d11c:	53                   	push   ebx
c000d11d:	e8 ce 33 ff ff       	call   c00004f0 <memset>
c000d122:	58                   	pop    eax
c000d123:	5a                   	pop    edx
c000d124:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d128:	50                   	push   eax
c000d129:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d12d:	e8 40 fe ff ff       	call   c000cf72 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d132:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d137:	83 c4 0c             	add    esp,0xc
c000d13a:	6a 15                	push   0x15
c000d13c:	6a 00                	push   0x0
c000d13e:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d142:	50                   	push   eax
c000d143:	e8 a8 33 ff ff       	call   c00004f0 <memset>
c000d148:	53                   	push   ebx
c000d149:	6a 00                	push   0x0
c000d14b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d14f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d153:	e8 e6 f9 ff ff       	call   c000cb3e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d158:	83 c4 58             	add    esp,0x58
c000d15b:	5b                   	pop    ebx
c000d15c:	c3                   	ret    

c000d15d <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d15d:	56                   	push   esi
c000d15e:	53                   	push   ebx
c000d15f:	83 ec 48             	sub    esp,0x48
c000d162:	6a 12                	push   0x12
c000d164:	68 ff 00 00 00       	push   0xff
c000d169:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d16d:	56                   	push   esi
c000d16e:	e8 7d 33 ff ff       	call   c00004f0 <memset>
c000d173:	5a                   	pop    edx
c000d174:	59                   	pop    ecx
c000d175:	56                   	push   esi
c000d176:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d17a:	e8 f3 fd ff ff       	call   c000cf72 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d17f:	83 c4 10             	add    esp,0x10
c000d182:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d186:	85 db                	test   ebx,ebx
c000d188:	74 42                	je     c000d1cc <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d18a:	50                   	push   eax
c000d18b:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d18f:	50                   	push   eax
c000d190:	53                   	push   ebx
c000d191:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d195:	e8 fa f6 ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d19a:	83 c4 0c             	add    esp,0xc
c000d19d:	6a 12                	push   0x12
c000d19f:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d1a3:	50                   	push   eax
c000d1a4:	56                   	push   esi
c000d1a5:	e8 d6 31 ff ff       	call   c0000380 <memcmp>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	85 c0                	test   eax,eax
c000d1af:	74 1e                	je     c000d1cf <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d1b1:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d1b6:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d1bb:	c1 e3 08             	shl    ebx,0x8
c000d1be:	09 d8                	or     eax,ebx
c000d1c0:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d1c5:	c1 e3 10             	shl    ebx,0x10
c000d1c8:	09 c3                	or     ebx,eax
c000d1ca:	eb ba                	jmp    c000d186 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d1cc:	83 cb ff             	or     ebx,0xffffffff
c000d1cf:	89 d8                	mov    eax,ebx
c000d1d1:	83 c4 44             	add    esp,0x44
c000d1d4:	5b                   	pop    ebx
c000d1d5:	5e                   	pop    esi
c000d1d6:	c3                   	ret    

c000d1d7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d1d7:	57                   	push   edi
c000d1d8:	56                   	push   esi
c000d1d9:	53                   	push   ebx
c000d1da:	83 ec 34             	sub    esp,0x34
c000d1dd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d1e1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d1e5:	6a 2b                	push   0x2b
c000d1e7:	6a 00                	push   0x0
c000d1e9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d1ed:	53                   	push   ebx
c000d1ee:	e8 fd 32 ff ff       	call   c00004f0 <memset>
c000d1f3:	58                   	pop    eax
c000d1f4:	5a                   	pop    edx
c000d1f5:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d1f9:	50                   	push   eax
c000d1fa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d1fe:	e8 6f fd ff ff       	call   c000cf72 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d203:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000d207:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d20b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d20f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d213:	53                   	push   ebx
c000d214:	6a 00                	push   0x0
c000d216:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d21a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d21e:	e8 1b f9 ff ff       	call   c000cb3e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d223:	83 c4 50             	add    esp,0x50
c000d226:	5b                   	pop    ebx
c000d227:	5e                   	pop    esi
c000d228:	5f                   	pop    edi
c000d229:	c3                   	ret    

c000d22a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d22a:	55                   	push   ebp
c000d22b:	57                   	push   edi
c000d22c:	56                   	push   esi
c000d22d:	53                   	push   ebx
c000d22e:	83 ec 40             	sub    esp,0x40
c000d231:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d235:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d239:	6a 2b                	push   0x2b
c000d23b:	6a 00                	push   0x0
c000d23d:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d241:	56                   	push   esi
c000d242:	e8 a9 32 ff ff       	call   c00004f0 <memset>
c000d247:	5f                   	pop    edi
c000d248:	89 ef                	mov    edi,ebp
c000d24a:	58                   	pop    eax
c000d24b:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d24f:	50                   	push   eax
c000d250:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d254:	e8 19 fd ff ff       	call   c000cf72 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d259:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d25e:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d263:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d268:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d26d:	83 c4 10             	add    esp,0x10
c000d270:	85 ed                	test   ebp,ebp
c000d272:	74 14                	je     c000d288 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d274:	51                   	push   ecx
c000d275:	51                   	push   ecx
c000d276:	57                   	push   edi
c000d277:	53                   	push   ebx
c000d278:	e8 09 f7 ff ff       	call   c000c986 <CmGetNext(Reghive_Tag*, int)>
c000d27d:	83 c4 10             	add    esp,0x10
c000d280:	85 c0                	test   eax,eax
c000d282:	74 04                	je     c000d288 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d284:	89 c7                	mov    edi,eax
c000d286:	eb e8                	jmp    c000d270 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d288:	56                   	push   esi
c000d289:	6a 00                	push   0x0
c000d28b:	57                   	push   edi
c000d28c:	53                   	push   ebx
c000d28d:	e8 ac f8 ff ff       	call   c000cb3e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d292:	83 c4 0c             	add    esp,0xc
c000d295:	89 c7                	mov    edi,eax
c000d297:	56                   	push   esi
c000d298:	50                   	push   eax
c000d299:	53                   	push   ebx
c000d29a:	e8 f5 f5 ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d29f:	58                   	pop    eax
c000d2a0:	5a                   	pop    edx
c000d2a1:	6a 6c                	push   0x6c
c000d2a3:	6a 00                	push   0x0
c000d2a5:	6a 00                	push   0x0
c000d2a7:	68 ed 1d 02 c0       	push   0xc0021ded
c000d2ac:	57                   	push   edi
c000d2ad:	53                   	push   ebx
c000d2ae:	e8 24 ff ff ff       	call   c000d1d7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d2b3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d2b7:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d2bb:	c1 e8 10             	shr    eax,0x10
c000d2be:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d2c2:	83 c4 1c             	add    esp,0x1c
c000d2c5:	56                   	push   esi
c000d2c6:	57                   	push   edi
c000d2c7:	53                   	push   ebx
c000d2c8:	e8 eb f6 ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d2cd:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d2d2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d2d7:	c1 e0 08             	shl    eax,0x8
c000d2da:	09 c2                	or     edx,eax
c000d2dc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d2e1:	83 c4 4c             	add    esp,0x4c
c000d2e4:	c1 e0 10             	shl    eax,0x10
c000d2e7:	5b                   	pop    ebx
c000d2e8:	09 d0                	or     eax,edx
c000d2ea:	5e                   	pop    esi
c000d2eb:	5f                   	pop    edi
c000d2ec:	5d                   	pop    ebp
c000d2ed:	c3                   	ret    

c000d2ee <zStrtok(char*, char const*)>:
c000d2ee:	55                   	push   ebp
c000d2ef:	57                   	push   edi
c000d2f0:	56                   	push   esi
c000d2f1:	53                   	push   ebx
c000d2f2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d2fa:	85 db                	test   ebx,ebx
c000d2fc:	74 2f                	je     c000d32d <zStrtok(char*, char const*)+0x3f>
c000d2fe:	85 c0                	test   eax,eax
c000d300:	75 09                	jne    c000d30b <zStrtok(char*, char const*)+0x1d>
c000d302:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c000d307:	85 c0                	test   eax,eax
c000d309:	74 50                	je     c000d35b <zStrtok(char*, char const*)+0x6d>
c000d30b:	31 c9                	xor    ecx,ecx
c000d30d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d311:	74 03                	je     c000d316 <zStrtok(char*, char const*)+0x28>
c000d313:	41                   	inc    ecx
c000d314:	eb f7                	jmp    c000d30d <zStrtok(char*, char const*)+0x1f>
c000d316:	31 d2                	xor    edx,edx
c000d318:	39 ca                	cmp    edx,ecx
c000d31a:	74 15                	je     c000d331 <zStrtok(char*, char const*)+0x43>
c000d31c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d320:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d323:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d326:	39 ee                	cmp    esi,ebp
c000d328:	74 13                	je     c000d33d <zStrtok(char*, char const*)+0x4f>
c000d32a:	42                   	inc    edx
c000d32b:	eb eb                	jmp    c000d318 <zStrtok(char*, char const*)+0x2a>
c000d32d:	31 c0                	xor    eax,eax
c000d32f:	eb 2a                	jmp    c000d35b <zStrtok(char*, char const*)+0x6d>
c000d331:	c7 05 60 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029d60,0x0
c000d33b:	eb 1e                	jmp    c000d35b <zStrtok(char*, char const*)+0x6d>
c000d33d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d340:	39 ce                	cmp    esi,ecx
c000d342:	75 0a                	jne    c000d34e <zStrtok(char*, char const*)+0x60>
c000d344:	40                   	inc    eax
c000d345:	a3 60 9d 02 c0       	mov    ds:0xc0029d60,eax
c000d34a:	89 d8                	mov    eax,ebx
c000d34c:	eb 0d                	jmp    c000d35b <zStrtok(char*, char const*)+0x6d>
c000d34e:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d352:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d355:	89 15 60 9d 02 c0    	mov    DWORD PTR ds:0xc0029d60,edx
c000d35b:	5b                   	pop    ebx
c000d35c:	5e                   	pop    esi
c000d35d:	5f                   	pop    edi
c000d35e:	5d                   	pop    ebp
c000d35f:	c3                   	ret    

c000d360 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d360:	57                   	push   edi
c000d361:	56                   	push   esi
c000d362:	53                   	push   ebx
c000d363:	81 ec 08 01 00 00    	sub    esp,0x108
c000d369:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d370:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d377:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d37b:	53                   	push   ebx
c000d37c:	e8 bf 32 ff ff       	call   c0000640 <strcpy>
c000d381:	59                   	pop    ecx
c000d382:	5e                   	pop    esi
c000d383:	68 25 2b 02 c0       	push   0xc0022b25
c000d388:	53                   	push   ebx
c000d389:	bb 01 00 00 00       	mov    ebx,0x1
c000d38e:	e8 5b ff ff ff       	call   c000d2ee <zStrtok(char*, char const*)>
c000d393:	83 c4 10             	add    esp,0x10
c000d396:	85 c0                	test   eax,eax
c000d398:	74 3b                	je     c000d3d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d39a:	52                   	push   edx
c000d39b:	50                   	push   eax
c000d39c:	6a 01                	push   0x1
c000d39e:	57                   	push   edi
c000d39f:	e8 b9 fd ff ff       	call   c000d15d <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d3a4:	59                   	pop    ecx
c000d3a5:	89 c3                	mov    ebx,eax
c000d3a7:	5e                   	pop    esi
c000d3a8:	68 25 2b 02 c0       	push   0xc0022b25
c000d3ad:	6a 00                	push   0x0
c000d3af:	e8 3a ff ff ff       	call   c000d2ee <zStrtok(char*, char const*)>
c000d3b4:	83 c4 10             	add    esp,0x10
c000d3b7:	89 c6                	mov    esi,eax
c000d3b9:	85 c0                	test   eax,eax
c000d3bb:	74 18                	je     c000d3d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d3bd:	52                   	push   edx
c000d3be:	52                   	push   edx
c000d3bf:	53                   	push   ebx
c000d3c0:	57                   	push   edi
c000d3c1:	e8 81 f5 ff ff       	call   c000c947 <CmEnterDirectory(Reghive_Tag*, int)>
c000d3c6:	83 c4 10             	add    esp,0x10
c000d3c9:	89 c3                	mov    ebx,eax
c000d3cb:	83 f8 ff             	cmp    eax,0xffffffff
c000d3ce:	74 05                	je     c000d3d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d3d0:	50                   	push   eax
c000d3d1:	56                   	push   esi
c000d3d2:	53                   	push   ebx
c000d3d3:	eb c9                	jmp    c000d39e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d3d5:	81 c4 00 01 00 00    	add    esp,0x100
c000d3db:	89 d8                	mov    eax,ebx
c000d3dd:	5b                   	pop    ebx
c000d3de:	5e                   	pop    esi
c000d3df:	5f                   	pop    edi
c000d3e0:	c3                   	ret    

c000d3e1 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d3e1:	55                   	push   ebp
c000d3e2:	57                   	push   edi
c000d3e3:	56                   	push   esi
c000d3e4:	53                   	push   ebx
c000d3e5:	83 ec 5c             	sub    esp,0x5c
c000d3e8:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d3ec:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d3f0:	85 db                	test   ebx,ebx
c000d3f2:	0f 8e 84 00 00 00    	jle    c000d47c <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d3f8:	31 ed                	xor    ebp,ebp
c000d3fa:	57                   	push   edi
c000d3fb:	6a 32                	push   0x32
c000d3fd:	6a 00                	push   0x0
c000d3ff:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d403:	57                   	push   edi
c000d404:	e8 e7 30 ff ff       	call   c00004f0 <memset>
c000d409:	83 c4 0c             	add    esp,0xc
c000d40c:	57                   	push   edi
c000d40d:	53                   	push   ebx
c000d40e:	56                   	push   esi
c000d40f:	e8 30 fb ff ff       	call   c000cf44 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d414:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d418:	83 c4 10             	add    esp,0x10
c000d41b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d41f:	7d 13                	jge    c000d434 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d421:	83 ec 0c             	sub    esp,0xc
c000d424:	45                   	inc    ebp
c000d425:	68 ae 2f 02 c0       	push   0xc0022fae
c000d42a:	e8 35 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d42f:	83 c4 10             	add    esp,0x10
c000d432:	eb e7                	jmp    c000d41b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d434:	51                   	push   ecx
c000d435:	57                   	push   edi
c000d436:	53                   	push   ebx
c000d437:	68 f3 1d 02 c0       	push   0xc0021df3
c000d43c:	e8 23 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d441:	83 c4 10             	add    esp,0x10
c000d444:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d449:	75 1e                	jne    c000d469 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d44b:	52                   	push   edx
c000d44c:	52                   	push   edx
c000d44d:	53                   	push   ebx
c000d44e:	56                   	push   esi
c000d44f:	e8 f3 f4 ff ff       	call   c000c947 <CmEnterDirectory(Reghive_Tag*, int)>
c000d454:	83 c4 0c             	add    esp,0xc
c000d457:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d45b:	8d 51 04             	lea    edx,[ecx+0x4]
c000d45e:	52                   	push   edx
c000d45f:	50                   	push   eax
c000d460:	56                   	push   esi
c000d461:	e8 7b ff ff ff       	call   c000d3e1 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d466:	83 c4 10             	add    esp,0x10
c000d469:	50                   	push   eax
c000d46a:	50                   	push   eax
c000d46b:	53                   	push   ebx
c000d46c:	56                   	push   esi
c000d46d:	e8 14 f5 ff ff       	call   c000c986 <CmGetNext(Reghive_Tag*, int)>
c000d472:	83 c4 10             	add    esp,0x10
c000d475:	89 c3                	mov    ebx,eax
c000d477:	e9 74 ff ff ff       	jmp    c000d3f0 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d47c:	83 c4 5c             	add    esp,0x5c
c000d47f:	5b                   	pop    ebx
c000d480:	5e                   	pop    esi
c000d481:	5f                   	pop    edi
c000d482:	5d                   	pop    ebp
c000d483:	c3                   	ret    

c000d484 <CmSplitFinalSlashInPlace(char*)>:
c000d484:	53                   	push   ebx
c000d485:	83 ec 14             	sub    esp,0x14
c000d488:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d48c:	53                   	push   ebx
c000d48d:	e8 de 30 ff ff       	call   c0000570 <strlen>
c000d492:	83 c4 10             	add    esp,0x10
c000d495:	48                   	dec    eax
c000d496:	85 c0                	test   eax,eax
c000d498:	74 15                	je     c000d4af <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d49a:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d49d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4a1:	75 09                	jne    c000d4ac <CmSplitFinalSlashInPlace(char*)+0x28>
c000d4a3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d4a6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d4aa:	eb 05                	jmp    c000d4b1 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d4ac:	48                   	dec    eax
c000d4ad:	eb e7                	jmp    c000d496 <CmSplitFinalSlashInPlace(char*)+0x12>
c000d4af:	31 c0                	xor    eax,eax
c000d4b1:	83 c4 08             	add    esp,0x8
c000d4b4:	5b                   	pop    ebx
c000d4b5:	c3                   	ret    
c000d4b6:	66 90                	xchg   ax,ax

c000d4b8 <Krnl::handlePowerButton()>:
c000d4b8:	83 ec 0c             	sub    esp,0xc
c000d4bb:	e8 38 21 00 00       	call   c000f5f8 <KeHandlePowerButton()>
c000d4c0:	90                   	nop
c000d4c1:	83 c4 0c             	add    esp,0xc
c000d4c4:	c3                   	ret    
c000d4c5:	8d 76 00             	lea    esi,[esi+0x0]

c000d4c8 <Krnl::handleSleepButton()>:
c000d4c8:	83 ec 0c             	sub    esp,0xc
c000d4cb:	e8 40 21 00 00       	call   c000f610 <KeHandleSleepButton()>
c000d4d0:	90                   	nop
c000d4d1:	83 c4 0c             	add    esp,0xc
c000d4d4:	c3                   	ret    
c000d4d5:	90                   	nop

c000d4d6 <Computer::close(int, int, void*)>:
c000d4d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d4db:	c3                   	ret    

c000d4dc <Computer::open(int, int, void*)>:
c000d4dc:	56                   	push   esi
c000d4dd:	53                   	push   ebx
c000d4de:	83 ec 04             	sub    esp,0x4
c000d4e1:	f6 05 90 bd 02 c0 04 	test   BYTE PTR ds:0xc002bd90,0x4
c000d4e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4ec:	0f 94 05 20 42 02 c0 	sete   BYTE PTR ds:0xc0024220
c000d4f3:	39 1d 70 9d 02 c0    	cmp    DWORD PTR ds:0xc0029d70,ebx
c000d4f9:	74 10                	je     c000d50b <Computer::open(int, int, void*)+0x2f>
c000d4fb:	83 ec 0c             	sub    esp,0xc
c000d4fe:	68 00 1e 02 c0       	push   0xc0021e00
c000d503:	e8 de 17 00 00       	call   c000ece6 <KePanic(char const*)>
c000d508:	83 c4 10             	add    esp,0x10
c000d50b:	83 ec 0c             	sub    esp,0xc
c000d50e:	68 b8 1e 02 c0       	push   0xc0021eb8
c000d513:	e8 30 f1 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d518:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d51f:	e8 6d 14 00 00       	call   c000e991 <malloc>
c000d524:	89 04 24             	mov    DWORD PTR [esp],eax
c000d527:	89 c6                	mov    esi,eax
c000d529:	e8 66 e7 ff ff       	call   c000bc94 <ACPI::ACPI()>
c000d52e:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d534:	58                   	pop    eax
c000d535:	5a                   	pop    edx
c000d536:	56                   	push   esi
c000d537:	53                   	push   ebx
c000d538:	e8 01 bb ff ff       	call   c000903e <Device::addChild(Device*)>
c000d53d:	c7 04 24 d0 1e 02 c0 	mov    DWORD PTR [esp],0xc0021ed0
c000d544:	e8 ff f0 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d549:	e8 0c a7 00 00       	call   c0017c5a <HalEnableNMI()>
c000d54e:	e8 59 99 00 00       	call   c0016eac <HalDetectFeatures()>
c000d553:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d55a:	e8 32 14 00 00       	call   c000e991 <malloc>
c000d55f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d562:	89 c6                	mov    esi,eax
c000d564:	e8 d3 b1 00 00       	call   c001873c <CPU::CPU()>
c000d569:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d56f:	59                   	pop    ecx
c000d570:	58                   	pop    eax
c000d571:	56                   	push   esi
c000d572:	53                   	push   ebx
c000d573:	e8 c6 ba ff ff       	call   c000903e <Device::addChild(Device*)>
c000d578:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d57c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d582:	8b 10                	mov    edx,DWORD PTR [eax]
c000d584:	51                   	push   ecx
c000d585:	6a 00                	push   0x0
c000d587:	6a 00                	push   0x0
c000d589:	50                   	push   eax
c000d58a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d58d:	83 c4 14             	add    esp,0x14
c000d590:	68 2c 1e 02 c0       	push   0xc0021e2c
c000d595:	e8 ae f0 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d59a:	e8 d3 ad 00 00       	call   c0018372 <HalInitialiseCoprocessor()>
c000d59f:	c7 04 24 ea 1e 02 c0 	mov    DWORD PTR [esp],0xc0021eea
c000d5a6:	e8 9d f0 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d5ab:	c7 04 24 c2 d5 00 c0 	mov    DWORD PTR [esp],0xc000d5c2
c000d5b2:	e8 8d 7e 00 00       	call   c0015444 <setupMultitasking(void (*)())>
c000d5b7:	83 c4 14             	add    esp,0x14
c000d5ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d5bf:	5b                   	pop    ebx
c000d5c0:	5e                   	pop    esi
c000d5c1:	c3                   	ret    

c000d5c2 <KeFirstTask()>:
c000d5c2:	53                   	push   ebx
c000d5c3:	83 ec 14             	sub    esp,0x14
c000d5c6:	fb                   	sti    
c000d5c7:	68 05 1f 02 c0       	push   0xc0021f05
c000d5cc:	e8 77 f0 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d5d1:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d5d8:	e8 b4 13 00 00       	call   c000e991 <malloc>
c000d5dd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d5e4:	89 c3                	mov    ebx,eax
c000d5e6:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000d5eb:	50                   	push   eax
c000d5ec:	68 1e 1f 02 c0       	push   0xc0021f1e
c000d5f1:	6a 01                	push   0x1
c000d5f3:	53                   	push   ebx
c000d5f4:	e8 f7 7a 00 00       	call   c00150f0 <Process::Process(bool, char const*, Process*, char**)>
c000d5f9:	83 c4 20             	add    esp,0x20
c000d5fc:	68 ff 00 00 00       	push   0xff
c000d601:	6a 00                	push   0x0
c000d603:	68 b1 e2 00 c0       	push   0xc000e2b1
c000d608:	53                   	push   ebx
c000d609:	e8 0a 7d 00 00       	call   c0015318 <Process::createThread(void (*)(void*), void*, int)>
c000d60e:	8b 15 d8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6d8
c000d614:	6a 7a                	push   0x7a
c000d616:	6a 00                	push   0x0
c000d618:	68 e0 5b 01 c0       	push   0xc0015be0
c000d61d:	52                   	push   edx
c000d61e:	e8 f5 7c 00 00       	call   c0015318 <Process::createThread(void (*)(void*), void*, int)>
c000d623:	83 c4 14             	add    esp,0x14
c000d626:	a3 90 c6 02 c0       	mov    ds:0xc002c690,eax
c000d62b:	68 50 1e 02 c0       	push   0xc0021e50
c000d630:	e8 13 f0 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d635:	c6 05 75 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029d75,0x1
c000d63c:	e8 db 20 00 00       	call   c000f71c <KeInitRand()>
c000d641:	e8 31 89 00 00       	call   c0015f77 <Vm::initialise8086()>
c000d646:	e8 a5 a7 ff ff       	call   c0007df0 <Fs::initVFS()>
c000d64b:	c7 04 24 d4 1b 02 c0 	mov    DWORD PTR [esp],0xc0021bd4
c000d652:	e8 f1 ef ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d657:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d65c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d662:	8b 10                	mov    edx,DWORD PTR [eax]
c000d664:	6a 00                	push   0x0
c000d666:	6a 00                	push   0x0
c000d668:	6a 00                	push   0x0
c000d66a:	50                   	push   eax
c000d66b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d66e:	83 c4 14             	add    esp,0x14
c000d671:	68 50 1e 02 c0       	push   0xc0021e50
c000d676:	e8 cd ef ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d67b:	e8 55 9f ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000d680:	e8 f5 05 00 00       	call   c000dc7a <KeLoadSystemEnv()>
c000d685:	e8 9e 1f 00 00       	call   c000f628 <KeSetupPowerManager()>
c000d68a:	c7 04 24 74 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e74
c000d691:	e8 b2 ef ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d696:	59                   	pop    ecx
c000d697:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d69c:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d6a2:	53                   	push   ebx
c000d6a3:	e8 b2 ba ff ff       	call   c000915a <Device::loadDriversForAll()>
c000d6a8:	c7 04 24 2b 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f2b
c000d6af:	e8 94 ef ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d6b4:	58                   	pop    eax
c000d6b5:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000d6bb:	5a                   	pop    edx
c000d6bc:	6a 01                	push   0x1
c000d6be:	68 3c 1f 02 c0       	push   0xc0021f3c
c000d6c3:	e8 ad 73 00 00       	call   c0014a75 <Thr::loadDLL(char const*, bool)>
c000d6c8:	59                   	pop    ecx
c000d6c9:	5a                   	pop    edx
c000d6ca:	53                   	push   ebx
c000d6cb:	50                   	push   eax
c000d6cc:	e8 f6 75 00 00       	call   c0014cc7 <Thr::executeDLL(unsigned long, void*)>
c000d6d1:	83 c4 10             	add    esp,0x10
c000d6d4:	83 ec 0c             	sub    esp,0xc
c000d6d7:	6a 02                	push   0x2
c000d6d9:	e8 46 7f 00 00       	call   c0015624 <blockTask(TaskState)>
c000d6de:	83 c4 10             	add    esp,0x10
c000d6e1:	eb f1                	jmp    c000d6d4 <KeFirstTask()+0x112>
c000d6e3:	90                   	nop

c000d6e4 <Computer::Computer()>:
c000d6e4:	83 ec 0c             	sub    esp,0xc
c000d6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6eb:	83 ec 08             	sub    esp,0x8
c000d6ee:	68 58 1f 02 c0       	push   0xc0021f58
c000d6f3:	50                   	push   eax
c000d6f4:	e8 a7 ba ff ff       	call   c00091a0 <Device::Device(char const*)>
c000d6f9:	83 c4 10             	add    esp,0x10
c000d6fc:	ba 6c 1f 02 c0       	mov    edx,0xc0021f6c
c000d701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d705:	89 10                	mov    DWORD PTR [eax],edx
c000d707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d719:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d723:	90                   	nop
c000d724:	83 c4 0c             	add    esp,0xc
c000d727:	c3                   	ret    

c000d728 <KePrepareShutdown()>:
c000d728:	83 ec 0c             	sub    esp,0xc
c000d72b:	e8 86 ee ff ff       	call   c000c5b6 <KeExecuteAtexit()>
c000d730:	83 ec 0c             	sub    esp,0xc
c000d733:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d738:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d73e:	50                   	push   eax
c000d73f:	e8 62 bb ff ff       	call   c00092a6 <Device::closeAll()>
c000d744:	83 c4 1c             	add    esp,0x1c
c000d747:	c3                   	ret    

c000d748 <KeShutdown()>:
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	e8 d8 ff ff ff       	call   c000d728 <KePrepareShutdown()>
c000d750:	a1 6c 9d 02 c0       	mov    eax,ds:0xc0029d6c
c000d755:	85 c0                	test   eax,eax
c000d757:	74 02                	je     c000d75b <KeShutdown()+0x13>
c000d759:	ff d0                	call   eax
c000d75b:	83 ec 0c             	sub    esp,0xc
c000d75e:	68 94 1e 02 c0       	push   0xc0021e94
c000d763:	e8 7e 15 00 00       	call   c000ece6 <KePanic(char const*)>
c000d768:	83 c4 1c             	add    esp,0x1c
c000d76b:	c3                   	ret    

c000d76c <KeSleep()>:
c000d76c:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c000d771:	85 c0                	test   eax,eax
c000d773:	74 02                	je     c000d777 <KeSleep()+0xb>
c000d775:	ff e0                	jmp    eax
c000d777:	c3                   	ret    

c000d778 <KeRestart()>:
c000d778:	83 ec 0c             	sub    esp,0xc
c000d77b:	e8 a8 ff ff ff       	call   c000d728 <KePrepareShutdown()>
c000d780:	a1 68 9d 02 c0       	mov    eax,ds:0xc0029d68
c000d785:	85 c0                	test   eax,eax
c000d787:	74 02                	je     c000d78b <KeRestart()+0x13>
c000d789:	ff d0                	call   eax
c000d78b:	e4 64                	in     al,0x64
c000d78d:	a8 02                	test   al,0x2
c000d78f:	75 fa                	jne    c000d78b <KeRestart()+0x13>
c000d791:	b0 fe                	mov    al,0xfe
c000d793:	e6 64                	out    0x64,al
c000d795:	83 c4 0c             	add    esp,0xc
c000d798:	c3                   	ret    

c000d799 <KeCalculateCRC32(unsigned char*, int)>:
c000d799:	53                   	push   ebx
c000d79a:	83 c8 ff             	or     eax,0xffffffff
c000d79d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d7a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d7a5:	01 cb                	add    ebx,ecx
c000d7a7:	39 d9                	cmp    ecx,ebx
c000d7a9:	74 15                	je     c000d7c0 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d7ab:	41                   	inc    ecx
c000d7ac:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d7af:	31 c2                	xor    edx,eax
c000d7b1:	c1 e8 08             	shr    eax,0x8
c000d7b4:	0f b6 d2             	movzx  edx,dl
c000d7b7:	33 04 95 40 3c 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc3c0]
c000d7be:	eb e7                	jmp    c000d7a7 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d7c0:	f7 d0                	not    eax
c000d7c2:	5b                   	pop    ebx
c000d7c3:	c3                   	ret    

c000d7c4 <EnvVarContainer::getEnv(char const*)>:
c000d7c4:	57                   	push   edi
c000d7c5:	56                   	push   esi
c000d7c6:	53                   	push   ebx
c000d7c7:	31 db                	xor    ebx,ebx
c000d7c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d7cd:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d7cf:	7e 2b                	jle    c000d7fc <EnvVarContainer::getEnv(char const*)+0x38>
c000d7d1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d7d8:	50                   	push   eax
c000d7d9:	50                   	push   eax
c000d7da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d7dd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d7e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d7e4:	e8 67 2f ff ff       	call   c0000750 <strcmp>
c000d7e9:	83 c4 10             	add    esp,0x10
c000d7ec:	85 c0                	test   eax,eax
c000d7ee:	75 09                	jne    c000d7f9 <EnvVarContainer::getEnv(char const*)+0x35>
c000d7f0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d7f3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d7f7:	eb 05                	jmp    c000d7fe <EnvVarContainer::getEnv(char const*)+0x3a>
c000d7f9:	43                   	inc    ebx
c000d7fa:	eb d1                	jmp    c000d7cd <EnvVarContainer::getEnv(char const*)+0x9>
c000d7fc:	31 c0                	xor    eax,eax
c000d7fe:	5b                   	pop    ebx
c000d7ff:	5e                   	pop    esi
c000d800:	5f                   	pop    edi
c000d801:	c3                   	ret    

c000d802 <EnvVarContainer::setEnv(char const*, char const*)>:
c000d802:	55                   	push   ebp
c000d803:	57                   	push   edi
c000d804:	56                   	push   esi
c000d805:	53                   	push   ebx
c000d806:	83 ec 28             	sub    esp,0x28
c000d809:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d80d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d811:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d815:	56                   	push   esi
c000d816:	e8 55 2d ff ff       	call   c0000570 <strlen>
c000d81b:	40                   	inc    eax
c000d81c:	89 04 24             	mov    DWORD PTR [esp],eax
c000d81f:	e8 6d 11 00 00       	call   c000e991 <malloc>
c000d824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d827:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d82b:	e8 40 2d ff ff       	call   c0000570 <strlen>
c000d830:	40                   	inc    eax
c000d831:	89 04 24             	mov    DWORD PTR [esp],eax
c000d834:	e8 58 11 00 00       	call   c000e991 <malloc>
c000d839:	89 34 24             	mov    DWORD PTR [esp],esi
c000d83c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d840:	e8 2b 2d ff ff       	call   c0000570 <strlen>
c000d845:	83 c4 0c             	add    esp,0xc
c000d848:	40                   	inc    eax
c000d849:	50                   	push   eax
c000d84a:	6a 00                	push   0x0
c000d84c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d850:	e8 9b 2c ff ff       	call   c00004f0 <memset>
c000d855:	89 34 24             	mov    DWORD PTR [esp],esi
c000d858:	e8 13 2d ff ff       	call   c0000570 <strlen>
c000d85d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d861:	8d 48 01             	lea    ecx,[eax+0x1]
c000d864:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d866:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d869:	89 de                	mov    esi,ebx
c000d86b:	e8 00 2d ff ff       	call   c0000570 <strlen>
c000d870:	83 c4 0c             	add    esp,0xc
c000d873:	40                   	inc    eax
c000d874:	50                   	push   eax
c000d875:	6a 00                	push   0x0
c000d877:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d87b:	e8 70 2c ff ff       	call   c00004f0 <memset>
c000d880:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d883:	e8 e8 2c ff ff       	call   c0000570 <strlen>
c000d888:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d88c:	8d 48 01             	lea    ecx,[eax+0x1]
c000d88f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d891:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d894:	40                   	inc    eax
c000d895:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d898:	c1 e0 03             	shl    eax,0x3
c000d89b:	5a                   	pop    edx
c000d89c:	59                   	pop    ecx
c000d89d:	50                   	push   eax
c000d89e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d8a1:	e8 d7 10 00 00       	call   c000e97d <realloc>
c000d8a6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d8aa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d8ad:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d8b0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d8b4:	b9 08 00 00 00       	mov    ecx,0x8
c000d8b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8bb:	83 c4 2c             	add    esp,0x2c
c000d8be:	5b                   	pop    ebx
c000d8bf:	5e                   	pop    esi
c000d8c0:	5f                   	pop    edi
c000d8c1:	5d                   	pop    ebp
c000d8c2:	c3                   	ret    
c000d8c3:	90                   	nop

c000d8c4 <EnvVarContainer::deleteEnv(char const*)>:
c000d8c4:	c3                   	ret    
c000d8c5:	90                   	nop

c000d8c6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d8c6:	55                   	push   ebp
c000d8c7:	57                   	push   edi
c000d8c8:	56                   	push   esi
c000d8c9:	53                   	push   ebx
c000d8ca:	81 ec 38 01 00 00    	sub    esp,0x138
c000d8d0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d8d7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d8de:	68 14 01 00 00       	push   0x114
c000d8e3:	e8 a9 10 00 00       	call   c000e991 <malloc>
c000d8e8:	83 c4 0c             	add    esp,0xc
c000d8eb:	89 c3                	mov    ebx,eax
c000d8ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d8f0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d8f7:	50                   	push   eax
c000d8f8:	e8 15 a8 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000d8fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d900:	e8 ef aa ff ff       	call   c00083f4 <File::exists()>
c000d905:	83 c4 10             	add    esp,0x10
c000d908:	84 c0                	test   al,al
c000d90a:	75 31                	jne    c000d93d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d90c:	50                   	push   eax
c000d90d:	50                   	push   eax
c000d90e:	6a 12                	push   0x12
c000d910:	53                   	push   ebx
c000d911:	e8 1a a8 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000d916:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d918:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d91b:	89 34 24             	mov    DWORD PTR [esp],esi
c000d91e:	e8 4d 2c ff ff       	call   c0000570 <strlen>
c000d923:	5a                   	pop    edx
c000d924:	31 d2                	xor    edx,edx
c000d926:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000d92a:	51                   	push   ecx
c000d92b:	56                   	push   esi
c000d92c:	52                   	push   edx
c000d92d:	50                   	push   eax
c000d92e:	53                   	push   ebx
c000d92f:	ff d7                	call   edi
c000d931:	83 c4 14             	add    esp,0x14
c000d934:	53                   	push   ebx
c000d935:	e8 54 a8 ff ff       	call   c000818e <File::close()>
c000d93a:	83 c4 10             	add    esp,0x10
c000d93d:	56                   	push   esi
c000d93e:	31 f6                	xor    esi,esi
c000d940:	68 00 01 00 00       	push   0x100
c000d945:	6a 00                	push   0x0
c000d947:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d94b:	50                   	push   eax
c000d94c:	e8 9f 2b ff ff       	call   c00004f0 <memset>
c000d951:	5f                   	pop    edi
c000d952:	58                   	pop    eax
c000d953:	6a 01                	push   0x1
c000d955:	53                   	push   ebx
c000d956:	e8 d5 a7 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000d95b:	83 c4 10             	add    esp,0x10
c000d95e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d966:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d96e:	83 ec 0c             	sub    esp,0xc
c000d971:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d973:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000d977:	51                   	push   ecx
c000d978:	8d 54 24 23          	lea    edx,[esp+0x23]
c000d97c:	52                   	push   edx
c000d97d:	6a 00                	push   0x0
c000d97f:	6a 01                	push   0x1
c000d981:	53                   	push   ebx
c000d982:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d985:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d98a:	83 c4 20             	add    esp,0x20
c000d98d:	89 c2                	mov    edx,eax
c000d98f:	85 c0                	test   eax,eax
c000d991:	0f 84 36 01 00 00    	je     c000dacd <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d997:	83 f8 0d             	cmp    eax,0xd
c000d99a:	0f 84 22 01 00 00    	je     c000dac2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d9a5:	0f 84 f0 00 00 00    	je     c000da9b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d9ab:	83 f8 0a             	cmp    eax,0xa
c000d9ae:	74 13                	je     c000d9c3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d9b0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d9b5:	74 0c                	je     c000d9c3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d9b7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d9bd:	0f 8e f6 00 00 00    	jle    c000dab9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000d9c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9c7:	83 ec 0c             	sub    esp,0xc
c000d9ca:	8d 78 01             	lea    edi,[eax+0x1]
c000d9cd:	57                   	push   edi
c000d9ce:	e8 be 0f 00 00       	call   c000e991 <malloc>
c000d9d3:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d9d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9db:	8d 56 04             	lea    edx,[esi+0x4]
c000d9de:	89 14 24             	mov    DWORD PTR [esp],edx
c000d9e1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9e5:	e8 a7 0f 00 00       	call   c000e991 <malloc>
c000d9ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d9ee:	83 c4 0c             	add    esp,0xc
c000d9f1:	57                   	push   edi
c000d9f2:	6a 00                	push   0x0
c000d9f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f8:	e8 f3 2a ff ff       	call   c00004f0 <memset>
c000d9fd:	8d 74 24 30          	lea    esi,[esp+0x30]
c000da01:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000da05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000da09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da0b:	83 c4 0c             	add    esp,0xc
c000da0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da12:	52                   	push   edx
c000da13:	6a 00                	push   0x0
c000da15:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da19:	e8 d2 2a ff ff       	call   c00004f0 <memset>
c000da1e:	8d 74 24 30          	lea    esi,[esp+0x30]
c000da22:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000da26:	89 34 24             	mov    DWORD PTR [esp],esi
c000da29:	e8 42 2b ff ff       	call   c0000570 <strlen>
c000da2e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000da32:	89 c1                	mov    ecx,eax
c000da34:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da36:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da39:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da3c:	40                   	inc    eax
c000da3d:	83 c4 10             	add    esp,0x10
c000da40:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000da43:	85 d2                	test   edx,edx
c000da45:	75 0c                	jne    c000da53 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000da47:	83 ec 0c             	sub    esp,0xc
c000da4a:	6a 08                	push   0x8
c000da4c:	e8 40 0f 00 00       	call   c000e991 <malloc>
c000da51:	eb 0c                	jmp    c000da5f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000da53:	c1 e0 03             	shl    eax,0x3
c000da56:	51                   	push   ecx
c000da57:	51                   	push   ecx
c000da58:	50                   	push   eax
c000da59:	52                   	push   edx
c000da5a:	e8 1e 0f 00 00       	call   c000e97d <realloc>
c000da5f:	83 c4 10             	add    esp,0x10
c000da62:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000da65:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000da68:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000da6b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000da6f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000da73:	b9 08 00 00 00       	mov    ecx,0x8
c000da78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da7a:	31 f6                	xor    esi,esi
c000da7c:	50                   	push   eax
c000da7d:	68 00 01 00 00       	push   0x100
c000da82:	6a 00                	push   0x0
c000da84:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000da88:	50                   	push   eax
c000da89:	e8 62 2a ff ff       	call   c00004f0 <memset>
c000da8e:	83 c4 10             	add    esp,0x10
c000da91:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000da99:	eb 27                	jmp    c000dac2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da9b:	83 f8 3d             	cmp    eax,0x3d
c000da9e:	74 1e                	je     c000dabe <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000daa0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000daa6:	7f 07                	jg     c000daaf <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000daa8:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000daac:	46                   	inc    esi
c000daad:	eb 13                	jmp    c000dac2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000daaf:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000dab7:	eb 09                	jmp    c000dac2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dab9:	83 f8 3d             	cmp    eax,0x3d
c000dabc:	75 ea                	jne    c000daa8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000dabe:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000dac2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000dac7:	0f 85 99 fe ff ff    	jne    c000d966 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000dacd:	83 ec 0c             	sub    esp,0xc
c000dad0:	53                   	push   ebx
c000dad1:	e8 b8 a6 ff ff       	call   c000818e <File::close()>
c000dad6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dad8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dadb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dade:	81 c4 3c 01 00 00    	add    esp,0x13c
c000dae4:	5b                   	pop    ebx
c000dae5:	5e                   	pop    esi
c000dae6:	5f                   	pop    edi
c000dae7:	5d                   	pop    ebp
c000dae8:	c3                   	ret    
c000dae9:	90                   	nop

c000daea <EnvVarContainer::__loadSystem()>:
c000daea:	83 ec 10             	sub    esp,0x10
c000daed:	68 40 40 02 c0       	push   0xc0024040
c000daf2:	68 90 1f 02 c0       	push   0xc0021f90
c000daf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dafb:	e8 c6 fd ff ff       	call   c000d8c6 <EnvVarContainer::loadFrom(char const*, char const*)>
c000db00:	83 c4 1c             	add    esp,0x1c
c000db03:	c3                   	ret    

c000db04 <EnvVarContainer::__loadUser()>:
c000db04:	c3                   	ret    
c000db05:	90                   	nop

c000db06 <EnvVarContainer::EnvVarContainer(Process*)>:
c000db06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000db10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000db18:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000db1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000db26:	90                   	nop
c000db27:	c3                   	ret    

c000db28 <EnvVarContainer::~EnvVarContainer()>:
c000db28:	83 ec 0c             	sub    esp,0xc
c000db2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db32:	85 c0                	test   eax,eax
c000db34:	74 1d                	je     c000db53 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000db36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db3a:	8b 00                	mov    eax,DWORD PTR [eax]
c000db3c:	85 c0                	test   eax,eax
c000db3e:	74 13                	je     c000db53 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000db40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db47:	83 ec 0c             	sub    esp,0xc
c000db4a:	50                   	push   eax
c000db4b:	e8 51 0e 00 00       	call   c000e9a1 <free>
c000db50:	83 c4 10             	add    esp,0x10
c000db53:	90                   	nop
c000db54:	83 c4 0c             	add    esp,0xc
c000db57:	c3                   	ret    

c000db58 <KeGetEnv(Process*, char const*)>:
c000db58:	53                   	push   ebx
c000db59:	83 ec 08             	sub    esp,0x8
c000db5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db64:	39 05 d8 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6d8,eax
c000db6a:	74 04                	je     c000db70 <KeGetEnv(Process*, char const*)+0x18>
c000db6c:	85 c0                	test   eax,eax
c000db6e:	75 0b                	jne    c000db7b <KeGetEnv(Process*, char const*)+0x23>
c000db70:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000db75:	85 c0                	test   eax,eax
c000db77:	75 19                	jne    c000db92 <KeGetEnv(Process*, char const*)+0x3a>
c000db79:	eb 27                	jmp    c000dba2 <KeGetEnv(Process*, char const*)+0x4a>
c000db7b:	52                   	push   edx
c000db7c:	52                   	push   edx
c000db7d:	53                   	push   ebx
c000db7e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000db84:	e8 3b fc ff ff       	call   c000d7c4 <EnvVarContainer::getEnv(char const*)>
c000db89:	83 c4 10             	add    esp,0x10
c000db8c:	85 c0                	test   eax,eax
c000db8e:	75 28                	jne    c000dbb8 <KeGetEnv(Process*, char const*)+0x60>
c000db90:	eb de                	jmp    c000db70 <KeGetEnv(Process*, char const*)+0x18>
c000db92:	52                   	push   edx
c000db93:	52                   	push   edx
c000db94:	53                   	push   ebx
c000db95:	50                   	push   eax
c000db96:	e8 29 fc ff ff       	call   c000d7c4 <EnvVarContainer::getEnv(char const*)>
c000db9b:	83 c4 10             	add    esp,0x10
c000db9e:	85 c0                	test   eax,eax
c000dba0:	75 16                	jne    c000dbb8 <KeGetEnv(Process*, char const*)+0x60>
c000dba2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000dba6:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000dbab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbaf:	83 c4 08             	add    esp,0x8
c000dbb2:	5b                   	pop    ebx
c000dbb3:	e9 0c fc ff ff       	jmp    c000d7c4 <EnvVarContainer::getEnv(char const*)>
c000dbb8:	83 c4 08             	add    esp,0x8
c000dbbb:	5b                   	pop    ebx
c000dbbc:	c3                   	ret    

c000dbbd <KeSetEnvSystem(char const*, char const*)>:
c000dbbd:	83 ec 10             	sub    esp,0x10
c000dbc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbc8:	ff 35 7c 9d 02 c0    	push   DWORD PTR ds:0xc0029d7c
c000dbce:	e8 2f fc ff ff       	call   c000d802 <EnvVarContainer::setEnv(char const*, char const*)>
c000dbd3:	83 c4 1c             	add    esp,0x1c
c000dbd6:	c3                   	ret    

c000dbd7 <KeSetEnvUser(char const*, char const*)>:
c000dbd7:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000dbdc:	85 c0                	test   eax,eax
c000dbde:	74 15                	je     c000dbf5 <KeSetEnvUser(char const*, char const*)+0x1e>
c000dbe0:	83 ec 10             	sub    esp,0x10
c000dbe3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbe7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbeb:	50                   	push   eax
c000dbec:	e8 11 fc ff ff       	call   c000d802 <EnvVarContainer::setEnv(char const*, char const*)>
c000dbf1:	83 c4 1c             	add    esp,0x1c
c000dbf4:	c3                   	ret    
c000dbf5:	c3                   	ret    

c000dbf6 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000dbf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbfa:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000dc00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc04:	e9 f9 fb ff ff       	jmp    c000d802 <EnvVarContainer::setEnv(char const*, char const*)>

c000dc09 <KeDeleteEnvSystem(char const*)>:
c000dc09:	c3                   	ret    

c000dc0a <KeDeleteEnvUser(char const*)>:
c000dc0a:	c3                   	ret    

c000dc0b <KeDeleteEnvProcess(Process*, char const*)>:
c000dc0b:	c3                   	ret    

c000dc0c <KeNewProcessEnv(Process*)>:
c000dc0c:	83 ec 28             	sub    esp,0x28
c000dc0f:	6a 0c                	push   0xc
c000dc11:	e8 7b 0d 00 00       	call   c000e991 <malloc>
c000dc16:	5a                   	pop    edx
c000dc17:	59                   	pop    ecx
c000dc18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dc1c:	50                   	push   eax
c000dc1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc21:	e8 e0 fe ff ff       	call   c000db06 <EnvVarContainer::EnvVarContainer(Process*)>
c000dc26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dc2a:	83 c4 2c             	add    esp,0x2c
c000dc2d:	c3                   	ret    

c000dc2e <KeCopyProcessEnv(Process*, Process*)>:
c000dc2e:	57                   	push   edi
c000dc2f:	56                   	push   esi
c000dc30:	53                   	push   ebx
c000dc31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc35:	83 ec 0c             	sub    esp,0xc
c000dc38:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000dc3e:	6a 0c                	push   0xc
c000dc40:	e8 4c 0d 00 00       	call   c000e991 <malloc>
c000dc45:	89 c3                	mov    ebx,eax
c000dc47:	58                   	pop    eax
c000dc48:	5a                   	pop    edx
c000dc49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4d:	53                   	push   ebx
c000dc4e:	e8 b3 fe ff ff       	call   c000db06 <EnvVarContainer::EnvVarContainer(Process*)>
c000dc53:	8b 07                	mov    eax,DWORD PTR [edi]
c000dc55:	89 03                	mov    DWORD PTR [ebx],eax
c000dc57:	c1 e0 03             	shl    eax,0x3
c000dc5a:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc5d:	e8 2f 0d 00 00       	call   c000e991 <malloc>
c000dc62:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dc65:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dc67:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dc6a:	c1 e1 03             	shl    ecx,0x3
c000dc6d:	89 c7                	mov    edi,eax
c000dc6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	89 d8                	mov    eax,ebx
c000dc76:	5b                   	pop    ebx
c000dc77:	5e                   	pop    esi
c000dc78:	5f                   	pop    edi
c000dc79:	c3                   	ret    

c000dc7a <KeLoadSystemEnv()>:
c000dc7a:	53                   	push   ebx
c000dc7b:	83 ec 14             	sub    esp,0x14
c000dc7e:	6a 0c                	push   0xc
c000dc80:	e8 0c 0d 00 00       	call   c000e991 <malloc>
c000dc85:	89 c3                	mov    ebx,eax
c000dc87:	58                   	pop    eax
c000dc88:	5a                   	pop    edx
c000dc89:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dc8f:	53                   	push   ebx
c000dc90:	e8 71 fe ff ff       	call   c000db06 <EnvVarContainer::EnvVarContainer(Process*)>
c000dc95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc98:	89 1d 7c 9d 02 c0    	mov    DWORD PTR ds:0xc0029d7c,ebx
c000dc9e:	e8 47 fe ff ff       	call   c000daea <EnvVarContainer::__loadSystem()>
c000dca3:	83 c4 18             	add    esp,0x18
c000dca6:	5b                   	pop    ebx
c000dca7:	c3                   	ret    

c000dca8 <KeLoadUserEnv()>:
c000dca8:	53                   	push   ebx
c000dca9:	83 ec 14             	sub    esp,0x14
c000dcac:	6a 0c                	push   0xc
c000dcae:	e8 de 0c 00 00       	call   c000e991 <malloc>
c000dcb3:	89 c3                	mov    ebx,eax
c000dcb5:	58                   	pop    eax
c000dcb6:	5a                   	pop    edx
c000dcb7:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dcbd:	53                   	push   ebx
c000dcbe:	e8 43 fe ff ff       	call   c000db06 <EnvVarContainer::EnvVarContainer(Process*)>
c000dcc3:	89 1d 78 9d 02 c0    	mov    DWORD PTR ds:0xc0029d78,ebx
c000dcc9:	83 c4 18             	add    esp,0x18
c000dccc:	5b                   	pop    ebx
c000dccd:	c3                   	ret    

c000dcce <KeFlushEnv()>:
c000dcce:	c3                   	ret    

c000dccf <KeGetProcessTotalEnvCount(Process*)>:
c000dccf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcd3:	8b 15 78 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029d78
c000dcd9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dcdf:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000dce4:	8b 00                	mov    eax,DWORD PTR [eax]
c000dce6:	03 01                	add    eax,DWORD PTR [ecx]
c000dce8:	85 d2                	test   edx,edx
c000dcea:	74 02                	je     c000dcee <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dcec:	03 02                	add    eax,DWORD PTR [edx]
c000dcee:	c3                   	ret    

c000dcef <KeGetProcessEnvPair(Process*, int)>:
c000dcef:	57                   	push   edi
c000dcf0:	56                   	push   esi
c000dcf1:	8b 35 78 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d78
c000dcf7:	53                   	push   ebx
c000dcf8:	85 f6                	test   esi,esi
c000dcfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dcfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dd02:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dd08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dd0c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd0e:	75 16                	jne    c000dd26 <KeGetProcessEnvPair(Process*, int)+0x37>
c000dd10:	39 c2                	cmp    edx,eax
c000dd12:	7c 16                	jl     c000dd2a <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dd14:	8b 0d 7c 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029d7c
c000dd1a:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dd1c:	01 c6                	add    esi,eax
c000dd1e:	39 d6                	cmp    esi,edx
c000dd20:	7e 3c                	jle    c000dd5e <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dd22:	29 c2                	sub    edx,eax
c000dd24:	eb 04                	jmp    c000dd2a <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dd26:	39 c2                	cmp    edx,eax
c000dd28:	7d 05                	jge    c000dd2f <KeGetProcessEnvPair(Process*, int)+0x40>
c000dd2a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dd2d:	eb 20                	jmp    c000dd4f <KeGetProcessEnvPair(Process*, int)+0x60>
c000dd2f:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dd31:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dd34:	39 d1                	cmp    ecx,edx
c000dd36:	7e 04                	jle    c000dd3c <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dd38:	29 c2                	sub    edx,eax
c000dd3a:	eb 10                	jmp    c000dd4c <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dd3c:	8b 35 7c 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d7c
c000dd42:	03 0e                	add    ecx,DWORD PTR [esi]
c000dd44:	39 d1                	cmp    ecx,edx
c000dd46:	7e 16                	jle    c000dd5e <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dd48:	29 c2                	sub    edx,eax
c000dd4a:	29 fa                	sub    edx,edi
c000dd4c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dd4f:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dd52:	8b 02                	mov    eax,DWORD PTR [edx]
c000dd54:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dd57:	89 03                	mov    DWORD PTR [ebx],eax
c000dd59:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dd5c:	eb 1d                	jmp    c000dd7b <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dd5e:	83 ec 0c             	sub    esp,0xc
c000dd61:	68 b2 1f 02 c0       	push   0xc0021fb2
c000dd66:	e8 7b 0f 00 00       	call   c000ece6 <KePanic(char const*)>
c000dd6b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd71:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dd78:	83 c4 10             	add    esp,0x10
c000dd7b:	89 d8                	mov    eax,ebx
c000dd7d:	5b                   	pop    ebx
c000dd7e:	5e                   	pop    esi
c000dd7f:	5f                   	pop    edi
c000dd80:	c2 04 00             	ret    0x4
c000dd83:	90                   	nop

c000dd84 <KeSetupInterrupts()>:
c000dd84:	83 ec 10             	sub    esp,0x10
c000dd87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd8f:	90                   	nop
c000dd90:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dd98:	7f 5a                	jg     c000ddf4 <KeSetupInterrupts()+0x70>
c000dd9a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dda2:	66 90                	xchg   ax,ax
c000dda4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dda9:	7f 41                	jg     c000ddec <KeSetupInterrupts()+0x68>
c000ddab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddaf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddba:	01 d0                	add    eax,edx
c000ddbc:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000ddc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddcb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddd6:	01 d0                	add    eax,edx
c000ddd8:	c7 04 85 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd6280],0x0
c000dde3:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dde8:	eb ba                	jmp    c000dda4 <KeSetupInterrupts()+0x20>
c000ddea:	66 90                	xchg   ax,ax
c000ddec:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000ddf1:	eb 9d                	jmp    c000dd90 <KeSetupInterrupts()+0xc>
c000ddf3:	90                   	nop
c000ddf4:	90                   	nop
c000ddf5:	83 c4 10             	add    esp,0x10
c000ddf8:	c3                   	ret    
c000ddf9:	8d 76 00             	lea    esi,[esi+0x0]

c000ddfc <int_handler>:
c000ddfc:	83 ec 2c             	sub    esp,0x2c
c000ddff:	90                   	nop
c000de00:	a0 94 bd 02 c0       	mov    al,ds:0xc002bd94
c000de05:	0f b6 c0             	movzx  eax,al
c000de08:	85 c0                	test   eax,eax
c000de0a:	74 04                	je     c000de10 <int_handler+0x14>
c000de0c:	fa                   	cli    
c000de0d:	f4                   	hlt    
c000de0e:	eb f0                	jmp    c000de00 <int_handler+0x4>
c000de10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de14:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de1b:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000de20:	7e 1a                	jle    c000de3c <int_handler+0x40>
c000de22:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000de27:	7f 13                	jg     c000de3c <int_handler+0x40>
c000de29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de2d:	83 e8 20             	sub    eax,0x20
c000de30:	83 ec 0c             	sub    esp,0xc
c000de33:	50                   	push   eax
c000de34:	e8 d4 a8 00 00       	call   c001870d <HalEndOfInterrupt(int)>
c000de39:	83 c4 10             	add    esp,0x10
c000de3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de40:	c1 e0 04             	shl    eax,0x4
c000de43:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000de48:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000de4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de50:	c1 e0 04             	shl    eax,0x4
c000de53:	05 80 9d 02 c0       	add    eax,0xc0029d80
c000de58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de5c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000de64:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000de69:	0f 8f ad 00 00 00    	jg     c000df1c <int_handler+0x120>
c000de6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de73:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de7e:	01 d0                	add    eax,edx
c000de80:	8b 00                	mov    eax,DWORD PTR [eax]
c000de82:	85 c0                	test   eax,eax
c000de84:	0f 84 86 00 00 00    	je     c000df10 <int_handler+0x114>
c000de8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de8e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de91:	83 f8 60             	cmp    eax,0x60
c000de94:	75 46                	jne    c000dedc <int_handler+0xe0>
c000de96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de9a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dea1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dea5:	01 d0                	add    eax,edx
c000dea7:	8b 00                	mov    eax,DWORD PTR [eax]
c000dea9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dead:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000deb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deb8:	01 ca                	add    edx,ecx
c000deba:	8b 12                	mov    edx,DWORD PTR [edx]
c000debc:	83 ec 08             	sub    esp,0x8
c000debf:	52                   	push   edx
c000dec0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dec4:	ff d0                	call   eax
c000dec6:	83 c4 10             	add    esp,0x10
c000dec9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000decd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ded1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ded5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ded9:	eb 4d                	jmp    c000df28 <int_handler+0x12c>
c000dedb:	90                   	nop
c000dedc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dee0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dee7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000deeb:	01 d0                	add    eax,edx
c000deed:	8b 00                	mov    eax,DWORD PTR [eax]
c000deef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000def3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000defa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000defe:	01 ca                	add    edx,ecx
c000df00:	8b 12                	mov    edx,DWORD PTR [edx]
c000df02:	83 ec 08             	sub    esp,0x8
c000df05:	52                   	push   edx
c000df06:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000df0a:	ff d0                	call   eax
c000df0c:	83 c4 10             	add    esp,0x10
c000df0f:	90                   	nop
c000df10:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000df15:	e9 4a ff ff ff       	jmp    c000de64 <int_handler+0x68>
c000df1a:	66 90                	xchg   ax,ax
c000df1c:	b8 00 00 00 00       	mov    eax,0x0
c000df21:	ba 00 00 00 00       	mov    edx,0x0
c000df26:	66 90                	xchg   ax,ax
c000df28:	83 c4 2c             	add    esp,0x2c
c000df2b:	c3                   	ret    

c000df2c <KeDisplayProgramFault(char const*)>:
c000df2c:	83 ec 0c             	sub    esp,0xc
c000df2f:	83 ec 0c             	sub    esp,0xc
c000df32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df36:	e8 29 90 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000df3b:	83 c4 10             	add    esp,0x10
c000df3e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000df43:	8b 00                	mov    eax,DWORD PTR [eax]
c000df45:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000df48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000df4e:	85 c0                	test   eax,eax
c000df50:	74 22                	je     c000df74 <KeDisplayProgramFault(char const*)+0x48>
c000df52:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000df57:	8b 00                	mov    eax,DWORD PTR [eax]
c000df59:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000df5c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000df62:	6a 04                	push   0x4
c000df64:	6a 0f                	push   0xf
c000df66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df6a:	50                   	push   eax
c000df6b:	e8 78 35 00 00       	call   c00114e8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000df70:	83 c4 10             	add    esp,0x10
c000df73:	90                   	nop
c000df74:	90                   	nop
c000df75:	83 c4 0c             	add    esp,0xc
c000df78:	c3                   	ret    
c000df79:	8d 76 00             	lea    esi,[esi+0x0]

c000df7c <KeGeneralProtectionFault(void*, void*)>:
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	83 ec 08             	sub    esp,0x8
c000df82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8a:	e8 7a 9d 00 00       	call   c0017d09 <HalHandleGeneralProtectionFault(void*, void*)>
c000df8f:	83 c4 10             	add    esp,0x10
c000df92:	0f b6 c0             	movzx  eax,al
c000df95:	85 c0                	test   eax,eax
c000df97:	75 2f                	jne    c000dfc8 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000df99:	83 ec 0c             	sub    esp,0xc
c000df9c:	68 cc 1f 02 c0       	push   0xc0021fcc
c000dfa1:	e8 86 ff ff ff       	call   c000df2c <KeDisplayProgramFault(char const*)>
c000dfa6:	83 c4 10             	add    esp,0x10
c000dfa9:	83 ec 0c             	sub    esp,0xc
c000dfac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb0:	e8 70 9e 00 00       	call   c0017e25 <HalDisplayDebugInfo(void*)>
c000dfb5:	83 c4 10             	add    esp,0x10
c000dfb8:	83 ec 0c             	sub    esp,0xc
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 12 7e 00 00       	call   c0015dd4 <Thr::terminateFromIRQ(int)>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	eb 05                	jmp    c000dfcc <KeGeneralProtectionFault(void*, void*)+0x50>
c000dfc7:	90                   	nop
c000dfc8:	90                   	nop
c000dfc9:	8d 76 00             	lea    esi,[esi+0x0]
c000dfcc:	83 c4 0c             	add    esp,0xc
c000dfcf:	c3                   	ret    

c000dfd0 <KePageFault(void*, void*)>:
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	83 ec 08             	sub    esp,0x8
c000dfd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfde:	e8 d1 9d 00 00       	call   c0017db4 <HalHandlePageFault(void*, void*)>
c000dfe3:	83 c4 10             	add    esp,0x10
c000dfe6:	0f b6 c0             	movzx  eax,al
c000dfe9:	85 c0                	test   eax,eax
c000dfeb:	75 2f                	jne    c000e01c <KePageFault(void*, void*)+0x4c>
c000dfed:	83 ec 0c             	sub    esp,0xc
c000dff0:	68 e5 1f 02 c0       	push   0xc0021fe5
c000dff5:	e8 32 ff ff ff       	call   c000df2c <KeDisplayProgramFault(char const*)>
c000dffa:	83 c4 10             	add    esp,0x10
c000dffd:	83 ec 0c             	sub    esp,0xc
c000e000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e004:	e8 1c 9e 00 00       	call   c0017e25 <HalDisplayDebugInfo(void*)>
c000e009:	83 c4 10             	add    esp,0x10
c000e00c:	83 ec 0c             	sub    esp,0xc
c000e00f:	6a 00                	push   0x0
c000e011:	e8 be 7d 00 00       	call   c0015dd4 <Thr::terminateFromIRQ(int)>
c000e016:	83 c4 10             	add    esp,0x10
c000e019:	eb 05                	jmp    c000e020 <KePageFault(void*, void*)+0x50>
c000e01b:	90                   	nop
c000e01c:	90                   	nop
c000e01d:	8d 76 00             	lea    esi,[esi+0x0]
c000e020:	83 c4 0c             	add    esp,0xc
c000e023:	c3                   	ret    

c000e024 <KeNonMaskableInterrupt(void*, void*)>:
c000e024:	83 ec 0c             	sub    esp,0xc
c000e027:	e8 87 a1 00 00       	call   c00181b3 <HalReceivedNMI()>
c000e02c:	90                   	nop
c000e02d:	83 c4 0c             	add    esp,0xc
c000e030:	c3                   	ret    
c000e031:	8d 76 00             	lea    esi,[esi+0x0]

c000e034 <KeOtherFault(void*, void*)>:
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	83 ec 0c             	sub    esp,0xc
c000e03a:	68 f0 1f 02 c0       	push   0xc0021ff0
c000e03f:	e8 e8 fe ff ff       	call   c000df2c <KeDisplayProgramFault(char const*)>
c000e044:	83 c4 10             	add    esp,0x10
c000e047:	83 ec 0c             	sub    esp,0xc
c000e04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04e:	e8 d2 9d 00 00       	call   c0017e25 <HalDisplayDebugInfo(void*)>
c000e053:	83 c4 10             	add    esp,0x10
c000e056:	83 ec 0c             	sub    esp,0xc
c000e059:	6a 00                	push   0x0
c000e05b:	e8 74 7d 00 00       	call   c0015dd4 <Thr::terminateFromIRQ(int)>
c000e060:	83 c4 10             	add    esp,0x10
c000e063:	90                   	nop
c000e064:	83 c4 0c             	add    esp,0xc
c000e067:	c3                   	ret    

c000e068 <KeOpcodeFault(void*, void*)>:
c000e068:	55                   	push   ebp
c000e069:	89 e5                	mov    ebp,esp
c000e06b:	83 ec 08             	sub    esp,0x8
c000e06e:	83 ec 08             	sub    esp,0x8
c000e071:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e074:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e077:	e8 67 9d 00 00       	call   c0017de3 <HalHandleOpcodeFault(void*, void*)>
c000e07c:	83 c4 10             	add    esp,0x10
c000e07f:	0f b6 c0             	movzx  eax,al
c000e082:	85 c0                	test   eax,eax
c000e084:	75 2e                	jne    c000e0b4 <KeOpcodeFault(void*, void*)+0x4c>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	68 18 20 02 c0       	push   0xc0022018
c000e08e:	e8 99 fe ff ff       	call   c000df2c <KeDisplayProgramFault(char const*)>
c000e093:	83 c4 10             	add    esp,0x10
c000e096:	83 ec 0c             	sub    esp,0xc
c000e099:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e09c:	e8 84 9d 00 00       	call   c0017e25 <HalDisplayDebugInfo(void*)>
c000e0a1:	83 c4 10             	add    esp,0x10
c000e0a4:	83 ec 0c             	sub    esp,0xc
c000e0a7:	6a 00                	push   0x0
c000e0a9:	e8 26 7d 00 00       	call   c0015dd4 <Thr::terminateFromIRQ(int)>
c000e0ae:	83 c4 10             	add    esp,0x10
c000e0b1:	eb 05                	jmp    c000e0b8 <KeOpcodeFault(void*, void*)+0x50>
c000e0b3:	90                   	nop
c000e0b4:	90                   	nop
c000e0b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e0b8:	c9                   	leave  
c000e0b9:	c3                   	ret    
c000e0ba:	66 90                	xchg   ax,ax

c000e0bc <KeDoubleFault(void*, void*)>:
c000e0bc:	55                   	push   ebp
c000e0bd:	89 e5                	mov    ebp,esp
c000e0bf:	83 ec 08             	sub    esp,0x8
c000e0c2:	83 ec 0c             	sub    esp,0xc
c000e0c5:	68 25 20 02 c0       	push   0xc0022025
c000e0ca:	e8 17 0c 00 00       	call   c000ece6 <KePanic(char const*)>
c000e0cf:	83 c4 10             	add    esp,0x10
c000e0d2:	90                   	nop
c000e0d3:	c9                   	leave  
c000e0d4:	c3                   	ret    
c000e0d5:	90                   	nop

c000e0d6 <GDTEntry::setBase(unsigned int)>:
c000e0d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e0de:	89 c1                	mov    ecx,eax
c000e0e0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e0e4:	c1 e9 10             	shr    ecx,0x10
c000e0e7:	c1 e8 18             	shr    eax,0x18
c000e0ea:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e0ed:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e0f0:	c3                   	ret    
c000e0f1:	90                   	nop

c000e0f2 <GDTEntry::setLimit(unsigned int)>:
c000e0f2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e0f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0fa:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e0fd:	66 89 01             	mov    WORD PTR [ecx],ax
c000e100:	83 e2 f0             	and    edx,0xfffffff0
c000e103:	c1 e8 10             	shr    eax,0x10
c000e106:	83 e0 0f             	and    eax,0xf
c000e109:	09 d0                	or     eax,edx
c000e10b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e10e:	c3                   	ret    
c000e10f:	90                   	nop

c000e110 <GDT::GDT()>:
c000e110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e114:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e11a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e11e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e124:	90                   	nop
c000e125:	c3                   	ret    

c000e126 <GDT::addEntry(GDTEntry)>:
c000e126:	53                   	push   ebx
c000e127:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e12b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e12f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e131:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e135:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e139:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e13d:	8d 48 01             	lea    ecx,[eax+0x1]
c000e140:	c1 e0 03             	shl    eax,0x3
c000e143:	89 0a                	mov    DWORD PTR [edx],ecx
c000e145:	5b                   	pop    ebx
c000e146:	c3                   	ret    
c000e147:	90                   	nop

c000e148 <GDT::getNumberOfEntries()>:
c000e148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e14c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e14e:	c3                   	ret    
c000e14f:	90                   	nop

c000e150 <GDT::flush()>:
c000e150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e154:	8b 10                	mov    edx,DWORD PTR [eax]
c000e156:	83 c0 04             	add    eax,0x4
c000e159:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e160:	a3 82 bd 02 c0       	mov    ds:0xc002bd82,eax
c000e165:	66 89 15 80 bd 02 c0 	mov    WORD PTR ds:0xc002bd80,dx
c000e16c:	e9 e9 21 ff ff       	jmp    c000035a <loadGDT>
c000e171:	90                   	nop

c000e172 <GDT::setup()>:
c000e172:	57                   	push   edi
c000e173:	56                   	push   esi
c000e174:	53                   	push   ebx
c000e175:	83 ec 30             	sub    esp,0x30
c000e178:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e17c:	6a 00                	push   0x0
c000e17e:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e182:	56                   	push   esi
c000e183:	e8 4e ff ff ff       	call   c000e0d6 <GDTEntry::setBase(unsigned int)>
c000e188:	6a 00                	push   0x0
c000e18a:	56                   	push   esi
c000e18b:	e8 62 ff ff ff       	call   c000e0f2 <GDTEntry::setLimit(unsigned int)>
c000e190:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e198:	6a 00                	push   0x0
c000e19a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e19e:	56                   	push   esi
c000e19f:	e8 32 ff ff ff       	call   c000e0d6 <GDTEntry::setBase(unsigned int)>
c000e1a4:	68 ff ff ff 00       	push   0xffffff
c000e1a9:	56                   	push   esi
c000e1aa:	e8 43 ff ff ff       	call   c000e0f2 <GDTEntry::setLimit(unsigned int)>
c000e1af:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e1b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e1b7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e1bb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e1bf:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e1c4:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e1c9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e1cd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e1d1:	89 f8                	mov    eax,edi
c000e1d3:	89 fa                	mov    edx,edi
c000e1d5:	80 e4 f7             	and    ah,0xf7
c000e1d8:	80 ce 60             	or     dh,0x60
c000e1db:	89 c7                	mov    edi,eax
c000e1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1e1:	80 cc 60             	or     ah,0x60
c000e1e4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e1e8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e1ec:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e1f0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e1f4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1f8:	83 c4 20             	add    esp,0x20
c000e1fb:	6a 00                	push   0x0
c000e1fd:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e201:	50                   	push   eax
c000e202:	e8 cf fe ff ff       	call   c000e0d6 <GDTEntry::setBase(unsigned int)>
c000e207:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e20b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e20f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e213:	83 e0 3f             	and    eax,0x3f
c000e216:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e21a:	6a 00                	push   0x0
c000e21c:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e220:	50                   	push   eax
c000e221:	e8 b0 fe ff ff       	call   c000e0d6 <GDTEntry::setBase(unsigned int)>
c000e226:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e22a:	83 e0 3f             	and    eax,0x3f
c000e22d:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e231:	83 c4 0c             	add    esp,0xc
c000e234:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e238:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e23c:	53                   	push   ebx
c000e23d:	e8 e4 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e242:	83 c4 0c             	add    esp,0xc
c000e245:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e249:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e24d:	53                   	push   ebx
c000e24e:	e8 d3 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e253:	83 c4 0c             	add    esp,0xc
c000e256:	57                   	push   edi
c000e257:	56                   	push   esi
c000e258:	53                   	push   ebx
c000e259:	e8 c8 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e25e:	83 c4 0c             	add    esp,0xc
c000e261:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e265:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e269:	53                   	push   ebx
c000e26a:	e8 b7 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e26f:	83 c4 0c             	add    esp,0xc
c000e272:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e276:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e27a:	53                   	push   ebx
c000e27b:	e8 a6 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e280:	83 c4 0c             	add    esp,0xc
c000e283:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e287:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e28b:	53                   	push   ebx
c000e28c:	e8 95 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e291:	83 c4 0c             	add    esp,0xc
c000e294:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e298:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e29c:	53                   	push   ebx
c000e29d:	e8 84 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e2a5:	e8 a6 fe ff ff       	call   c000e150 <GDT::flush()>
c000e2aa:	83 c4 40             	add    esp,0x40
c000e2ad:	5b                   	pop    ebx
c000e2ae:	5e                   	pop    esi
c000e2af:	5f                   	pop    edi
c000e2b0:	c3                   	ret    

c000e2b1 <idleFunction(void*)>:
c000e2b1:	83 ec 0c             	sub    esp,0xc
c000e2b4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e2b9:	48                   	dec    eax
c000e2ba:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e2bf:	75 01                	jne    c000e2c2 <idleFunction(void*)+0x11>
c000e2c1:	fb                   	sti    
c000e2c2:	e8 87 9f 00 00       	call   c001824e <HalSystemIdle()>
c000e2c7:	e8 4a 1f 01 00       	call   c0020216 <idleCommon()>
c000e2cc:	eb f4                	jmp    c000e2c2 <idleFunction(void*)+0x11>
c000e2ce:	66 90                	xchg   ax,ax

c000e2d0 <IDTEntry::IDTEntry(bool)>:
c000e2d0:	53                   	push   ebx
c000e2d1:	83 ec 04             	sub    esp,0x4
c000e2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d8:	88 04 24             	mov    BYTE PTR [esp],al
c000e2db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2df:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e2e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e9:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e2ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2f1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e2f4:	83 e2 f0             	and    edx,0xfffffff0
c000e2f7:	83 ca 0e             	or     edx,0xe
c000e2fa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e2fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e301:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e304:	83 e2 ef             	and    edx,0xffffffef
c000e307:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e30a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e30e:	85 c0                	test   eax,eax
c000e310:	74 06                	je     c000e318 <IDTEntry::IDTEntry(bool)+0x48>
c000e312:	b2 03                	mov    dl,0x3
c000e314:	eb 06                	jmp    c000e31c <IDTEntry::IDTEntry(bool)+0x4c>
c000e316:	66 90                	xchg   ax,ax
c000e318:	b2 00                	mov    dl,0x0
c000e31a:	66 90                	xchg   ax,ax
c000e31c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e320:	83 e2 03             	and    edx,0x3
c000e323:	89 d3                	mov    ebx,edx
c000e325:	c1 e3 05             	shl    ebx,0x5
c000e328:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e32b:	83 e2 9f             	and    edx,0xffffff9f
c000e32e:	88 d1                	mov    cl,dl
c000e330:	88 da                	mov    dl,bl
c000e332:	09 ca                	or     edx,ecx
c000e334:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e337:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e33b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e33e:	83 ca 80             	or     edx,0xffffff80
c000e341:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e344:	90                   	nop
c000e345:	83 c4 04             	add    esp,0x4
c000e348:	5b                   	pop    ebx
c000e349:	c3                   	ret    

c000e34a <IDTEntry::setOffset(unsigned int)>:
c000e34a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e34e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e352:	66 89 02             	mov    WORD PTR [edx],ax
c000e355:	c1 e8 10             	shr    eax,0x10
c000e358:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e35c:	c3                   	ret    
c000e35d:	90                   	nop
c000e35e:	66 90                	xchg   ax,ax

c000e360 <IDT::IDT()>:
c000e360:	90                   	nop
c000e361:	c3                   	ret    

c000e362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e366:	83 c0 30             	add    eax,0x30
c000e369:	c3                   	ret    

c000e36a <IDT::addEntry(IDTEntry, int)>:
c000e36a:	53                   	push   ebx
c000e36b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e36f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e37b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e37e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e382:	5b                   	pop    ebx
c000e383:	c3                   	ret    

c000e384 <IDT::addEntry(int, void (*)(), bool)>:
c000e384:	53                   	push   ebx
c000e385:	83 ec 10             	sub    esp,0x10
c000e388:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e38d:	50                   	push   eax
c000e38e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e392:	53                   	push   ebx
c000e393:	e8 38 ff ff ff       	call   c000e2d0 <IDTEntry::IDTEntry(bool)>
c000e398:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e39c:	53                   	push   ebx
c000e39d:	e8 a8 ff ff ff       	call   c000e34a <IDTEntry::setOffset(unsigned int)>
c000e3a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e3b2:	e8 b3 ff ff ff       	call   c000e36a <IDT::addEntry(IDTEntry, int)>
c000e3b7:	83 c4 30             	add    esp,0x30
c000e3ba:	5b                   	pop    ebx
c000e3bb:	c3                   	ret    

c000e3bc <IDT::flush()>:
c000e3bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3c0:	66 c7 05 88 bd 02 c0 ff 07 	mov    WORD PTR ds:0xc002bd88,0x7ff
c000e3c9:	a3 8a bd 02 c0       	mov    ds:0xc002bd8a,eax
c000e3ce:	0f 01 1d 88 bd 02 c0 	lidtd  ds:0xc002bd88
c000e3d5:	c3                   	ret    

c000e3d6 <IDT::setup()>:
c000e3d6:	57                   	push   edi
c000e3d7:	56                   	push   esi
c000e3d8:	53                   	push   ebx
c000e3d9:	83 ec 10             	sub    esp,0x10
c000e3dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3e0:	6a 00                	push   0x0
c000e3e2:	68 c0 f4 01 c0       	push   0xc001f4c0
c000e3e7:	6a 00                	push   0x0
c000e3e9:	53                   	push   ebx
c000e3ea:	e8 95 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e3ef:	6a 00                	push   0x0
c000e3f1:	68 d0 f4 01 c0       	push   0xc001f4d0
c000e3f6:	6a 01                	push   0x1
c000e3f8:	53                   	push   ebx
c000e3f9:	e8 86 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e3fe:	83 c4 20             	add    esp,0x20
c000e401:	6a 00                	push   0x0
c000e403:	68 da f4 01 c0       	push   0xc001f4da
c000e408:	6a 02                	push   0x2
c000e40a:	53                   	push   ebx
c000e40b:	e8 74 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e410:	6a 00                	push   0x0
c000e412:	68 e4 f4 01 c0       	push   0xc001f4e4
c000e417:	6a 03                	push   0x3
c000e419:	53                   	push   ebx
c000e41a:	e8 65 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e41f:	83 c4 20             	add    esp,0x20
c000e422:	6a 00                	push   0x0
c000e424:	68 ee f4 01 c0       	push   0xc001f4ee
c000e429:	6a 04                	push   0x4
c000e42b:	53                   	push   ebx
c000e42c:	e8 53 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e431:	6a 00                	push   0x0
c000e433:	68 f8 f4 01 c0       	push   0xc001f4f8
c000e438:	6a 05                	push   0x5
c000e43a:	53                   	push   ebx
c000e43b:	e8 44 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e440:	83 c4 20             	add    esp,0x20
c000e443:	6a 00                	push   0x0
c000e445:	68 02 f5 01 c0       	push   0xc001f502
c000e44a:	6a 06                	push   0x6
c000e44c:	53                   	push   ebx
c000e44d:	e8 32 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e452:	6a 00                	push   0x0
c000e454:	68 0c f5 01 c0       	push   0xc001f50c
c000e459:	6a 07                	push   0x7
c000e45b:	53                   	push   ebx
c000e45c:	e8 23 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e461:	83 c4 20             	add    esp,0x20
c000e464:	6a 00                	push   0x0
c000e466:	68 16 f5 01 c0       	push   0xc001f516
c000e46b:	6a 08                	push   0x8
c000e46d:	53                   	push   ebx
c000e46e:	e8 11 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e473:	6a 00                	push   0x0
c000e475:	68 1e f5 01 c0       	push   0xc001f51e
c000e47a:	6a 09                	push   0x9
c000e47c:	53                   	push   ebx
c000e47d:	e8 02 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e482:	83 c4 20             	add    esp,0x20
c000e485:	6a 00                	push   0x0
c000e487:	68 28 f5 01 c0       	push   0xc001f528
c000e48c:	6a 0a                	push   0xa
c000e48e:	53                   	push   ebx
c000e48f:	e8 f0 fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e494:	6a 00                	push   0x0
c000e496:	68 30 f5 01 c0       	push   0xc001f530
c000e49b:	6a 0b                	push   0xb
c000e49d:	53                   	push   ebx
c000e49e:	e8 e1 fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e4a3:	83 c4 20             	add    esp,0x20
c000e4a6:	6a 00                	push   0x0
c000e4a8:	68 38 f5 01 c0       	push   0xc001f538
c000e4ad:	6a 0c                	push   0xc
c000e4af:	53                   	push   ebx
c000e4b0:	e8 cf fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e4b5:	6a 00                	push   0x0
c000e4b7:	68 40 f5 01 c0       	push   0xc001f540
c000e4bc:	6a 0d                	push   0xd
c000e4be:	53                   	push   ebx
c000e4bf:	e8 c0 fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e4c4:	83 c4 20             	add    esp,0x20
c000e4c7:	6a 00                	push   0x0
c000e4c9:	68 5a f5 01 c0       	push   0xc001f55a
c000e4ce:	6a 0e                	push   0xe
c000e4d0:	53                   	push   ebx
c000e4d1:	e8 ae fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e4d6:	6a 00                	push   0x0
c000e4d8:	68 62 f5 01 c0       	push   0xc001f562
c000e4dd:	6a 0f                	push   0xf
c000e4df:	53                   	push   ebx
c000e4e0:	e8 9f fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e4e5:	83 c4 20             	add    esp,0x20
c000e4e8:	6a 00                	push   0x0
c000e4ea:	68 6c f5 01 c0       	push   0xc001f56c
c000e4ef:	6a 10                	push   0x10
c000e4f1:	53                   	push   ebx
c000e4f2:	e8 8d fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e4f7:	6a 00                	push   0x0
c000e4f9:	68 76 f5 01 c0       	push   0xc001f576
c000e4fe:	6a 11                	push   0x11
c000e500:	53                   	push   ebx
c000e501:	e8 7e fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e506:	83 c4 20             	add    esp,0x20
c000e509:	6a 00                	push   0x0
c000e50b:	68 80 f5 01 c0       	push   0xc001f580
c000e510:	6a 12                	push   0x12
c000e512:	53                   	push   ebx
c000e513:	e8 6c fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e518:	6a 01                	push   0x1
c000e51a:	68 1a f6 01 c0       	push   0xc001f61a
c000e51f:	6a 60                	push   0x60
c000e521:	53                   	push   ebx
c000e522:	e8 5d fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e527:	83 c4 20             	add    esp,0x20
c000e52a:	6a 00                	push   0x0
c000e52c:	68 21 f6 01 c0       	push   0xc001f621
c000e531:	6a 20                	push   0x20
c000e533:	53                   	push   ebx
c000e534:	e8 4b fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e539:	6a 00                	push   0x0
c000e53b:	68 0c f6 01 c0       	push   0xc001f60c
c000e540:	6a 21                	push   0x21
c000e542:	53                   	push   ebx
c000e543:	e8 3c fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e548:	83 c4 20             	add    esp,0x20
c000e54b:	6a 00                	push   0x0
c000e54d:	68 13 f6 01 c0       	push   0xc001f613
c000e552:	6a 22                	push   0x22
c000e554:	53                   	push   ebx
c000e555:	e8 2a fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e55a:	6a 00                	push   0x0
c000e55c:	68 8a f5 01 c0       	push   0xc001f58a
c000e561:	6a 23                	push   0x23
c000e563:	53                   	push   ebx
c000e564:	e8 1b fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e569:	83 c4 20             	add    esp,0x20
c000e56c:	6a 00                	push   0x0
c000e56e:	68 94 f5 01 c0       	push   0xc001f594
c000e573:	6a 24                	push   0x24
c000e575:	53                   	push   ebx
c000e576:	e8 09 fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e57b:	6a 00                	push   0x0
c000e57d:	68 9e f5 01 c0       	push   0xc001f59e
c000e582:	6a 25                	push   0x25
c000e584:	53                   	push   ebx
c000e585:	e8 fa fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e58a:	83 c4 20             	add    esp,0x20
c000e58d:	6a 00                	push   0x0
c000e58f:	68 a8 f5 01 c0       	push   0xc001f5a8
c000e594:	6a 26                	push   0x26
c000e596:	53                   	push   ebx
c000e597:	e8 e8 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e59c:	6a 00                	push   0x0
c000e59e:	68 b2 f5 01 c0       	push   0xc001f5b2
c000e5a3:	6a 27                	push   0x27
c000e5a5:	53                   	push   ebx
c000e5a6:	e8 d9 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e5ab:	83 c4 20             	add    esp,0x20
c000e5ae:	6a 00                	push   0x0
c000e5b0:	68 bc f5 01 c0       	push   0xc001f5bc
c000e5b5:	6a 28                	push   0x28
c000e5b7:	53                   	push   ebx
c000e5b8:	e8 c7 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e5bd:	6a 00                	push   0x0
c000e5bf:	68 c6 f5 01 c0       	push   0xc001f5c6
c000e5c4:	6a 29                	push   0x29
c000e5c6:	53                   	push   ebx
c000e5c7:	e8 b8 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e5cc:	83 c4 20             	add    esp,0x20
c000e5cf:	6a 00                	push   0x0
c000e5d1:	68 d0 f5 01 c0       	push   0xc001f5d0
c000e5d6:	6a 2a                	push   0x2a
c000e5d8:	53                   	push   ebx
c000e5d9:	e8 a6 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e5de:	6a 00                	push   0x0
c000e5e0:	68 da f5 01 c0       	push   0xc001f5da
c000e5e5:	6a 2b                	push   0x2b
c000e5e7:	53                   	push   ebx
c000e5e8:	e8 97 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e5ed:	83 c4 20             	add    esp,0x20
c000e5f0:	6a 00                	push   0x0
c000e5f2:	68 e4 f5 01 c0       	push   0xc001f5e4
c000e5f7:	6a 2c                	push   0x2c
c000e5f9:	53                   	push   ebx
c000e5fa:	e8 85 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e5ff:	6a 00                	push   0x0
c000e601:	68 ee f5 01 c0       	push   0xc001f5ee
c000e606:	6a 2d                	push   0x2d
c000e608:	53                   	push   ebx
c000e609:	e8 76 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e60e:	83 c4 20             	add    esp,0x20
c000e611:	6a 00                	push   0x0
c000e613:	68 f8 f5 01 c0       	push   0xc001f5f8
c000e618:	6a 2e                	push   0x2e
c000e61a:	53                   	push   ebx
c000e61b:	e8 64 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e620:	6a 00                	push   0x0
c000e622:	68 02 f6 01 c0       	push   0xc001f602
c000e627:	6a 2f                	push   0x2f
c000e629:	53                   	push   ebx
c000e62a:	e8 55 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e62f:	83 c4 20             	add    esp,0x20
c000e632:	6a 00                	push   0x0
c000e634:	68 5c f7 01 c0       	push   0xc001f75c
c000e639:	6a 30                	push   0x30
c000e63b:	53                   	push   ebx
c000e63c:	e8 43 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e641:	6a 00                	push   0x0
c000e643:	68 66 f7 01 c0       	push   0xc001f766
c000e648:	6a 31                	push   0x31
c000e64a:	53                   	push   ebx
c000e64b:	e8 34 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e650:	83 c4 20             	add    esp,0x20
c000e653:	6a 00                	push   0x0
c000e655:	68 70 f7 01 c0       	push   0xc001f770
c000e65a:	6a 32                	push   0x32
c000e65c:	53                   	push   ebx
c000e65d:	e8 22 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e662:	6a 00                	push   0x0
c000e664:	68 7a f7 01 c0       	push   0xc001f77a
c000e669:	6a 33                	push   0x33
c000e66b:	53                   	push   ebx
c000e66c:	e8 13 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e671:	83 c4 20             	add    esp,0x20
c000e674:	6a 00                	push   0x0
c000e676:	68 84 f7 01 c0       	push   0xc001f784
c000e67b:	6a 34                	push   0x34
c000e67d:	53                   	push   ebx
c000e67e:	e8 01 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e683:	6a 00                	push   0x0
c000e685:	68 8e f7 01 c0       	push   0xc001f78e
c000e68a:	6a 35                	push   0x35
c000e68c:	53                   	push   ebx
c000e68d:	e8 f2 fc ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e692:	83 c4 20             	add    esp,0x20
c000e695:	6a 00                	push   0x0
c000e697:	68 98 f7 01 c0       	push   0xc001f798
c000e69c:	6a 36                	push   0x36
c000e69e:	53                   	push   ebx
c000e69f:	e8 e0 fc ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e6a4:	6a 00                	push   0x0
c000e6a6:	68 a2 f7 01 c0       	push   0xc001f7a2
c000e6ab:	6a 37                	push   0x37
c000e6ad:	53                   	push   ebx
c000e6ae:	e8 d1 fc ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e6b3:	83 c4 1c             	add    esp,0x1c
c000e6b6:	6a 03                	push   0x3
c000e6b8:	6a 02                	push   0x2
c000e6ba:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e6c0:	e8 e3 41 00 00       	call   c00128a8 <VAS::allocatePages(int, int)>
c000e6c5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e6cc:	89 c6                	mov    esi,eax
c000e6ce:	e8 be 02 00 00       	call   c000e991 <malloc>
c000e6d3:	81 c6 00 20 00 00    	add    esi,0x2000
c000e6d9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6dc:	89 c7                	mov    edi,eax
c000e6de:	e8 31 32 00 00       	call   c0011914 <TSS::TSS()>
c000e6e3:	83 c4 0c             	add    esp,0xc
c000e6e6:	68 16 f5 01 c0       	push   0xc001f516
c000e6eb:	56                   	push   esi
c000e6ec:	57                   	push   edi
c000e6ed:	e8 66 32 00 00       	call   c0011958 <TSS::setup(unsigned long, unsigned long)>
c000e6f2:	89 c6                	mov    esi,eax
c000e6f4:	58                   	pop    eax
c000e6f5:	5a                   	pop    edx
c000e6f6:	6a 00                	push   0x0
c000e6f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e6fc:	50                   	push   eax
c000e6fd:	e8 ce fb ff ff       	call   c000e2d0 <IDTEntry::IDTEntry(bool)>
c000e702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e706:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e70b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e712:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e71c:	80 ce 05             	or     dh,0x5
c000e71f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e722:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e72a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e72d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e730:	e8 87 fc ff ff       	call   c000e3bc <IDT::flush()>
c000e735:	83 c4 20             	add    esp,0x20
c000e738:	5b                   	pop    ebx
c000e739:	5e                   	pop    esi
c000e73a:	5f                   	pop    edi
c000e73b:	c3                   	ret    

c000e73c <CPU::current()>:
c000e73c:	83 ec 14             	sub    esp,0x14
c000e73f:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000e745:	68 32 20 02 c0       	push   0xc0022032
c000e74a:	e8 15 88 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e74f:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000e754:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e75a:	83 c4 1c             	add    esp,0x1c
c000e75d:	c3                   	ret    

c000e75e <operator new(unsigned long)>:
c000e75e:	e9 2e 02 00 00       	jmp    c000e991 <malloc>

c000e763 <operator delete(void*)>:
c000e763:	e9 49 02 00 00       	jmp    c000e9b1 <rfree>

c000e768 <disableIRQs()>:
c000e768:	fa                   	cli    
c000e769:	c3                   	ret    

c000e76a <enableIRQs()>:
c000e76a:	fb                   	sti    
c000e76b:	c3                   	ret    

c000e76c <lockScheduler()>:
c000e76c:	fa                   	cli    
c000e76d:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e773:	c3                   	ret    

c000e774 <unlockScheduler()>:
c000e774:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e779:	48                   	dec    eax
c000e77a:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e77f:	75 01                	jne    c000e782 <unlockScheduler()+0xe>
c000e781:	fb                   	sti    
c000e782:	c3                   	ret    

c000e783 <lockStuff()>:
c000e783:	fa                   	cli    
c000e784:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e78a:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000e790:	c3                   	ret    

c000e791 <unlockStuff()>:
c000e791:	83 ec 0c             	sub    esp,0xc
c000e794:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000e799:	48                   	dec    eax
c000e79a:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000e79f:	75 18                	jne    c000e7b9 <unlockStuff()+0x28>
c000e7a1:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000e7a8:	74 0f                	je     c000e7b9 <unlockStuff()+0x28>
c000e7aa:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000e7b4:	e8 af 6d 00 00       	call   c0015568 <schedule()>
c000e7b9:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e7be:	48                   	dec    eax
c000e7bf:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e7c4:	75 01                	jne    c000e7c7 <unlockStuff()+0x36>
c000e7c6:	fb                   	sti    
c000e7c7:	83 c4 0c             	add    esp,0xc
c000e7ca:	c3                   	ret    

c000e7cb <Virt::getAKernelVAS()>:
c000e7cb:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c000e7d0:	c3                   	ret    

c000e7d1 <__not_memcpy>:
c000e7d1:	57                   	push   edi
c000e7d2:	56                   	push   esi
c000e7d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e7db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e7df:	89 c7                	mov    edi,eax
c000e7e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7e3:	5e                   	pop    esi
c000e7e4:	5f                   	pop    edi
c000e7e5:	c3                   	ret    

c000e7e6 <sbrk>:
c000e7e6:	55                   	push   ebp
c000e7e7:	57                   	push   edi
c000e7e8:	56                   	push   esi
c000e7e9:	53                   	push   ebx
c000e7ea:	83 ec 1c             	sub    esp,0x1c
c000e7ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7f1:	85 c0                	test   eax,eax
c000e7f3:	74 61                	je     c000e856 <sbrk+0x70>
c000e7f5:	78 66                	js     c000e85d <sbrk+0x77>
c000e7f7:	8b 15 90 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024090
c000e7fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e801:	05 ff 0f 00 00       	add    eax,0xfff
c000e806:	89 c5                	mov    ebp,eax
c000e808:	78 6b                	js     c000e875 <sbrk+0x8f>
c000e80a:	c1 fd 0c             	sar    ebp,0xc
c000e80d:	bb 00 00 00 00       	mov    ebx,0x0
c000e812:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e818:	8b 3d 90 40 02 c0    	mov    edi,DWORD PTR ds:0xc0024090
c000e81e:	e8 b7 06 00 00       	call   c000eeda <Phys::allocatePage()>
c000e823:	68 01 04 00 00       	push   0x401
c000e828:	57                   	push   edi
c000e829:	50                   	push   eax
c000e82a:	56                   	push   esi
c000e82b:	e8 5a 3f 00 00       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e830:	81 05 90 40 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024090,0x1000
c000e83a:	83 c3 01             	add    ebx,0x1
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	39 dd                	cmp    ebp,ebx
c000e842:	75 ce                	jne    c000e812 <sbrk+0x2c>
c000e844:	0f 20 d8             	mov    eax,cr3
c000e847:	0f 22 d8             	mov    cr3,eax
c000e84a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e84e:	83 c4 1c             	add    esp,0x1c
c000e851:	5b                   	pop    ebx
c000e852:	5e                   	pop    esi
c000e853:	5f                   	pop    edi
c000e854:	5d                   	pop    ebp
c000e855:	c3                   	ret    
c000e856:	a1 90 40 02 c0       	mov    eax,ds:0xc0024090
c000e85b:	eb f1                	jmp    c000e84e <sbrk+0x68>
c000e85d:	83 ec 08             	sub    esp,0x8
c000e860:	50                   	push   eax
c000e861:	68 44 20 02 c0       	push   0xc0022044
c000e866:	e8 f9 86 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e86b:	83 c4 10             	add    esp,0x10
c000e86e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e873:	eb d9                	jmp    c000e84e <sbrk+0x68>
c000e875:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000e87b:	eb 8d                	jmp    c000e80a <sbrk+0x24>

c000e87d <sbrk_thunk>:
c000e87d:	83 ec 0c             	sub    esp,0xc
c000e880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e884:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e889:	7f 10                	jg     c000e89b <sbrk_thunk+0x1e>
c000e88b:	83 ec 0c             	sub    esp,0xc
c000e88e:	50                   	push   eax
c000e88f:	e8 52 ff ff ff       	call   c000e7e6 <sbrk>
c000e894:	83 c4 10             	add    esp,0x10
c000e897:	83 c4 0c             	add    esp,0xc
c000e89a:	c3                   	ret    
c000e89b:	83 ec 08             	sub    esp,0x8
c000e89e:	50                   	push   eax
c000e89f:	68 74 20 02 c0       	push   0xc0022074
c000e8a4:	e8 bb 86 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e8b1:	eb e4                	jmp    c000e897 <sbrk_thunk+0x1a>

c000e8b3 <mmap>:
c000e8b3:	55                   	push   ebp
c000e8b4:	57                   	push   edi
c000e8b5:	56                   	push   esi
c000e8b6:	53                   	push   ebx
c000e8b7:	83 ec 18             	sub    esp,0x18
c000e8ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8be:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e8c4:	89 fb                	mov    ebx,edi
c000e8c6:	c1 eb 0c             	shr    ebx,0xc
c000e8c9:	53                   	push   ebx
c000e8ca:	e8 d2 37 00 00       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c000e8cf:	89 c5                	mov    ebp,eax
c000e8d1:	83 c4 10             	add    esp,0x10
c000e8d4:	85 db                	test   ebx,ebx
c000e8d6:	7e 2f                	jle    c000e907 <mmap+0x54>
c000e8d8:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e8de:	01 c7                	add    edi,eax
c000e8e0:	89 c3                	mov    ebx,eax
c000e8e2:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e8e8:	e8 ed 05 00 00       	call   c000eeda <Phys::allocatePage()>
c000e8ed:	68 01 04 00 00       	push   0x401
c000e8f2:	53                   	push   ebx
c000e8f3:	50                   	push   eax
c000e8f4:	56                   	push   esi
c000e8f5:	e8 90 3e 00 00       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e8fa:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e900:	83 c4 10             	add    esp,0x10
c000e903:	39 fb                	cmp    ebx,edi
c000e905:	75 db                	jne    c000e8e2 <mmap+0x2f>
c000e907:	89 e8                	mov    eax,ebp
c000e909:	83 c4 0c             	add    esp,0xc
c000e90c:	5b                   	pop    ebx
c000e90d:	5e                   	pop    esi
c000e90e:	5f                   	pop    edi
c000e90f:	5d                   	pop    ebp
c000e910:	c3                   	ret    

c000e911 <munmap>:
c000e911:	83 ec 18             	sub    esp,0x18
c000e914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e918:	e8 8c 3a 00 00       	call   c00123a9 <Virt::freeKernelVirtualPages(unsigned long)>
c000e91d:	b8 00 00 00 00       	mov    eax,0x0
c000e922:	83 c4 1c             	add    esp,0x1c
c000e925:	c3                   	ret    

c000e926 <liballoc_lock()>:
c000e926:	fa                   	cli    
c000e927:	83 05 b0 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6b0,0x1
c000e92e:	b8 00 00 00 00       	mov    eax,0x0
c000e933:	c3                   	ret    

c000e934 <liballoc_unlock()>:
c000e934:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e939:	83 e8 01             	sub    eax,0x1
c000e93c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e941:	75 01                	jne    c000e944 <liballoc_unlock()+0x10>
c000e943:	fb                   	sti    
c000e944:	b8 00 00 00 00       	mov    eax,0x0
c000e949:	c3                   	ret    

c000e94a <liballoc_alloc(int)>:
c000e94a:	83 ec 10             	sub    esp,0x10
c000e94d:	6a 01                	push   0x1
c000e94f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e953:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e959:	e8 4a 3f 00 00       	call   c00128a8 <VAS::allocatePages(int, int)>
c000e95e:	83 c4 1c             	add    esp,0x1c
c000e961:	c3                   	ret    

c000e962 <liballoc_free(void*, int)>:
c000e962:	83 ec 14             	sub    esp,0x14
c000e965:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e969:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e96f:	e8 72 3b 00 00       	call   c00124e6 <VAS::freeAllocatedPages(unsigned long)>
c000e974:	b8 00 00 00 00       	mov    eax,0x0
c000e979:	83 c4 1c             	add    esp,0x1c
c000e97c:	c3                   	ret    

c000e97d <realloc>:
c000e97d:	83 ec 14             	sub    esp,0x14
c000e980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e988:	e8 ca 2d ff ff       	call   c0001757 <dlrealloc>
c000e98d:	83 c4 1c             	add    esp,0x1c
c000e990:	c3                   	ret    

c000e991 <malloc>:
c000e991:	83 ec 18             	sub    esp,0x18
c000e994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e998:	e8 7d 28 ff ff       	call   c000121a <dlmalloc>
c000e99d:	83 c4 1c             	add    esp,0x1c
c000e9a0:	c3                   	ret    

c000e9a1 <free>:
c000e9a1:	83 ec 18             	sub    esp,0x18
c000e9a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9a8:	e8 a6 23 ff ff       	call   c0000d53 <dlfree>
c000e9ad:	83 c4 1c             	add    esp,0x1c
c000e9b0:	c3                   	ret    

c000e9b1 <rfree>:
c000e9b1:	83 ec 18             	sub    esp,0x18
c000e9b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9b8:	e8 96 23 ff ff       	call   c0000d53 <dlfree>
c000e9bd:	83 c4 1c             	add    esp,0x1c
c000e9c0:	c3                   	ret    

c000e9c1 <calloc>:
c000e9c1:	56                   	push   esi
c000e9c2:	53                   	push   ebx
c000e9c3:	83 ec 10             	sub    esp,0x10
c000e9c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e9ca:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000e9cf:	53                   	push   ebx
c000e9d0:	e8 bc ff ff ff       	call   c000e991 <malloc>
c000e9d5:	89 c6                	mov    esi,eax
c000e9d7:	83 c4 0c             	add    esp,0xc
c000e9da:	53                   	push   ebx
c000e9db:	6a 00                	push   0x0
c000e9dd:	50                   	push   eax
c000e9de:	e8 0d 1b ff ff       	call   c00004f0 <memset>
c000e9e3:	89 f0                	mov    eax,esi
c000e9e5:	83 c4 14             	add    esp,0x14
c000e9e8:	5b                   	pop    ebx
c000e9e9:	5e                   	pop    esi
c000e9ea:	c3                   	ret    
c000e9eb:	90                   	nop

c000e9ec <KeMailboxTryPost(Mailbox*, void*)>:
c000e9ec:	83 ec 10             	sub    esp,0x10
c000e9ef:	fa                   	cli    
c000e9f0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e9f5:	83 c0 01             	add    eax,0x1
c000e9f8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e9fd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea09:	85 c0                	test   eax,eax
c000ea0b:	75 23                	jne    c000ea30 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000ea0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea15:	89 10                	mov    DWORD PTR [eax],edx
c000ea17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea1e:	8d 50 01             	lea    edx,[eax+0x1]
c000ea21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea28:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ea2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ea30:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea35:	83 e8 01             	sub    eax,0x1
c000ea38:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea3d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea42:	85 c0                	test   eax,eax
c000ea44:	75 02                	jne    c000ea48 <KeMailboxTryPost(Mailbox*, void*)+0x5c>
c000ea46:	fb                   	sti    
c000ea47:	90                   	nop
c000ea48:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea4c:	83 c4 10             	add    esp,0x10
c000ea4f:	c3                   	ret    

c000ea50 <KeMailboxTryGet(Mailbox*, void**)>:
c000ea50:	83 ec 10             	sub    esp,0x10
c000ea53:	fa                   	cli    
c000ea54:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea59:	83 c0 01             	add    eax,0x1
c000ea5c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea61:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea6d:	83 f8 01             	cmp    eax,0x1
c000ea70:	75 22                	jne    c000ea94 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000ea72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea76:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea7c:	89 10                	mov    DWORD PTR [eax],edx
c000ea7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea85:	8d 50 ff             	lea    edx,[eax-0x1]
c000ea88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea8f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ea94:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea99:	83 e8 01             	sub    eax,0x1
c000ea9c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eaa1:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eaa6:	85 c0                	test   eax,eax
c000eaa8:	75 02                	jne    c000eaac <KeMailboxTryGet(Mailbox*, void**)+0x5c>
c000eaaa:	fb                   	sti    
c000eaab:	90                   	nop
c000eaac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eab0:	83 c4 10             	add    esp,0x10
c000eab3:	c3                   	ret    

c000eab4 <KeMailboxCreate()>:
c000eab4:	83 ec 1c             	sub    esp,0x1c
c000eab7:	83 ec 0c             	sub    esp,0xc
c000eaba:	6a 08                	push   0x8
c000eabc:	e8 d0 fe ff ff       	call   c000e991 <malloc>
c000eac1:	83 c4 10             	add    esp,0x10
c000eac4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eac8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eacc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ead2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ead6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eadd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eae1:	83 c4 1c             	add    esp,0x1c
c000eae4:	c3                   	ret    
c000eae5:	8d 76 00             	lea    esi,[esi+0x0]

c000eae8 <KeMailboxPost(Mailbox*, void*)>:
c000eae8:	83 ec 1c             	sub    esp,0x1c
c000eaeb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eaf0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eaf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eaf8:	e8 ef fe ff ff       	call   c000e9ec <KeMailboxTryPost(Mailbox*, void*)>
c000eafd:	83 c4 08             	add    esp,0x8
c000eb00:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb04:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb08:	83 f0 01             	xor    eax,0x1
c000eb0b:	0f b6 c0             	movzx  eax,al
c000eb0e:	85 c0                	test   eax,eax
c000eb10:	74 2a                	je     c000eb3c <KeMailboxPost(Mailbox*, void*)+0x54>
c000eb12:	fa                   	cli    
c000eb13:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb18:	83 c0 01             	add    eax,0x1
c000eb1b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eb20:	e8 43 6a 00 00       	call   c0015568 <schedule()>
c000eb25:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb2a:	83 e8 01             	sub    eax,0x1
c000eb2d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eb32:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb37:	85 c0                	test   eax,eax
c000eb39:	75 01                	jne    c000eb3c <KeMailboxPost(Mailbox*, void*)+0x54>
c000eb3b:	fb                   	sti    
c000eb3c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb41:	85 c0                	test   eax,eax
c000eb43:	75 03                	jne    c000eb48 <KeMailboxPost(Mailbox*, void*)+0x60>
c000eb45:	eb a9                	jmp    c000eaf0 <KeMailboxPost(Mailbox*, void*)+0x8>
c000eb47:	90                   	nop
c000eb48:	90                   	nop
c000eb49:	83 c4 1c             	add    esp,0x1c
c000eb4c:	c3                   	ret    
c000eb4d:	8d 76 00             	lea    esi,[esi+0x0]

c000eb50 <KeMailboxGet(Mailbox*, void**)>:
c000eb50:	83 ec 1c             	sub    esp,0x1c
c000eb53:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eb58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb60:	e8 eb fe ff ff       	call   c000ea50 <KeMailboxTryGet(Mailbox*, void**)>
c000eb65:	83 c4 08             	add    esp,0x8
c000eb68:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb6c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb70:	83 f0 01             	xor    eax,0x1
c000eb73:	0f b6 c0             	movzx  eax,al
c000eb76:	85 c0                	test   eax,eax
c000eb78:	74 2a                	je     c000eba4 <KeMailboxGet(Mailbox*, void**)+0x54>
c000eb7a:	fa                   	cli    
c000eb7b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb80:	83 c0 01             	add    eax,0x1
c000eb83:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eb88:	e8 db 69 00 00       	call   c0015568 <schedule()>
c000eb8d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb92:	83 e8 01             	sub    eax,0x1
c000eb95:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eb9a:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb9f:	85 c0                	test   eax,eax
c000eba1:	75 01                	jne    c000eba4 <KeMailboxGet(Mailbox*, void**)+0x54>
c000eba3:	fb                   	sti    
c000eba4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eba9:	85 c0                	test   eax,eax
c000ebab:	75 03                	jne    c000ebb0 <KeMailboxGet(Mailbox*, void**)+0x60>
c000ebad:	eb a9                	jmp    c000eb58 <KeMailboxGet(Mailbox*, void**)+0x8>
c000ebaf:	90                   	nop
c000ebb0:	90                   	nop
c000ebb1:	83 c4 1c             	add    esp,0x1c
c000ebb4:	c3                   	ret    
c000ebb5:	8d 76 00             	lea    esi,[esi+0x0]

c000ebb8 <KeMailboxDestroy(Mailbox*)>:
c000ebb8:	83 ec 0c             	sub    esp,0xc
c000ebbb:	83 ec 0c             	sub    esp,0xc
c000ebbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebc2:	e8 da fd ff ff       	call   c000e9a1 <free>
c000ebc7:	83 c4 10             	add    esp,0x10
c000ebca:	90                   	nop
c000ebcb:	83 c4 0c             	add    esp,0xc
c000ebce:	c3                   	ret    

c000ebcf <KeEntryPoint>:
c000ebcf:	57                   	push   edi
c000ebd0:	bf f9 03 00 00       	mov    edi,0x3f9
c000ebd5:	56                   	push   esi
c000ebd6:	89 fa                	mov    edx,edi
c000ebd8:	53                   	push   ebx
c000ebd9:	31 f6                	xor    esi,esi
c000ebdb:	83 ec 2c             	sub    esp,0x2c
c000ebde:	a1 00 05 00 00       	mov    eax,ds:0x500
c000ebe3:	a3 90 bd 02 c0       	mov    ds:0xc002bd90,eax
c000ebe8:	89 f0                	mov    eax,esi
c000ebea:	ee                   	out    dx,al
c000ebeb:	bb fb 03 00 00       	mov    ebx,0x3fb
c000ebf0:	b0 80                	mov    al,0x80
c000ebf2:	89 da                	mov    edx,ebx
c000ebf4:	ee                   	out    dx,al
c000ebf5:	b1 03                	mov    cl,0x3
c000ebf7:	ba f8 03 00 00       	mov    edx,0x3f8
c000ebfc:	88 c8                	mov    al,cl
c000ebfe:	ee                   	out    dx,al
c000ebff:	89 f0                	mov    eax,esi
c000ec01:	89 fa                	mov    edx,edi
c000ec03:	ee                   	out    dx,al
c000ec04:	88 c8                	mov    al,cl
c000ec06:	89 da                	mov    edx,ebx
c000ec08:	ee                   	out    dx,al
c000ec09:	b0 c7                	mov    al,0xc7
c000ec0b:	ba fa 03 00 00       	mov    edx,0x3fa
c000ec10:	ee                   	out    dx,al
c000ec11:	b0 0b                	mov    al,0xb
c000ec13:	ba fc 03 00 00       	mov    edx,0x3fc
c000ec18:	ee                   	out    dx,al
c000ec19:	68 83 20 02 c0       	push   0xc0022083
c000ec1e:	e8 41 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec23:	e8 f1 d9 ff ff       	call   c000c619 <KeDisplaySplashScreen()>
c000ec28:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ec2d:	05 ff 0f 00 00       	add    eax,0xfff
c000ec32:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec37:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec3a:	e8 09 04 00 00       	call   c000f048 <Phys::physicalMemorySetup(unsigned int)>
c000ec3f:	e8 3b 36 00 00       	call   c001227f <Virt::virtualMemorySetup()>
c000ec44:	e8 1a d9 ff ff       	call   c000c563 <KeInitialiseAtexit()>
c000ec49:	c7 04 24 9a 20 02 c0 	mov    DWORD PTR [esp],0xc002209a
c000ec50:	e8 0f 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec55:	58                   	pop    eax
c000ec56:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ec5a:	53                   	push   ebx
c000ec5b:	e8 06 39 00 00       	call   c0012566 <VAS::VAS()>
c000ec60:	c7 04 24 aa 20 02 c0 	mov    DWORD PTR [esp],0xc00220aa
c000ec67:	89 1d d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,ebx
c000ec6d:	e8 f2 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec72:	e8 e7 10 01 00       	call   c001fd5e <_init>
c000ec77:	c7 04 24 be 20 02 c0 	mov    DWORD PTR [esp],0xc00220be
c000ec7e:	e8 e1 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec83:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ec8a:	e8 02 fd ff ff       	call   c000e991 <malloc>
c000ec8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec92:	89 c6                	mov    esi,eax
c000ec94:	e8 4b ea ff ff       	call   c000d6e4 <Computer::Computer()>
c000ec99:	5a                   	pop    edx
c000ec9a:	89 35 70 9d 02 c0    	mov    DWORD PTR ds:0xc0029d70,esi
c000eca0:	59                   	pop    ecx
c000eca1:	56                   	push   esi
c000eca2:	68 cd 20 02 c0       	push   0xc00220cd
c000eca7:	e8 b8 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ecac:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000ecb1:	8b 10                	mov    edx,DWORD PTR [eax]
c000ecb3:	53                   	push   ebx
c000ecb4:	6a 00                	push   0x0
c000ecb6:	6a 00                	push   0x0
c000ecb8:	50                   	push   eax
c000ecb9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecbc:	83 c4 14             	add    esp,0x14
c000ecbf:	53                   	push   ebx
c000ecc0:	e8 57 39 00 00       	call   c001261c <VAS::~VAS()>
c000ecc5:	83 c4 30             	add    esp,0x30
c000ecc8:	5b                   	pop    ebx
c000ecc9:	5e                   	pop    esi
c000ecca:	5f                   	pop    edi
c000eccb:	c3                   	ret    

c000eccc <Mutex::Mutex()>:
c000eccc:	83 ec 0c             	sub    esp,0xc
c000eccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecd3:	83 ec 08             	sub    esp,0x8
c000ecd6:	6a 01                	push   0x1
c000ecd8:	50                   	push   eax
c000ecd9:	e8 2e 0c 00 00       	call   c000f90c <Semaphore::Semaphore(int)>
c000ecde:	83 c4 10             	add    esp,0x10
c000ece1:	90                   	nop
c000ece2:	83 c4 0c             	add    esp,0xc
c000ece5:	c3                   	ret    

c000ece6 <KePanic(char const*)>:
c000ece6:	c6 05 94 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd94,0x1
c000eced:	e9 28 97 00 00       	jmp    c001841a <HalPanic(char const*)>

c000ecf2 <Phys::allocateDMA(unsigned long)>:
c000ecf2:	55                   	push   ebp
c000ecf3:	31 ed                	xor    ebp,ebp
c000ecf5:	57                   	push   edi
c000ecf6:	56                   	push   esi
c000ecf7:	53                   	push   ebx
c000ecf8:	31 db                	xor    ebx,ebx
c000ecfa:	83 ec 1c             	sub    esp,0x1c
c000ecfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ed09:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000ed0f:	31 c0                	xor    eax,eax
c000ed11:	c1 ef 0c             	shr    edi,0xc
c000ed14:	eb 1b                	jmp    c000ed31 <Phys::allocateDMA(unsigned long)+0x3f>
c000ed16:	85 c0                	test   eax,eax
c000ed18:	75 06                	jne    c000ed20 <Phys::allocateDMA(unsigned long)+0x2e>
c000ed1a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ed1e:	89 dd                	mov    ebp,ebx
c000ed20:	8d 70 01             	lea    esi,[eax+0x1]
c000ed23:	39 f7                	cmp    edi,esi
c000ed25:	74 37                	je     c000ed5e <Phys::allocateDMA(unsigned long)+0x6c>
c000ed27:	89 f0                	mov    eax,esi
c000ed29:	83 c3 01             	add    ebx,0x1
c000ed2c:	83 fb 0f             	cmp    ebx,0xf
c000ed2f:	7f 13                	jg     c000ed44 <Phys::allocateDMA(unsigned long)+0x52>
c000ed31:	80 bb b0 bd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd4250],0x0
c000ed38:	74 dc                	je     c000ed16 <Phys::allocateDMA(unsigned long)+0x24>
c000ed3a:	31 c0                	xor    eax,eax
c000ed3c:	83 c3 01             	add    ebx,0x1
c000ed3f:	83 fb 0f             	cmp    ebx,0xf
c000ed42:	7e ed                	jle    c000ed31 <Phys::allocateDMA(unsigned long)+0x3f>
c000ed44:	83 ec 0c             	sub    esp,0xc
c000ed47:	68 e4 20 02 c0       	push   0xc00220e4
c000ed4c:	e8 95 ff ff ff       	call   c000ece6 <KePanic(char const*)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	31 c0                	xor    eax,eax
c000ed56:	83 c4 1c             	add    esp,0x1c
c000ed59:	5b                   	pop    ebx
c000ed5a:	5e                   	pop    esi
c000ed5b:	5f                   	pop    edi
c000ed5c:	5d                   	pop    ebp
c000ed5d:	c3                   	ret    
c000ed5e:	89 e9                	mov    ecx,ebp
c000ed60:	c1 f9 04             	sar    ecx,0x4
c000ed63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ed67:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000ed6b:	89 ca                	mov    edx,ecx
c000ed6d:	83 ea 01             	sub    edx,0x1
c000ed70:	79 03                	jns    c000ed75 <Phys::allocateDMA(unsigned long)+0x83>
c000ed72:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ed75:	c1 fa 04             	sar    edx,0x4
c000ed78:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000ed7c:	74 08                	je     c000ed86 <Phys::allocateDMA(unsigned long)+0x94>
c000ed7e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ed82:	31 c0                	xor    eax,eax
c000ed84:	eb b6                	jmp    c000ed3c <Phys::allocateDMA(unsigned long)+0x4a>
c000ed86:	85 f6                	test   esi,esi
c000ed88:	74 17                	je     c000eda1 <Phys::allocateDMA(unsigned long)+0xaf>
c000ed8a:	8d 95 b0 bd 02 c0    	lea    edx,[ebp-0x3ffd4250]
c000ed90:	8d 84 05 b1 bd 02 c0 	lea    eax,[ebp+eax*1-0x3ffd424f]
c000ed97:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ed9a:	83 c2 01             	add    edx,0x1
c000ed9d:	39 d0                	cmp    eax,edx
c000ed9f:	75 f6                	jne    c000ed97 <Phys::allocateDMA(unsigned long)+0xa5>
c000eda1:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000eda6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000edaa:	01 f8                	add    eax,edi
c000edac:	85 d2                	test   edx,edx
c000edae:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000edb3:	74 17                	je     c000edcc <Phys::allocateDMA(unsigned long)+0xda>
c000edb5:	83 ec 0c             	sub    esp,0xc
c000edb8:	68 e4 20 02 c0       	push   0xc00220e4
c000edbd:	e8 24 ff ff ff       	call   c000ece6 <KePanic(char const*)>
c000edc2:	83 c4 10             	add    esp,0x10
c000edc5:	89 f0                	mov    eax,esi
c000edc7:	e9 5d ff ff ff       	jmp    c000ed29 <Phys::allocateDMA(unsigned long)+0x37>
c000edcc:	c1 e5 0c             	shl    ebp,0xc
c000edcf:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000edd5:	e9 7c ff ff ff       	jmp    c000ed56 <Phys::allocateDMA(unsigned long)+0x64>

c000edda <Phys::freeDMA(unsigned long, unsigned long)>:
c000edda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edde:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ede4:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ede9:	c1 ea 0c             	shr    edx,0xc
c000edec:	29 d0                	sub    eax,edx
c000edee:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000edf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edf7:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000edfc:	c1 e8 0c             	shr    eax,0xc
c000edff:	85 d2                	test   edx,edx
c000ee01:	74 11                	je     c000ee14 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ee03:	05 b0 bd 02 c0       	add    eax,0xc002bdb0
c000ee08:	01 c2                	add    edx,eax
c000ee0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ee0d:	83 c0 01             	add    eax,0x1
c000ee10:	39 d0                	cmp    eax,edx
c000ee12:	75 f6                	jne    c000ee0a <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ee14:	c3                   	ret    

c000ee15 <Phys::setPageState(unsigned long, bool)>:
c000ee15:	57                   	push   edi
c000ee16:	56                   	push   esi
c000ee17:	8b 35 94 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024094
c000ee1d:	53                   	push   ebx
c000ee1e:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ee23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ee2b:	0f b6 c0             	movzx  eax,al
c000ee2e:	89 ca                	mov    edx,ecx
c000ee30:	83 e1 07             	and    ecx,0x7
c000ee33:	c1 ea 03             	shr    edx,0x3
c000ee36:	d3 c3                	rol    ebx,cl
c000ee38:	01 d6                	add    esi,edx
c000ee3a:	d3 e0                	shl    eax,cl
c000ee3c:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ee3f:	21 fb                	and    ebx,edi
c000ee41:	88 1e                	mov    BYTE PTR [esi],bl
c000ee43:	8b 1d 94 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024094
c000ee49:	01 da                	add    edx,ebx
c000ee4b:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ee4d:	09 c8                	or     eax,ecx
c000ee4f:	88 02                	mov    BYTE PTR [edx],al
c000ee51:	5b                   	pop    ebx
c000ee52:	5e                   	pop    esi
c000ee53:	5f                   	pop    edi
c000ee54:	c3                   	ret    

c000ee55 <Phys::getPageState(unsigned long)>:
c000ee55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee59:	8b 15 94 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024094
c000ee5f:	89 c8                	mov    eax,ecx
c000ee61:	83 e1 07             	and    ecx,0x7
c000ee64:	c1 e8 03             	shr    eax,0x3
c000ee67:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ee6b:	d3 f8                	sar    eax,cl
c000ee6d:	83 e0 01             	and    eax,0x1
c000ee70:	c3                   	ret    

c000ee71 <Phys::freePage(unsigned long)>:
c000ee71:	53                   	push   ebx
c000ee72:	83 ec 08             	sub    esp,0x8
c000ee75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee79:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ee7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ee85:	76 41                	jbe    c000eec8 <Phys::freePage(unsigned long)+0x57>
c000ee87:	c1 e8 0c             	shr    eax,0xc
c000ee8a:	50                   	push   eax
c000ee8b:	89 c3                	mov    ebx,eax
c000ee8d:	e8 c3 ff ff ff       	call   c000ee55 <Phys::getPageState(unsigned long)>
c000ee92:	5a                   	pop    edx
c000ee93:	84 c0                	test   al,al
c000ee95:	74 20                	je     c000eeb7 <Phys::freePage(unsigned long)+0x46>
c000ee97:	83 ec 08             	sub    esp,0x8
c000ee9a:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ee9f:	6a 00                	push   0x0
c000eea1:	83 e8 01             	sub    eax,0x1
c000eea4:	53                   	push   ebx
c000eea5:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000eeaa:	e8 66 ff ff ff       	call   c000ee15 <Phys::setPageState(unsigned long, bool)>
c000eeaf:	83 c4 10             	add    esp,0x10
c000eeb2:	83 c4 08             	add    esp,0x8
c000eeb5:	5b                   	pop    ebx
c000eeb6:	c3                   	ret    
c000eeb7:	c7 44 24 10 89 21 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022189
c000eebf:	83 c4 08             	add    esp,0x8
c000eec2:	5b                   	pop    ebx
c000eec3:	e9 1e fe ff ff       	jmp    c000ece6 <KePanic(char const*)>
c000eec8:	68 00 10 00 00       	push   0x1000
c000eecd:	50                   	push   eax
c000eece:	e8 07 ff ff ff       	call   c000edda <Phys::freeDMA(unsigned long, unsigned long)>
c000eed3:	59                   	pop    ecx
c000eed4:	5b                   	pop    ebx
c000eed5:	83 c4 08             	add    esp,0x8
c000eed8:	5b                   	pop    ebx
c000eed9:	c3                   	ret    

c000eeda <Phys::allocatePage()>:
c000eeda:	56                   	push   esi
c000eedb:	53                   	push   ebx
c000eedc:	83 ec 14             	sub    esp,0x14
c000eedf:	8b 35 9c bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bd9c
c000eee5:	89 f3                	mov    ebx,esi
c000eee7:	eb 0a                	jmp    c000eef3 <Phys::allocatePage()+0x19>
c000eee9:	89 1d 9c bd 02 c0    	mov    DWORD PTR ds:0xc002bd9c,ebx
c000eeef:	39 de                	cmp    esi,ebx
c000eef1:	74 26                	je     c000ef19 <Phys::allocatePage()+0x3f>
c000eef3:	53                   	push   ebx
c000eef4:	e8 5c ff ff ff       	call   c000ee55 <Phys::getPageState(unsigned long)>
c000eef9:	5a                   	pop    edx
c000eefa:	84 c0                	test   al,al
c000eefc:	74 67                	je     c000ef65 <Phys::allocatePage()+0x8b>
c000eefe:	83 c3 01             	add    ebx,0x1
c000ef01:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ef07:	75 e0                	jne    c000eee9 <Phys::allocatePage()+0xf>
c000ef09:	31 db                	xor    ebx,ebx
c000ef0b:	c7 05 9c bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd9c,0x0
c000ef15:	39 de                	cmp    esi,ebx
c000ef17:	75 da                	jne    c000eef3 <Phys::allocatePage()+0x19>
c000ef19:	83 ec 0c             	sub    esp,0xc
c000ef1c:	a0 c0 bd 02 c0       	mov    al,ds:0xc002bdc0
c000ef21:	83 f0 01             	xor    eax,0x1
c000ef24:	a2 c0 bd 02 c0       	mov    ds:0xc002bdc0,al
c000ef29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ef31:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000ef37:	50                   	push   eax
c000ef38:	e8 09 41 00 00       	call   c0013046 <VAS::scanForEviction()>
c000ef3d:	83 c4 10             	add    esp,0x10
c000ef40:	85 c0                	test   eax,eax
c000ef42:	75 48                	jne    c000ef8c <Phys::allocatePage()+0xb2>
c000ef44:	83 ec 0c             	sub    esp,0xc
c000ef47:	68 0c 21 02 c0       	push   0xc002210c
c000ef4c:	e8 95 fd ff ff       	call   c000ece6 <KePanic(char const*)>
c000ef51:	83 c4 10             	add    esp,0x10
c000ef54:	8b 1d 9c bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd9c
c000ef5a:	53                   	push   ebx
c000ef5b:	e8 f5 fe ff ff       	call   c000ee55 <Phys::getPageState(unsigned long)>
c000ef60:	5a                   	pop    edx
c000ef61:	84 c0                	test   al,al
c000ef63:	75 99                	jne    c000eefe <Phys::allocatePage()+0x24>
c000ef65:	6a 01                	push   0x1
c000ef67:	53                   	push   ebx
c000ef68:	e8 a8 fe ff ff       	call   c000ee15 <Phys::setPageState(unsigned long, bool)>
c000ef6d:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000ef73:	a1 9c bd 02 c0       	mov    eax,ds:0xc002bd9c
c000ef78:	83 c2 01             	add    edx,0x1
c000ef7b:	59                   	pop    ecx
c000ef7c:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000ef82:	c1 e0 0c             	shl    eax,0xc
c000ef85:	5b                   	pop    ebx
c000ef86:	83 c4 14             	add    esp,0x14
c000ef89:	5b                   	pop    ebx
c000ef8a:	5e                   	pop    esi
c000ef8b:	c3                   	ret    
c000ef8c:	83 ec 08             	sub    esp,0x8
c000ef8f:	89 c2                	mov    edx,eax
c000ef91:	6a 01                	push   0x1
c000ef93:	c1 ea 0c             	shr    edx,0xc
c000ef96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef9a:	52                   	push   edx
c000ef9b:	e8 75 fe ff ff       	call   c000ee15 <Phys::setPageState(unsigned long, bool)>
c000efa0:	83 c4 10             	add    esp,0x10
c000efa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa7:	eb dd                	jmp    c000ef86 <Phys::allocatePage()+0xac>

c000efa9 <Phys::allocateContiguousPages(int)>:
c000efa9:	57                   	push   edi
c000efaa:	56                   	push   esi
c000efab:	53                   	push   ebx
c000efac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000efb0:	fa                   	cli    
c000efb1:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000efb6:	31 db                	xor    ebx,ebx
c000efb8:	83 c0 01             	add    eax,0x1
c000efbb:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000efc0:	85 db                	test   ebx,ebx
c000efc2:	75 11                	jne    c000efd5 <Phys::allocateContiguousPages(int)+0x2c>
c000efc4:	e8 11 ff ff ff       	call   c000eeda <Phys::allocatePage()>
c000efc9:	83 fe 01             	cmp    esi,0x1
c000efcc:	89 c7                	mov    edi,eax
c000efce:	74 21                	je     c000eff1 <Phys::allocateContiguousPages(int)+0x48>
c000efd0:	bb 01 00 00 00       	mov    ebx,0x1
c000efd5:	e8 00 ff ff ff       	call   c000eeda <Phys::allocatePage()>
c000efda:	89 da                	mov    edx,ebx
c000efdc:	c1 e2 0c             	shl    edx,0xc
c000efdf:	01 fa                	add    edx,edi
c000efe1:	39 c2                	cmp    edx,eax
c000efe3:	74 22                	je     c000f007 <Phys::allocateContiguousPages(int)+0x5e>
c000efe5:	bb 01 00 00 00       	mov    ebx,0x1
c000efea:	89 c7                	mov    edi,eax
c000efec:	83 fe 01             	cmp    esi,0x1
c000efef:	75 e4                	jne    c000efd5 <Phys::allocateContiguousPages(int)+0x2c>
c000eff1:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eff6:	83 e8 01             	sub    eax,0x1
c000eff9:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000effe:	75 01                	jne    c000f001 <Phys::allocateContiguousPages(int)+0x58>
c000f000:	fb                   	sti    
c000f001:	89 f8                	mov    eax,edi
c000f003:	5b                   	pop    ebx
c000f004:	5e                   	pop    esi
c000f005:	5f                   	pop    edi
c000f006:	c3                   	ret    
c000f007:	83 c3 01             	add    ebx,0x1
c000f00a:	39 f3                	cmp    ebx,esi
c000f00c:	75 b2                	jne    c000efc0 <Phys::allocateContiguousPages(int)+0x17>
c000f00e:	eb e1                	jmp    c000eff1 <Phys::allocateContiguousPages(int)+0x48>

c000f010 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f010:	56                   	push   esi
c000f011:	53                   	push   ebx
c000f012:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f016:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c000f01c:	73 06                	jae    c000f024 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f01e:	89 1d a0 bd 02 c0    	mov    DWORD PTR ds:0xc002bda0,ebx
c000f024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f028:	c1 eb 0c             	shr    ebx,0xc
c000f02b:	c1 e8 0c             	shr    eax,0xc
c000f02e:	39 d8                	cmp    eax,ebx
c000f030:	73 13                	jae    c000f045 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f032:	6a 00                	push   0x0
c000f034:	8d 70 01             	lea    esi,[eax+0x1]
c000f037:	50                   	push   eax
c000f038:	e8 d8 fd ff ff       	call   c000ee15 <Phys::setPageState(unsigned long, bool)>
c000f03d:	5a                   	pop    edx
c000f03e:	89 f0                	mov    eax,esi
c000f040:	59                   	pop    ecx
c000f041:	39 f3                	cmp    ebx,esi
c000f043:	75 ed                	jne    c000f032 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f045:	5b                   	pop    ebx
c000f046:	5e                   	pop    esi
c000f047:	c3                   	ret    

c000f048 <Phys::physicalMemorySetup(unsigned int)>:
c000f048:	55                   	push   ebp
c000f049:	57                   	push   edi
c000f04a:	56                   	push   esi
c000f04b:	53                   	push   ebx
c000f04c:	83 ec 40             	sub    esp,0x40
c000f04f:	6a 10                	push   0x10
c000f051:	6a 00                	push   0x0
c000f053:	68 b0 bd 02 c0       	push   0xc002bdb0
c000f058:	e8 93 14 ff ff       	call   c00004f0 <memset>
c000f05d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f061:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f066:	05 00 10 00 00       	add    eax,0x1000
c000f06b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f06f:	5b                   	pop    ebx
c000f070:	31 db                	xor    ebx,ebx
c000f072:	5e                   	pop    esi
c000f073:	50                   	push   eax
c000f074:	68 9f 21 02 c0       	push   0xc002219f
c000f079:	e8 e6 7e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f07e:	83 c4 10             	add    esp,0x10
c000f081:	83 ec 08             	sub    esp,0x8
c000f084:	6a 01                	push   0x1
c000f086:	53                   	push   ebx
c000f087:	83 c3 01             	add    ebx,0x1
c000f08a:	e8 86 fd ff ff       	call   c000ee15 <Phys::setPageState(unsigned long, bool)>
c000f08f:	83 c4 10             	add    esp,0x10
c000f092:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f098:	75 e7                	jne    c000f081 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000f09a:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000f0a1:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000f0a8:	c1 e0 08             	shl    eax,0x8
c000f0ab:	09 c2                	or     edx,eax
c000f0ad:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000f0b1:	0f 84 98 01 00 00    	je     c000f24f <Phys::physicalMemorySetup(unsigned int)+0x207>
c000f0b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f0bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f0c3:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f0c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f0cc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f0d4:	eb 1c                	jmp    c000f0f2 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000f0d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0da:	83 c3 18             	add    ebx,0x18
c000f0dd:	83 c6 01             	add    esi,0x1
c000f0e0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f0e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0e8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f0ec:	0f 84 6d 01 00 00    	je     c000f25f <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f0f2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f0f5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f0f8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f0fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f0ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f103:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f105:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f108:	01 f0                	add    eax,esi
c000f10a:	55                   	push   ebp
c000f10b:	11 fa                	adc    edx,edi
c000f10d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f111:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f115:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f119:	51                   	push   ecx
c000f11a:	56                   	push   esi
c000f11b:	68 3c 21 02 c0       	push   0xc002213c
c000f120:	e8 3f 7e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f129:	83 c4 10             	add    esp,0x10
c000f12c:	09 f8                	or     eax,edi
c000f12e:	0f 85 2b 01 00 00    	jne    c000f25f <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f134:	83 fd 01             	cmp    ebp,0x1
c000f137:	75 9d                	jne    c000f0d6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f139:	ba 00 00 08 00       	mov    edx,0x80000
c000f13e:	89 c1                	mov    ecx,eax
c000f140:	39 f2                	cmp    edx,esi
c000f142:	19 f9                	sbb    ecx,edi
c000f144:	0f 82 ab 00 00 00    	jb     c000f1f5 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f14a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f14e:	89 c1                	mov    ecx,eax
c000f150:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f154:	0f 83 9b 00 00 00    	jae    c000f1f5 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f15a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f15f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f163:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f167:	39 fa                	cmp    edx,edi
c000f169:	19 e8                	sbb    eax,ebp
c000f16b:	0f 82 b0 01 00 00    	jb     c000f321 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c000f171:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f175:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f179:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f17f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f184:	83 d5 ff             	adc    ebp,0xffffffff
c000f187:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f18b:	31 c0                	xor    eax,eax
c000f18d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f191:	39 fa                	cmp    edx,edi
c000f193:	89 c1                	mov    ecx,eax
c000f195:	19 e9                	sbb    ecx,ebp
c000f197:	0f 83 39 ff ff ff    	jae    c000f0d6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f19d:	be 00 00 08 00       	mov    esi,0x80000
c000f1a2:	83 ec 04             	sub    esp,0x4
c000f1a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f1a9:	57                   	push   edi
c000f1aa:	56                   	push   esi
c000f1ab:	68 60 21 02 c0       	push   0xc0022160
c000f1b0:	e8 af 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f1b5:	5d                   	pop    ebp
c000f1b6:	58                   	pop    eax
c000f1b7:	57                   	push   edi
c000f1b8:	56                   	push   esi
c000f1b9:	e8 52 fe ff ff       	call   c000f010 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f1be:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1c6:	83 c4 0c             	add    esp,0xc
c000f1c9:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f1cd:	8b 15 ac bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bdac
c000f1d3:	01 d0                	add    eax,edx
c000f1d5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1dc:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1e1:	52                   	push   edx
c000f1e2:	50                   	push   eax
c000f1e3:	68 c5 21 02 c0       	push   0xc00221c5
c000f1e8:	e8 77 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f1ed:	83 c4 10             	add    esp,0x10
c000f1f0:	e9 e1 fe ff ff       	jmp    c000f0d6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f1f5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f1f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f201:	39 ea                	cmp    edx,ebp
c000f203:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f207:	0f 82 c9 fe ff ff    	jb     c000f0d6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f20d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f212:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f216:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f21a:	0f 83 b6 fe ff ff    	jae    c000f0d6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f220:	39 ee                	cmp    esi,ebp
c000f222:	89 f8                	mov    eax,edi
c000f224:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f228:	0f 83 74 ff ff ff    	jae    c000f1a2 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f22e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f232:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f236:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f23a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f23e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f242:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f246:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f24a:	e9 53 ff ff ff       	jmp    c000f1a2 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f24f:	83 ec 0c             	sub    esp,0xc
c000f252:	68 b7 21 02 c0       	push   0xc00221b7
c000f257:	e8 8a fa ff ff       	call   c000ece6 <KePanic(char const*)>
c000f25c:	83 c4 10             	add    esp,0x10
c000f25f:	83 ec 08             	sub    esp,0x8
c000f262:	bb 60 00 00 00       	mov    ebx,0x60
c000f267:	6a 00                	push   0x0
c000f269:	6a 06                	push   0x6
c000f26b:	e8 a5 fb ff ff       	call   c000ee15 <Phys::setPageState(unsigned long, bool)>
c000f270:	58                   	pop    eax
c000f271:	5a                   	pop    edx
c000f272:	6a 00                	push   0x0
c000f274:	6a 07                	push   0x7
c000f276:	e8 9a fb ff ff       	call   c000ee15 <Phys::setPageState(unsigned long, bool)>
c000f27b:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c000f281:	83 c4 10             	add    esp,0x10
c000f284:	83 c1 02             	add    ecx,0x2
c000f287:	89 0d ac bd 02 c0    	mov    DWORD PTR ds:0xc002bdac,ecx
c000f28d:	83 ec 08             	sub    esp,0x8
c000f290:	6a 00                	push   0x0
c000f292:	53                   	push   ebx
c000f293:	83 c3 01             	add    ebx,0x1
c000f296:	e8 7a fb ff ff       	call   c000ee15 <Phys::setPageState(unsigned long, bool)>
c000f29b:	83 c4 10             	add    esp,0x10
c000f29e:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f2a4:	75 e7                	jne    c000f28d <Phys::physicalMemorySetup(unsigned int)+0x245>
c000f2a6:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f2ab:	bb 40 01 00 00       	mov    ebx,0x140
c000f2b0:	83 c0 20             	add    eax,0x20
c000f2b3:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f2b8:	eb 26                	jmp    c000f2e0 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000f2ba:	83 ec 08             	sub    esp,0x8
c000f2bd:	6a 00                	push   0x0
c000f2bf:	53                   	push   ebx
c000f2c0:	83 c3 01             	add    ebx,0x1
c000f2c3:	e8 4d fb ff ff       	call   c000ee15 <Phys::setPageState(unsigned long, bool)>
c000f2c8:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f2cd:	83 c4 10             	add    esp,0x10
c000f2d0:	83 c0 01             	add    eax,0x1
c000f2d3:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f2d9:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f2de:	74 07                	je     c000f2e7 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c000f2e0:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f2e5:	7e d3                	jle    c000f2ba <Phys::physicalMemorySetup(unsigned int)+0x272>
c000f2e7:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f2ec:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f2f1:	7f 26                	jg     c000f319 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c000f2f3:	83 ec 08             	sub    esp,0x8
c000f2f6:	6a 00                	push   0x0
c000f2f8:	53                   	push   ebx
c000f2f9:	83 c3 01             	add    ebx,0x1
c000f2fc:	e8 14 fb ff ff       	call   c000ee15 <Phys::setPageState(unsigned long, bool)>
c000f301:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f306:	83 c4 10             	add    esp,0x10
c000f309:	83 c0 01             	add    eax,0x1
c000f30c:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f312:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f317:	75 d3                	jne    c000f2ec <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000f319:	83 c4 3c             	add    esp,0x3c
c000f31c:	5b                   	pop    ebx
c000f31d:	5e                   	pop    esi
c000f31e:	5f                   	pop    edi
c000f31f:	5d                   	pop    ebp
c000f320:	c3                   	ret    
c000f321:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000f329:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f331:	e9 3b fe ff ff       	jmp    c000f171 <Phys::physicalMemorySetup(unsigned int)+0x129>

c000f336 <Pipe::isAtty()>:
c000f336:	31 c0                	xor    eax,eax
c000f338:	c3                   	ret    
c000f339:	90                   	nop

c000f33a <Pipe::~Pipe()>:
c000f33a:	83 ec 0c             	sub    esp,0xc
c000f33d:	ba 24 22 02 c0       	mov    edx,0xc0022224
c000f342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f346:	89 10                	mov    DWORD PTR [eax],edx
c000f348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f34c:	83 ec 0c             	sub    esp,0xc
c000f34f:	50                   	push   eax
c000f350:	e8 e3 2a 00 00       	call   c0011e38 <UnixFile::~UnixFile()>
c000f355:	83 c4 10             	add    esp,0x10
c000f358:	90                   	nop
c000f359:	83 c4 0c             	add    esp,0xc
c000f35c:	c3                   	ret    
c000f35d:	90                   	nop

c000f35e <Pipe::~Pipe()>:
c000f35e:	83 ec 0c             	sub    esp,0xc
c000f361:	83 ec 0c             	sub    esp,0xc
c000f364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f368:	e8 cd ff ff ff       	call   c000f33a <Pipe::~Pipe()>
c000f36d:	83 c4 10             	add    esp,0x10
c000f370:	83 ec 08             	sub    esp,0x8
c000f373:	6a 20                	push   0x20
c000f375:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f379:	e8 8a d3 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c000f37e:	83 c4 10             	add    esp,0x10
c000f381:	83 c4 0c             	add    esp,0xc
c000f384:	c3                   	ret    
c000f385:	90                   	nop

c000f386 <Pipe::write(unsigned long long, void*, int*)>:
c000f386:	55                   	push   ebp
c000f387:	57                   	push   edi
c000f388:	56                   	push   esi
c000f389:	53                   	push   ebx
c000f38a:	83 ec 1c             	sub    esp,0x1c
c000f38d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f391:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f395:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f398:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f39c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f39f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f3a3:	89 d8                	mov    eax,ebx
c000f3a5:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f3a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f3ac:	89 d6                	mov    esi,edx
c000f3ae:	89 d7                	mov    edi,edx
c000f3b0:	c1 ff 1f             	sar    edi,0x1f
c000f3b3:	03 34 24             	add    esi,DWORD PTR [esp]
c000f3b6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f3ba:	c1 f8 1f             	sar    eax,0x1f
c000f3bd:	39 f3                	cmp    ebx,esi
c000f3bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f3c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3c7:	19 f8                	sbb    eax,edi
c000f3c9:	b8 01 00 00 00       	mov    eax,0x1
c000f3ce:	72 6e                	jb     c000f43e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000f3d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f3d3:	01 d0                	add    eax,edx
c000f3d5:	99                   	cdq    
c000f3d6:	f7 fb                	idiv   ebx
c000f3d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3dc:	29 d3                	sub    ebx,edx
c000f3de:	89 d7                	mov    edi,edx
c000f3e0:	89 de                	mov    esi,ebx
c000f3e2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f3e5:	c1 fb 1f             	sar    ebx,0x1f
c000f3e8:	39 f2                	cmp    edx,esi
c000f3ea:	19 d8                	sbb    eax,ebx
c000f3ec:	b8 00 00 00 00       	mov    eax,0x0
c000f3f1:	72 04                	jb     c000f3f7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000f3f3:	89 d0                	mov    eax,edx
c000f3f5:	29 f0                	sub    eax,esi
c000f3f7:	89 d3                	mov    ebx,edx
c000f3f9:	29 c3                	sub    ebx,eax
c000f3fb:	74 0b                	je     c000f408 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000f3fd:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000f400:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f404:	89 d9                	mov    ecx,ebx
c000f406:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f408:	85 c0                	test   eax,eax
c000f40a:	74 0d                	je     c000f419 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000f40c:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000f410:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f413:	89 de                	mov    esi,ebx
c000f415:	89 c1                	mov    ecx,eax
c000f417:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f419:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f41c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f421:	75 10                	jne    c000f433 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000f423:	83 ec 0c             	sub    esp,0xc
c000f426:	68 e1 21 02 c0       	push   0xc00221e1
c000f42b:	e8 b6 f8 ff ff       	call   c000ece6 <KePanic(char const*)>
c000f430:	83 c4 10             	add    esp,0x10
c000f433:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f437:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f43a:	89 08                	mov    DWORD PTR [eax],ecx
c000f43c:	31 c0                	xor    eax,eax
c000f43e:	83 c4 1c             	add    esp,0x1c
c000f441:	5b                   	pop    ebx
c000f442:	5e                   	pop    esi
c000f443:	5f                   	pop    edi
c000f444:	5d                   	pop    ebp
c000f445:	c3                   	ret    

c000f446 <Pipe::read(unsigned long long, void*, int*)>:
c000f446:	55                   	push   ebp
c000f447:	57                   	push   edi
c000f448:	56                   	push   esi
c000f449:	53                   	push   ebx
c000f44a:	83 ec 1c             	sub    esp,0x1c
c000f44d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f451:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f455:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f459:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f45c:	89 c8                	mov    eax,ecx
c000f45e:	99                   	cdq    
c000f45f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f463:	74 24                	je     c000f489 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000f465:	39 f9                	cmp    ecx,edi
c000f467:	89 d1                	mov    ecx,edx
c000f469:	19 f1                	sbb    ecx,esi
c000f46b:	73 1c                	jae    c000f489 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000f46d:	fa                   	cli    
c000f46e:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000f474:	e8 ef 60 00 00       	call   c0015568 <schedule()>
c000f479:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f47e:	48                   	dec    eax
c000f47f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f484:	75 d3                	jne    c000f459 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f486:	fb                   	sti    
c000f487:	eb d0                	jmp    c000f459 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f489:	39 f8                	cmp    eax,edi
c000f48b:	89 d1                	mov    ecx,edx
c000f48d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f490:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000f494:	19 f1                	sbb    ecx,esi
c000f496:	73 07                	jae    c000f49f <Pipe::read(unsigned long long, void*, int*)+0x59>
c000f498:	89 04 24             	mov    DWORD PTR [esp],eax
c000f49b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f49f:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f4a2:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f4a5:	29 f7                	sub    edi,esi
c000f4a7:	89 f8                	mov    eax,edi
c000f4a9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000f4ad:	99                   	cdq    
c000f4ae:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000f4b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f4b5:	19 d0                	sbb    eax,edx
c000f4b7:	73 07                	jae    c000f4c0 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000f4b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000f4bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4c0:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000f4c3:	89 ea                	mov    edx,ebp
c000f4c5:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000f4c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f4ce:	74 0d                	je     c000f4dd <Pipe::read(unsigned long long, void*, int*)+0x97>
c000f4d0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f4d3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f4d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f4db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4dd:	85 d2                	test   edx,edx
c000f4df:	74 11                	je     c000f4f2 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000f4e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f4e8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f4ec:	89 d1                	mov    ecx,edx
c000f4ee:	89 c7                	mov    edi,eax
c000f4f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4f2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f4f5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f4f8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f4fb:	99                   	cdq    
c000f4fc:	89 f7                	mov    edi,esi
c000f4fe:	03 04 24             	add    eax,DWORD PTR [esp]
c000f501:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000f505:	c1 ff 1f             	sar    edi,0x1f
c000f508:	57                   	push   edi
c000f509:	56                   	push   esi
c000f50a:	52                   	push   edx
c000f50b:	50                   	push   eax
c000f50c:	e8 33 07 01 00       	call   c001fc44 <__umoddi3>
c000f511:	83 c4 10             	add    esp,0x10
c000f514:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f517:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f51c:	75 10                	jne    c000f52e <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000f51e:	83 ec 0c             	sub    esp,0xc
c000f521:	68 fe 21 02 c0       	push   0xc00221fe
c000f526:	e8 bb f7 ff ff       	call   c000ece6 <KePanic(char const*)>
c000f52b:	83 c4 10             	add    esp,0x10
c000f52e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f532:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f535:	89 10                	mov    DWORD PTR [eax],edx
c000f537:	83 c4 1c             	add    esp,0x1c
c000f53a:	31 c0                	xor    eax,eax
c000f53c:	5b                   	pop    ebx
c000f53d:	5e                   	pop    esi
c000f53e:	5f                   	pop    edi
c000f53f:	5d                   	pop    ebp
c000f540:	c3                   	ret    
c000f541:	90                   	nop

c000f542 <Pipe::Pipe(int)>:
c000f542:	83 ec 0c             	sub    esp,0xc
c000f545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f549:	83 ec 08             	sub    esp,0x8
c000f54c:	6a 00                	push   0x0
c000f54e:	50                   	push   eax
c000f54f:	e8 fe 26 00 00       	call   c0011c52 <UnixFile::UnixFile(int)>
c000f554:	83 c4 10             	add    esp,0x10
c000f557:	ba 24 22 02 c0       	mov    edx,0xc0022224
c000f55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f560:	89 10                	mov    DWORD PTR [eax],edx
c000f562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f566:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f56a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f56d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f571:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f57c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f583:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f587:	83 ec 0c             	sub    esp,0xc
c000f58a:	50                   	push   eax
c000f58b:	e8 01 f4 ff ff       	call   c000e991 <malloc>
c000f590:	83 c4 10             	add    esp,0x10
c000f593:	89 c2                	mov    edx,eax
c000f595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f599:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f59c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5a0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f5a4:	90                   	nop
c000f5a5:	83 c4 0c             	add    esp,0xc
c000f5a8:	c3                   	ret    

c000f5a9 <KePowerThread(void*)>:
c000f5a9:	83 ec 0c             	sub    esp,0xc
c000f5ac:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f5b1:	48                   	dec    eax
c000f5b2:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f5b7:	75 01                	jne    c000f5ba <KePowerThread(void*)+0x11>
c000f5b9:	fb                   	sti    
c000f5ba:	83 ec 0c             	sub    esp,0xc
c000f5bd:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f5c4:	6a 0a                	push   0xa
c000f5c6:	e8 89 61 00 00       	call   c0015754 <sleep(unsigned int)>
c000f5cb:	83 05 24 be 02 c0 0a 	add    DWORD PTR ds:0xc002be24,0xa
c000f5d2:	83 c4 10             	add    esp,0x10
c000f5d5:	eb e3                	jmp    c000f5ba <KePowerThread(void*)+0x11>

c000f5d7 <KeChangePowerSettings(PowerSettings)>:
c000f5d7:	57                   	push   edi
c000f5d8:	b9 09 00 00 00       	mov    ecx,0x9
c000f5dd:	56                   	push   esi
c000f5de:	bf 00 be 02 c0       	mov    edi,0xc002be00
c000f5e3:	fc                   	cld    
c000f5e4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f5ea:	5e                   	pop    esi
c000f5eb:	5f                   	pop    edi
c000f5ec:	c3                   	ret    

c000f5ed <KeUserIOReceived()>:
c000f5ed:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f5f7:	c3                   	ret    

c000f5f8 <KeHandlePowerButton()>:
c000f5f8:	a1 00 be 02 c0       	mov    eax,ds:0xc002be00
c000f5fd:	83 f8 02             	cmp    eax,0x2
c000f600:	75 05                	jne    c000f607 <KeHandlePowerButton()+0xf>
c000f602:	e9 41 e1 ff ff       	jmp    c000d748 <KeShutdown()>
c000f607:	48                   	dec    eax
c000f608:	75 05                	jne    c000f60f <KeHandlePowerButton()+0x17>
c000f60a:	e9 5d e1 ff ff       	jmp    c000d76c <KeSleep()>
c000f60f:	c3                   	ret    

c000f610 <KeHandleSleepButton()>:
c000f610:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c000f615:	83 f8 02             	cmp    eax,0x2
c000f618:	75 05                	jne    c000f61f <KeHandleSleepButton()+0xf>
c000f61a:	e9 29 e1 ff ff       	jmp    c000d748 <KeShutdown()>
c000f61f:	48                   	dec    eax
c000f620:	75 05                	jne    c000f627 <KeHandleSleepButton()+0x17>
c000f622:	e9 45 e1 ff ff       	jmp    c000d76c <KeSleep()>
c000f627:	c3                   	ret    

c000f628 <KeSetupPowerManager()>:
c000f628:	83 ec 0c             	sub    esp,0xc
c000f62b:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f635:	68 f0 00 00 00       	push   0xf0
c000f63a:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f641:	6a 00                	push   0x0
c000f643:	68 a9 f5 00 c0       	push   0xc000f5a9
c000f648:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000f64e:	e8 c5 5c 00 00       	call   c0015318 <Process::createThread(void (*)(void*), void*, int)>
c000f653:	c7 05 00 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002be00,0x2
c000f65d:	c7 05 04 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002be04,0x1
c000f667:	c7 05 08 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002be08,0x3
c000f671:	c7 05 0c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be0c,0x0
c000f67b:	c7 05 18 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be18,0x0
c000f685:	c7 05 10 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be10,0x0
c000f68f:	c7 05 1c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be1c,0x0
c000f699:	c7 05 14 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be14,0x3c
c000f6a3:	c7 05 20 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be20,0x3c
c000f6ad:	83 c4 1c             	add    esp,0x1c
c000f6b0:	c3                   	ret    

c000f6b1 <KeRand()>:
c000f6b1:	69 05 28 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002be28,0x2875
c000f6bb:	69 0d 2c be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002be2c,0xa2e7b175
c000f6c5:	53                   	push   ebx
c000f6c6:	01 c1                	add    ecx,eax
c000f6c8:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f6cd:	f7 25 28 be 02 c0    	mul    DWORD PTR ds:0xc002be28
c000f6d3:	01 ca                	add    edx,ecx
c000f6d5:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f6da:	83 d2 00             	adc    edx,0x0
c000f6dd:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f6e2:	0f b7 da             	movzx  ebx,dx
c000f6e5:	89 da                	mov    edx,ebx
c000f6e7:	89 1d 2c be 02 c0    	mov    DWORD PTR ds:0xc002be2c,ebx
c000f6ed:	0f ac d0 0e          	shrd   eax,edx,0xe
c000f6f1:	5b                   	pop    ebx
c000f6f2:	c3                   	ret    

c000f6f3 <KeSeedRand(unsigned int)>:
c000f6f3:	53                   	push   ebx
c000f6f4:	83 ec 08             	sub    esp,0x8
c000f6f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6fb:	e8 0a 90 00 00       	call   c001870a <HalGetRand()>
c000f700:	c7 05 2c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be2c,0x0
c000f70a:	31 d8                	xor    eax,ebx
c000f70c:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f711:	e8 9b ff ff ff       	call   c000f6b1 <KeRand()>
c000f716:	83 c4 08             	add    esp,0x8
c000f719:	5b                   	pop    ebx
c000f71a:	eb 95                	jmp    c000f6b1 <KeRand()>

c000f71c <KeInitRand()>:
c000f71c:	83 ec 0c             	sub    esp,0xc
c000f71f:	e8 0a 8e 00 00       	call   c001852e <HalQueryPerformanceCounter()>
c000f724:	0f 20 da             	mov    edx,cr3
c000f727:	0f 22 da             	mov    cr3,edx
c000f72a:	0f 20 da             	mov    edx,cr3
c000f72d:	0f 22 da             	mov    cr3,edx
c000f730:	0f 20 da             	mov    edx,cr3
c000f733:	0f 22 da             	mov    cr3,edx
c000f736:	0f 20 da             	mov    edx,cr3
c000f739:	0f 22 da             	mov    cr3,edx
c000f73c:	83 ec 0c             	sub    esp,0xc
c000f73f:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f744:	50                   	push   eax
c000f745:	e8 a9 ff ff ff       	call   c000f6f3 <KeSeedRand(unsigned int)>
c000f74a:	83 c4 1c             	add    esp,0x1c
c000f74d:	c3                   	ret    
c000f74e:	66 90                	xchg   ax,ax

c000f750 <KeResolveCompatibilitySymbol(char*)>:
c000f750:	83 ec 0c             	sub    esp,0xc
c000f753:	83 ec 08             	sub    esp,0x8
c000f756:	68 38 22 02 c0       	push   0xc0022238
c000f75b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f75f:	e8 ec 0f ff ff       	call   c0000750 <strcmp>
c000f764:	83 c4 10             	add    esp,0x10
c000f767:	85 c0                	test   eax,eax
c000f769:	0f 94 c0             	sete   al
c000f76c:	0f b6 c0             	movzx  eax,al
c000f76f:	85 c0                	test   eax,eax
c000f771:	74 0d                	je     c000f780 <KeResolveCompatibilitySymbol(char*)+0x30>
c000f773:	b8 70 9d 02 c0       	mov    eax,0xc0029d70
c000f778:	e9 8b 01 00 00       	jmp    c000f908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f77d:	8d 76 00             	lea    esi,[esi+0x0]
c000f780:	83 ec 08             	sub    esp,0x8
c000f783:	68 41 22 02 c0       	push   0xc0022241
c000f788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f78c:	e8 bf 0f ff ff       	call   c0000750 <strcmp>
c000f791:	83 c4 10             	add    esp,0x10
c000f794:	85 c0                	test   eax,eax
c000f796:	0f 94 c0             	sete   al
c000f799:	0f b6 c0             	movzx  eax,al
c000f79c:	85 c0                	test   eax,eax
c000f79e:	74 0c                	je     c000f7ac <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f7a0:	b8 44 fb 01 c0       	mov    eax,0xc001fb44
c000f7a5:	e9 5e 01 00 00       	jmp    c000f908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7aa:	66 90                	xchg   ax,ax
c000f7ac:	83 ec 08             	sub    esp,0x8
c000f7af:	68 4b 22 02 c0       	push   0xc002224b
c000f7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7b8:	e8 93 0f ff ff       	call   c0000750 <strcmp>
c000f7bd:	83 c4 10             	add    esp,0x10
c000f7c0:	85 c0                	test   eax,eax
c000f7c2:	0f 94 c0             	sete   al
c000f7c5:	0f b6 c0             	movzx  eax,al
c000f7c8:	85 c0                	test   eax,eax
c000f7ca:	74 0c                	je     c000f7d8 <KeResolveCompatibilitySymbol(char*)+0x88>
c000f7cc:	b8 78 f8 01 c0       	mov    eax,0xc001f878
c000f7d1:	e9 32 01 00 00       	jmp    c000f908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7d6:	66 90                	xchg   ax,ax
c000f7d8:	83 ec 08             	sub    esp,0x8
c000f7db:	68 54 22 02 c0       	push   0xc0022254
c000f7e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7e4:	e8 67 0f ff ff       	call   c0000750 <strcmp>
c000f7e9:	83 c4 10             	add    esp,0x10
c000f7ec:	85 c0                	test   eax,eax
c000f7ee:	0f 94 c0             	sete   al
c000f7f1:	0f b6 c0             	movzx  eax,al
c000f7f4:	85 c0                	test   eax,eax
c000f7f6:	74 0c                	je     c000f804 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f7f8:	b8 e6 ec 00 c0       	mov    eax,0xc000ece6
c000f7fd:	e9 06 01 00 00       	jmp    c000f908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f802:	66 90                	xchg   ax,ax
c000f804:	83 ec 08             	sub    esp,0x8
c000f807:	68 67 22 02 c0       	push   0xc0022267
c000f80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f810:	e8 3b 0f ff ff       	call   c0000750 <strcmp>
c000f815:	83 c4 10             	add    esp,0x10
c000f818:	85 c0                	test   eax,eax
c000f81a:	0f 94 c0             	sete   al
c000f81d:	0f b6 c0             	movzx  eax,al
c000f820:	85 c0                	test   eax,eax
c000f822:	74 0c                	je     c000f830 <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f824:	b8 48 c6 00 c0       	mov    eax,0xc000c648
c000f829:	e9 da 00 00 00       	jmp    c000f908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f82e:	66 90                	xchg   ax,ax
c000f830:	83 ec 08             	sub    esp,0x8
c000f833:	68 84 22 02 c0       	push   0xc0022284
c000f838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83c:	e8 0f 0f ff ff       	call   c0000750 <strcmp>
c000f841:	83 c4 10             	add    esp,0x10
c000f844:	85 c0                	test   eax,eax
c000f846:	0f 94 c0             	sete   al
c000f849:	0f b6 c0             	movzx  eax,al
c000f84c:	85 c0                	test   eax,eax
c000f84e:	74 0c                	je     c000f85c <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f850:	b8 44 fc 01 c0       	mov    eax,0xc001fc44
c000f855:	e9 ae 00 00 00       	jmp    c000f908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f85a:	66 90                	xchg   ax,ax
c000f85c:	83 ec 08             	sub    esp,0x8
c000f85f:	68 8e 22 02 c0       	push   0xc002228e
c000f864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f868:	e8 e3 0e ff ff       	call   c0000750 <strcmp>
c000f86d:	83 c4 10             	add    esp,0x10
c000f870:	85 c0                	test   eax,eax
c000f872:	0f 94 c0             	sete   al
c000f875:	0f b6 c0             	movzx  eax,al
c000f878:	85 c0                	test   eax,eax
c000f87a:	74 0c                	je     c000f888 <KeResolveCompatibilitySymbol(char*)+0x138>
c000f87c:	b8 c4 f9 01 c0       	mov    eax,0xc001f9c4
c000f881:	e9 82 00 00 00       	jmp    c000f908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f886:	66 90                	xchg   ax,ax
c000f888:	83 ec 08             	sub    esp,0x8
c000f88b:	68 97 22 02 c0       	push   0xc0022297
c000f890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f894:	e8 b7 0e ff ff       	call   c0000750 <strcmp>
c000f899:	83 c4 10             	add    esp,0x10
c000f89c:	85 c0                	test   eax,eax
c000f89e:	0f 94 c0             	sete   al
c000f8a1:	0f b6 c0             	movzx  eax,al
c000f8a4:	85 c0                	test   eax,eax
c000f8a6:	74 08                	je     c000f8b0 <KeResolveCompatibilitySymbol(char*)+0x160>
c000f8a8:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f8ad:	eb 59                	jmp    c000f908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8af:	90                   	nop
c000f8b0:	83 ec 08             	sub    esp,0x8
c000f8b3:	68 af 22 02 c0       	push   0xc00222af
c000f8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8bc:	e8 8f 0e ff ff       	call   c0000750 <strcmp>
c000f8c1:	83 c4 10             	add    esp,0x10
c000f8c4:	85 c0                	test   eax,eax
c000f8c6:	0f 94 c0             	sete   al
c000f8c9:	0f b6 c0             	movzx  eax,al
c000f8cc:	85 c0                	test   eax,eax
c000f8ce:	74 08                	je     c000f8d8 <KeResolveCompatibilitySymbol(char*)+0x188>
c000f8d0:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f8d5:	eb 31                	jmp    c000f908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8d7:	90                   	nop
c000f8d8:	83 ec 08             	sub    esp,0x8
c000f8db:	68 bc 22 02 c0       	push   0xc00222bc
c000f8e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8e4:	e8 67 0e ff ff       	call   c0000750 <strcmp>
c000f8e9:	83 c4 10             	add    esp,0x10
c000f8ec:	85 c0                	test   eax,eax
c000f8ee:	0f 94 c0             	sete   al
c000f8f1:	0f b6 c0             	movzx  eax,al
c000f8f4:	85 c0                	test   eax,eax
c000f8f6:	74 08                	je     c000f900 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f8f8:	b8 75 9d 02 c0       	mov    eax,0xc0029d75
c000f8fd:	eb 09                	jmp    c000f908 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8ff:	90                   	nop
c000f900:	b8 00 00 00 00       	mov    eax,0x0
c000f905:	8d 76 00             	lea    esi,[esi+0x0]
c000f908:	83 c4 0c             	add    esp,0xc
c000f90b:	c3                   	ret    

c000f90c <Semaphore::Semaphore(int)>:
c000f90c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f910:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f914:	89 10                	mov    DWORD PTR [eax],edx
c000f916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f91a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f921:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f925:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f92c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f930:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000f937:	90                   	nop
c000f938:	c3                   	ret    
c000f939:	90                   	nop
c000f93a:	66 90                	xchg   ax,ax

c000f93c <Semaphore::tryAcquire()>:
c000f93c:	83 ec 0c             	sub    esp,0xc
c000f93f:	fa                   	cli    
c000f940:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f945:	83 c0 01             	add    eax,0x1
c000f948:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f94d:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f952:	83 c0 01             	add    eax,0x1
c000f955:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f95e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f965:	8b 00                	mov    eax,DWORD PTR [eax]
c000f967:	39 c2                	cmp    edx,eax
c000f969:	7d 5d                	jge    c000f9c8 <Semaphore::tryAcquire()+0x8c>
c000f96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f96f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f972:	8d 50 01             	lea    edx,[eax+0x1]
c000f975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f979:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f97c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f981:	83 e8 01             	sub    eax,0x1
c000f984:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f989:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f98e:	85 c0                	test   eax,eax
c000f990:	75 1a                	jne    c000f9ac <Semaphore::tryAcquire()+0x70>
c000f992:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f997:	85 c0                	test   eax,eax
c000f999:	74 11                	je     c000f9ac <Semaphore::tryAcquire()+0x70>
c000f99b:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f9a5:	e8 be 5b 00 00       	call   c0015568 <schedule()>
c000f9aa:	66 90                	xchg   ax,ax
c000f9ac:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9b1:	83 e8 01             	sub    eax,0x1
c000f9b4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f9b9:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9be:	85 c0                	test   eax,eax
c000f9c0:	75 02                	jne    c000f9c4 <Semaphore::tryAcquire()+0x88>
c000f9c2:	fb                   	sti    
c000f9c3:	90                   	nop
c000f9c4:	b0 01                	mov    al,0x1
c000f9c6:	eb 4c                	jmp    c000fa14 <Semaphore::tryAcquire()+0xd8>
c000f9c8:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f9cd:	83 e8 01             	sub    eax,0x1
c000f9d0:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f9d5:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f9da:	85 c0                	test   eax,eax
c000f9dc:	75 1a                	jne    c000f9f8 <Semaphore::tryAcquire()+0xbc>
c000f9de:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f9e3:	85 c0                	test   eax,eax
c000f9e5:	74 11                	je     c000f9f8 <Semaphore::tryAcquire()+0xbc>
c000f9e7:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f9f1:	e8 72 5b 00 00       	call   c0015568 <schedule()>
c000f9f6:	66 90                	xchg   ax,ax
c000f9f8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9fd:	83 e8 01             	sub    eax,0x1
c000fa00:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fa05:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 02                	jne    c000fa10 <Semaphore::tryAcquire()+0xd4>
c000fa0e:	fb                   	sti    
c000fa0f:	90                   	nop
c000fa10:	b0 00                	mov    al,0x0
c000fa12:	66 90                	xchg   ax,ax
c000fa14:	83 c4 0c             	add    esp,0xc
c000fa17:	c3                   	ret    

c000fa18 <Semaphore::assertLocked(char const*)>:
c000fa18:	83 ec 0c             	sub    esp,0xc
c000fa1b:	fa                   	cli    
c000fa1c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa21:	83 c0 01             	add    eax,0x1
c000fa24:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fa29:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa2e:	83 c0 01             	add    eax,0x1
c000fa31:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fa36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa3a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa41:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa43:	39 c2                	cmp    edx,eax
c000fa45:	7d 11                	jge    c000fa58 <Semaphore::assertLocked(char const*)+0x40>
c000fa47:	83 ec 0c             	sub    esp,0xc
c000fa4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fa4e:	e8 93 f2 ff ff       	call   c000ece6 <KePanic(char const*)>
c000fa53:	83 c4 10             	add    esp,0x10
c000fa56:	66 90                	xchg   ax,ax
c000fa58:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa5d:	83 e8 01             	sub    eax,0x1
c000fa60:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fa65:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa6a:	85 c0                	test   eax,eax
c000fa6c:	75 1a                	jne    c000fa88 <Semaphore::assertLocked(char const*)+0x70>
c000fa6e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fa73:	85 c0                	test   eax,eax
c000fa75:	74 11                	je     c000fa88 <Semaphore::assertLocked(char const*)+0x70>
c000fa77:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fa81:	e8 e2 5a 00 00       	call   c0015568 <schedule()>
c000fa86:	66 90                	xchg   ax,ax
c000fa88:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa8d:	83 e8 01             	sub    eax,0x1
c000fa90:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fa95:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa9a:	85 c0                	test   eax,eax
c000fa9c:	75 02                	jne    c000faa0 <Semaphore::assertLocked(char const*)+0x88>
c000fa9e:	fb                   	sti    
c000fa9f:	90                   	nop
c000faa0:	90                   	nop
c000faa1:	83 c4 0c             	add    esp,0xc
c000faa4:	c3                   	ret    
c000faa5:	90                   	nop
c000faa6:	66 90                	xchg   ax,ax

c000faa8 <Semaphore::acquire(int)>:
c000faa8:	83 ec 1c             	sub    esp,0x1c
c000faab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000fab0:	0f 84 9a 00 00 00    	je     c000fb50 <Semaphore::acquire(int)+0xa8>
c000fab6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fabe:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000fac3:	90                   	nop
c000fac4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000fac9:	85 c0                	test   eax,eax
c000facb:	74 77                	je     c000fb44 <Semaphore::acquire(int)+0x9c>
c000facd:	83 ec 0c             	sub    esp,0xc
c000fad0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fad4:	e8 63 fe ff ff       	call   c000f93c <Semaphore::tryAcquire()>
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	83 f0 01             	xor    eax,0x1
c000fadf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fae3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fae7:	83 f0 01             	xor    eax,0x1
c000faea:	0f b6 c0             	movzx  eax,al
c000faed:	85 c0                	test   eax,eax
c000faef:	75 4f                	jne    c000fb40 <Semaphore::acquire(int)+0x98>
c000faf1:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000faf6:	7f 2c                	jg     c000fb24 <Semaphore::acquire(int)+0x7c>
c000faf8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fafc:	89 d0                	mov    eax,edx
c000fafe:	c1 e0 02             	shl    eax,0x2
c000fb01:	01 d0                	add    eax,edx
c000fb03:	01 c0                	add    eax,eax
c000fb05:	83 ec 0c             	sub    esp,0xc
c000fb08:	50                   	push   eax
c000fb09:	e8 32 5c 00 00       	call   c0015740 <milliTenthSleep(unsigned int)>
c000fb0e:	83 c4 10             	add    esp,0x10
c000fb11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb15:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fb19:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fb21:	eb a1                	jmp    c000fac4 <Semaphore::acquire(int)+0x1c>
c000fb23:	90                   	nop
c000fb24:	83 ec 0c             	sub    esp,0xc
c000fb27:	68 90 01 00 00       	push   0x190
c000fb2c:	e8 0f 5c 00 00       	call   c0015740 <milliTenthSleep(unsigned int)>
c000fb31:	83 c4 10             	add    esp,0x10
c000fb34:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fb39:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fb3e:	eb 84                	jmp    c000fac4 <Semaphore::acquire(int)+0x1c>
c000fb40:	90                   	nop
c000fb41:	8d 76 00             	lea    esi,[esi+0x0]
c000fb44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb48:	e9 ff 00 00 00       	jmp    c000fc4c <Semaphore::acquire(int)+0x1a4>
c000fb4d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb50:	fa                   	cli    
c000fb51:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb56:	83 c0 01             	add    eax,0x1
c000fb59:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fb5e:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb63:	83 c0 01             	add    eax,0x1
c000fb66:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fb6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb6f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fb72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb76:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb78:	39 c2                	cmp    edx,eax
c000fb7a:	7d 14                	jge    c000fb90 <Semaphore::acquire(int)+0xe8>
c000fb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb83:	8d 50 01             	lea    edx,[eax+0x1]
c000fb86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb8a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fb8d:	eb 6d                	jmp    c000fbfc <Semaphore::acquire(int)+0x154>
c000fb8f:	90                   	nop
c000fb90:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fb95:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb97:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fb9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fba2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fba5:	85 c0                	test   eax,eax
c000fba7:	75 13                	jne    c000fbbc <Semaphore::acquire(int)+0x114>
c000fba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fbae:	8b 10                	mov    edx,DWORD PTR [eax]
c000fbb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fbb7:	eb 17                	jmp    c000fbd0 <Semaphore::acquire(int)+0x128>
c000fbb9:	8d 76 00             	lea    esi,[esi+0x0]
c000fbbc:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fbc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fbc8:	8b 12                	mov    edx,DWORD PTR [edx]
c000fbca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000fbcd:	8d 76 00             	lea    esi,[esi+0x0]
c000fbd0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fbd5:	8b 10                	mov    edx,DWORD PTR [eax]
c000fbd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbdb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fbde:	83 ec 0c             	sub    esp,0xc
c000fbe1:	68 cc 22 02 c0       	push   0xc00222cc
c000fbe6:	e8 79 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fbeb:	83 c4 10             	add    esp,0x10
c000fbee:	83 ec 0c             	sub    esp,0xc
c000fbf1:	6a 05                	push   0x5
c000fbf3:	e8 2c 5a 00 00       	call   c0015624 <blockTask(TaskState)>
c000fbf8:	83 c4 10             	add    esp,0x10
c000fbfb:	90                   	nop
c000fbfc:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc01:	83 e8 01             	sub    eax,0x1
c000fc04:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fc09:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc0e:	85 c0                	test   eax,eax
c000fc10:	75 1a                	jne    c000fc2c <Semaphore::acquire(int)+0x184>
c000fc12:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fc17:	85 c0                	test   eax,eax
c000fc19:	74 11                	je     c000fc2c <Semaphore::acquire(int)+0x184>
c000fc1b:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fc25:	e8 3e 59 00 00       	call   c0015568 <schedule()>
c000fc2a:	66 90                	xchg   ax,ax
c000fc2c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc31:	83 e8 01             	sub    eax,0x1
c000fc34:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fc39:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc3e:	85 c0                	test   eax,eax
c000fc40:	75 02                	jne    c000fc44 <Semaphore::acquire(int)+0x19c>
c000fc42:	fb                   	sti    
c000fc43:	90                   	nop
c000fc44:	b8 00 00 00 00       	mov    eax,0x0
c000fc49:	8d 76 00             	lea    esi,[esi+0x0]
c000fc4c:	83 c4 1c             	add    esp,0x1c
c000fc4f:	c3                   	ret    

c000fc50 <Semaphore::acquire()>:
c000fc50:	83 ec 0c             	sub    esp,0xc
c000fc53:	83 ec 08             	sub    esp,0x8
c000fc56:	6a 00                	push   0x0
c000fc58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc5c:	e8 47 fe ff ff       	call   c000faa8 <Semaphore::acquire(int)>
c000fc61:	83 c4 10             	add    esp,0x10
c000fc64:	90                   	nop
c000fc65:	83 c4 0c             	add    esp,0xc
c000fc68:	c3                   	ret    
c000fc69:	90                   	nop
c000fc6a:	66 90                	xchg   ax,ax

c000fc6c <Semaphore::release()>:
c000fc6c:	83 ec 1c             	sub    esp,0x1c
c000fc6f:	fa                   	cli    
c000fc70:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc75:	83 c0 01             	add    eax,0x1
c000fc78:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fc7d:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc82:	83 c0 01             	add    eax,0x1
c000fc85:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fc8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc91:	85 c0                	test   eax,eax
c000fc93:	74 2b                	je     c000fcc0 <Semaphore::release()+0x54>
c000fc95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fca0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fca4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fca7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fcae:	83 ec 0c             	sub    esp,0xc
c000fcb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcb5:	e8 a6 5b 00 00       	call   c0015860 <unblockTask(ThreadControlBlock*)>
c000fcba:	83 c4 10             	add    esp,0x10
c000fcbd:	eb 15                	jmp    c000fcd4 <Semaphore::release()+0x68>
c000fcbf:	90                   	nop
c000fcc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcc7:	8d 50 ff             	lea    edx,[eax-0x1]
c000fcca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fcd1:	8d 76 00             	lea    esi,[esi+0x0]
c000fcd4:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fcd9:	83 e8 01             	sub    eax,0x1
c000fcdc:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fce1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fce6:	85 c0                	test   eax,eax
c000fce8:	75 1a                	jne    c000fd04 <Semaphore::release()+0x98>
c000fcea:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fcef:	85 c0                	test   eax,eax
c000fcf1:	74 11                	je     c000fd04 <Semaphore::release()+0x98>
c000fcf3:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fcfd:	e8 66 58 00 00       	call   c0015568 <schedule()>
c000fd02:	66 90                	xchg   ax,ax
c000fd04:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fd09:	83 e8 01             	sub    eax,0x1
c000fd0c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fd11:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fd16:	85 c0                	test   eax,eax
c000fd18:	75 02                	jne    c000fd1c <Semaphore::release()+0xb0>
c000fd1a:	fb                   	sti    
c000fd1b:	90                   	nop
c000fd1c:	90                   	nop
c000fd1d:	83 c4 1c             	add    esp,0x1c
c000fd20:	c3                   	ret    

c000fd21 <KiSigKill(int)>:
c000fd21:	83 ec 0c             	sub    esp,0xc
c000fd24:	6a 00                	push   0x0
c000fd26:	6a 00                	push   0x0
c000fd28:	6a ff                	push   0xffffffff
c000fd2a:	6a 01                	push   0x1
c000fd2c:	e8 21 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd31:	83 c4 1c             	add    esp,0x1c
c000fd34:	c3                   	ret    

c000fd35 <KiDefaultSignalHandlerIgnore(int)>:
c000fd35:	c3                   	ret    

c000fd36 <KiDefaultSignalHandlerPause(int)>:
c000fd36:	57                   	push   edi
c000fd37:	b9 07 00 00 00       	mov    ecx,0x7
c000fd3c:	56                   	push   esi
c000fd3d:	be 27 23 02 c0       	mov    esi,0xc0022327
c000fd42:	83 ec 24             	sub    esp,0x24
c000fd45:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fd49:	fc                   	cld    
c000fd4a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd4c:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fd50:	50                   	push   eax
c000fd51:	6a 00                	push   0x0
c000fd53:	6a 00                	push   0x0
c000fd55:	6a 27                	push   0x27
c000fd57:	e8 f6 52 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd5c:	83 c4 34             	add    esp,0x34
c000fd5f:	5e                   	pop    esi
c000fd60:	5f                   	pop    edi
c000fd61:	c3                   	ret    

c000fd62 <KiDefaultSignalHandlerResume(int)>:
c000fd62:	57                   	push   edi
c000fd63:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fd68:	56                   	push   esi
c000fd69:	be 43 23 02 c0       	mov    esi,0xc0022343
c000fd6e:	83 ec 24             	sub    esp,0x24
c000fd71:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fd75:	fc                   	cld    
c000fd76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd78:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fd7c:	50                   	push   eax
c000fd7d:	6a 00                	push   0x0
c000fd7f:	6a 00                	push   0x0
c000fd81:	6a 27                	push   0x27
c000fd83:	e8 ca 52 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd88:	83 c4 34             	add    esp,0x34
c000fd8b:	5e                   	pop    esi
c000fd8c:	5f                   	pop    edi
c000fd8d:	c3                   	ret    

c000fd8e <KeDeinitSignals(SigHandlerBlock*)>:
c000fd8e:	e9 0e ec ff ff       	jmp    c000e9a1 <free>

c000fd93 <KeInitSignals()>:
c000fd93:	53                   	push   ebx
c000fd94:	83 ec 14             	sub    esp,0x14
c000fd97:	68 c8 00 00 00       	push   0xc8
c000fd9c:	e8 f0 eb ff ff       	call   c000e991 <malloc>
c000fda1:	83 c4 0c             	add    esp,0xc
c000fda4:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fdae:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fdb8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000fdbf:	89 c3                	mov    ebx,eax
c000fdc1:	6a 20                	push   0x20
c000fdc3:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fdc9:	6a 00                	push   0x0
c000fdcb:	50                   	push   eax
c000fdcc:	e8 1f 07 ff ff       	call   c00004f0 <memset>
c000fdd1:	83 c4 0c             	add    esp,0xc
c000fdd4:	6a 44                	push   0x44
c000fdd6:	6a 00                	push   0x0
c000fdd8:	53                   	push   ebx
c000fdd9:	e8 12 07 ff ff       	call   c00004f0 <memset>
c000fdde:	89 d8                	mov    eax,ebx
c000fde0:	83 c4 18             	add    esp,0x18
c000fde3:	5b                   	pop    ebx
c000fde4:	c3                   	ret    

c000fde5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fde5:	53                   	push   ebx
c000fde6:	b8 01 00 00 00       	mov    eax,0x1
c000fdeb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdf3:	83 f9 10             	cmp    ecx,0x10
c000fdf6:	7f 21                	jg     c000fe19 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000fdf8:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fdfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdff:	89 03                	mov    DWORD PTR [ebx],eax
c000fe01:	b8 01 00 00 00       	mov    eax,0x1
c000fe06:	d3 e0                	shl    eax,cl
c000fe08:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fe0c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fe0f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fe17:	31 c0                	xor    eax,eax
c000fe19:	5b                   	pop    ebx
c000fe1a:	c3                   	ret    

c000fe1b <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fe1b:	55                   	push   ebp
c000fe1c:	57                   	push   edi
c000fe1d:	bf 08 00 00 00       	mov    edi,0x8
c000fe22:	56                   	push   esi
c000fe23:	53                   	push   ebx
c000fe24:	83 ec 18             	sub    esp,0x18
c000fe27:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fe2b:	68 60 23 02 c0       	push   0xc0022360
c000fe30:	e8 2f 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe35:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fe3c:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000fe42:	83 c4 10             	add    esp,0x10
c000fe45:	31 c9                	xor    ecx,ecx
c000fe47:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000fe4b:	99                   	cdq    
c000fe4c:	f7 ff                	idiv   edi
c000fe4e:	8d 42 24             	lea    eax,[edx+0x24]
c000fe51:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fe55:	85 f6                	test   esi,esi
c000fe57:	75 1a                	jne    c000fe73 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fe59:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fe5d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000fe61:	50                   	push   eax
c000fe62:	50                   	push   eax
c000fe63:	52                   	push   edx
c000fe64:	68 71 23 02 c0       	push   0xc0022371
c000fe69:	e8 f6 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe6e:	83 c4 10             	add    esp,0x10
c000fe71:	eb 1b                	jmp    c000fe8e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000fe73:	41                   	inc    ecx
c000fe74:	83 f9 08             	cmp    ecx,0x8
c000fe77:	75 ce                	jne    c000fe47 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000fe79:	83 ec 0c             	sub    esp,0xc
c000fe7c:	be 01 00 00 00       	mov    esi,0x1
c000fe81:	68 92 23 02 c0       	push   0xc0022392
c000fe86:	e8 d9 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe8b:	83 c4 10             	add    esp,0x10
c000fe8e:	83 c4 0c             	add    esp,0xc
c000fe91:	89 f0                	mov    eax,esi
c000fe93:	5b                   	pop    ebx
c000fe94:	5e                   	pop    esi
c000fe95:	5f                   	pop    edi
c000fe96:	5d                   	pop    ebp
c000fe97:	c3                   	ret    

c000fe98 <KeCheckSignal(SigHandlerBlock*, int*)>:
c000fe98:	55                   	push   ebp
c000fe99:	57                   	push   edi
c000fe9a:	56                   	push   esi
c000fe9b:	53                   	push   ebx
c000fe9c:	51                   	push   ecx
c000fe9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fea1:	85 db                	test   ebx,ebx
c000fea3:	0f 84 bc 00 00 00    	je     c000ff65 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fea9:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000feb0:	0f 84 af 00 00 00    	je     c000ff65 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000feb6:	31 c9                	xor    ecx,ecx
c000feb8:	bf 08 00 00 00       	mov    edi,0x8
c000febd:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000fec3:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000fec6:	99                   	cdq    
c000fec7:	f7 ff                	idiv   edi
c000fec9:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000fed0:	85 ed                	test   ebp,ebp
c000fed2:	0f 84 9e 00 00 00    	je     c000ff76 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000fed8:	89 e9                	mov    ecx,ebp
c000feda:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000fee0:	bf 01 00 00 00       	mov    edi,0x1
c000fee5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fee8:	d3 e7                	shl    edi,cl
c000feea:	31 c9                	xor    ecx,ecx
c000feec:	b8 01 00 00 00       	mov    eax,0x1
c000fef1:	d3 e0                	shl    eax,cl
c000fef3:	85 04 24             	test   DWORD PTR [esp],eax
c000fef6:	74 06                	je     c000fefe <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000fef8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000fefc:	75 67                	jne    c000ff65 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fefe:	41                   	inc    ecx
c000feff:	83 f9 11             	cmp    ecx,0x11
c000ff02:	75 e8                	jne    c000feec <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000ff04:	46                   	inc    esi
c000ff05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ff08:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000ff0e:	09 f8                	or     eax,edi
c000ff10:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000ff1b:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000ff21:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000ff28:	31 c0                	xor    eax,eax
c000ff2a:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000ff32:	74 09                	je     c000ff3d <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000ff34:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000ff3b:	eb 06                	jmp    c000ff43 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c000ff3d:	40                   	inc    eax
c000ff3e:	83 f8 08             	cmp    eax,0x8
c000ff41:	75 e7                	jne    c000ff2a <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c000ff43:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c000ff46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ff4a:	83 fd 09             	cmp    ebp,0x9
c000ff4d:	89 2a                	mov    DWORD PTR [edx],ebp
c000ff4f:	75 07                	jne    c000ff58 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c000ff51:	b8 21 fd 00 c0       	mov    eax,0xc000fd21
c000ff56:	eb 31                	jmp    c000ff89 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff58:	83 f8 01             	cmp    eax,0x1
c000ff5b:	75 0c                	jne    c000ff69 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c000ff5d:	f7 d7                	not    edi
c000ff5f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c000ff65:	31 c0                	xor    eax,eax
c000ff67:	eb 20                	jmp    c000ff89 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff69:	85 c0                	test   eax,eax
c000ff6b:	75 1c                	jne    c000ff89 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff6d:	8b 04 ad a0 40 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdbf60]
c000ff74:	eb 13                	jmp    c000ff89 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff76:	46                   	inc    esi
c000ff77:	41                   	inc    ecx
c000ff78:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000ff7e:	83 f9 08             	cmp    ecx,0x8
c000ff81:	0f 85 36 ff ff ff    	jne    c000febd <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c000ff87:	eb dc                	jmp    c000ff65 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000ff89:	5a                   	pop    edx
c000ff8a:	5b                   	pop    ebx
c000ff8b:	5e                   	pop    esi
c000ff8c:	5f                   	pop    edi
c000ff8d:	5d                   	pop    ebp
c000ff8e:	c3                   	ret    

c000ff8f <KiCheckSignalZ>:
c000ff8f:	83 ec 10             	sub    esp,0x10
c000ff92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff96:	50                   	push   eax
c000ff97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff9f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000ffa5:	e8 ee fe ff ff       	call   c000fe98 <KeCheckSignal(SigHandlerBlock*, int*)>
c000ffaa:	5a                   	pop    edx
c000ffab:	31 d2                	xor    edx,edx
c000ffad:	59                   	pop    ecx
c000ffae:	85 c0                	test   eax,eax
c000ffb0:	74 19                	je     c000ffcb <KiCheckSignalZ+0x3c>
c000ffb2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ffb8:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ffbb:	89 02                	mov    DWORD PTR [edx],eax
c000ffbd:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c000ffc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffc8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000ffcb:	89 d0                	mov    eax,edx
c000ffcd:	83 c4 10             	add    esp,0x10
c000ffd0:	c3                   	ret    

c000ffd1 <KeCompleteSignal(SigHandlerBlock*, int)>:
c000ffd1:	56                   	push   esi
c000ffd2:	53                   	push   ebx
c000ffd3:	bb 01 00 00 00       	mov    ebx,0x1
c000ffd8:	52                   	push   edx
c000ffd9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ffdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffe1:	d3 e3                	shl    ebx,cl
c000ffe3:	83 f9 10             	cmp    ecx,0x10
c000ffe6:	7f 08                	jg     c000fff0 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c000ffe8:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c000ffee:	75 10                	jne    c0010000 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c000fff0:	83 ec 0c             	sub    esp,0xc
c000fff3:	68 a3 23 02 c0       	push   0xc00223a3
c000fff8:	e8 e9 ec ff ff       	call   c000ece6 <KePanic(char const*)>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	f7 d3                	not    ebx
c0010002:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010008:	58                   	pop    eax
c0010009:	5b                   	pop    ebx
c001000a:	5e                   	pop    esi
c001000b:	c3                   	ret    

c001000c <KiFinishSignalZ>:
c001000c:	53                   	push   ebx
c001000d:	83 ec 10             	sub    esp,0x10
c0010010:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010014:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010017:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001001c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001001f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010025:	e8 a7 ff ff ff       	call   c000ffd1 <KeCompleteSignal(SigHandlerBlock*, int)>
c001002a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010030:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010037:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001003e:	83 c4 18             	add    esp,0x18
c0010041:	5b                   	pop    ebx
c0010042:	c3                   	ret    

c0010043 <SysSeekDir(regs*)>:
c0010043:	31 c0                	xor    eax,eax
c0010045:	31 d2                	xor    edx,edx
c0010047:	c3                   	ret    

c0010048 <SysTellDir(regs*)>:
c0010048:	31 c0                	xor    eax,eax
c001004a:	31 d2                	xor    edx,edx
c001004c:	c3                   	ret    

c001004d <SysVerify(regs*)>:
c001004d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010051:	31 d2                	xor    edx,edx
c0010053:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010056:	c3                   	ret    

c0010057 <SysGetArgc(regs*)>:
c0010057:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001005c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001005f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010065:	89 c2                	mov    edx,eax
c0010067:	c1 fa 1f             	sar    edx,0x1f
c001006a:	c3                   	ret    

c001006b <SysTTYName(regs*)>:
c001006b:	b8 01 00 00 00       	mov    eax,0x1
c0010070:	31 d2                	xor    edx,edx
c0010072:	c3                   	ret    

c0010073 <SysFormatDisk(regs*)>:
c0010073:	56                   	push   esi
c0010074:	53                   	push   ebx
c0010075:	83 ec 04             	sub    esp,0x4
c0010078:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001007c:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c0010082:	eb 28                	jmp    c00100ac <SysFormatDisk(regs*)+0x39>
c0010084:	83 ec 0c             	sub    esp,0xc
c0010087:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001008a:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001008d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001008f:	51                   	push   ecx
c0010090:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010093:	51                   	push   ecx
c0010094:	50                   	push   eax
c0010095:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001009c:	50                   	push   eax
c001009d:	53                   	push   ebx
c001009e:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00100a1:	83 c4 20             	add    esp,0x20
c00100a4:	83 f8 08             	cmp    eax,0x8
c00100a7:	75 14                	jne    c00100bd <SysFormatDisk(regs*)+0x4a>
c00100a9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00100ac:	85 db                	test   ebx,ebx
c00100ae:	75 d4                	jne    c0010084 <SysFormatDisk(regs*)+0x11>
c00100b0:	83 c4 04             	add    esp,0x4
c00100b3:	b8 03 00 00 00       	mov    eax,0x3
c00100b8:	31 d2                	xor    edx,edx
c00100ba:	5b                   	pop    ebx
c00100bb:	5e                   	pop    esi
c00100bc:	c3                   	ret    
c00100bd:	85 c0                	test   eax,eax
c00100bf:	74 1f                	je     c00100e0 <SysFormatDisk(regs*)+0x6d>
c00100c1:	83 f8 09             	cmp    eax,0x9
c00100c4:	74 0d                	je     c00100d3 <SysFormatDisk(regs*)+0x60>
c00100c6:	83 c4 04             	add    esp,0x4
c00100c9:	b8 02 00 00 00       	mov    eax,0x2
c00100ce:	31 d2                	xor    edx,edx
c00100d0:	5b                   	pop    ebx
c00100d1:	5e                   	pop    esi
c00100d2:	c3                   	ret    
c00100d3:	83 c4 04             	add    esp,0x4
c00100d6:	b8 01 00 00 00       	mov    eax,0x1
c00100db:	31 d2                	xor    edx,edx
c00100dd:	5b                   	pop    ebx
c00100de:	5e                   	pop    esi
c00100df:	c3                   	ret    
c00100e0:	83 c4 04             	add    esp,0x4
c00100e3:	31 c0                	xor    eax,eax
c00100e5:	31 d2                	xor    edx,edx
c00100e7:	5b                   	pop    ebx
c00100e8:	5e                   	pop    esi
c00100e9:	c3                   	ret    

c00100ea <SysSetDiskVolumeLabel(regs*)>:
c00100ea:	56                   	push   esi
c00100eb:	53                   	push   ebx
c00100ec:	83 ec 04             	sub    esp,0x4
c00100ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00100f3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00100f6:	83 f8 19             	cmp    eax,0x19
c00100f9:	77 33                	ja     c001012e <SysSetDiskVolumeLabel(regs*)+0x44>
c00100fb:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c0010102:	85 c9                	test   ecx,ecx
c0010104:	74 28                	je     c001012e <SysSetDiskVolumeLabel(regs*)+0x44>
c0010106:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010109:	85 db                	test   ebx,ebx
c001010b:	74 21                	je     c001012e <SysSetDiskVolumeLabel(regs*)+0x44>
c001010d:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010113:	85 d2                	test   edx,edx
c0010115:	74 17                	je     c001012e <SysSetDiskVolumeLabel(regs*)+0x44>
c0010117:	8b 32                	mov    esi,DWORD PTR [edx]
c0010119:	53                   	push   ebx
c001011a:	50                   	push   eax
c001011b:	51                   	push   ecx
c001011c:	52                   	push   edx
c001011d:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0010120:	83 c4 10             	add    esp,0x10
c0010123:	89 c2                	mov    edx,eax
c0010125:	83 c4 04             	add    esp,0x4
c0010128:	c1 fa 1f             	sar    edx,0x1f
c001012b:	5b                   	pop    ebx
c001012c:	5e                   	pop    esi
c001012d:	c3                   	ret    
c001012e:	83 c4 04             	add    esp,0x4
c0010131:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010136:	ba ff ff ff ff       	mov    edx,0xffffffff
c001013b:	5b                   	pop    ebx
c001013c:	5e                   	pop    esi
c001013d:	c3                   	ret    

c001013e <SysGetDiskVolumeLabel(regs*)>:
c001013e:	57                   	push   edi
c001013f:	56                   	push   esi
c0010140:	53                   	push   ebx
c0010141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010145:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010148:	83 fa 19             	cmp    edx,0x19
c001014b:	77 3c                	ja     c0010189 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001014d:	8b 0c 95 80 97 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6880]
c0010154:	85 c9                	test   ecx,ecx
c0010156:	74 31                	je     c0010189 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010158:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001015b:	85 db                	test   ebx,ebx
c001015d:	74 2a                	je     c0010189 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001015f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010162:	85 f6                	test   esi,esi
c0010164:	74 23                	je     c0010189 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010166:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001016c:	85 c0                	test   eax,eax
c001016e:	74 19                	je     c0010189 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010170:	83 ec 0c             	sub    esp,0xc
c0010173:	8b 38                	mov    edi,DWORD PTR [eax]
c0010175:	56                   	push   esi
c0010176:	53                   	push   ebx
c0010177:	52                   	push   edx
c0010178:	51                   	push   ecx
c0010179:	50                   	push   eax
c001017a:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001017d:	83 c4 20             	add    esp,0x20
c0010180:	89 c2                	mov    edx,eax
c0010182:	5b                   	pop    ebx
c0010183:	c1 fa 1f             	sar    edx,0x1f
c0010186:	5e                   	pop    esi
c0010187:	5f                   	pop    edi
c0010188:	c3                   	ret    
c0010189:	5b                   	pop    ebx
c001018a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001018f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010194:	5e                   	pop    esi
c0010195:	5f                   	pop    edi
c0010196:	c3                   	ret    

c0010197 <SysShutdown(regs*)>:
c0010197:	83 ec 0c             	sub    esp,0xc
c001019a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001019e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00101a1:	85 c0                	test   eax,eax
c00101a3:	74 18                	je     c00101bd <SysShutdown(regs*)+0x26>
c00101a5:	83 f8 01             	cmp    eax,0x1
c00101a8:	74 38                	je     c00101e2 <SysShutdown(regs*)+0x4b>
c00101aa:	83 f8 02             	cmp    eax,0x2
c00101ad:	74 24                	je     c00101d3 <SysShutdown(regs*)+0x3c>
c00101af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00101b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00101b9:	83 c4 0c             	add    esp,0xc
c00101bc:	c3                   	ret    
c00101bd:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00101c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00101c4:	6a 00                	push   0x0
c00101c6:	6a 00                	push   0x0
c00101c8:	6a 00                	push   0x0
c00101ca:	50                   	push   eax
c00101cb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00101ce:	83 c4 10             	add    esp,0x10
c00101d1:	eb dc                	jmp    c00101af <SysShutdown(regs*)+0x18>
c00101d3:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00101d8:	8b 10                	mov    edx,DWORD PTR [eax]
c00101da:	6a 00                	push   0x0
c00101dc:	6a 00                	push   0x0
c00101de:	6a 01                	push   0x1
c00101e0:	eb e8                	jmp    c00101ca <SysShutdown(regs*)+0x33>
c00101e2:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c00101e7:	85 c0                	test   eax,eax
c00101e9:	74 02                	je     c00101ed <SysShutdown(regs*)+0x56>
c00101eb:	ff d0                	call   eax
c00101ed:	31 c0                	xor    eax,eax
c00101ef:	31 d2                	xor    edx,edx
c00101f1:	83 c4 0c             	add    esp,0xc
c00101f4:	c3                   	ret    

c00101f5 <SysRealpath(regs*)>:
c00101f5:	83 ec 0c             	sub    esp,0xc
c00101f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101fc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00101ff:	85 d2                	test   edx,edx
c0010201:	74 07                	je     c001020a <SysRealpath(regs*)+0x15>
c0010203:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010206:	85 c0                	test   eax,eax
c0010208:	75 0b                	jne    c0010215 <SysRealpath(regs*)+0x20>
c001020a:	b8 01 00 00 00       	mov    eax,0x1
c001020f:	31 d2                	xor    edx,edx
c0010211:	83 c4 0c             	add    esp,0xc
c0010214:	c3                   	ret    
c0010215:	6a 00                	push   0x0
c0010217:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001021d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010220:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010226:	51                   	push   ecx
c0010227:	52                   	push   edx
c0010228:	50                   	push   eax
c0010229:	e8 ec 7b ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001022e:	83 c4 10             	add    esp,0x10
c0010231:	31 c0                	xor    eax,eax
c0010233:	31 d2                	xor    edx,edx
c0010235:	83 c4 0c             	add    esp,0xc
c0010238:	c3                   	ret    

c0010239 <SysReadDir(regs*)>:
c0010239:	53                   	push   ebx
c001023a:	83 ec 18             	sub    esp,0x18
c001023d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010244:	83 f8 02             	cmp    eax,0x2
c0010247:	76 61                	jbe    c00102aa <SysReadDir(regs*)+0x71>
c0010249:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010250:	77 49                	ja     c001029b <SysReadDir(regs*)+0x62>
c0010252:	83 ec 0c             	sub    esp,0xc
c0010255:	50                   	push   eax
c0010256:	e8 ec 1c 00 00       	call   c0011f47 <KeGetFileFromDescriptor(int)>
c001025b:	83 c4 10             	add    esp,0x10
c001025e:	85 c0                	test   eax,eax
c0010260:	74 39                	je     c001029b <SysReadDir(regs*)+0x62>
c0010262:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001026a:	83 ec 0c             	sub    esp,0xc
c001026d:	8b 10                	mov    edx,DWORD PTR [eax]
c001026f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010273:	51                   	push   ecx
c0010274:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010277:	51                   	push   ecx
c0010278:	6a 00                	push   0x0
c001027a:	68 10 01 00 00       	push   0x110
c001027f:	50                   	push   eax
c0010280:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010283:	83 c4 20             	add    esp,0x20
c0010286:	85 c0                	test   eax,eax
c0010288:	74 29                	je     c00102b3 <SysReadDir(regs*)+0x7a>
c001028a:	83 f8 07             	cmp    eax,0x7
c001028d:	74 1b                	je     c00102aa <SysReadDir(regs*)+0x71>
c001028f:	b8 02 00 00 00       	mov    eax,0x2
c0010294:	31 d2                	xor    edx,edx
c0010296:	83 c4 18             	add    esp,0x18
c0010299:	5b                   	pop    ebx
c001029a:	c3                   	ret    
c001029b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102a5:	83 c4 18             	add    esp,0x18
c00102a8:	5b                   	pop    ebx
c00102a9:	c3                   	ret    
c00102aa:	b8 01 00 00 00       	mov    eax,0x1
c00102af:	31 d2                	xor    edx,edx
c00102b1:	eb e3                	jmp    c0010296 <SysReadDir(regs*)+0x5d>
c00102b3:	31 c0                	xor    eax,eax
c00102b5:	31 d2                	xor    edx,edx
c00102b7:	eb dd                	jmp    c0010296 <SysReadDir(regs*)+0x5d>

c00102b9 <SysIsATTY(regs*)>:
c00102b9:	83 ec 0c             	sub    esp,0xc
c00102bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00102c3:	83 f8 02             	cmp    eax,0x2
c00102c6:	76 07                	jbe    c00102cf <SysIsATTY(regs*)+0x16>
c00102c8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00102cd:	75 26                	jne    c00102f5 <SysIsATTY(regs*)+0x3c>
c00102cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00102d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00102d7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00102dd:	85 c0                	test   eax,eax
c00102df:	74 24                	je     c0010305 <SysIsATTY(regs*)+0x4c>
c00102e1:	83 ec 0c             	sub    esp,0xc
c00102e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00102e6:	50                   	push   eax
c00102e7:	ff 12                	call   DWORD PTR [edx]
c00102e9:	31 d2                	xor    edx,edx
c00102eb:	0f b6 c0             	movzx  eax,al
c00102ee:	83 c4 10             	add    esp,0x10
c00102f1:	83 c4 0c             	add    esp,0xc
c00102f4:	c3                   	ret    
c00102f5:	83 ec 0c             	sub    esp,0xc
c00102f8:	50                   	push   eax
c00102f9:	e8 49 1c 00 00       	call   c0011f47 <KeGetFileFromDescriptor(int)>
c00102fe:	83 c4 10             	add    esp,0x10
c0010301:	85 c0                	test   eax,eax
c0010303:	75 dc                	jne    c00102e1 <SysIsATTY(regs*)+0x28>
c0010305:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001030a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001030f:	83 c4 0c             	add    esp,0xc
c0010312:	c3                   	ret    

c0010313 <SysSeek(regs*)>:
c0010313:	53                   	push   ebx
c0010314:	83 ec 08             	sub    esp,0x8
c0010317:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001031b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001031e:	8d 50 fd             	lea    edx,[eax-0x3]
c0010321:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010327:	77 32                	ja     c001035b <SysSeek(regs*)+0x48>
c0010329:	83 ec 0c             	sub    esp,0xc
c001032c:	50                   	push   eax
c001032d:	e8 15 1c 00 00       	call   c0011f47 <KeGetFileFromDescriptor(int)>
c0010332:	83 c4 0c             	add    esp,0xc
c0010335:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010338:	31 db                	xor    ebx,ebx
c001033a:	53                   	push   ebx
c001033b:	51                   	push   ecx
c001033c:	50                   	push   eax
c001033d:	e8 ac 7e ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0010342:	83 c4 10             	add    esp,0x10
c0010345:	85 c0                	test   eax,eax
c0010347:	0f 95 c0             	setne  al
c001034a:	31 d2                	xor    edx,edx
c001034c:	0f b6 c0             	movzx  eax,al
c001034f:	f7 d8                	neg    eax
c0010351:	83 d2 00             	adc    edx,0x0
c0010354:	83 c4 08             	add    esp,0x8
c0010357:	f7 da                	neg    edx
c0010359:	5b                   	pop    ebx
c001035a:	c3                   	ret    
c001035b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010360:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010365:	83 c4 08             	add    esp,0x8
c0010368:	5b                   	pop    ebx
c0010369:	c3                   	ret    

c001036a <SysTell(regs*)>:
c001036a:	53                   	push   ebx
c001036b:	83 ec 08             	sub    esp,0x8
c001036e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010372:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010375:	83 f8 02             	cmp    eax,0x2
c0010378:	76 4e                	jbe    c00103c8 <SysTell(regs*)+0x5e>
c001037a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001037f:	76 19                	jbe    c001039a <SysTell(regs*)+0x30>
c0010381:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010384:	31 d2                	xor    edx,edx
c0010386:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001038c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010393:	31 c0                	xor    eax,eax
c0010395:	83 c4 08             	add    esp,0x8
c0010398:	5b                   	pop    ebx
c0010399:	c3                   	ret    
c001039a:	83 ec 0c             	sub    esp,0xc
c001039d:	50                   	push   eax
c001039e:	e8 a4 1b 00 00       	call   c0011f47 <KeGetFileFromDescriptor(int)>
c00103a3:	5a                   	pop    edx
c00103a4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00103a7:	59                   	pop    ecx
c00103a8:	53                   	push   ebx
c00103a9:	50                   	push   eax
c00103aa:	e8 eb 7e ff ff       	call   c000829a <File::tell(unsigned long long*)>
c00103af:	83 c4 10             	add    esp,0x10
c00103b2:	85 c0                	test   eax,eax
c00103b4:	0f 95 c0             	setne  al
c00103b7:	31 d2                	xor    edx,edx
c00103b9:	0f b6 c0             	movzx  eax,al
c00103bc:	f7 d8                	neg    eax
c00103be:	83 d2 00             	adc    edx,0x0
c00103c1:	83 c4 08             	add    esp,0x8
c00103c4:	f7 da                	neg    edx
c00103c6:	5b                   	pop    ebx
c00103c7:	c3                   	ret    
c00103c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103d2:	83 c4 08             	add    esp,0x8
c00103d5:	5b                   	pop    ebx
c00103d6:	c3                   	ret    

c00103d7 <SysSize(regs*)>:
c00103d7:	53                   	push   ebx
c00103d8:	83 ec 18             	sub    esp,0x18
c00103db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00103df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00103e2:	83 f8 02             	cmp    eax,0x2
c00103e5:	76 54                	jbe    c001043b <SysSize(regs*)+0x64>
c00103e7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00103ec:	76 19                	jbe    c0010407 <SysSize(regs*)+0x30>
c00103ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00103f1:	31 d2                	xor    edx,edx
c00103f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00103f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010400:	31 c0                	xor    eax,eax
c0010402:	83 c4 18             	add    esp,0x18
c0010405:	5b                   	pop    ebx
c0010406:	c3                   	ret    
c0010407:	83 ec 0c             	sub    esp,0xc
c001040a:	50                   	push   eax
c001040b:	e8 37 1b 00 00       	call   c0011f47 <KeGetFileFromDescriptor(int)>
c0010410:	83 c4 0c             	add    esp,0xc
c0010413:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010417:	52                   	push   edx
c0010418:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001041b:	52                   	push   edx
c001041c:	50                   	push   eax
c001041d:	e8 10 80 ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0010422:	83 c4 10             	add    esp,0x10
c0010425:	85 c0                	test   eax,eax
c0010427:	0f 95 c0             	setne  al
c001042a:	31 d2                	xor    edx,edx
c001042c:	0f b6 c0             	movzx  eax,al
c001042f:	f7 d8                	neg    eax
c0010431:	83 d2 00             	adc    edx,0x0
c0010434:	83 c4 18             	add    esp,0x18
c0010437:	f7 da                	neg    edx
c0010439:	5b                   	pop    ebx
c001043a:	c3                   	ret    
c001043b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010440:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010445:	83 c4 18             	add    esp,0x18
c0010448:	5b                   	pop    ebx
c0010449:	c3                   	ret    

c001044a <SysSizeFromFilename(regs*)>:
c001044a:	55                   	push   ebp
c001044b:	57                   	push   edi
c001044c:	56                   	push   esi
c001044d:	53                   	push   ebx
c001044e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010454:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001045b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001045e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010461:	85 f6                	test   esi,esi
c0010463:	74 34                	je     c0010499 <SysSizeFromFilename(regs*)+0x4f>
c0010465:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001046b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001046e:	83 f8 02             	cmp    eax,0x2
c0010471:	76 2d                	jbe    c00104a0 <SysSizeFromFilename(regs*)+0x56>
c0010473:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010478:	76 3b                	jbe    c00104b5 <SysSizeFromFilename(regs*)+0x6b>
c001047a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001047d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010483:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001048a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010490:	31 c0                	xor    eax,eax
c0010492:	5b                   	pop    ebx
c0010493:	31 d2                	xor    edx,edx
c0010495:	5e                   	pop    esi
c0010496:	5f                   	pop    edi
c0010497:	5d                   	pop    ebp
c0010498:	c3                   	ret    
c0010499:	89 f8                	mov    eax,edi
c001049b:	83 f8 02             	cmp    eax,0x2
c001049e:	77 d3                	ja     c0010473 <SysSizeFromFilename(regs*)+0x29>
c00104a0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00104a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104ab:	5b                   	pop    ebx
c00104ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104b1:	5e                   	pop    esi
c00104b2:	5f                   	pop    edi
c00104b3:	5d                   	pop    ebp
c00104b4:	c3                   	ret    
c00104b5:	83 ec 0c             	sub    esp,0xc
c00104b8:	68 14 01 00 00       	push   0x114
c00104bd:	e8 cf e4 ff ff       	call   c000e991 <malloc>
c00104c2:	6a 01                	push   0x1
c00104c4:	89 c5                	mov    ebp,eax
c00104c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104cb:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00104ce:	51                   	push   ecx
c00104cf:	57                   	push   edi
c00104d0:	55                   	push   ebp
c00104d1:	e8 5e 7b ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00104d6:	83 c4 1c             	add    esp,0x1c
c00104d9:	8d 44 24 23          	lea    eax,[esp+0x23]
c00104dd:	50                   	push   eax
c00104de:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00104e1:	53                   	push   ebx
c00104e2:	55                   	push   ebp
c00104e3:	e8 4a 7f ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c00104e8:	83 c4 10             	add    esp,0x10
c00104eb:	85 ed                	test   ebp,ebp
c00104ed:	74 15                	je     c0010504 <SysSizeFromFilename(regs*)+0xba>
c00104ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104f3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00104f6:	83 ec 0c             	sub    esp,0xc
c00104f9:	55                   	push   ebp
c00104fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00104fd:	83 c4 10             	add    esp,0x10
c0010500:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010504:	85 c0                	test   eax,eax
c0010506:	75 98                	jne    c00104a0 <SysSizeFromFilename(regs*)+0x56>
c0010508:	6a 00                	push   0x0
c001050a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001050f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010512:	05 0c 01 00 00       	add    eax,0x10c
c0010517:	50                   	push   eax
c0010518:	57                   	push   edi
c0010519:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0010520:	53                   	push   ebx
c0010521:	e8 f4 78 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010526:	58                   	pop    eax
c0010527:	5a                   	pop    edx
c0010528:	8d 44 24 28          	lea    eax,[esp+0x28]
c001052c:	50                   	push   eax
c001052d:	53                   	push   ebx
c001052e:	e8 6e 73 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0010533:	83 c4 10             	add    esp,0x10
c0010536:	83 f8 01             	cmp    eax,0x1
c0010539:	74 1a                	je     c0010555 <SysSizeFromFilename(regs*)+0x10b>
c001053b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0010540:	74 26                	je     c0010568 <SysSizeFromFilename(regs*)+0x11e>
c0010542:	85 f6                	test   esi,esi
c0010544:	0f 84 40 ff ff ff    	je     c001048a <SysSizeFromFilename(regs*)+0x40>
c001054a:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0010550:	e9 35 ff ff ff       	jmp    c001048a <SysSizeFromFilename(regs*)+0x40>
c0010555:	85 f6                	test   esi,esi
c0010557:	0f 84 2d ff ff ff    	je     c001048a <SysSizeFromFilename(regs*)+0x40>
c001055d:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010563:	e9 22 ff ff ff       	jmp    c001048a <SysSizeFromFilename(regs*)+0x40>
c0010568:	85 f6                	test   esi,esi
c001056a:	0f 84 1a ff ff ff    	je     c001048a <SysSizeFromFilename(regs*)+0x40>
c0010570:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010576:	e9 0f ff ff ff       	jmp    c001048a <SysSizeFromFilename(regs*)+0x40>

c001057b <SysSizeFromFilenameNoSymlink(regs*)>:
c001057b:	55                   	push   ebp
c001057c:	57                   	push   edi
c001057d:	56                   	push   esi
c001057e:	53                   	push   ebx
c001057f:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010585:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001058c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001058f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010592:	85 f6                	test   esi,esi
c0010594:	74 34                	je     c00105ca <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0010596:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001059c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001059f:	83 f8 02             	cmp    eax,0x2
c00105a2:	76 2d                	jbe    c00105d1 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00105a4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00105a9:	76 3b                	jbe    c00105e6 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00105ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00105ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105bb:	81 c4 5c 02 00 00    	add    esp,0x25c
c00105c1:	31 c0                	xor    eax,eax
c00105c3:	5b                   	pop    ebx
c00105c4:	31 d2                	xor    edx,edx
c00105c6:	5e                   	pop    esi
c00105c7:	5f                   	pop    edi
c00105c8:	5d                   	pop    ebp
c00105c9:	c3                   	ret    
c00105ca:	89 f8                	mov    eax,edi
c00105cc:	83 f8 02             	cmp    eax,0x2
c00105cf:	77 d3                	ja     c00105a4 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00105d1:	81 c4 5c 02 00 00    	add    esp,0x25c
c00105d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105dc:	5b                   	pop    ebx
c00105dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105e2:	5e                   	pop    esi
c00105e3:	5f                   	pop    edi
c00105e4:	5d                   	pop    ebp
c00105e5:	c3                   	ret    
c00105e6:	83 ec 0c             	sub    esp,0xc
c00105e9:	68 14 01 00 00       	push   0x114
c00105ee:	e8 9e e3 ff ff       	call   c000e991 <malloc>
c00105f3:	6a 00                	push   0x0
c00105f5:	89 c5                	mov    ebp,eax
c00105f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00105fc:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00105ff:	51                   	push   ecx
c0010600:	57                   	push   edi
c0010601:	55                   	push   ebp
c0010602:	e8 2d 7a ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010607:	83 c4 1c             	add    esp,0x1c
c001060a:	8d 44 24 23          	lea    eax,[esp+0x23]
c001060e:	50                   	push   eax
c001060f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010612:	53                   	push   ebx
c0010613:	55                   	push   ebp
c0010614:	e8 19 7e ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0010619:	83 c4 10             	add    esp,0x10
c001061c:	85 ed                	test   ebp,ebp
c001061e:	74 15                	je     c0010635 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0010620:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010624:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010627:	83 ec 0c             	sub    esp,0xc
c001062a:	55                   	push   ebp
c001062b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001062e:	83 c4 10             	add    esp,0x10
c0010631:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010635:	85 c0                	test   eax,eax
c0010637:	75 98                	jne    c00105d1 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0010639:	6a 00                	push   0x0
c001063b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010640:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010643:	05 0c 01 00 00       	add    eax,0x10c
c0010648:	50                   	push   eax
c0010649:	57                   	push   edi
c001064a:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0010651:	53                   	push   ebx
c0010652:	e8 c3 77 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010657:	58                   	pop    eax
c0010658:	5a                   	pop    edx
c0010659:	8d 44 24 28          	lea    eax,[esp+0x28]
c001065d:	50                   	push   eax
c001065e:	53                   	push   ebx
c001065f:	e8 3d 72 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0010664:	83 c4 10             	add    esp,0x10
c0010667:	83 f8 01             	cmp    eax,0x1
c001066a:	74 1a                	je     c0010686 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c001066c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0010671:	74 26                	je     c0010699 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c0010673:	85 f6                	test   esi,esi
c0010675:	0f 84 40 ff ff ff    	je     c00105bb <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001067b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0010681:	e9 35 ff ff ff       	jmp    c00105bb <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010686:	85 f6                	test   esi,esi
c0010688:	0f 84 2d ff ff ff    	je     c00105bb <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001068e:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010694:	e9 22 ff ff ff       	jmp    c00105bb <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010699:	85 f6                	test   esi,esi
c001069b:	0f 84 1a ff ff ff    	je     c00105bb <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00106a1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00106a7:	e9 0f ff ff ff       	jmp    c00105bb <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00106ac <SysClose(regs*)>:
c00106ac:	53                   	push   ebx
c00106ad:	83 ec 08             	sub    esp,0x8
c00106b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00106b7:	83 f8 02             	cmp    eax,0x2
c00106ba:	76 41                	jbe    c00106fd <SysClose(regs*)+0x51>
c00106bc:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00106c2:	83 fa 01             	cmp    edx,0x1
c00106c5:	76 2d                	jbe    c00106f4 <SysClose(regs*)+0x48>
c00106c7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00106cc:	77 2f                	ja     c00106fd <SysClose(regs*)+0x51>
c00106ce:	83 ec 0c             	sub    esp,0xc
c00106d1:	50                   	push   eax
c00106d2:	e8 70 18 00 00       	call   c0011f47 <KeGetFileFromDescriptor(int)>
c00106d7:	89 c3                	mov    ebx,eax
c00106d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00106dc:	e8 ad 7a ff ff       	call   c000818e <File::close()>
c00106e1:	83 c4 10             	add    esp,0x10
c00106e4:	85 db                	test   ebx,ebx
c00106e6:	74 0c                	je     c00106f4 <SysClose(regs*)+0x48>
c00106e8:	83 ec 0c             	sub    esp,0xc
c00106eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ed:	53                   	push   ebx
c00106ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00106f1:	83 c4 10             	add    esp,0x10
c00106f4:	31 c0                	xor    eax,eax
c00106f6:	31 d2                	xor    edx,edx
c00106f8:	83 c4 08             	add    esp,0x8
c00106fb:	5b                   	pop    ebx
c00106fc:	c3                   	ret    
c00106fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010702:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010707:	83 c4 08             	add    esp,0x8
c001070a:	5b                   	pop    ebx
c001070b:	c3                   	ret    

c001070c <SysOpenDir(regs*)>:
c001070c:	56                   	push   esi
c001070d:	53                   	push   ebx
c001070e:	83 ec 04             	sub    esp,0x4
c0010711:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010715:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010718:	85 c9                	test   ecx,ecx
c001071a:	74 5d                	je     c0010779 <SysOpenDir(regs*)+0x6d>
c001071c:	83 ec 0c             	sub    esp,0xc
c001071f:	68 14 01 00 00       	push   0x114
c0010724:	e8 68 e2 ff ff       	call   c000e991 <malloc>
c0010729:	83 c4 0c             	add    esp,0xc
c001072c:	89 c6                	mov    esi,eax
c001072e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010733:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010736:	50                   	push   eax
c0010737:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001073a:	52                   	push   edx
c001073b:	56                   	push   esi
c001073c:	e8 b1 7e ff ff       	call   c00085f2 <Directory::Directory(char const*, Process*)>
c0010741:	83 c4 10             	add    esp,0x10
c0010744:	85 f6                	test   esi,esi
c0010746:	74 31                	je     c0010779 <SysOpenDir(regs*)+0x6d>
c0010748:	83 ec 0c             	sub    esp,0xc
c001074b:	56                   	push   esi
c001074c:	e8 69 7f ff ff       	call   c00086ba <Directory::open()>
c0010751:	83 c4 10             	add    esp,0x10
c0010754:	85 c0                	test   eax,eax
c0010756:	75 21                	jne    c0010779 <SysOpenDir(regs*)+0x6d>
c0010758:	83 ec 0c             	sub    esp,0xc
c001075b:	56                   	push   esi
c001075c:	e8 e9 14 00 00       	call   c0011c4a <UnixFile::getFileDescriptor()>
c0010761:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010764:	83 c4 10             	add    esp,0x10
c0010767:	89 02                	mov    DWORD PTR [edx],eax
c0010769:	c1 f8 1f             	sar    eax,0x1f
c001076c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001076f:	83 c4 04             	add    esp,0x4
c0010772:	31 c0                	xor    eax,eax
c0010774:	31 d2                	xor    edx,edx
c0010776:	5b                   	pop    ebx
c0010777:	5e                   	pop    esi
c0010778:	c3                   	ret    
c0010779:	83 c4 04             	add    esp,0x4
c001077c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010781:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010786:	5b                   	pop    ebx
c0010787:	5e                   	pop    esi
c0010788:	c3                   	ret    

c0010789 <SysMakeDir(regs*)>:
c0010789:	56                   	push   esi
c001078a:	53                   	push   ebx
c001078b:	83 ec 10             	sub    esp,0x10
c001078e:	68 14 01 00 00       	push   0x114
c0010793:	e8 f9 e1 ff ff       	call   c000e991 <malloc>
c0010798:	83 c4 0c             	add    esp,0xc
c001079b:	89 c3                	mov    ebx,eax
c001079d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107a5:	50                   	push   eax
c00107a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00107aa:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00107ad:	52                   	push   edx
c00107ae:	53                   	push   ebx
c00107af:	e8 3e 7e ff ff       	call   c00085f2 <Directory::Directory(char const*, Process*)>
c00107b4:	83 c4 10             	add    esp,0x10
c00107b7:	85 db                	test   ebx,ebx
c00107b9:	74 2c                	je     c00107e7 <SysMakeDir(regs*)+0x5e>
c00107bb:	83 ec 0c             	sub    esp,0xc
c00107be:	53                   	push   ebx
c00107bf:	e8 d6 80 ff ff       	call   c000889a <Directory::create()>
c00107c4:	89 c6                	mov    esi,eax
c00107c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107ce:	83 c4 10             	add    esp,0x10
c00107d1:	31 c0                	xor    eax,eax
c00107d3:	85 f6                	test   esi,esi
c00107d5:	0f 95 c0             	setne  al
c00107d8:	31 d2                	xor    edx,edx
c00107da:	f7 d8                	neg    eax
c00107dc:	83 d2 00             	adc    edx,0x0
c00107df:	83 c4 04             	add    esp,0x4
c00107e2:	f7 da                	neg    edx
c00107e4:	5b                   	pop    ebx
c00107e5:	5e                   	pop    esi
c00107e6:	c3                   	ret    
c00107e7:	83 c4 04             	add    esp,0x4
c00107ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107f4:	5b                   	pop    ebx
c00107f5:	5e                   	pop    esi
c00107f6:	c3                   	ret    

c00107f7 <SysCloseDir(regs*)>:
c00107f7:	53                   	push   ebx
c00107f8:	83 ec 08             	sub    esp,0x8
c00107fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010802:	8d 50 fd             	lea    edx,[eax-0x3]
c0010805:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001080b:	77 2f                	ja     c001083c <SysCloseDir(regs*)+0x45>
c001080d:	83 ec 0c             	sub    esp,0xc
c0010810:	50                   	push   eax
c0010811:	e8 31 17 00 00       	call   c0011f47 <KeGetFileFromDescriptor(int)>
c0010816:	89 c3                	mov    ebx,eax
c0010818:	89 04 24             	mov    DWORD PTR [esp],eax
c001081b:	e8 f6 7e ff ff       	call   c0008716 <Directory::close()>
c0010820:	83 c4 10             	add    esp,0x10
c0010823:	85 db                	test   ebx,ebx
c0010825:	74 0c                	je     c0010833 <SysCloseDir(regs*)+0x3c>
c0010827:	83 ec 0c             	sub    esp,0xc
c001082a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001082c:	53                   	push   ebx
c001082d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010830:	83 c4 10             	add    esp,0x10
c0010833:	31 c0                	xor    eax,eax
c0010835:	31 d2                	xor    edx,edx
c0010837:	83 c4 08             	add    esp,0x8
c001083a:	5b                   	pop    ebx
c001083b:	c3                   	ret    
c001083c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010841:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010846:	83 c4 08             	add    esp,0x8
c0010849:	5b                   	pop    ebx
c001084a:	c3                   	ret    

c001084b <SysWait(regs*)>:
c001084b:	83 ec 10             	sub    esp,0x10
c001084e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010852:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010855:	52                   	push   edx
c0010856:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010859:	51                   	push   ecx
c001085a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001085d:	50                   	push   eax
c001085e:	e8 f9 4d 00 00       	call   c001565c <waitTask(int, int*, int)>
c0010863:	83 c4 1c             	add    esp,0x1c
c0010866:	89 c2                	mov    edx,eax
c0010868:	c1 fa 1f             	sar    edx,0x1f
c001086b:	c3                   	ret    

c001086c <SysNotImpl(regs*)>:
c001086c:	83 ec 18             	sub    esp,0x18
c001086f:	68 b4 23 02 c0       	push   0xc00223b4
c0010874:	e8 6d e4 ff ff       	call   c000ece6 <KePanic(char const*)>
c0010879:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001087e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010883:	83 c4 1c             	add    esp,0x1c
c0010886:	c3                   	ret    

c0010887 <SysPanic(regs*)>:
c0010887:	83 ec 18             	sub    esp,0x18
c001088a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001088e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010891:	50                   	push   eax
c0010892:	e8 4f e4 ff ff       	call   c000ece6 <KePanic(char const*)>
c0010897:	b8 01 00 00 00       	mov    eax,0x1
c001089c:	31 d2                	xor    edx,edx
c001089e:	83 c4 1c             	add    esp,0x1c
c00108a1:	c3                   	ret    

c00108a2 <SysRmdir(regs*)>:
c00108a2:	56                   	push   esi
c00108a3:	53                   	push   ebx
c00108a4:	83 ec 20             	sub    esp,0x20
c00108a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00108ab:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00108ae:	68 14 01 00 00       	push   0x114
c00108b3:	e8 d9 e0 ff ff       	call   c000e991 <malloc>
c00108b8:	6a 00                	push   0x0
c00108ba:	89 c3                	mov    ebx,eax
c00108bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108c4:	50                   	push   eax
c00108c5:	56                   	push   esi
c00108c6:	53                   	push   ebx
c00108c7:	e8 68 77 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00108cc:	83 c4 14             	add    esp,0x14
c00108cf:	53                   	push   ebx
c00108d0:	e8 29 7a ff ff       	call   c00082fe <File::unlink()>
c00108d5:	83 c4 10             	add    esp,0x10
c00108d8:	85 db                	test   ebx,ebx
c00108da:	74 14                	je     c00108f0 <SysRmdir(regs*)+0x4e>
c00108dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00108e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00108e2:	83 ec 0c             	sub    esp,0xc
c00108e5:	53                   	push   ebx
c00108e6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00108e9:	83 c4 10             	add    esp,0x10
c00108ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108f0:	85 c0                	test   eax,eax
c00108f2:	0f 95 c0             	setne  al
c00108f5:	31 d2                	xor    edx,edx
c00108f7:	0f b6 c0             	movzx  eax,al
c00108fa:	f7 d8                	neg    eax
c00108fc:	83 d2 00             	adc    edx,0x0
c00108ff:	83 c4 14             	add    esp,0x14
c0010902:	f7 da                	neg    edx
c0010904:	5b                   	pop    ebx
c0010905:	5e                   	pop    esi
c0010906:	c3                   	ret    

c0010907 <SysUnlink(regs*)>:
c0010907:	56                   	push   esi
c0010908:	53                   	push   ebx
c0010909:	83 ec 20             	sub    esp,0x20
c001090c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010910:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010913:	68 14 01 00 00       	push   0x114
c0010918:	e8 74 e0 ff ff       	call   c000e991 <malloc>
c001091d:	6a 00                	push   0x0
c001091f:	89 c3                	mov    ebx,eax
c0010921:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010926:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010929:	50                   	push   eax
c001092a:	56                   	push   esi
c001092b:	53                   	push   ebx
c001092c:	e8 03 77 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010931:	83 c4 14             	add    esp,0x14
c0010934:	53                   	push   ebx
c0010935:	e8 c4 79 ff ff       	call   c00082fe <File::unlink()>
c001093a:	83 c4 10             	add    esp,0x10
c001093d:	85 db                	test   ebx,ebx
c001093f:	74 14                	je     c0010955 <SysUnlink(regs*)+0x4e>
c0010941:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010945:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010947:	83 ec 0c             	sub    esp,0xc
c001094a:	53                   	push   ebx
c001094b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001094e:	83 c4 10             	add    esp,0x10
c0010951:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010955:	85 c0                	test   eax,eax
c0010957:	0f 95 c0             	setne  al
c001095a:	31 d2                	xor    edx,edx
c001095c:	0f b6 c0             	movzx  eax,al
c001095f:	f7 d8                	neg    eax
c0010961:	83 d2 00             	adc    edx,0x0
c0010964:	83 c4 14             	add    esp,0x14
c0010967:	f7 da                	neg    edx
c0010969:	5b                   	pop    ebx
c001096a:	5e                   	pop    esi
c001096b:	c3                   	ret    

c001096c <SysGetArgv(regs*)>:
c001096c:	83 ec 0c             	sub    esp,0xc
c001096f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010973:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010976:	85 c0                	test   eax,eax
c0010978:	78 2c                	js     c00109a6 <SysGetArgv(regs*)+0x3a>
c001097a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010980:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010983:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010989:	7d 1b                	jge    c00109a6 <SysGetArgv(regs*)+0x3a>
c001098b:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010992:	85 c0                	test   eax,eax
c0010994:	74 18                	je     c00109ae <SysGetArgv(regs*)+0x42>
c0010996:	83 ec 08             	sub    esp,0x8
c0010999:	50                   	push   eax
c001099a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001099d:	50                   	push   eax
c001099e:	e8 9d fc fe ff       	call   c0000640 <strcpy>
c00109a3:	83 c4 10             	add    esp,0x10
c00109a6:	31 c0                	xor    eax,eax
c00109a8:	31 d2                	xor    edx,edx
c00109aa:	83 c4 0c             	add    esp,0xc
c00109ad:	c3                   	ret    
c00109ae:	b8 01 00 00 00       	mov    eax,0x1
c00109b3:	31 d2                	xor    edx,edx
c00109b5:	83 c4 0c             	add    esp,0xc
c00109b8:	c3                   	ret    

c00109b9 <SysUSleep(regs*)>:
c00109b9:	83 ec 1c             	sub    esp,0x1c
c00109bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00109c0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00109c3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00109c6:	6a 00                	push   0x0
c00109c8:	6a 64                	push   0x64
c00109ca:	52                   	push   edx
c00109cb:	50                   	push   eax
c00109cc:	e8 73 f1 00 00       	call   c001fb44 <__udivdi3>
c00109d1:	83 c4 14             	add    esp,0x14
c00109d4:	50                   	push   eax
c00109d5:	e8 66 4d 00 00       	call   c0015740 <milliTenthSleep(unsigned int)>
c00109da:	31 c0                	xor    eax,eax
c00109dc:	31 d2                	xor    edx,edx
c00109de:	83 c4 1c             	add    esp,0x1c
c00109e1:	c3                   	ret    

c00109e2 <SysSpawn(regs*)>:
c00109e2:	56                   	push   esi
c00109e3:	53                   	push   ebx
c00109e4:	83 ec 04             	sub    esp,0x4
c00109e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109eb:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00109ee:	85 f6                	test   esi,esi
c00109f0:	75 0a                	jne    c00109fc <SysSpawn(regs*)+0x1a>
c00109f2:	83 c4 04             	add    esp,0x4
c00109f5:	31 c0                	xor    eax,eax
c00109f7:	31 d2                	xor    edx,edx
c00109f9:	5b                   	pop    ebx
c00109fa:	5e                   	pop    esi
c00109fb:	c3                   	ret    
c00109fc:	83 ec 0c             	sub    esp,0xc
c00109ff:	68 24 07 00 00       	push   0x724
c0010a04:	e8 88 df ff ff       	call   c000e991 <malloc>
c0010a09:	83 c4 10             	add    esp,0x10
c0010a0c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010a0f:	89 c6                	mov    esi,eax
c0010a11:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010a14:	85 c9                	test   ecx,ecx
c0010a16:	75 39                	jne    c0010a51 <SysSpawn(regs*)+0x6f>
c0010a18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a20:	52                   	push   edx
c0010a21:	50                   	push   eax
c0010a22:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010a25:	50                   	push   eax
c0010a26:	56                   	push   esi
c0010a27:	e8 b8 44 00 00       	call   c0014ee4 <Process::Process(char const*, Process*, char**)>
c0010a2c:	83 c4 10             	add    esp,0x10
c0010a2f:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010a36:	75 ba                	jne    c00109f2 <SysSpawn(regs*)+0x10>
c0010a38:	83 ec 0c             	sub    esp,0xc
c0010a3b:	56                   	push   esi
c0010a3c:	e8 e3 49 00 00       	call   c0015424 <Process::createUserThread()>
c0010a41:	8b 06                	mov    eax,DWORD PTR [esi]
c0010a43:	83 c4 10             	add    esp,0x10
c0010a46:	89 c2                	mov    edx,eax
c0010a48:	83 c4 04             	add    esp,0x4
c0010a4b:	c1 fa 1f             	sar    edx,0x1f
c0010a4e:	5b                   	pop    ebx
c0010a4f:	5e                   	pop    esi
c0010a50:	c3                   	ret    
c0010a51:	31 c0                	xor    eax,eax
c0010a53:	eb cb                	jmp    c0010a20 <SysSpawn(regs*)+0x3e>

c0010a55 <SysGetEnv(regs*)>:
c0010a55:	57                   	push   edi
c0010a56:	56                   	push   esi
c0010a57:	53                   	push   ebx
c0010a58:	83 ec 1c             	sub    esp,0x1c
c0010a5b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a64:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010a67:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010a6a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010a6d:	51                   	push   ecx
c0010a6e:	e8 5c d2 ff ff       	call   c000dccf <KeGetProcessTotalEnvCount(Process*)>
c0010a73:	83 c4 10             	add    esp,0x10
c0010a76:	39 c7                	cmp    edi,eax
c0010a78:	7c 14                	jl     c0010a8e <SysGetEnv(regs*)+0x39>
c0010a7a:	85 f6                	test   esi,esi
c0010a7c:	75 0b                	jne    c0010a89 <SysGetEnv(regs*)+0x34>
c0010a7e:	83 c4 10             	add    esp,0x10
c0010a81:	31 c0                	xor    eax,eax
c0010a83:	5b                   	pop    ebx
c0010a84:	31 d2                	xor    edx,edx
c0010a86:	5e                   	pop    esi
c0010a87:	5f                   	pop    edi
c0010a88:	c3                   	ret    
c0010a89:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a8c:	eb f0                	jmp    c0010a7e <SysGetEnv(regs*)+0x29>
c0010a8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010a92:	83 ec 04             	sub    esp,0x4
c0010a95:	57                   	push   edi
c0010a96:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a9c:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0010a9f:	57                   	push   edi
c0010aa0:	50                   	push   eax
c0010aa1:	e8 49 d2 ff ff       	call   c000dcef <KeGetProcessEnvPair(Process*, int)>
c0010aa6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010aa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010aad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010ab1:	83 c4 0c             	add    esp,0xc
c0010ab4:	85 d2                	test   edx,edx
c0010ab6:	75 23                	jne    c0010adb <SysGetEnv(regs*)+0x86>
c0010ab8:	83 ec 0c             	sub    esp,0xc
c0010abb:	50                   	push   eax
c0010abc:	e8 af fa fe ff       	call   c0000570 <strlen>
c0010ac1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ac4:	89 c3                	mov    ebx,eax
c0010ac6:	e8 a5 fa fe ff       	call   c0000570 <strlen>
c0010acb:	83 c4 10             	add    esp,0x10
c0010ace:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010ad2:	83 c4 10             	add    esp,0x10
c0010ad5:	31 d2                	xor    edx,edx
c0010ad7:	5b                   	pop    ebx
c0010ad8:	5e                   	pop    esi
c0010ad9:	5f                   	pop    edi
c0010ada:	c3                   	ret    
c0010adb:	83 ec 08             	sub    esp,0x8
c0010ade:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010ae1:	50                   	push   eax
c0010ae2:	56                   	push   esi
c0010ae3:	e8 58 fb fe ff       	call   c0000640 <strcpy>
c0010ae8:	58                   	pop    eax
c0010ae9:	5a                   	pop    edx
c0010aea:	68 ce 23 02 c0       	push   0xc00223ce
c0010aef:	56                   	push   esi
c0010af0:	e8 4b fd fe ff       	call   c0000840 <strcat>
c0010af5:	59                   	pop    ecx
c0010af6:	5b                   	pop    ebx
c0010af7:	57                   	push   edi
c0010af8:	56                   	push   esi
c0010af9:	e8 42 fd fe ff       	call   c0000840 <strcat>
c0010afe:	83 c4 10             	add    esp,0x10
c0010b01:	e9 78 ff ff ff       	jmp    c0010a7e <SysGetEnv(regs*)+0x29>

c0010b06 <SysSetFatAttrib(regs*)>:
c0010b06:	57                   	push   edi
c0010b07:	56                   	push   esi
c0010b08:	53                   	push   ebx
c0010b09:	83 ec 1c             	sub    esp,0x1c
c0010b0c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010b10:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010b13:	68 14 01 00 00       	push   0x114
c0010b18:	e8 74 de ff ff       	call   c000e991 <malloc>
c0010b1d:	83 c4 0c             	add    esp,0xc
c0010b20:	89 c3                	mov    ebx,eax
c0010b22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b27:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b2a:	50                   	push   eax
c0010b2b:	57                   	push   edi
c0010b2c:	53                   	push   ebx
c0010b2d:	e8 e0 75 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0010b32:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b35:	83 c4 0c             	add    esp,0xc
c0010b38:	0f b6 d4             	movzx  edx,ah
c0010b3b:	0f b6 c0             	movzx  eax,al
c0010b3e:	52                   	push   edx
c0010b3f:	50                   	push   eax
c0010b40:	53                   	push   ebx
c0010b41:	e8 52 78 ff ff       	call   c0008398 <File::chfatattr(unsigned char, unsigned char)>
c0010b46:	83 c4 10             	add    esp,0x10
c0010b49:	85 db                	test   ebx,ebx
c0010b4b:	74 14                	je     c0010b61 <SysSetFatAttrib(regs*)+0x5b>
c0010b4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b51:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b53:	83 ec 0c             	sub    esp,0xc
c0010b56:	53                   	push   ebx
c0010b57:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b5a:	83 c4 10             	add    esp,0x10
c0010b5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b61:	85 c0                	test   eax,eax
c0010b63:	0f 95 c0             	setne  al
c0010b66:	31 d2                	xor    edx,edx
c0010b68:	0f b6 c0             	movzx  eax,al
c0010b6b:	f7 d8                	neg    eax
c0010b6d:	83 d2 00             	adc    edx,0x0
c0010b70:	83 c4 10             	add    esp,0x10
c0010b73:	f7 da                	neg    edx
c0010b75:	5b                   	pop    ebx
c0010b76:	5e                   	pop    esi
c0010b77:	5f                   	pop    edi
c0010b78:	c3                   	ret    

c0010b79 <SysPipe(regs*)>:
c0010b79:	57                   	push   edi
c0010b7a:	56                   	push   esi
c0010b7b:	53                   	push   ebx
c0010b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b80:	83 ec 0c             	sub    esp,0xc
c0010b83:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010b86:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010b89:	6a 20                	push   0x20
c0010b8b:	e8 01 de ff ff       	call   c000e991 <malloc>
c0010b90:	89 c3                	mov    ebx,eax
c0010b92:	58                   	pop    eax
c0010b93:	5a                   	pop    edx
c0010b94:	68 00 50 00 00       	push   0x5000
c0010b99:	53                   	push   ebx
c0010b9a:	e8 a3 e9 ff ff       	call   c000f542 <Pipe::Pipe(int)>
c0010b9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ba2:	e8 a3 10 00 00       	call   c0011c4a <UnixFile::getFileDescriptor()>
c0010ba7:	89 07                	mov    DWORD PTR [edi],eax
c0010ba9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bac:	e8 99 10 00 00       	call   c0011c4a <UnixFile::getFileDescriptor()>
c0010bb1:	83 c4 10             	add    esp,0x10
c0010bb4:	89 06                	mov    DWORD PTR [esi],eax
c0010bb6:	31 d2                	xor    edx,edx
c0010bb8:	5b                   	pop    ebx
c0010bb9:	31 c0                	xor    eax,eax
c0010bbb:	5e                   	pop    esi
c0010bbc:	5f                   	pop    edi
c0010bbd:	c3                   	ret    

c0010bbe <SysGetUnixTime(regs*)>:
c0010bbe:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0010bc3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010bc9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010bcd:	e9 c0 7f ff ff       	jmp    c0008b92 <Clock::timeInSecondsLocal()>

c0010bd2 <string_ends_with(char const*, char const*)>:
c0010bd2:	57                   	push   edi
c0010bd3:	56                   	push   esi
c0010bd4:	53                   	push   ebx
c0010bd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bd9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010bdd:	83 ec 0c             	sub    esp,0xc
c0010be0:	53                   	push   ebx
c0010be1:	e8 8a f9 fe ff       	call   c0000570 <strlen>
c0010be6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010be9:	89 c6                	mov    esi,eax
c0010beb:	e8 80 f9 fe ff       	call   c0000570 <strlen>
c0010bf0:	83 c4 10             	add    esp,0x10
c0010bf3:	39 c6                	cmp    esi,eax
c0010bf5:	7d 06                	jge    c0010bfd <string_ends_with(char const*, char const*)+0x2b>
c0010bf7:	5b                   	pop    ebx
c0010bf8:	31 c0                	xor    eax,eax
c0010bfa:	5e                   	pop    esi
c0010bfb:	5f                   	pop    edi
c0010bfc:	c3                   	ret    
c0010bfd:	83 ec 08             	sub    esp,0x8
c0010c00:	29 c6                	sub    esi,eax
c0010c02:	57                   	push   edi
c0010c03:	01 f3                	add    ebx,esi
c0010c05:	53                   	push   ebx
c0010c06:	e8 45 fb fe ff       	call   c0000750 <strcmp>
c0010c0b:	83 c4 10             	add    esp,0x10
c0010c0e:	85 c0                	test   eax,eax
c0010c10:	5b                   	pop    ebx
c0010c11:	0f 94 c0             	sete   al
c0010c14:	5e                   	pop    esi
c0010c15:	0f b6 c0             	movzx  eax,al
c0010c18:	5f                   	pop    edi
c0010c19:	c3                   	ret    

c0010c1a <SysOpen(regs*)>:
c0010c1a:	56                   	push   esi
c0010c1b:	53                   	push   ebx
c0010c1c:	81 ec 04 01 00 00    	sub    esp,0x104
c0010c22:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010c29:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c2c:	85 c0                	test   eax,eax
c0010c2e:	0f 84 bc 01 00 00    	je     c0010df0 <SysOpen(regs*)+0x1d6>
c0010c34:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c37:	85 c0                	test   eax,eax
c0010c39:	0f 84 b1 01 00 00    	je     c0010df0 <SysOpen(regs*)+0x1d6>
c0010c3f:	6a 00                	push   0x0
c0010c41:	68 d0 23 02 c0       	push   0xc00223d0
c0010c46:	50                   	push   eax
c0010c47:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010c4b:	56                   	push   esi
c0010c4c:	e8 c9 71 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010c51:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c54:	e8 17 f9 fe ff       	call   c0000570 <strlen>
c0010c59:	83 c4 10             	add    esp,0x10
c0010c5c:	83 e8 01             	sub    eax,0x1
c0010c5f:	74 21                	je     c0010c82 <SysOpen(regs*)+0x68>
c0010c61:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010c65:	eb 12                	jmp    c0010c79 <SysOpen(regs*)+0x5f>
c0010c67:	83 fa 3a             	cmp    edx,0x3a
c0010c6a:	74 12                	je     c0010c7e <SysOpen(regs*)+0x64>
c0010c6c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010c70:	83 e8 01             	sub    eax,0x1
c0010c73:	74 0d                	je     c0010c82 <SysOpen(regs*)+0x68>
c0010c75:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010c79:	83 fa 2e             	cmp    edx,0x2e
c0010c7c:	75 e9                	jne    c0010c67 <SysOpen(regs*)+0x4d>
c0010c7e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010c82:	83 ec 08             	sub    esp,0x8
c0010c85:	68 d4 23 02 c0       	push   0xc00223d4
c0010c8a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c8d:	50                   	push   eax
c0010c8e:	e8 3f ff ff ff       	call   c0010bd2 <string_ends_with(char const*, char const*)>
c0010c93:	83 c4 10             	add    esp,0x10
c0010c96:	85 c0                	test   eax,eax
c0010c98:	74 1d                	je     c0010cb7 <SysOpen(regs*)+0x9d>
c0010c9a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c9d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010ca3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010caa:	81 c4 04 01 00 00    	add    esp,0x104
c0010cb0:	31 c0                	xor    eax,eax
c0010cb2:	31 d2                	xor    edx,edx
c0010cb4:	5b                   	pop    ebx
c0010cb5:	5e                   	pop    esi
c0010cb6:	c3                   	ret    
c0010cb7:	83 ec 08             	sub    esp,0x8
c0010cba:	68 d9 23 02 c0       	push   0xc00223d9
c0010cbf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cc2:	50                   	push   eax
c0010cc3:	e8 0a ff ff ff       	call   c0010bd2 <string_ends_with(char const*, char const*)>
c0010cc8:	83 c4 10             	add    esp,0x10
c0010ccb:	85 c0                	test   eax,eax
c0010ccd:	75 cb                	jne    c0010c9a <SysOpen(regs*)+0x80>
c0010ccf:	83 ec 08             	sub    esp,0x8
c0010cd2:	68 d5 23 02 c0       	push   0xc00223d5
c0010cd7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cda:	50                   	push   eax
c0010cdb:	e8 70 fa fe ff       	call   c0000750 <strcmp>
c0010ce0:	83 c4 10             	add    esp,0x10
c0010ce3:	85 c0                	test   eax,eax
c0010ce5:	74 b3                	je     c0010c9a <SysOpen(regs*)+0x80>
c0010ce7:	83 ec 08             	sub    esp,0x8
c0010cea:	68 d4 23 02 c0       	push   0xc00223d4
c0010cef:	56                   	push   esi
c0010cf0:	e8 dd fe ff ff       	call   c0010bd2 <string_ends_with(char const*, char const*)>
c0010cf5:	83 c4 10             	add    esp,0x10
c0010cf8:	85 c0                	test   eax,eax
c0010cfa:	75 9e                	jne    c0010c9a <SysOpen(regs*)+0x80>
c0010cfc:	83 ec 08             	sub    esp,0x8
c0010cff:	68 de 23 02 c0       	push   0xc00223de
c0010d04:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d07:	50                   	push   eax
c0010d08:	e8 c5 fe ff ff       	call   c0010bd2 <string_ends_with(char const*, char const*)>
c0010d0d:	83 c4 10             	add    esp,0x10
c0010d10:	85 c0                	test   eax,eax
c0010d12:	0f 85 eb 00 00 00    	jne    c0010e03 <SysOpen(regs*)+0x1e9>
c0010d18:	83 ec 08             	sub    esp,0x8
c0010d1b:	68 e3 23 02 c0       	push   0xc00223e3
c0010d20:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d23:	50                   	push   eax
c0010d24:	e8 a9 fe ff ff       	call   c0010bd2 <string_ends_with(char const*, char const*)>
c0010d29:	83 c4 10             	add    esp,0x10
c0010d2c:	85 c0                	test   eax,eax
c0010d2e:	0f 85 cf 00 00 00    	jne    c0010e03 <SysOpen(regs*)+0x1e9>
c0010d34:	83 ec 08             	sub    esp,0x8
c0010d37:	68 df 23 02 c0       	push   0xc00223df
c0010d3c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010d3f:	51                   	push   ecx
c0010d40:	e8 0b fa fe ff       	call   c0000750 <strcmp>
c0010d45:	83 c4 10             	add    esp,0x10
c0010d48:	85 c0                	test   eax,eax
c0010d4a:	0f 84 b3 00 00 00    	je     c0010e03 <SysOpen(regs*)+0x1e9>
c0010d50:	83 ec 08             	sub    esp,0x8
c0010d53:	68 de 23 02 c0       	push   0xc00223de
c0010d58:	56                   	push   esi
c0010d59:	e8 74 fe ff ff       	call   c0010bd2 <string_ends_with(char const*, char const*)>
c0010d5e:	83 c4 10             	add    esp,0x10
c0010d61:	85 c0                	test   eax,eax
c0010d63:	0f 85 9a 00 00 00    	jne    c0010e03 <SysOpen(regs*)+0x1e9>
c0010d69:	83 ec 0c             	sub    esp,0xc
c0010d6c:	68 14 01 00 00       	push   0x114
c0010d71:	e8 1b dc ff ff       	call   c000e991 <malloc>
c0010d76:	83 c4 0c             	add    esp,0xc
c0010d79:	89 c6                	mov    esi,eax
c0010d7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d83:	50                   	push   eax
c0010d84:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010d87:	52                   	push   edx
c0010d88:	56                   	push   esi
c0010d89:	e8 84 73 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0010d8e:	83 c4 10             	add    esp,0x10
c0010d91:	85 f6                	test   esi,esi
c0010d93:	74 5b                	je     c0010df0 <SysOpen(regs*)+0x1d6>
c0010d95:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d98:	0f b6 c2             	movzx  eax,dl
c0010d9b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010d9e:	89 d0                	mov    eax,edx
c0010da0:	83 e0 01             	and    eax,0x1
c0010da3:	f6 c2 02             	test   dl,0x2
c0010da6:	74 03                	je     c0010dab <SysOpen(regs*)+0x191>
c0010da8:	83 c8 02             	or     eax,0x2
c0010dab:	f6 c2 04             	test   dl,0x4
c0010dae:	74 03                	je     c0010db3 <SysOpen(regs*)+0x199>
c0010db0:	83 c8 04             	or     eax,0x4
c0010db3:	f6 c2 08             	test   dl,0x8
c0010db6:	74 03                	je     c0010dbb <SysOpen(regs*)+0x1a1>
c0010db8:	83 c8 0a             	or     eax,0xa
c0010dbb:	80 e2 10             	and    dl,0x10
c0010dbe:	74 03                	je     c0010dc3 <SysOpen(regs*)+0x1a9>
c0010dc0:	83 c8 12             	or     eax,0x12
c0010dc3:	83 ec 08             	sub    esp,0x8
c0010dc6:	50                   	push   eax
c0010dc7:	56                   	push   esi
c0010dc8:	e8 63 73 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0010dcd:	83 c4 10             	add    esp,0x10
c0010dd0:	85 c0                	test   eax,eax
c0010dd2:	75 1c                	jne    c0010df0 <SysOpen(regs*)+0x1d6>
c0010dd4:	83 ec 0c             	sub    esp,0xc
c0010dd7:	56                   	push   esi
c0010dd8:	e8 6d 0e 00 00       	call   c0011c4a <UnixFile::getFileDescriptor()>
c0010ddd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010de0:	83 c4 10             	add    esp,0x10
c0010de3:	89 02                	mov    DWORD PTR [edx],eax
c0010de5:	c1 f8 1f             	sar    eax,0x1f
c0010de8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010deb:	e9 ba fe ff ff       	jmp    c0010caa <SysOpen(regs*)+0x90>
c0010df0:	81 c4 04 01 00 00    	add    esp,0x104
c0010df6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dfb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e00:	5b                   	pop    ebx
c0010e01:	5e                   	pop    esi
c0010e02:	c3                   	ret    
c0010e03:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e06:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010e0c:	e9 92 fe ff ff       	jmp    c0010ca3 <SysOpen(regs*)+0x89>

c0010e11 <KeSystemCall(regs*, void*)>:
c0010e11:	56                   	push   esi
c0010e12:	53                   	push   ebx
c0010e13:	50                   	push   eax
c0010e14:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e18:	8b 5e 2c             	mov    ebx,DWORD PTR [esi+0x2c]
c0010e1b:	83 fb 40             	cmp    ebx,0x40
c0010e1e:	77 25                	ja     c0010e45 <KeSystemCall(regs*, void*)+0x34>
c0010e20:	8b 04 9d 00 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbf00]
c0010e27:	85 c0                	test   eax,eax
c0010e29:	74 1a                	je     c0010e45 <KeSystemCall(regs*, void*)+0x34>
c0010e2b:	83 ec 0c             	sub    esp,0xc
c0010e2e:	56                   	push   esi
c0010e2f:	ff d0                	call   eax
c0010e31:	83 c4 10             	add    esp,0x10
c0010e34:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
c0010e37:	83 fb 2f             	cmp    ebx,0x2f
c0010e3a:	75 19                	jne    c0010e55 <KeSystemCall(regs*, void*)+0x44>
c0010e3c:	c6 05 2d 93 02 c0 01 	mov    BYTE PTR ds:0xc002932d,0x1
c0010e43:	eb 10                	jmp    c0010e55 <KeSystemCall(regs*, void*)+0x44>
c0010e45:	56                   	push   esi
c0010e46:	56                   	push   esi
c0010e47:	53                   	push   ebx
c0010e48:	68 e8 23 02 c0       	push   0xc00223e8
c0010e4d:	e8 12 61 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010e52:	83 c4 10             	add    esp,0x10
c0010e55:	59                   	pop    ecx
c0010e56:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010e5b:	31 d2                	xor    edx,edx
c0010e5d:	5b                   	pop    ebx
c0010e5e:	5e                   	pop    esi
c0010e5f:	c3                   	ret    

c0010e60 <VgaText::isAtty()>:
c0010e60:	b0 01                	mov    al,0x1
c0010e62:	c3                   	ret    
c0010e63:	90                   	nop

c0010e64 <VgaText::~VgaText()>:
c0010e64:	83 ec 0c             	sub    esp,0xc
c0010e67:	ba 20 24 02 c0       	mov    edx,0xc0022420
c0010e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e70:	89 10                	mov    DWORD PTR [eax],edx
c0010e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e76:	83 ec 0c             	sub    esp,0xc
c0010e79:	50                   	push   eax
c0010e7a:	e8 b9 0f 00 00       	call   c0011e38 <UnixFile::~UnixFile()>
c0010e7f:	83 c4 10             	add    esp,0x10
c0010e82:	90                   	nop
c0010e83:	83 c4 0c             	add    esp,0xc
c0010e86:	c3                   	ret    
c0010e87:	90                   	nop

c0010e88 <VgaText::~VgaText()>:
c0010e88:	83 ec 0c             	sub    esp,0xc
c0010e8b:	83 ec 0c             	sub    esp,0xc
c0010e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e92:	e8 cd ff ff ff       	call   c0010e64 <VgaText::~VgaText()>
c0010e97:	83 c4 10             	add    esp,0x10
c0010e9a:	83 ec 08             	sub    esp,0x8
c0010e9d:	68 84 01 00 00       	push   0x184
c0010ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ea6:	e8 5d b8 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0010eab:	83 c4 10             	add    esp,0x10
c0010eae:	83 c4 0c             	add    esp,0xc
c0010eb1:	c3                   	ret    

c0010eb2 <VgaText::read(unsigned long long, void*, int*)>:
c0010eb2:	83 ec 10             	sub    esp,0x10
c0010eb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010eb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ebd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ec1:	e8 da 8c ff ff       	call   c0009ba0 <readKeyboard(VgaText*, char*, unsigned long)>
c0010ec6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010eca:	89 02                	mov    DWORD PTR [edx],eax
c0010ecc:	31 c0                	xor    eax,eax
c0010ece:	83 c4 1c             	add    esp,0x1c
c0010ed1:	c3                   	ret    

c0010ed2 <setTerminalScrollLock(bool)>:
c0010ed2:	c3                   	ret    

c0010ed3 <doTerminalCycle()>:
c0010ed3:	c3                   	ret    

c0010ed4 <addToTerminalCycle(VgaText*)>:
c0010ed4:	c3                   	ret    

c0010ed5 <scrollTerminalScrollLock(int)>:
c0010ed5:	c3                   	ret    

c0010ed6 <VgaText::updateTitle()>:
c0010ed6:	c3                   	ret    
c0010ed7:	90                   	nop

c0010ed8 <VgaText::load()>:
c0010ed8:	c3                   	ret    
c0010ed9:	90                   	nop

c0010eda <VgaText::updateCursor()>:
c0010eda:	83 ec 14             	sub    esp,0x14
c0010edd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010ee1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010ee4:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010ee7:	e8 c8 87 00 00       	call   c00196b4 <HalConsoleCursorUpdate(int, int)>
c0010eec:	83 c4 1c             	add    esp,0x1c
c0010eef:	c3                   	ret    

c0010ef0 <VgaText::doANSI_SGR(int)>:
c0010ef0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ef8:	85 d2                	test   edx,edx
c0010efa:	75 0b                	jne    c0010f07 <VgaText::doANSI_SGR(int)+0x17>
c0010efc:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010eff:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f02:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010f05:	eb 59                	jmp    c0010f60 <VgaText::doANSI_SGR(int)+0x70>
c0010f07:	83 fa 07             	cmp    edx,0x7
c0010f0a:	75 0b                	jne    c0010f17 <VgaText::doANSI_SGR(int)+0x27>
c0010f0c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010f0f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010f12:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010f15:	eb 49                	jmp    c0010f60 <VgaText::doANSI_SGR(int)+0x70>
c0010f17:	83 fa 1b             	cmp    edx,0x1b
c0010f1a:	74 e0                	je     c0010efc <VgaText::doANSI_SGR(int)+0xc>
c0010f1c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010f1f:	83 f9 07             	cmp    ecx,0x7
c0010f22:	77 09                	ja     c0010f2d <VgaText::doANSI_SGR(int)+0x3d>
c0010f24:	8b 14 8d 40 42 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbdc0]
c0010f2b:	eb 20                	jmp    c0010f4d <VgaText::doANSI_SGR(int)+0x5d>
c0010f2d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010f30:	83 f9 07             	cmp    ecx,0x7
c0010f33:	77 09                	ja     c0010f3e <VgaText::doANSI_SGR(int)+0x4e>
c0010f35:	8b 14 8d 40 42 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbdc0]
c0010f3c:	eb 22                	jmp    c0010f60 <VgaText::doANSI_SGR(int)+0x70>
c0010f3e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010f41:	83 f9 07             	cmp    ecx,0x7
c0010f44:	77 0b                	ja     c0010f51 <VgaText::doANSI_SGR(int)+0x61>
c0010f46:	8b 14 95 f8 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf08]
c0010f4d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f50:	c3                   	ret    
c0010f51:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010f54:	83 f9 07             	cmp    ecx,0x7
c0010f57:	77 0a                	ja     c0010f63 <VgaText::doANSI_SGR(int)+0x73>
c0010f59:	8b 14 95 d0 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf30]
c0010f60:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010f63:	c3                   	ret    

c0010f64 <VgaText::setDefaultBgColour(VgaColour)>:
c0010f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f6c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010f6f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010f72:	c3                   	ret    
c0010f73:	90                   	nop

c0010f74 <VgaText::setDefaultFgColour(VgaColour)>:
c0010f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f7c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010f7f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f82:	c3                   	ret    
c0010f83:	90                   	nop

c0010f84 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010f84:	53                   	push   ebx
c0010f85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f8d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f91:	51                   	push   ecx
c0010f92:	e8 cd ff ff ff       	call   c0010f64 <VgaText::setDefaultBgColour(VgaColour)>
c0010f97:	58                   	pop    eax
c0010f98:	5a                   	pop    edx
c0010f99:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010f9d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010fa1:	5b                   	pop    ebx
c0010fa2:	eb d0                	jmp    c0010f74 <VgaText::setDefaultFgColour(VgaColour)>

c0010fa4 <VgaText::setTitleTextColour(VgaColour)>:
c0010fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fa8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fac:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010faf:	c3                   	ret    

c0010fb0 <VgaText::setTitleColour(VgaColour)>:
c0010fb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fb8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010fbb:	c3                   	ret    

c0010fbc <VgaText::setTitle(char*)>:
c0010fbc:	c3                   	ret    
c0010fbd:	90                   	nop

c0010fbe <VgaText::combineColours(unsigned char, unsigned char)>:
c0010fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fc2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010fc7:	83 e0 0f             	and    eax,0xf
c0010fca:	c1 e2 04             	shl    edx,0x4
c0010fcd:	09 d0                	or     eax,edx
c0010fcf:	c3                   	ret    

c0010fd0 <VgaText::scrollScreen()>:
c0010fd0:	55                   	push   ebp
c0010fd1:	57                   	push   edi
c0010fd2:	56                   	push   esi
c0010fd3:	be 01 00 00 00       	mov    esi,0x1
c0010fd8:	53                   	push   ebx
c0010fd9:	83 ec 0c             	sub    esp,0xc
c0010fdc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fe0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010fe3:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010fe9:	31 ff                	xor    edi,edi
c0010feb:	01 e9                	add    ecx,ebp
c0010fed:	8a 01                	mov    al,BYTE PTR [ecx]
c0010fef:	83 fe 18             	cmp    esi,0x18
c0010ff2:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0010ff8:	75 20                	jne    c001101a <VgaText::scrollScreen()+0x4a>
c0010ffa:	f7 c7 01 00 00 00    	test   edi,0x1
c0011000:	74 15                	je     c0011017 <VgaText::scrollScreen()+0x47>
c0011002:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011006:	50                   	push   eax
c0011007:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001100b:	50                   	push   eax
c001100c:	e8 ad ff ff ff       	call   c0010fbe <VgaText::combineColours(unsigned char, unsigned char)>
c0011011:	5a                   	pop    edx
c0011012:	5a                   	pop    edx
c0011013:	88 01                	mov    BYTE PTR [ecx],al
c0011015:	eb 03                	jmp    c001101a <VgaText::scrollScreen()+0x4a>
c0011017:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c001101a:	47                   	inc    edi
c001101b:	41                   	inc    ecx
c001101c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0011022:	75 c9                	jne    c0010fed <VgaText::scrollScreen()+0x1d>
c0011024:	46                   	inc    esi
c0011025:	83 fe 19             	cmp    esi,0x19
c0011028:	75 b9                	jne    c0010fe3 <VgaText::scrollScreen()+0x13>
c001102a:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c0011030:	75 1f                	jne    c0011051 <VgaText::scrollScreen()+0x81>
c0011032:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0011036:	74 05                	je     c001103d <VgaText::scrollScreen()+0x6d>
c0011038:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001103b:	eb 14                	jmp    c0011051 <VgaText::scrollScreen()+0x81>
c001103d:	50                   	push   eax
c001103e:	50                   	push   eax
c001103f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011043:	50                   	push   eax
c0011044:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011048:	50                   	push   eax
c0011049:	e8 fa 84 00 00       	call   c0019548 <HalConsoleScroll(int, int)>
c001104e:	83 c4 10             	add    esp,0x10
c0011051:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011055:	83 c4 0c             	add    esp,0xc
c0011058:	5b                   	pop    ebx
c0011059:	5e                   	pop    esi
c001105a:	5f                   	pop    edi
c001105b:	5d                   	pop    ebp
c001105c:	e9 79 fe ff ff       	jmp    c0010eda <VgaText::updateCursor()>
c0011061:	90                   	nop

c0011062 <VgaText::combineCharAndColour(char, unsigned char)>:
c0011062:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0011067:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001106c:	c1 e0 08             	shl    eax,0x8
c001106f:	09 d0                	or     eax,edx
c0011071:	c3                   	ret    

c0011072 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0011072:	55                   	push   ebp
c0011073:	57                   	push   edi
c0011074:	56                   	push   esi
c0011075:	53                   	push   ebx
c0011076:	83 ec 1c             	sub    esp,0x1c
c0011079:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001107d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011081:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0011085:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011089:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001108d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011091:	0f b6 c3             	movzx  eax,bl
c0011094:	50                   	push   eax
c0011095:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001109a:	50                   	push   eax
c001109b:	e8 1e ff ff ff       	call   c0010fbe <VgaText::combineColours(unsigned char, unsigned char)>
c00110a0:	5a                   	pop    edx
c00110a1:	0f b6 c0             	movzx  eax,al
c00110a4:	59                   	pop    ecx
c00110a5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00110aa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00110ae:	50                   	push   eax
c00110af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00110b3:	e8 aa ff ff ff       	call   c0011062 <VgaText::combineCharAndColour(char, unsigned char)>
c00110b8:	5a                   	pop    edx
c00110b9:	6b d7 50             	imul   edx,edi,0x50
c00110bc:	59                   	pop    ecx
c00110bd:	01 f2                	add    edx,esi
c00110bf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00110c2:	0f b7 d2             	movzx  edx,dx
c00110c5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00110c9:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c00110cf:	75 28                	jne    c00110f9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00110d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110d5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00110d9:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00110dd:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00110e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00110e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00110ed:	83 c4 1c             	add    esp,0x1c
c00110f0:	5b                   	pop    ebx
c00110f1:	5e                   	pop    esi
c00110f2:	5f                   	pop    edi
c00110f3:	5d                   	pop    ebp
c00110f4:	e9 57 85 00 00       	jmp    c0019650 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00110f9:	83 c4 1c             	add    esp,0x1c
c00110fc:	5b                   	pop    ebx
c00110fd:	5e                   	pop    esi
c00110fe:	5f                   	pop    edi
c00110ff:	5d                   	pop    ebp
c0011100:	c3                   	ret    
c0011101:	90                   	nop

c0011102 <VgaText::getCursorX()>:
c0011102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011106:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011109:	c3                   	ret    

c001110a <VgaText::getCursorY()>:
c001110a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001110e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011111:	c3                   	ret    

c0011112 <VgaText::setCursor(int, int)>:
c0011112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011116:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001111a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001111d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011121:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011124:	e9 b1 fd ff ff       	jmp    c0010eda <VgaText::updateCursor()>

c0011129 <setActiveTerminal(VgaText*)>:
c0011129:	53                   	push   ebx
c001112a:	83 ec 08             	sub    esp,0x8
c001112d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011131:	85 db                	test   ebx,ebx
c0011133:	75 11                	jne    c0011146 <setActiveTerminal(VgaText*)+0x1d>
c0011135:	c7 44 24 10 fc 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc00223fc
c001113d:	83 c4 08             	add    esp,0x8
c0011140:	5b                   	pop    ebx
c0011141:	e9 a0 db ff ff       	jmp    c000ece6 <KePanic(char const*)>
c0011146:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c001114b:	85 c0                	test   eax,eax
c001114d:	74 0c                	je     c001115b <setActiveTerminal(VgaText*)+0x32>
c001114f:	83 ec 0c             	sub    esp,0xc
c0011152:	50                   	push   eax
c0011153:	e8 82 fd ff ff       	call   c0010eda <VgaText::updateCursor()>
c0011158:	83 c4 10             	add    esp,0x10
c001115b:	89 1d 34 be 02 c0    	mov    DWORD PTR ds:0xc002be34,ebx
c0011161:	50                   	push   eax
c0011162:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011165:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011168:	53                   	push   ebx
c0011169:	e8 a4 ff ff ff       	call   c0011112 <VgaText::setCursor(int, int)>
c001116e:	83 c4 18             	add    esp,0x18
c0011171:	5b                   	pop    ebx
c0011172:	c3                   	ret    
c0011173:	90                   	nop

c0011174 <VgaText::clearScreen()>:
c0011174:	57                   	push   edi
c0011175:	56                   	push   esi
c0011176:	31 f6                	xor    esi,esi
c0011178:	53                   	push   ebx
c0011179:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001117d:	52                   	push   edx
c001117e:	6a 00                	push   0x0
c0011180:	6a 00                	push   0x0
c0011182:	53                   	push   ebx
c0011183:	e8 8a ff ff ff       	call   c0011112 <VgaText::setCursor(int, int)>
c0011188:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001118f:	83 c4 10             	add    esp,0x10
c0011192:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0011195:	7e 20                	jle    c00111b7 <VgaText::clearScreen()+0x43>
c0011197:	31 ff                	xor    edi,edi
c0011199:	50                   	push   eax
c001119a:	50                   	push   eax
c001119b:	56                   	push   esi
c001119c:	57                   	push   edi
c001119d:	47                   	inc    edi
c001119e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00111a1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00111a4:	6a 20                	push   0x20
c00111a6:	53                   	push   ebx
c00111a7:	e8 c6 fe ff ff       	call   c0011072 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00111ac:	83 c4 20             	add    esp,0x20
c00111af:	83 ff 50             	cmp    edi,0x50
c00111b2:	75 e5                	jne    c0011199 <VgaText::clearScreen()+0x25>
c00111b4:	46                   	inc    esi
c00111b5:	eb db                	jmp    c0011192 <VgaText::clearScreen()+0x1e>
c00111b7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00111be:	5b                   	pop    ebx
c00111bf:	5e                   	pop    esi
c00111c0:	5f                   	pop    edi
c00111c1:	c3                   	ret    

c00111c2 <VgaText::setCursorX(int)>:
c00111c2:	83 ec 10             	sub    esp,0x10
c00111c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111c9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00111cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111d0:	50                   	push   eax
c00111d1:	e8 3c ff ff ff       	call   c0011112 <VgaText::setCursor(int, int)>
c00111d6:	83 c4 1c             	add    esp,0x1c
c00111d9:	c3                   	ret    

c00111da <VgaText::setCursorY(int)>:
c00111da:	83 ec 10             	sub    esp,0x10
c00111dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00111e5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00111e8:	50                   	push   eax
c00111e9:	e8 24 ff ff ff       	call   c0011112 <VgaText::setCursor(int, int)>
c00111ee:	83 c4 1c             	add    esp,0x1c
c00111f1:	c3                   	ret    

c00111f2 <VgaText::incrementCursor(bool)>:
c00111f2:	56                   	push   esi
c00111f3:	53                   	push   ebx
c00111f4:	51                   	push   ecx
c00111f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00111fd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011200:	40                   	inc    eax
c0011201:	83 f8 50             	cmp    eax,0x50
c0011204:	74 05                	je     c001120b <VgaText::incrementCursor(bool)+0x19>
c0011206:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011209:	eb 24                	jmp    c001122f <VgaText::incrementCursor(bool)+0x3d>
c001120b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001120e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011215:	8d 50 01             	lea    edx,[eax+0x1]
c0011218:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001121b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001121e:	75 0f                	jne    c001122f <VgaText::incrementCursor(bool)+0x3d>
c0011220:	83 ec 0c             	sub    esp,0xc
c0011223:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011226:	53                   	push   ebx
c0011227:	e8 a4 fd ff ff       	call   c0010fd0 <VgaText::scrollScreen()>
c001122c:	83 c4 10             	add    esp,0x10
c001122f:	89 f0                	mov    eax,esi
c0011231:	84 c0                	test   al,al
c0011233:	74 0c                	je     c0011241 <VgaText::incrementCursor(bool)+0x4f>
c0011235:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011239:	5a                   	pop    edx
c001123a:	5b                   	pop    ebx
c001123b:	5e                   	pop    esi
c001123c:	e9 99 fc ff ff       	jmp    c0010eda <VgaText::updateCursor()>
c0011241:	58                   	pop    eax
c0011242:	5b                   	pop    ebx
c0011243:	5e                   	pop    esi
c0011244:	c3                   	ret    
c0011245:	90                   	nop

c0011246 <VgaText::decrementCursor(bool)>:
c0011246:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001124a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001124e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011251:	85 c0                	test   eax,eax
c0011253:	74 04                	je     c0011259 <VgaText::decrementCursor(bool)+0x13>
c0011255:	48                   	dec    eax
c0011256:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011259:	84 c9                	test   cl,cl
c001125b:	74 09                	je     c0011266 <VgaText::decrementCursor(bool)+0x20>
c001125d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011261:	e9 74 fc ff ff       	jmp    c0010eda <VgaText::updateCursor()>
c0011266:	c3                   	ret    
c0011267:	90                   	nop

c0011268 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011268:	53                   	push   ebx
c0011269:	83 ec 08             	sub    esp,0x8
c001126c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011271:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011275:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011279:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001127d:	83 f8 07             	cmp    eax,0x7
c0011280:	75 21                	jne    c00112a3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0011282:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001128a:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0011292:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c001129a:	83 c4 08             	add    esp,0x8
c001129d:	5b                   	pop    ebx
c001129e:	e9 0c 77 ff ff       	jmp    c00089af <KeBeep(int, int, bool)>
c00112a3:	83 f8 0d             	cmp    eax,0xd
c00112a6:	75 09                	jne    c00112b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00112a8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00112af:	eb 2d                	jmp    c00112de <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00112b1:	83 f8 0a             	cmp    eax,0xa
c00112b4:	75 31                	jne    c00112e7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00112b6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00112b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00112c0:	8d 50 01             	lea    edx,[eax+0x1]
c00112c3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00112c6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00112c9:	75 0f                	jne    c00112da <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00112cb:	83 ec 0c             	sub    esp,0xc
c00112ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00112d1:	53                   	push   ebx
c00112d2:	e8 f9 fc ff ff       	call   c0010fd0 <VgaText::scrollScreen()>
c00112d7:	83 c4 10             	add    esp,0x10
c00112da:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00112de:	83 c4 08             	add    esp,0x8
c00112e1:	5b                   	pop    ebx
c00112e2:	e9 f3 fb ff ff       	jmp    c0010eda <VgaText::updateCursor()>
c00112e7:	83 f8 08             	cmp    eax,0x8
c00112ea:	75 25                	jne    c0011311 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00112ec:	50                   	push   eax
c00112ed:	50                   	push   eax
c00112ee:	6a 01                	push   0x1
c00112f0:	53                   	push   ebx
c00112f1:	e8 50 ff ff ff       	call   c0011246 <VgaText::decrementCursor(bool)>
c00112f6:	5a                   	pop    edx
c00112f7:	59                   	pop    ecx
c00112f8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00112fb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00112fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011301:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011304:	6a 20                	push   0x20
c0011306:	53                   	push   ebx
c0011307:	e8 66 fd ff ff       	call   c0011072 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001130c:	83 c4 28             	add    esp,0x28
c001130f:	5b                   	pop    ebx
c0011310:	c3                   	ret    
c0011311:	83 ec 08             	sub    esp,0x8
c0011314:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011317:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001131a:	51                   	push   ecx
c001131b:	52                   	push   edx
c001131c:	50                   	push   eax
c001131d:	53                   	push   ebx
c001131e:	e8 4f fd ff ff       	call   c0011072 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011323:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011327:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001132f:	83 c4 28             	add    esp,0x28
c0011332:	5b                   	pop    ebx
c0011333:	e9 ba fe ff ff       	jmp    c00111f2 <VgaText::incrementCursor(bool)>

c0011338 <VgaText::putchar(char)>:
c0011338:	57                   	push   edi
c0011339:	56                   	push   esi
c001133a:	53                   	push   ebx
c001133b:	83 ec 10             	sub    esp,0x10
c001133e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011342:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011346:	89 f8                	mov    eax,edi
c0011348:	0f be c0             	movsx  eax,al
c001134b:	83 f8 5b             	cmp    eax,0x5b
c001134e:	75 18                	jne    c0011368 <VgaText::putchar(char)+0x30>
c0011350:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0011354:	74 20                	je     c0011376 <VgaText::putchar(char)+0x3e>
c0011356:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001135c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0011363:	e9 c1 00 00 00       	jmp    c0011429 <VgaText::putchar(char)+0xf1>
c0011368:	83 f8 1b             	cmp    eax,0x1b
c001136b:	75 09                	jne    c0011376 <VgaText::putchar(char)+0x3e>
c001136d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0011371:	e9 b3 00 00 00       	jmp    c0011429 <VgaText::putchar(char)+0xf1>
c0011376:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0011379:	84 c9                	test   cl,cl
c001137b:	0f 84 98 00 00 00    	je     c0011419 <VgaText::putchar(char)+0xe1>
c0011381:	8d 77 c0             	lea    esi,[edi-0x40]
c0011384:	89 f2                	mov    edx,esi
c0011386:	80 fa 3e             	cmp    dl,0x3e
c0011389:	77 78                	ja     c0011403 <VgaText::putchar(char)+0xcb>
c001138b:	83 f8 6d             	cmp    eax,0x6d
c001138e:	75 47                	jne    c00113d7 <VgaText::putchar(char)+0x9f>
c0011390:	31 f6                	xor    esi,esi
c0011392:	31 d2                	xor    edx,edx
c0011394:	31 c0                	xor    eax,eax
c0011396:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0011399:	7e 2d                	jle    c00113c8 <VgaText::putchar(char)+0x90>
c001139b:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00113a0:	83 fa 3b             	cmp    edx,0x3b
c00113a3:	75 17                	jne    c00113bc <VgaText::putchar(char)+0x84>
c00113a5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00113a9:	50                   	push   eax
c00113aa:	53                   	push   ebx
c00113ab:	e8 40 fb ff ff       	call   c0010ef0 <VgaText::doANSI_SGR(int)>
c00113b0:	59                   	pop    ecx
c00113b1:	31 d2                	xor    edx,edx
c00113b3:	5f                   	pop    edi
c00113b4:	31 c0                	xor    eax,eax
c00113b6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00113ba:	eb 09                	jmp    c00113c5 <VgaText::putchar(char)+0x8d>
c00113bc:	6b c0 0a             	imul   eax,eax,0xa
c00113bf:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00113c3:	88 ca                	mov    dl,cl
c00113c5:	46                   	inc    esi
c00113c6:	eb ce                	jmp    c0011396 <VgaText::putchar(char)+0x5e>
c00113c8:	84 d2                	test   dl,dl
c00113ca:	74 2f                	je     c00113fb <VgaText::putchar(char)+0xc3>
c00113cc:	50                   	push   eax
c00113cd:	53                   	push   ebx
c00113ce:	e8 1d fb ff ff       	call   c0010ef0 <VgaText::doANSI_SGR(int)>
c00113d3:	58                   	pop    eax
c00113d4:	5a                   	pop    edx
c00113d5:	eb 24                	jmp    c00113fb <VgaText::putchar(char)+0xc3>
c00113d7:	83 f8 4a             	cmp    eax,0x4a
c00113da:	75 1f                	jne    c00113fb <VgaText::putchar(char)+0xc3>
c00113dc:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00113e0:	75 19                	jne    c00113fb <VgaText::putchar(char)+0xc3>
c00113e2:	83 ec 0c             	sub    esp,0xc
c00113e5:	53                   	push   ebx
c00113e6:	e8 89 fd ff ff       	call   c0011174 <VgaText::clearScreen()>
c00113eb:	83 c4 0c             	add    esp,0xc
c00113ee:	6a 00                	push   0x0
c00113f0:	6a 00                	push   0x0
c00113f2:	53                   	push   ebx
c00113f3:	e8 1a fd ff ff       	call   c0011112 <VgaText::setCursor(int, int)>
c00113f8:	83 c4 10             	add    esp,0x10
c00113fb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011401:	eb 26                	jmp    c0011429 <VgaText::putchar(char)+0xf1>
c0011403:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0011406:	83 f8 0e             	cmp    eax,0xe
c0011409:	7f 1e                	jg     c0011429 <VgaText::putchar(char)+0xf1>
c001140b:	8d 48 01             	lea    ecx,[eax+0x1]
c001140e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011411:	89 f9                	mov    ecx,edi
c0011413:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0011417:	eb 10                	jmp    c0011429 <VgaText::putchar(char)+0xf1>
c0011419:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001141c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001141f:	50                   	push   eax
c0011420:	53                   	push   ebx
c0011421:	e8 42 fe ff ff       	call   c0011268 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011426:	83 c4 10             	add    esp,0x10
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	5b                   	pop    ebx
c001142d:	5e                   	pop    esi
c001142e:	5f                   	pop    edi
c001142f:	c3                   	ret    

c0011430 <VgaText::putx(unsigned int)>:
c0011430:	57                   	push   edi
c0011431:	b9 11 00 00 00       	mov    ecx,0x11
c0011436:	56                   	push   esi
c0011437:	be 0f 0f 02 c0       	mov    esi,0xc0020f0f
c001143c:	53                   	push   ebx
c001143d:	83 ec 20             	sub    esp,0x20
c0011440:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011444:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011448:	fc                   	cld    
c0011449:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001144b:	be 08 00 00 00       	mov    esi,0x8
c0011450:	50                   	push   eax
c0011451:	50                   	push   eax
c0011452:	89 d8                	mov    eax,ebx
c0011454:	c1 e3 04             	shl    ebx,0x4
c0011457:	c1 e8 1c             	shr    eax,0x1c
c001145a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001145f:	50                   	push   eax
c0011460:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011464:	e8 cf fe ff ff       	call   c0011338 <VgaText::putchar(char)>
c0011469:	83 c4 10             	add    esp,0x10
c001146c:	4e                   	dec    esi
c001146d:	75 e1                	jne    c0011450 <VgaText::putx(unsigned int)+0x20>
c001146f:	83 c4 20             	add    esp,0x20
c0011472:	5b                   	pop    ebx
c0011473:	5e                   	pop    esi
c0011474:	5f                   	pop    edi
c0011475:	c3                   	ret    

c0011476 <VgaText::puts(char const*)>:
c0011476:	53                   	push   ebx
c0011477:	83 ec 08             	sub    esp,0x8
c001147a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001147e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011481:	85 c0                	test   eax,eax
c0011483:	74 12                	je     c0011497 <VgaText::puts(char const*)+0x21>
c0011485:	43                   	inc    ebx
c0011486:	51                   	push   ecx
c0011487:	51                   	push   ecx
c0011488:	50                   	push   eax
c0011489:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001148d:	e8 a6 fe ff ff       	call   c0011338 <VgaText::putchar(char)>
c0011492:	83 c4 10             	add    esp,0x10
c0011495:	eb e7                	jmp    c001147e <VgaText::puts(char const*)+0x8>
c0011497:	83 c4 08             	add    esp,0x8
c001149a:	5b                   	pop    ebx
c001149b:	c3                   	ret    

c001149c <VgaText::write(unsigned long long, void*, int*)>:
c001149c:	55                   	push   ebp
c001149d:	57                   	push   edi
c001149e:	56                   	push   esi
c001149f:	53                   	push   ebx
c00114a0:	83 ec 0c             	sub    esp,0xc
c00114a3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00114a7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00114ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00114af:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00114b6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00114b9:	39 eb                	cmp    ebx,ebp
c00114bb:	74 13                	je     c00114d0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00114bd:	43                   	inc    ebx
c00114be:	50                   	push   eax
c00114bf:	50                   	push   eax
c00114c0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00114c4:	50                   	push   eax
c00114c5:	56                   	push   esi
c00114c6:	e8 6d fe ff ff       	call   c0011338 <VgaText::putchar(char)>
c00114cb:	83 c4 10             	add    esp,0x10
c00114ce:	eb e9                	jmp    c00114b9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00114d0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00114d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114db:	89 38                	mov    DWORD PTR [eax],edi
c00114dd:	83 c4 0c             	add    esp,0xc
c00114e0:	31 c0                	xor    eax,eax
c00114e2:	5b                   	pop    ebx
c00114e3:	5e                   	pop    esi
c00114e4:	5f                   	pop    edi
c00114e5:	5d                   	pop    ebp
c00114e6:	c3                   	ret    
c00114e7:	90                   	nop

c00114e8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00114e8:	55                   	push   ebp
c00114e9:	57                   	push   edi
c00114ea:	56                   	push   esi
c00114eb:	53                   	push   ebx
c00114ec:	83 ec 0c             	sub    esp,0xc
c00114ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00114f8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00114ff:	50                   	push   eax
c0011500:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011505:	50                   	push   eax
c0011506:	e8 b3 fa ff ff       	call   c0010fbe <VgaText::combineColours(unsigned char, unsigned char)>
c001150b:	5a                   	pop    edx
c001150c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0011510:	59                   	pop    ecx
c0011511:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0011514:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011518:	0f b7 f6             	movzx  esi,si
c001151b:	0f b6 e8             	movzx  ebp,al
c001151e:	01 f6                	add    esi,esi
c0011520:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0011523:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0011526:	85 c0                	test   eax,eax
c0011528:	0f 84 ef 00 00 00    	je     c001161d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001152e:	83 f8 0d             	cmp    eax,0xd
c0011531:	75 0c                	jne    c001153f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0011533:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001153a:	e9 d8 00 00 00       	jmp    c0011617 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001153f:	83 f8 0a             	cmp    eax,0xa
c0011542:	75 44                	jne    c0011588 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0011544:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011547:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001154e:	8d 48 01             	lea    ecx,[eax+0x1]
c0011551:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0011554:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0011557:	75 0f                	jne    c0011568 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0011559:	83 ec 0c             	sub    esp,0xc
c001155c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001155f:	53                   	push   ebx
c0011560:	e8 6b fa ff ff       	call   c0010fd0 <VgaText::scrollScreen()>
c0011565:	83 c4 10             	add    esp,0x10
c0011568:	83 ec 0c             	sub    esp,0xc
c001156b:	53                   	push   ebx
c001156c:	e8 69 f9 ff ff       	call   c0010eda <VgaText::updateCursor()>
c0011571:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0011575:	83 c4 10             	add    esp,0x10
c0011578:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001157b:	0f b7 f6             	movzx  esi,si
c001157e:	01 f6                	add    esi,esi
c0011580:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0011583:	e9 8f 00 00 00       	jmp    c0011617 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011588:	83 f8 08             	cmp    eax,0x8
c001158b:	75 34                	jne    c00115c1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c001158d:	51                   	push   ecx
c001158e:	51                   	push   ecx
c001158f:	6a 01                	push   0x1
c0011591:	53                   	push   ebx
c0011592:	e8 af fc ff ff       	call   c0011246 <VgaText::decrementCursor(bool)>
c0011597:	5e                   	pop    esi
c0011598:	58                   	pop    eax
c0011599:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001159c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001159f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00115a2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00115a5:	6a 20                	push   0x20
c00115a7:	53                   	push   ebx
c00115a8:	e8 c5 fa ff ff       	call   c0011072 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00115ad:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00115b1:	83 c4 20             	add    esp,0x20
c00115b4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00115b7:	0f b7 f6             	movzx  esi,si
c00115ba:	01 f6                	add    esi,esi
c00115bc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00115bf:	eb 56                	jmp    c0011617 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00115c1:	52                   	push   edx
c00115c2:	52                   	push   edx
c00115c3:	55                   	push   ebp
c00115c4:	50                   	push   eax
c00115c5:	e8 98 fa ff ff       	call   c0011062 <VgaText::combineCharAndColour(char, unsigned char)>
c00115ca:	83 c4 10             	add    esp,0x10
c00115cd:	66 89 06             	mov    WORD PTR [esi],ax
c00115d0:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c00115d6:	75 1d                	jne    c00115f5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00115d8:	83 ec 0c             	sub    esp,0xc
c00115db:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00115de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00115e1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00115e5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00115e9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00115ec:	50                   	push   eax
c00115ed:	e8 5e 80 00 00       	call   c0019650 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00115f2:	83 c4 20             	add    esp,0x20
c00115f5:	83 c6 02             	add    esi,0x2
c00115f8:	50                   	push   eax
c00115f9:	50                   	push   eax
c00115fa:	6a 00                	push   0x0
c00115fc:	53                   	push   ebx
c00115fd:	e8 f0 fb ff ff       	call   c00111f2 <VgaText::incrementCursor(bool)>
c0011602:	83 c4 10             	add    esp,0x10
c0011605:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0011609:	75 0c                	jne    c0011617 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001160b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001160f:	0f b7 f6             	movzx  esi,si
c0011612:	01 f6                	add    esi,esi
c0011614:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0011617:	47                   	inc    edi
c0011618:	e9 06 ff ff ff       	jmp    c0011523 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001161d:	83 ec 0c             	sub    esp,0xc
c0011620:	53                   	push   ebx
c0011621:	e8 b4 f8 ff ff       	call   c0010eda <VgaText::updateCursor()>
c0011626:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001162d:	83 c4 1c             	add    esp,0x1c
c0011630:	5b                   	pop    ebx
c0011631:	5e                   	pop    esi
c0011632:	5f                   	pop    edi
c0011633:	5d                   	pop    ebp
c0011634:	c3                   	ret    
c0011635:	90                   	nop

c0011636 <VgaText::VgaText(char const*)>:
c0011636:	56                   	push   esi
c0011637:	53                   	push   ebx
c0011638:	83 ec 04             	sub    esp,0x4
c001163b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001163f:	83 ec 08             	sub    esp,0x8
c0011642:	6a 00                	push   0x0
c0011644:	50                   	push   eax
c0011645:	e8 08 06 00 00       	call   c0011c52 <UnixFile::UnixFile(int)>
c001164a:	83 c4 10             	add    esp,0x10
c001164d:	ba 20 24 02 c0       	mov    edx,0xc0022420
c0011652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011656:	89 10                	mov    DWORD PTR [eax],edx
c0011658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001165c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011667:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001166e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011672:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001167a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001167e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011682:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0011689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001168d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011698:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001169f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116a3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00116aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116ae:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00116b5:	83 ec 0c             	sub    esp,0xc
c00116b8:	6a 01                	push   0x1
c00116ba:	e8 e2 09 00 00       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c00116bf:	83 c4 10             	add    esp,0x10
c00116c2:	89 c2                	mov    edx,eax
c00116c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116c8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00116cb:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c00116d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00116d8:	89 c6                	mov    esi,eax
c00116da:	e8 fb d7 ff ff       	call   c000eeda <Phys::allocatePage()>
c00116df:	68 05 0c 00 00       	push   0xc05
c00116e4:	56                   	push   esi
c00116e5:	50                   	push   eax
c00116e6:	53                   	push   ebx
c00116e7:	e8 9e 10 00 00       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c00116ec:	83 c4 10             	add    esp,0x10
c00116ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00116f6:	83 ec 04             	sub    esp,0x4
c00116f9:	68 a0 0f 00 00       	push   0xfa0
c00116fe:	6a 00                	push   0x0
c0011700:	50                   	push   eax
c0011701:	e8 ea ed fe ff       	call   c00004f0 <memset>
c0011706:	83 c4 10             	add    esp,0x10
c0011709:	83 ec 04             	sub    esp,0x4
c001170c:	6a 00                	push   0x0
c001170e:	6a 07                	push   0x7
c0011710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011714:	e8 6b f8 ff ff       	call   c0010f84 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011719:	83 c4 10             	add    esp,0x10
c001171c:	83 ec 04             	sub    esp,0x4
c001171f:	6a 00                	push   0x0
c0011721:	6a 00                	push   0x0
c0011723:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011727:	e8 e6 f9 ff ff       	call   c0011112 <VgaText::setCursor(int, int)>
c001172c:	83 c4 10             	add    esp,0x10
c001172f:	83 ec 0c             	sub    esp,0xc
c0011732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011736:	e8 39 fa ff ff       	call   c0011174 <VgaText::clearScreen()>
c001173b:	83 c4 10             	add    esp,0x10
c001173e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011742:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001174a:	05 82 00 00 00       	add    eax,0x82
c001174f:	83 ec 04             	sub    esp,0x4
c0011752:	68 80 00 00 00       	push   0x80
c0011757:	6a 00                	push   0x0
c0011759:	50                   	push   eax
c001175a:	e8 91 ed fe ff       	call   c00004f0 <memset>
c001175f:	83 c4 10             	add    esp,0x10
c0011762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011766:	05 02 01 00 00       	add    eax,0x102
c001176b:	83 ec 04             	sub    esp,0x4
c001176e:	68 80 00 00 00       	push   0x80
c0011773:	6a 00                	push   0x0
c0011775:	50                   	push   eax
c0011776:	e8 75 ed fe ff       	call   c00004f0 <memset>
c001177b:	83 c4 10             	add    esp,0x10
c001177e:	90                   	nop
c001177f:	83 c4 04             	add    esp,0x4
c0011782:	5b                   	pop    ebx
c0011783:	5e                   	pop    esi
c0011784:	c3                   	ret    
c0011785:	90                   	nop

c0011786 <VgaText::receiveKey(unsigned char)>:
c0011786:	55                   	push   ebp
c0011787:	57                   	push   edi
c0011788:	56                   	push   esi
c0011789:	53                   	push   ebx
c001178a:	83 ec 2c             	sub    esp,0x2c
c001178d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0011791:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011795:	89 ef                	mov    edi,ebp
c0011797:	81 e7 ff 00 00 00    	and    edi,0xff
c001179d:	0f 84 66 01 00 00    	je     c0011909 <VgaText::receiveKey(unsigned char)+0x183>
c00117a3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00117a9:	83 ff 08             	cmp    edi,0x8
c00117ac:	75 73                	jne    c0011821 <VgaText::receiveKey(unsigned char)+0x9b>
c00117ae:	83 ec 0c             	sub    esp,0xc
c00117b1:	56                   	push   esi
c00117b2:	e8 b9 ed fe ff       	call   c0000570 <strlen>
c00117b7:	83 c4 10             	add    esp,0x10
c00117ba:	85 c0                	test   eax,eax
c00117bc:	0f 84 02 01 00 00    	je     c00118c4 <VgaText::receiveKey(unsigned char)+0x13e>
c00117c2:	50                   	push   eax
c00117c3:	50                   	push   eax
c00117c4:	6a 08                	push   0x8
c00117c6:	53                   	push   ebx
c00117c7:	e8 6c fb ff ff       	call   c0011338 <VgaText::putchar(char)>
c00117cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00117cf:	e8 9c ed fe ff       	call   c0000570 <strlen>
c00117d4:	83 c4 10             	add    esp,0x10
c00117d7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00117df:	83 fa 0d             	cmp    edx,0xd
c00117e2:	89 d0                	mov    eax,edx
c00117e4:	0f 95 c1             	setne  cl
c00117e7:	83 fa 1f             	cmp    edx,0x1f
c00117ea:	0f 9e c2             	setle  dl
c00117ed:	0f b6 d2             	movzx  edx,dl
c00117f0:	85 ca                	test   edx,ecx
c00117f2:	74 17                	je     c001180b <VgaText::receiveKey(unsigned char)+0x85>
c00117f4:	83 e8 08             	sub    eax,0x8
c00117f7:	3c 02                	cmp    al,0x2
c00117f9:	76 10                	jbe    c001180b <VgaText::receiveKey(unsigned char)+0x85>
c00117fb:	55                   	push   ebp
c00117fc:	55                   	push   ebp
c00117fd:	68 0a 24 02 c0       	push   0xc002240a
c0011802:	53                   	push   ebx
c0011803:	e8 6e fc ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0011808:	83 c4 10             	add    esp,0x10
c001180b:	83 ec 0c             	sub    esp,0xc
c001180e:	56                   	push   esi
c001180f:	e8 5c ed fe ff       	call   c0000570 <strlen>
c0011814:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001181c:	e9 a0 00 00 00       	jmp    c00118c1 <VgaText::receiveKey(unsigned char)+0x13b>
c0011821:	83 ec 0c             	sub    esp,0xc
c0011824:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001182a:	50                   	push   eax
c001182b:	e8 40 ed fe ff       	call   c0000570 <strlen>
c0011830:	89 34 24             	mov    DWORD PTR [esp],esi
c0011833:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011837:	e8 34 ed fe ff       	call   c0000570 <strlen>
c001183c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011840:	83 c4 10             	add    esp,0x10
c0011843:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0011847:	3d 80 00 00 00       	cmp    eax,0x80
c001184c:	0f 87 b7 00 00 00    	ja     c0011909 <VgaText::receiveKey(unsigned char)+0x183>
c0011852:	8d 45 ff             	lea    eax,[ebp-0x1]
c0011855:	8d 55 f7             	lea    edx,[ebp-0x9]
c0011858:	3c 1e                	cmp    al,0x1e
c001185a:	0f 96 c0             	setbe  al
c001185d:	80 fa 01             	cmp    dl,0x1
c0011860:	0f 97 c2             	seta   dl
c0011863:	0f b6 d2             	movzx  edx,dl
c0011866:	85 c2                	test   edx,eax
c0011868:	74 2e                	je     c0011898 <VgaText::receiveKey(unsigned char)+0x112>
c001186a:	83 ff 0d             	cmp    edi,0xd
c001186d:	74 29                	je     c0011898 <VgaText::receiveKey(unsigned char)+0x112>
c001186f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011872:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011875:	68 10 24 02 c0       	push   0xc0022410
c001187a:	53                   	push   ebx
c001187b:	e8 68 fc ff ff       	call   c00114e8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011880:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011883:	8d 45 40             	lea    eax,[ebp+0x40]
c0011886:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011889:	0f b6 c0             	movzx  eax,al
c001188c:	50                   	push   eax
c001188d:	53                   	push   ebx
c001188e:	e8 d5 f9 ff ff       	call   c0011268 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011893:	83 c4 20             	add    esp,0x20
c0011896:	eb 11                	jmp    c00118a9 <VgaText::receiveKey(unsigned char)+0x123>
c0011898:	89 e8                	mov    eax,ebp
c001189a:	51                   	push   ecx
c001189b:	0f be c0             	movsx  eax,al
c001189e:	51                   	push   ecx
c001189f:	50                   	push   eax
c00118a0:	53                   	push   ebx
c00118a1:	e8 92 fa ff ff       	call   c0011338 <VgaText::putchar(char)>
c00118a6:	83 c4 10             	add    esp,0x10
c00118a9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00118ae:	89 e8                	mov    eax,ebp
c00118b0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00118b4:	52                   	push   edx
c00118b5:	52                   	push   edx
c00118b6:	8d 44 24 26          	lea    eax,[esp+0x26]
c00118ba:	50                   	push   eax
c00118bb:	56                   	push   esi
c00118bc:	e8 7f ef fe ff       	call   c0000840 <strcat>
c00118c1:	83 c4 10             	add    esp,0x10
c00118c4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c00118ca:	b0 01                	mov    al,0x1
c00118cc:	83 ff 1c             	cmp    edi,0x1c
c00118cf:	77 0e                	ja     c00118df <VgaText::receiveKey(unsigned char)+0x159>
c00118d1:	b8 08 04 00 10       	mov    eax,0x10000408
c00118d6:	89 f9                	mov    ecx,edi
c00118d8:	d3 e8                	shr    eax,cl
c00118da:	f7 d0                	not    eax
c00118dc:	83 e0 01             	and    eax,0x1
c00118df:	84 c0                	test   al,al
c00118e1:	74 04                	je     c00118e7 <VgaText::receiveKey(unsigned char)+0x161>
c00118e3:	84 d2                	test   dl,dl
c00118e5:	74 22                	je     c0011909 <VgaText::receiveKey(unsigned char)+0x183>
c00118e7:	81 c3 02 01 00 00    	add    ebx,0x102
c00118ed:	50                   	push   eax
c00118ee:	50                   	push   eax
c00118ef:	56                   	push   esi
c00118f0:	53                   	push   ebx
c00118f1:	e8 4a ef fe ff       	call   c0000840 <strcat>
c00118f6:	83 c4 0c             	add    esp,0xc
c00118f9:	68 80 00 00 00       	push   0x80
c00118fe:	6a 00                	push   0x0
c0011900:	56                   	push   esi
c0011901:	e8 ea eb fe ff       	call   c00004f0 <memset>
c0011906:	83 c4 10             	add    esp,0x10
c0011909:	83 c4 2c             	add    esp,0x2c
c001190c:	5b                   	pop    ebx
c001190d:	5e                   	pop    esi
c001190e:	5f                   	pop    edi
c001190f:	5d                   	pop    ebp
c0011910:	c3                   	ret    
c0011911:	90                   	nop

c0011912 <VgaText::doUpdate()>:
c0011912:	c3                   	ret    
c0011913:	90                   	nop

c0011914 <TSS::TSS()>:
c0011914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011918:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001191f:	90                   	nop
c0011920:	c3                   	ret    
c0011921:	90                   	nop
c0011922:	66 90                	xchg   ax,ax

c0011924 <TSS::setESP(unsigned long)>:
c0011924:	55                   	push   ebp
c0011925:	89 e5                	mov    ebp,esp
c0011927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001192a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001192d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011930:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011933:	90                   	nop
c0011934:	5d                   	pop    ebp
c0011935:	c3                   	ret    
c0011936:	66 90                	xchg   ax,ax

c0011938 <TSS::flush()>:
c0011938:	55                   	push   ebp
c0011939:	89 e5                	mov    ebp,esp
c001193b:	83 ec 10             	sub    esp,0x10
c001193e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011941:	8b 00                	mov    eax,DWORD PTR [eax]
c0011943:	83 c8 03             	or     eax,0x3
c0011946:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001194a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001194e:	66 89 d0             	mov    ax,dx
c0011951:	0f 00 d8             	ltr    ax
c0011954:	90                   	nop
c0011955:	c9                   	leave  
c0011956:	c3                   	ret    
c0011957:	90                   	nop

c0011958 <TSS::setup(unsigned long, unsigned long)>:
c0011958:	55                   	push   ebp
c0011959:	89 e5                	mov    ebp,esp
c001195b:	83 ec 18             	sub    esp,0x18
c001195e:	83 ec 0c             	sub    esp,0xc
c0011961:	6a 68                	push   0x68
c0011963:	e8 29 d0 ff ff       	call   c000e991 <malloc>
c0011968:	83 c4 10             	add    esp,0x10
c001196b:	89 c2                	mov    edx,eax
c001196d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011970:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011976:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011979:	83 ec 08             	sub    esp,0x8
c001197c:	50                   	push   eax
c001197d:	68 34 24 02 c0       	push   0xc0022434
c0011982:	e8 dd 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011987:	83 c4 10             	add    esp,0x10
c001198a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001198d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011990:	83 ec 04             	sub    esp,0x4
c0011993:	6a 68                	push   0x68
c0011995:	6a 00                	push   0x0
c0011997:	50                   	push   eax
c0011998:	e8 53 eb fe ff       	call   c00004f0 <memset>
c001199d:	83 c4 10             	add    esp,0x10
c00119a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119a6:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00119ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119b2:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00119b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00119c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00119c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119ca:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00119d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119d6:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00119dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119e2:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00119e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119ee:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00119f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119fa:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a06:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011a0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a12:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011a15:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011a18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a1e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011a21:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a2a:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011a31:	83 ec 0c             	sub    esp,0xc
c0011a34:	68 4b 24 02 c0       	push   0xc002244b
c0011a39:	e8 26 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a3e:	83 c4 10             	add    esp,0x10
c0011a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a47:	0f 20 da             	mov    edx,cr3
c0011a4a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011a4d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011a50:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011a53:	83 ec 0c             	sub    esp,0xc
c0011a56:	68 4e 24 02 c0       	push   0xc002244e
c0011a5b:	e8 04 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a60:	83 c4 10             	add    esp,0x10
c0011a63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a69:	83 ec 08             	sub    esp,0x8
c0011a6c:	50                   	push   eax
c0011a6d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011a70:	50                   	push   eax
c0011a71:	e8 60 c6 ff ff       	call   c000e0d6 <GDTEntry::setBase(unsigned int)>
c0011a76:	83 c4 10             	add    esp,0x10
c0011a79:	83 ec 08             	sub    esp,0x8
c0011a7c:	6a 68                	push   0x68
c0011a7e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011a81:	50                   	push   eax
c0011a82:	e8 6b c6 ff ff       	call   c000e0f2 <GDTEntry::setLimit(unsigned int)>
c0011a87:	83 c4 10             	add    esp,0x10
c0011a8a:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011a8e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011a91:	83 e0 0f             	and    eax,0xf
c0011a94:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011a97:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011a9a:	83 c8 40             	or     eax,0x40
c0011a9d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011aa0:	83 ec 0c             	sub    esp,0xc
c0011aa3:	68 51 24 02 c0       	push   0xc0022451
c0011aa8:	e8 b7 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011aad:	83 c4 10             	add    esp,0x10
c0011ab0:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011ab5:	83 ec 08             	sub    esp,0x8
c0011ab8:	50                   	push   eax
c0011ab9:	68 54 24 02 c0       	push   0xc0022454
c0011abe:	e8 a1 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011ac3:	83 c4 10             	add    esp,0x10
c0011ac6:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011acb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ad1:	83 ec 08             	sub    esp,0x8
c0011ad4:	50                   	push   eax
c0011ad5:	68 65 24 02 c0       	push   0xc0022465
c0011ada:	e8 85 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011adf:	83 c4 10             	add    esp,0x10
c0011ae2:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011ae7:	83 ec 08             	sub    esp,0x8
c0011aea:	50                   	push   eax
c0011aeb:	68 54 24 02 c0       	push   0xc0022454
c0011af0:	e8 6f 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011af5:	83 c4 10             	add    esp,0x10
c0011af8:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011afd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b03:	05 64 01 00 00       	add    eax,0x164
c0011b08:	83 ec 04             	sub    esp,0x4
c0011b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b0e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011b11:	50                   	push   eax
c0011b12:	e8 0f c6 ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c0011b17:	83 c4 10             	add    esp,0x10
c0011b1a:	89 c2                	mov    edx,eax
c0011b1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b1f:	89 10                	mov    DWORD PTR [eax],edx
c0011b21:	83 ec 0c             	sub    esp,0xc
c0011b24:	68 7a 24 02 c0       	push   0xc002247a
c0011b29:	e8 36 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011b2e:	83 c4 10             	add    esp,0x10
c0011b31:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011b36:	83 ec 08             	sub    esp,0x8
c0011b39:	50                   	push   eax
c0011b3a:	68 54 24 02 c0       	push   0xc0022454
c0011b3f:	e8 20 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011b44:	83 c4 10             	add    esp,0x10
c0011b47:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011b4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b52:	05 64 01 00 00       	add    eax,0x164
c0011b57:	83 ec 0c             	sub    esp,0xc
c0011b5a:	50                   	push   eax
c0011b5b:	e8 f0 c5 ff ff       	call   c000e150 <GDT::flush()>
c0011b60:	83 c4 10             	add    esp,0x10
c0011b63:	83 ec 0c             	sub    esp,0xc
c0011b66:	68 7d 24 02 c0       	push   0xc002247d
c0011b6b:	e8 f4 53 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011b70:	83 c4 10             	add    esp,0x10
c0011b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b78:	c9                   	leave  
c0011b79:	c3                   	ret    

c0011b7a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011b7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011b82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011b8a:	75 08                	jne    c0011b94 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011b8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011b92:	eb 38                	jmp    c0011bcc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011b94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b99:	75 17                	jne    c0011bb2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011b9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ba0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ba3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011ba9:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011baf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011bb2:	89 c1                	mov    ecx,eax
c0011bb4:	83 e1 fd             	and    ecx,0xfffffffd
c0011bb7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011bbd:	74 cd                	je     c0011b8c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011bbf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011bc4:	83 e0 ef             	and    eax,0xffffffef
c0011bc7:	83 f8 08             	cmp    eax,0x8
c0011bca:	76 c0                	jbe    c0011b8c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011bcc:	31 c0                	xor    eax,eax
c0011bce:	c3                   	ret    
c0011bcf:	90                   	nop

c0011bd0 <ReservedFilename::isAtty()>:
c0011bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011bd7:	31 c0                	xor    eax,eax
c0011bd9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011bdf:	74 09                	je     c0011bea <ReservedFilename::isAtty()+0x1a>
c0011be1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011be7:	0f 94 c0             	sete   al
c0011bea:	c3                   	ret    
c0011beb:	90                   	nop

c0011bec <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011bec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011bf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bf7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011bfb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011c00:	75 08                	jne    c0011c0a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011c02:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011c08:	eb 3d                	jmp    c0011c47 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011c0a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c0f:	75 17                	jne    c0011c28 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011c11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c25:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011c28:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c2d:	75 04                	jne    c0011c33 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011c2f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011c31:	eb 14                	jmp    c0011c47 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011c33:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011c38:	74 c8                	je     c0011c02 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011c3a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011c3f:	83 e0 ef             	and    eax,0xffffffef
c0011c42:	83 f8 08             	cmp    eax,0x8
c0011c45:	76 bb                	jbe    c0011c02 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011c47:	31 c0                	xor    eax,eax
c0011c49:	c3                   	ret    

c0011c4a <UnixFile::getFileDescriptor()>:
c0011c4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c51:	c3                   	ret    

c0011c52 <UnixFile::UnixFile(int)>:
c0011c52:	53                   	push   ebx
c0011c53:	83 ec 28             	sub    esp,0x28
c0011c56:	ba a8 24 02 c0       	mov    edx,0xc00224a8
c0011c5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c5f:	89 10                	mov    DWORD PTR [eax],edx
c0011c61:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011c69:	0f 8f 90 01 00 00    	jg     c0011dff <UnixFile::UnixFile(int)+0x1ad>
c0011c6f:	a1 80 42 02 c0       	mov    eax,ds:0xc0024280
c0011c74:	8d 50 01             	lea    edx,[eax+0x1]
c0011c77:	89 15 80 42 02 c0    	mov    DWORD PTR ds:0xc0024280,edx
c0011c7d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011c81:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011c84:	83 ec 08             	sub    esp,0x8
c0011c87:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011c8b:	68 b8 be 02 c0       	push   0xc002beb8
c0011c90:	e8 e7 e5 00 00       	call   c002027c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011c95:	83 c4 10             	add    esp,0x10
c0011c98:	a0 b4 be 02 c0       	mov    al,ds:0xc002beb4
c0011c9d:	83 f0 01             	xor    eax,0x1
c0011ca0:	0f b6 c0             	movzx  eax,al
c0011ca3:	85 c0                	test   eax,eax
c0011ca5:	0f 84 55 01 00 00    	je     c0011e00 <UnixFile::UnixFile(int)+0x1ae>
c0011cab:	c6 05 b4 be 02 c0 01 	mov    BYTE PTR ds:0xc002beb4,0x1
c0011cb2:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011cba:	83 ec 0c             	sub    esp,0xc
c0011cbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011cc1:	e8 cb cc ff ff       	call   c000e991 <malloc>
c0011cc6:	83 c4 10             	add    esp,0x10
c0011cc9:	89 c3                	mov    ebx,eax
c0011ccb:	83 ec 08             	sub    esp,0x8
c0011cce:	68 03 ff ff 0f       	push   0xfffff03
c0011cd3:	53                   	push   ebx
c0011cd4:	e8 2d 01 00 00       	call   c0011e06 <ReservedFilename::ReservedFilename(int)>
c0011cd9:	83 c4 10             	add    esp,0x10
c0011cdc:	89 1d ac be 02 c0    	mov    DWORD PTR ds:0xc002beac,ebx
c0011ce2:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011cea:	83 ec 0c             	sub    esp,0xc
c0011ced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cf1:	e8 9b cc ff ff       	call   c000e991 <malloc>
c0011cf6:	83 c4 10             	add    esp,0x10
c0011cf9:	89 c3                	mov    ebx,eax
c0011cfb:	83 ec 08             	sub    esp,0x8
c0011cfe:	68 01 ff ff 0f       	push   0xfffff01
c0011d03:	53                   	push   ebx
c0011d04:	e8 fd 00 00 00       	call   c0011e06 <ReservedFilename::ReservedFilename(int)>
c0011d09:	83 c4 10             	add    esp,0x10
c0011d0c:	89 1d b0 be 02 c0    	mov    DWORD PTR ds:0xc002beb0,ebx
c0011d12:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011d1a:	83 ec 0c             	sub    esp,0xc
c0011d1d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d21:	e8 6b cc ff ff       	call   c000e991 <malloc>
c0011d26:	83 c4 10             	add    esp,0x10
c0011d29:	89 c3                	mov    ebx,eax
c0011d2b:	83 ec 08             	sub    esp,0x8
c0011d2e:	68 00 ff ff 0f       	push   0xfffff00
c0011d33:	53                   	push   ebx
c0011d34:	e8 cd 00 00 00       	call   c0011e06 <ReservedFilename::ReservedFilename(int)>
c0011d39:	83 c4 10             	add    esp,0x10
c0011d3c:	89 1d a4 be 02 c0    	mov    DWORD PTR ds:0xc002bea4,ebx
c0011d42:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011d4a:	83 ec 0c             	sub    esp,0xc
c0011d4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011d51:	e8 3b cc ff ff       	call   c000e991 <malloc>
c0011d56:	83 c4 10             	add    esp,0x10
c0011d59:	89 c3                	mov    ebx,eax
c0011d5b:	83 ec 08             	sub    esp,0x8
c0011d5e:	68 02 ff ff 0f       	push   0xfffff02
c0011d63:	53                   	push   ebx
c0011d64:	e8 9d 00 00 00       	call   c0011e06 <ReservedFilename::ReservedFilename(int)>
c0011d69:	83 c4 10             	add    esp,0x10
c0011d6c:	89 1d a8 be 02 c0    	mov    DWORD PTR ds:0xc002bea8,ebx
c0011d72:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011d7a:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011d7f:	7f 7f                	jg     c0011e00 <UnixFile::UnixFile(int)+0x1ae>
c0011d81:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011d89:	83 ec 0c             	sub    esp,0xc
c0011d8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d90:	e8 fc cb ff ff       	call   c000e991 <malloc>
c0011d95:	83 c4 10             	add    esp,0x10
c0011d98:	89 c3                	mov    ebx,eax
c0011d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d9e:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011da3:	83 ec 08             	sub    esp,0x8
c0011da6:	50                   	push   eax
c0011da7:	53                   	push   ebx
c0011da8:	e8 59 00 00 00       	call   c0011e06 <ReservedFilename::ReservedFilename(int)>
c0011dad:	83 c4 10             	add    esp,0x10
c0011db0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011db4:	89 1c 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],ebx
c0011dbb:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011dc3:	83 ec 0c             	sub    esp,0xc
c0011dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011dca:	e8 c2 cb ff ff       	call   c000e991 <malloc>
c0011dcf:	83 c4 10             	add    esp,0x10
c0011dd2:	89 c3                	mov    ebx,eax
c0011dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011dd8:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011ddd:	83 ec 08             	sub    esp,0x8
c0011de0:	50                   	push   eax
c0011de1:	53                   	push   ebx
c0011de2:	e8 1f 00 00 00       	call   c0011e06 <ReservedFilename::ReservedFilename(int)>
c0011de7:	83 c4 10             	add    esp,0x10
c0011dea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011dee:	89 1c 85 40 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41c0],ebx
c0011df5:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011dfa:	e9 7b ff ff ff       	jmp    c0011d7a <UnixFile::UnixFile(int)+0x128>
c0011dff:	90                   	nop
c0011e00:	83 c4 28             	add    esp,0x28
c0011e03:	5b                   	pop    ebx
c0011e04:	c3                   	ret    
c0011e05:	90                   	nop

c0011e06 <ReservedFilename::ReservedFilename(int)>:
c0011e06:	83 ec 0c             	sub    esp,0xc
c0011e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e0d:	83 ec 08             	sub    esp,0x8
c0011e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e14:	50                   	push   eax
c0011e15:	e8 38 fe ff ff       	call   c0011c52 <UnixFile::UnixFile(int)>
c0011e1a:	83 c4 10             	add    esp,0x10
c0011e1d:	ba c4 24 02 c0       	mov    edx,0xc00224c4
c0011e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e26:	89 10                	mov    DWORD PTR [eax],edx
c0011e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011e30:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011e33:	90                   	nop
c0011e34:	83 c4 0c             	add    esp,0xc
c0011e37:	c3                   	ret    

c0011e38 <UnixFile::~UnixFile()>:
c0011e38:	83 ec 1c             	sub    esp,0x1c
c0011e3b:	ba a8 24 02 c0       	mov    edx,0xc00224a8
c0011e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e44:	89 10                	mov    DWORD PTR [eax],edx
c0011e46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e4d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011e52:	7f 76                	jg     c0011eca <UnixFile::~UnixFile()+0x92>
c0011e54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e5c:	83 ec 0c             	sub    esp,0xc
c0011e5f:	68 b8 be 02 c0       	push   0xc002beb8
c0011e64:	e8 e7 e4 00 00       	call   c0020350 <LinkedList<UnixFile>::getFirstElement()>
c0011e69:	83 c4 10             	add    esp,0x10
c0011e6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e70:	83 ec 0c             	sub    esp,0xc
c0011e73:	68 b8 be 02 c0       	push   0xc002beb8
c0011e78:	e8 db e4 00 00       	call   c0020358 <LinkedList<UnixFile>::removeFirst()>
c0011e7d:	83 c4 10             	add    esp,0x10
c0011e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e84:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011e88:	74 43                	je     c0011ecd <UnixFile::~UnixFile()+0x95>
c0011e8a:	83 ec 08             	sub    esp,0x8
c0011e8d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011e91:	68 b8 be 02 c0       	push   0xc002beb8
c0011e96:	e8 e1 e3 00 00       	call   c002027c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011e9b:	83 c4 10             	add    esp,0x10
c0011e9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ea2:	8d 50 01             	lea    edx,[eax+0x1]
c0011ea5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011ea9:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011eae:	0f 94 c0             	sete   al
c0011eb1:	0f b6 c0             	movzx  eax,al
c0011eb4:	85 c0                	test   eax,eax
c0011eb6:	74 a4                	je     c0011e5c <UnixFile::~UnixFile()+0x24>
c0011eb8:	83 ec 0c             	sub    esp,0xc
c0011ebb:	68 80 24 02 c0       	push   0xc0022480
c0011ec0:	e8 21 ce ff ff       	call   c000ece6 <KePanic(char const*)>
c0011ec5:	83 c4 10             	add    esp,0x10
c0011ec8:	eb 92                	jmp    c0011e5c <UnixFile::~UnixFile()+0x24>
c0011eca:	90                   	nop
c0011ecb:	eb 01                	jmp    c0011ece <UnixFile::~UnixFile()+0x96>
c0011ecd:	90                   	nop
c0011ece:	90                   	nop
c0011ecf:	83 c4 1c             	add    esp,0x1c
c0011ed2:	c3                   	ret    
c0011ed3:	90                   	nop

c0011ed4 <UnixFile::~UnixFile()>:
c0011ed4:	83 ec 0c             	sub    esp,0xc
c0011ed7:	83 ec 0c             	sub    esp,0xc
c0011eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ede:	e8 55 ff ff ff       	call   c0011e38 <UnixFile::~UnixFile()>
c0011ee3:	83 c4 10             	add    esp,0x10
c0011ee6:	83 ec 08             	sub    esp,0x8
c0011ee9:	6a 0c                	push   0xc
c0011eeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011eef:	e8 14 a8 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0011ef4:	83 c4 10             	add    esp,0x10
c0011ef7:	83 c4 0c             	add    esp,0xc
c0011efa:	c3                   	ret    
c0011efb:	90                   	nop

c0011efc <ReservedFilename::~ReservedFilename()>:
c0011efc:	83 ec 0c             	sub    esp,0xc
c0011eff:	ba c4 24 02 c0       	mov    edx,0xc00224c4
c0011f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f08:	89 10                	mov    DWORD PTR [eax],edx
c0011f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f0e:	83 ec 0c             	sub    esp,0xc
c0011f11:	50                   	push   eax
c0011f12:	e8 21 ff ff ff       	call   c0011e38 <UnixFile::~UnixFile()>
c0011f17:	83 c4 10             	add    esp,0x10
c0011f1a:	90                   	nop
c0011f1b:	83 c4 0c             	add    esp,0xc
c0011f1e:	c3                   	ret    
c0011f1f:	90                   	nop

c0011f20 <ReservedFilename::~ReservedFilename()>:
c0011f20:	83 ec 0c             	sub    esp,0xc
c0011f23:	83 ec 0c             	sub    esp,0xc
c0011f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f2a:	e8 cd ff ff ff       	call   c0011efc <ReservedFilename::~ReservedFilename()>
c0011f2f:	83 c4 10             	add    esp,0x10
c0011f32:	83 ec 08             	sub    esp,0x8
c0011f35:	6a 0c                	push   0xc
c0011f37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f3b:	e8 c8 a7 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0011f40:	83 c4 10             	add    esp,0x10
c0011f43:	83 c4 0c             	add    esp,0xc
c0011f46:	c3                   	ret    

c0011f47 <KeGetFileFromDescriptor(int)>:
c0011f47:	53                   	push   ebx
c0011f48:	83 ec 08             	sub    esp,0x8
c0011f4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f4f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011f55:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011f5b:	7f 2c                	jg     c0011f89 <KeGetFileFromDescriptor(int)+0x42>
c0011f5d:	83 ec 0c             	sub    esp,0xc
c0011f60:	68 b8 be 02 c0       	push   0xc002beb8
c0011f65:	e8 e6 e3 00 00       	call   c0020350 <LinkedList<UnixFile>::getFirstElement()>
c0011f6a:	83 c4 10             	add    esp,0x10
c0011f6d:	85 c0                	test   eax,eax
c0011f6f:	75 04                	jne    c0011f75 <KeGetFileFromDescriptor(int)+0x2e>
c0011f71:	31 c0                	xor    eax,eax
c0011f73:	eb 6e                	jmp    c0011fe3 <KeGetFileFromDescriptor(int)+0x9c>
c0011f75:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011f78:	74 69                	je     c0011fe3 <KeGetFileFromDescriptor(int)+0x9c>
c0011f7a:	52                   	push   edx
c0011f7b:	52                   	push   edx
c0011f7c:	50                   	push   eax
c0011f7d:	68 b8 be 02 c0       	push   0xc002beb8
c0011f82:	e8 73 e4 00 00       	call   c00203fa <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011f87:	eb e1                	jmp    c0011f6a <KeGetFileFromDescriptor(int)+0x23>
c0011f89:	a1 ac be 02 c0       	mov    eax,ds:0xc002beac
c0011f8e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011f94:	74 4d                	je     c0011fe3 <KeGetFileFromDescriptor(int)+0x9c>
c0011f96:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c0011f9b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011fa1:	74 40                	je     c0011fe3 <KeGetFileFromDescriptor(int)+0x9c>
c0011fa3:	a1 a8 be 02 c0       	mov    eax,ds:0xc002bea8
c0011fa8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011fae:	74 33                	je     c0011fe3 <KeGetFileFromDescriptor(int)+0x9c>
c0011fb0:	a1 a4 be 02 c0       	mov    eax,ds:0xc002bea4
c0011fb5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011fbb:	74 26                	je     c0011fe3 <KeGetFileFromDescriptor(int)+0x9c>
c0011fbd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011fc3:	83 f8 08             	cmp    eax,0x8
c0011fc6:	77 09                	ja     c0011fd1 <KeGetFileFromDescriptor(int)+0x8a>
c0011fc8:	8b 04 85 80 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4180]
c0011fcf:	eb 12                	jmp    c0011fe3 <KeGetFileFromDescriptor(int)+0x9c>
c0011fd1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011fd7:	83 fb 08             	cmp    ebx,0x8
c0011fda:	77 95                	ja     c0011f71 <KeGetFileFromDescriptor(int)+0x2a>
c0011fdc:	8b 04 9d 40 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41c0]
c0011fe3:	83 c4 08             	add    esp,0x8
c0011fe6:	5b                   	pop    ebx
c0011fe7:	c3                   	ret    

c0011fe8 <__static_initialization_and_destruction_0(int, int)>:
c0011fe8:	83 ec 0c             	sub    esp,0xc
c0011feb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ff0:	75 34                	jne    c0012026 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ff2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ffa:	75 2a                	jne    c0012026 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ffc:	83 ec 0c             	sub    esp,0xc
c0011fff:	68 b8 be 02 c0       	push   0xc002beb8
c0012004:	e8 31 e2 00 00       	call   c002023a <LinkedList<UnixFile>::LinkedList()>
c0012009:	83 c4 10             	add    esp,0x10
c001200c:	83 ec 04             	sub    esp,0x4
c001200f:	68 fc 3a 02 c0       	push   0xc0023afc
c0012014:	68 b8 be 02 c0       	push   0xc002beb8
c0012019:	68 38 02 02 c0       	push   0xc0020238
c001201e:	e8 95 a6 ff ff       	call   c000c6b8 <__cxa_atexit>
c0012023:	83 c4 10             	add    esp,0x10
c0012026:	90                   	nop
c0012027:	83 c4 0c             	add    esp,0xc
c001202a:	c3                   	ret    

c001202b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001202b:	83 ec 0c             	sub    esp,0xc
c001202e:	83 ec 08             	sub    esp,0x8
c0012031:	68 ff ff 00 00       	push   0xffff
c0012036:	6a 01                	push   0x1
c0012038:	e8 ab ff ff ff       	call   c0011fe8 <__static_initialization_and_destruction_0(int, int)>
c001203d:	83 c4 10             	add    esp,0x10
c0012040:	83 c4 0c             	add    esp,0xc
c0012043:	c3                   	ret    

c0012044 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0012044:	53                   	push   ebx
c0012045:	8b 15 88 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024288
c001204b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001204f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012053:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0012059:	89 d8                	mov    eax,ebx
c001205b:	d1 e8                	shr    eax,1
c001205d:	01 d0                	add    eax,edx
c001205f:	80 e3 01             	and    bl,0x1
c0012062:	8a 10                	mov    dl,BYTE PTR [eax]
c0012064:	75 09                	jne    c001206f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0012066:	83 e2 f0             	and    edx,0xfffffff0
c0012069:	09 ca                	or     edx,ecx
c001206b:	88 10                	mov    BYTE PTR [eax],dl
c001206d:	5b                   	pop    ebx
c001206e:	c3                   	ret    
c001206f:	83 e2 0f             	and    edx,0xf
c0012072:	0f b6 c9             	movzx  ecx,cl
c0012075:	c1 e1 04             	shl    ecx,0x4
c0012078:	09 ca                	or     edx,ecx
c001207a:	88 10                	mov    BYTE PTR [eax],dl
c001207c:	5b                   	pop    ebx
c001207d:	c3                   	ret    

c001207e <Virt::getPageState(unsigned long)>:
c001207e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012082:	8b 0d 88 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024288
c0012088:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001208e:	89 d0                	mov    eax,edx
c0012090:	d1 e8                	shr    eax,1
c0012092:	80 e2 01             	and    dl,0x1
c0012095:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0012098:	74 03                	je     c001209d <Virt::getPageState(unsigned long)+0x1f>
c001209a:	c1 e8 04             	shr    eax,0x4
c001209d:	83 e0 0f             	and    eax,0xf
c00120a0:	c3                   	ret    

c00120a1 <Virt::allocateKernelVirtualPages(int)>:
c00120a1:	55                   	push   ebp
c00120a2:	31 ed                	xor    ebp,ebp
c00120a4:	57                   	push   edi
c00120a5:	31 ff                	xor    edi,edi
c00120a7:	56                   	push   esi
c00120a8:	53                   	push   ebx
c00120a9:	31 db                	xor    ebx,ebx
c00120ab:	83 ec 0c             	sub    esp,0xc
c00120ae:	8b 35 84 42 02 c0    	mov    esi,DWORD PTR ds:0xc0024284
c00120b4:	56                   	push   esi
c00120b5:	e8 c4 ff ff ff       	call   c001207e <Virt::getPageState(unsigned long)>
c00120ba:	5a                   	pop    edx
c00120bb:	84 c0                	test   al,al
c00120bd:	75 41                	jne    c0012100 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00120bf:	85 db                	test   ebx,ebx
c00120c1:	75 02                	jne    c00120c5 <Virt::allocateKernelVirtualPages(int)+0x24>
c00120c3:	89 f5                	mov    ebp,esi
c00120c5:	83 c3 01             	add    ebx,0x1
c00120c8:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00120cc:	74 5f                	je     c001212d <Virt::allocateKernelVirtualPages(int)+0x8c>
c00120ce:	83 c6 01             	add    esi,0x1
c00120d1:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00120d7:	76 34                	jbe    c001210d <Virt::allocateKernelVirtualPages(int)+0x6c>
c00120d9:	c7 05 84 42 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0024284,0xc8000
c00120e3:	f7 c7 01 00 00 00    	test   edi,0x1
c00120e9:	75 2a                	jne    c0012115 <Virt::allocateKernelVirtualPages(int)+0x74>
c00120eb:	be 00 80 0c 00       	mov    esi,0xc8000
c00120f0:	bf 01 00 00 00       	mov    edi,0x1
c00120f5:	56                   	push   esi
c00120f6:	e8 83 ff ff ff       	call   c001207e <Virt::getPageState(unsigned long)>
c00120fb:	5a                   	pop    edx
c00120fc:	84 c0                	test   al,al
c00120fe:	74 bf                	je     c00120bf <Virt::allocateKernelVirtualPages(int)+0x1e>
c0012100:	31 db                	xor    ebx,ebx
c0012102:	83 c6 01             	add    esi,0x1
c0012105:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c001210b:	77 cc                	ja     c00120d9 <Virt::allocateKernelVirtualPages(int)+0x38>
c001210d:	89 35 84 42 02 c0    	mov    DWORD PTR ds:0xc0024284,esi
c0012113:	eb 9f                	jmp    c00120b4 <Virt::allocateKernelVirtualPages(int)+0x13>
c0012115:	83 ec 0c             	sub    esp,0xc
c0012118:	68 d8 24 02 c0       	push   0xc00224d8
c001211d:	e8 c4 cb ff ff       	call   c000ece6 <KePanic(char const*)>
c0012122:	8b 35 84 42 02 c0    	mov    esi,DWORD PTR ds:0xc0024284
c0012128:	83 c4 10             	add    esp,0x10
c001212b:	eb 87                	jmp    c00120b4 <Virt::allocateKernelVirtualPages(int)+0x13>
c001212d:	89 2d 84 42 02 c0    	mov    DWORD PTR ds:0xc0024284,ebp
c0012133:	83 fb 01             	cmp    ebx,0x1
c0012136:	74 6f                	je     c00121a7 <Virt::allocateKernelVirtualPages(int)+0x106>
c0012138:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001213c:	85 c9                	test   ecx,ecx
c001213e:	74 49                	je     c0012189 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0012140:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012144:	89 e8                	mov    eax,ebp
c0012146:	31 db                	xor    ebx,ebx
c0012148:	8d 79 ff             	lea    edi,[ecx-0x1]
c001214b:	eb 18                	jmp    c0012165 <Virt::allocateKernelVirtualPages(int)+0xc4>
c001214d:	6a 01                	push   0x1
c001214f:	83 c3 01             	add    ebx,0x1
c0012152:	50                   	push   eax
c0012153:	e8 ec fe ff ff       	call   c0012044 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012158:	58                   	pop    eax
c0012159:	5a                   	pop    edx
c001215a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001215e:	74 29                	je     c0012189 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0012160:	a1 84 42 02 c0       	mov    eax,ds:0xc0024284
c0012165:	8d 50 01             	lea    edx,[eax+0x1]
c0012168:	85 db                	test   ebx,ebx
c001216a:	89 15 84 42 02 c0    	mov    DWORD PTR ds:0xc0024284,edx
c0012170:	74 24                	je     c0012196 <Virt::allocateKernelVirtualPages(int)+0xf5>
c0012172:	39 df                	cmp    edi,ebx
c0012174:	75 d7                	jne    c001214d <Virt::allocateKernelVirtualPages(int)+0xac>
c0012176:	6a 03                	push   0x3
c0012178:	83 c3 01             	add    ebx,0x1
c001217b:	50                   	push   eax
c001217c:	e8 c3 fe ff ff       	call   c0012044 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012181:	59                   	pop    ecx
c0012182:	5e                   	pop    esi
c0012183:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012187:	75 d7                	jne    c0012160 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0012189:	83 c4 0c             	add    esp,0xc
c001218c:	89 e8                	mov    eax,ebp
c001218e:	5b                   	pop    ebx
c001218f:	c1 e0 0c             	shl    eax,0xc
c0012192:	5e                   	pop    esi
c0012193:	5f                   	pop    edi
c0012194:	5d                   	pop    ebp
c0012195:	c3                   	ret    
c0012196:	6a 02                	push   0x2
c0012198:	bb 01 00 00 00       	mov    ebx,0x1
c001219d:	50                   	push   eax
c001219e:	e8 a1 fe ff ff       	call   c0012044 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121a3:	58                   	pop    eax
c00121a4:	5a                   	pop    edx
c00121a5:	eb b9                	jmp    c0012160 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00121a7:	6a 04                	push   0x4
c00121a9:	8d 45 01             	lea    eax,[ebp+0x1]
c00121ac:	55                   	push   ebp
c00121ad:	a3 84 42 02 c0       	mov    ds:0xc0024284,eax
c00121b2:	e8 8d fe ff ff       	call   c0012044 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121b7:	5b                   	pop    ebx
c00121b8:	89 e8                	mov    eax,ebp
c00121ba:	5e                   	pop    esi
c00121bb:	c1 e0 0c             	shl    eax,0xc
c00121be:	83 c4 0c             	add    esp,0xc
c00121c1:	5b                   	pop    ebx
c00121c2:	5e                   	pop    esi
c00121c3:	5f                   	pop    edi
c00121c4:	5d                   	pop    ebp
c00121c5:	c3                   	ret    

c00121c6 <Virt::freeSwapfilePage(unsigned long)>:
c00121c6:	53                   	push   ebx
c00121c7:	8b 15 cc be 02 c0    	mov    edx,DWORD PTR ds:0xc002becc
c00121cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00121d1:	b8 01 00 00 00       	mov    eax,0x1
c00121d6:	89 cb                	mov    ebx,ecx
c00121d8:	d3 e0                	shl    eax,cl
c00121da:	c1 eb 05             	shr    ebx,0x5
c00121dd:	f7 d0                	not    eax
c00121df:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00121e2:	21 c1                	and    ecx,eax
c00121e4:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00121e7:	5b                   	pop    ebx
c00121e8:	c3                   	ret    

c00121e9 <Virt::swapIDToSector(unsigned long)>:
c00121e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121ed:	8b 15 8c 42 02 c0    	mov    edx,DWORD PTR ds:0xc002428c
c00121f3:	8b 0d 94 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024294
c00121f9:	0f af c2             	imul   eax,edx
c00121fc:	01 c8                	add    eax,ecx
c00121fe:	c3                   	ret    

c00121ff <Virt::allocateSwapfilePage()>:
c00121ff:	55                   	push   ebp
c0012200:	31 d2                	xor    edx,edx
c0012202:	57                   	push   edi
c0012203:	56                   	push   esi
c0012204:	53                   	push   ebx
c0012205:	83 ec 0c             	sub    esp,0xc
c0012208:	8b 0d 8c 42 02 c0    	mov    ecx,DWORD PTR ds:0xc002428c
c001220e:	a1 90 42 02 c0       	mov    eax,ds:0xc0024290
c0012213:	f7 f1                	div    ecx
c0012215:	39 0d 90 42 02 c0    	cmp    DWORD PTR ds:0xc0024290,ecx
c001221b:	72 2f                	jb     c001224c <Virt::allocateSwapfilePage()+0x4d>
c001221d:	8b 35 cc be 02 c0    	mov    esi,DWORD PTR ds:0xc002becc
c0012223:	8b 16                	mov    edx,DWORD PTR [esi]
c0012225:	f6 c2 01             	test   dl,0x1
c0012228:	74 3e                	je     c0012268 <Virt::allocateSwapfilePage()+0x69>
c001222a:	31 c9                	xor    ecx,ecx
c001222c:	bf 01 00 00 00       	mov    edi,0x1
c0012231:	eb 12                	jmp    c0012245 <Virt::allocateSwapfilePage()+0x46>
c0012233:	89 fd                	mov    ebp,edi
c0012235:	89 ca                	mov    edx,ecx
c0012237:	d3 e5                	shl    ebp,cl
c0012239:	c1 ea 05             	shr    edx,0x5
c001223c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001223f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012241:	85 ea                	test   edx,ebp
c0012243:	74 2c                	je     c0012271 <Virt::allocateSwapfilePage()+0x72>
c0012245:	83 c1 01             	add    ecx,0x1
c0012248:	39 c8                	cmp    eax,ecx
c001224a:	77 e7                	ja     c0012233 <Virt::allocateSwapfilePage()+0x34>
c001224c:	83 ec 0c             	sub    esp,0xc
c001224f:	68 48 27 02 c0       	push   0xc0022748
c0012254:	e8 8d ca ff ff       	call   c000ece6 <KePanic(char const*)>
c0012259:	83 c4 10             	add    esp,0x10
c001225c:	31 c9                	xor    ecx,ecx
c001225e:	83 c4 0c             	add    esp,0xc
c0012261:	89 c8                	mov    eax,ecx
c0012263:	5b                   	pop    ebx
c0012264:	5e                   	pop    esi
c0012265:	5f                   	pop    edi
c0012266:	5d                   	pop    ebp
c0012267:	c3                   	ret    
c0012268:	89 f3                	mov    ebx,esi
c001226a:	bd 01 00 00 00       	mov    ebp,0x1
c001226f:	31 c9                	xor    ecx,ecx
c0012271:	09 ea                	or     edx,ebp
c0012273:	89 c8                	mov    eax,ecx
c0012275:	89 13                	mov    DWORD PTR [ebx],edx
c0012277:	83 c4 0c             	add    esp,0xc
c001227a:	5b                   	pop    ebx
c001227b:	5e                   	pop    esi
c001227c:	5f                   	pop    edi
c001227d:	5d                   	pop    ebp
c001227e:	c3                   	ret    

c001227f <Virt::virtualMemorySetup()>:
c001227f:	53                   	push   ebx
c0012280:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012285:	6a 0f                	push   0xf
c0012287:	53                   	push   ebx
c0012288:	83 c3 01             	add    ebx,0x1
c001228b:	e8 b4 fd ff ff       	call   c0012044 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012290:	58                   	pop    eax
c0012291:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012297:	5a                   	pop    edx
c0012298:	75 eb                	jne    c0012285 <Virt::virtualMemorySetup()+0x6>
c001229a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001229f:	6a 00                	push   0x0
c00122a1:	53                   	push   ebx
c00122a2:	83 c3 01             	add    ebx,0x1
c00122a5:	e8 9a fd ff ff       	call   c0012044 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00122aa:	59                   	pop    ecx
c00122ab:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00122b1:	58                   	pop    eax
c00122b2:	75 eb                	jne    c001229f <Virt::virtualMemorySetup()+0x20>
c00122b4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00122b9:	6a 0f                	push   0xf
c00122bb:	53                   	push   ebx
c00122bc:	83 c3 01             	add    ebx,0x1
c00122bf:	e8 80 fd ff ff       	call   c0012044 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00122c4:	58                   	pop    eax
c00122c5:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00122cb:	5a                   	pop    edx
c00122cc:	75 eb                	jne    c00122b9 <Virt::virtualMemorySetup()+0x3a>
c00122ce:	5b                   	pop    ebx
c00122cf:	c3                   	ret    

c00122d0 <Virt::setupPageSwapping(int)>:
c00122d0:	53                   	push   ebx
c00122d1:	83 ec 0c             	sub    esp,0xc
c00122d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00122d8:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c00122dd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00122e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00122e5:	53                   	push   ebx
c00122e6:	c1 e3 0b             	shl    ebx,0xb
c00122e9:	68 5f 27 02 c0       	push   0xc002275f
c00122ee:	50                   	push   eax
c00122ef:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00122f2:	89 1d 90 42 02 c0    	mov    DWORD PTR ds:0xc0024290,ebx
c00122f8:	c6 05 98 42 02 c0 43 	mov    BYTE PTR ds:0xc0024298,0x43
c00122ff:	c1 eb 08             	shr    ebx,0x8
c0012302:	a3 94 42 02 c0       	mov    ds:0xc0024294,eax
c0012307:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001230a:	c7 05 8c 42 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002428c,0x8
c0012314:	e8 78 c6 ff ff       	call   c000e991 <malloc>
c0012319:	83 c4 0c             	add    esp,0xc
c001231c:	89 c1                	mov    ecx,eax
c001231e:	a3 cc be 02 c0       	mov    ds:0xc002becc,eax
c0012323:	31 d2                	xor    edx,edx
c0012325:	a1 90 42 02 c0       	mov    eax,ds:0xc0024290
c001232a:	f7 35 8c 42 02 c0    	div    DWORD PTR ds:0xc002428c
c0012330:	c1 e8 05             	shr    eax,0x5
c0012333:	50                   	push   eax
c0012334:	6a 00                	push   0x0
c0012336:	51                   	push   ecx
c0012337:	e8 b4 e1 fe ff       	call   c00004f0 <memset>
c001233c:	83 c4 18             	add    esp,0x18
c001233f:	5b                   	pop    ebx
c0012340:	c3                   	ret    
c0012341:	90                   	nop

c0012342 <VAS::setCPUSpecific(unsigned long)>:
c0012342:	c3                   	ret    
c0012343:	90                   	nop

c0012344 <VAS::VAS(VAS*)>:
c0012344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012348:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001234f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012353:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001235a:	90                   	nop
c001235b:	c3                   	ret    

c001235c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001235c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012360:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0012365:	89 c2                	mov    edx,eax
c0012367:	c1 e8 0a             	shr    eax,0xa
c001236a:	c1 ea 16             	shr    edx,0x16
c001236d:	83 f9 01             	cmp    ecx,0x1
c0012370:	19 c9                	sbb    ecx,ecx
c0012372:	c1 e2 0c             	shl    edx,0xc
c0012375:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001237b:	25 fc 0f 00 00       	and    eax,0xffc
c0012380:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012387:	01 d0                	add    eax,edx
c0012389:	c3                   	ret    

c001238a <VAS::getPageTableEntry(unsigned long)>:
c001238a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001238e:	89 ca                	mov    edx,ecx
c0012390:	c1 e9 0a             	shr    ecx,0xa
c0012393:	c1 ea 16             	shr    edx,0x16
c0012396:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001239c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00123a2:	c1 e0 0c             	shl    eax,0xc
c00123a5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00123a8:	c3                   	ret    

c00123a9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00123a9:	55                   	push   ebp
c00123aa:	57                   	push   edi
c00123ab:	bf 01 00 00 00       	mov    edi,0x1
c00123b0:	56                   	push   esi
c00123b1:	53                   	push   ebx
c00123b2:	83 ec 1c             	sub    esp,0x1c
c00123b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00123b9:	c1 ee 0c             	shr    esi,0xc
c00123bc:	eb 48                	jmp    c0012406 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00123be:	83 ec 08             	sub    esp,0x8
c00123c1:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c00123c6:	55                   	push   ebp
c00123c7:	50                   	push   eax
c00123c8:	e8 bd ff ff ff       	call   c001238a <VAS::getPageTableEntry(unsigned long)>
c00123cd:	83 c4 10             	add    esp,0x10
c00123d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00123d2:	f6 c6 04             	test   dh,0x4
c00123d5:	75 70                	jne    c0012447 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00123d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00123dd:	83 fb 04             	cmp    ebx,0x4
c00123e0:	0f 84 8a 00 00 00    	je     c0012470 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00123e6:	83 fb 02             	cmp    ebx,0x2
c00123e9:	0f 84 9a 00 00 00    	je     c0012489 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00123ef:	83 fb 03             	cmp    ebx,0x3
c00123f2:	0f 84 be 00 00 00    	je     c00124b6 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00123f8:	83 fb 01             	cmp    ebx,0x1
c00123fb:	0f 84 a2 00 00 00    	je     c00124a3 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012401:	83 c6 01             	add    esi,0x1
c0012404:	31 ff                	xor    edi,edi
c0012406:	56                   	push   esi
c0012407:	89 f5                	mov    ebp,esi
c0012409:	e8 70 fc ff ff       	call   c001207e <Virt::getPageState(unsigned long)>
c001240e:	c1 e5 0c             	shl    ebp,0xc
c0012411:	0f b6 d8             	movzx  ebx,al
c0012414:	5a                   	pop    edx
c0012415:	85 db                	test   ebx,ebx
c0012417:	75 a5                	jne    c00123be <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0012419:	83 ec 0c             	sub    esp,0xc
c001241c:	68 76 27 02 c0       	push   0xc0022776
c0012421:	e8 c0 c8 ff ff       	call   c000ece6 <KePanic(char const*)>
c0012426:	5a                   	pop    edx
c0012427:	59                   	pop    ecx
c0012428:	55                   	push   ebp
c0012429:	8b 2d d0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bed0
c001242f:	55                   	push   ebp
c0012430:	e8 55 ff ff ff       	call   c001238a <VAS::getPageTableEntry(unsigned long)>
c0012435:	83 c4 10             	add    esp,0x10
c0012438:	8b 10                	mov    edx,DWORD PTR [eax]
c001243a:	f6 c6 04             	test   dh,0x4
c001243d:	75 08                	jne    c0012447 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001243f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012445:	eb ba                	jmp    c0012401 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012447:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001244b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012451:	83 ec 0c             	sub    esp,0xc
c0012454:	52                   	push   edx
c0012455:	e8 17 ca ff ff       	call   c000ee71 <Phys::freePage(unsigned long)>
c001245a:	83 c4 10             	add    esp,0x10
c001245d:	83 fb 04             	cmp    ebx,0x4
c0012460:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012464:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001246a:	0f 85 76 ff ff ff    	jne    c00123e6 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0012470:	83 e7 01             	and    edi,0x1
c0012473:	75 46                	jne    c00124bb <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0012475:	c7 44 24 30 f8 24 02 c0 	mov    DWORD PTR [esp+0x30],0xc00224f8
c001247d:	83 c4 1c             	add    esp,0x1c
c0012480:	5b                   	pop    ebx
c0012481:	5e                   	pop    esi
c0012482:	5f                   	pop    edi
c0012483:	5d                   	pop    ebp
c0012484:	e9 5d c8 ff ff       	jmp    c000ece6 <KePanic(char const*)>
c0012489:	83 e7 01             	and    edi,0x1
c001248c:	75 15                	jne    c00124a3 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001248e:	83 ec 0c             	sub    esp,0xc
c0012491:	68 92 27 02 c0       	push   0xc0022792
c0012496:	e8 4b c8 ff ff       	call   c000ece6 <KePanic(char const*)>
c001249b:	83 c4 10             	add    esp,0x10
c001249e:	e9 5e ff ff ff       	jmp    c0012401 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00124a3:	83 ec 08             	sub    esp,0x8
c00124a6:	6a 00                	push   0x0
c00124a8:	56                   	push   esi
c00124a9:	e8 96 fb ff ff       	call   c0012044 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00124ae:	83 c4 10             	add    esp,0x10
c00124b1:	e9 4b ff ff ff       	jmp    c0012401 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00124b6:	83 e7 01             	and    edi,0x1
c00124b9:	75 16                	jne    c00124d1 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00124bb:	83 ec 08             	sub    esp,0x8
c00124be:	6a 00                	push   0x0
c00124c0:	56                   	push   esi
c00124c1:	e8 7e fb ff ff       	call   c0012044 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00124c6:	83 c4 10             	add    esp,0x10
c00124c9:	83 c4 1c             	add    esp,0x1c
c00124cc:	5b                   	pop    ebx
c00124cd:	5e                   	pop    esi
c00124ce:	5f                   	pop    edi
c00124cf:	5d                   	pop    ebp
c00124d0:	c3                   	ret    
c00124d1:	c7 44 24 30 ae 27 02 c0 	mov    DWORD PTR [esp+0x30],0xc00227ae
c00124d9:	83 c4 1c             	add    esp,0x1c
c00124dc:	5b                   	pop    ebx
c00124dd:	5e                   	pop    esi
c00124de:	5f                   	pop    edi
c00124df:	5d                   	pop    ebp
c00124e0:	e9 01 c8 ff ff       	jmp    c000ece6 <KePanic(char const*)>
c00124e5:	90                   	nop

c00124e6 <VAS::freeAllocatedPages(unsigned long)>:
c00124e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124ee:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00124f2:	74 09                	je     c00124fd <VAS::freeAllocatedPages(unsigned long)+0x17>
c00124f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00124f8:	e9 ac fe ff ff       	jmp    c00123a9 <Virt::freeKernelVirtualPages(unsigned long)>
c00124fd:	c7 44 24 04 1c 25 02 c0 	mov    DWORD PTR [esp+0x4],0xc002251c
c0012505:	e9 5a 4a ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c001250a <VAS::virtualToPhysical(unsigned long)>:
c001250a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001250e:	50                   	push   eax
c001250f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012513:	52                   	push   edx
c0012514:	e8 71 fe ff ff       	call   c001238a <VAS::getPageTableEntry(unsigned long)>
c0012519:	59                   	pop    ecx
c001251a:	8b 00                	mov    eax,DWORD PTR [eax]
c001251c:	5a                   	pop    edx
c001251d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012522:	c3                   	ret    
c0012523:	90                   	nop

c0012524 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0012524:	55                   	push   ebp
c0012525:	57                   	push   edi
c0012526:	56                   	push   esi
c0012527:	53                   	push   ebx
c0012528:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001252c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012530:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012534:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012538:	85 db                	test   ebx,ebx
c001253a:	7e 24                	jle    c0012560 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c001253c:	c1 e3 0c             	shl    ebx,0xc
c001253f:	01 f3                	add    ebx,esi
c0012541:	56                   	push   esi
c0012542:	81 c6 00 10 00 00    	add    esi,0x1000
c0012548:	55                   	push   ebp
c0012549:	e8 3c fe ff ff       	call   c001238a <VAS::getPageTableEntry(unsigned long)>
c001254e:	5a                   	pop    edx
c001254f:	59                   	pop    ecx
c0012550:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012552:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012556:	21 f9                	and    ecx,edi
c0012558:	09 d1                	or     ecx,edx
c001255a:	39 f3                	cmp    ebx,esi
c001255c:	89 08                	mov    DWORD PTR [eax],ecx
c001255e:	75 e1                	jne    c0012541 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0012560:	5b                   	pop    ebx
c0012561:	5e                   	pop    esi
c0012562:	5f                   	pop    edi
c0012563:	5d                   	pop    ebp
c0012564:	c3                   	ret    
c0012565:	90                   	nop

c0012566 <VAS::VAS()>:
c0012566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001256a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012575:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001257c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012580:	a3 d0 be 02 c0       	mov    ds:0xc002bed0,eax
c0012585:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012589:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001258d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012591:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012598:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001259f:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c00125a4:	b8 00 50 02 c0       	mov    eax,0xc0025000
c00125a9:	29 c2                	sub    edx,eax
c00125ab:	89 d0                	mov    eax,edx
c00125ad:	05 ff 0f 00 00       	add    eax,0xfff
c00125b2:	c1 e8 0c             	shr    eax,0xc
c00125b5:	89 c2                	mov    edx,eax
c00125b7:	b8 00 50 02 c0       	mov    eax,0xc0025000
c00125bc:	6a 04                	push   0x4
c00125be:	6a ff                	push   0xffffffff
c00125c0:	52                   	push   edx
c00125c1:	50                   	push   eax
c00125c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125c6:	e8 59 ff ff ff       	call   c0012524 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00125cb:	83 c4 14             	add    esp,0x14
c00125ce:	90                   	nop
c00125cf:	c3                   	ret    

c00125d0 <VAS::setToWriteCombining(unsigned long, int)>:
c00125d0:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c00125d5:	50                   	push   eax
c00125d6:	6a ff                	push   0xffffffff
c00125d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00125dc:	52                   	push   edx
c00125dd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00125e1:	51                   	push   ecx
c00125e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125e6:	50                   	push   eax
c00125e7:	e8 38 ff ff ff       	call   c0012524 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00125ec:	83 c4 14             	add    esp,0x14
c00125ef:	c3                   	ret    

c00125f0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00125f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125f4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00125f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125fb:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00125fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012603:	83 f8 01             	cmp    eax,0x1
c0012606:	19 c0                	sbb    eax,eax
c0012608:	83 ca 03             	or     edx,0x3
c001260b:	83 e0 fc             	and    eax,0xfffffffc
c001260e:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012615:	0f 20 d8             	mov    eax,cr3
c0012618:	0f 22 d8             	mov    cr3,eax
c001261b:	c3                   	ret    

c001261c <VAS::~VAS()>:
c001261c:	83 ec 2c             	sub    esp,0x2c
c001261f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012627:	fa                   	cli    
c0012628:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001262d:	83 c0 01             	add    eax,0x1
c0012630:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0012635:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001263a:	8b 00                	mov    eax,DWORD PTR [eax]
c001263c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001263f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0012645:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012649:	6a 01                	push   0x1
c001264b:	50                   	push   eax
c001264c:	e8 9f ff ff ff       	call   c00125f0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012651:	83 c4 0c             	add    esp,0xc
c0012654:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001265c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012664:	0f 8f d8 00 00 00    	jg     c0012742 <VAS::~VAS()+0x126>
c001266a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001266e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012671:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012675:	c1 e2 02             	shl    edx,0x2
c0012678:	01 d0                	add    eax,edx
c001267a:	8b 00                	mov    eax,DWORD PTR [eax]
c001267c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012684:	83 e0 01             	and    eax,0x1
c0012687:	0f 84 ab 00 00 00    	je     c0012738 <VAS::~VAS()+0x11c>
c001268d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012695:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001269d:	7f 74                	jg     c0012713 <VAS::~VAS()+0xf7>
c001269f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126a3:	c1 e0 0a             	shl    eax,0xa
c00126a6:	89 c2                	mov    edx,eax
c00126a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126ac:	01 d0                	add    eax,edx
c00126ae:	c1 e0 0c             	shl    eax,0xc
c00126b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126b5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00126ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00126bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126bf:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00126c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00126c9:	6a 01                	push   0x1
c00126cb:	50                   	push   eax
c00126cc:	e8 8b fc ff ff       	call   c001235c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00126d1:	83 c4 0c             	add    esp,0xc
c00126d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00126d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00126de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126e6:	25 01 04 00 00       	and    eax,0x401
c00126eb:	3d 01 04 00 00       	cmp    eax,0x401
c00126f0:	75 1a                	jne    c001270c <VAS::~VAS()+0xf0>
c00126f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126fb:	83 ec 0c             	sub    esp,0xc
c00126fe:	50                   	push   eax
c00126ff:	e8 6d c7 ff ff       	call   c000ee71 <Phys::freePage(unsigned long)>
c0012704:	83 c4 10             	add    esp,0x10
c0012707:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001270c:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0012711:	eb 82                	jmp    c0012695 <VAS::~VAS()+0x79>
c0012713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012717:	25 00 04 00 00       	and    eax,0x400
c001271c:	74 1a                	je     c0012738 <VAS::~VAS()+0x11c>
c001271e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012722:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012727:	83 ec 0c             	sub    esp,0xc
c001272a:	50                   	push   eax
c001272b:	e8 41 c7 ff ff       	call   c000ee71 <Phys::freePage(unsigned long)>
c0012730:	83 c4 10             	add    esp,0x10
c0012733:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012738:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001273d:	e9 1a ff ff ff       	jmp    c001265c <VAS::~VAS()+0x40>
c0012742:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012746:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012749:	83 ec 0c             	sub    esp,0xc
c001274c:	50                   	push   eax
c001274d:	e8 57 fc ff ff       	call   c00123a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012752:	83 c4 10             	add    esp,0x10
c0012755:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012759:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001275c:	83 ec 0c             	sub    esp,0xc
c001275f:	50                   	push   eax
c0012760:	e8 0c c7 ff ff       	call   c000ee71 <Phys::freePage(unsigned long)>
c0012765:	83 c4 10             	add    esp,0x10
c0012768:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001276d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012772:	83 e8 01             	sub    eax,0x1
c0012775:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001277a:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001277f:	85 c0                	test   eax,eax
c0012781:	75 01                	jne    c0012784 <VAS::~VAS()+0x168>
c0012783:	fb                   	sti    
c0012784:	90                   	nop
c0012785:	83 c4 2c             	add    esp,0x2c
c0012788:	c3                   	ret    
c0012789:	90                   	nop

c001278a <VAS::mapPage(unsigned long, unsigned long, int)>:
c001278a:	55                   	push   ebp
c001278b:	57                   	push   edi
c001278c:	56                   	push   esi
c001278d:	53                   	push   ebx
c001278e:	83 ec 1c             	sub    esp,0x1c
c0012791:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012795:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012799:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001279f:	76 49                	jbe    c00127ea <VAS::mapPage(unsigned long, unsigned long, int)+0x60>
c00127a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127a5:	09 d8                	or     eax,ebx
c00127a7:	a9 ff 0f 00 00       	test   eax,0xfff
c00127ac:	75 78                	jne    c0012826 <VAS::mapPage(unsigned long, unsigned long, int)+0x9c>
c00127ae:	89 de                	mov    esi,ebx
c00127b0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00127b3:	c1 ee 16             	shr    esi,0x16
c00127b6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00127bd:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00127c1:	74 78                	je     c001283b <VAS::mapPage(unsigned long, unsigned long, int)+0xb1>
c00127c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00127c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127cb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00127d1:	c1 eb 0a             	shr    ebx,0xa
c00127d4:	c1 e6 0c             	shl    esi,0xc
c00127d7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00127dd:	09 d0                	or     eax,edx
c00127df:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00127e2:	83 c4 1c             	add    esp,0x1c
c00127e5:	5b                   	pop    ebx
c00127e6:	5e                   	pop    esi
c00127e7:	5f                   	pop    edi
c00127e8:	5d                   	pop    ebp
c00127e9:	c3                   	ret    
c00127ea:	83 ec 08             	sub    esp,0x8
c00127ed:	8b 0d 70 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029d70
c00127f3:	51                   	push   ecx
c00127f4:	68 32 20 02 c0       	push   0xc0022032
c00127f9:	e8 66 47 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00127fe:	0f 20 d8             	mov    eax,cr3
c0012801:	83 c4 10             	add    esp,0x10
c0012804:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012807:	74 98                	je     c00127a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x17>
c0012809:	83 ec 0c             	sub    esp,0xc
c001280c:	68 40 25 02 c0       	push   0xc0022540
c0012811:	e8 4e 47 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012816:	83 c4 10             	add    esp,0x10
c0012819:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001281d:	09 d8                	or     eax,ebx
c001281f:	a9 ff 0f 00 00       	test   eax,0xfff
c0012824:	74 88                	je     c00127ae <VAS::mapPage(unsigned long, unsigned long, int)+0x24>
c0012826:	83 ec 0c             	sub    esp,0xc
c0012829:	68 a8 25 02 c0       	push   0xc00225a8
c001282e:	e8 b3 c4 ff ff       	call   c000ece6 <KePanic(char const*)>
c0012833:	83 c4 10             	add    esp,0x10
c0012836:	e9 73 ff ff ff       	jmp    c00127ae <VAS::mapPage(unsigned long, unsigned long, int)+0x24>
c001283b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001283f:	e8 96 c6 ff ff       	call   c000eeda <Phys::allocatePage()>
c0012844:	83 ec 0c             	sub    esp,0xc
c0012847:	89 c5                	mov    ebp,eax
c0012849:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c001284f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012853:	6a 01                	push   0x1
c0012855:	e8 47 f8 ff ff       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c001285a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012861:	6a 01                	push   0x1
c0012863:	50                   	push   eax
c0012864:	55                   	push   ebp
c0012865:	81 cd 07 04 00 00    	or     ebp,0x407
c001286b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001286f:	51                   	push   ecx
c0012870:	e8 19 01 00 00       	call   c001298e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012875:	83 c4 1c             	add    esp,0x1c
c0012878:	68 00 10 00 00       	push   0x1000
c001287d:	6a 00                	push   0x0
c001287f:	50                   	push   eax
c0012880:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012884:	e8 67 dc fe ff       	call   c00004f0 <memset>
c0012889:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001288d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012890:	e8 14 fb ff ff       	call   c00123a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012895:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012899:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001289c:	83 c4 10             	add    esp,0x10
c001289f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00128a2:	e9 1c ff ff ff       	jmp    c00127c3 <VAS::mapPage(unsigned long, unsigned long, int)+0x39>
c00128a7:	90                   	nop

c00128a8 <VAS::allocatePages(int, int)>:
c00128a8:	55                   	push   ebp
c00128a9:	57                   	push   edi
c00128aa:	56                   	push   esi
c00128ab:	53                   	push   ebx
c00128ac:	83 ec 1c             	sub    esp,0x1c
c00128af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00128b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00128b7:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00128bb:	75 71                	jne    c001292e <VAS::allocatePages(int, int)+0x86>
c00128bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00128c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128c4:	85 c0                	test   eax,eax
c00128c6:	74 4d                	je     c0012915 <VAS::allocatePages(int, int)+0x6d>
c00128c8:	89 dd                	mov    ebp,ebx
c00128ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128ce:	c1 e5 0c             	shl    ebp,0xc
c00128d1:	01 c5                	add    ebp,eax
c00128d3:	85 db                	test   ebx,ebx
c00128d5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00128d8:	7e 29                	jle    c0012903 <VAS::allocatePages(int, int)+0x5b>
c00128da:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00128de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128e2:	81 cf 00 04 00 00    	or     edi,0x400
c00128e8:	e8 ed c5 ff ff       	call   c000eeda <Phys::allocatePage()>
c00128ed:	57                   	push   edi
c00128ee:	53                   	push   ebx
c00128ef:	81 c3 00 10 00 00    	add    ebx,0x1000
c00128f5:	50                   	push   eax
c00128f6:	56                   	push   esi
c00128f7:	e8 8e fe ff ff       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c00128fc:	83 c4 10             	add    esp,0x10
c00128ff:	39 dd                	cmp    ebp,ebx
c0012901:	75 e5                	jne    c00128e8 <VAS::allocatePages(int, int)+0x40>
c0012903:	0f 20 d8             	mov    eax,cr3
c0012906:	0f 22 d8             	mov    cr3,eax
c0012909:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001290d:	83 c4 1c             	add    esp,0x1c
c0012910:	5b                   	pop    ebx
c0012911:	5e                   	pop    esi
c0012912:	5f                   	pop    edi
c0012913:	5d                   	pop    ebp
c0012914:	c3                   	ret    
c0012915:	83 ec 0c             	sub    esp,0xc
c0012918:	68 cc 25 02 c0       	push   0xc00225cc
c001291d:	e8 c4 c3 ff ff       	call   c000ece6 <KePanic(char const*)>
c0012922:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012925:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	eb 9a                	jmp    c00128c8 <VAS::allocatePages(int, int)+0x20>
c001292e:	83 ec 0c             	sub    esp,0xc
c0012931:	53                   	push   ebx
c0012932:	e8 6a f7 ff ff       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c0012937:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001293b:	83 c4 10             	add    esp,0x10
c001293e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012943:	77 37                	ja     c001297c <VAS::allocatePages(int, int)+0xd4>
c0012945:	85 db                	test   ebx,ebx
c0012947:	7e ba                	jle    c0012903 <VAS::allocatePages(int, int)+0x5b>
c0012949:	c1 e3 0c             	shl    ebx,0xc
c001294c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012950:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012954:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0012957:	81 cf 00 04 00 00    	or     edi,0x400
c001295d:	89 c3                	mov    ebx,eax
c001295f:	e8 76 c5 ff ff       	call   c000eeda <Phys::allocatePage()>
c0012964:	57                   	push   edi
c0012965:	53                   	push   ebx
c0012966:	81 c3 00 10 00 00    	add    ebx,0x1000
c001296c:	50                   	push   eax
c001296d:	56                   	push   esi
c001296e:	e8 17 fe ff ff       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012973:	83 c4 10             	add    esp,0x10
c0012976:	39 dd                	cmp    ebp,ebx
c0012978:	75 e5                	jne    c001295f <VAS::allocatePages(int, int)+0xb7>
c001297a:	eb 87                	jmp    c0012903 <VAS::allocatePages(int, int)+0x5b>
c001297c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012980:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012985:	09 c2                	or     edx,eax
c0012987:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001298b:	eb b8                	jmp    c0012945 <VAS::allocatePages(int, int)+0x9d>
c001298d:	90                   	nop

c001298e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001298e:	55                   	push   ebp
c001298f:	57                   	push   edi
c0012990:	56                   	push   esi
c0012991:	53                   	push   ebx
c0012992:	83 ec 0c             	sub    esp,0xc
c0012995:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012999:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001299d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00129a1:	85 db                	test   ebx,ebx
c00129a3:	7e 2f                	jle    c00129d4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c00129a5:	c1 e3 0c             	shl    ebx,0xc
c00129a8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00129ac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00129b0:	01 d3                	add    ebx,edx
c00129b2:	55                   	push   ebp
c00129b3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00129b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129bb:	29 c2                	sub    edx,eax
c00129bd:	01 f2                	add    edx,esi
c00129bf:	52                   	push   edx
c00129c0:	56                   	push   esi
c00129c1:	81 c6 00 10 00 00    	add    esi,0x1000
c00129c7:	57                   	push   edi
c00129c8:	e8 bd fd ff ff       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c00129cd:	83 c4 10             	add    esp,0x10
c00129d0:	39 de                	cmp    esi,ebx
c00129d2:	75 de                	jne    c00129b2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c00129d4:	0f 20 d8             	mov    eax,cr3
c00129d7:	0f 22 d8             	mov    cr3,eax
c00129da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129de:	83 c4 0c             	add    esp,0xc
c00129e1:	5b                   	pop    ebx
c00129e2:	5e                   	pop    esi
c00129e3:	5f                   	pop    edi
c00129e4:	5d                   	pop    ebp
c00129e5:	c3                   	ret    

c00129e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00129e6:	55                   	push   ebp
c00129e7:	57                   	push   edi
c00129e8:	56                   	push   esi
c00129e9:	53                   	push   ebx
c00129ea:	83 ec 1c             	sub    esp,0x1c
c00129ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00129f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00129f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00129f9:	09 f8                	or     eax,edi
c00129fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00129ff:	a9 ff 0f 00 00       	test   eax,0xfff
c0012a04:	75 4f                	jne    c0012a55 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012a06:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012a0a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012a0d:	c1 eb 16             	shr    ebx,0x16
c0012a10:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0012a17:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0012a1b:	74 52                	je     c0012a6f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0012a1d:	0f b6 f2             	movzx  esi,dl
c0012a20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012a24:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012a28:	c1 e8 0a             	shr    eax,0xa
c0012a2b:	83 fe 01             	cmp    esi,0x1
c0012a2e:	19 d2                	sbb    edx,edx
c0012a30:	c1 e3 0c             	shl    ebx,0xc
c0012a33:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012a39:	25 fc 0f 00 00       	and    eax,0xffc
c0012a3e:	01 d8                	add    eax,ebx
c0012a40:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012a44:	09 d9                	or     ecx,ebx
c0012a46:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012a4d:	83 c4 1c             	add    esp,0x1c
c0012a50:	5b                   	pop    ebx
c0012a51:	5e                   	pop    esi
c0012a52:	5f                   	pop    edi
c0012a53:	5d                   	pop    ebp
c0012a54:	c3                   	ret    
c0012a55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012a59:	83 ec 0c             	sub    esp,0xc
c0012a5c:	68 f8 25 02 c0       	push   0xc00225f8
c0012a61:	e8 80 c2 ff ff       	call   c000ece6 <KePanic(char const*)>
c0012a66:	83 c4 10             	add    esp,0x10
c0012a69:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a6d:	eb 97                	jmp    c0012a06 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0012a6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a73:	e8 62 c4 ff ff       	call   c000eeda <Phys::allocatePage()>
c0012a78:	83 ec 0c             	sub    esp,0xc
c0012a7b:	89 c5                	mov    ebp,eax
c0012a7d:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c0012a83:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012a87:	6a 01                	push   0x1
c0012a89:	e8 13 f6 ff ff       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c0012a8e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012a95:	6a 01                	push   0x1
c0012a97:	50                   	push   eax
c0012a98:	55                   	push   ebp
c0012a99:	81 cd 07 04 00 00    	or     ebp,0x407
c0012a9f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012aa3:	51                   	push   ecx
c0012aa4:	e8 e5 fe ff ff       	call   c001298e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012aa9:	83 c4 1c             	add    esp,0x1c
c0012aac:	68 00 10 00 00       	push   0x1000
c0012ab1:	6a 00                	push   0x0
c0012ab3:	50                   	push   eax
c0012ab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012ab8:	e8 33 da fe ff       	call   c00004f0 <memset>
c0012abd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012ac1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012ac4:	e8 e0 f8 ff ff       	call   c00123a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012ac9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012acc:	83 c4 10             	add    esp,0x10
c0012acf:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0012ad2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ad6:	e9 42 ff ff ff       	jmp    c0012a1d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0012adb:	90                   	nop

c0012adc <VAS::VAS(bool)>:
c0012adc:	53                   	push   ebx
c0012add:	83 ec 28             	sub    esp,0x28
c0012ae0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ae4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012ae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012af3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012afe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b02:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012b06:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012b09:	e8 cc c3 ff ff       	call   c000eeda <Phys::allocatePage()>
c0012b0e:	89 c2                	mov    edx,eax
c0012b10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b14:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012b17:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c0012b1d:	83 ec 0c             	sub    esp,0xc
c0012b20:	6a 01                	push   0x1
c0012b22:	e8 7a f5 ff ff       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c0012b27:	83 c4 10             	add    esp,0x10
c0012b2a:	89 c2                	mov    edx,eax
c0012b2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b30:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012b33:	83 ec 0c             	sub    esp,0xc
c0012b36:	6a 03                	push   0x3
c0012b38:	6a 01                	push   0x1
c0012b3a:	52                   	push   edx
c0012b3b:	50                   	push   eax
c0012b3c:	53                   	push   ebx
c0012b3d:	e8 4c fe ff ff       	call   c001298e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012b42:	83 c4 20             	add    esp,0x20
c0012b45:	89 c2                	mov    edx,eax
c0012b47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b4b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012b4e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012b56:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012b5e:	7f 1d                	jg     c0012b7d <VAS::VAS(bool)+0xa1>
c0012b60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b67:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b6b:	c1 e2 02             	shl    edx,0x2
c0012b6e:	01 d0                	add    eax,edx
c0012b70:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012b76:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012b7b:	eb d9                	jmp    c0012b56 <VAS::VAS(bool)+0x7a>
c0012b7d:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012b85:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012b8d:	7f 59                	jg     c0012be8 <VAS::VAS(bool)+0x10c>
c0012b8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b93:	2d 00 02 00 00       	sub    eax,0x200
c0012b98:	c1 e0 0c             	shl    eax,0xc
c0012b9b:	89 c2                	mov    edx,eax
c0012b9d:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012ba2:	89 d1                	mov    ecx,edx
c0012ba4:	09 c1                	or     ecx,eax
c0012ba6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012baa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012bb1:	c1 e2 02             	shl    edx,0x2
c0012bb4:	01 d0                	add    eax,edx
c0012bb6:	83 c9 05             	or     ecx,0x5
c0012bb9:	89 ca                	mov    edx,ecx
c0012bbb:	89 10                	mov    DWORD PTR [eax],edx
c0012bbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bc1:	2d 40 03 00 00       	sub    eax,0x340
c0012bc6:	83 f8 7f             	cmp    eax,0x7f
c0012bc9:	77 16                	ja     c0012be1 <VAS::VAS(bool)+0x105>
c0012bcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012bd6:	c1 e2 02             	shl    edx,0x2
c0012bd9:	01 d0                	add    eax,edx
c0012bdb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012be1:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012be6:	eb 9d                	jmp    c0012b85 <VAS::VAS(bool)+0xa9>
c0012be8:	8b 15 68 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c768
c0012bee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bf2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bf5:	05 20 0c 00 00       	add    eax,0xc20
c0012bfa:	81 ca 03 40 00 00    	or     edx,0x4003
c0012c00:	89 10                	mov    DWORD PTR [eax],edx
c0012c02:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012c07:	83 ec 08             	sub    esp,0x8
c0012c0a:	50                   	push   eax
c0012c0b:	68 32 20 02 c0       	push   0xc0022032
c0012c10:	e8 4f 43 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012c15:	83 c4 10             	add    esp,0x10
c0012c18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c1c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012c1f:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012c24:	09 c2                	or     edx,eax
c0012c26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c2d:	05 fc 0f 00 00       	add    eax,0xffc
c0012c32:	83 ca 03             	or     edx,0x3
c0012c35:	89 10                	mov    DWORD PTR [eax],edx
c0012c37:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012c3c:	83 ec 08             	sub    esp,0x8
c0012c3f:	50                   	push   eax
c0012c40:	68 32 20 02 c0       	push   0xc0022032
c0012c45:	e8 1a 43 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012c4a:	83 c4 10             	add    esp,0x10
c0012c4d:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012c52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c58:	83 ec 0c             	sub    esp,0xc
c0012c5b:	50                   	push   eax
c0012c5c:	e8 3b 66 ff ff       	call   c000929c <Device::getName()>
c0012c61:	83 c4 10             	add    esp,0x10
c0012c64:	83 ec 08             	sub    esp,0x8
c0012c67:	68 c8 27 02 c0       	push   0xc00227c8
c0012c6c:	50                   	push   eax
c0012c6d:	e8 de da fe ff       	call   c0000750 <strcmp>
c0012c72:	83 c4 10             	add    esp,0x10
c0012c75:	85 c0                	test   eax,eax
c0012c77:	0f 94 c0             	sete   al
c0012c7a:	0f b6 c0             	movzx  eax,al
c0012c7d:	85 c0                	test   eax,eax
c0012c7f:	0f 84 94 00 00 00    	je     c0012d19 <VAS::VAS(bool)+0x23d>
c0012c85:	fa                   	cli    
c0012c86:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012c8b:	83 ec 08             	sub    esp,0x8
c0012c8e:	50                   	push   eax
c0012c8f:	68 32 20 02 c0       	push   0xc0022032
c0012c94:	e8 cb 42 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012c99:	83 c4 10             	add    esp,0x10
c0012c9c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012ca1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ca7:	05 68 09 00 00       	add    eax,0x968
c0012cac:	83 ec 0c             	sub    esp,0xc
c0012caf:	50                   	push   eax
c0012cb0:	e8 ad b6 ff ff       	call   c000e362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012cbd:	89 c3                	mov    ebx,eax
c0012cbf:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012cc4:	83 ec 08             	sub    esp,0x8
c0012cc7:	50                   	push   eax
c0012cc8:	68 32 20 02 c0       	push   0xc0022032
c0012ccd:	e8 92 42 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012cd2:	83 c4 10             	add    esp,0x10
c0012cd5:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012cda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ce0:	05 68 09 00 00       	add    eax,0x968
c0012ce5:	83 ec 0c             	sub    esp,0xc
c0012ce8:	50                   	push   eax
c0012ce9:	e8 74 b6 ff ff       	call   c000e362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012cee:	83 c4 10             	add    esp,0x10
c0012cf1:	83 ec 08             	sub    esp,0x8
c0012cf4:	50                   	push   eax
c0012cf5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012cf9:	e8 8c f6 ff ff       	call   c001238a <VAS::getPageTableEntry(unsigned long)>
c0012cfe:	83 c4 10             	add    esp,0x10
c0012d01:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d03:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012d08:	6a 11                	push   0x11
c0012d0a:	53                   	push   ebx
c0012d0b:	50                   	push   eax
c0012d0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d10:	e8 75 fa ff ff       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012d15:	83 c4 10             	add    esp,0x10
c0012d18:	fb                   	sti    
c0012d19:	90                   	nop
c0012d1a:	83 c4 28             	add    esp,0x28
c0012d1d:	5b                   	pop    ebx
c0012d1e:	c3                   	ret    
c0012d1f:	90                   	nop

c0012d20 <VAS::evict(unsigned long)>:
c0012d20:	55                   	push   ebp
c0012d21:	57                   	push   edi
c0012d22:	56                   	push   esi
c0012d23:	53                   	push   ebx
c0012d24:	83 ec 1c             	sub    esp,0x1c
c0012d27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d2b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012d2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d33:	e8 c7 f4 ff ff       	call   c00121ff <Virt::allocateSwapfilePage()>
c0012d38:	89 c7                	mov    edi,eax
c0012d3a:	a1 8c 42 02 c0       	mov    eax,ds:0xc002428c
c0012d3f:	85 c0                	test   eax,eax
c0012d41:	7e 40                	jle    c0012d83 <VAS::evict(unsigned long)+0x63>
c0012d43:	89 ee                	mov    esi,ebp
c0012d45:	31 db                	xor    ebx,ebx
c0012d47:	83 ec 0c             	sub    esp,0xc
c0012d4a:	57                   	push   edi
c0012d4b:	e8 99 f4 ff ff       	call   c00121e9 <Virt::swapIDToSector(unsigned long)>
c0012d50:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d53:	01 d8                	add    eax,ebx
c0012d55:	6a 01                	push   0x1
c0012d57:	31 d2                	xor    edx,edx
c0012d59:	83 c3 01             	add    ebx,0x1
c0012d5c:	52                   	push   edx
c0012d5d:	81 c6 00 02 00 00    	add    esi,0x200
c0012d63:	50                   	push   eax
c0012d64:	0f be 05 98 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024298
c0012d6b:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012d72:	50                   	push   eax
c0012d73:	e8 d0 73 ff ff       	call   c000a148 <LogicalDisk::write(unsigned long long, int, void*)>
c0012d78:	83 c4 20             	add    esp,0x20
c0012d7b:	39 1d 8c 42 02 c0    	cmp    DWORD PTR ds:0xc002428c,ebx
c0012d81:	7f c4                	jg     c0012d47 <VAS::evict(unsigned long)+0x27>
c0012d83:	83 ec 08             	sub    esp,0x8
c0012d86:	c1 e7 0c             	shl    edi,0xc
c0012d89:	55                   	push   ebp
c0012d8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d8e:	50                   	push   eax
c0012d8f:	e8 f6 f5 ff ff       	call   c001238a <VAS::getPageTableEntry(unsigned long)>
c0012d94:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d96:	89 d3                	mov    ebx,edx
c0012d98:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012d9e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012da4:	09 d7                	or     edi,edx
c0012da6:	89 38                	mov    DWORD PTR [eax],edi
c0012da8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012dab:	8b 15 c8 be 02 c0    	mov    edx,DWORD PTR ds:0xc002bec8
c0012db1:	83 c2 01             	add    edx,0x1
c0012db4:	89 15 c8 be 02 c0    	mov    DWORD PTR ds:0xc002bec8,edx
c0012dba:	e8 b2 c0 ff ff       	call   c000ee71 <Phys::freePage(unsigned long)>
c0012dbf:	0f 20 d8             	mov    eax,cr3
c0012dc2:	0f 22 d8             	mov    cr3,eax
c0012dc5:	8b 0d c8 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bec8
c0012dcb:	51                   	push   ecx
c0012dcc:	55                   	push   ebp
c0012dcd:	53                   	push   ebx
c0012dce:	68 1c 26 02 c0       	push   0xc002261c
c0012dd3:	e8 8c 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012dd8:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0012ddd:	c7 44 24 50 d6 27 02 c0 	mov    DWORD PTR [esp+0x50],0xc00227d6
c0012de5:	8d 50 01             	lea    edx,[eax+0x1]
c0012de8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012dec:	89 15 c4 be 02 c0    	mov    DWORD PTR ds:0xc002bec4,edx
c0012df2:	83 c4 3c             	add    esp,0x3c
c0012df5:	5b                   	pop    ebx
c0012df6:	5e                   	pop    esi
c0012df7:	5f                   	pop    edi
c0012df8:	5d                   	pop    ebp
c0012df9:	e9 66 41 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0012dfe <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012dfe:	55                   	push   ebp
c0012dff:	57                   	push   edi
c0012e00:	56                   	push   esi
c0012e01:	53                   	push   ebx
c0012e02:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0012e08:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0012e0f:	89 f3                	mov    ebx,esi
c0012e11:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012e17:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0012e1d:	77 22                	ja     c0012e41 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0012e1f:	83 ec 08             	sub    esp,0x8
c0012e22:	56                   	push   esi
c0012e23:	68 f9 27 02 c0       	push   0xc00227f9
c0012e28:	e8 37 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e2d:	83 c4 10             	add    esp,0x10
c0012e30:	85 db                	test   ebx,ebx
c0012e32:	75 2a                	jne    c0012e5e <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0012e34:	31 c0                	xor    eax,eax
c0012e36:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012e3c:	5b                   	pop    ebx
c0012e3d:	5e                   	pop    esi
c0012e3e:	5f                   	pop    edi
c0012e3f:	5d                   	pop    ebp
c0012e40:	c3                   	ret    
c0012e41:	83 ec 0c             	sub    esp,0xc
c0012e44:	68 e7 27 02 c0       	push   0xc00227e7
c0012e49:	e8 98 be ff ff       	call   c000ece6 <KePanic(char const*)>
c0012e4e:	5f                   	pop    edi
c0012e4f:	5d                   	pop    ebp
c0012e50:	56                   	push   esi
c0012e51:	68 f9 27 02 c0       	push   0xc00227f9
c0012e56:	e8 09 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e5b:	83 c4 10             	add    esp,0x10
c0012e5e:	83 ec 08             	sub    esp,0x8
c0012e61:	53                   	push   ebx
c0012e62:	8b b4 24 3c 10 00 00 	mov    esi,DWORD PTR [esp+0x103c]
c0012e69:	56                   	push   esi
c0012e6a:	e8 1b f5 ff ff       	call   c001238a <VAS::getPageTableEntry(unsigned long)>
c0012e6f:	83 c4 10             	add    esp,0x10
c0012e72:	89 c2                	mov    edx,eax
c0012e74:	85 c0                	test   eax,eax
c0012e76:	74 bc                	je     c0012e34 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0012e78:	8b 28                	mov    ebp,DWORD PTR [eax]
c0012e7a:	f7 c5 00 02 00 00    	test   ebp,0x200
c0012e80:	0f 85 c0 00 00 00    	jne    c0012f46 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0012e86:	89 e8                	mov    eax,ebp
c0012e88:	25 01 04 00 00       	and    eax,0x401
c0012e8d:	3d 00 04 00 00       	cmp    eax,0x400
c0012e92:	75 a0                	jne    c0012e34 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0012e94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012e98:	c1 ed 0c             	shr    ebp,0xc
c0012e9b:	e8 3a c0 ff ff       	call   c000eeda <Phys::allocatePage()>
c0012ea0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ea4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012ea6:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0012eac:	09 c1                	or     ecx,eax
c0012eae:	81 c9 01 08 00 00    	or     ecx,0x801
c0012eb4:	89 0a                	mov    DWORD PTR [edx],ecx
c0012eb6:	8b 15 8c 42 02 c0    	mov    edx,DWORD PTR ds:0xc002428c
c0012ebc:	85 d2                	test   edx,edx
c0012ebe:	7e 40                	jle    c0012f00 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0012ec0:	89 df                	mov    edi,ebx
c0012ec2:	31 f6                	xor    esi,esi
c0012ec4:	83 ec 0c             	sub    esp,0xc
c0012ec7:	55                   	push   ebp
c0012ec8:	e8 1c f3 ff ff       	call   c00121e9 <Virt::swapIDToSector(unsigned long)>
c0012ecd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012ed0:	01 f0                	add    eax,esi
c0012ed2:	6a 01                	push   0x1
c0012ed4:	31 d2                	xor    edx,edx
c0012ed6:	83 c6 01             	add    esi,0x1
c0012ed9:	52                   	push   edx
c0012eda:	81 c7 00 02 00 00    	add    edi,0x200
c0012ee0:	50                   	push   eax
c0012ee1:	0f be 05 98 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024298
c0012ee8:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012eef:	50                   	push   eax
c0012ef0:	e8 e7 71 ff ff       	call   c000a0dc <LogicalDisk::read(unsigned long long, int, void*)>
c0012ef5:	83 c4 20             	add    esp,0x20
c0012ef8:	39 35 8c 42 02 c0    	cmp    DWORD PTR ds:0xc002428c,esi
c0012efe:	7f c4                	jg     c0012ec4 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0012f00:	83 ec 04             	sub    esp,0x4
c0012f03:	a1 c8 be 02 c0       	mov    eax,ds:0xc002bec8
c0012f08:	83 e8 01             	sub    eax,0x1
c0012f0b:	50                   	push   eax
c0012f0c:	a3 c8 be 02 c0       	mov    ds:0xc002bec8,eax
c0012f11:	53                   	push   ebx
c0012f12:	68 0c 28 02 c0       	push   0xc002280c
c0012f17:	e8 48 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f1c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012f1f:	e8 a2 f2 ff ff       	call   c00121c6 <Virt::freeSwapfilePage(unsigned long)>
c0012f24:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012f29:	83 c4 10             	add    esp,0x10
c0012f2c:	83 e8 01             	sub    eax,0x1
c0012f2f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0012f34:	85 c0                	test   eax,eax
c0012f36:	75 01                	jne    c0012f39 <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c0012f38:	fb                   	sti    
c0012f39:	0f 20 d8             	mov    eax,cr3
c0012f3c:	0f 22 d8             	mov    cr3,eax
c0012f3f:	b0 01                	mov    al,0x1
c0012f41:	e9 f0 fe ff ff       	jmp    c0012e36 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0012f46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012f4a:	83 ec 0c             	sub    esp,0xc
c0012f4d:	68 4c 26 02 c0       	push   0xc002264c
c0012f52:	e8 0d 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f57:	e8 7e bf ff ff       	call   c000eeda <Phys::allocatePage()>
c0012f5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f60:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012f62:	83 c9 01             	or     ecx,0x1
c0012f65:	89 0a                	mov    DWORD PTR [edx],ecx
c0012f67:	0f 20 d9             	mov    ecx,cr3
c0012f6a:	0f 22 d9             	mov    cr3,ecx
c0012f6d:	bd 00 10 00 00       	mov    ebp,0x1000
c0012f72:	89 de                	mov    esi,ebx
c0012f74:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0012f78:	89 e9                	mov    ecx,ebp
c0012f7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f7c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012f7e:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0012f84:	09 c8                	or     eax,ecx
c0012f86:	83 c8 02             	or     eax,0x2
c0012f89:	89 02                	mov    DWORD PTR [edx],eax
c0012f8b:	0f 20 d8             	mov    eax,cr3
c0012f8e:	0f 22 d8             	mov    cr3,eax
c0012f91:	8d 74 24 20          	lea    esi,[esp+0x20]
c0012f95:	89 df                	mov    edi,ebx
c0012f97:	89 e9                	mov    ecx,ebp
c0012f99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f9b:	b0 01                	mov    al,0x1
c0012f9d:	83 c4 10             	add    esp,0x10
c0012fa0:	e9 91 fe ff ff       	jmp    c0012e36 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0012fa5:	90                   	nop

c0012fa6 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0012fa6:	55                   	push   ebp
c0012fa7:	57                   	push   edi
c0012fa8:	56                   	push   esi
c0012fa9:	53                   	push   ebx
c0012faa:	83 ec 28             	sub    esp,0x28
c0012fad:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0012fb1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012fb5:	50                   	push   eax
c0012fb6:	e8 e6 f0 ff ff       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c0012fbb:	83 c4 0c             	add    esp,0xc
c0012fbe:	89 c5                	mov    ebp,eax
c0012fc0:	6a 07                	push   0x7
c0012fc2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012fc6:	52                   	push   edx
c0012fc7:	56                   	push   esi
c0012fc8:	e8 db f8 ff ff       	call   c00128a8 <VAS::allocatePages(int, int)>
c0012fcd:	83 c4 10             	add    esp,0x10
c0012fd0:	89 c7                	mov    edi,eax
c0012fd2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012fd6:	85 c9                	test   ecx,ecx
c0012fd8:	74 2f                	je     c0013009 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0012fda:	31 db                	xor    ebx,ebx
c0012fdc:	e8 f9 be ff ff       	call   c000eeda <Phys::allocatePage()>
c0012fe1:	83 c3 01             	add    ebx,0x1
c0012fe4:	6a 03                	push   0x3
c0012fe6:	55                   	push   ebp
c0012fe7:	50                   	push   eax
c0012fe8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012fec:	56                   	push   esi
c0012fed:	e8 98 f7 ff ff       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012ff2:	6a 07                	push   0x7
c0012ff4:	57                   	push   edi
c0012ff5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ff9:	50                   	push   eax
c0012ffa:	56                   	push   esi
c0012ffb:	e8 8a f7 ff ff       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013000:	83 c4 20             	add    esp,0x20
c0013003:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0013007:	75 d3                	jne    c0012fdc <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0013009:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001300d:	89 28                	mov    DWORD PTR [eax],ebp
c001300f:	83 c4 1c             	add    esp,0x1c
c0013012:	89 f8                	mov    eax,edi
c0013014:	5b                   	pop    ebx
c0013015:	5e                   	pop    esi
c0013016:	5f                   	pop    edi
c0013017:	5d                   	pop    ebp
c0013018:	c3                   	ret    
c0013019:	90                   	nop

c001301a <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c001301a:	53                   	push   ebx
c001301b:	83 ec 14             	sub    esp,0x14
c001301e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013022:	68 6c 26 02 c0       	push   0xc002266c
c0013027:	e8 38 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001302c:	c7 04 24 cc 26 02 c0 	mov    DWORD PTR [esp],0xc00226cc
c0013033:	e8 2c 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013038:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001303c:	83 c4 18             	add    esp,0x18
c001303f:	5b                   	pop    ebx
c0013040:	e9 64 f3 ff ff       	jmp    c00123a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0013045:	90                   	nop

c0013046 <VAS::scanForEviction()>:
c0013046:	57                   	push   edi
c0013047:	56                   	push   esi
c0013048:	31 f6                	xor    esi,esi
c001304a:	53                   	push   ebx
c001304b:	83 ec 10             	sub    esp,0x10
c001304e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013052:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013055:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001305b:	75 0e                	jne    c001306b <VAS::scanForEviction()+0x25>
c001305d:	89 da                	mov    edx,ebx
c001305f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013062:	c1 ea 16             	shr    edx,0x16
c0013065:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013069:	74 57                	je     c00130c2 <VAS::scanForEviction()+0x7c>
c001306b:	53                   	push   ebx
c001306c:	57                   	push   edi
c001306d:	e8 18 f3 ff ff       	call   c001238a <VAS::getPageTableEntry(unsigned long)>
c0013072:	5a                   	pop    edx
c0013073:	8b 10                	mov    edx,DWORD PTR [eax]
c0013075:	59                   	pop    ecx
c0013076:	89 d1                	mov    ecx,edx
c0013078:	c1 e9 0c             	shr    ecx,0xc
c001307b:	74 10                	je     c001308d <VAS::scanForEviction()+0x47>
c001307d:	89 d1                	mov    ecx,edx
c001307f:	81 e1 01 08 00 00    	and    ecx,0x801
c0013085:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001308b:	74 40                	je     c00130cd <VAS::scanForEviction()+0x87>
c001308d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013093:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0013099:	76 2d                	jbe    c00130c8 <VAS::scanForEviction()+0x82>
c001309b:	83 c6 01             	add    esi,0x1
c001309e:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c00130a5:	83 fe 03             	cmp    esi,0x3
c00130a8:	74 32                	je     c00130dc <VAS::scanForEviction()+0x96>
c00130aa:	31 db                	xor    ebx,ebx
c00130ac:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00130b2:	75 b7                	jne    c001306b <VAS::scanForEviction()+0x25>
c00130b4:	89 da                	mov    edx,ebx
c00130b6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00130b9:	c1 ea 16             	shr    edx,0x16
c00130bc:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00130c0:	75 a9                	jne    c001306b <VAS::scanForEviction()+0x25>
c00130c2:	81 c3 00 00 40 00    	add    ebx,0x400000
c00130c8:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c00130cb:	eb 88                	jmp    c0013055 <VAS::scanForEviction()+0xf>
c00130cd:	f6 c2 20             	test   dl,0x20
c00130d0:	74 13                	je     c00130e5 <VAS::scanForEviction()+0x9f>
c00130d2:	83 e2 df             	and    edx,0xffffffdf
c00130d5:	89 10                	mov    DWORD PTR [eax],edx
c00130d7:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00130da:	eb b1                	jmp    c001308d <VAS::scanForEviction()+0x47>
c00130dc:	83 c4 10             	add    esp,0x10
c00130df:	31 c0                	xor    eax,eax
c00130e1:	5b                   	pop    ebx
c00130e2:	5e                   	pop    esi
c00130e3:	5f                   	pop    edi
c00130e4:	c3                   	ret    
c00130e5:	83 ec 08             	sub    esp,0x8
c00130e8:	89 d0                	mov    eax,edx
c00130ea:	25 00 f0 ff ff       	and    eax,0xfffff000
c00130ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00130f3:	53                   	push   ebx
c00130f4:	68 21 28 02 c0       	push   0xc0022821
c00130f9:	e8 66 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00130fe:	58                   	pop    eax
c00130ff:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013102:	5a                   	pop    edx
c0013103:	51                   	push   ecx
c0013104:	57                   	push   edi
c0013105:	e8 16 fc ff ff       	call   c0012d20 <VAS::evict(unsigned long)>
c001310a:	5b                   	pop    ebx
c001310b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001310e:	5e                   	pop    esi
c001310f:	50                   	push   eax
c0013110:	68 35 28 02 c0       	push   0xc0022835
c0013115:	e8 4a 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001311a:	58                   	pop    eax
c001311b:	5a                   	pop    edx
c001311c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013120:	50                   	push   eax
c0013121:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013125:	68 48 28 02 c0       	push   0xc0022848
c001312a:	e8 35 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001312f:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013132:	83 c4 10             	add    esp,0x10
c0013135:	81 c1 00 10 00 00    	add    ecx,0x1000
c001313b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001313f:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0013142:	83 c4 10             	add    esp,0x10
c0013145:	5b                   	pop    ebx
c0013146:	5e                   	pop    esi
c0013147:	5f                   	pop    edi
c0013148:	c3                   	ret    

c0013149 <mapVASFirstTime>:
c0013149:	55                   	push   ebp
c001314a:	57                   	push   edi
c001314b:	56                   	push   esi
c001314c:	53                   	push   ebx
c001314d:	83 ec 0c             	sub    esp,0xc
c0013150:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013155:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0013158:	83 fa 01             	cmp    edx,0x1
c001315b:	0f 84 cb 00 00 00    	je     c001322c <mapVASFirstTime+0xe3>
c0013161:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013164:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0013167:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001316c:	c1 e5 15             	shl    ebp,0x15
c001316f:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0013174:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c001317a:	29 eb                	sub    ebx,ebp
c001317c:	29 ef                	sub    edi,ebp
c001317e:	e8 57 bd ff ff       	call   c000eeda <Phys::allocatePage()>
c0013183:	83 ec 0c             	sub    esp,0xc
c0013186:	68 03 04 00 00       	push   0x403
c001318b:	6a 01                	push   0x1
c001318d:	53                   	push   ebx
c001318e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013194:	50                   	push   eax
c0013195:	56                   	push   esi
c0013196:	e8 f3 f7 ff ff       	call   c001298e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001319b:	83 c4 20             	add    esp,0x20
c001319e:	39 fb                	cmp    ebx,edi
c00131a0:	75 dc                	jne    c001317e <mapVASFirstTime+0x35>
c00131a2:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00131a7:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00131ac:	29 eb                	sub    ebx,ebp
c00131ae:	29 ef                	sub    edi,ebp
c00131b0:	e8 25 bd ff ff       	call   c000eeda <Phys::allocatePage()>
c00131b5:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c00131b9:	83 fa 01             	cmp    edx,0x1
c00131bc:	19 d2                	sbb    edx,edx
c00131be:	83 ec 0c             	sub    esp,0xc
c00131c1:	83 e2 04             	and    edx,0x4
c00131c4:	81 c2 03 04 00 00    	add    edx,0x403
c00131ca:	52                   	push   edx
c00131cb:	6a 01                	push   0x1
c00131cd:	53                   	push   ebx
c00131ce:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00131d4:	50                   	push   eax
c00131d5:	56                   	push   esi
c00131d6:	e8 b3 f7 ff ff       	call   c001298e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00131db:	83 c4 20             	add    esp,0x20
c00131de:	39 df                	cmp    edi,ebx
c00131e0:	75 ce                	jne    c00131b0 <mapVASFirstTime+0x67>
c00131e2:	83 ec 0c             	sub    esp,0xc
c00131e5:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c00131ea:	6a 04                	push   0x4
c00131ec:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c00131f2:	6a ff                	push   0xffffffff
c00131f4:	c1 eb 0c             	shr    ebx,0xc
c00131f7:	53                   	push   ebx
c00131f8:	68 00 50 02 c0       	push   0xc0025000
c00131fd:	56                   	push   esi
c00131fe:	e8 21 f3 ff ff       	call   c0012524 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013203:	83 c4 14             	add    esp,0x14
c0013206:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001320b:	6a 04                	push   0x4
c001320d:	6a ff                	push   0xffffffff
c001320f:	53                   	push   ebx
c0013210:	68 00 50 02 c0       	push   0xc0025000
c0013215:	50                   	push   eax
c0013216:	e8 09 f3 ff ff       	call   c0012524 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001321b:	0f 20 d8             	mov    eax,cr3
c001321e:	0f 22 d8             	mov    cr3,eax
c0013221:	83 c4 20             	add    esp,0x20
c0013224:	83 c4 0c             	add    esp,0xc
c0013227:	5b                   	pop    ebx
c0013228:	5e                   	pop    esi
c0013229:	5f                   	pop    edi
c001322a:	5d                   	pop    ebp
c001322b:	c3                   	ret    
c001322c:	83 ec 0c             	sub    esp,0xc
c001322f:	68 55 28 02 c0       	push   0xc0022855
c0013234:	e8 2b 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013239:	83 c4 10             	add    esp,0x10
c001323c:	83 c4 0c             	add    esp,0xc
c001323f:	5b                   	pop    ebx
c0013240:	5e                   	pop    esi
c0013241:	5f                   	pop    edi
c0013242:	5d                   	pop    ebp
c0013243:	c3                   	ret    

c0013244 <SysEject(regs*)>:
c0013244:	83 ec 0c             	sub    esp,0xc
c0013247:	83 ca ff             	or     edx,0xffffffff
c001324a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001324e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013251:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013256:	83 e9 41             	sub    ecx,0x41
c0013259:	83 f9 19             	cmp    ecx,0x19
c001325c:	77 18                	ja     c0013276 <SysEject(regs*)+0x32>
c001325e:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0013265:	85 c9                	test   ecx,ecx
c0013267:	74 0d                	je     c0013276 <SysEject(regs*)+0x32>
c0013269:	83 ec 0c             	sub    esp,0xc
c001326c:	51                   	push   ecx
c001326d:	e8 00 6e ff ff       	call   c000a072 <LogicalDisk::eject()>
c0013272:	83 c4 10             	add    esp,0x10
c0013275:	99                   	cdq    
c0013276:	83 c4 0c             	add    esp,0xc
c0013279:	c3                   	ret    

c001327a <SysExit(regs*)>:
c001327a:	83 ec 18             	sub    esp,0x18
c001327d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013281:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013284:	e8 5f 2a 00 00       	call   c0015ce8 <terminateTask(int)>
c0013289:	83 c8 ff             	or     eax,0xffffffff
c001328c:	83 c4 1c             	add    esp,0x1c
c001328f:	89 c2                	mov    edx,eax
c0013291:	c3                   	ret    

c0013292 <SysGetCwd(regs*)>:
c0013292:	83 ec 10             	sub    esp,0x10
c0013295:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013299:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001329c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001329f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132a4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00132a7:	e8 1a 4b ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c00132ac:	83 c4 1c             	add    esp,0x1c
c00132af:	99                   	cdq    
c00132b0:	c3                   	ret    

c00132b1 <SysGetPID(regs*)>:
c00132b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00132bb:	99                   	cdq    
c00132bc:	c3                   	ret    

c00132bd <SysGetRAMData(regs*)>:
c00132bd:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c00132c3:	69 05 a8 bd 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002bda8,0xc8
c00132cd:	99                   	cdq    
c00132ce:	f7 f9                	idiv   ecx
c00132d0:	c1 e0 18             	shl    eax,0x18
c00132d3:	09 c8                	or     eax,ecx
c00132d5:	99                   	cdq    
c00132d6:	c3                   	ret    

c00132d7 <SysGetVGAPtr(regs*)>:
c00132d7:	55                   	push   ebp
c00132d8:	57                   	push   edi
c00132d9:	56                   	push   esi
c00132da:	53                   	push   ebx
c00132db:	83 ec 18             	sub    esp,0x18
c00132de:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00132e2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00132e5:	e8 ca 24 00 00       	call   c00157b4 <Thr::processFromPID(int)>
c00132ea:	83 c4 10             	add    esp,0x10
c00132ed:	89 c1                	mov    ecx,eax
c00132ef:	b8 01 00 00 00       	mov    eax,0x1
c00132f4:	85 c9                	test   ecx,ecx
c00132f6:	74 57                	je     c001334f <SysGetVGAPtr(regs*)+0x78>
c00132f8:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00132fe:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013302:	74 0c                	je     c0013310 <SysGetVGAPtr(regs*)+0x39>
c0013304:	83 ec 0c             	sub    esp,0xc
c0013307:	55                   	push   ebp
c0013308:	e8 1c de ff ff       	call   c0011129 <setActiveTerminal(VgaText*)>
c001330d:	83 c4 10             	add    esp,0x10
c0013310:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013313:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013316:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001331b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001331d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013320:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013323:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013329:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001332c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001332f:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013335:	50                   	push   eax
c0013336:	50                   	push   eax
c0013337:	68 6e 28 02 c0       	push   0xc002286e
c001333c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001333f:	05 a8 0f 00 00       	add    eax,0xfa8
c0013344:	50                   	push   eax
c0013345:	e8 f6 d2 fe ff       	call   c0000640 <strcpy>
c001334a:	83 c4 10             	add    esp,0x10
c001334d:	31 c0                	xor    eax,eax
c001334f:	83 c4 0c             	add    esp,0xc
c0013352:	31 d2                	xor    edx,edx
c0013354:	5b                   	pop    ebx
c0013355:	5e                   	pop    esi
c0013356:	5f                   	pop    edi
c0013357:	5d                   	pop    ebp
c0013358:	c3                   	ret    
c0013359:	66 90                	xchg   ax,ax
c001335b:	90                   	nop

c001335c <SysKill(regs*)>:
c001335c:	53                   	push   ebx
c001335d:	83 ec 08             	sub    esp,0x8
c0013360:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013364:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013368:	75 16                	jne    c0013380 <SysKill(regs*)+0x24>
c001336a:	83 ec 0c             	sub    esp,0xc
c001336d:	68 78 28 02 c0       	push   0xc0022878
c0013372:	e8 6f b9 ff ff       	call   c000ece6 <KePanic(char const*)>
c0013377:	83 c4 10             	add    esp,0x10
c001337a:	e9 89 00 00 00       	jmp    c0013408 <SysKill(regs*)+0xac>
c001337f:	90                   	nop
c0013380:	83 ec 0c             	sub    esp,0xc
c0013383:	68 cc c6 02 c0       	push   0xc002c6cc
c0013388:	e8 6b cb 00 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001338d:	8d 76 00             	lea    esi,[esi+0x0]
c0013390:	83 c4 10             	add    esp,0x10
c0013393:	85 c0                	test   eax,eax
c0013395:	74 19                	je     c00133b0 <SysKill(regs*)+0x54>
c0013397:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001339a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001339d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001339f:	74 33                	je     c00133d4 <SysKill(regs*)+0x78>
c00133a1:	52                   	push   edx
c00133a2:	52                   	push   edx
c00133a3:	50                   	push   eax
c00133a4:	68 cc c6 02 c0       	push   0xc002c6cc
c00133a9:	e8 56 d0 00 00       	call   c0020404 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00133ae:	eb e0                	jmp    c0013390 <SysKill(regs*)+0x34>
c00133b0:	83 ec 0c             	sub    esp,0xc
c00133b3:	68 c0 c6 02 c0       	push   0xc002c6c0
c00133b8:	e8 3b cb 00 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00133bd:	8d 76 00             	lea    esi,[esi+0x0]
c00133c0:	83 c4 10             	add    esp,0x10
c00133c3:	85 c0                	test   eax,eax
c00133c5:	74 41                	je     c0013408 <SysKill(regs*)+0xac>
c00133c7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00133ca:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00133cd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00133cf:	75 27                	jne    c00133f8 <SysKill(regs*)+0x9c>
c00133d1:	8d 76 00             	lea    esi,[esi+0x0]
c00133d4:	51                   	push   ecx
c00133d5:	51                   	push   ecx
c00133d6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133e1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00133e7:	e8 2f ca ff ff       	call   c000fe1b <KeRaiseSignal(SigHandlerBlock*, int)>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	31 c0                	xor    eax,eax
c00133f1:	31 d2                	xor    edx,edx
c00133f3:	eb 1b                	jmp    c0013410 <SysKill(regs*)+0xb4>
c00133f5:	8d 76 00             	lea    esi,[esi+0x0]
c00133f8:	52                   	push   edx
c00133f9:	52                   	push   edx
c00133fa:	50                   	push   eax
c00133fb:	68 c0 c6 02 c0       	push   0xc002c6c0
c0013400:	e8 ff cf 00 00       	call   c0020404 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013405:	eb b9                	jmp    c00133c0 <SysKill(regs*)+0x64>
c0013407:	90                   	nop
c0013408:	83 c8 ff             	or     eax,0xffffffff
c001340b:	89 c2                	mov    edx,eax
c001340d:	8d 76 00             	lea    esi,[esi+0x0]
c0013410:	83 c4 08             	add    esp,0x8
c0013413:	5b                   	pop    ebx
c0013414:	c3                   	ret    

c0013415 <SysLoadDLL(regs*)>:
c0013415:	56                   	push   esi
c0013416:	53                   	push   ebx
c0013417:	31 d2                	xor    edx,edx
c0013419:	51                   	push   ecx
c001341a:	b8 01 00 00 00       	mov    eax,0x1
c001341f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013423:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013427:	0f 84 8c 00 00 00    	je     c00134b9 <SysLoadDLL(regs*)+0xa4>
c001342d:	83 ec 0c             	sub    esp,0xc
c0013430:	68 14 01 00 00       	push   0x114
c0013435:	e8 57 b5 ff ff       	call   c000e991 <malloc>
c001343a:	83 c4 0c             	add    esp,0xc
c001343d:	89 c3                	mov    ebx,eax
c001343f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013444:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013447:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001344a:	53                   	push   ebx
c001344b:	e8 c2 4c ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013450:	83 c4 10             	add    esp,0x10
c0013453:	31 d2                	xor    edx,edx
c0013455:	b8 02 00 00 00       	mov    eax,0x2
c001345a:	85 db                	test   ebx,ebx
c001345c:	74 5b                	je     c00134b9 <SysLoadDLL(regs*)+0xa4>
c001345e:	83 ec 0c             	sub    esp,0xc
c0013461:	53                   	push   ebx
c0013462:	e8 8d 4f ff ff       	call   c00083f4 <File::exists()>
c0013467:	83 c4 10             	add    esp,0x10
c001346a:	84 c0                	test   al,al
c001346c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001346e:	75 11                	jne    c0013481 <SysLoadDLL(regs*)+0x6c>
c0013470:	83 ec 0c             	sub    esp,0xc
c0013473:	53                   	push   ebx
c0013474:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013477:	83 c4 10             	add    esp,0x10
c001347a:	b8 03 00 00 00       	mov    eax,0x3
c001347f:	eb 36                	jmp    c00134b7 <SysLoadDLL(regs*)+0xa2>
c0013481:	83 ec 0c             	sub    esp,0xc
c0013484:	53                   	push   ebx
c0013485:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013488:	58                   	pop    eax
c0013489:	5a                   	pop    edx
c001348a:	6a 00                	push   0x0
c001348c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001348f:	e8 e1 15 00 00       	call   c0014a75 <Thr::loadDLL(char const*, bool)>
c0013494:	83 c4 10             	add    esp,0x10
c0013497:	89 c1                	mov    ecx,eax
c0013499:	31 d2                	xor    edx,edx
c001349b:	b8 04 00 00 00       	mov    eax,0x4
c00134a0:	85 c9                	test   ecx,ecx
c00134a2:	74 15                	je     c00134b9 <SysLoadDLL(regs*)+0xa4>
c00134a4:	53                   	push   ebx
c00134a5:	53                   	push   ebx
c00134a6:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c00134ac:	51                   	push   ecx
c00134ad:	e8 15 18 00 00       	call   c0014cc7 <Thr::executeDLL(unsigned long, void*)>
c00134b2:	83 c4 10             	add    esp,0x10
c00134b5:	31 c0                	xor    eax,eax
c00134b7:	31 d2                	xor    edx,edx
c00134b9:	59                   	pop    ecx
c00134ba:	5b                   	pop    ebx
c00134bb:	5e                   	pop    esi
c00134bc:	c3                   	ret    

c00134bd <SysRead(regs*)>:
c00134bd:	57                   	push   edi
c00134be:	56                   	push   esi
c00134bf:	53                   	push   ebx
c00134c0:	83 ec 10             	sub    esp,0x10
c00134c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00134c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00134ca:	83 f8 02             	cmp    eax,0x2
c00134cd:	77 10                	ja     c00134df <SysRead(regs*)+0x22>
c00134cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00134d7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00134dd:	eb 0e                	jmp    c00134ed <SysRead(regs*)+0x30>
c00134df:	83 ec 0c             	sub    esp,0xc
c00134e2:	50                   	push   eax
c00134e3:	e8 5f ea ff ff       	call   c0011f47 <KeGetFileFromDescriptor(int)>
c00134e8:	83 c4 10             	add    esp,0x10
c00134eb:	89 c1                	mov    ecx,eax
c00134ed:	83 c8 ff             	or     eax,0xffffffff
c00134f0:	85 c9                	test   ecx,ecx
c00134f2:	89 c2                	mov    edx,eax
c00134f4:	74 28                	je     c001351e <SysRead(regs*)+0x61>
c00134f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00134fe:	31 ff                	xor    edi,edi
c0013500:	83 ec 0c             	sub    esp,0xc
c0013503:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013505:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013509:	52                   	push   edx
c001350a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001350d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013510:	57                   	push   edi
c0013511:	56                   	push   esi
c0013512:	51                   	push   ecx
c0013513:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013516:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001351a:	83 c4 20             	add    esp,0x20
c001351d:	99                   	cdq    
c001351e:	83 c4 10             	add    esp,0x10
c0013521:	5b                   	pop    ebx
c0013522:	5e                   	pop    esi
c0013523:	5f                   	pop    edi
c0013524:	c3                   	ret    

c0013525 <SysRegisterSignal(regs*)>:
c0013525:	83 ec 18             	sub    esp,0x18
c0013528:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001352c:	6a 00                	push   0x0
c001352e:	6a 00                	push   0x0
c0013530:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013533:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013536:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001353b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001353e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013544:	e8 9c c8 ff ff       	call   c000fde5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013549:	83 c4 2c             	add    esp,0x2c
c001354c:	99                   	cdq    
c001354d:	c3                   	ret    

c001354e <SysRegistryGetTypeFromPath(regs*)>:
c001354e:	53                   	push   ebx
c001354f:	81 ec 40 01 00 00    	sub    esp,0x140
c0013555:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001355c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001355f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013562:	e8 f9 9d ff ff       	call   c000d360 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013567:	83 c4 10             	add    esp,0x10
c001356a:	89 c1                	mov    ecx,eax
c001356c:	85 c0                	test   eax,eax
c001356e:	74 15                	je     c0013585 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0013570:	50                   	push   eax
c0013571:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013575:	50                   	push   eax
c0013576:	51                   	push   ecx
c0013577:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001357a:	e8 c5 99 ff ff       	call   c000cf44 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001357f:	83 c4 10             	add    esp,0x10
c0013582:	99                   	cdq    
c0013583:	eb 05                	jmp    c001358a <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0013585:	83 c8 ff             	or     eax,0xffffffff
c0013588:	89 c2                	mov    edx,eax
c001358a:	81 c4 38 01 00 00    	add    esp,0x138
c0013590:	5b                   	pop    ebx
c0013591:	c3                   	ret    

c0013592 <SysRegistryReadExtent(regs*)>:
c0013592:	83 ec 1c             	sub    esp,0x1c
c0013595:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013599:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001359c:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001359f:	85 c0                	test   eax,eax
c00135a1:	79 1f                	jns    c00135c2 <SysRegistryReadExtent(regs*)+0x30>
c00135a3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00135a8:	52                   	push   edx
c00135a9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00135ad:	52                   	push   edx
c00135ae:	50                   	push   eax
c00135af:	51                   	push   ecx
c00135b0:	e8 81 98 ff ff       	call   c000ce36 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00135b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00135bd:	83 c4 10             	add    esp,0x10
c00135c0:	eb 14                	jmp    c00135d6 <SysRegistryReadExtent(regs*)+0x44>
c00135c2:	83 ec 04             	sub    esp,0x4
c00135c5:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00135c8:	50                   	push   eax
c00135c9:	51                   	push   ecx
c00135ca:	e8 01 93 ff ff       	call   c000c8d0 <CmGetString(Reghive_Tag*, int, char*)>
c00135cf:	83 c4 10             	add    esp,0x10
c00135d2:	31 c0                	xor    eax,eax
c00135d4:	31 d2                	xor    edx,edx
c00135d6:	83 c4 1c             	add    esp,0x1c
c00135d9:	c3                   	ret    

c00135da <SysRegistryPathToExtentLookup(regs*)>:
c00135da:	83 ec 14             	sub    esp,0x14
c00135dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135e1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00135e4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135e7:	e8 74 9d ff ff       	call   c000d360 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00135ec:	83 c4 1c             	add    esp,0x1c
c00135ef:	99                   	cdq    
c00135f0:	c3                   	ret    

c00135f1 <SysRegistryEnterDirectory(regs*)>:
c00135f1:	83 ec 14             	sub    esp,0x14
c00135f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135f8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00135fb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135fe:	e8 44 93 ff ff       	call   c000c947 <CmEnterDirectory(Reghive_Tag*, int)>
c0013603:	83 c4 1c             	add    esp,0x1c
c0013606:	99                   	cdq    
c0013607:	c3                   	ret    

c0013608 <SysRegistryGetNext(regs*)>:
c0013608:	83 ec 14             	sub    esp,0x14
c001360b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001360f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013612:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013615:	e8 6c 93 ff ff       	call   c000c986 <CmGetNext(Reghive_Tag*, int)>
c001361a:	83 c4 1c             	add    esp,0x1c
c001361d:	99                   	cdq    
c001361e:	c3                   	ret    

c001361f <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001361f:	57                   	push   edi
c0013620:	56                   	push   esi
c0013621:	53                   	push   ebx
c0013622:	81 ec 34 01 00 00    	sub    esp,0x134
c0013628:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001362f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013633:	57                   	push   edi
c0013634:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013637:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001363a:	e8 05 99 ff ff       	call   c000cf44 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001363f:	89 c3                	mov    ebx,eax
c0013641:	58                   	pop    eax
c0013642:	5a                   	pop    edx
c0013643:	57                   	push   edi
c0013644:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013647:	e8 f4 cf fe ff       	call   c0000640 <strcpy>
c001364c:	89 d8                	mov    eax,ebx
c001364e:	81 c4 40 01 00 00    	add    esp,0x140
c0013654:	99                   	cdq    
c0013655:	5b                   	pop    ebx
c0013656:	5e                   	pop    esi
c0013657:	5f                   	pop    edi
c0013658:	c3                   	ret    

c0013659 <SysRegistryOpen(regs*)>:
c0013659:	83 ec 18             	sub    esp,0x18
c001365c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013660:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013663:	e8 f8 90 ff ff       	call   c000c760 <CmOpen(char const*)>
c0013668:	83 c4 1c             	add    esp,0x1c
c001366b:	99                   	cdq    
c001366c:	c3                   	ret    

c001366d <SysRegistryClose(regs*)>:
c001366d:	83 ec 18             	sub    esp,0x18
c0013670:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013674:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013677:	e8 02 92 ff ff       	call   c000c87e <CmClose(Reghive_Tag*)>
c001367c:	31 c0                	xor    eax,eax
c001367e:	31 d2                	xor    edx,edx
c0013680:	83 c4 1c             	add    esp,0x1c
c0013683:	c3                   	ret    

c0013684 <SysRegistryEasyReadString(regs*)>:
c0013684:	57                   	push   edi
c0013685:	56                   	push   esi
c0013686:	53                   	push   ebx
c0013687:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001368b:	83 ec 0c             	sub    esp,0xc
c001368e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013691:	e8 ca 90 ff ff       	call   c000c760 <CmOpen(char const*)>
c0013696:	5a                   	pop    edx
c0013697:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001369a:	59                   	pop    ecx
c001369b:	89 c3                	mov    ebx,eax
c001369d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00136a0:	50                   	push   eax
c00136a1:	e8 ba 9c ff ff       	call   c000d360 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00136a6:	83 c4 10             	add    esp,0x10
c00136a9:	89 c1                	mov    ecx,eax
c00136ab:	b8 01 00 00 00       	mov    eax,0x1
c00136b0:	85 c9                	test   ecx,ecx
c00136b2:	7e 16                	jle    c00136ca <SysRegistryEasyReadString(regs*)+0x46>
c00136b4:	50                   	push   eax
c00136b5:	57                   	push   edi
c00136b6:	51                   	push   ecx
c00136b7:	53                   	push   ebx
c00136b8:	e8 13 92 ff ff       	call   c000c8d0 <CmGetString(Reghive_Tag*, int, char*)>
c00136bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136c0:	e8 b9 91 ff ff       	call   c000c87e <CmClose(Reghive_Tag*)>
c00136c5:	83 c4 10             	add    esp,0x10
c00136c8:	31 c0                	xor    eax,eax
c00136ca:	5b                   	pop    ebx
c00136cb:	31 d2                	xor    edx,edx
c00136cd:	5e                   	pop    esi
c00136ce:	5f                   	pop    edi
c00136cf:	c3                   	ret    

c00136d0 <SysRegistryEasyReadInteger(regs*)>:
c00136d0:	56                   	push   esi
c00136d1:	53                   	push   ebx
c00136d2:	83 ec 10             	sub    esp,0x10
c00136d5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00136d9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00136dc:	e8 7f 90 ff ff       	call   c000c760 <CmOpen(char const*)>
c00136e1:	5a                   	pop    edx
c00136e2:	89 c3                	mov    ebx,eax
c00136e4:	59                   	pop    ecx
c00136e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00136e8:	50                   	push   eax
c00136e9:	e8 72 9c ff ff       	call   c000d360 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00136ee:	83 c4 10             	add    esp,0x10
c00136f1:	89 c1                	mov    ecx,eax
c00136f3:	b8 01 00 00 00       	mov    eax,0x1
c00136f8:	85 c9                	test   ecx,ecx
c00136fa:	7e 18                	jle    c0013714 <SysRegistryEasyReadInteger(regs*)+0x44>
c00136fc:	50                   	push   eax
c00136fd:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013700:	51                   	push   ecx
c0013701:	53                   	push   ebx
c0013702:	e8 2f 97 ff ff       	call   c000ce36 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013707:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001370a:	e8 6f 91 ff ff       	call   c000c87e <CmClose(Reghive_Tag*)>
c001370f:	83 c4 10             	add    esp,0x10
c0013712:	31 c0                	xor    eax,eax
c0013714:	59                   	pop    ecx
c0013715:	31 d2                	xor    edx,edx
c0013717:	5b                   	pop    ebx
c0013718:	5e                   	pop    esi
c0013719:	c3                   	ret    

c001371a <SysSbrk(regs*)>:
c001371a:	56                   	push   esi
c001371b:	53                   	push   ebx
c001371c:	50                   	push   eax
c001371d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013722:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013726:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013729:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001372c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013732:	85 db                	test   ebx,ebx
c0013734:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013737:	74 02                	je     c001373b <SysSbrk(regs*)+0x21>
c0013739:	79 06                	jns    c0013741 <SysSbrk(regs*)+0x27>
c001373b:	89 f0                	mov    eax,esi
c001373d:	31 d2                	xor    edx,edx
c001373f:	eb 2a                	jmp    c001376b <SysSbrk(regs*)+0x51>
c0013741:	83 c8 ff             	or     eax,0xffffffff
c0013744:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001374a:	89 c2                	mov    edx,eax
c001374c:	77 1d                	ja     c001376b <SysSbrk(regs*)+0x51>
c001374e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013754:	50                   	push   eax
c0013755:	c1 ea 0c             	shr    edx,0xc
c0013758:	68 07 0c 00 00       	push   0xc07
c001375d:	52                   	push   edx
c001375e:	51                   	push   ecx
c001375f:	e8 44 f1 ff ff       	call   c00128a8 <VAS::allocatePages(int, int)>
c0013764:	89 f0                	mov    eax,esi
c0013766:	31 d2                	xor    edx,edx
c0013768:	83 c4 10             	add    esp,0x10
c001376b:	59                   	pop    ecx
c001376c:	5b                   	pop    ebx
c001376d:	5e                   	pop    esi
c001376e:	c3                   	ret    

c001376f <SysSetCwd(regs*)>:
c001376f:	83 ec 14             	sub    esp,0x14
c0013772:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013776:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013779:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001377e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013781:	e8 0d 4d ff ff       	call   c0008493 <Fs::setcwd(Process*, char*)>
c0013786:	83 c4 1c             	add    esp,0x1c
c0013789:	99                   	cdq    
c001378a:	c3                   	ret    

c001378b <SysSetTime(regs*)>:
c001378b:	55                   	push   ebp
c001378c:	31 c9                	xor    ecx,ecx
c001378e:	57                   	push   edi
c001378f:	bd 0c 00 00 00       	mov    ebp,0xc
c0013794:	56                   	push   esi
c0013795:	53                   	push   ebx
c0013796:	31 db                	xor    ebx,ebx
c0013798:	83 ec 10             	sub    esp,0x10
c001379b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001379f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00137a2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00137a5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00137a8:	89 c2                	mov    edx,eax
c00137aa:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00137b0:	83 e2 1f             	and    edx,0x1f
c00137b3:	c1 e7 10             	shl    edi,0x10
c00137b6:	42                   	inc    edx
c00137b7:	c1 e8 05             	shr    eax,0x5
c00137ba:	88 d1                	mov    cl,dl
c00137bc:	31 d2                	xor    edx,edx
c00137be:	f7 f5                	div    ebp
c00137c0:	89 dd                	mov    ebp,ebx
c00137c2:	88 d5                	mov    ch,dl
c00137c4:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00137ca:	0f b7 c1             	movzx  eax,cx
c00137cd:	31 d2                	xor    edx,edx
c00137cf:	09 f8                	or     eax,edi
c00137d1:	bf 3c 00 00 00       	mov    edi,0x3c
c00137d6:	89 c1                	mov    ecx,eax
c00137d8:	89 f0                	mov    eax,esi
c00137da:	f7 f7                	div    edi
c00137dc:	c1 e2 10             	shl    edx,0x10
c00137df:	09 d5                	or     ebp,edx
c00137e1:	31 d2                	xor    edx,edx
c00137e3:	89 eb                	mov    ebx,ebp
c00137e5:	f7 f7                	div    edi
c00137e7:	bf 10 0e 00 00       	mov    edi,0xe10
c00137ec:	88 d7                	mov    bh,dl
c00137ee:	89 f0                	mov    eax,esi
c00137f0:	31 d2                	xor    edx,edx
c00137f2:	f7 f7                	div    edi
c00137f4:	bf 18 00 00 00       	mov    edi,0x18
c00137f9:	31 d2                	xor    edx,edx
c00137fb:	f7 f7                	div    edi
c00137fd:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0013802:	88 d3                	mov    bl,dl
c0013804:	53                   	push   ebx
c0013805:	51                   	push   ecx
c0013806:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001380c:	e8 41 55 ff ff       	call   c0008d52 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013811:	83 c4 1c             	add    esp,0x1c
c0013814:	83 f0 01             	xor    eax,0x1
c0013817:	5b                   	pop    ebx
c0013818:	0f b6 c0             	movzx  eax,al
c001381b:	5e                   	pop    esi
c001381c:	31 d2                	xor    edx,edx
c001381e:	5f                   	pop    edi
c001381f:	5d                   	pop    ebp
c0013820:	c3                   	ret    

c0013821 <SysSymlink(regs*)>:
c0013821:	56                   	push   esi
c0013822:	83 c8 ff             	or     eax,0xffffffff
c0013825:	53                   	push   ebx
c0013826:	89 c2                	mov    edx,eax
c0013828:	81 ec 34 02 00 00    	sub    esp,0x234
c001382e:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0013835:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013839:	74 50                	je     c001388b <SysSymlink(regs*)+0x6a>
c001383b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001383e:	85 c9                	test   ecx,ecx
c0013840:	74 49                	je     c001388b <SysSymlink(regs*)+0x6a>
c0013842:	6a 01                	push   0x1
c0013844:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013849:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001384c:	05 0c 01 00 00       	add    eax,0x10c
c0013851:	50                   	push   eax
c0013852:	51                   	push   ecx
c0013853:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013857:	56                   	push   esi
c0013858:	e8 bd 45 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001385d:	6a 01                	push   0x1
c001385f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013864:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013867:	05 0c 01 00 00       	add    eax,0x10c
c001386c:	50                   	push   eax
c001386d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013870:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0013877:	53                   	push   ebx
c0013878:	e8 9d 45 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001387d:	83 c4 18             	add    esp,0x18
c0013880:	56                   	push   esi
c0013881:	53                   	push   ebx
c0013882:	e8 c1 41 ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c0013887:	83 c4 10             	add    esp,0x10
c001388a:	99                   	cdq    
c001388b:	81 c4 34 02 00 00    	add    esp,0x234
c0013891:	5b                   	pop    ebx
c0013892:	5e                   	pop    esi
c0013893:	c3                   	ret    

c0013894 <SysTimezone(regs*)>:
c0013894:	83 ec 0c             	sub    esp,0xc
c0013897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001389b:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001389f:	75 17                	jne    c00138b8 <SysTimezone(regs*)+0x24>
c00138a1:	83 ec 0c             	sub    esp,0xc
c00138a4:	68 99 28 02 c0       	push   0xc0022899
c00138a9:	e8 b6 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00138ae:	83 c8 ff             	or     eax,0xffffffff
c00138b1:	83 c4 10             	add    esp,0x10
c00138b4:	89 c2                	mov    edx,eax
c00138b6:	eb 17                	jmp    c00138cf <SysTimezone(regs*)+0x3b>
c00138b8:	83 ec 0c             	sub    esp,0xc
c00138bb:	68 ae 28 02 c0       	push   0xc00228ae
c00138c0:	e8 9f 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00138c5:	83 c4 10             	add    esp,0x10
c00138c8:	b8 01 00 00 00       	mov    eax,0x1
c00138cd:	31 d2                	xor    edx,edx
c00138cf:	83 c4 0c             	add    esp,0xc
c00138d2:	c3                   	ret    

c00138d3 <SysTruncate(regs*)>:
c00138d3:	55                   	push   ebp
c00138d4:	57                   	push   edi
c00138d5:	31 ff                	xor    edi,edi
c00138d7:	56                   	push   esi
c00138d8:	53                   	push   ebx
c00138d9:	83 ec 0c             	sub    esp,0xc
c00138dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138e0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00138e3:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00138e6:	89 ce                	mov    esi,ecx
c00138e8:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00138ec:	0f 84 9a 00 00 00    	je     c001398c <SysTruncate(regs*)+0xb9>
c00138f2:	83 ec 0c             	sub    esp,0xc
c00138f5:	68 14 01 00 00       	push   0x114
c00138fa:	e8 92 b0 ff ff       	call   c000e991 <malloc>
c00138ff:	83 c4 0c             	add    esp,0xc
c0013902:	89 c3                	mov    ebx,eax
c0013904:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013909:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001390c:	55                   	push   ebp
c001390d:	53                   	push   ebx
c001390e:	e8 ff 47 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013913:	83 c4 10             	add    esp,0x10
c0013916:	31 d2                	xor    edx,edx
c0013918:	b8 03 00 00 00       	mov    eax,0x3
c001391d:	85 db                	test   ebx,ebx
c001391f:	0f 84 a2 00 00 00    	je     c00139c7 <SysTruncate(regs*)+0xf4>
c0013925:	51                   	push   ecx
c0013926:	51                   	push   ecx
c0013927:	6a 02                	push   0x2
c0013929:	53                   	push   ebx
c001392a:	e8 01 48 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	85 c0                	test   eax,eax
c0013934:	74 13                	je     c0013949 <SysTruncate(regs*)+0x76>
c0013936:	83 ec 0c             	sub    esp,0xc
c0013939:	8b 03                	mov    eax,DWORD PTR [ebx]
c001393b:	53                   	push   ebx
c001393c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001393f:	83 c4 10             	add    esp,0x10
c0013942:	b8 04 00 00 00       	mov    eax,0x4
c0013947:	eb 7c                	jmp    c00139c5 <SysTruncate(regs*)+0xf2>
c0013949:	52                   	push   edx
c001394a:	57                   	push   edi
c001394b:	56                   	push   esi
c001394c:	53                   	push   ebx
c001394d:	e8 f2 48 ff ff       	call   c0008244 <File::truncate(unsigned long long)>
c0013952:	83 c4 10             	add    esp,0x10
c0013955:	85 c0                	test   eax,eax
c0013957:	74 1b                	je     c0013974 <SysTruncate(regs*)+0xa1>
c0013959:	83 ec 0c             	sub    esp,0xc
c001395c:	53                   	push   ebx
c001395d:	e8 2c 48 ff ff       	call   c000818e <File::close()>
c0013962:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013964:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013967:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001396a:	83 c4 10             	add    esp,0x10
c001396d:	b8 05 00 00 00       	mov    eax,0x5
c0013972:	eb 51                	jmp    c00139c5 <SysTruncate(regs*)+0xf2>
c0013974:	83 ec 0c             	sub    esp,0xc
c0013977:	53                   	push   ebx
c0013978:	e8 11 48 ff ff       	call   c000818e <File::close()>
c001397d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001397f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013982:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013985:	83 c4 10             	add    esp,0x10
c0013988:	31 c0                	xor    eax,eax
c001398a:	eb 39                	jmp    c00139c5 <SysTruncate(regs*)+0xf2>
c001398c:	31 d2                	xor    edx,edx
c001398e:	b8 01 00 00 00       	mov    eax,0x1
c0013993:	83 fd 02             	cmp    ebp,0x2
c0013996:	7e 2f                	jle    c00139c7 <SysTruncate(regs*)+0xf4>
c0013998:	83 ec 0c             	sub    esp,0xc
c001399b:	51                   	push   ecx
c001399c:	e8 a6 e5 ff ff       	call   c0011f47 <KeGetFileFromDescriptor(int)>
c00139a1:	83 c4 10             	add    esp,0x10
c00139a4:	89 c1                	mov    ecx,eax
c00139a6:	31 d2                	xor    edx,edx
c00139a8:	b8 02 00 00 00       	mov    eax,0x2
c00139ad:	85 c9                	test   ecx,ecx
c00139af:	74 16                	je     c00139c7 <SysTruncate(regs*)+0xf4>
c00139b1:	50                   	push   eax
c00139b2:	57                   	push   edi
c00139b3:	56                   	push   esi
c00139b4:	51                   	push   ecx
c00139b5:	e8 8a 48 ff ff       	call   c0008244 <File::truncate(unsigned long long)>
c00139ba:	83 c4 10             	add    esp,0x10
c00139bd:	85 c0                	test   eax,eax
c00139bf:	0f 95 c0             	setne  al
c00139c2:	0f b6 c0             	movzx  eax,al
c00139c5:	31 d2                	xor    edx,edx
c00139c7:	83 c4 0c             	add    esp,0xc
c00139ca:	5b                   	pop    ebx
c00139cb:	5e                   	pop    esi
c00139cc:	5f                   	pop    edi
c00139cd:	5d                   	pop    ebp
c00139ce:	c3                   	ret    

c00139cf <SysWrite(regs*)>:
c00139cf:	57                   	push   edi
c00139d0:	56                   	push   esi
c00139d1:	53                   	push   ebx
c00139d2:	83 ec 10             	sub    esp,0x10
c00139d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00139d9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139dc:	83 f8 02             	cmp    eax,0x2
c00139df:	77 10                	ja     c00139f1 <SysWrite(regs*)+0x22>
c00139e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139e9:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00139ef:	eb 0e                	jmp    c00139ff <SysWrite(regs*)+0x30>
c00139f1:	83 ec 0c             	sub    esp,0xc
c00139f4:	50                   	push   eax
c00139f5:	e8 4d e5 ff ff       	call   c0011f47 <KeGetFileFromDescriptor(int)>
c00139fa:	83 c4 10             	add    esp,0x10
c00139fd:	89 c1                	mov    ecx,eax
c00139ff:	83 c8 ff             	or     eax,0xffffffff
c0013a02:	85 c9                	test   ecx,ecx
c0013a04:	89 c2                	mov    edx,eax
c0013a06:	74 28                	je     c0013a30 <SysWrite(regs*)+0x61>
c0013a08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013a10:	31 ff                	xor    edi,edi
c0013a12:	83 ec 0c             	sub    esp,0xc
c0013a15:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a17:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a1b:	52                   	push   edx
c0013a1c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013a1f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013a22:	57                   	push   edi
c0013a23:	56                   	push   esi
c0013a24:	51                   	push   ecx
c0013a25:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013a28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013a2c:	83 c4 20             	add    esp,0x20
c0013a2f:	99                   	cdq    
c0013a30:	83 c4 10             	add    esp,0x10
c0013a33:	5b                   	pop    ebx
c0013a34:	5e                   	pop    esi
c0013a35:	5f                   	pop    edi
c0013a36:	c3                   	ret    

c0013a37 <SysWsbe(regs*)>:
c0013a37:	55                   	push   ebp
c0013a38:	57                   	push   edi
c0013a39:	56                   	push   esi
c0013a3a:	53                   	push   ebx
c0013a3b:	83 ec 3c             	sub    esp,0x3c
c0013a3e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013a42:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0013a49:	75 2d                	jne    c0013a78 <SysWsbe(regs*)+0x41>
c0013a4b:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0013a52:	75 24                	jne    c0013a78 <SysWsbe(regs*)+0x41>
c0013a54:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0013a5b:	75 1b                	jne    c0013a78 <SysWsbe(regs*)+0x41>
c0013a5d:	6a 01                	push   0x1
c0013a5f:	6a 00                	push   0x0
c0013a61:	68 6a 95 00 c0       	push   0xc000956a
c0013a66:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0013a6c:	e8 a7 18 00 00       	call   c0015318 <Process::createThread(void (*)(void*), void*, int)>
c0013a71:	83 c4 10             	add    esp,0x10
c0013a74:	31 c0                	xor    eax,eax
c0013a76:	eb 52                	jmp    c0013aca <SysWsbe(regs*)+0x93>
c0013a78:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013a7c:	be ed 28 02 c0       	mov    esi,0xc00228ed
c0013a81:	b9 0b 00 00 00       	mov    ecx,0xb
c0013a86:	fc                   	cld    
c0013a87:	83 ec 0c             	sub    esp,0xc
c0013a8a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a8c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013a90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a98:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013a9e:	8b 06                	mov    eax,DWORD PTR [esi]
c0013aa0:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0013aa3:	57                   	push   edi
c0013aa4:	e8 c7 ca fe ff       	call   c0000570 <strlen>
c0013aa9:	5a                   	pop    edx
c0013aaa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013aae:	52                   	push   edx
c0013aaf:	31 d2                	xor    edx,edx
c0013ab1:	57                   	push   edi
c0013ab2:	52                   	push   edx
c0013ab3:	50                   	push   eax
c0013ab4:	56                   	push   esi
c0013ab5:	ff d5                	call   ebp
c0013ab7:	83 c4 14             	add    esp,0x14
c0013aba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013abd:	e8 26 22 00 00       	call   c0015ce8 <terminateTask(int)>
c0013ac2:	83 c4 10             	add    esp,0x10
c0013ac5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013aca:	83 c4 3c             	add    esp,0x3c
c0013acd:	31 d2                	xor    edx,edx
c0013acf:	5b                   	pop    ebx
c0013ad0:	5e                   	pop    esi
c0013ad1:	5f                   	pop    edi
c0013ad2:	5d                   	pop    ebp
c0013ad3:	c3                   	ret    

c0013ad4 <SysYield(regs*)>:
c0013ad4:	83 ec 0c             	sub    esp,0xc
c0013ad7:	fa                   	cli    
c0013ad8:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013ade:	e8 85 1a 00 00       	call   c0015568 <schedule()>
c0013ae3:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0013ae8:	48                   	dec    eax
c0013ae9:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0013aee:	75 01                	jne    c0013af1 <SysYield(regs*)+0x1d>
c0013af0:	fb                   	sti    
c0013af1:	31 c0                	xor    eax,eax
c0013af3:	31 d2                	xor    edx,edx
c0013af5:	83 c4 0c             	add    esp,0xc
c0013af8:	c3                   	ret    

c0013af9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013af9:	55                   	push   ebp
c0013afa:	57                   	push   edi
c0013afb:	56                   	push   esi
c0013afc:	53                   	push   ebx
c0013afd:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013b03:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013b0b:	0f 95 c0             	setne  al
c0013b0e:	31 d2                	xor    edx,edx
c0013b10:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013b18:	0f 94 c2             	sete   dl
c0013b1b:	85 c2                	test   edx,eax
c0013b1d:	74 34                	je     c0013b53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013b1f:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013b2a:	74 27                	je     c0013b53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013b2c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013b33:	05 00 10 00 00       	add    eax,0x1000
c0013b38:	89 c1                	mov    ecx,eax
c0013b3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b3f:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013b45:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013b4c:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013b53:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013b5a:	83 ec 0c             	sub    esp,0xc
c0013b5d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013b63:	6a 01                	push   0x1
c0013b65:	e8 37 e5 ff ff       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c0013b6a:	83 c4 10             	add    esp,0x10
c0013b6d:	89 c3                	mov    ebx,eax
c0013b6f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013b75:	0f 86 25 01 00 00    	jbe    c0013ca0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013b7b:	c1 ee 0c             	shr    esi,0xc
c0013b7e:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013b85:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013b89:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013b91:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013b98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b9c:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013ba3:	29 ef                	sub    edi,ebp
c0013ba5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0013ba9:	0f 83 f8 00 00 00    	jae    c0013ca7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0013baf:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013bb5:	76 05                	jbe    c0013bbc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0013bb7:	bf 00 10 00 00       	mov    edi,0x1000
c0013bbc:	83 ec 0c             	sub    esp,0xc
c0013bbf:	31 d2                	xor    edx,edx
c0013bc1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013bc8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013bca:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013bce:	50                   	push   eax
c0013bcf:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013bd3:	56                   	push   esi
c0013bd4:	52                   	push   edx
c0013bd5:	57                   	push   edi
c0013bd6:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013bdd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013be0:	83 c4 20             	add    esp,0x20
c0013be3:	85 c0                	test   eax,eax
c0013be5:	75 06                	jne    c0013bed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0013be7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013beb:	74 13                	je     c0013c00 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0013bed:	83 ec 0c             	sub    esp,0xc
c0013bf0:	53                   	push   ebx
c0013bf1:	e8 b3 e7 ff ff       	call   c00123a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0013bf6:	83 c4 10             	add    esp,0x10
c0013bf9:	31 c0                	xor    eax,eax
c0013bfb:	e9 7c 01 00 00       	jmp    c0013d7c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0013c00:	fa                   	cli    
c0013c01:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013c07:	e8 ce b2 ff ff       	call   c000eeda <Phys::allocatePage()>
c0013c0c:	6a 07                	push   0x7
c0013c0e:	89 c7                	mov    edi,eax
c0013c10:	53                   	push   ebx
c0013c11:	50                   	push   eax
c0013c12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c1a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c20:	e8 65 eb ff ff       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c25:	83 c4 0c             	add    esp,0xc
c0013c28:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013c2f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c35:	6a 00                	push   0x0
c0013c37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c3c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c3f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c45:	e8 a6 e9 ff ff       	call   c00125f0 <VAS::mapOtherVASIn(bool, VAS*)>
c0013c4a:	58                   	pop    eax
c0013c4b:	5a                   	pop    edx
c0013c4c:	68 07 0c 00 00       	push   0xc07
c0013c51:	55                   	push   ebp
c0013c52:	57                   	push   edi
c0013c53:	89 df                	mov    edi,ebx
c0013c55:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013c5c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c62:	6a 00                	push   0x0
c0013c64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c6c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c72:	e8 6f ed ff ff       	call   c00129e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013c77:	b9 00 10 00 00       	mov    ecx,0x1000
c0013c7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c7e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0013c83:	83 c4 20             	add    esp,0x20
c0013c86:	48                   	dec    eax
c0013c87:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0013c8c:	85 c0                	test   eax,eax
c0013c8e:	75 01                	jne    c0013c91 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0013c90:	fb                   	sti    
c0013c91:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013c97:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013c9b:	e9 f1 fe ff ff       	jmp    c0013b91 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0013ca0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013ca7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013cae:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013cb4:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013cba:	0f 86 ae 00 00 00    	jbe    c0013d6e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013cc0:	fa                   	cli    
c0013cc1:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013cc7:	c1 ee 0c             	shr    esi,0xc
c0013cca:	51                   	push   ecx
c0013ccb:	31 ff                	xor    edi,edi
c0013ccd:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013cd4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013cda:	6a 00                	push   0x0
c0013cdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ce1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ce4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013cea:	e8 01 e9 ff ff       	call   c00125f0 <VAS::mapOtherVASIn(bool, VAS*)>
c0013cef:	83 c4 10             	add    esp,0x10
c0013cf2:	e8 e3 b1 ff ff       	call   c000eeda <Phys::allocatePage()>
c0013cf7:	47                   	inc    edi
c0013cf8:	6a 07                	push   0x7
c0013cfa:	53                   	push   ebx
c0013cfb:	50                   	push   eax
c0013cfc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d00:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013d06:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013d09:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013d0f:	e8 76 ea ff ff       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013d14:	58                   	pop    eax
c0013d15:	5a                   	pop    edx
c0013d16:	68 07 0c 00 00       	push   0xc07
c0013d1b:	55                   	push   ebp
c0013d1c:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013d22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d26:	50                   	push   eax
c0013d27:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013d2e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013d34:	6a 00                	push   0x0
c0013d36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d3e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013d44:	e8 9d ec ff ff       	call   c00129e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013d49:	83 c4 1c             	add    esp,0x1c
c0013d4c:	68 00 10 00 00       	push   0x1000
c0013d51:	6a 00                	push   0x0
c0013d53:	53                   	push   ebx
c0013d54:	e8 97 c7 fe ff       	call   c00004f0 <memset>
c0013d59:	83 c4 10             	add    esp,0x10
c0013d5c:	39 fe                	cmp    esi,edi
c0013d5e:	77 92                	ja     c0013cf2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0013d60:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0013d65:	48                   	dec    eax
c0013d66:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0013d6b:	75 01                	jne    c0013d6e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013d6d:	fb                   	sti    
c0013d6e:	83 ec 0c             	sub    esp,0xc
c0013d71:	53                   	push   ebx
c0013d72:	e8 32 e6 ff ff       	call   c00123a9 <Virt::freeKernelVirtualPages(unsigned long)>
c0013d77:	83 c4 10             	add    esp,0x10
c0013d7a:	b0 01                	mov    al,0x1
c0013d7c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013d82:	5b                   	pop    ebx
c0013d83:	5e                   	pop    esi
c0013d84:	5f                   	pop    edi
c0013d85:	5d                   	pop    ebp
c0013d86:	c3                   	ret    

c0013d87 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013d87:	55                   	push   ebp
c0013d88:	57                   	push   edi
c0013d89:	56                   	push   esi
c0013d8a:	53                   	push   ebx
c0013d8b:	83 ec 48             	sub    esp,0x48
c0013d8e:	68 14 01 00 00       	push   0x114
c0013d93:	e8 f9 ab ff ff       	call   c000e991 <malloc>
c0013d98:	83 c4 0c             	add    esp,0xc
c0013d9b:	89 c6                	mov    esi,eax
c0013d9d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013da1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013da5:	50                   	push   eax
c0013da6:	e8 67 43 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013dab:	58                   	pop    eax
c0013dac:	5a                   	pop    edx
c0013dad:	6a 01                	push   0x1
c0013daf:	56                   	push   esi
c0013db0:	e8 7b 43 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0013db5:	83 c4 10             	add    esp,0x10
c0013db8:	85 c0                	test   eax,eax
c0013dba:	0f 85 43 01 00 00    	jne    c0013f03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013dc0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013dc8:	83 ec 0c             	sub    esp,0xc
c0013dcb:	6a 34                	push   0x34
c0013dcd:	e8 bf ab ff ff       	call   c000e991 <malloc>
c0013dd2:	89 c3                	mov    ebx,eax
c0013dd4:	58                   	pop    eax
c0013dd5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013dd7:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013ddb:	57                   	push   edi
c0013ddc:	53                   	push   ebx
c0013ddd:	6a 00                	push   0x0
c0013ddf:	6a 34                	push   0x34
c0013de1:	56                   	push   esi
c0013de2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013de5:	83 c4 20             	add    esp,0x20
c0013de8:	85 c0                	test   eax,eax
c0013dea:	0f 85 13 01 00 00    	jne    c0013f03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013df0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013df6:	0f 85 07 01 00 00    	jne    c0013f03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013dfc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013dff:	85 c0                	test   eax,eax
c0013e01:	0f 84 fc 00 00 00    	je     c0013f03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013e07:	31 d2                	xor    edx,edx
c0013e09:	55                   	push   ebp
c0013e0a:	52                   	push   edx
c0013e0b:	50                   	push   eax
c0013e0c:	56                   	push   esi
c0013e0d:	e8 dc 43 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013e12:	83 c4 10             	add    esp,0x10
c0013e15:	85 c0                	test   eax,eax
c0013e17:	0f 85 e6 00 00 00    	jne    c0013f03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013e1d:	83 ec 0c             	sub    esp,0xc
c0013e20:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013e23:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013e27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013e2b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013e2f:	0f af c2             	imul   eax,edx
c0013e32:	50                   	push   eax
c0013e33:	e8 59 ab ff ff       	call   c000e991 <malloc>
c0013e38:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013e3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013e3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e45:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013e49:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013e4d:	0f af c2             	imul   eax,edx
c0013e50:	99                   	cdq    
c0013e51:	52                   	push   edx
c0013e52:	50                   	push   eax
c0013e53:	56                   	push   esi
c0013e54:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013e57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013e5a:	83 c4 20             	add    esp,0x20
c0013e5d:	85 c0                	test   eax,eax
c0013e5f:	0f 84 9e 00 00 00    	je     c0013f03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013e65:	31 d2                	xor    edx,edx
c0013e67:	51                   	push   ecx
c0013e68:	52                   	push   edx
c0013e69:	50                   	push   eax
c0013e6a:	56                   	push   esi
c0013e6b:	e8 7e 43 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013e70:	83 c4 10             	add    esp,0x10
c0013e73:	85 c0                	test   eax,eax
c0013e75:	0f 85 88 00 00 00    	jne    c0013f03 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013e7b:	83 ec 0c             	sub    esp,0xc
c0013e7e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013e82:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013e86:	31 ed                	xor    ebp,ebp
c0013e88:	0f af c2             	imul   eax,edx
c0013e8b:	50                   	push   eax
c0013e8c:	e8 00 ab ff ff       	call   c000e991 <malloc>
c0013e91:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013e93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e97:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e9e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013ea2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013ea6:	0f af c2             	imul   eax,edx
c0013ea9:	99                   	cdq    
c0013eaa:	52                   	push   edx
c0013eab:	50                   	push   eax
c0013eac:	56                   	push   esi
c0013ead:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013eb0:	83 c4 20             	add    esp,0x20
c0013eb3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013ebb:	0f b7 fd             	movzx  edi,bp
c0013ebe:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013ec2:	73 7d                	jae    c0013f41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013ec4:	c1 e7 05             	shl    edi,0x5
c0013ec7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013ecb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013ece:	75 6b                	jne    c0013f3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013ed0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013ed3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ed7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013eda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ede:	52                   	push   edx
c0013edf:	31 d2                	xor    edx,edx
c0013ee1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013ee4:	52                   	push   edx
c0013ee5:	50                   	push   eax
c0013ee6:	56                   	push   esi
c0013ee7:	e8 02 43 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013eec:	83 c4 10             	add    esp,0x10
c0013eef:	85 c0                	test   eax,eax
c0013ef1:	74 17                	je     c0013f0a <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013ef3:	83 ec 0c             	sub    esp,0xc
c0013ef6:	68 19 29 02 c0       	push   0xc0022919
c0013efb:	e8 64 30 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013f00:	83 c4 10             	add    esp,0x10
c0013f03:	31 c0                	xor    eax,eax
c0013f05:	e9 87 00 00 00       	jmp    c0013f91 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013f0a:	83 ec 0c             	sub    esp,0xc
c0013f0d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013f10:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013f13:	50                   	push   eax
c0013f14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013f18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f1c:	56                   	push   esi
c0013f1d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013f21:	e8 d3 fb ff ff       	call   c0013af9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013f26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f2a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013f2e:	83 c4 20             	add    esp,0x20
c0013f31:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013f35:	73 04                	jae    c0013f3b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013f37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f3b:	45                   	inc    ebp
c0013f3c:	e9 7a ff ff ff       	jmp    c0013ebb <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013f41:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013f45:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013f49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f4d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013f53:	83 ec 0c             	sub    esp,0xc
c0013f56:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013f5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f61:	05 00 10 00 00       	add    eax,0x1000
c0013f66:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013f69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f6d:	e8 2f aa ff ff       	call   c000e9a1 <free>
c0013f72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f75:	e8 27 aa ff ff       	call   c000e9a1 <free>
c0013f7a:	58                   	pop    eax
c0013f7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f7f:	e8 1d aa ff ff       	call   c000e9a1 <free>
c0013f84:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f87:	e8 02 42 ff ff       	call   c000818e <File::close()>
c0013f8c:	83 c4 10             	add    esp,0x10
c0013f8f:	b0 01                	mov    al,0x1
c0013f91:	83 c4 3c             	add    esp,0x3c
c0013f94:	5b                   	pop    ebx
c0013f95:	5e                   	pop    esi
c0013f96:	5f                   	pop    edi
c0013f97:	5d                   	pop    ebp
c0013f98:	c3                   	ret    

c0013f99 <Thr::runtimeReferenceHelper()>:
c0013f99:	83 ec 18             	sub    esp,0x18
c0013f9c:	68 21 29 02 c0       	push   0xc0022921
c0013fa1:	e8 be 2f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013fa6:	fa                   	cli    
c0013fa7:	83 c4 10             	add    esp,0x10
c0013faa:	eb fe                	jmp    c0013faa <Thr::runtimeReferenceHelper()+0x11>

c0013fac <Thr::getAddressOfKernelSymbol(char const*)>:
c0013fac:	57                   	push   edi
c0013fad:	56                   	push   esi
c0013fae:	53                   	push   ebx
c0013faf:	31 db                	xor    ebx,ebx
c0013fb1:	39 1d 80 c6 02 c0    	cmp    DWORD PTR ds:0xc002c680,ebx
c0013fb7:	7e 3c                	jle    c0013ff5 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013fb9:	8b 34 9d 00 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3a00]
c0013fc0:	31 ff                	xor    edi,edi
c0013fc2:	39 3c 9d 00 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3b00],edi
c0013fc9:	7e 27                	jle    c0013ff2 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013fcb:	50                   	push   eax
c0013fcc:	50                   	push   eax
c0013fcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fd1:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fd3:	03 04 9d 80 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a80]
c0013fda:	50                   	push   eax
c0013fdb:	e8 70 c7 fe ff       	call   c0000750 <strcmp>
c0013fe0:	83 c4 10             	add    esp,0x10
c0013fe3:	85 c0                	test   eax,eax
c0013fe5:	75 05                	jne    c0013fec <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013fe7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013fea:	eb 0b                	jmp    c0013ff7 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013fec:	83 c6 10             	add    esi,0x10
c0013fef:	47                   	inc    edi
c0013ff0:	eb d0                	jmp    c0013fc2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013ff2:	43                   	inc    ebx
c0013ff3:	eb bc                	jmp    c0013fb1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013ff5:	31 c0                	xor    eax,eax
c0013ff7:	5b                   	pop    ebx
c0013ff8:	5e                   	pop    esi
c0013ff9:	5f                   	pop    edi
c0013ffa:	c3                   	ret    

c0013ffb <Thr::loadKernelSymbolTable(char const*)>:
c0013ffb:	55                   	push   ebp
c0013ffc:	57                   	push   edi
c0013ffd:	56                   	push   esi
c0013ffe:	53                   	push   ebx
c0013fff:	83 ec 68             	sub    esp,0x68
c0014002:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0014008:	68 14 01 00 00       	push   0x114
c001400d:	e8 7f a9 ff ff       	call   c000e991 <malloc>
c0014012:	83 c4 0c             	add    esp,0xc
c0014015:	89 c3                	mov    ebx,eax
c0014017:	56                   	push   esi
c0014018:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001401c:	50                   	push   eax
c001401d:	e8 f0 40 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0014022:	5e                   	pop    esi
c0014023:	5f                   	pop    edi
c0014024:	6a 01                	push   0x1
c0014026:	53                   	push   ebx
c0014027:	e8 04 41 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c001402c:	83 c4 10             	add    esp,0x10
c001402f:	85 c0                	test   eax,eax
c0014031:	74 0a                	je     c001403d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014033:	83 ec 0c             	sub    esp,0xc
c0014036:	68 43 29 02 c0       	push   0xc0022943
c001403b:	eb 34                	jmp    c0014071 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001403d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014045:	83 ec 0c             	sub    esp,0xc
c0014048:	6a 34                	push   0x34
c001404a:	e8 42 a9 ff ff       	call   c000e991 <malloc>
c001404f:	59                   	pop    ecx
c0014050:	89 c7                	mov    edi,eax
c0014052:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014056:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014058:	56                   	push   esi
c0014059:	57                   	push   edi
c001405a:	6a 00                	push   0x0
c001405c:	6a 34                	push   0x34
c001405e:	53                   	push   ebx
c001405f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014062:	83 c4 20             	add    esp,0x20
c0014065:	85 c0                	test   eax,eax
c0014067:	74 17                	je     c0014080 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014069:	83 ec 0c             	sub    esp,0xc
c001406c:	68 5a 29 02 c0       	push   0xc002295a
c0014071:	e8 70 ac ff ff       	call   c000ece6 <KePanic(char const*)>
c0014076:	83 c4 10             	add    esp,0x10
c0014079:	31 c0                	xor    eax,eax
c001407b:	e9 31 02 00 00       	jmp    c00142b1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014080:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014086:	75 e1                	jne    c0014069 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014088:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001408b:	85 c0                	test   eax,eax
c001408d:	74 da                	je     c0014069 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001408f:	52                   	push   edx
c0014090:	31 d2                	xor    edx,edx
c0014092:	52                   	push   edx
c0014093:	50                   	push   eax
c0014094:	53                   	push   ebx
c0014095:	e8 54 41 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c001409a:	83 c4 10             	add    esp,0x10
c001409d:	85 c0                	test   eax,eax
c001409f:	75 c8                	jne    c0014069 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00140a1:	83 ec 0c             	sub    esp,0xc
c00140a4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00140a8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00140ac:	31 ed                	xor    ebp,ebp
c00140ae:	0f af c2             	imul   eax,edx
c00140b1:	50                   	push   eax
c00140b2:	e8 da a8 ff ff       	call   c000e991 <malloc>
c00140b7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00140b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00140bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00140c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140c4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00140c8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00140cc:	0f af c2             	imul   eax,edx
c00140cf:	99                   	cdq    
c00140d0:	52                   	push   edx
c00140d1:	50                   	push   eax
c00140d2:	53                   	push   ebx
c00140d3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140d6:	83 c4 20             	add    esp,0x20
c00140d9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00140e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00140e9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00140f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00140f9:	0f b7 f5             	movzx  esi,bp
c00140fc:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014100:	0f 83 a7 00 00 00    	jae    c00141ad <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014106:	6b f6 28             	imul   esi,esi,0x28
c0014109:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001410d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014110:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014114:	50                   	push   eax
c0014115:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014119:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001411d:	8b 16                	mov    edx,DWORD PTR [esi]
c001411f:	6b c0 28             	imul   eax,eax,0x28
c0014122:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014126:	89 d0                	mov    eax,edx
c0014128:	31 d2                	xor    edx,edx
c001412a:	52                   	push   edx
c001412b:	50                   	push   eax
c001412c:	53                   	push   ebx
c001412d:	e8 bc 40 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014132:	83 c4 0c             	add    esp,0xc
c0014135:	6a 20                	push   0x20
c0014137:	6a 00                	push   0x0
c0014139:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001413d:	52                   	push   edx
c001413e:	e8 ad c3 fe ff       	call   c00004f0 <memset>
c0014143:	58                   	pop    eax
c0014144:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014146:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001414a:	51                   	push   ecx
c001414b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001414f:	52                   	push   edx
c0014150:	6a 00                	push   0x0
c0014152:	6a 1f                	push   0x1f
c0014154:	53                   	push   ebx
c0014155:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014158:	83 c4 18             	add    esp,0x18
c001415b:	68 71 29 02 c0       	push   0xc0022971
c0014160:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014164:	52                   	push   edx
c0014165:	e8 e6 c5 fe ff       	call   c0000750 <strcmp>
c001416a:	83 c4 10             	add    esp,0x10
c001416d:	85 c0                	test   eax,eax
c001416f:	75 0f                	jne    c0014180 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014171:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014174:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014178:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001417c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014180:	50                   	push   eax
c0014181:	50                   	push   eax
c0014182:	68 79 29 02 c0       	push   0xc0022979
c0014187:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001418b:	50                   	push   eax
c001418c:	e8 bf c5 fe ff       	call   c0000750 <strcmp>
c0014191:	83 c4 10             	add    esp,0x10
c0014194:	85 c0                	test   eax,eax
c0014196:	75 0f                	jne    c00141a7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014198:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001419b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001419f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141a7:	45                   	inc    ebp
c00141a8:	e9 4c ff ff ff       	jmp    c00140f9 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00141ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00141b2:	75 10                	jne    c00141c4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00141b4:	83 ec 0c             	sub    esp,0xc
c00141b7:	68 81 29 02 c0       	push   0xc0022981
c00141bc:	e8 25 ab ff ff       	call   c000ece6 <KePanic(char const*)>
c00141c1:	83 c4 10             	add    esp,0x10
c00141c4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00141c9:	75 10                	jne    c00141db <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00141cb:	83 ec 0c             	sub    esp,0xc
c00141ce:	68 81 29 02 c0       	push   0xc0022981
c00141d3:	e8 0e ab ff ff       	call   c000ece6 <KePanic(char const*)>
c00141d8:	83 c4 10             	add    esp,0x10
c00141db:	31 d2                	xor    edx,edx
c00141dd:	50                   	push   eax
c00141de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141e2:	52                   	push   edx
c00141e3:	50                   	push   eax
c00141e4:	53                   	push   ebx
c00141e5:	e8 04 40 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00141ea:	5a                   	pop    edx
c00141eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141ef:	e8 9d a7 ff ff       	call   c000e991 <malloc>
c00141f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00141f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141fc:	31 c9                	xor    ecx,ecx
c00141fe:	5e                   	pop    esi
c00141ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014201:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014205:	55                   	push   ebp
c0014206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001420a:	51                   	push   ecx
c001420b:	52                   	push   edx
c001420c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014210:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014214:	53                   	push   ebx
c0014215:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014218:	83 c4 14             	add    esp,0x14
c001421b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001421f:	e8 6d a7 ff ff       	call   c000e991 <malloc>
c0014224:	89 c6                	mov    esi,eax
c0014226:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014228:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001422b:	56                   	push   esi
c001422c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014230:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014234:	51                   	push   ecx
c0014235:	52                   	push   edx
c0014236:	53                   	push   ebx
c0014237:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001423a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001423e:	8b 15 80 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c680
c0014244:	83 c4 1c             	add    esp,0x1c
c0014247:	c1 e8 04             	shr    eax,0x4
c001424a:	89 04 95 00 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3b00],eax
c0014251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014255:	31 d2                	xor    edx,edx
c0014257:	52                   	push   edx
c0014258:	50                   	push   eax
c0014259:	53                   	push   ebx
c001425a:	e8 8f 3f ff ff       	call   c00081ee <File::seek(unsigned long long)>
c001425f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014261:	31 d2                	xor    edx,edx
c0014263:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014266:	56                   	push   esi
c0014267:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001426b:	52                   	push   edx
c001426c:	50                   	push   eax
c001426d:	53                   	push   ebx
c001426e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014271:	83 c4 14             	add    esp,0x14
c0014274:	53                   	push   ebx
c0014275:	e8 14 3f ff ff       	call   c000818e <File::close()>
c001427a:	5d                   	pop    ebp
c001427b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001427f:	e8 1d a7 ff ff       	call   c000e9a1 <free>
c0014284:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014287:	e8 15 a7 ff ff       	call   c000e9a1 <free>
c001428c:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c0014291:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014295:	8d 50 01             	lea    edx,[eax+0x1]
c0014298:	89 0c 85 00 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a00],ecx
c001429f:	89 34 85 80 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a80],esi
c00142a6:	89 15 80 c6 02 c0    	mov    DWORD PTR ds:0xc002c680,edx
c00142ac:	83 c4 10             	add    esp,0x10
c00142af:	b0 01                	mov    al,0x1
c00142b1:	83 c4 5c             	add    esp,0x5c
c00142b4:	5b                   	pop    ebx
c00142b5:	5e                   	pop    esi
c00142b6:	5f                   	pop    edi
c00142b7:	5d                   	pop    ebp
c00142b8:	c3                   	ret    

c00142b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00142b9:	55                   	push   ebp
c00142ba:	57                   	push   edi
c00142bb:	56                   	push   esi
c00142bc:	53                   	push   ebx
c00142bd:	81 ec 68 03 00 00    	sub    esp,0x368
c00142c3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00142ca:	8b 1d d8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6d8
c00142d0:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00142d4:	68 14 01 00 00       	push   0x114
c00142d9:	e8 b3 a6 ff ff       	call   c000e991 <malloc>
c00142de:	83 c4 0c             	add    esp,0xc
c00142e1:	89 c5                	mov    ebp,eax
c00142e3:	53                   	push   ebx
c00142e4:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00142eb:	50                   	push   eax
c00142ec:	e8 21 3e ff ff       	call   c0008112 <File::File(char const*, Process*)>
c00142f1:	5e                   	pop    esi
c00142f2:	5f                   	pop    edi
c00142f3:	6a 01                	push   0x1
c00142f5:	55                   	push   ebp
c00142f6:	e8 35 3e ff ff       	call   c0008130 <File::open(FileOpenMode)>
c00142fb:	83 c4 10             	add    esp,0x10
c00142fe:	85 c0                	test   eax,eax
c0014300:	0f 85 aa 06 00 00    	jne    c00149b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014306:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001430e:	83 ec 0c             	sub    esp,0xc
c0014311:	6a 34                	push   0x34
c0014313:	e8 79 a6 ff ff       	call   c000e991 <malloc>
c0014318:	5b                   	pop    ebx
c0014319:	89 c7                	mov    edi,eax
c001431b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001431f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014322:	53                   	push   ebx
c0014323:	57                   	push   edi
c0014324:	6a 00                	push   0x0
c0014326:	6a 34                	push   0x34
c0014328:	55                   	push   ebp
c0014329:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001432c:	83 c4 20             	add    esp,0x20
c001432f:	85 c0                	test   eax,eax
c0014331:	0f 85 79 06 00 00    	jne    c00149b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014337:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001433d:	0f 85 6d 06 00 00    	jne    c00149b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014343:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014346:	85 c0                	test   eax,eax
c0014348:	0f 84 62 06 00 00    	je     c00149b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001434e:	31 d2                	xor    edx,edx
c0014350:	51                   	push   ecx
c0014351:	52                   	push   edx
c0014352:	50                   	push   eax
c0014353:	55                   	push   ebp
c0014354:	e8 95 3e ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014359:	83 c4 10             	add    esp,0x10
c001435c:	85 c0                	test   eax,eax
c001435e:	0f 85 4c 06 00 00    	jne    c00149b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014364:	83 ec 0c             	sub    esp,0xc
c0014367:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001436a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001436e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014372:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014376:	0f af c2             	imul   eax,edx
c0014379:	50                   	push   eax
c001437a:	e8 12 a6 ff ff       	call   c000e991 <malloc>
c001437f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014386:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014389:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001438d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014391:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014395:	0f af c2             	imul   eax,edx
c0014398:	99                   	cdq    
c0014399:	52                   	push   edx
c001439a:	50                   	push   eax
c001439b:	55                   	push   ebp
c001439c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001439f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00143a2:	83 c4 20             	add    esp,0x20
c00143a5:	85 c0                	test   eax,eax
c00143a7:	0f 84 03 06 00 00    	je     c00149b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00143ad:	52                   	push   edx
c00143ae:	31 d2                	xor    edx,edx
c00143b0:	52                   	push   edx
c00143b1:	50                   	push   eax
c00143b2:	55                   	push   ebp
c00143b3:	e8 36 3e ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00143b8:	83 c4 10             	add    esp,0x10
c00143bb:	85 c0                	test   eax,eax
c00143bd:	0f 85 ed 05 00 00    	jne    c00149b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00143c3:	83 ec 0c             	sub    esp,0xc
c00143c6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00143ca:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00143ce:	31 f6                	xor    esi,esi
c00143d0:	0f af c2             	imul   eax,edx
c00143d3:	50                   	push   eax
c00143d4:	e8 b8 a5 ff ff       	call   c000e991 <malloc>
c00143d9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00143dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00143e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00143e7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00143eb:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00143ef:	0f af c2             	imul   eax,edx
c00143f2:	99                   	cdq    
c00143f3:	52                   	push   edx
c00143f4:	50                   	push   eax
c00143f5:	55                   	push   ebp
c00143f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00143f9:	83 c4 20             	add    esp,0x20
c00143fc:	0f b7 de             	movzx  ebx,si
c00143ff:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014403:	0f 83 87 00 00 00    	jae    c0014490 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014409:	c1 e3 05             	shl    ebx,0x5
c001440c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014410:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014413:	75 75                	jne    c001448a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014415:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014418:	31 d2                	xor    edx,edx
c001441a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001441e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014425:	50                   	push   eax
c0014426:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014429:	52                   	push   edx
c001442a:	50                   	push   eax
c001442b:	55                   	push   ebp
c001442c:	e8 bd 3d ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014431:	83 c4 10             	add    esp,0x10
c0014434:	85 c0                	test   eax,eax
c0014436:	0f 85 74 05 00 00    	jne    c00149b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001443c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014443:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014446:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c001444a:	31 d2                	xor    edx,edx
c001444c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014450:	83 ec 0c             	sub    esp,0xc
c0014453:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014457:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001445e:	50                   	push   eax
c001445f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014467:	52                   	push   edx
c0014468:	50                   	push   eax
c0014469:	55                   	push   ebp
c001446a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001446d:	83 c4 1c             	add    esp,0x1c
c0014470:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014473:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014476:	50                   	push   eax
c0014477:	6a 00                	push   0x0
c0014479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001447d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014481:	50                   	push   eax
c0014482:	e8 69 c0 fe ff       	call   c00004f0 <memset>
c0014487:	83 c4 10             	add    esp,0x10
c001448a:	46                   	inc    esi
c001448b:	e9 6c ff ff ff       	jmp    c00143fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014490:	53                   	push   ebx
c0014491:	31 db                	xor    ebx,ebx
c0014493:	68 00 01 00 00       	push   0x100
c0014498:	6a 00                	push   0x0
c001449a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001449e:	50                   	push   eax
c001449f:	e8 4c c0 fe ff       	call   c00004f0 <memset>
c00144a4:	83 c4 0c             	add    esp,0xc
c00144a7:	68 00 01 00 00       	push   0x100
c00144ac:	6a 00                	push   0x0
c00144ae:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00144b5:	50                   	push   eax
c00144b6:	e8 35 c0 fe ff       	call   c00004f0 <memset>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00144c6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00144ce:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00144d6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00144de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00144e6:	0f b7 f3             	movzx  esi,bx
c00144e9:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00144ed:	0f 83 2d 01 00 00    	jae    c0014620 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00144f3:	6b f6 28             	imul   esi,esi,0x28
c00144f6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00144fa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00144fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014501:	52                   	push   edx
c0014502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014506:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001450a:	8b 06                	mov    eax,DWORD PTR [esi]
c001450c:	6b d2 28             	imul   edx,edx,0x28
c001450f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014513:	31 d2                	xor    edx,edx
c0014515:	52                   	push   edx
c0014516:	50                   	push   eax
c0014517:	55                   	push   ebp
c0014518:	e8 d1 3c ff ff       	call   c00081ee <File::seek(unsigned long long)>
c001451d:	83 c4 0c             	add    esp,0xc
c0014520:	6a 20                	push   0x20
c0014522:	6a 00                	push   0x0
c0014524:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001452b:	51                   	push   ecx
c001452c:	e8 bf bf fe ff       	call   c00004f0 <memset>
c0014531:	59                   	pop    ecx
c0014532:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014535:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014539:	52                   	push   edx
c001453a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014541:	51                   	push   ecx
c0014542:	6a 00                	push   0x0
c0014544:	6a 1f                	push   0x1f
c0014546:	55                   	push   ebp
c0014547:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001454a:	83 c4 1c             	add    esp,0x1c
c001454d:	6a 09                	push   0x9
c001454f:	68 9b 29 02 c0       	push   0xc002299b
c0014554:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001455b:	51                   	push   ecx
c001455c:	e8 1f be fe ff       	call   c0000380 <memcmp>
c0014561:	83 c4 10             	add    esp,0x10
c0014564:	85 c0                	test   eax,eax
c0014566:	75 21                	jne    c0014589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001456c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014570:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014574:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014578:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001457b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014582:	89 d0                	mov    eax,edx
c0014584:	40                   	inc    eax
c0014585:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014589:	50                   	push   eax
c001458a:	6a 09                	push   0x9
c001458c:	68 a5 29 02 c0       	push   0xc00229a5
c0014591:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014598:	50                   	push   eax
c0014599:	e8 e2 bd fe ff       	call   c0000380 <memcmp>
c001459e:	83 c4 10             	add    esp,0x10
c00145a1:	85 c0                	test   eax,eax
c00145a3:	75 21                	jne    c00145c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00145a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00145ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145b1:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00145b5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00145b8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00145bf:	89 d0                	mov    eax,edx
c00145c1:	40                   	inc    eax
c00145c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145c6:	50                   	push   eax
c00145c7:	50                   	push   eax
c00145c8:	68 71 29 02 c0       	push   0xc0022971
c00145cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00145d4:	50                   	push   eax
c00145d5:	e8 76 c1 fe ff       	call   c0000750 <strcmp>
c00145da:	83 c4 10             	add    esp,0x10
c00145dd:	85 c0                	test   eax,eax
c00145df:	75 0f                	jne    c00145f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00145e1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00145e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00145f0:	50                   	push   eax
c00145f1:	50                   	push   eax
c00145f2:	68 79 29 02 c0       	push   0xc0022979
c00145f7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00145fe:	50                   	push   eax
c00145ff:	e8 4c c1 fe ff       	call   c0000750 <strcmp>
c0014604:	83 c4 10             	add    esp,0x10
c0014607:	85 c0                	test   eax,eax
c0014609:	75 0f                	jne    c001461a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001460b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001460e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014612:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014616:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001461a:	43                   	inc    ebx
c001461b:	e9 c6 fe ff ff       	jmp    c00144e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014620:	31 d2                	xor    edx,edx
c0014622:	50                   	push   eax
c0014623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014627:	52                   	push   edx
c0014628:	50                   	push   eax
c0014629:	55                   	push   ebp
c001462a:	e8 bf 3b ff ff       	call   c00081ee <File::seek(unsigned long long)>
c001462f:	58                   	pop    eax
c0014630:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014634:	e8 58 a3 ff ff       	call   c000e991 <malloc>
c0014639:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001463c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014640:	31 d2                	xor    edx,edx
c0014642:	58                   	pop    eax
c0014643:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014647:	53                   	push   ebx
c0014648:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001464c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014650:	52                   	push   edx
c0014651:	50                   	push   eax
c0014652:	55                   	push   ebp
c0014653:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014656:	83 c4 14             	add    esp,0x14
c0014659:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001465d:	e8 2f a3 ff ff       	call   c000e991 <malloc>
c0014662:	31 d2                	xor    edx,edx
c0014664:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014668:	83 c4 0c             	add    esp,0xc
c001466b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001466f:	52                   	push   edx
c0014670:	50                   	push   eax
c0014671:	55                   	push   ebp
c0014672:	e8 77 3b ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014677:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001467a:	31 d2                	xor    edx,edx
c001467c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001467f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014683:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014687:	52                   	push   edx
c0014688:	50                   	push   eax
c0014689:	55                   	push   ebp
c001468a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001468d:	83 c4 20             	add    esp,0x20
c0014690:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014695:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001469d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00146a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146a5:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00146a9:	0f 84 05 03 00 00    	je     c00149b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00146af:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00146b6:	31 d2                	xor    edx,edx
c00146b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146bc:	c1 e8 03             	shr    eax,0x3
c00146bf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00146c3:	51                   	push   ecx
c00146c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00146c8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00146cc:	52                   	push   edx
c00146cd:	50                   	push   eax
c00146ce:	55                   	push   ebp
c00146cf:	e8 1a 3b ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00146d4:	5b                   	pop    ebx
c00146d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d9:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00146e0:	e8 ac a2 ff ff       	call   c000e991 <malloc>
c00146e5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00146e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146ec:	31 d2                	xor    edx,edx
c00146ee:	5e                   	pop    esi
c00146ef:	8d 44 24 58          	lea    eax,[esp+0x58]
c00146f3:	50                   	push   eax
c00146f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146fc:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014703:	52                   	push   edx
c0014704:	50                   	push   eax
c0014705:	55                   	push   ebp
c0014706:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014709:	83 c4 20             	add    esp,0x20
c001470c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014714:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014718:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c001471c:	0f 8d 76 02 00 00    	jge    c0014998 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014722:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001472a:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c001472f:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014732:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014736:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001473a:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c001473e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014742:	c1 e8 08             	shr    eax,0x8
c0014745:	89 c6                	mov    esi,eax
c0014747:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001474b:	c1 e6 04             	shl    esi,0x4
c001474e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014752:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014755:	85 db                	test   ebx,ebx
c0014757:	0f 85 b3 00 00 00    	jne    c0014810 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001475d:	83 ec 0c             	sub    esp,0xc
c0014760:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014764:	03 06                	add    eax,DWORD PTR [esi]
c0014766:	50                   	push   eax
c0014767:	e8 40 f8 ff ff       	call   c0013fac <Thr::getAddressOfKernelSymbol(char const*)>
c001476c:	83 c4 10             	add    esp,0x10
c001476f:	89 c3                	mov    ebx,eax
c0014771:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014776:	85 c0                	test   eax,eax
c0014778:	0f 85 92 00 00 00    	jne    c0014810 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001477e:	83 ec 0c             	sub    esp,0xc
c0014781:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014785:	03 06                	add    eax,DWORD PTR [esi]
c0014787:	50                   	push   eax
c0014788:	e8 c3 af ff ff       	call   c000f750 <KeResolveCompatibilitySymbol(char*)>
c001478d:	83 c4 10             	add    esp,0x10
c0014790:	89 c3                	mov    ebx,eax
c0014792:	85 c0                	test   eax,eax
c0014794:	75 7a                	jne    c0014810 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014796:	51                   	push   ecx
c0014797:	51                   	push   ecx
c0014798:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001479c:	03 06                	add    eax,DWORD PTR [esi]
c001479e:	50                   	push   eax
c001479f:	68 af 29 02 c0       	push   0xc00229af
c00147a4:	e8 bb 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00147a9:	58                   	pop    eax
c00147aa:	5a                   	pop    edx
c00147ab:	68 c9 29 02 c0       	push   0xc00229c9
c00147b0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00147b7:	50                   	push   eax
c00147b8:	e8 83 be fe ff       	call   c0000640 <strcpy>
c00147bd:	59                   	pop    ecx
c00147be:	58                   	pop    eax
c00147bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147c3:	03 06                	add    eax,DWORD PTR [esi]
c00147c5:	50                   	push   eax
c00147c6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00147cd:	50                   	push   eax
c00147ce:	e8 6d c0 fe ff       	call   c0000840 <strcat>
c00147d3:	58                   	pop    eax
c00147d4:	5a                   	pop    edx
c00147d5:	68 63 2a 02 c0       	push   0xc0022a63
c00147da:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00147e1:	50                   	push   eax
c00147e2:	e8 59 c0 fe ff       	call   c0000840 <strcat>
c00147e7:	83 c4 10             	add    esp,0x10
c00147ea:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00147ef:	0f 84 5d 01 00 00    	je     c0014952 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00147f5:	83 ec 0c             	sub    esp,0xc
c00147f8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00147ff:	50                   	push   eax
c0014800:	e8 e1 a4 ff ff       	call   c000ece6 <KePanic(char const*)>
c0014805:	83 c4 10             	add    esp,0x10
c0014808:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001480c:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014810:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014815:	83 f8 01             	cmp    eax,0x1
c0014818:	0f 85 8f 00 00 00    	jne    c00148ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c001481e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014825:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014829:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001482d:	01 ce                	add    esi,ecx
c001482f:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014837:	0f 94 c0             	sete   al
c001483a:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014842:	0f 94 c2             	sete   dl
c0014845:	09 c2                	or     edx,eax
c0014847:	8b 06                	mov    eax,DWORD PTR [esi]
c0014849:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001484e:	0f b6 d2             	movzx  edx,dl
c0014851:	74 41                	je     c0014894 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014853:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014856:	85 d2                	test   edx,edx
c0014858:	75 15                	jne    c001486f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c001485a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001485e:	66 83 f8 0c          	cmp    ax,0xc
c0014862:	76 05                	jbe    c0014869 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014864:	b8 0c 00 00 00       	mov    eax,0xc
c0014869:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001486d:	76 37                	jbe    c00148a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001486f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014873:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014878:	0f 84 d4 00 00 00    	je     c0014952 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001487e:	83 ec 0c             	sub    esp,0xc
c0014881:	68 e0 29 02 c0       	push   0xc00229e0
c0014886:	e8 5b a4 ff ff       	call   c000ece6 <KePanic(char const*)>
c001488b:	83 c4 10             	add    esp,0x10
c001488e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014892:	eb 12                	jmp    c00148a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014894:	01 c1                	add    ecx,eax
c0014896:	85 d2                	test   edx,edx
c0014898:	75 0c                	jne    c00148a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001489a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001489e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00148a2:	77 02                	ja     c00148a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00148a4:	01 d9                	add    ecx,ebx
c00148a6:	89 0e                	mov    DWORD PTR [esi],ecx
c00148a8:	e9 e2 00 00 00       	jmp    c001498f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00148ad:	83 f8 02             	cmp    eax,0x2
c00148b0:	75 77                	jne    c0014929 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00148b2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00148b9:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00148bd:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00148c1:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00148c9:	74 21                	je     c00148ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00148cb:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00148d3:	74 17                	je     c00148ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00148d5:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00148d9:	b8 0a 00 00 00       	mov    eax,0xa
c00148de:	83 fa 0e             	cmp    edx,0xe
c00148e1:	77 03                	ja     c00148e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00148e3:	8d 42 fc             	lea    eax,[edx-0x4]
c00148e6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00148ea:	76 17                	jbe    c0014903 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00148ec:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00148f1:	74 5f                	je     c0014952 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00148f3:	83 ec 0c             	sub    esp,0xc
c00148f6:	68 fc 29 02 c0       	push   0xc00229fc
c00148fb:	e8 e6 a3 ff ff       	call   c000ece6 <KePanic(char const*)>
c0014900:	83 c4 10             	add    esp,0x10
c0014903:	8b 06                	mov    eax,DWORD PTR [esi]
c0014905:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001490a:	74 13                	je     c001491f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c001490c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014910:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014917:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c001491b:	01 d0                	add    eax,edx
c001491d:	eb 04                	jmp    c0014923 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001491f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014923:	01 c3                	add    ebx,eax
c0014925:	89 1e                	mov    DWORD PTR [esi],ebx
c0014927:	eb 66                	jmp    c001498f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014929:	52                   	push   edx
c001492a:	52                   	push   edx
c001492b:	50                   	push   eax
c001492c:	68 18 2a 02 c0       	push   0xc0022a18
c0014931:	e8 2e 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014936:	83 c4 10             	add    esp,0x10
c0014939:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001493e:	74 12                	je     c0014952 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014940:	83 ec 0c             	sub    esp,0xc
c0014943:	68 23 2a 02 c0       	push   0xc0022a23
c0014948:	e8 99 a3 ff ff       	call   c000ece6 <KePanic(char const*)>
c001494d:	83 c4 10             	add    esp,0x10
c0014950:	eb 3d                	jmp    c001498f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014952:	83 ec 0c             	sub    esp,0xc
c0014955:	55                   	push   ebp
c0014956:	e8 33 38 ff ff       	call   c000818e <File::close()>
c001495b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001495e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014961:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014964:	59                   	pop    ecx
c0014965:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014969:	e8 33 a0 ff ff       	call   c000e9a1 <free>
c001496e:	5b                   	pop    ebx
c001496f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014973:	e8 29 a0 ff ff       	call   c000e9a1 <free>
c0014978:	89 3c 24             	mov    DWORD PTR [esp],edi
c001497b:	e8 21 a0 ff ff       	call   c000e9a1 <free>
c0014980:	5e                   	pop    esi
c0014981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014985:	e8 17 a0 ff ff       	call   c000e9a1 <free>
c001498a:	83 c4 10             	add    esp,0x10
c001498d:	eb 21                	jmp    c00149b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001498f:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014993:	e9 7c fd ff ff       	jmp    c0014714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014998:	83 ec 0c             	sub    esp,0xc
c001499b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001499f:	e8 fd 9f ff ff       	call   c000e9a1 <free>
c00149a4:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00149a8:	83 c4 10             	add    esp,0x10
c00149ab:	e9 f1 fc ff ff       	jmp    c00146a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00149b0:	31 c0                	xor    eax,eax
c00149b2:	eb 33                	jmp    c00149e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00149b4:	83 ec 0c             	sub    esp,0xc
c00149b7:	55                   	push   ebp
c00149b8:	e8 d1 37 ff ff       	call   c000818e <File::close()>
c00149bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00149c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00149c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00149c6:	58                   	pop    eax
c00149c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00149cb:	e8 d1 9f ff ff       	call   c000e9a1 <free>
c00149d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00149d3:	e8 c9 9f ff ff       	call   c000e9a1 <free>
c00149d8:	5a                   	pop    edx
c00149d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149dd:	e8 bf 9f ff ff       	call   c000e9a1 <free>
c00149e2:	83 c4 10             	add    esp,0x10
c00149e5:	b0 01                	mov    al,0x1
c00149e7:	81 c4 5c 03 00 00    	add    esp,0x35c
c00149ed:	5b                   	pop    ebx
c00149ee:	5e                   	pop    esi
c00149ef:	5f                   	pop    edi
c00149f0:	5d                   	pop    ebp
c00149f1:	c3                   	ret    

c00149f2 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00149f2:	56                   	push   esi
c00149f3:	31 d2                	xor    edx,edx
c00149f5:	53                   	push   ebx
c00149f6:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c00149fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a00:	39 d3                	cmp    ebx,edx
c0014a02:	7e 1b                	jle    c0014a1f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014a04:	8b 04 95 00 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3f00]
c0014a0b:	39 c8                	cmp    eax,ecx
c0014a0d:	77 0d                	ja     c0014a1c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014a0f:	8b 34 95 00 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4100]
c0014a16:	01 c6                	add    esi,eax
c0014a18:	39 ce                	cmp    esi,ecx
c0014a1a:	77 05                	ja     c0014a21 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014a1c:	42                   	inc    edx
c0014a1d:	eb e1                	jmp    c0014a00 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014a1f:	31 c0                	xor    eax,eax
c0014a21:	5b                   	pop    ebx
c0014a22:	5e                   	pop    esi
c0014a23:	c3                   	ret    

c0014a24 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014a24:	53                   	push   ebx
c0014a25:	31 c0                	xor    eax,eax
c0014a27:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014a2b:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c0014a31:	39 c3                	cmp    ebx,eax
c0014a33:	7e 22                	jle    c0014a57 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014a35:	8b 14 85 00 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3f00]
c0014a3c:	39 ca                	cmp    edx,ecx
c0014a3e:	77 14                	ja     c0014a54 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014a40:	03 14 85 00 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4100]
c0014a47:	39 ca                	cmp    edx,ecx
c0014a49:	76 09                	jbe    c0014a54 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014a4b:	8b 04 85 00 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3d00]
c0014a52:	eb 05                	jmp    c0014a59 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014a54:	40                   	inc    eax
c0014a55:	eb da                	jmp    c0014a31 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014a57:	31 c0                	xor    eax,eax
c0014a59:	5b                   	pop    ebx
c0014a5a:	c3                   	ret    

c0014a5b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014a5b:	53                   	push   ebx
c0014a5c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014a60:	53                   	push   ebx
c0014a61:	e8 8c ff ff ff       	call   c00149f2 <Thr::getDriverBaseFromAddress(unsigned long)>
c0014a66:	5a                   	pop    edx
c0014a67:	31 d2                	xor    edx,edx
c0014a69:	85 c0                	test   eax,eax
c0014a6b:	74 04                	je     c0014a71 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014a6d:	89 da                	mov    edx,ebx
c0014a6f:	29 c2                	sub    edx,eax
c0014a71:	89 d0                	mov    eax,edx
c0014a73:	5b                   	pop    ebx
c0014a74:	c3                   	ret    

c0014a75 <Thr::loadDLL(char const*, bool)>:
c0014a75:	55                   	push   ebp
c0014a76:	57                   	push   edi
c0014a77:	56                   	push   esi
c0014a78:	53                   	push   ebx
c0014a79:	81 ec 34 01 00 00    	sub    esp,0x134
c0014a7f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014a86:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0014a8d:	56                   	push   esi
c0014a8e:	68 3b 2a 02 c0       	push   0xc0022a3b
c0014a93:	e8 cc 24 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014a98:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014a9f:	e8 ed 9e ff ff       	call   c000e991 <malloc>
c0014aa4:	83 c4 0c             	add    esp,0xc
c0014aa7:	89 c3                	mov    ebx,eax
c0014aa9:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0014aaf:	56                   	push   esi
c0014ab0:	50                   	push   eax
c0014ab1:	e8 5c 36 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0014ab6:	83 c4 10             	add    esp,0x10
c0014ab9:	85 db                	test   ebx,ebx
c0014abb:	75 3c                	jne    c0014af9 <Thr::loadDLL(char const*, bool)+0x84>
c0014abd:	89 f8                	mov    eax,edi
c0014abf:	84 c0                	test   al,al
c0014ac1:	0f 84 f3 01 00 00    	je     c0014cba <Thr::loadDLL(char const*, bool)+0x245>
c0014ac7:	55                   	push   ebp
c0014ac8:	55                   	push   ebp
c0014ac9:	68 4c 2a 02 c0       	push   0xc0022a4c
c0014ace:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014ad2:	55                   	push   ebp
c0014ad3:	e8 68 bb fe ff       	call   c0000640 <strcpy>
c0014ad8:	58                   	pop    eax
c0014ad9:	5a                   	pop    edx
c0014ada:	56                   	push   esi
c0014adb:	55                   	push   ebp
c0014adc:	e8 5f bd fe ff       	call   c0000840 <strcat>
c0014ae1:	59                   	pop    ecx
c0014ae2:	58                   	pop    eax
c0014ae3:	68 63 2a 02 c0       	push   0xc0022a63
c0014ae8:	55                   	push   ebp
c0014ae9:	e8 52 bd fe ff       	call   c0000840 <strcat>
c0014aee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014af1:	e8 f0 a1 ff ff       	call   c000ece6 <KePanic(char const*)>
c0014af6:	83 c4 10             	add    esp,0x10
c0014af9:	51                   	push   ecx
c0014afa:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014afe:	50                   	push   eax
c0014aff:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014b03:	50                   	push   eax
c0014b04:	53                   	push   ebx
c0014b05:	e8 28 39 ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	89 c5                	mov    ebp,eax
c0014b0f:	85 db                	test   ebx,ebx
c0014b11:	74 0c                	je     c0014b1f <Thr::loadDLL(char const*, bool)+0xaa>
c0014b13:	83 ec 0c             	sub    esp,0xc
c0014b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b18:	53                   	push   ebx
c0014b19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b1c:	83 c4 10             	add    esp,0x10
c0014b1f:	83 ec 0c             	sub    esp,0xc
c0014b22:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0014b27:	50                   	push   eax
c0014b28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b30:	55                   	push   ebp
c0014b31:	68 65 2a 02 c0       	push   0xc0022a65
c0014b36:	e8 29 24 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014b3b:	83 c4 20             	add    esp,0x20
c0014b3e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014b43:	75 0a                	jne    c0014b4f <Thr::loadDLL(char const*, bool)+0xda>
c0014b45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b49:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014b4d:	75 3c                	jne    c0014b8b <Thr::loadDLL(char const*, bool)+0x116>
c0014b4f:	89 f8                	mov    eax,edi
c0014b51:	84 c0                	test   al,al
c0014b53:	0f 84 49 01 00 00    	je     c0014ca2 <Thr::loadDLL(char const*, bool)+0x22d>
c0014b59:	51                   	push   ecx
c0014b5a:	51                   	push   ecx
c0014b5b:	68 86 2a 02 c0       	push   0xc0022a86
c0014b60:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014b64:	53                   	push   ebx
c0014b65:	e8 d6 ba fe ff       	call   c0000640 <strcpy>
c0014b6a:	5d                   	pop    ebp
c0014b6b:	58                   	pop    eax
c0014b6c:	56                   	push   esi
c0014b6d:	53                   	push   ebx
c0014b6e:	e8 cd bc fe ff       	call   c0000840 <strcat>
c0014b73:	58                   	pop    eax
c0014b74:	5a                   	pop    edx
c0014b75:	68 63 2a 02 c0       	push   0xc0022a63
c0014b7a:	53                   	push   ebx
c0014b7b:	e8 c0 bc fe ff       	call   c0000840 <strcat>
c0014b80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b83:	e8 5e a1 ff ff       	call   c000ece6 <KePanic(char const*)>
c0014b88:	83 c4 10             	add    esp,0x10
c0014b8b:	52                   	push   edx
c0014b8c:	6a 03                	push   0x3
c0014b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b92:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014b96:	05 ff 0f 00 00       	add    eax,0xfff
c0014b9b:	83 d2 00             	adc    edx,0x0
c0014b9e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014ba2:	50                   	push   eax
c0014ba3:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014ba9:	e8 fa dc ff ff       	call   c00128a8 <VAS::allocatePages(int, int)>
c0014bae:	59                   	pop    ecx
c0014baf:	89 c3                	mov    ebx,eax
c0014bb1:	5d                   	pop    ebp
c0014bb2:	50                   	push   eax
c0014bb3:	68 aa 21 02 c0       	push   0xc00221aa
c0014bb8:	e8 a7 23 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014bbd:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bc0:	e8 ab b9 fe ff       	call   c0000570 <strlen>
c0014bc5:	8b 2d e0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bee0
c0014bcb:	40                   	inc    eax
c0014bcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0014bcf:	e8 bd 9d ff ff       	call   c000e991 <malloc>
c0014bd4:	89 04 ad 00 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3d00],eax
c0014bdb:	58                   	pop    eax
c0014bdc:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014be1:	5a                   	pop    edx
c0014be2:	56                   	push   esi
c0014be3:	ff 34 85 00 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3d00]
c0014bea:	e8 51 ba fe ff       	call   c0000640 <strcpy>
c0014bef:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014bf4:	8d 50 01             	lea    edx,[eax+0x1]
c0014bf7:	89 1c 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],ebx
c0014bfe:	89 15 e0 be 02 c0    	mov    DWORD PTR ds:0xc002bee0,edx
c0014c04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014c08:	83 c4 0c             	add    esp,0xc
c0014c0b:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c0014c12:	6a 01                	push   0x1
c0014c14:	53                   	push   ebx
c0014c15:	56                   	push   esi
c0014c16:	e8 9e f6 ff ff       	call   c00142b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014c1b:	83 c4 10             	add    esp,0x10
c0014c1e:	0f b6 c0             	movzx  eax,al
c0014c21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c25:	85 c0                	test   eax,eax
c0014c27:	0f 85 89 00 00 00    	jne    c0014cb6 <Thr::loadDLL(char const*, bool)+0x241>
c0014c2d:	89 f8                	mov    eax,edi
c0014c2f:	84 c0                	test   al,al
c0014c31:	74 73                	je     c0014ca6 <Thr::loadDLL(char const*, bool)+0x231>
c0014c33:	83 ec 0c             	sub    esp,0xc
c0014c36:	68 9f 2a 02 c0       	push   0xc0022a9f
c0014c3b:	e8 a6 a0 ff ff       	call   c000ece6 <KePanic(char const*)>
c0014c40:	83 c4 10             	add    esp,0x10
c0014c43:	eb 61                	jmp    c0014ca6 <Thr::loadDLL(char const*, bool)+0x231>
c0014c45:	50                   	push   eax
c0014c46:	50                   	push   eax
c0014c47:	89 e8                	mov    eax,ebp
c0014c49:	c1 e0 0c             	shl    eax,0xc
c0014c4c:	01 d8                	add    eax,ebx
c0014c4e:	50                   	push   eax
c0014c4f:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014c55:	e8 30 d7 ff ff       	call   c001238a <VAS::getPageTableEntry(unsigned long)>
c0014c5a:	83 c4 10             	add    esp,0x10
c0014c5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c5f:	a8 60                	test   al,0x60
c0014c61:	75 11                	jne    c0014c74 <Thr::loadDLL(char const*, bool)+0x1ff>
c0014c63:	83 ec 0c             	sub    esp,0xc
c0014c66:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c6b:	50                   	push   eax
c0014c6c:	e8 00 a2 ff ff       	call   c000ee71 <Phys::freePage(unsigned long)>
c0014c71:	83 c4 10             	add    esp,0x10
c0014c74:	45                   	inc    ebp
c0014c75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014c7d:	05 ff 0f 00 00       	add    eax,0xfff
c0014c82:	bf 00 00 00 00       	mov    edi,0x0
c0014c87:	83 d2 00             	adc    edx,0x0
c0014c8a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014c8e:	c1 ea 0c             	shr    edx,0xc
c0014c91:	39 c5                	cmp    ebp,eax
c0014c93:	89 d1                	mov    ecx,edx
c0014c95:	89 f8                	mov    eax,edi
c0014c97:	19 c8                	sbb    eax,ecx
c0014c99:	72 aa                	jb     c0014c45 <Thr::loadDLL(char const*, bool)+0x1d0>
c0014c9b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014ca0:	75 18                	jne    c0014cba <Thr::loadDLL(char const*, bool)+0x245>
c0014ca2:	31 db                	xor    ebx,ebx
c0014ca4:	eb 14                	jmp    c0014cba <Thr::loadDLL(char const*, bool)+0x245>
c0014ca6:	83 ec 0c             	sub    esp,0xc
c0014ca9:	68 be 2a 02 c0       	push   0xc0022abe
c0014cae:	e8 33 a0 ff ff       	call   c000ece6 <KePanic(char const*)>
c0014cb3:	83 c4 10             	add    esp,0x10
c0014cb6:	31 ed                	xor    ebp,ebp
c0014cb8:	eb bb                	jmp    c0014c75 <Thr::loadDLL(char const*, bool)+0x200>
c0014cba:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014cc0:	89 d8                	mov    eax,ebx
c0014cc2:	5b                   	pop    ebx
c0014cc3:	5e                   	pop    esi
c0014cc4:	5f                   	pop    edi
c0014cc5:	5d                   	pop    ebp
c0014cc6:	c3                   	ret    

c0014cc7 <Thr::executeDLL(unsigned long, void*)>:
c0014cc7:	56                   	push   esi
c0014cc8:	53                   	push   ebx
c0014cc9:	52                   	push   edx
c0014cca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014cce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014cd2:	85 db                	test   ebx,ebx
c0014cd4:	75 10                	jne    c0014ce6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014cd6:	83 ec 0c             	sub    esp,0xc
c0014cd9:	68 da 2a 02 c0       	push   0xc0022ada
c0014cde:	e8 03 a0 ff ff       	call   c000ece6 <KePanic(char const*)>
c0014ce3:	83 c4 10             	add    esp,0x10
c0014ce6:	50                   	push   eax
c0014ce7:	50                   	push   eax
c0014ce8:	53                   	push   ebx
c0014ce9:	68 04 2b 02 c0       	push   0xc0022b04
c0014cee:	e8 71 22 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014cf3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014cf7:	89 d8                	mov    eax,ebx
c0014cf9:	83 c4 14             	add    esp,0x14
c0014cfc:	5b                   	pop    ebx
c0014cfd:	5e                   	pop    esi
c0014cfe:	ff e0                	jmp    eax

c0014d00 <KeProcessExec(Process*, char const*)>:
c0014d00:	56                   	push   esi
c0014d01:	53                   	push   ebx
c0014d02:	83 ec 04             	sub    esp,0x4
c0014d05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014d09:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014d0f:	85 f6                	test   esi,esi
c0014d11:	74 16                	je     c0014d29 <KeProcessExec(Process*, char const*)+0x29>
c0014d13:	83 ec 0c             	sub    esp,0xc
c0014d16:	56                   	push   esi
c0014d17:	e8 00 d9 ff ff       	call   c001261c <VAS::~VAS()>
c0014d1c:	58                   	pop    eax
c0014d1d:	5a                   	pop    edx
c0014d1e:	6a 14                	push   0x14
c0014d20:	56                   	push   esi
c0014d21:	e8 e2 79 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0014d26:	83 c4 10             	add    esp,0x10
c0014d29:	83 ec 0c             	sub    esp,0xc
c0014d2c:	6a 14                	push   0x14
c0014d2e:	e8 5e 9c ff ff       	call   c000e991 <malloc>
c0014d33:	89 c6                	mov    esi,eax
c0014d35:	58                   	pop    eax
c0014d36:	5a                   	pop    edx
c0014d37:	6a 00                	push   0x0
c0014d39:	56                   	push   esi
c0014d3a:	e8 9d dd ff ff       	call   c0012adc <VAS::VAS(bool)>
c0014d3f:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014d45:	59                   	pop    ecx
c0014d46:	5e                   	pop    esi
c0014d47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d4b:	50                   	push   eax
c0014d4c:	53                   	push   ebx
c0014d4d:	e8 35 f0 ff ff       	call   c0013d87 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014d52:	83 c4 14             	add    esp,0x14
c0014d55:	31 c0                	xor    eax,eax
c0014d57:	5b                   	pop    ebx
c0014d58:	5e                   	pop    esi
c0014d59:	c3                   	ret    
c0014d5a:	66 90                	xchg   ax,ax

c0014d5c <userModeEntryPoint(void*)>:
c0014d5c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0014d61:	83 e8 01             	sub    eax,0x1
c0014d64:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0014d69:	75 01                	jne    c0014d6c <userModeEntryPoint(void*)+0x10>
c0014d6b:	fb                   	sti    
c0014d6c:	fb                   	sti    
c0014d6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014d75:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014d7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d7f:	e9 bb b4 fe ff       	jmp    c000023f <goToUsermode>

c0014d84 <changeTSS>:
c0014d84:	83 ec 14             	sub    esp,0x14
c0014d87:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0014d8c:	50                   	push   eax
c0014d8d:	68 32 20 02 c0       	push   0xc0022032
c0014d92:	e8 cd 21 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014d97:	5a                   	pop    edx
c0014d98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d9d:	59                   	pop    ecx
c0014d9e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014da1:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014da6:	c1 e2 15             	shl    edx,0x15
c0014da9:	29 d0                	sub    eax,edx
c0014dab:	50                   	push   eax
c0014dac:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0014db1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014db7:	05 68 11 00 00       	add    eax,0x1168
c0014dbc:	50                   	push   eax
c0014dbd:	e8 62 cb ff ff       	call   c0011924 <TSS::setESP(unsigned long)>
c0014dc2:	83 c4 1c             	add    esp,0x1c
c0014dc5:	c3                   	ret    
c0014dc6:	66 90                	xchg   ax,ax

c0014dc8 <switchToThread(ThreadControlBlock*)>:
c0014dc8:	57                   	push   edi
c0014dc9:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0014dcf:	56                   	push   esi
c0014dd0:	85 c9                	test   ecx,ecx
c0014dd2:	53                   	push   ebx
c0014dd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014dd7:	0f 85 8b 00 00 00    	jne    c0014e68 <switchToThread(ThreadControlBlock*)+0xa0>
c0014ddd:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014de1:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014de7:	74 7b                	je     c0014e64 <switchToThread(ThreadControlBlock*)+0x9c>
c0014de9:	b8 00 04 00 00       	mov    eax,0x400
c0014dee:	29 d0                	sub    eax,edx
c0014df0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014df3:	d1 f8                	sar    eax,1
c0014df5:	01 d0                	add    eax,edx
c0014df7:	90                   	nop
c0014df8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014dfb:	e8 2e 37 00 00       	call   c001852e <HalQueryPerformanceCounter()>
c0014e00:	a3 f0 c6 02 c0       	mov    ds:0xc002c6f0,eax
c0014e05:	89 15 f4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f4,edx
c0014e0b:	89 c6                	mov    esi,eax
c0014e0d:	89 d7                	mov    edi,edx
c0014e0f:	2b 35 e0 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6e0
c0014e15:	a3 e0 c6 02 c0       	mov    ds:0xc002c6e0,eax
c0014e1a:	1b 3d e4 c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6e4
c0014e20:	89 35 e8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e8,esi
c0014e26:	89 3d ec c6 02 c0    	mov    DWORD PTR ds:0xc002c6ec,edi
c0014e2c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014e32:	89 15 e4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e4,edx
c0014e38:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014e3b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014e3e:	01 c6                	add    esi,eax
c0014e40:	11 d7                	adc    edi,edx
c0014e42:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014e45:	83 ec 0c             	sub    esp,0xc
c0014e48:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014e4b:	53                   	push   ebx
c0014e4c:	e8 26 b4 fe ff       	call   c0000277 <switchToThreadASM>
c0014e51:	0f 20 c0             	mov    eax,cr0
c0014e54:	83 c8 08             	or     eax,0x8
c0014e57:	0f 22 c0             	mov    cr0,eax
c0014e5a:	83 c4 10             	add    esp,0x10
c0014e5d:	5b                   	pop    ebx
c0014e5e:	5e                   	pop    esi
c0014e5f:	5f                   	pop    edi
c0014e60:	c3                   	ret    
c0014e61:	8d 76 00             	lea    esi,[esi+0x0]
c0014e64:	31 c0                	xor    eax,eax
c0014e66:	eb 90                	jmp    c0014df8 <switchToThread(ThreadControlBlock*)+0x30>
c0014e68:	5b                   	pop    ebx
c0014e69:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c0014e73:	5e                   	pop    esi
c0014e74:	5f                   	pop    edi
c0014e75:	c3                   	ret    
c0014e76:	66 90                	xchg   ax,ax

c0014e78 <Process::addArgs(char**)>:
c0014e78:	57                   	push   edi
c0014e79:	56                   	push   esi
c0014e7a:	53                   	push   ebx
c0014e7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014e7f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014e83:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014e8d:	85 ff                	test   edi,edi
c0014e8f:	74 4f                	je     c0014ee0 <Process::addArgs(char**)+0x68>
c0014e91:	8b 07                	mov    eax,DWORD PTR [edi]
c0014e93:	85 c0                	test   eax,eax
c0014e95:	74 49                	je     c0014ee0 <Process::addArgs(char**)+0x68>
c0014e97:	31 db                	xor    ebx,ebx
c0014e99:	8d 76 00             	lea    esi,[esi+0x0]
c0014e9c:	83 ec 0c             	sub    esp,0xc
c0014e9f:	50                   	push   eax
c0014ea0:	e8 cb b6 fe ff       	call   c0000570 <strlen>
c0014ea5:	83 c0 01             	add    eax,0x1
c0014ea8:	89 04 24             	mov    DWORD PTR [esp],eax
c0014eab:	e8 e1 9a ff ff       	call   c000e991 <malloc>
c0014eb0:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014eb7:	5a                   	pop    edx
c0014eb8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ebb:	59                   	pop    ecx
c0014ebc:	83 c3 01             	add    ebx,0x1
c0014ebf:	52                   	push   edx
c0014ec0:	50                   	push   eax
c0014ec1:	e8 7a b7 fe ff       	call   c0000640 <strcpy>
c0014ec6:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014ecc:	83 c4 10             	add    esp,0x10
c0014ecf:	83 c1 01             	add    ecx,0x1
c0014ed2:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014ed8:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014edb:	85 c0                	test   eax,eax
c0014edd:	75 bd                	jne    c0014e9c <Process::addArgs(char**)+0x24>
c0014edf:	90                   	nop
c0014ee0:	5b                   	pop    ebx
c0014ee1:	5e                   	pop    esi
c0014ee2:	5f                   	pop    edi
c0014ee3:	c3                   	ret    

c0014ee4 <Process::Process(char const*, Process*, char**)>:
c0014ee4:	56                   	push   esi
c0014ee5:	53                   	push   ebx
c0014ee6:	83 ec 14             	sub    esp,0x14
c0014ee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eed:	05 0c 02 00 00       	add    eax,0x20c
c0014ef2:	bb 07 00 00 00       	mov    ebx,0x7
c0014ef7:	89 c6                	mov    esi,eax
c0014ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0014efc:	85 db                	test   ebx,ebx
c0014efe:	78 14                	js     c0014f14 <Process::Process(char const*, Process*, char**)+0x30>
c0014f00:	83 ec 0c             	sub    esp,0xc
c0014f03:	56                   	push   esi
c0014f04:	e8 07 b5 00 00       	call   c0020410 <ThreadControlBlock::ThreadControlBlock()>
c0014f09:	83 c4 10             	add    esp,0x10
c0014f0c:	83 c6 5f             	add    esi,0x5f
c0014f0f:	83 eb 01             	sub    ebx,0x1
c0014f12:	eb e8                	jmp    c0014efc <Process::Process(char const*, Process*, char**)+0x18>
c0014f14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f18:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014f1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f23:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014f2a:	83 ec 0c             	sub    esp,0xc
c0014f2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f31:	e8 d6 8c ff ff       	call   c000dc0c <KeNewProcessEnv(Process*)>
c0014f36:	83 c4 10             	add    esp,0x10
c0014f39:	89 c2                	mov    edx,eax
c0014f3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f3f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f49:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014f52:	a1 9c 42 02 c0       	mov    eax,ds:0xc002429c
c0014f57:	8d 50 01             	lea    edx,[eax+0x1]
c0014f5a:	89 15 9c 42 02 c0    	mov    DWORD PTR ds:0xc002429c,edx
c0014f60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014f64:	89 02                	mov    DWORD PTR [edx],eax
c0014f66:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014f6e:	83 ec 0c             	sub    esp,0xc
c0014f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f75:	e8 17 9a ff ff       	call   c000e991 <malloc>
c0014f7a:	83 c4 10             	add    esp,0x10
c0014f7d:	89 c3                	mov    ebx,eax
c0014f7f:	83 ec 08             	sub    esp,0x8
c0014f82:	6a 00                	push   0x0
c0014f84:	53                   	push   ebx
c0014f85:	e8 52 db ff ff       	call   c0012adc <VAS::VAS(bool)>
c0014f8a:	83 c4 10             	add    esp,0x10
c0014f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f91:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014f97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f9b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fa9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014fad:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014fb3:	e8 db ad ff ff       	call   c000fd93 <KeInitSignals()>
c0014fb8:	89 c2                	mov    edx,eax
c0014fba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fbe:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fc8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014fce:	85 c0                	test   eax,eax
c0014fd0:	74 42                	je     c0015014 <Process::Process(char const*, Process*, char**)+0x130>
c0014fd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fd6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014fdc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fe6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ff0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ff6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015000:	05 0c 01 00 00       	add    eax,0x10c
c0015005:	83 ec 08             	sub    esp,0x8
c0015008:	52                   	push   edx
c0015009:	50                   	push   eax
c001500a:	e8 31 b6 fe ff       	call   c0000640 <strcpy>
c001500f:	83 c4 10             	add    esp,0x10
c0015012:	eb 64                	jmp    c0015078 <Process::Process(char const*, Process*, char**)+0x194>
c0015014:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001501c:	83 ec 0c             	sub    esp,0xc
c001501f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015023:	e8 69 99 ff ff       	call   c000e991 <malloc>
c0015028:	83 c4 10             	add    esp,0x10
c001502b:	89 c3                	mov    ebx,eax
c001502d:	83 ec 08             	sub    esp,0x8
c0015030:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015034:	53                   	push   ebx
c0015035:	e8 fc c5 ff ff       	call   c0011636 <VgaText::VgaText(char const*)>
c001503a:	83 c4 10             	add    esp,0x10
c001503d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015041:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001504b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015051:	83 ec 0c             	sub    esp,0xc
c0015054:	50                   	push   eax
c0015055:	e8 7a be ff ff       	call   c0010ed4 <addToTerminalCycle(VgaText*)>
c001505a:	83 c4 10             	add    esp,0x10
c001505d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015061:	05 0c 01 00 00       	add    eax,0x10c
c0015066:	83 ec 08             	sub    esp,0x8
c0015069:	68 23 2b 02 c0       	push   0xc0022b23
c001506e:	50                   	push   eax
c001506f:	e8 cc b5 fe ff       	call   c0000640 <strcpy>
c0015074:	83 c4 10             	add    esp,0x10
c0015077:	90                   	nop
c0015078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001507c:	83 c0 0c             	add    eax,0xc
c001507f:	83 ec 08             	sub    esp,0x8
c0015082:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015086:	50                   	push   eax
c0015087:	e8 b4 b5 fe ff       	call   c0000640 <strcpy>
c001508c:	83 c4 10             	add    esp,0x10
c001508f:	83 ec 08             	sub    esp,0x8
c0015092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015096:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001509a:	e8 d9 fd ff ff       	call   c0014e78 <Process::addArgs(char**)>
c001509f:	83 c4 10             	add    esp,0x10
c00150a2:	83 ec 08             	sub    esp,0x8
c00150a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150ad:	e8 d5 ec ff ff       	call   c0013d87 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00150b2:	83 c4 10             	add    esp,0x10
c00150b5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00150b9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00150bd:	83 f0 01             	xor    eax,0x1
c00150c0:	88 c2                	mov    dl,al
c00150c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150c6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00150cc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00150d1:	83 ec 04             	sub    esp,0x4
c00150d4:	50                   	push   eax
c00150d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150d9:	68 7c 2b 02 c0       	push   0xc0022b7c
c00150de:	e8 81 1e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00150e3:	83 c4 10             	add    esp,0x10
c00150e6:	90                   	nop
c00150e7:	83 c4 14             	add    esp,0x14
c00150ea:	5b                   	pop    ebx
c00150eb:	5e                   	pop    esi
c00150ec:	c3                   	ret    
c00150ed:	90                   	nop
c00150ee:	66 90                	xchg   ax,ax

c00150f0 <Process::Process(bool, char const*, Process*, char**)>:
c00150f0:	56                   	push   esi
c00150f1:	53                   	push   ebx
c00150f2:	83 ec 24             	sub    esp,0x24
c00150f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00150f9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00150fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015101:	05 0c 02 00 00       	add    eax,0x20c
c0015106:	bb 07 00 00 00       	mov    ebx,0x7
c001510b:	89 c6                	mov    esi,eax
c001510d:	8d 76 00             	lea    esi,[esi+0x0]
c0015110:	85 db                	test   ebx,ebx
c0015112:	78 14                	js     c0015128 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015114:	83 ec 0c             	sub    esp,0xc
c0015117:	56                   	push   esi
c0015118:	e8 f3 b2 00 00       	call   c0020410 <ThreadControlBlock::ThreadControlBlock()>
c001511d:	83 c4 10             	add    esp,0x10
c0015120:	83 c6 5f             	add    esi,0x5f
c0015123:	83 eb 01             	sub    ebx,0x1
c0015126:	eb e8                	jmp    c0015110 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001512c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015133:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015137:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001513e:	83 ec 0c             	sub    esp,0xc
c0015141:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015145:	e8 c2 8a ff ff       	call   c000dc0c <KeNewProcessEnv(Process*)>
c001514a:	83 c4 10             	add    esp,0x10
c001514d:	89 c2                	mov    edx,eax
c001514f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015153:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001515d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015166:	a1 9c 42 02 c0       	mov    eax,ds:0xc002429c
c001516b:	8d 50 01             	lea    edx,[eax+0x1]
c001516e:	89 15 9c 42 02 c0    	mov    DWORD PTR ds:0xc002429c,edx
c0015174:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015178:	89 02                	mov    DWORD PTR [edx],eax
c001517a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015182:	83 ec 0c             	sub    esp,0xc
c0015185:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015189:	e8 03 98 ff ff       	call   c000e991 <malloc>
c001518e:	83 c4 10             	add    esp,0x10
c0015191:	89 c3                	mov    ebx,eax
c0015193:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015198:	83 ec 08             	sub    esp,0x8
c001519b:	50                   	push   eax
c001519c:	53                   	push   ebx
c001519d:	e8 3a d9 ff ff       	call   c0012adc <VAS::VAS(bool)>
c00151a2:	83 c4 10             	add    esp,0x10
c00151a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151a9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00151af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151b3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00151bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151c1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00151c5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00151cb:	e8 c3 ab ff ff       	call   c000fd93 <KeInitSignals()>
c00151d0:	89 c2                	mov    edx,eax
c00151d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151d6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00151dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00151e6:	85 c0                	test   eax,eax
c00151e8:	74 42                	je     c001522c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00151ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151ee:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00151f4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00151fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151fe:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015204:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015208:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001520e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015218:	05 0c 01 00 00       	add    eax,0x10c
c001521d:	83 ec 08             	sub    esp,0x8
c0015220:	52                   	push   edx
c0015221:	50                   	push   eax
c0015222:	e8 19 b4 fe ff       	call   c0000640 <strcpy>
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	eb 64                	jmp    c0015290 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c001522c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015234:	83 ec 0c             	sub    esp,0xc
c0015237:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001523b:	e8 51 97 ff ff       	call   c000e991 <malloc>
c0015240:	83 c4 10             	add    esp,0x10
c0015243:	89 c3                	mov    ebx,eax
c0015245:	83 ec 08             	sub    esp,0x8
c0015248:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001524c:	53                   	push   ebx
c001524d:	e8 e4 c3 ff ff       	call   c0011636 <VgaText::VgaText(char const*)>
c0015252:	83 c4 10             	add    esp,0x10
c0015255:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015259:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001525f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015263:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015269:	83 ec 0c             	sub    esp,0xc
c001526c:	50                   	push   eax
c001526d:	e8 62 bc ff ff       	call   c0010ed4 <addToTerminalCycle(VgaText*)>
c0015272:	83 c4 10             	add    esp,0x10
c0015275:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015279:	05 0c 01 00 00       	add    eax,0x10c
c001527e:	83 ec 08             	sub    esp,0x8
c0015281:	68 23 2b 02 c0       	push   0xc0022b23
c0015286:	50                   	push   eax
c0015287:	e8 b4 b3 fe ff       	call   c0000640 <strcpy>
c001528c:	83 c4 10             	add    esp,0x10
c001528f:	90                   	nop
c0015290:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015294:	83 c0 0c             	add    eax,0xc
c0015297:	83 ec 08             	sub    esp,0x8
c001529a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001529e:	50                   	push   eax
c001529f:	e8 9c b3 fe ff       	call   c0000640 <strcpy>
c00152a4:	83 c4 10             	add    esp,0x10
c00152a7:	83 ec 08             	sub    esp,0x8
c00152aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00152ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00152b2:	e8 c1 fb ff ff       	call   c0014e78 <Process::addArgs(char**)>
c00152b7:	83 c4 10             	add    esp,0x10
c00152ba:	90                   	nop
c00152bb:	83 c4 24             	add    esp,0x24
c00152be:	5b                   	pop    ebx
c00152bf:	5e                   	pop    esi
c00152c0:	c3                   	ret    
c00152c1:	8d 76 00             	lea    esi,[esi+0x0]

c00152c4 <taskStartupFunction>:
c00152c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00152cc:	c3                   	ret    
c00152cd:	8d 76 00             	lea    esi,[esi+0x0]

c00152d0 <KeDisablePreemption()>:
c00152d0:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c00152d5:	85 c0                	test   eax,eax
c00152d7:	75 13                	jne    c00152ec <KeDisablePreemption()+0x1c>
c00152d9:	8a 15 74 9d 02 c0    	mov    dl,BYTE PTR ds:0xc0029d74
c00152df:	c6 05 74 9d 02 c0 00 	mov    BYTE PTR ds:0xc0029d74,0x0
c00152e6:	88 15 88 c6 02 c0    	mov    BYTE PTR ds:0xc002c688,dl
c00152ec:	83 c0 01             	add    eax,0x1
c00152ef:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c00152f4:	c3                   	ret    
c00152f5:	8d 76 00             	lea    esi,[esi+0x0]

c00152f8 <KeRestorePreemption()>:
c00152f8:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c00152fd:	83 e8 01             	sub    eax,0x1
c0015300:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c0015305:	75 0d                	jne    c0015314 <KeRestorePreemption()+0x1c>
c0015307:	a0 88 c6 02 c0       	mov    al,ds:0xc002c688
c001530c:	a2 74 9d 02 c0       	mov    ds:0xc0029d74,al
c0015311:	8d 76 00             	lea    esi,[esi+0x0]
c0015314:	c3                   	ret    
c0015315:	90                   	nop
c0015316:	66 90                	xchg   ax,ax

c0015318 <Process::createThread(void (*)(void*), void*, int)>:
c0015318:	57                   	push   edi
c0015319:	31 c9                	xor    ecx,ecx
c001531b:	56                   	push   esi
c001531c:	53                   	push   ebx
c001531d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015321:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015328:	89 f2                	mov    edx,esi
c001532a:	66 90                	xchg   ax,ax
c001532c:	0f b7 c2             	movzx  eax,dx
c001532f:	80 e2 01             	and    dl,0x1
c0015332:	74 14                	je     c0015348 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015334:	d1 f8                	sar    eax,1
c0015336:	83 c1 01             	add    ecx,0x1
c0015339:	89 c2                	mov    edx,eax
c001533b:	83 f9 10             	cmp    ecx,0x10
c001533e:	75 ec                	jne    c001532c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015340:	31 db                	xor    ebx,ebx
c0015342:	89 d8                	mov    eax,ebx
c0015344:	5b                   	pop    ebx
c0015345:	5e                   	pop    esi
c0015346:	5f                   	pop    edi
c0015347:	c3                   	ret    
c0015348:	b8 01 00 00 00       	mov    eax,0x1
c001534d:	d3 e0                	shl    eax,cl
c001534f:	09 c6                	or     esi,eax
c0015351:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015354:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001535b:	01 c0                	add    eax,eax
c001535d:	01 c8                	add    eax,ecx
c001535f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015362:	01 d8                	add    eax,ebx
c0015364:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001536b:	75 0b                	jne    c0015378 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001536d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015377:	90                   	nop
c0015378:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001537e:	83 ec 0c             	sub    esp,0xc
c0015381:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015384:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015387:	01 c0                	add    eax,eax
c0015389:	01 c8                	add    eax,ecx
c001538b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001538e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015391:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015397:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c001539d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00153a1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00153a7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00153ad:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00153b3:	89 ca                	mov    edx,ecx
c00153b5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00153bc:	f7 da                	neg    edx
c00153be:	c1 e2 15             	shl    edx,0x15
c00153c1:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00153c7:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00153cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00153d1:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00153db:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00153e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153e5:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00153eb:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00153f5:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00153ff:	68 00 01 00 00       	push   0x100
c0015404:	e8 88 95 ff ff       	call   c000e991 <malloc>
c0015409:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001540c:	58                   	pop    eax
c001540d:	5a                   	pop    edx
c001540e:	53                   	push   ebx
c001540f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015414:	e8 a3 ab 00 00       	call   c001ffbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015419:	83 c4 10             	add    esp,0x10
c001541c:	89 d8                	mov    eax,ebx
c001541e:	5b                   	pop    ebx
c001541f:	5e                   	pop    esi
c0015420:	5f                   	pop    edi
c0015421:	c3                   	ret    
c0015422:	66 90                	xchg   ax,ax

c0015424 <Process::createUserThread()>:
c0015424:	83 ec 0c             	sub    esp,0xc
c0015427:	68 80 00 00 00       	push   0x80
c001542c:	6a 00                	push   0x0
c001542e:	68 5c 4d 01 c0       	push   0xc0014d5c
c0015433:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015437:	50                   	push   eax
c0015438:	e8 db fe ff ff       	call   c0015318 <Process::createThread(void (*)(void*), void*, int)>
c001543d:	83 c4 1c             	add    esp,0x1c
c0015440:	c3                   	ret    
c0015441:	8d 76 00             	lea    esi,[esi+0x0]

c0015444 <setupMultitasking(void (*)())>:
c0015444:	56                   	push   esi
c0015445:	53                   	push   ebx
c0015446:	83 ec 04             	sub    esp,0x4
c0015449:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001544d:	eb 11                	jmp    c0015460 <setupMultitasking(void (*)())+0x1c>
c001544f:	90                   	nop
c0015450:	83 ec 0c             	sub    esp,0xc
c0015453:	68 cc c6 02 c0       	push   0xc002c6cc
c0015458:	e8 a3 aa 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	83 ec 0c             	sub    esp,0xc
c0015463:	68 cc c6 02 c0       	push   0xc002c6cc
c0015468:	e8 6f aa 00 00       	call   c001fedc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001546d:	83 c4 10             	add    esp,0x10
c0015470:	84 c0                	test   al,al
c0015472:	74 dc                	je     c0015450 <setupMultitasking(void (*)())+0xc>
c0015474:	83 ec 0c             	sub    esp,0xc
c0015477:	68 24 07 00 00       	push   0x724
c001547c:	e8 10 95 ff ff       	call   c000e991 <malloc>
c0015481:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015488:	89 c3                	mov    ebx,eax
c001548a:	6a 00                	push   0x0
c001548c:	68 27 2b 02 c0       	push   0xc0022b27
c0015491:	6a 01                	push   0x1
c0015493:	50                   	push   eax
c0015494:	e8 57 fc ff ff       	call   c00150f0 <Process::Process(bool, char const*, Process*, char**)>
c0015499:	83 c4 14             	add    esp,0x14
c001549c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00154a2:	89 1d d8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6d8,ebx
c00154a8:	50                   	push   eax
c00154a9:	e8 7b bc ff ff       	call   c0011129 <setActiveTerminal(VgaText*)>
c00154ae:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00154b5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00154bf:	83 c8 01             	or     eax,0x1
c00154c2:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00154c9:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00154cf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00154d2:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00154dc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00154e2:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00154e8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00154f2:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00154fc:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015506:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001550c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015516:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001551c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015526:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c001552d:	e8 5f 94 ff ff       	call   c000e991 <malloc>
c0015532:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015538:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001553e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015544:	5a                   	pop    edx
c0015545:	59                   	pop    ecx
c0015546:	68 23 2b 02 c0       	push   0xc0022b23
c001554b:	50                   	push   eax
c001554c:	e8 ef b0 fe ff       	call   c0000640 <strcpy>
c0015551:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015558:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001555c:	83 c4 14             	add    esp,0x14
c001555f:	5b                   	pop    ebx
c0015560:	5e                   	pop    esi
c0015561:	e9 03 ad fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015566:	66 90                	xchg   ax,ax

c0015568 <schedule()>:
c0015568:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c001556e:	85 d2                	test   edx,edx
c0015570:	74 0e                	je     c0015580 <schedule()+0x18>
c0015572:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c001557c:	c3                   	ret    
c001557d:	8d 76 00             	lea    esi,[esi+0x0]
c0015580:	53                   	push   ebx
c0015581:	83 ec 14             	sub    esp,0x14
c0015584:	68 cc c6 02 c0       	push   0xc002c6cc
c0015589:	e8 4e a9 00 00       	call   c001fedc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001558e:	83 c4 10             	add    esp,0x10
c0015591:	84 c0                	test   al,al
c0015593:	75 3f                	jne    c00155d4 <schedule()+0x6c>
c0015595:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001559a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001559d:	83 fa 01             	cmp    edx,0x1
c00155a0:	74 3a                	je     c00155dc <schedule()+0x74>
c00155a2:	66 90                	xchg   ax,ax
c00155a4:	83 ec 0c             	sub    esp,0xc
c00155a7:	68 cc c6 02 c0       	push   0xc002c6cc
c00155ac:	e8 47 a9 00 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00155b1:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00155b8:	89 c3                	mov    ebx,eax
c00155ba:	e8 41 a9 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00155bf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00155c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155c9:	e8 fa f7 ff ff       	call   c0014dc8 <switchToThread(ThreadControlBlock*)>
c00155ce:	83 c4 10             	add    esp,0x10
c00155d1:	8d 76 00             	lea    esi,[esi+0x0]
c00155d4:	83 c4 08             	add    esp,0x8
c00155d7:	5b                   	pop    ebx
c00155d8:	c3                   	ret    
c00155d9:	8d 76 00             	lea    esi,[esi+0x0]
c00155dc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00155e3:	83 ec 08             	sub    esp,0x8
c00155e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155eb:	50                   	push   eax
c00155ec:	68 cc c6 02 c0       	push   0xc002c6cc
c00155f1:	e8 c6 a9 00 00       	call   c001ffbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155f6:	83 c4 10             	add    esp,0x10
c00155f9:	eb a9                	jmp    c00155a4 <schedule()+0x3c>
c00155fb:	90                   	nop

c00155fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00155fc:	83 ec 0c             	sub    esp,0xc
c00155ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015604:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015608:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001560b:	e8 58 ff ff ff       	call   c0015568 <schedule()>
c0015610:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015615:	83 e8 01             	sub    eax,0x1
c0015618:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001561d:	75 01                	jne    c0015620 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001561f:	fb                   	sti    
c0015620:	83 c4 0c             	add    esp,0xc
c0015623:	c3                   	ret    

c0015624 <blockTask(TaskState)>:
c0015624:	83 ec 0c             	sub    esp,0xc
c0015627:	fa                   	cli    
c0015628:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001562d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015631:	83 c0 01             	add    eax,0x1
c0015634:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015639:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001563e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015641:	e8 22 ff ff ff       	call   c0015568 <schedule()>
c0015646:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001564b:	83 e8 01             	sub    eax,0x1
c001564e:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015653:	75 03                	jne    c0015658 <blockTask(TaskState)+0x34>
c0015655:	fb                   	sti    
c0015656:	66 90                	xchg   ax,ax
c0015658:	83 c4 0c             	add    esp,0xc
c001565b:	c3                   	ret    

c001565c <waitTask(int, int*, int)>:
c001565c:	83 ec 18             	sub    esp,0x18
c001565f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015664:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015668:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001566b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001566f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015674:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015677:	6a 07                	push   0x7
c0015679:	e8 a6 ff ff ff       	call   c0015624 <blockTask(TaskState)>
c001567e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015683:	83 c4 10             	add    esp,0x10
c0015686:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015689:	85 d2                	test   edx,edx
c001568b:	74 0b                	je     c0015698 <waitTask(int, int*, int)+0x3c>
c001568d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015690:	89 02                	mov    DWORD PTR [edx],eax
c0015692:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015697:	90                   	nop
c0015698:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001569b:	83 c4 0c             	add    esp,0xc
c001569e:	c3                   	ret    
c001569f:	90                   	nop

c00156a0 <milliTenthSleepUntil(unsigned int)>:
c00156a0:	83 ec 0c             	sub    esp,0xc
c00156a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156a7:	39 05 ec 97 02 c0    	cmp    DWORD PTR ds:0xc00297ec,eax
c00156ad:	76 05                	jbe    c00156b4 <milliTenthSleepUntil(unsigned int)+0x14>
c00156af:	90                   	nop
c00156b0:	83 c4 0c             	add    esp,0xc
c00156b3:	c3                   	ret    
c00156b4:	fa                   	cli    
c00156b5:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00156bb:	83 ec 08             	sub    esp,0x8
c00156be:	83 c2 01             	add    edx,0x1
c00156c1:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c00156c7:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c00156cd:	83 c1 01             	add    ecx,0x1
c00156d0:	89 0d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ecx
c00156d6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00156dc:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00156df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156e4:	50                   	push   eax
c00156e5:	68 c0 c6 02 c0       	push   0xc002c6c0
c00156ea:	e8 cd a8 00 00       	call   c001ffbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00156ef:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00156f6:	e8 29 ff ff ff       	call   c0015624 <blockTask(TaskState)>
c00156fb:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015700:	83 c4 10             	add    esp,0x10
c0015703:	83 e8 01             	sub    eax,0x1
c0015706:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c001570b:	85 c0                	test   eax,eax
c001570d:	75 09                	jne    c0015718 <milliTenthSleepUntil(unsigned int)+0x78>
c001570f:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0015714:	85 c0                	test   eax,eax
c0015716:	75 14                	jne    c001572c <milliTenthSleepUntil(unsigned int)+0x8c>
c0015718:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001571d:	83 e8 01             	sub    eax,0x1
c0015720:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015725:	75 89                	jne    c00156b0 <milliTenthSleepUntil(unsigned int)+0x10>
c0015727:	fb                   	sti    
c0015728:	83 c4 0c             	add    esp,0xc
c001572b:	c3                   	ret    
c001572c:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015736:	e8 2d fe ff ff       	call   c0015568 <schedule()>
c001573b:	eb db                	jmp    c0015718 <milliTenthSleepUntil(unsigned int)+0x78>
c001573d:	8d 76 00             	lea    esi,[esi+0x0]

c0015740 <milliTenthSleep(unsigned int)>:
c0015740:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015744:	a1 ec 97 02 c0       	mov    eax,ds:0xc00297ec
c0015749:	01 c2                	add    edx,eax
c001574b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001574f:	e9 4c ff ff ff       	jmp    c00156a0 <milliTenthSleepUntil(unsigned int)>

c0015754 <sleep(unsigned int)>:
c0015754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015758:	8d 04 80             	lea    eax,[eax+eax*4]
c001575b:	8d 04 80             	lea    eax,[eax+eax*4]
c001575e:	8d 04 80             	lea    eax,[eax+eax*4]
c0015761:	8d 04 80             	lea    eax,[eax+eax*4]
c0015764:	c1 e0 04             	shl    eax,0x4
c0015767:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001576b:	eb d3                	jmp    c0015740 <milliTenthSleep(unsigned int)>
c001576d:	8d 76 00             	lea    esi,[esi+0x0]

c0015770 <taskReturned>:
c0015770:	83 ec 18             	sub    esp,0x18
c0015773:	68 a8 2b 02 c0       	push   0xc0022ba8
c0015778:	e8 69 95 ff ff       	call   c000ece6 <KePanic(char const*)>
c001577d:	83 c4 10             	add    esp,0x10
c0015780:	83 ec 0c             	sub    esp,0xc
c0015783:	6a 02                	push   0x2
c0015785:	e8 9a fe ff ff       	call   c0015624 <blockTask(TaskState)>
c001578a:	fa                   	cli    
c001578b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015790:	83 c0 01             	add    eax,0x1
c0015793:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015798:	e8 cb fd ff ff       	call   c0015568 <schedule()>
c001579d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00157a2:	83 c4 10             	add    esp,0x10
c00157a5:	83 e8 01             	sub    eax,0x1
c00157a8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00157ad:	85 c0                	test   eax,eax
c00157af:	75 cf                	jne    c0015780 <taskReturned+0x10>
c00157b1:	fb                   	sti    
c00157b2:	eb cc                	jmp    c0015780 <taskReturned+0x10>

c00157b4 <Thr::processFromPID(int)>:
c00157b4:	57                   	push   edi
c00157b5:	56                   	push   esi
c00157b6:	53                   	push   ebx
c00157b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157bb:	fa                   	cli    
c00157bc:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c00157c2:	83 ec 0c             	sub    esp,0xc
c00157c5:	83 c1 01             	add    ecx,0x1
c00157c8:	68 cc c6 02 c0       	push   0xc002c6cc
c00157cd:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c00157d3:	e8 20 a7 00 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157d8:	83 c4 10             	add    esp,0x10
c00157db:	89 c7                	mov    edi,eax
c00157dd:	eb 15                	jmp    c00157f4 <Thr::processFromPID(int)+0x40>
c00157df:	90                   	nop
c00157e0:	83 ec 0c             	sub    esp,0xc
c00157e3:	68 cc c6 02 c0       	push   0xc002c6cc
c00157e8:	e8 0b a7 00 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157ed:	83 c4 10             	add    esp,0x10
c00157f0:	39 f8                	cmp    eax,edi
c00157f2:	74 50                	je     c0015844 <Thr::processFromPID(int)+0x90>
c00157f4:	83 ec 0c             	sub    esp,0xc
c00157f7:	68 cc c6 02 c0       	push   0xc002c6cc
c00157fc:	e8 f7 a6 00 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015801:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015808:	89 c3                	mov    ebx,eax
c001580a:	e8 f1 a6 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001580f:	58                   	pop    eax
c0015810:	5a                   	pop    edx
c0015811:	53                   	push   ebx
c0015812:	68 cc c6 02 c0       	push   0xc002c6cc
c0015817:	e8 a0 a7 00 00       	call   c001ffbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001581c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001581f:	83 c4 10             	add    esp,0x10
c0015822:	39 30                	cmp    DWORD PTR [eax],esi
c0015824:	75 ba                	jne    c00157e0 <Thr::processFromPID(int)+0x2c>
c0015826:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001582b:	83 e8 01             	sub    eax,0x1
c001582e:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015833:	74 0b                	je     c0015840 <Thr::processFromPID(int)+0x8c>
c0015835:	8d 76 00             	lea    esi,[esi+0x0]
c0015838:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001583b:	5b                   	pop    ebx
c001583c:	5e                   	pop    esi
c001583d:	5f                   	pop    edi
c001583e:	c3                   	ret    
c001583f:	90                   	nop
c0015840:	fb                   	sti    
c0015841:	eb f5                	jmp    c0015838 <Thr::processFromPID(int)+0x84>
c0015843:	90                   	nop
c0015844:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015849:	83 e8 01             	sub    eax,0x1
c001584c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015851:	75 05                	jne    c0015858 <Thr::processFromPID(int)+0xa4>
c0015853:	fb                   	sti    
c0015854:	5b                   	pop    ebx
c0015855:	5e                   	pop    esi
c0015856:	5f                   	pop    edi
c0015857:	c3                   	ret    
c0015858:	5b                   	pop    ebx
c0015859:	31 c0                	xor    eax,eax
c001585b:	5e                   	pop    esi
c001585c:	5f                   	pop    edi
c001585d:	c3                   	ret    
c001585e:	66 90                	xchg   ax,ax

c0015860 <unblockTask(ThreadControlBlock*)>:
c0015860:	53                   	push   ebx
c0015861:	83 ec 08             	sub    esp,0x8
c0015864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015868:	fa                   	cli    
c0015869:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001586e:	83 c0 01             	add    eax,0x1
c0015871:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015876:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015879:	85 c0                	test   eax,eax
c001587b:	74 67                	je     c00158e4 <unblockTask(ThreadControlBlock*)+0x84>
c001587d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015880:	83 f8 01             	cmp    eax,0x1
c0015883:	74 37                	je     c00158bc <unblockTask(ThreadControlBlock*)+0x5c>
c0015885:	83 ec 0c             	sub    esp,0xc
c0015888:	68 cc c6 02 c0       	push   0xc002c6cc
c001588d:	e8 66 a6 00 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015892:	83 c4 10             	add    esp,0x10
c0015895:	85 c0                	test   eax,eax
c0015897:	75 1b                	jne    c00158b4 <unblockTask(ThreadControlBlock*)+0x54>
c0015899:	eb 5d                	jmp    c00158f8 <unblockTask(ThreadControlBlock*)+0x98>
c001589b:	90                   	nop
c001589c:	83 ec 08             	sub    esp,0x8
c001589f:	50                   	push   eax
c00158a0:	68 cc c6 02 c0       	push   0xc002c6cc
c00158a5:	e8 5a ab 00 00       	call   c0020404 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00158aa:	83 c4 10             	add    esp,0x10
c00158ad:	85 c0                	test   eax,eax
c00158af:	74 47                	je     c00158f8 <unblockTask(ThreadControlBlock*)+0x98>
c00158b1:	8d 76 00             	lea    esi,[esi+0x0]
c00158b4:	39 c3                	cmp    ebx,eax
c00158b6:	75 e4                	jne    c001589c <unblockTask(ThreadControlBlock*)+0x3c>
c00158b8:	eb 12                	jmp    c00158cc <unblockTask(ThreadControlBlock*)+0x6c>
c00158ba:	66 90                	xchg   ax,ax
c00158bc:	83 ec 0c             	sub    esp,0xc
c00158bf:	68 45 2b 02 c0       	push   0xc0022b45
c00158c4:	e8 9b 16 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00158c9:	83 c4 10             	add    esp,0x10
c00158cc:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00158d1:	83 e8 01             	sub    eax,0x1
c00158d4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00158d9:	75 01                	jne    c00158dc <unblockTask(ThreadControlBlock*)+0x7c>
c00158db:	fb                   	sti    
c00158dc:	83 c4 08             	add    esp,0x8
c00158df:	5b                   	pop    ebx
c00158e0:	c3                   	ret    
c00158e1:	8d 76 00             	lea    esi,[esi+0x0]
c00158e4:	83 ec 0c             	sub    esp,0xc
c00158e7:	68 2e 2b 02 c0       	push   0xc0022b2e
c00158ec:	e8 73 16 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00158f1:	83 c4 10             	add    esp,0x10
c00158f4:	eb d6                	jmp    c00158cc <unblockTask(ThreadControlBlock*)+0x6c>
c00158f6:	66 90                	xchg   ax,ax
c00158f8:	83 ec 08             	sub    esp,0x8
c00158fb:	53                   	push   ebx
c00158fc:	68 cc c6 02 c0       	push   0xc002c6cc
c0015901:	e8 b6 a6 00 00       	call   c001ffbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015906:	83 c4 10             	add    esp,0x10
c0015909:	eb c1                	jmp    c00158cc <unblockTask(ThreadControlBlock*)+0x6c>
c001590b:	90                   	nop

c001590c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001590c:	55                   	push   ebp
c001590d:	57                   	push   edi
c001590e:	56                   	push   esi
c001590f:	53                   	push   ebx
c0015910:	83 ec 1c             	sub    esp,0x1c
c0015913:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015917:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001591a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015920:	85 ed                	test   ebp,ebp
c0015922:	7e 28                	jle    c001594c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015924:	31 f6                	xor    esi,esi
c0015926:	66 90                	xchg   ax,ax
c0015928:	83 ec 0c             	sub    esp,0xc
c001592b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015932:	83 c6 01             	add    esi,0x1
c0015935:	57                   	push   edi
c0015936:	e8 66 90 ff ff       	call   c000e9a1 <free>
c001593b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001593e:	83 c4 10             	add    esp,0x10
c0015941:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015947:	7f df                	jg     c0015928 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015949:	8d 76 00             	lea    esi,[esi+0x0]
c001594c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015956:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001595b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001595e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015961:	d3 c0                	rol    eax,cl
c0015963:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001596a:	21 c8                	and    eax,ecx
c001596c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015973:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015976:	89 f7                	mov    edi,esi
c0015978:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015980:	0f 85 72 01 00 00    	jne    c0015af8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015986:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001598c:	85 ed                	test   ebp,ebp
c001598e:	74 1c                	je     c00159ac <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015990:	83 ec 0c             	sub    esp,0xc
c0015993:	55                   	push   ebp
c0015994:	e8 8f 81 ff ff       	call   c000db28 <EnvVarContainer::~EnvVarContainer()>
c0015999:	59                   	pop    ecx
c001599a:	5e                   	pop    esi
c001599b:	6a 0c                	push   0xc
c001599d:	55                   	push   ebp
c001599e:	e8 65 6d ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c00159a3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00159a6:	83 c4 10             	add    esp,0x10
c00159a9:	89 f7                	mov    edi,esi
c00159ab:	90                   	nop
c00159ac:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00159b2:	85 c0                	test   eax,eax
c00159b4:	0f 84 b2 00 00 00    	je     c0015a6c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00159ba:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00159bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00159c1:	31 c9                	xor    ecx,ecx
c00159c3:	eb 17                	jmp    c00159dc <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00159c5:	8d 76 00             	lea    esi,[esi+0x0]
c00159c8:	83 c1 01             	add    ecx,0x1
c00159cb:	83 f9 10             	cmp    ecx,0x10
c00159ce:	0f 84 98 00 00 00    	je     c0015a6c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00159d4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00159da:	66 90                	xchg   ax,ax
c00159dc:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00159e3:	d3 fa                	sar    edx,cl
c00159e5:	80 e2 01             	and    dl,0x1
c00159e8:	74 de                	je     c00159c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00159ea:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00159ed:	01 d2                	add    edx,edx
c00159ef:	01 ca                	add    edx,ecx
c00159f1:	8d 14 92             	lea    edx,[edx+edx*4]
c00159f4:	01 d0                	add    eax,edx
c00159f6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00159fc:	83 fd 07             	cmp    ebp,0x7
c00159ff:	75 c7                	jne    c00159c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a01:	05 40 02 00 00       	add    eax,0x240
c0015a06:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015a09:	83 fd ff             	cmp    ebp,0xffffffff
c0015a0c:	0f 8c ee 00 00 00    	jl     c0015b00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015a12:	0f 84 ac 01 00 00    	je     c0015bc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015a18:	85 ed                	test   ebp,ebp
c0015a1a:	0f 84 90 01 00 00    	je     c0015bb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015a20:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015a22:	75 a4                	jne    c00159c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a24:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015a2a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a2e:	01 d0                	add    eax,edx
c0015a30:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015a34:	83 ec 0c             	sub    esp,0xc
c0015a37:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015a3d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a40:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a46:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015a4d:	50                   	push   eax
c0015a4e:	e8 0d fe ff ff       	call   c0015860 <unblockTask(ThreadControlBlock*)>
c0015a53:	83 c4 10             	add    esp,0x10
c0015a56:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a5d:	89 f7                	mov    edi,esi
c0015a5f:	83 c1 01             	add    ecx,0x1
c0015a62:	83 f9 10             	cmp    ecx,0x10
c0015a65:	0f 85 69 ff ff ff    	jne    c00159d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015a6b:	90                   	nop
c0015a6c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015a72:	85 c0                	test   eax,eax
c0015a74:	74 62                	je     c0015ad8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015a76:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015a7c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015a82:	74 54                	je     c0015ad8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015a84:	83 ec 0c             	sub    esp,0xc
c0015a87:	68 cc c6 02 c0       	push   0xc002c6cc
c0015a8c:	e8 67 a4 00 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a91:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015a98:	89 c7                	mov    edi,eax
c0015a9a:	e8 3d a4 00 00       	call   c001fedc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a9f:	83 c4 10             	add    esp,0x10
c0015aa2:	84 c0                	test   al,al
c0015aa4:	0f 84 ce 00 00 00    	je     c0015b78 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015aaa:	66 90                	xchg   ax,ax
c0015aac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015aaf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015ab5:	85 d2                	test   edx,edx
c0015ab7:	74 0f                	je     c0015ac8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015ab9:	83 ec 0c             	sub    esp,0xc
c0015abc:	8b 02                	mov    eax,DWORD PTR [edx]
c0015abe:	52                   	push   edx
c0015abf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ac2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ac5:	83 c4 10             	add    esp,0x10
c0015ac8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015ad2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ad8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015ade:	85 db                	test   ebx,ebx
c0015ae0:	74 16                	je     c0015af8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015ae2:	83 ec 0c             	sub    esp,0xc
c0015ae5:	53                   	push   ebx
c0015ae6:	e8 31 cb ff ff       	call   c001261c <VAS::~VAS()>
c0015aeb:	58                   	pop    eax
c0015aec:	5a                   	pop    edx
c0015aed:	6a 14                	push   0x14
c0015aef:	53                   	push   ebx
c0015af0:	e8 13 6c ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0015af5:	83 c4 10             	add    esp,0x10
c0015af8:	83 c4 1c             	add    esp,0x1c
c0015afb:	5b                   	pop    ebx
c0015afc:	5e                   	pop    esi
c0015afd:	5f                   	pop    edi
c0015afe:	5d                   	pop    ebp
c0015aff:	c3                   	ret    
c0015b00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b04:	83 ec 0c             	sub    esp,0xc
c0015b07:	68 dc 2b 02 c0       	push   0xc0022bdc
c0015b0c:	e8 d5 91 ff ff       	call   c000ece6 <KePanic(char const*)>
c0015b11:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	89 f7                	mov    edi,esi
c0015b19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b1d:	e9 a6 fe ff ff       	jmp    c00159c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015b22:	66 90                	xchg   ax,ax
c0015b24:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b2a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015b30:	75 1e                	jne    c0015b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015b32:	83 ec 0c             	sub    esp,0xc
c0015b35:	68 44 2c 02 c0       	push   0xc0022c44
c0015b3a:	e8 25 14 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015b3f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015b46:	e8 d9 fa ff ff       	call   c0015624 <blockTask(TaskState)>
c0015b4b:	83 c4 10             	add    esp,0x10
c0015b4e:	66 90                	xchg   ax,ax
c0015b50:	83 ec 08             	sub    esp,0x8
c0015b53:	56                   	push   esi
c0015b54:	68 cc c6 02 c0       	push   0xc002c6cc
c0015b59:	e8 5e a4 00 00       	call   c001ffbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b5e:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015b65:	e8 8e a3 00 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b6a:	83 c4 10             	add    esp,0x10
c0015b6d:	39 f8                	cmp    eax,edi
c0015b6f:	0f 84 37 ff ff ff    	je     c0015aac <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015b75:	8d 76 00             	lea    esi,[esi+0x0]
c0015b78:	83 ec 0c             	sub    esp,0xc
c0015b7b:	68 cc c6 02 c0       	push   0xc002c6cc
c0015b80:	e8 73 a3 00 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b85:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015b8c:	89 c6                	mov    esi,eax
c0015b8e:	e8 6d a3 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b93:	83 c4 10             	add    esp,0x10
c0015b96:	39 f3                	cmp    ebx,esi
c0015b98:	74 b6                	je     c0015b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015b9a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015b9d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ba0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015ba6:	75 a8                	jne    c0015b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015ba8:	e9 77 ff ff ff       	jmp    c0015b24 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015bad:	8d 76 00             	lea    esi,[esi+0x0]
c0015bb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015bb4:	83 ec 0c             	sub    esp,0xc
c0015bb7:	68 10 2c 02 c0       	push   0xc0022c10
c0015bbc:	e9 4b ff ff ff       	jmp    c0015b0c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0015bc4:	8b 36                	mov    esi,DWORD PTR [esi]
c0015bc6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015bca:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015bcd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015bd0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015bd6:	01 d7                	add    edi,edx
c0015bd8:	89 f8                	mov    eax,edi
c0015bda:	e9 51 fe ff ff       	jmp    c0015a30 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015bdf:	90                   	nop

c0015be0 <cleanerTaskFunction(void*)>:
c0015be0:	53                   	push   ebx
c0015be1:	83 ec 08             	sub    esp,0x8
c0015be4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015be9:	83 e8 01             	sub    eax,0x1
c0015bec:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015bf1:	75 01                	jne    c0015bf4 <cleanerTaskFunction(void*)+0x14>
c0015bf3:	fb                   	sti    
c0015bf4:	fa                   	cli    
c0015bf5:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015bfa:	80 3d 94 c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c694,0x0
c0015c01:	8d 50 01             	lea    edx,[eax+0x1]
c0015c04:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015c0a:	0f 84 c4 00 00 00    	je     c0015cd4 <cleanerTaskFunction(void*)+0xf4>
c0015c10:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c15:	85 c0                	test   eax,eax
c0015c17:	75 03                	jne    c0015c1c <cleanerTaskFunction(void*)+0x3c>
c0015c19:	fb                   	sti    
c0015c1a:	66 90                	xchg   ax,ax
c0015c1c:	c6 05 94 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c694,0x0
c0015c23:	fa                   	cli    
c0015c24:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015c2a:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0015c30:	83 c2 01             	add    edx,0x1
c0015c33:	83 c1 01             	add    ecx,0x1
c0015c36:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015c3c:	89 0d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ecx
c0015c42:	fa                   	cli    
c0015c43:	8b 1d b0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6b0
c0015c49:	83 c3 01             	add    ebx,0x1
c0015c4c:	89 1d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ebx
c0015c52:	eb 28                	jmp    c0015c7c <cleanerTaskFunction(void*)+0x9c>
c0015c54:	83 ec 0c             	sub    esp,0xc
c0015c57:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015c5c:	e8 97 a2 00 00       	call   c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c61:	c7 04 24 b4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6b4
c0015c68:	89 c3                	mov    ebx,eax
c0015c6a:	e8 91 a2 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c72:	e8 95 fc ff ff       	call   c001590c <cleanupTerminatedTask(ThreadControlBlock*)>
c0015c77:	83 c4 10             	add    esp,0x10
c0015c7a:	66 90                	xchg   ax,ax
c0015c7c:	83 ec 0c             	sub    esp,0xc
c0015c7f:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015c84:	e8 53 a2 00 00       	call   c001fedc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c89:	83 c4 10             	add    esp,0x10
c0015c8c:	84 c0                	test   al,al
c0015c8e:	74 c4                	je     c0015c54 <cleanerTaskFunction(void*)+0x74>
c0015c90:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c95:	83 e8 01             	sub    eax,0x1
c0015c98:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c9d:	75 01                	jne    c0015ca0 <cleanerTaskFunction(void*)+0xc0>
c0015c9f:	fb                   	sti    
c0015ca0:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015ca5:	83 e8 01             	sub    eax,0x1
c0015ca8:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015cad:	0f 85 31 ff ff ff    	jne    c0015be4 <cleanerTaskFunction(void*)+0x4>
c0015cb3:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0015cb8:	85 c0                	test   eax,eax
c0015cba:	0f 84 24 ff ff ff    	je     c0015be4 <cleanerTaskFunction(void*)+0x4>
c0015cc0:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015cca:	e8 99 f8 ff ff       	call   c0015568 <schedule()>
c0015ccf:	e9 10 ff ff ff       	jmp    c0015be4 <cleanerTaskFunction(void*)+0x4>
c0015cd4:	83 ec 0c             	sub    esp,0xc
c0015cd7:	6a 02                	push   0x2
c0015cd9:	e8 1e f9 ff ff       	call   c00155fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015cde:	83 c4 10             	add    esp,0x10
c0015ce1:	e9 36 ff ff ff       	jmp    c0015c1c <cleanerTaskFunction(void*)+0x3c>
c0015ce6:	66 90                	xchg   ax,ax

c0015ce8 <terminateTask(int)>:
c0015ce8:	83 ec 14             	sub    esp,0x14
c0015ceb:	fa                   	cli    
c0015cec:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015cf2:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0015cf8:	83 c2 01             	add    edx,0x1
c0015cfb:	83 c1 01             	add    ecx,0x1
c0015cfe:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015d04:	89 0d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ecx
c0015d0a:	fa                   	cli    
c0015d0b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015d10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d14:	83 c0 01             	add    eax,0x1
c0015d17:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015d1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d21:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015d24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d29:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015d2c:	50                   	push   eax
c0015d2d:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015d32:	e8 85 a2 00 00       	call   c001ffbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015d46:	a1 90 c6 02 c0       	mov    eax,ds:0xc002c690
c0015d4b:	85 c0                	test   eax,eax
c0015d4d:	74 65                	je     c0015db4 <terminateTask(int)+0xcc>
c0015d4f:	83 ec 0c             	sub    esp,0xc
c0015d52:	c6 05 94 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c694,0x1
c0015d59:	50                   	push   eax
c0015d5a:	e8 01 fb ff ff       	call   c0015860 <unblockTask(ThreadControlBlock*)>
c0015d5f:	83 c4 10             	add    esp,0x10
c0015d62:	66 90                	xchg   ax,ax
c0015d64:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015d69:	83 e8 01             	sub    eax,0x1
c0015d6c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015d71:	75 01                	jne    c0015d74 <terminateTask(int)+0x8c>
c0015d73:	fb                   	sti    
c0015d74:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015d79:	83 e8 01             	sub    eax,0x1
c0015d7c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015d81:	75 09                	jne    c0015d8c <terminateTask(int)+0xa4>
c0015d83:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c0015d8a:	75 3c                	jne    c0015dc8 <terminateTask(int)+0xe0>
c0015d8c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015d91:	83 e8 01             	sub    eax,0x1
c0015d94:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015d99:	75 01                	jne    c0015d9c <terminateTask(int)+0xb4>
c0015d9b:	fb                   	sti    
c0015d9c:	fa                   	cli    
c0015d9d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015da2:	83 c0 01             	add    eax,0x1
c0015da5:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015daa:	66 90                	xchg   ax,ax
c0015dac:	e8 b7 f7 ff ff       	call   c0015568 <schedule()>
c0015db1:	eb d9                	jmp    c0015d8c <terminateTask(int)+0xa4>
c0015db3:	90                   	nop
c0015db4:	83 ec 0c             	sub    esp,0xc
c0015db7:	68 5c 2b 02 c0       	push   0xc0022b5c
c0015dbc:	e8 a3 11 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015dc1:	83 c4 10             	add    esp,0x10
c0015dc4:	eb 9e                	jmp    c0015d64 <terminateTask(int)+0x7c>
c0015dc6:	66 90                	xchg   ax,ax
c0015dc8:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015dd2:	eb d8                	jmp    c0015dac <terminateTask(int)+0xc4>

c0015dd4 <Thr::terminateFromIRQ(int)>:
c0015dd4:	83 ec 18             	sub    esp,0x18
c0015dd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ddb:	50                   	push   eax
c0015ddc:	e8 07 ff ff ff       	call   c0015ce8 <terminateTask(int)>
c0015de1:	8d 76 00             	lea    esi,[esi+0x0]

c0015de4 <__static_initialization_and_destruction_0(int, int)>:
c0015de4:	83 ec 0c             	sub    esp,0xc
c0015de7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015dec:	0f 85 8e 00 00 00    	jne    c0015e80 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015df2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015dfa:	0f 85 80 00 00 00    	jne    c0015e80 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015e00:	83 ec 0c             	sub    esp,0xc
c0015e03:	68 cc c6 02 c0       	push   0xc002c6cc
c0015e08:	e8 4f a6 00 00       	call   c002045c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015e0d:	83 c4 10             	add    esp,0x10
c0015e10:	83 ec 04             	sub    esp,0x4
c0015e13:	68 fc 3a 02 c0       	push   0xc0023afc
c0015e18:	68 cc c6 02 c0       	push   0xc002c6cc
c0015e1d:	68 0c 04 02 c0       	push   0xc002040c
c0015e22:	e8 91 68 ff ff       	call   c000c6b8 <__cxa_atexit>
c0015e27:	83 c4 10             	add    esp,0x10
c0015e2a:	83 ec 0c             	sub    esp,0xc
c0015e2d:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015e32:	e8 25 a6 00 00       	call   c002045c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015e37:	83 c4 10             	add    esp,0x10
c0015e3a:	83 ec 04             	sub    esp,0x4
c0015e3d:	68 fc 3a 02 c0       	push   0xc0023afc
c0015e42:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015e47:	68 0c 04 02 c0       	push   0xc002040c
c0015e4c:	e8 67 68 ff ff       	call   c000c6b8 <__cxa_atexit>
c0015e51:	83 c4 10             	add    esp,0x10
c0015e54:	83 ec 0c             	sub    esp,0xc
c0015e57:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015e5c:	e8 fb a5 00 00       	call   c002045c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015e61:	83 c4 10             	add    esp,0x10
c0015e64:	83 ec 04             	sub    esp,0x4
c0015e67:	68 fc 3a 02 c0       	push   0xc0023afc
c0015e6c:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015e71:	68 0c 04 02 c0       	push   0xc002040c
c0015e76:	e8 3d 68 ff ff       	call   c000c6b8 <__cxa_atexit>
c0015e7b:	83 c4 10             	add    esp,0x10
c0015e7e:	66 90                	xchg   ax,ax
c0015e80:	90                   	nop
c0015e81:	83 c4 0c             	add    esp,0xc
c0015e84:	c3                   	ret    
c0015e85:	8d 76 00             	lea    esi,[esi+0x0]

c0015e88 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015e88:	83 ec 0c             	sub    esp,0xc
c0015e8b:	83 ec 08             	sub    esp,0x8
c0015e8e:	68 ff ff 00 00       	push   0xffff
c0015e93:	6a 01                	push   0x1
c0015e95:	e8 4a ff ff ff       	call   c0015de4 <__static_initialization_and_destruction_0(int, int)>
c0015e9a:	83 c4 10             	add    esp,0x10
c0015e9d:	83 c4 0c             	add    esp,0xc
c0015ea0:	c3                   	ret    

c0015ea1 <Vm::inbv(unsigned short)>:
c0015ea1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ea5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015eaa:	75 06                	jne    c0015eb2 <Vm::inbv(unsigned short)+0x11>
c0015eac:	a0 10 c7 02 c0       	mov    al,ds:0xc002c710
c0015eb1:	c3                   	ret    
c0015eb2:	ec                   	in     al,dx
c0015eb3:	c3                   	ret    

c0015eb4 <Vm::outbv(unsigned short, unsigned char)>:
c0015eb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015eb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ebc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015ec1:	75 25                	jne    c0015ee8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015ec3:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015ec9:	8d 51 01             	lea    edx,[ecx+0x1]
c0015ecc:	88 81 20 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38e0],al
c0015ed2:	89 15 10 c7 02 c0    	mov    DWORD PTR ds:0xc002c710,edx
c0015ed8:	83 fa 20             	cmp    edx,0x20
c0015edb:	75 0c                	jne    c0015ee9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015edd:	c7 05 10 c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x1f
c0015ee7:	c3                   	ret    
c0015ee8:	ee                   	out    dx,al
c0015ee9:	c3                   	ret    

c0015eea <Vm::realToLinear(unsigned short, unsigned short)>:
c0015eea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015eef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015ef4:	c1 e0 04             	shl    eax,0x4
c0015ef7:	01 d0                	add    eax,edx
c0015ef9:	c3                   	ret    

c0015efa <Vm::getSegment(unsigned int)>:
c0015efa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015efe:	c1 e8 10             	shr    eax,0x10
c0015f01:	c3                   	ret    

c0015f02 <Vm::getOffset(unsigned int)>:
c0015f02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f06:	c3                   	ret    

c0015f07 <Vm::mainloop2()>:
c0015f07:	83 ec 18             	sub    esp,0x18
c0015f0a:	fa                   	cli    
c0015f0b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015f11:	6a 02                	push   0x2
c0015f13:	c6 05 09 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c709,0x1
c0015f1a:	e8 dd f6 ff ff       	call   c00155fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015f1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f24:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015f28:	52                   	push   edx
c0015f29:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015f2d:	52                   	push   edx
c0015f2e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015f32:	52                   	push   edx
c0015f33:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015f37:	50                   	push   eax
c0015f38:	e8 d2 a2 fe ff       	call   c000020f <goToVM86>
c0015f3d:	83 c4 2c             	add    esp,0x2c
c0015f40:	c3                   	ret    

c0015f41 <Vm::mainVm8086Loop(void*)>:
c0015f41:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015f46:	48                   	dec    eax
c0015f47:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015f4c:	75 01                	jne    c0015f4f <Vm::mainVm8086Loop(void*)+0xe>
c0015f4e:	fb                   	sti    
c0015f4f:	eb b6                	jmp    c0015f07 <Vm::mainloop2()>

c0015f51 <Vm::mainloop3(unsigned long)>:
c0015f51:	83 ec 18             	sub    esp,0x18
c0015f54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f58:	fa                   	cli    
c0015f59:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015f5f:	6a 02                	push   0x2
c0015f61:	c6 05 08 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c708,0x1
c0015f68:	a3 04 c7 02 c0       	mov    ds:0xc002c704,eax
c0015f6d:	e8 8a f6 ff ff       	call   c00155fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015f72:	83 c4 1c             	add    esp,0x1c
c0015f75:	eb 90                	jmp    c0015f07 <Vm::mainloop2()>

c0015f77 <Vm::initialise8086()>:
c0015f77:	83 ec 0c             	sub    esp,0xc
c0015f7a:	68 80 00 00 00       	push   0x80
c0015f7f:	6a 00                	push   0x0
c0015f81:	68 41 5f 01 c0       	push   0xc0015f41
c0015f86:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015f8c:	e8 87 f3 ff ff       	call   c0015318 <Process::createThread(void (*)(void*), void*, int)>
c0015f91:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015f98:	a3 0c c7 02 c0       	mov    ds:0xc002c70c,eax
c0015f9d:	68 10 01 00 00       	push   0x110
c0015fa2:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0015fa7:	6a 00                	push   0x0
c0015fa9:	6a 00                	push   0x0
c0015fab:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015fb1:	e8 d8 c9 ff ff       	call   c001298e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015fb6:	83 c4 2c             	add    esp,0x2c
c0015fb9:	c3                   	ret    

c0015fba <Vm::resetConventionalMemory8086()>:
c0015fba:	c3                   	ret    

c0015fbb <Vm::finish8086()>:
c0015fbb:	53                   	push   ebx
c0015fbc:	83 ec 08             	sub    esp,0x8
c0015fbf:	fa                   	cli    
c0015fc0:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015fc6:	80 3d 08 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c708,0x0
c0015fcd:	75 15                	jne    c0015fe4 <Vm::finish8086()+0x29>
c0015fcf:	e8 94 f5 ff ff       	call   c0015568 <schedule()>
c0015fd4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015fd9:	48                   	dec    eax
c0015fda:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015fdf:	75 de                	jne    c0015fbf <Vm::finish8086()+0x4>
c0015fe1:	fb                   	sti    
c0015fe2:	eb db                	jmp    c0015fbf <Vm::finish8086()+0x4>
c0015fe4:	83 ec 0c             	sub    esp,0xc
c0015fe7:	8b 1d 04 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c704
c0015fed:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0015ff3:	c6 05 08 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c708,0x0
c0015ffa:	e8 61 f8 ff ff       	call   c0015860 <unblockTask(ThreadControlBlock*)>
c0015fff:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0016004:	83 c4 10             	add    esp,0x10
c0016007:	8d 50 ff             	lea    edx,[eax-0x1]
c001600a:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0016010:	85 d2                	test   edx,edx
c0016012:	75 01                	jne    c0016015 <Vm::finish8086()+0x5a>
c0016014:	fb                   	sti    
c0016015:	89 d8                	mov    eax,ebx
c0016017:	83 c4 08             	add    esp,0x8
c001601a:	5b                   	pop    ebx
c001601b:	c3                   	ret    

c001601c <Vm::getOutput8086(unsigned char*)>:
c001601c:	57                   	push   edi
c001601d:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0016023:	56                   	push   esi
c0016024:	be 20 c7 02 c0       	mov    esi,0xc002c720
c0016029:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001602d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001602f:	a1 10 c7 02 c0       	mov    eax,ds:0xc002c710
c0016034:	5e                   	pop    esi
c0016035:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c001603f:	5f                   	pop    edi
c0016040:	c3                   	ret    

c0016041 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016041:	55                   	push   ebp
c0016042:	57                   	push   edi
c0016043:	56                   	push   esi
c0016044:	53                   	push   ebx
c0016045:	83 ec 2c             	sub    esp,0x2c
c0016048:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001604c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016050:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016054:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0016058:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001605c:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0016063:	75 5d                	jne    c00160c2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016065:	83 ec 0c             	sub    esp,0xc
c0016068:	68 14 01 00 00       	push   0x114
c001606d:	e8 1f 89 ff ff       	call   c000e991 <malloc>
c0016072:	83 c4 0c             	add    esp,0xc
c0016075:	89 c7                	mov    edi,eax
c0016077:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001607d:	68 6c 2c 02 c0       	push   0xc0022c6c
c0016082:	50                   	push   eax
c0016083:	e8 8a 20 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0016088:	58                   	pop    eax
c0016089:	5a                   	pop    edx
c001608a:	6a 12                	push   0x12
c001608c:	57                   	push   edi
c001608d:	e8 9e 20 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0016092:	59                   	pop    ecx
c0016093:	8b 07                	mov    eax,DWORD PTR [edi]
c0016095:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0016099:	51                   	push   ecx
c001609a:	6a 00                	push   0x0
c001609c:	6a 00                	push   0x0
c001609e:	68 00 00 11 00       	push   0x110000
c00160a3:	57                   	push   edi
c00160a4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00160a7:	83 c4 14             	add    esp,0x14
c00160aa:	57                   	push   edi
c00160ab:	e8 de 20 ff ff       	call   c000818e <File::close()>
c00160b0:	8b 07                	mov    eax,DWORD PTR [edi]
c00160b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00160b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160b8:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c00160bf:	83 c4 10             	add    esp,0x10
c00160c2:	fa                   	cli    
c00160c3:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c00160c9:	80 3d 09 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c709,0x0
c00160d0:	75 15                	jne    c00160e7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa6>
c00160d2:	e8 91 f4 ff ff       	call   c0015568 <schedule()>
c00160d7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00160dc:	48                   	dec    eax
c00160dd:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00160e2:	75 de                	jne    c00160c2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00160e4:	fb                   	sti    
c00160e5:	eb db                	jmp    c00160c2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00160e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160eb:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c00160f0:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c00160fa:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c00160fe:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0016102:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016106:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001610a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001610e:	0f b7 f6             	movzx  esi,si
c0016111:	0f b7 db             	movzx  ebx,bx
c0016114:	50                   	push   eax
c0016115:	6a 20                	push   0x20
c0016117:	6a 00                	push   0x0
c0016119:	68 20 c7 02 c0       	push   0xc002c720
c001611e:	e8 cd a3 fe ff       	call   c00004f0 <memset>
c0016123:	5a                   	pop    edx
c0016124:	59                   	pop    ecx
c0016125:	56                   	push   esi
c0016126:	53                   	push   ebx
c0016127:	e8 be fd ff ff       	call   c0015eea <Vm::realToLinear(unsigned short, unsigned short)>
c001612c:	83 c4 10             	add    esp,0x10
c001612f:	89 c7                	mov    edi,eax
c0016131:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016135:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0016139:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001613b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0016140:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c0016147:	48                   	dec    eax
c0016148:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001614d:	75 01                	jne    c0016150 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x10f>
c001614f:	fb                   	sti    
c0016150:	83 ec 0c             	sub    esp,0xc
c0016153:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0016159:	e8 02 f7 ff ff       	call   c0015860 <unblockTask(ThreadControlBlock*)>
c001615e:	83 c4 3c             	add    esp,0x3c
c0016161:	b0 01                	mov    al,0x1
c0016163:	5b                   	pop    ebx
c0016164:	5e                   	pop    esi
c0016165:	5f                   	pop    edi
c0016166:	5d                   	pop    ebp
c0016167:	c3                   	ret    

c0016168 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016168:	55                   	push   ebp
c0016169:	57                   	push   edi
c001616a:	56                   	push   esi
c001616b:	53                   	push   ebx
c001616c:	83 ec 2c             	sub    esp,0x2c
c001616f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016173:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016177:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001617b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001617f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016183:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c001618a:	75 5d                	jne    c00161e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001618c:	83 ec 0c             	sub    esp,0xc
c001618f:	68 14 01 00 00       	push   0x114
c0016194:	e8 f8 87 ff ff       	call   c000e991 <malloc>
c0016199:	83 c4 0c             	add    esp,0xc
c001619c:	89 c6                	mov    esi,eax
c001619e:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00161a4:	68 6c 2c 02 c0       	push   0xc0022c6c
c00161a9:	50                   	push   eax
c00161aa:	e8 63 1f ff ff       	call   c0008112 <File::File(char const*, Process*)>
c00161af:	58                   	pop    eax
c00161b0:	5a                   	pop    edx
c00161b1:	6a 12                	push   0x12
c00161b3:	56                   	push   esi
c00161b4:	e8 77 1f ff ff       	call   c0008130 <File::open(FileOpenMode)>
c00161b9:	59                   	pop    ecx
c00161ba:	8b 06                	mov    eax,DWORD PTR [esi]
c00161bc:	8d 54 24 24          	lea    edx,[esp+0x24]
c00161c0:	52                   	push   edx
c00161c1:	6a 00                	push   0x0
c00161c3:	6a 00                	push   0x0
c00161c5:	68 00 00 11 00       	push   0x110000
c00161ca:	56                   	push   esi
c00161cb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00161ce:	83 c4 14             	add    esp,0x14
c00161d1:	56                   	push   esi
c00161d2:	e8 b7 1f ff ff       	call   c000818e <File::close()>
c00161d7:	8b 06                	mov    eax,DWORD PTR [esi]
c00161d9:	89 34 24             	mov    DWORD PTR [esp],esi
c00161dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161df:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c00161e6:	83 c4 10             	add    esp,0x10
c00161e9:	50                   	push   eax
c00161ea:	50                   	push   eax
c00161eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161ef:	68 87 2c 02 c0       	push   0xc0022c87
c00161f4:	e8 6b 0d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00161f9:	83 c4 10             	add    esp,0x10
c00161fc:	fa                   	cli    
c00161fd:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0016203:	0f b6 35 09 c7 02 c0 	movzx  esi,BYTE PTR ds:0xc002c709
c001620a:	89 f0                	mov    eax,esi
c001620c:	84 c0                	test   al,al
c001620e:	75 15                	jne    c0016225 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c0016210:	e8 53 f3 ff ff       	call   c0015568 <schedule()>
c0016215:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001621a:	48                   	dec    eax
c001621b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0016220:	75 da                	jne    c00161fc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016222:	fb                   	sti    
c0016223:	eb d7                	jmp    c00161fc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016225:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016229:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c001622e:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0016238:	66 89 48 5b          	mov    WORD PTR [eax+0x5b],cx
c001623c:	66 89 58 59          	mov    WORD PTR [eax+0x59],bx
c0016240:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016244:	66 89 68 57          	mov    WORD PTR [eax+0x57],bp
c0016248:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001624c:	50                   	push   eax
c001624d:	6a 20                	push   0x20
c001624f:	6a 00                	push   0x0
c0016251:	68 20 c7 02 c0       	push   0xc002c720
c0016256:	e8 95 a2 fe ff       	call   c00004f0 <memset>
c001625b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016262:	e8 2a 87 ff ff       	call   c000e991 <malloc>
c0016267:	83 c4 0c             	add    esp,0xc
c001626a:	89 c3                	mov    ebx,eax
c001626c:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0016272:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016276:	50                   	push   eax
c0016277:	e8 96 1e ff ff       	call   c0008112 <File::File(char const*, Process*)>
c001627c:	83 c4 10             	add    esp,0x10
c001627f:	85 db                	test   ebx,ebx
c0016281:	75 0a                	jne    c001628d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0016283:	83 ec 0c             	sub    esp,0xc
c0016286:	68 a9 2c 02 c0       	push   0xc0022ca9
c001628b:	eb 2b                	jmp    c00162b8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c001628d:	50                   	push   eax
c001628e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016292:	50                   	push   eax
c0016293:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016297:	50                   	push   eax
c0016298:	53                   	push   ebx
c0016299:	e8 94 21 ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c001629e:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00162a2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00162a6:	83 c4 10             	add    esp,0x10
c00162a9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00162ae:	74 27                	je     c00162d7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16f>
c00162b0:	83 ec 0c             	sub    esp,0xc
c00162b3:	68 bd 2c 02 c0       	push   0xc0022cbd
c00162b8:	e8 29 8a ff ff       	call   c000ece6 <KePanic(char const*)>
c00162bd:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00162c2:	83 c4 10             	add    esp,0x10
c00162c5:	48                   	dec    eax
c00162c6:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00162cb:	85 c0                	test   eax,eax
c00162cd:	75 01                	jne    c00162d0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x168>
c00162cf:	fb                   	sti    
c00162d0:	31 f6                	xor    esi,esi
c00162d2:	e9 8f 00 00 00       	jmp    c0016366 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fe>
c00162d7:	51                   	push   ecx
c00162d8:	51                   	push   ecx
c00162d9:	6a 01                	push   0x1
c00162db:	53                   	push   ebx
c00162dc:	e8 4f 1e ff ff       	call   c0008130 <File::open(FileOpenMode)>
c00162e1:	83 c4 10             	add    esp,0x10
c00162e4:	85 c0                	test   eax,eax
c00162e6:	74 26                	je     c001630e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a6>
c00162e8:	83 ec 0c             	sub    esp,0xc
c00162eb:	68 d6 2c 02 c0       	push   0xc0022cd6
c00162f0:	e8 f1 89 ff ff       	call   c000ece6 <KePanic(char const*)>
c00162f5:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00162fa:	83 c4 10             	add    esp,0x10
c00162fd:	48                   	dec    eax
c00162fe:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0016303:	85 c0                	test   eax,eax
c0016305:	75 c9                	jne    c00162d0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x168>
c0016307:	fb                   	sti    
c0016308:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001630c:	eb 58                	jmp    c0016366 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fe>
c001630e:	0f b7 ff             	movzx  edi,di
c0016311:	50                   	push   eax
c0016312:	50                   	push   eax
c0016313:	0f b7 c5             	movzx  eax,bp
c0016316:	57                   	push   edi
c0016317:	50                   	push   eax
c0016318:	e8 cd fb ff ff       	call   c0015eea <Vm::realToLinear(unsigned short, unsigned short)>
c001631d:	5a                   	pop    edx
c001631e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016320:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016324:	51                   	push   ecx
c0016325:	50                   	push   eax
c0016326:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001632a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001632e:	53                   	push   ebx
c001632f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016332:	83 c4 14             	add    esp,0x14
c0016335:	53                   	push   ebx
c0016336:	e8 53 1e ff ff       	call   c000818e <File::close()>
c001633b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0016340:	83 c4 10             	add    esp,0x10
c0016343:	48                   	dec    eax
c0016344:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c001634b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0016350:	85 c0                	test   eax,eax
c0016352:	75 01                	jne    c0016355 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ed>
c0016354:	fb                   	sti    
c0016355:	83 ec 0c             	sub    esp,0xc
c0016358:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c001635e:	e8 fd f4 ff ff       	call   c0015860 <unblockTask(ThreadControlBlock*)>
c0016363:	83 c4 10             	add    esp,0x10
c0016366:	83 c4 2c             	add    esp,0x2c
c0016369:	89 f0                	mov    eax,esi
c001636b:	5b                   	pop    ebx
c001636c:	5e                   	pop    esi
c001636d:	5f                   	pop    edi
c001636e:	5d                   	pop    ebp
c001636f:	c3                   	ret    

c0016370 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016370:	57                   	push   edi
c0016371:	56                   	push   esi
c0016372:	53                   	push   ebx
c0016373:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016377:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001637b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001637f:	83 e8 06             	sub    eax,0x6
c0016382:	0f b7 c0             	movzx  eax,ax
c0016385:	50                   	push   eax
c0016386:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001638b:	50                   	push   eax
c001638c:	e8 59 fb ff ff       	call   c0015eea <Vm::realToLinear(unsigned short, unsigned short)>
c0016391:	5a                   	pop    edx
c0016392:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016395:	59                   	pop    ecx
c0016396:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016399:	8d 51 fa             	lea    edx,[ecx-0x6]
c001639c:	81 e2 ff ff 00 00    	and    edx,0xffff
c00163a2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00163a5:	8d 56 02             	lea    edx,[esi+0x2]
c00163a8:	66 89 10             	mov    WORD PTR [eax],dx
c00163ab:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00163af:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00163b3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00163b6:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00163ba:	0f b6 f1             	movzx  esi,cl
c00163bd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00163c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163c7:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00163cb:	0f b6 d5             	movzx  edx,ch
c00163ce:	74 0a                	je     c00163da <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00163d0:	c1 e2 08             	shl    edx,0x8
c00163d3:	09 f2                	or     edx,esi
c00163d5:	80 ce 02             	or     dh,0x2
c00163d8:	eb 08                	jmp    c00163e2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00163da:	c1 e2 08             	shl    edx,0x8
c00163dd:	09 f2                	or     edx,esi
c00163df:	80 e6 fd             	and    dh,0xfd
c00163e2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00163e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163eb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00163ef:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00163f7:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00163fa:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016402:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016405:	5b                   	pop    ebx
c0016406:	5e                   	pop    esi
c0016407:	5f                   	pop    edi
c0016408:	c3                   	ret    

c0016409 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016409:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001640e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016413:	c1 e0 04             	shl    eax,0x4
c0016416:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016419:	c3                   	ret    

c001641a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001641a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001641f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016424:	c1 e0 04             	shl    eax,0x4
c0016427:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001642b:	c3                   	ret    

c001642c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001642c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016431:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016436:	c1 e0 04             	shl    eax,0x4
c0016439:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001643c:	c3                   	ret    

c001643d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001643d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016442:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016447:	c1 e0 04             	shl    eax,0x4
c001644a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001644e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016451:	c3                   	ret    

c0016452 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016452:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016457:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001645c:	c1 e0 04             	shl    eax,0x4
c001645f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016463:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016467:	c3                   	ret    

c0016468 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016468:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001646d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016472:	c1 e0 04             	shl    eax,0x4
c0016475:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016479:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001647c:	c3                   	ret    

c001647d <Vm::faultHandler(regs*)>:
c001647d:	55                   	push   ebp
c001647e:	57                   	push   edi
c001647f:	56                   	push   esi
c0016480:	53                   	push   ebx
c0016481:	83 ec 2c             	sub    esp,0x2c
c0016484:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016488:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001648b:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001648f:	0f b7 f8             	movzx  edi,ax
c0016492:	52                   	push   edx
c0016493:	0f b7 c0             	movzx  eax,ax
c0016496:	50                   	push   eax
c0016497:	e8 4e fa ff ff       	call   c0015eea <Vm::realToLinear(unsigned short, unsigned short)>
c001649c:	5a                   	pop    edx
c001649d:	59                   	pop    ecx
c001649e:	89 c1                	mov    ecx,eax
c00164a0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00164a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164a7:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00164ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00164b0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00164b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164b7:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00164bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00164c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00164c8:	e8 1d fa ff ff       	call   c0015eea <Vm::realToLinear(unsigned short, unsigned short)>
c00164cd:	5e                   	pop    esi
c00164ce:	be 06 00 00 00       	mov    esi,0x6
c00164d3:	5d                   	pop    ebp
c00164d4:	31 ed                	xor    ebp,ebp
c00164d6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00164db:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00164de:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00164e4:	0f 84 74 02 00 00    	je     c001675e <Vm::faultHandler(regs*)+0x2e1>
c00164ea:	0f 87 94 00 00 00    	ja     c0016584 <Vm::faultHandler(regs*)+0x107>
c00164f0:	83 fa 66             	cmp    edx,0x66
c00164f3:	0f 84 e2 01 00 00    	je     c00166db <Vm::faultHandler(regs*)+0x25e>
c00164f9:	77 47                	ja     c0016542 <Vm::faultHandler(regs*)+0xc5>
c00164fb:	83 fa 36             	cmp    edx,0x36
c00164fe:	0f 84 ca 01 00 00    	je     c00166ce <Vm::faultHandler(regs*)+0x251>
c0016504:	77 1a                	ja     c0016520 <Vm::faultHandler(regs*)+0xa3>
c0016506:	83 fa 26             	cmp    edx,0x26
c0016509:	0f 84 98 01 00 00    	je     c00166a7 <Vm::faultHandler(regs*)+0x22a>
c001650f:	83 fa 2e             	cmp    edx,0x2e
c0016512:	0f 85 21 06 00 00    	jne    c0016b39 <Vm::faultHandler(regs*)+0x6bc>
c0016518:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001651b:	31 f6                	xor    esi,esi
c001651d:	41                   	inc    ecx
c001651e:	eb bb                	jmp    c00164db <Vm::faultHandler(regs*)+0x5e>
c0016520:	83 fa 64             	cmp    edx,0x64
c0016523:	0f 84 8b 01 00 00    	je     c00166b4 <Vm::faultHandler(regs*)+0x237>
c0016529:	0f 87 92 01 00 00    	ja     c00166c1 <Vm::faultHandler(regs*)+0x244>
c001652f:	83 fa 3e             	cmp    edx,0x3e
c0016532:	0f 85 01 06 00 00    	jne    c0016b39 <Vm::faultHandler(regs*)+0x6bc>
c0016538:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001653b:	be 01 00 00 00       	mov    esi,0x1
c0016540:	eb db                	jmp    c001651d <Vm::faultHandler(regs*)+0xa0>
c0016542:	83 fa 6d             	cmp    edx,0x6d
c0016545:	0f 84 34 03 00 00    	je     c001687f <Vm::faultHandler(regs*)+0x402>
c001654b:	77 17                	ja     c0016564 <Vm::faultHandler(regs*)+0xe7>
c001654d:	83 fa 67             	cmp    edx,0x67
c0016550:	0f 84 92 01 00 00    	je     c00166e8 <Vm::faultHandler(regs*)+0x26b>
c0016556:	83 fa 6c             	cmp    edx,0x6c
c0016559:	0f 84 b1 02 00 00    	je     c0016810 <Vm::faultHandler(regs*)+0x393>
c001655f:	e9 d5 05 00 00       	jmp    c0016b39 <Vm::faultHandler(regs*)+0x6bc>
c0016564:	83 fa 6f             	cmp    edx,0x6f
c0016567:	0f 84 3d 04 00 00    	je     c00169aa <Vm::faultHandler(regs*)+0x52d>
c001656d:	0f 82 9f 03 00 00    	jb     c0016912 <Vm::faultHandler(regs*)+0x495>
c0016573:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016579:	0f 84 76 01 00 00    	je     c00166f5 <Vm::faultHandler(regs*)+0x278>
c001657f:	e9 b5 05 00 00       	jmp    c0016b39 <Vm::faultHandler(regs*)+0x6bc>
c0016584:	81 fa ec 00 00 00    	cmp    edx,0xec
c001658a:	0f 84 51 05 00 00    	je     c0016ae1 <Vm::faultHandler(regs*)+0x664>
c0016590:	0f 87 a9 00 00 00    	ja     c001663f <Vm::faultHandler(regs*)+0x1c2>
c0016596:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001659c:	0f 84 d0 04 00 00    	je     c0016a72 <Vm::faultHandler(regs*)+0x5f5>
c00165a2:	77 78                	ja     c001661c <Vm::faultHandler(regs*)+0x19f>
c00165a4:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00165aa:	0f 84 0e 02 00 00    	je     c00167be <Vm::faultHandler(regs*)+0x341>
c00165b0:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00165b6:	0f 85 7d 05 00 00    	jne    c0016b39 <Vm::faultHandler(regs*)+0x6bc>
c00165bc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00165c0:	89 d1                	mov    ecx,edx
c00165c2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00165c5:	c1 e1 08             	shl    ecx,0x8
c00165c8:	09 ca                	or     edx,ecx
c00165ca:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00165cd:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00165d1:	89 d1                	mov    ecx,edx
c00165d3:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00165d7:	c1 e1 08             	shl    ecx,0x8
c00165da:	09 ca                	or     edx,ecx
c00165dc:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00165df:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00165e3:	89 d1                	mov    ecx,edx
c00165e5:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00165e9:	c1 e1 08             	shl    ecx,0x8
c00165ec:	09 ca                	or     edx,ecx
c00165ee:	81 ca 00 02 02 00    	or     edx,0x20200
c00165f4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00165f7:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00165fb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016601:	d1 e8                	shr    eax,1
c0016603:	83 e0 01             	and    eax,0x1
c0016606:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016609:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001660c:	83 c0 06             	add    eax,0x6
c001660f:	25 ff ff 00 00       	and    eax,0xffff
c0016614:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016617:	e9 19 05 00 00       	jmp    c0016b35 <Vm::faultHandler(regs*)+0x6b8>
c001661c:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016622:	0f 84 8f 04 00 00    	je     c0016ab7 <Vm::faultHandler(regs*)+0x63a>
c0016628:	0f 82 60 04 00 00    	jb     c0016a8e <Vm::faultHandler(regs*)+0x611>
c001662e:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016634:	0f 84 94 04 00 00    	je     c0016ace <Vm::faultHandler(regs*)+0x651>
c001663a:	e9 fa 04 00 00       	jmp    c0016b39 <Vm::faultHandler(regs*)+0x6bc>
c001663f:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016645:	0f 84 d7 04 00 00    	je     c0016b22 <Vm::faultHandler(regs*)+0x6a5>
c001664b:	77 2e                	ja     c001667b <Vm::faultHandler(regs*)+0x1fe>
c001664d:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016653:	0f 84 a4 04 00 00    	je     c0016afd <Vm::faultHandler(regs*)+0x680>
c0016659:	81 fa ee 00 00 00    	cmp    edx,0xee
c001665f:	0f 85 d4 04 00 00    	jne    c0016b39 <Vm::faultHandler(regs*)+0x6bc>
c0016665:	50                   	push   eax
c0016666:	50                   	push   eax
c0016667:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001666b:	50                   	push   eax
c001666c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016670:	50                   	push   eax
c0016671:	e8 3e f8 ff ff       	call   c0015eb4 <Vm::outbv(unsigned short, unsigned char)>
c0016676:	e9 9f 04 00 00       	jmp    c0016b1a <Vm::faultHandler(regs*)+0x69d>
c001667b:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016681:	0f 84 6d 01 00 00    	je     c00167f4 <Vm::faultHandler(regs*)+0x377>
c0016687:	81 fa fb 00 00 00    	cmp    edx,0xfb
c001668d:	0f 84 6f 01 00 00    	je     c0016802 <Vm::faultHandler(regs*)+0x385>
c0016693:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016699:	0f 85 9a 04 00 00    	jne    c0016b39 <Vm::faultHandler(regs*)+0x6bc>
c001669f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166a2:	e9 76 fe ff ff       	jmp    c001651d <Vm::faultHandler(regs*)+0xa0>
c00166a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166aa:	be 02 00 00 00       	mov    esi,0x2
c00166af:	e9 69 fe ff ff       	jmp    c001651d <Vm::faultHandler(regs*)+0xa0>
c00166b4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166b7:	be 03 00 00 00       	mov    esi,0x3
c00166bc:	e9 5c fe ff ff       	jmp    c001651d <Vm::faultHandler(regs*)+0xa0>
c00166c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166c4:	be 04 00 00 00       	mov    esi,0x4
c00166c9:	e9 4f fe ff ff       	jmp    c001651d <Vm::faultHandler(regs*)+0xa0>
c00166ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166d1:	be 05 00 00 00       	mov    esi,0x5
c00166d6:	e9 42 fe ff ff       	jmp    c001651d <Vm::faultHandler(regs*)+0xa0>
c00166db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166de:	bd 01 00 00 00       	mov    ebp,0x1
c00166e3:	e9 35 fe ff ff       	jmp    c001651d <Vm::faultHandler(regs*)+0xa0>
c00166e8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166eb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00166f0:	e9 28 fe ff ff       	jmp    c001651d <Vm::faultHandler(regs*)+0xa0>
c00166f5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00166f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00166fc:	83 e5 01             	and    ebp,0x1
c00166ff:	74 30                	je     c0016731 <Vm::faultHandler(regs*)+0x2b4>
c0016701:	83 e9 04             	sub    ecx,0x4
c0016704:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001670a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016710:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016713:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016716:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001671c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016720:	0f 84 0c 04 00 00    	je     c0016b32 <Vm::faultHandler(regs*)+0x6b5>
c0016726:	80 ce 02             	or     dh,0x2
c0016729:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001672c:	e9 01 04 00 00       	jmp    c0016b32 <Vm::faultHandler(regs*)+0x6b5>
c0016731:	83 e9 02             	sub    ecx,0x2
c0016734:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001673a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001673d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016741:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016747:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001674b:	74 05                	je     c0016752 <Vm::faultHandler(regs*)+0x2d5>
c001674d:	80 ce 02             	or     dh,0x2
c0016750:	eb 03                	jmp    c0016755 <Vm::faultHandler(regs*)+0x2d8>
c0016752:	80 e6 fd             	and    dh,0xfd
c0016755:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016759:	e9 d4 03 00 00       	jmp    c0016b32 <Vm::faultHandler(regs*)+0x6b5>
c001675e:	83 e5 01             	and    ebp,0x1
c0016761:	74 2a                	je     c001678d <Vm::faultHandler(regs*)+0x310>
c0016763:	8b 10                	mov    edx,DWORD PTR [eax]
c0016765:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001676b:	81 ca 00 02 02 00    	or     edx,0x20200
c0016771:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016774:	8b 00                	mov    eax,DWORD PTR [eax]
c0016776:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001677c:	c1 e8 09             	shr    eax,0x9
c001677f:	83 e0 01             	and    eax,0x1
c0016782:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016785:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016788:	83 c0 04             	add    eax,0x4
c001678b:	eb 24                	jmp    c00167b1 <Vm::faultHandler(regs*)+0x334>
c001678d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016790:	81 ca 00 02 02 00    	or     edx,0x20200
c0016796:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016799:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001679c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00167a2:	c1 e8 09             	shr    eax,0x9
c00167a5:	83 e0 01             	and    eax,0x1
c00167a8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00167ab:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00167ae:	83 c0 02             	add    eax,0x2
c00167b1:	25 ff ff 00 00       	and    eax,0xffff
c00167b6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00167b9:	e9 74 03 00 00       	jmp    c0016b32 <Vm::faultHandler(regs*)+0x6b5>
c00167be:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167c2:	3d ee 00 00 00       	cmp    eax,0xee
c00167c7:	75 10                	jne    c00167d9 <Vm::faultHandler(regs*)+0x35c>
c00167c9:	83 ec 0c             	sub    esp,0xc
c00167cc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00167cf:	e8 7d f7 ff ff       	call   c0015f51 <Vm::mainloop3(unsigned long)>
c00167d4:	e9 44 03 00 00       	jmp    c0016b1d <Vm::faultHandler(regs*)+0x6a0>
c00167d9:	83 ec 0c             	sub    esp,0xc
c00167dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00167e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00167e4:	51                   	push   ecx
c00167e5:	50                   	push   eax
c00167e6:	53                   	push   ebx
c00167e7:	e8 84 fb ff ff       	call   c0016370 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00167ec:	83 c4 20             	add    esp,0x20
c00167ef:	e9 41 03 00 00       	jmp    c0016b35 <Vm::faultHandler(regs*)+0x6b8>
c00167f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167f9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00167fd:	e9 30 03 00 00       	jmp    c0016b32 <Vm::faultHandler(regs*)+0x6b5>
c0016802:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016807:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001680b:	e9 22 03 00 00       	jmp    c0016b32 <Vm::faultHandler(regs*)+0x6b5>
c0016810:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016813:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016818:	74 2b                	je     c0016845 <Vm::faultHandler(regs*)+0x3c8>
c001681a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016821:	76 22                	jbe    c0016845 <Vm::faultHandler(regs*)+0x3c8>
c0016823:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016827:	50                   	push   eax
c0016828:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001682c:	50                   	push   eax
c001682d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016831:	50                   	push   eax
c0016832:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016836:	50                   	push   eax
c0016837:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001683b:	50                   	push   eax
c001683c:	6a 6c                	push   0x6c
c001683e:	6a 6c                	push   0x6c
c0016840:	e9 bd 01 00 00       	jmp    c0016a02 <Vm::faultHandler(regs*)+0x585>
c0016845:	83 ec 0c             	sub    esp,0xc
c0016848:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001684c:	0f b7 f6             	movzx  esi,si
c001684f:	50                   	push   eax
c0016850:	e8 4c f6 ff ff       	call   c0015ea1 <Vm::inbv(unsigned short)>
c0016855:	83 c4 0c             	add    esp,0xc
c0016858:	0f b6 c0             	movzx  eax,al
c001685b:	50                   	push   eax
c001685c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016860:	50                   	push   eax
c0016861:	56                   	push   esi
c0016862:	e8 d6 fb ff ff       	call   c001643d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016867:	83 c4 10             	add    esp,0x10
c001686a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001686d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016871:	74 03                	je     c0016876 <Vm::faultHandler(regs*)+0x3f9>
c0016873:	48                   	dec    eax
c0016874:	eb 01                	jmp    c0016877 <Vm::faultHandler(regs*)+0x3fa>
c0016876:	40                   	inc    eax
c0016877:	0f b7 c0             	movzx  eax,ax
c001687a:	e9 8b 00 00 00       	jmp    c001690a <Vm::faultHandler(regs*)+0x48d>
c001687f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016882:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016885:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001688a:	74 29                	je     c00168b5 <Vm::faultHandler(regs*)+0x438>
c001688c:	3d ff ff 00 00       	cmp    eax,0xffff
c0016891:	76 22                	jbe    c00168b5 <Vm::faultHandler(regs*)+0x438>
c0016893:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016897:	50                   	push   eax
c0016898:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001689c:	50                   	push   eax
c001689d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00168a1:	50                   	push   eax
c00168a2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00168a6:	50                   	push   eax
c00168a7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00168ab:	50                   	push   eax
c00168ac:	6a 6d                	push   0x6d
c00168ae:	6a 6d                	push   0x6d
c00168b0:	e9 4d 01 00 00       	jmp    c0016a02 <Vm::faultHandler(regs*)+0x585>
c00168b5:	0f b7 c8             	movzx  ecx,ax
c00168b8:	0f b7 f6             	movzx  esi,si
c00168bb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00168be:	83 e5 01             	and    ebp,0x1
c00168c1:	74 20                	je     c00168e3 <Vm::faultHandler(regs*)+0x466>
c00168c3:	ed                   	in     eax,dx
c00168c4:	55                   	push   ebp
c00168c5:	50                   	push   eax
c00168c6:	51                   	push   ecx
c00168c7:	56                   	push   esi
c00168c8:	e8 9b fb ff ff       	call   c0016468 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00168cd:	83 c4 10             	add    esp,0x10
c00168d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00168d3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00168d7:	74 05                	je     c00168de <Vm::faultHandler(regs*)+0x461>
c00168d9:	83 e8 04             	sub    eax,0x4
c00168dc:	eb 27                	jmp    c0016905 <Vm::faultHandler(regs*)+0x488>
c00168de:	83 c0 04             	add    eax,0x4
c00168e1:	eb 22                	jmp    c0016905 <Vm::faultHandler(regs*)+0x488>
c00168e3:	66 ed                	in     ax,dx
c00168e5:	0f b7 c0             	movzx  eax,ax
c00168e8:	57                   	push   edi
c00168e9:	50                   	push   eax
c00168ea:	51                   	push   ecx
c00168eb:	56                   	push   esi
c00168ec:	e8 61 fb ff ff       	call   c0016452 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00168f1:	83 c4 10             	add    esp,0x10
c00168f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00168f7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00168fb:	74 05                	je     c0016902 <Vm::faultHandler(regs*)+0x485>
c00168fd:	83 e8 02             	sub    eax,0x2
c0016900:	eb 03                	jmp    c0016905 <Vm::faultHandler(regs*)+0x488>
c0016902:	83 c0 02             	add    eax,0x2
c0016905:	25 ff ff 00 00       	and    eax,0xffff
c001690a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001690d:	e9 20 02 00 00       	jmp    c0016b32 <Vm::faultHandler(regs*)+0x6b5>
c0016912:	8d 46 ff             	lea    eax,[esi-0x1]
c0016915:	0f b6 f0             	movzx  esi,al
c0016918:	83 fe 05             	cmp    esi,0x5
c001691b:	77 23                	ja     c0016940 <Vm::faultHandler(regs*)+0x4c3>
c001691d:	ff 24 b5 4c 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd2b4]
c0016924:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016929:	eb 15                	jmp    c0016940 <Vm::faultHandler(regs*)+0x4c3>
c001692b:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001692f:	eb 0f                	jmp    c0016940 <Vm::faultHandler(regs*)+0x4c3>
c0016931:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016935:	eb 09                	jmp    c0016940 <Vm::faultHandler(regs*)+0x4c3>
c0016937:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001693b:	eb 03                	jmp    c0016940 <Vm::faultHandler(regs*)+0x4c3>
c001693d:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016940:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016943:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016948:	74 29                	je     c0016973 <Vm::faultHandler(regs*)+0x4f6>
c001694a:	3d ff ff 00 00       	cmp    eax,0xffff
c001694f:	76 22                	jbe    c0016973 <Vm::faultHandler(regs*)+0x4f6>
c0016951:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016955:	50                   	push   eax
c0016956:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001695a:	50                   	push   eax
c001695b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001695f:	50                   	push   eax
c0016960:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016964:	50                   	push   eax
c0016965:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016969:	50                   	push   eax
c001696a:	6a 6e                	push   0x6e
c001696c:	6a 6e                	push   0x6e
c001696e:	e9 8f 00 00 00       	jmp    c0016a02 <Vm::faultHandler(regs*)+0x585>
c0016973:	0f b7 c0             	movzx  eax,ax
c0016976:	52                   	push   edx
c0016977:	52                   	push   edx
c0016978:	50                   	push   eax
c0016979:	57                   	push   edi
c001697a:	e8 8a fa ff ff       	call   c0016409 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001697f:	59                   	pop    ecx
c0016980:	0f b6 c0             	movzx  eax,al
c0016983:	5e                   	pop    esi
c0016984:	50                   	push   eax
c0016985:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016989:	50                   	push   eax
c001698a:	e8 25 f5 ff ff       	call   c0015eb4 <Vm::outbv(unsigned short, unsigned char)>
c001698f:	83 c4 10             	add    esp,0x10
c0016992:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016995:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016999:	74 03                	je     c001699e <Vm::faultHandler(regs*)+0x521>
c001699b:	48                   	dec    eax
c001699c:	eb 01                	jmp    c001699f <Vm::faultHandler(regs*)+0x522>
c001699e:	40                   	inc    eax
c001699f:	0f b7 c0             	movzx  eax,ax
c00169a2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00169a5:	e9 88 01 00 00       	jmp    c0016b32 <Vm::faultHandler(regs*)+0x6b5>
c00169aa:	8d 46 ff             	lea    eax,[esi-0x1]
c00169ad:	0f b6 f0             	movzx  esi,al
c00169b0:	83 fe 05             	cmp    esi,0x5
c00169b3:	77 1e                	ja     c00169d3 <Vm::faultHandler(regs*)+0x556>
c00169b5:	ff 24 b5 64 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd29c]
c00169bc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00169c0:	eb 11                	jmp    c00169d3 <Vm::faultHandler(regs*)+0x556>
c00169c2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00169c5:	eb 0c                	jmp    c00169d3 <Vm::faultHandler(regs*)+0x556>
c00169c7:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00169ca:	eb 07                	jmp    c00169d3 <Vm::faultHandler(regs*)+0x556>
c00169cc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00169cf:	eb 02                	jmp    c00169d3 <Vm::faultHandler(regs*)+0x556>
c00169d1:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00169d3:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00169d6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00169db:	74 37                	je     c0016a14 <Vm::faultHandler(regs*)+0x597>
c00169dd:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00169e3:	76 2f                	jbe    c0016a14 <Vm::faultHandler(regs*)+0x597>
c00169e5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00169e9:	50                   	push   eax
c00169ea:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00169ee:	50                   	push   eax
c00169ef:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00169f3:	50                   	push   eax
c00169f4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00169f8:	50                   	push   eax
c00169f9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169fd:	50                   	push   eax
c00169fe:	6a 6f                	push   0x6f
c0016a00:	6a 6f                	push   0x6f
c0016a02:	68 ef 2c 02 c0       	push   0xc0022cef
c0016a07:	e8 58 05 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016a0c:	83 c4 20             	add    esp,0x20
c0016a0f:	e9 83 01 00 00       	jmp    c0016b97 <Vm::faultHandler(regs*)+0x71a>
c0016a14:	0f b7 d7             	movzx  edx,di
c0016a17:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016a1a:	0f b7 c6             	movzx  eax,si
c0016a1d:	81 e1 00 04 00 00    	and    ecx,0x400
c0016a23:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016a26:	83 e5 01             	and    ebp,0x1
c0016a29:	74 1d                	je     c0016a48 <Vm::faultHandler(regs*)+0x5cb>
c0016a2b:	55                   	push   ebp
c0016a2c:	55                   	push   ebp
c0016a2d:	50                   	push   eax
c0016a2e:	52                   	push   edx
c0016a2f:	e8 f8 f9 ff ff       	call   c001642c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016a34:	83 c4 10             	add    esp,0x10
c0016a37:	89 fa                	mov    edx,edi
c0016a39:	ef                   	out    dx,eax
c0016a3a:	85 c9                	test   ecx,ecx
c0016a3c:	74 05                	je     c0016a43 <Vm::faultHandler(regs*)+0x5c6>
c0016a3e:	83 ee 04             	sub    esi,0x4
c0016a41:	eb 21                	jmp    c0016a64 <Vm::faultHandler(regs*)+0x5e7>
c0016a43:	83 c6 04             	add    esi,0x4
c0016a46:	eb 1c                	jmp    c0016a64 <Vm::faultHandler(regs*)+0x5e7>
c0016a48:	55                   	push   ebp
c0016a49:	55                   	push   ebp
c0016a4a:	50                   	push   eax
c0016a4b:	52                   	push   edx
c0016a4c:	e8 c9 f9 ff ff       	call   c001641a <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016a51:	83 c4 10             	add    esp,0x10
c0016a54:	89 fa                	mov    edx,edi
c0016a56:	66 ef                	out    dx,ax
c0016a58:	85 c9                	test   ecx,ecx
c0016a5a:	74 05                	je     c0016a61 <Vm::faultHandler(regs*)+0x5e4>
c0016a5c:	83 ee 02             	sub    esi,0x2
c0016a5f:	eb 03                	jmp    c0016a64 <Vm::faultHandler(regs*)+0x5e7>
c0016a61:	83 c6 02             	add    esi,0x2
c0016a64:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016a6a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016a6d:	e9 c0 00 00 00       	jmp    c0016b32 <Vm::faultHandler(regs*)+0x6b5>
c0016a72:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016a79:	83 ec 0c             	sub    esp,0xc
c0016a7c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a80:	50                   	push   eax
c0016a81:	e8 1b f4 ff ff       	call   c0015ea1 <Vm::inbv(unsigned short)>
c0016a86:	0f b6 c0             	movzx  eax,al
c0016a89:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016a8c:	eb 3a                	jmp    c0016ac8 <Vm::faultHandler(regs*)+0x64b>
c0016a8e:	83 e5 01             	and    ebp,0x1
c0016a91:	74 07                	je     c0016a9a <Vm::faultHandler(regs*)+0x61d>
c0016a93:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a97:	ed                   	in     eax,dx
c0016a98:	eb 14                	jmp    c0016aae <Vm::faultHandler(regs*)+0x631>
c0016a9a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016a9d:	66 31 f6             	xor    si,si
c0016aa0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016aa3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016aa7:	66 ed                	in     ax,dx
c0016aa9:	0f b7 c0             	movzx  eax,ax
c0016aac:	09 f0                	or     eax,esi
c0016aae:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016ab1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016ab5:	eb 7e                	jmp    c0016b35 <Vm::faultHandler(regs*)+0x6b8>
c0016ab7:	52                   	push   edx
c0016ab8:	52                   	push   edx
c0016ab9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016abd:	50                   	push   eax
c0016abe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ac2:	50                   	push   eax
c0016ac3:	e8 ec f3 ff ff       	call   c0015eb4 <Vm::outbv(unsigned short, unsigned char)>
c0016ac8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016acc:	eb 4f                	jmp    c0016b1d <Vm::faultHandler(regs*)+0x6a0>
c0016ace:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016ad1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016ad5:	83 e5 01             	and    ebp,0x1
c0016ad8:	74 03                	je     c0016add <Vm::faultHandler(regs*)+0x660>
c0016ada:	ef                   	out    dx,eax
c0016adb:	eb d4                	jmp    c0016ab1 <Vm::faultHandler(regs*)+0x634>
c0016add:	66 ef                	out    dx,ax
c0016adf:	eb d0                	jmp    c0016ab1 <Vm::faultHandler(regs*)+0x634>
c0016ae1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016ae8:	83 ec 0c             	sub    esp,0xc
c0016aeb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016aef:	50                   	push   eax
c0016af0:	e8 ac f3 ff ff       	call   c0015ea1 <Vm::inbv(unsigned short)>
c0016af5:	0f b6 c0             	movzx  eax,al
c0016af8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016afb:	eb 1d                	jmp    c0016b1a <Vm::faultHandler(regs*)+0x69d>
c0016afd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016b00:	83 e5 01             	and    ebp,0x1
c0016b03:	74 03                	je     c0016b08 <Vm::faultHandler(regs*)+0x68b>
c0016b05:	ed                   	in     eax,dx
c0016b06:	eb 0d                	jmp    c0016b15 <Vm::faultHandler(regs*)+0x698>
c0016b08:	66 ed                	in     ax,dx
c0016b0a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016b0d:	0f b7 c0             	movzx  eax,ax
c0016b10:	66 31 d2             	xor    dx,dx
c0016b13:	09 d0                	or     eax,edx
c0016b15:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016b18:	eb 18                	jmp    c0016b32 <Vm::faultHandler(regs*)+0x6b5>
c0016b1a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016b1d:	83 c4 10             	add    esp,0x10
c0016b20:	eb 13                	jmp    c0016b35 <Vm::faultHandler(regs*)+0x6b8>
c0016b22:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016b25:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016b28:	83 e5 01             	and    ebp,0x1
c0016b2b:	74 03                	je     c0016b30 <Vm::faultHandler(regs*)+0x6b3>
c0016b2d:	ef                   	out    dx,eax
c0016b2e:	eb 02                	jmp    c0016b32 <Vm::faultHandler(regs*)+0x6b5>
c0016b30:	66 ef                	out    dx,ax
c0016b32:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016b35:	b0 01                	mov    al,0x1
c0016b37:	eb 60                	jmp    c0016b99 <Vm::faultHandler(regs*)+0x71c>
c0016b39:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016b3d:	50                   	push   eax
c0016b3e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016b42:	50                   	push   eax
c0016b43:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016b47:	50                   	push   eax
c0016b48:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016b4c:	50                   	push   eax
c0016b4d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b51:	50                   	push   eax
c0016b52:	52                   	push   edx
c0016b53:	52                   	push   edx
c0016b54:	68 1c 2d 02 c0       	push   0xc0022d1c
c0016b59:	e8 06 04 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016b5e:	83 c4 20             	add    esp,0x20
c0016b61:	83 ec 0c             	sub    esp,0xc
c0016b64:	6a 60                	push   0x60
c0016b66:	e8 36 f3 ff ff       	call   c0015ea1 <Vm::inbv(unsigned short)>
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	0f b6 d0             	movzx  edx,al
c0016b71:	83 fa 1c             	cmp    edx,0x1c
c0016b74:	74 05                	je     c0016b7b <Vm::faultHandler(regs*)+0x6fe>
c0016b76:	83 fa 5a             	cmp    edx,0x5a
c0016b79:	75 e6                	jne    c0016b61 <Vm::faultHandler(regs*)+0x6e4>
c0016b7b:	0f b6 c0             	movzx  eax,al
c0016b7e:	83 f8 1c             	cmp    eax,0x1c
c0016b81:	74 05                	je     c0016b88 <Vm::faultHandler(regs*)+0x70b>
c0016b83:	83 f8 5a             	cmp    eax,0x5a
c0016b86:	75 0f                	jne    c0016b97 <Vm::faultHandler(regs*)+0x71a>
c0016b88:	83 ec 0c             	sub    esp,0xc
c0016b8b:	6a 60                	push   0x60
c0016b8d:	e8 0f f3 ff ff       	call   c0015ea1 <Vm::inbv(unsigned short)>
c0016b92:	83 c4 10             	add    esp,0x10
c0016b95:	eb e4                	jmp    c0016b7b <Vm::faultHandler(regs*)+0x6fe>
c0016b97:	31 c0                	xor    eax,eax
c0016b99:	83 c4 2c             	add    esp,0x2c
c0016b9c:	5b                   	pop    ebx
c0016b9d:	5e                   	pop    esi
c0016b9e:	5f                   	pop    edi
c0016b9f:	5d                   	pop    ebp
c0016ba0:	c3                   	ret    
c0016ba1:	90                   	nop

c0016ba2 <noCopro(unsigned long)>:
c0016ba2:	c3                   	ret    
c0016ba3:	90                   	nop

c0016ba4 <CPU::close(int, int, void*)>:
c0016ba4:	31 c0                	xor    eax,eax
c0016ba6:	c3                   	ret    

c0016ba7 <x86ReadCMOS(unsigned char)>:
c0016ba7:	83 ec 14             	sub    esp,0x14
c0016baa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016bae:	88 04 24             	mov    BYTE PTR [esp],al
c0016bb1:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016bb6:	0f b6 c0             	movzx  eax,al
c0016bb9:	85 c0                	test   eax,eax
c0016bbb:	74 04                	je     c0016bc1 <x86ReadCMOS(unsigned char)+0x1a>
c0016bbd:	b2 00                	mov    dl,0x0
c0016bbf:	eb 02                	jmp    c0016bc3 <x86ReadCMOS(unsigned char)+0x1c>
c0016bc1:	b2 80                	mov    dl,0x80
c0016bc3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016bc6:	09 d0                	or     eax,edx
c0016bc8:	0f b6 c0             	movzx  eax,al
c0016bcb:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016bd2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016bd6:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016bda:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016bdf:	ee                   	out    dx,al
c0016be0:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016be7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016bec:	89 c2                	mov    edx,eax
c0016bee:	ec                   	in     al,dx
c0016bef:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016bf3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016bf7:	83 c4 14             	add    esp,0x14
c0016bfa:	c3                   	ret    

c0016bfb <x86WriteCMOS(unsigned char, unsigned char)>:
c0016bfb:	83 ec 18             	sub    esp,0x18
c0016bfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016c02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c06:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0016c0a:	88 04 24             	mov    BYTE PTR [esp],al
c0016c0d:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016c12:	0f b6 c0             	movzx  eax,al
c0016c15:	85 c0                	test   eax,eax
c0016c17:	74 04                	je     c0016c1d <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0016c19:	b2 00                	mov    dl,0x0
c0016c1b:	eb 02                	jmp    c0016c1f <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016c1d:	b2 80                	mov    dl,0x80
c0016c1f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016c23:	09 d0                	or     eax,edx
c0016c25:	0f b6 c0             	movzx  eax,al
c0016c28:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016c2f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016c33:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016c37:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016c3c:	ee                   	out    dx,al
c0016c3d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016c41:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016c48:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016c4c:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016c50:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016c55:	ee                   	out    dx,al
c0016c56:	90                   	nop
c0016c57:	83 c4 18             	add    esp,0x18
c0016c5a:	c3                   	ret    

c0016c5b <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016c5b:	60                   	pusha  
c0016c5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016c68:	9c                   	pushf  
c0016c69:	fa                   	cli    
c0016c6a:	0f 09                	wbinvd 
c0016c6c:	0f 30                	wrmsr  
c0016c6e:	9d                   	popf   
c0016c6f:	89 c2                	mov    edx,eax
c0016c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c75:	89 10                	mov    DWORD PTR [eax],edx
c0016c77:	61                   	popa   
c0016c78:	90                   	nop
c0016c79:	c3                   	ret    

c0016c7a <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016c7a:	60                   	pusha  
c0016c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c7f:	89 c1                	mov    ecx,eax
c0016c81:	9c                   	pushf  
c0016c82:	fa                   	cli    
c0016c83:	0f 09                	wbinvd 
c0016c85:	31 c0                	xor    eax,eax
c0016c87:	31 d2                	xor    edx,edx
c0016c89:	0f 32                	rdmsr  
c0016c8b:	9d                   	popf   
c0016c8c:	89 c2                	mov    edx,eax
c0016c8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c92:	89 10                	mov    DWORD PTR [eax],edx
c0016c94:	61                   	popa   
c0016c95:	90                   	nop
c0016c96:	c3                   	ret    

c0016c97 <AMD_K6_writeback(int, int, int)>:
c0016c97:	83 ec 20             	sub    esp,0x20
c0016c9a:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0016c9f:	c1 e8 14             	shr    eax,0x14
c0016ca2:	c1 e8 02             	shr    eax,0x2
c0016ca5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ca9:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016cae:	0f 85 9e 00 00 00    	jne    c0016d52 <AMD_K6_writeback(int, int, int)+0xbb>
c0016cb4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016cb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cbc:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016cc1:	75 19                	jne    c0016cdc <AMD_K6_writeback(int, int, int)+0x45>
c0016cc3:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016cc8:	7f 0a                	jg     c0016cd4 <AMD_K6_writeback(int, int, int)+0x3d>
c0016cca:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016cd2:	eb 08                	jmp    c0016cdc <AMD_K6_writeback(int, int, int)+0x45>
c0016cd4:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016cdc:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016ce1:	7c 6e                	jl     c0016d51 <AMD_K6_writeback(int, int, int)+0xba>
c0016ce3:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016ce8:	7e 09                	jle    c0016cf3 <AMD_K6_writeback(int, int, int)+0x5c>
c0016cea:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0016cef:	74 36                	je     c0016d27 <AMD_K6_writeback(int, int, int)+0x90>
c0016cf1:	eb 5e                	jmp    c0016d51 <AMD_K6_writeback(int, int, int)+0xba>
c0016cf3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cf7:	50                   	push   eax
c0016cf8:	68 82 00 00 c0       	push   0xc0000082
c0016cfd:	e8 78 ff ff ff       	call   c0016c7a <AMD_K6_read_msr(unsigned int, REGS*)>
c0016d02:	83 c4 08             	add    esp,0x8
c0016d05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d09:	01 c0                	add    eax,eax
c0016d0b:	83 e0 7f             	and    eax,0x7f
c0016d0e:	89 c2                	mov    edx,eax
c0016d10:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d14:	50                   	push   eax
c0016d15:	6a 00                	push   0x0
c0016d17:	52                   	push   edx
c0016d18:	68 82 00 00 c0       	push   0xc0000082
c0016d1d:	e8 39 ff ff ff       	call   c0016c5b <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016d22:	83 c4 10             	add    esp,0x10
c0016d25:	eb 2b                	jmp    c0016d52 <AMD_K6_writeback(int, int, int)+0xbb>
c0016d27:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d2b:	50                   	push   eax
c0016d2c:	68 82 00 00 c0       	push   0xc0000082
c0016d31:	e8 44 ff ff ff       	call   c0016c7a <AMD_K6_read_msr(unsigned int, REGS*)>
c0016d36:	83 c4 08             	add    esp,0x8
c0016d39:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d3d:	50                   	push   eax
c0016d3e:	6a 00                	push   0x0
c0016d40:	6a 00                	push   0x0
c0016d42:	68 82 00 00 c0       	push   0xc0000082
c0016d47:	e8 0f ff ff ff       	call   c0016c5b <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016d4c:	83 c4 10             	add    esp,0x10
c0016d4f:	eb 01                	jmp    c0016d52 <AMD_K6_writeback(int, int, int)+0xbb>
c0016d51:	90                   	nop
c0016d52:	90                   	nop
c0016d53:	83 c4 20             	add    esp,0x20
c0016d56:	c3                   	ret    

c0016d57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016d57:	56                   	push   esi
c0016d58:	53                   	push   ebx
c0016d59:	a1 40 45 02 c0       	mov    eax,ds:0xc0024540
c0016d5e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016d62:	75 32                	jne    c0016d96 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016d64:	8b 15 60 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c760
c0016d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d6e:	89 10                	mov    DWORD PTR [eax],edx
c0016d70:	8b 15 5c c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c75c
c0016d76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d7a:	89 10                	mov    DWORD PTR [eax],edx
c0016d7c:	8b 15 58 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c758
c0016d82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d86:	89 10                	mov    DWORD PTR [eax],edx
c0016d88:	8b 15 54 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c754
c0016d8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d92:	89 10                	mov    DWORD PTR [eax],edx
c0016d94:	eb 5c                	jmp    c0016df2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0016d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d9a:	ba 00 00 00 00       	mov    edx,0x0
c0016d9f:	89 d1                	mov    ecx,edx
c0016da1:	0f a2                	cpuid  
c0016da3:	89 c6                	mov    esi,eax
c0016da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da9:	89 30                	mov    DWORD PTR [eax],esi
c0016dab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016daf:	89 18                	mov    DWORD PTR [eax],ebx
c0016db1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016db5:	89 08                	mov    DWORD PTR [eax],ecx
c0016db7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016dbb:	89 10                	mov    DWORD PTR [eax],edx
c0016dbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dc1:	a3 40 45 02 c0       	mov    ds:0xc0024540,eax
c0016dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dca:	8b 00                	mov    eax,DWORD PTR [eax]
c0016dcc:	a3 60 c7 02 c0       	mov    ds:0xc002c760,eax
c0016dd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016dd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0016dd7:	a3 5c c7 02 c0       	mov    ds:0xc002c75c,eax
c0016ddc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016de0:	8b 00                	mov    eax,DWORD PTR [eax]
c0016de2:	a3 58 c7 02 c0       	mov    ds:0xc002c758,eax
c0016de7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016deb:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ded:	a3 54 c7 02 c0       	mov    ds:0xc002c754,eax
c0016df2:	5b                   	pop    ebx
c0016df3:	5e                   	pop    esi
c0016df4:	c3                   	ret    

c0016df5 <cpuidCheckEDX(unsigned int)>:
c0016df5:	83 ec 10             	sub    esp,0x10
c0016df8:	89 e0                	mov    eax,esp
c0016dfa:	50                   	push   eax
c0016dfb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dff:	50                   	push   eax
c0016e00:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016e04:	50                   	push   eax
c0016e05:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e09:	50                   	push   eax
c0016e0a:	6a 01                	push   0x1
c0016e0c:	e8 46 ff ff ff       	call   c0016d57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e11:	83 c4 14             	add    esp,0x14
c0016e14:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016e17:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016e1b:	0f 95 c0             	setne  al
c0016e1e:	83 c4 10             	add    esp,0x10
c0016e21:	c3                   	ret    

c0016e22 <cpuidCheckECX(unsigned int)>:
c0016e22:	83 ec 10             	sub    esp,0x10
c0016e25:	89 e0                	mov    eax,esp
c0016e27:	50                   	push   eax
c0016e28:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e2c:	50                   	push   eax
c0016e2d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016e31:	50                   	push   eax
c0016e32:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e36:	50                   	push   eax
c0016e37:	6a 01                	push   0x1
c0016e39:	e8 19 ff ff ff       	call   c0016d57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e3e:	83 c4 14             	add    esp,0x14
c0016e41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e45:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016e49:	0f 95 c0             	setne  al
c0016e4c:	83 c4 10             	add    esp,0x10
c0016e4f:	c3                   	ret    

c0016e50 <cpuidCheckExtendedEBX(unsigned int)>:
c0016e50:	83 ec 10             	sub    esp,0x10
c0016e53:	89 e0                	mov    eax,esp
c0016e55:	50                   	push   eax
c0016e56:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e5a:	50                   	push   eax
c0016e5b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016e5f:	50                   	push   eax
c0016e60:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e64:	50                   	push   eax
c0016e65:	6a 07                	push   0x7
c0016e67:	e8 eb fe ff ff       	call   c0016d57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e6c:	83 c4 14             	add    esp,0x14
c0016e6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e73:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016e77:	0f 95 c0             	setne  al
c0016e7a:	83 c4 10             	add    esp,0x10
c0016e7d:	c3                   	ret    

c0016e7e <cpuidCheckExtendedECX(unsigned int)>:
c0016e7e:	83 ec 10             	sub    esp,0x10
c0016e81:	89 e0                	mov    eax,esp
c0016e83:	50                   	push   eax
c0016e84:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e88:	50                   	push   eax
c0016e89:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016e8d:	50                   	push   eax
c0016e8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e92:	50                   	push   eax
c0016e93:	6a 07                	push   0x7
c0016e95:	e8 bd fe ff ff       	call   c0016d57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e9a:	83 c4 14             	add    esp,0x14
c0016e9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ea1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016ea5:	0f 95 c0             	setne  al
c0016ea8:	83 c4 10             	add    esp,0x10
c0016eab:	c3                   	ret    

c0016eac <HalDetectFeatures()>:
c0016eac:	57                   	push   edi
c0016ead:	56                   	push   esi
c0016eae:	53                   	push   ebx
c0016eaf:	81 ec 90 00 00 00    	sub    esp,0x90
c0016eb5:	83 ec 04             	sub    esp,0x4
c0016eb8:	6a 08                	push   0x8
c0016eba:	6a 00                	push   0x0
c0016ebc:	68 8c c7 02 c0       	push   0xc002c78c
c0016ec1:	e8 2a 96 fe ff       	call   c00004f0 <memset>
c0016ec6:	83 c4 10             	add    esp,0x10
c0016ec9:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ece:	83 c8 04             	or     eax,0x4
c0016ed1:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ed6:	e8 1e 93 fe ff       	call   c00001f9 <detectCPUID>
c0016edb:	85 c0                	test   eax,eax
c0016edd:	0f 95 c0             	setne  al
c0016ee0:	83 e0 01             	and    eax,0x1
c0016ee3:	83 e0 01             	and    eax,0x1
c0016ee6:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016ee9:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016eee:	83 e0 fd             	and    eax,0xfffffffd
c0016ef1:	88 c2                	mov    dl,al
c0016ef3:	88 c8                	mov    al,cl
c0016ef5:	09 d0                	or     eax,edx
c0016ef7:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016efc:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f01:	83 e0 02             	and    eax,0x2
c0016f04:	0f b6 c0             	movzx  eax,al
c0016f07:	85 c0                	test   eax,eax
c0016f09:	0f 84 62 02 00 00    	je     c0017171 <HalDetectFeatures()+0x2c5>
c0016f0f:	83 ec 0c             	sub    esp,0xc
c0016f12:	6a 20                	push   0x20
c0016f14:	e8 dc fe ff ff       	call   c0016df5 <cpuidCheckEDX(unsigned int)>
c0016f19:	83 c4 10             	add    esp,0x10
c0016f1c:	83 e0 01             	and    eax,0x1
c0016f1f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016f26:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f2b:	83 e0 f7             	and    eax,0xfffffff7
c0016f2e:	88 c2                	mov    dl,al
c0016f30:	88 c8                	mov    al,cl
c0016f32:	09 d0                	or     eax,edx
c0016f34:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f39:	83 ec 0c             	sub    esp,0xc
c0016f3c:	68 00 00 00 04       	push   0x4000000
c0016f41:	e8 af fe ff ff       	call   c0016df5 <cpuidCheckEDX(unsigned int)>
c0016f46:	83 c4 10             	add    esp,0x10
c0016f49:	89 c1                	mov    ecx,eax
c0016f4b:	83 e1 01             	and    ecx,0x1
c0016f4e:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f53:	83 e0 fe             	and    eax,0xfffffffe
c0016f56:	88 c2                	mov    dl,al
c0016f58:	88 c8                	mov    al,cl
c0016f5a:	09 d0                	or     eax,edx
c0016f5c:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f61:	83 ec 0c             	sub    esp,0xc
c0016f64:	68 80 00 00 00       	push   0x80
c0016f69:	e8 87 fe ff ff       	call   c0016df5 <cpuidCheckEDX(unsigned int)>
c0016f6e:	83 c4 10             	add    esp,0x10
c0016f71:	89 c1                	mov    ecx,eax
c0016f73:	c1 e1 07             	shl    ecx,0x7
c0016f76:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f7b:	83 e0 7f             	and    eax,0x7f
c0016f7e:	88 c2                	mov    dl,al
c0016f80:	88 c8                	mov    al,cl
c0016f82:	09 d0                	or     eax,edx
c0016f84:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f89:	83 ec 0c             	sub    esp,0xc
c0016f8c:	68 00 00 80 00       	push   0x800000
c0016f91:	e8 5f fe ff ff       	call   c0016df5 <cpuidCheckEDX(unsigned int)>
c0016f96:	83 c4 10             	add    esp,0x10
c0016f99:	83 e0 01             	and    eax,0x1
c0016f9c:	89 c1                	mov    ecx,eax
c0016f9e:	c1 e1 05             	shl    ecx,0x5
c0016fa1:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016fa6:	83 e0 df             	and    eax,0xffffffdf
c0016fa9:	88 c2                	mov    dl,al
c0016fab:	88 c8                	mov    al,cl
c0016fad:	09 d0                	or     eax,edx
c0016faf:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016fb4:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016fb9:	83 e0 01             	and    eax,0x1
c0016fbc:	75 0c                	jne    c0016fca <HalDetectFeatures()+0x11e>
c0016fbe:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016fc3:	25 00 04 00 00       	and    eax,0x400
c0016fc8:	74 0f                	je     c0016fd9 <HalDetectFeatures()+0x12d>
c0016fca:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016fcf:	83 e0 fe             	and    eax,0xfffffffe
c0016fd2:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016fd7:	eb 28                	jmp    c0017001 <HalDetectFeatures()+0x155>
c0016fd9:	83 ec 0c             	sub    esp,0xc
c0016fdc:	68 00 02 00 00       	push   0x200
c0016fe1:	e8 0f fe ff ff       	call   c0016df5 <cpuidCheckEDX(unsigned int)>
c0016fe6:	83 c4 10             	add    esp,0x10
c0016fe9:	89 c1                	mov    ecx,eax
c0016feb:	83 e1 01             	and    ecx,0x1
c0016fee:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ff3:	83 e0 fe             	and    eax,0xfffffffe
c0016ff6:	88 c2                	mov    dl,al
c0016ff8:	88 c8                	mov    al,cl
c0016ffa:	09 d0                	or     eax,edx
c0016ffc:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017001:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017006:	83 e0 01             	and    eax,0x1
c0017009:	0f b6 c0             	movzx  eax,al
c001700c:	85 c0                	test   eax,eax
c001700e:	74 1c                	je     c001702c <HalDetectFeatures()+0x180>
c0017010:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017015:	83 e0 08             	and    eax,0x8
c0017018:	0f b6 c0             	movzx  eax,al
c001701b:	85 c0                	test   eax,eax
c001701d:	75 0d                	jne    c001702c <HalDetectFeatures()+0x180>
c001701f:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017024:	83 e0 fe             	and    eax,0xfffffffe
c0017027:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c001702c:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0017034:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c001703c:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0017044:	85 c0                	test   eax,eax
c0017046:	0f 84 ab 00 00 00    	je     c00170f7 <HalDetectFeatures()+0x24b>
c001704c:	83 ec 0c             	sub    esp,0xc
c001704f:	6a 01                	push   0x1
c0017051:	e8 cc fd ff ff       	call   c0016e22 <cpuidCheckECX(unsigned int)>
c0017056:	83 c4 10             	add    esp,0x10
c0017059:	83 e0 01             	and    eax,0x1
c001705c:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001705f:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017064:	83 e0 fd             	and    eax,0xfffffffd
c0017067:	88 c2                	mov    dl,al
c0017069:	88 c8                	mov    al,cl
c001706b:	09 d0                	or     eax,edx
c001706d:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017072:	83 ec 0c             	sub    esp,0xc
c0017075:	68 00 02 00 00       	push   0x200
c001707a:	e8 a3 fd ff ff       	call   c0016e22 <cpuidCheckECX(unsigned int)>
c001707f:	83 c4 10             	add    esp,0x10
c0017082:	83 e0 01             	and    eax,0x1
c0017085:	89 c1                	mov    ecx,eax
c0017087:	c1 e1 04             	shl    ecx,0x4
c001708a:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c001708f:	83 e0 ef             	and    eax,0xffffffef
c0017092:	88 c2                	mov    dl,al
c0017094:	88 c8                	mov    al,cl
c0017096:	09 d0                	or     eax,edx
c0017098:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c001709d:	83 ec 0c             	sub    esp,0xc
c00170a0:	68 00 00 08 00       	push   0x80000
c00170a5:	e8 78 fd ff ff       	call   c0016e22 <cpuidCheckECX(unsigned int)>
c00170aa:	83 c4 10             	add    esp,0x10
c00170ad:	83 e0 01             	and    eax,0x1
c00170b0:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00170b7:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c00170bc:	83 e0 fb             	and    eax,0xfffffffb
c00170bf:	88 c2                	mov    dl,al
c00170c1:	88 c8                	mov    al,cl
c00170c3:	09 d0                	or     eax,edx
c00170c5:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c00170ca:	83 ec 0c             	sub    esp,0xc
c00170cd:	68 00 00 10 00       	push   0x100000
c00170d2:	e8 4b fd ff ff       	call   c0016e22 <cpuidCheckECX(unsigned int)>
c00170d7:	83 c4 10             	add    esp,0x10
c00170da:	83 e0 01             	and    eax,0x1
c00170dd:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00170e4:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c00170e9:	83 e0 f7             	and    eax,0xfffffff7
c00170ec:	88 c2                	mov    dl,al
c00170ee:	88 c8                	mov    al,cl
c00170f0:	09 d0                	or     eax,edx
c00170f2:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c00170f7:	83 ec 0c             	sub    esp,0xc
c00170fa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00170fe:	50                   	push   eax
c00170ff:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017103:	50                   	push   eax
c0017104:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017108:	50                   	push   eax
c0017109:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001710d:	50                   	push   eax
c001710e:	68 00 00 00 80       	push   0x80000000
c0017113:	e8 3f fc ff ff       	call   c0016d57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017118:	83 c4 20             	add    esp,0x20
c001711b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001711f:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017124:	76 4b                	jbe    c0017171 <HalDetectFeatures()+0x2c5>
c0017126:	83 ec 0c             	sub    esp,0xc
c0017129:	8d 44 24 24          	lea    eax,[esp+0x24]
c001712d:	50                   	push   eax
c001712e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017132:	50                   	push   eax
c0017133:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017137:	50                   	push   eax
c0017138:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001713c:	50                   	push   eax
c001713d:	68 01 00 00 80       	push   0x80000001
c0017142:	e8 10 fc ff ff       	call   c0016d57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017147:	83 c4 20             	add    esp,0x20
c001714a:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001714f:	83 e0 bf             	and    eax,0xffffffbf
c0017152:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017157:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001715c:	83 e0 fd             	and    eax,0xfffffffd
c001715f:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017164:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017169:	83 e0 fe             	and    eax,0xfffffffe
c001716c:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017171:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017176:	25 00 04 00 00       	and    eax,0x400
c001717b:	74 0d                	je     c001718a <HalDetectFeatures()+0x2de>
c001717d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017182:	83 e0 fb             	and    eax,0xfffffffb
c0017185:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c001718a:	c6 05 88 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c788,0x1
c0017191:	83 ec 04             	sub    esp,0x4
c0017194:	6a 0d                	push   0xd
c0017196:	6a 00                	push   0x0
c0017198:	68 70 c7 02 c0       	push   0xc002c770
c001719d:	e8 4e 93 fe ff       	call   c00004f0 <memset>
c00171a2:	83 c4 10             	add    esp,0x10
c00171a5:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c00171aa:	83 e0 02             	and    eax,0x2
c00171ad:	0f b6 c0             	movzx  eax,al
c00171b0:	85 c0                	test   eax,eax
c00171b2:	0f 84 16 08 00 00    	je     c00179ce <HalDetectFeatures()+0xb22>
c00171b8:	83 ec 0c             	sub    esp,0xc
c00171bb:	6a 10                	push   0x10
c00171bd:	e8 33 fc ff ff       	call   c0016df5 <cpuidCheckEDX(unsigned int)>
c00171c2:	83 c4 10             	add    esp,0x10
c00171c5:	83 e0 01             	and    eax,0x1
c00171c8:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00171cf:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171d4:	83 e0 f7             	and    eax,0xfffffff7
c00171d7:	88 c2                	mov    dl,al
c00171d9:	88 c8                	mov    al,cl
c00171db:	09 d0                	or     eax,edx
c00171dd:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00171e2:	83 ec 0c             	sub    esp,0xc
c00171e5:	6a 40                	push   0x40
c00171e7:	e8 09 fc ff ff       	call   c0016df5 <cpuidCheckEDX(unsigned int)>
c00171ec:	83 c4 10             	add    esp,0x10
c00171ef:	83 e0 01             	and    eax,0x1
c00171f2:	89 c1                	mov    ecx,eax
c00171f4:	c1 e1 04             	shl    ecx,0x4
c00171f7:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171fc:	83 e0 ef             	and    eax,0xffffffef
c00171ff:	88 c2                	mov    dl,al
c0017201:	88 c8                	mov    al,cl
c0017203:	09 d0                	or     eax,edx
c0017205:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001720a:	83 ec 0c             	sub    esp,0xc
c001720d:	6a 08                	push   0x8
c001720f:	e8 e1 fb ff ff       	call   c0016df5 <cpuidCheckEDX(unsigned int)>
c0017214:	83 c4 10             	add    esp,0x10
c0017217:	83 e0 01             	and    eax,0x1
c001721a:	89 c1                	mov    ecx,eax
c001721c:	c1 e1 05             	shl    ecx,0x5
c001721f:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017224:	83 e0 df             	and    eax,0xffffffdf
c0017227:	88 c2                	mov    dl,al
c0017229:	88 c8                	mov    al,cl
c001722b:	09 d0                	or     eax,edx
c001722d:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017232:	83 ec 0c             	sub    esp,0xc
c0017235:	68 00 20 00 00       	push   0x2000
c001723a:	e8 b6 fb ff ff       	call   c0016df5 <cpuidCheckEDX(unsigned int)>
c001723f:	83 c4 10             	add    esp,0x10
c0017242:	83 e0 01             	and    eax,0x1
c0017245:	89 c1                	mov    ecx,eax
c0017247:	c1 e1 06             	shl    ecx,0x6
c001724a:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001724f:	83 e0 bf             	and    eax,0xffffffbf
c0017252:	88 c2                	mov    dl,al
c0017254:	88 c8                	mov    al,cl
c0017256:	09 d0                	or     eax,edx
c0017258:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001725d:	83 ec 0c             	sub    esp,0xc
c0017260:	68 00 00 01 00       	push   0x10000
c0017265:	e8 8b fb ff ff       	call   c0016df5 <cpuidCheckEDX(unsigned int)>
c001726a:	83 c4 10             	add    esp,0x10
c001726d:	89 c1                	mov    ecx,eax
c001726f:	c1 e1 07             	shl    ecx,0x7
c0017272:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017277:	83 e0 7f             	and    eax,0x7f
c001727a:	88 c2                	mov    dl,al
c001727c:	88 c8                	mov    al,cl
c001727e:	09 d0                	or     eax,edx
c0017280:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017285:	83 ec 0c             	sub    esp,0xc
c0017288:	6a 01                	push   0x1
c001728a:	e8 66 fb ff ff       	call   c0016df5 <cpuidCheckEDX(unsigned int)>
c001728f:	83 c4 10             	add    esp,0x10
c0017292:	83 e0 01             	and    eax,0x1
c0017295:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001729c:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00172a1:	83 e0 f7             	and    eax,0xfffffff7
c00172a4:	88 c2                	mov    dl,al
c00172a6:	88 c8                	mov    al,cl
c00172a8:	09 d0                	or     eax,edx
c00172aa:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00172af:	83 ec 0c             	sub    esp,0xc
c00172b2:	68 00 08 00 00       	push   0x800
c00172b7:	e8 39 fb ff ff       	call   c0016df5 <cpuidCheckEDX(unsigned int)>
c00172bc:	83 c4 10             	add    esp,0x10
c00172bf:	89 c1                	mov    ecx,eax
c00172c1:	83 e1 01             	and    ecx,0x1
c00172c4:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00172c9:	83 e0 fe             	and    eax,0xfffffffe
c00172cc:	88 c2                	mov    dl,al
c00172ce:	88 c8                	mov    al,cl
c00172d0:	09 d0                	or     eax,edx
c00172d2:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00172d7:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00172dc:	83 e0 40             	and    eax,0x40
c00172df:	0f b6 c0             	movzx  eax,al
c00172e2:	85 c0                	test   eax,eax
c00172e4:	74 0a                	je     c00172f0 <HalDetectFeatures()+0x444>
c00172e6:	c7 05 68 c7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002c768,0x100
c00172f0:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00172f5:	83 e0 80             	and    eax,0xffffff80
c00172f8:	0f b6 c0             	movzx  eax,al
c00172fb:	85 c0                	test   eax,eax
c00172fd:	74 0a                	je     c0017309 <HalDetectFeatures()+0x45d>
c00172ff:	c7 05 64 c7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002c764,0x80
c0017309:	83 ec 0c             	sub    esp,0xc
c001730c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017310:	50                   	push   eax
c0017311:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017315:	50                   	push   eax
c0017316:	8d 44 24 24          	lea    eax,[esp+0x24]
c001731a:	50                   	push   eax
c001731b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001731f:	50                   	push   eax
c0017320:	6a 00                	push   0x0
c0017322:	e8 30 fa ff ff       	call   c0016d57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017327:	83 c4 20             	add    esp,0x20
c001732a:	c7 44 24 48 70 c7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002c770
c0017332:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017336:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001733a:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0017342:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017346:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001734a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001734e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0017352:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0017356:	89 c6                	mov    esi,eax
c0017358:	89 d7                	mov    edi,edx
c001735a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001735c:	89 c8                	mov    eax,ecx
c001735e:	89 fa                	mov    edx,edi
c0017360:	89 f3                	mov    ebx,esi
c0017362:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017366:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001736a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001736e:	b8 74 c7 02 c0       	mov    eax,0xc002c774
c0017373:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0017377:	8d 44 24 08          	lea    eax,[esp+0x8]
c001737b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001737f:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0017387:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001738b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001738f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017393:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0017397:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001739b:	89 c6                	mov    esi,eax
c001739d:	89 d7                	mov    edi,edx
c001739f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173a1:	89 c8                	mov    eax,ecx
c00173a3:	89 fa                	mov    edx,edi
c00173a5:	89 f3                	mov    ebx,esi
c00173a7:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00173ab:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00173af:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00173b3:	b8 78 c7 02 c0       	mov    eax,0xc002c778
c00173b8:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00173bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00173c3:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00173c7:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00173cf:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00173d6:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00173da:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00173de:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00173e5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c00173e9:	89 c6                	mov    esi,eax
c00173eb:	89 d7                	mov    edi,edx
c00173ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173ef:	89 c8                	mov    eax,ecx
c00173f1:	89 fa                	mov    edx,edi
c00173f3:	89 f3                	mov    ebx,esi
c00173f5:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c00173f9:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c00173fd:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0017401:	83 ec 08             	sub    esp,0x8
c0017404:	68 7c 2d 02 c0       	push   0xc0022d7c
c0017409:	68 70 c7 02 c0       	push   0xc002c770
c001740e:	e8 3d 93 fe ff       	call   c0000750 <strcmp>
c0017413:	83 c4 10             	add    esp,0x10
c0017416:	85 c0                	test   eax,eax
c0017418:	74 19                	je     c0017433 <HalDetectFeatures()+0x587>
c001741a:	83 ec 08             	sub    esp,0x8
c001741d:	68 89 2d 02 c0       	push   0xc0022d89
c0017422:	68 70 c7 02 c0       	push   0xc002c770
c0017427:	e8 24 93 fe ff       	call   c0000750 <strcmp>
c001742c:	83 c4 10             	add    esp,0x10
c001742f:	85 c0                	test   eax,eax
c0017431:	75 04                	jne    c0017437 <HalDetectFeatures()+0x58b>
c0017433:	b0 01                	mov    al,0x1
c0017435:	eb 02                	jmp    c0017439 <HalDetectFeatures()+0x58d>
c0017437:	b0 00                	mov    al,0x0
c0017439:	0f b6 c0             	movzx  eax,al
c001743c:	85 c0                	test   eax,eax
c001743e:	74 0f                	je     c001744f <HalDetectFeatures()+0x5a3>
c0017440:	c7 05 84 c7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x2
c001744a:	e9 0d 03 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c001744f:	83 ec 08             	sub    esp,0x8
c0017452:	68 96 2d 02 c0       	push   0xc0022d96
c0017457:	68 70 c7 02 c0       	push   0xc002c770
c001745c:	e8 ef 92 fe ff       	call   c0000750 <strcmp>
c0017461:	83 c4 10             	add    esp,0x10
c0017464:	85 c0                	test   eax,eax
c0017466:	74 19                	je     c0017481 <HalDetectFeatures()+0x5d5>
c0017468:	83 ec 08             	sub    esp,0x8
c001746b:	68 a3 2d 02 c0       	push   0xc0022da3
c0017470:	68 70 c7 02 c0       	push   0xc002c770
c0017475:	e8 d6 92 fe ff       	call   c0000750 <strcmp>
c001747a:	83 c4 10             	add    esp,0x10
c001747d:	85 c0                	test   eax,eax
c001747f:	75 04                	jne    c0017485 <HalDetectFeatures()+0x5d9>
c0017481:	b0 01                	mov    al,0x1
c0017483:	eb 02                	jmp    c0017487 <HalDetectFeatures()+0x5db>
c0017485:	b0 00                	mov    al,0x0
c0017487:	0f b6 c0             	movzx  eax,al
c001748a:	85 c0                	test   eax,eax
c001748c:	74 0f                	je     c001749d <HalDetectFeatures()+0x5f1>
c001748e:	c7 05 84 c7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x4
c0017498:	e9 bf 02 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c001749d:	83 ec 08             	sub    esp,0x8
c00174a0:	68 b0 2d 02 c0       	push   0xc0022db0
c00174a5:	68 70 c7 02 c0       	push   0xc002c770
c00174aa:	e8 a1 92 fe ff       	call   c0000750 <strcmp>
c00174af:	83 c4 10             	add    esp,0x10
c00174b2:	85 c0                	test   eax,eax
c00174b4:	74 19                	je     c00174cf <HalDetectFeatures()+0x623>
c00174b6:	83 ec 08             	sub    esp,0x8
c00174b9:	68 bd 2d 02 c0       	push   0xc0022dbd
c00174be:	68 70 c7 02 c0       	push   0xc002c770
c00174c3:	e8 88 92 fe ff       	call   c0000750 <strcmp>
c00174c8:	83 c4 10             	add    esp,0x10
c00174cb:	85 c0                	test   eax,eax
c00174cd:	75 04                	jne    c00174d3 <HalDetectFeatures()+0x627>
c00174cf:	b0 01                	mov    al,0x1
c00174d1:	eb 02                	jmp    c00174d5 <HalDetectFeatures()+0x629>
c00174d3:	b0 00                	mov    al,0x0
c00174d5:	0f b6 c0             	movzx  eax,al
c00174d8:	85 c0                	test   eax,eax
c00174da:	74 0f                	je     c00174eb <HalDetectFeatures()+0x63f>
c00174dc:	c7 05 84 c7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x5
c00174e6:	e9 71 02 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c00174eb:	83 ec 08             	sub    esp,0x8
c00174ee:	68 ca 2d 02 c0       	push   0xc0022dca
c00174f3:	68 70 c7 02 c0       	push   0xc002c770
c00174f8:	e8 53 92 fe ff       	call   c0000750 <strcmp>
c00174fd:	83 c4 10             	add    esp,0x10
c0017500:	85 c0                	test   eax,eax
c0017502:	0f 94 c0             	sete   al
c0017505:	0f b6 c0             	movzx  eax,al
c0017508:	85 c0                	test   eax,eax
c001750a:	74 0f                	je     c001751b <HalDetectFeatures()+0x66f>
c001750c:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c0017516:	e9 41 02 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c001751b:	83 ec 08             	sub    esp,0x8
c001751e:	68 d7 2d 02 c0       	push   0xc0022dd7
c0017523:	68 70 c7 02 c0       	push   0xc002c770
c0017528:	e8 23 92 fe ff       	call   c0000750 <strcmp>
c001752d:	83 c4 10             	add    esp,0x10
c0017530:	85 c0                	test   eax,eax
c0017532:	0f 94 c0             	sete   al
c0017535:	0f b6 c0             	movzx  eax,al
c0017538:	85 c0                	test   eax,eax
c001753a:	74 0f                	je     c001754b <HalDetectFeatures()+0x69f>
c001753c:	c7 05 84 c7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x3
c0017546:	e9 11 02 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c001754b:	83 ec 08             	sub    esp,0x8
c001754e:	68 96 2d 02 c0       	push   0xc0022d96
c0017553:	68 70 c7 02 c0       	push   0xc002c770
c0017558:	e8 f3 91 fe ff       	call   c0000750 <strcmp>
c001755d:	83 c4 10             	add    esp,0x10
c0017560:	85 c0                	test   eax,eax
c0017562:	0f 94 c0             	sete   al
c0017565:	0f b6 c0             	movzx  eax,al
c0017568:	85 c0                	test   eax,eax
c001756a:	74 0f                	je     c001757b <HalDetectFeatures()+0x6cf>
c001756c:	c7 05 84 c7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x6
c0017576:	e9 e1 01 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c001757b:	83 ec 08             	sub    esp,0x8
c001757e:	68 e4 2d 02 c0       	push   0xc0022de4
c0017583:	68 70 c7 02 c0       	push   0xc002c770
c0017588:	e8 c3 91 fe ff       	call   c0000750 <strcmp>
c001758d:	83 c4 10             	add    esp,0x10
c0017590:	85 c0                	test   eax,eax
c0017592:	0f 94 c0             	sete   al
c0017595:	0f b6 c0             	movzx  eax,al
c0017598:	85 c0                	test   eax,eax
c001759a:	74 0f                	je     c00175ab <HalDetectFeatures()+0x6ff>
c001759c:	c7 05 84 c7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x7
c00175a6:	e9 b1 01 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c00175ab:	83 ec 08             	sub    esp,0x8
c00175ae:	68 f1 2d 02 c0       	push   0xc0022df1
c00175b3:	68 70 c7 02 c0       	push   0xc002c770
c00175b8:	e8 93 91 fe ff       	call   c0000750 <strcmp>
c00175bd:	83 c4 10             	add    esp,0x10
c00175c0:	85 c0                	test   eax,eax
c00175c2:	0f 94 c0             	sete   al
c00175c5:	0f b6 c0             	movzx  eax,al
c00175c8:	85 c0                	test   eax,eax
c00175ca:	74 0f                	je     c00175db <HalDetectFeatures()+0x72f>
c00175cc:	c7 05 84 c7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x8
c00175d6:	e9 81 01 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c00175db:	83 ec 08             	sub    esp,0x8
c00175de:	68 fe 2d 02 c0       	push   0xc0022dfe
c00175e3:	68 70 c7 02 c0       	push   0xc002c770
c00175e8:	e8 63 91 fe ff       	call   c0000750 <strcmp>
c00175ed:	83 c4 10             	add    esp,0x10
c00175f0:	85 c0                	test   eax,eax
c00175f2:	0f 94 c0             	sete   al
c00175f5:	0f b6 c0             	movzx  eax,al
c00175f8:	85 c0                	test   eax,eax
c00175fa:	74 0f                	je     c001760b <HalDetectFeatures()+0x75f>
c00175fc:	c7 05 84 c7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x9
c0017606:	e9 51 01 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c001760b:	83 ec 08             	sub    esp,0x8
c001760e:	68 0b 2e 02 c0       	push   0xc0022e0b
c0017613:	68 70 c7 02 c0       	push   0xc002c770
c0017618:	e8 33 91 fe ff       	call   c0000750 <strcmp>
c001761d:	83 c4 10             	add    esp,0x10
c0017620:	85 c0                	test   eax,eax
c0017622:	0f 94 c0             	sete   al
c0017625:	0f b6 c0             	movzx  eax,al
c0017628:	85 c0                	test   eax,eax
c001762a:	74 0f                	je     c001763b <HalDetectFeatures()+0x78f>
c001762c:	c7 05 84 c7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xa
c0017636:	e9 21 01 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c001763b:	83 ec 08             	sub    esp,0x8
c001763e:	68 18 2e 02 c0       	push   0xc0022e18
c0017643:	68 70 c7 02 c0       	push   0xc002c770
c0017648:	e8 03 91 fe ff       	call   c0000750 <strcmp>
c001764d:	83 c4 10             	add    esp,0x10
c0017650:	85 c0                	test   eax,eax
c0017652:	0f 94 c0             	sete   al
c0017655:	0f b6 c0             	movzx  eax,al
c0017658:	85 c0                	test   eax,eax
c001765a:	74 0f                	je     c001766b <HalDetectFeatures()+0x7bf>
c001765c:	c7 05 84 c7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xb
c0017666:	e9 f1 00 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c001766b:	83 ec 08             	sub    esp,0x8
c001766e:	68 25 2e 02 c0       	push   0xc0022e25
c0017673:	68 70 c7 02 c0       	push   0xc002c770
c0017678:	e8 d3 90 fe ff       	call   c0000750 <strcmp>
c001767d:	83 c4 10             	add    esp,0x10
c0017680:	85 c0                	test   eax,eax
c0017682:	0f 94 c0             	sete   al
c0017685:	0f b6 c0             	movzx  eax,al
c0017688:	85 c0                	test   eax,eax
c001768a:	74 0f                	je     c001769b <HalDetectFeatures()+0x7ef>
c001768c:	c7 05 84 c7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xc
c0017696:	e9 c1 00 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c001769b:	83 ec 08             	sub    esp,0x8
c001769e:	68 32 2e 02 c0       	push   0xc0022e32
c00176a3:	68 70 c7 02 c0       	push   0xc002c770
c00176a8:	e8 a3 90 fe ff       	call   c0000750 <strcmp>
c00176ad:	83 c4 10             	add    esp,0x10
c00176b0:	85 c0                	test   eax,eax
c00176b2:	0f 94 c0             	sete   al
c00176b5:	0f b6 c0             	movzx  eax,al
c00176b8:	85 c0                	test   eax,eax
c00176ba:	74 0f                	je     c00176cb <HalDetectFeatures()+0x81f>
c00176bc:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00176c6:	e9 91 00 00 00       	jmp    c001775c <HalDetectFeatures()+0x8b0>
c00176cb:	83 ec 08             	sub    esp,0x8
c00176ce:	68 3f 2e 02 c0       	push   0xc0022e3f
c00176d3:	68 70 c7 02 c0       	push   0xc002c770
c00176d8:	e8 73 90 fe ff       	call   c0000750 <strcmp>
c00176dd:	83 c4 10             	add    esp,0x10
c00176e0:	85 c0                	test   eax,eax
c00176e2:	0f 94 c0             	sete   al
c00176e5:	0f b6 c0             	movzx  eax,al
c00176e8:	85 c0                	test   eax,eax
c00176ea:	74 0c                	je     c00176f8 <HalDetectFeatures()+0x84c>
c00176ec:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00176f6:	eb 64                	jmp    c001775c <HalDetectFeatures()+0x8b0>
c00176f8:	83 ec 08             	sub    esp,0x8
c00176fb:	68 4c 2e 02 c0       	push   0xc0022e4c
c0017700:	68 70 c7 02 c0       	push   0xc002c770
c0017705:	e8 46 90 fe ff       	call   c0000750 <strcmp>
c001770a:	83 c4 10             	add    esp,0x10
c001770d:	85 c0                	test   eax,eax
c001770f:	0f 94 c0             	sete   al
c0017712:	0f b6 c0             	movzx  eax,al
c0017715:	85 c0                	test   eax,eax
c0017717:	74 0c                	je     c0017725 <HalDetectFeatures()+0x879>
c0017719:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017723:	eb 37                	jmp    c001775c <HalDetectFeatures()+0x8b0>
c0017725:	83 ec 08             	sub    esp,0x8
c0017728:	68 59 2e 02 c0       	push   0xc0022e59
c001772d:	68 70 c7 02 c0       	push   0xc002c770
c0017732:	e8 19 90 fe ff       	call   c0000750 <strcmp>
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	85 c0                	test   eax,eax
c001773c:	0f 94 c0             	sete   al
c001773f:	0f b6 c0             	movzx  eax,al
c0017742:	85 c0                	test   eax,eax
c0017744:	74 0c                	je     c0017752 <HalDetectFeatures()+0x8a6>
c0017746:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017750:	eb 0a                	jmp    c001775c <HalDetectFeatures()+0x8b0>
c0017752:	c7 05 84 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x0
c001775c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017760:	83 f8 06             	cmp    eax,0x6
c0017763:	0f 86 cc 00 00 00    	jbe    c0017835 <HalDetectFeatures()+0x989>
c0017769:	83 ec 0c             	sub    esp,0xc
c001776c:	68 80 00 00 00       	push   0x80
c0017771:	e8 da f6 ff ff       	call   c0016e50 <cpuidCheckExtendedEBX(unsigned int)>
c0017776:	83 c4 10             	add    esp,0x10
c0017779:	89 c1                	mov    ecx,eax
c001777b:	83 e1 01             	and    ecx,0x1
c001777e:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017783:	83 e0 fe             	and    eax,0xfffffffe
c0017786:	88 c2                	mov    dl,al
c0017788:	88 c8                	mov    al,cl
c001778a:	09 d0                	or     eax,edx
c001778c:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017791:	83 ec 0c             	sub    esp,0xc
c0017794:	68 00 00 10 00       	push   0x100000
c0017799:	e8 b2 f6 ff ff       	call   c0016e50 <cpuidCheckExtendedEBX(unsigned int)>
c001779e:	83 c4 10             	add    esp,0x10
c00177a1:	83 e0 01             	and    eax,0x1
c00177a4:	89 c1                	mov    ecx,eax
c00177a6:	c1 e1 06             	shl    ecx,0x6
c00177a9:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00177ae:	83 e0 bf             	and    eax,0xffffffbf
c00177b1:	88 c2                	mov    dl,al
c00177b3:	88 c8                	mov    al,cl
c00177b5:	09 d0                	or     eax,edx
c00177b7:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00177bc:	83 ec 0c             	sub    esp,0xc
c00177bf:	68 00 00 04 00       	push   0x40000
c00177c4:	e8 87 f6 ff ff       	call   c0016e50 <cpuidCheckExtendedEBX(unsigned int)>
c00177c9:	83 c4 10             	add    esp,0x10
c00177cc:	83 e0 01             	and    eax,0x1
c00177cf:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00177d2:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00177d7:	83 e0 fd             	and    eax,0xfffffffd
c00177da:	88 c2                	mov    dl,al
c00177dc:	88 c8                	mov    al,cl
c00177de:	09 d0                	or     eax,edx
c00177e0:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00177e5:	83 ec 0c             	sub    esp,0xc
c00177e8:	6a 04                	push   0x4
c00177ea:	e8 8f f6 ff ff       	call   c0016e7e <cpuidCheckExtendedECX(unsigned int)>
c00177ef:	83 c4 10             	add    esp,0x10
c00177f2:	83 e0 01             	and    eax,0x1
c00177f5:	89 c1                	mov    ecx,eax
c00177f7:	c1 e1 05             	shl    ecx,0x5
c00177fa:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00177ff:	83 e0 df             	and    eax,0xffffffdf
c0017802:	88 c2                	mov    dl,al
c0017804:	88 c8                	mov    al,cl
c0017806:	09 d0                	or     eax,edx
c0017808:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001780d:	83 ec 0c             	sub    esp,0xc
c0017810:	6a 20                	push   0x20
c0017812:	e8 67 f6 ff ff       	call   c0016e7e <cpuidCheckExtendedECX(unsigned int)>
c0017817:	83 c4 10             	add    esp,0x10
c001781a:	83 e0 01             	and    eax,0x1
c001781d:	89 c1                	mov    ecx,eax
c001781f:	c1 e1 04             	shl    ecx,0x4
c0017822:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017827:	83 e0 ef             	and    eax,0xffffffef
c001782a:	88 c2                	mov    dl,al
c001782c:	88 c8                	mov    al,cl
c001782e:	09 d0                	or     eax,edx
c0017830:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017835:	83 ec 0c             	sub    esp,0xc
c0017838:	8d 44 24 14          	lea    eax,[esp+0x14]
c001783c:	50                   	push   eax
c001783d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017841:	50                   	push   eax
c0017842:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017846:	50                   	push   eax
c0017847:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001784b:	50                   	push   eax
c001784c:	6a 01                	push   0x1
c001784e:	e8 04 f5 ff ff       	call   c0016d57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017853:	83 c4 20             	add    esp,0x20
c0017856:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001785a:	83 e0 0f             	and    eax,0xf
c001785d:	a2 80 c7 02 c0       	mov    ds:0xc002c780,al
c0017862:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017866:	c1 e8 04             	shr    eax,0x4
c0017869:	83 e0 0f             	and    eax,0xf
c001786c:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c0017871:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017875:	c1 e8 08             	shr    eax,0x8
c0017878:	83 e0 0f             	and    eax,0xf
c001787b:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c0017880:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017884:	c1 e8 0c             	shr    eax,0xc
c0017887:	83 e0 03             	and    eax,0x3
c001788a:	a2 7f c7 02 c0       	mov    ds:0xc002c77f,al
c001788f:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c0017894:	0f b6 c0             	movzx  eax,al
c0017897:	83 f8 06             	cmp    eax,0x6
c001789a:	74 0d                	je     c00178a9 <HalDetectFeatures()+0x9fd>
c001789c:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00178a1:	0f b6 c0             	movzx  eax,al
c00178a4:	83 f8 0f             	cmp    eax,0xf
c00178a7:	75 18                	jne    c00178c1 <HalDetectFeatures()+0xa15>
c00178a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00178ad:	c1 e8 10             	shr    eax,0x10
c00178b0:	c1 e0 04             	shl    eax,0x4
c00178b3:	88 c2                	mov    dl,al
c00178b5:	a0 7e c7 02 c0       	mov    al,ds:0xc002c77e
c00178ba:	09 d0                	or     eax,edx
c00178bc:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c00178c1:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00178c6:	0f b6 c0             	movzx  eax,al
c00178c9:	83 f8 0f             	cmp    eax,0xf
c00178cc:	75 15                	jne    c00178e3 <HalDetectFeatures()+0xa37>
c00178ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00178d2:	c1 e8 14             	shr    eax,0x14
c00178d5:	88 c2                	mov    dl,al
c00178d7:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00178dc:	01 d0                	add    eax,edx
c00178de:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c00178e3:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c00178eb:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c00178f3:	85 c0                	test   eax,eax
c00178f5:	74 2d                	je     c0017924 <HalDetectFeatures()+0xa78>
c00178f7:	83 ec 0c             	sub    esp,0xc
c00178fa:	68 00 00 00 40       	push   0x40000000
c00178ff:	e8 1e f5 ff ff       	call   c0016e22 <cpuidCheckECX(unsigned int)>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	83 e0 01             	and    eax,0x1
c001790a:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017911:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017916:	83 e0 fb             	and    eax,0xfffffffb
c0017919:	88 c2                	mov    dl,al
c001791b:	88 c8                	mov    al,cl
c001791d:	09 d0                	or     eax,edx
c001791f:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017924:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017929:	83 c8 04             	or     eax,0x4
c001792c:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017931:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017936:	83 c8 08             	or     eax,0x8
c0017939:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001793e:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017943:	83 c8 10             	or     eax,0x10
c0017946:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001794b:	83 ec 0c             	sub    esp,0xc
c001794e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017952:	50                   	push   eax
c0017953:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017957:	50                   	push   eax
c0017958:	8d 44 24 24          	lea    eax,[esp+0x24]
c001795c:	50                   	push   eax
c001795d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017961:	50                   	push   eax
c0017962:	68 00 00 00 80       	push   0x80000000
c0017967:	e8 eb f3 ff ff       	call   c0016d57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001796c:	83 c4 20             	add    esp,0x20
c001796f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017973:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017978:	0f 86 96 01 00 00    	jbe    c0017b14 <HalDetectFeatures()+0xc68>
c001797e:	83 ec 0c             	sub    esp,0xc
c0017981:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017985:	50                   	push   eax
c0017986:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001798a:	50                   	push   eax
c001798b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001798f:	50                   	push   eax
c0017990:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017994:	50                   	push   eax
c0017995:	68 01 00 00 80       	push   0x80000001
c001799a:	e8 b8 f3 ff ff       	call   c0016d57 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001799f:	83 c4 20             	add    esp,0x20
c00179a2:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179a7:	83 e0 7f             	and    eax,0x7f
c00179aa:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179af:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179b4:	83 e0 fb             	and    eax,0xfffffffb
c00179b7:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00179bc:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179c1:	83 e0 fd             	and    eax,0xfffffffd
c00179c4:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00179c9:	e9 46 01 00 00       	jmp    c0017b14 <HalDetectFeatures()+0xc68>
c00179ce:	83 ec 08             	sub    esp,0x8
c00179d1:	68 ca 2d 02 c0       	push   0xc0022dca
c00179d6:	68 70 c7 02 c0       	push   0xc002c770
c00179db:	e8 60 8c fe ff       	call   c0000640 <strcpy>
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c00179ed:	e8 d1 87 fe ff       	call   c00001c3 <is486>
c00179f2:	85 c0                	test   eax,eax
c00179f4:	0f 95 c0             	setne  al
c00179f7:	0f b6 c0             	movzx  eax,al
c00179fa:	85 c0                	test   eax,eax
c00179fc:	0f 84 8d 00 00 00    	je     c0017a8f <HalDetectFeatures()+0xbe3>
c0017a02:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a07:	83 c8 04             	or     eax,0x4
c0017a0a:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a0f:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a14:	83 c8 08             	or     eax,0x8
c0017a17:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a1c:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a21:	83 c8 10             	or     eax,0x10
c0017a24:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a29:	0f 20 c0             	mov    eax,cr0
c0017a2c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a34:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0017a3b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017a42:	83 e0 04             	and    eax,0x4
c0017a45:	74 1e                	je     c0017a65 <HalDetectFeatures()+0xbb9>
c0017a47:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017a4e:	83 e0 10             	and    eax,0x10
c0017a51:	75 12                	jne    c0017a65 <HalDetectFeatures()+0xbb9>
c0017a53:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a58:	83 e0 f7             	and    eax,0xfffffff7
c0017a5b:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a60:	e9 af 00 00 00       	jmp    c0017b14 <HalDetectFeatures()+0xc68>
c0017a65:	e8 34 87 fe ff       	call   c000019e <hasLegacyFPU>
c0017a6a:	83 e0 01             	and    eax,0x1
c0017a6d:	83 e0 01             	and    eax,0x1
c0017a70:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017a77:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a7c:	83 e0 f7             	and    eax,0xfffffff7
c0017a7f:	88 c2                	mov    dl,al
c0017a81:	88 c8                	mov    al,cl
c0017a83:	09 d0                	or     eax,edx
c0017a85:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a8a:	e9 85 00 00 00       	jmp    c0017b14 <HalDetectFeatures()+0xc68>
c0017a8f:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a94:	83 e0 fb             	and    eax,0xfffffffb
c0017a97:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a9c:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017aa1:	83 e0 f7             	and    eax,0xfffffff7
c0017aa4:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017aa9:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017aae:	83 e0 ef             	and    eax,0xffffffef
c0017ab1:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017ab6:	0f 20 c0             	mov    eax,cr0
c0017ab9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017abd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ac1:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0017ac8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017acf:	83 e0 04             	and    eax,0x4
c0017ad2:	74 1b                	je     c0017aef <HalDetectFeatures()+0xc43>
c0017ad4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017adb:	83 e0 10             	and    eax,0x10
c0017ade:	75 0f                	jne    c0017aef <HalDetectFeatures()+0xc43>
c0017ae0:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017ae5:	83 e0 f7             	and    eax,0xfffffff7
c0017ae8:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017aed:	eb 25                	jmp    c0017b14 <HalDetectFeatures()+0xc68>
c0017aef:	e8 aa 86 fe ff       	call   c000019e <hasLegacyFPU>
c0017af4:	83 e0 01             	and    eax,0x1
c0017af7:	83 e0 01             	and    eax,0x1
c0017afa:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017b01:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017b06:	83 e0 f7             	and    eax,0xfffffff7
c0017b09:	88 c2                	mov    dl,al
c0017b0b:	88 c8                	mov    al,cl
c0017b0d:	09 d0                	or     eax,edx
c0017b0f:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017b14:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017b19:	83 e0 08             	and    eax,0x8
c0017b1c:	0f b6 c0             	movzx  eax,al
c0017b1f:	85 c0                	test   eax,eax
c0017b21:	75 25                	jne    c0017b48 <HalDetectFeatures()+0xc9c>
c0017b23:	e8 76 86 fe ff       	call   c000019e <hasLegacyFPU>
c0017b28:	83 e0 01             	and    eax,0x1
c0017b2b:	83 e0 01             	and    eax,0x1
c0017b2e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017b35:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017b3a:	83 e0 f7             	and    eax,0xfffffff7
c0017b3d:	88 c2                	mov    dl,al
c0017b3f:	88 c8                	mov    al,cl
c0017b41:	09 d0                	or     eax,edx
c0017b43:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017b48:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017b4d:	83 e0 08             	and    eax,0x8
c0017b50:	0f b6 c0             	movzx  eax,al
c0017b53:	85 c0                	test   eax,eax
c0017b55:	74 0d                	je     c0017b64 <HalDetectFeatures()+0xcb8>
c0017b57:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b5c:	83 c8 10             	or     eax,0x10
c0017b5f:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017b64:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b69:	83 e0 10             	and    eax,0x10
c0017b6c:	0f b6 c0             	movzx  eax,al
c0017b6f:	85 c0                	test   eax,eax
c0017b71:	75 23                	jne    c0017b96 <HalDetectFeatures()+0xcea>
c0017b73:	e8 8e 7c 00 00       	call   c001f806 <x87Detect>
c0017b78:	83 e0 01             	and    eax,0x1
c0017b7b:	83 e0 01             	and    eax,0x1
c0017b7e:	89 c1                	mov    ecx,eax
c0017b80:	c1 e1 04             	shl    ecx,0x4
c0017b83:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b88:	83 e0 ef             	and    eax,0xffffffef
c0017b8b:	88 c2                	mov    dl,al
c0017b8d:	88 c8                	mov    al,cl
c0017b8f:	09 d0                	or     eax,edx
c0017b91:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017b96:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b9b:	83 e0 01             	and    eax,0x1
c0017b9e:	0f b6 c0             	movzx  eax,al
c0017ba1:	85 c0                	test   eax,eax
c0017ba3:	75 2d                	jne    c0017bd2 <HalDetectFeatures()+0xd26>
c0017ba5:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017baa:	83 e0 02             	and    eax,0x2
c0017bad:	0f b6 c0             	movzx  eax,al
c0017bb0:	85 c0                	test   eax,eax
c0017bb2:	75 1e                	jne    c0017bd2 <HalDetectFeatures()+0xd26>
c0017bb4:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017bb9:	83 e0 04             	and    eax,0x4
c0017bbc:	0f b6 c0             	movzx  eax,al
c0017bbf:	85 c0                	test   eax,eax
c0017bc1:	75 0f                	jne    c0017bd2 <HalDetectFeatures()+0xd26>
c0017bc3:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017bc8:	83 e0 08             	and    eax,0x8
c0017bcb:	0f b6 c0             	movzx  eax,al
c0017bce:	85 c0                	test   eax,eax
c0017bd0:	74 0d                	je     c0017bdf <HalDetectFeatures()+0xd33>
c0017bd2:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bd7:	83 c8 80             	or     eax,0xffffff80
c0017bda:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017bdf:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017be4:	83 e0 10             	and    eax,0x10
c0017be7:	0f b6 c0             	movzx  eax,al
c0017bea:	85 c0                	test   eax,eax
c0017bec:	74 2f                	je     c0017c1d <HalDetectFeatures()+0xd71>
c0017bee:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bf3:	83 e0 80             	and    eax,0xffffff80
c0017bf6:	0f b6 c0             	movzx  eax,al
c0017bf9:	85 c0                	test   eax,eax
c0017bfb:	75 20                	jne    c0017c1d <HalDetectFeatures()+0xd71>
c0017bfd:	e8 be 7b 00 00       	call   c001f7c0 <sseDetect>
c0017c02:	83 e0 01             	and    eax,0x1
c0017c05:	89 c1                	mov    ecx,eax
c0017c07:	c1 e1 07             	shl    ecx,0x7
c0017c0a:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c0f:	83 e0 7f             	and    eax,0x7f
c0017c12:	88 c2                	mov    dl,al
c0017c14:	88 c8                	mov    al,cl
c0017c16:	09 d0                	or     eax,edx
c0017c18:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017c1d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c22:	83 e0 80             	and    eax,0xffffff80
c0017c25:	0f b6 c0             	movzx  eax,al
c0017c28:	85 c0                	test   eax,eax
c0017c2a:	74 1c                	je     c0017c48 <HalDetectFeatures()+0xd9c>
c0017c2c:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017c31:	83 e0 20             	and    eax,0x20
c0017c34:	0f b6 c0             	movzx  eax,al
c0017c37:	85 c0                	test   eax,eax
c0017c39:	75 0d                	jne    c0017c48 <HalDetectFeatures()+0xd9c>
c0017c3b:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017c40:	83 e0 df             	and    eax,0xffffffdf
c0017c43:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017c48:	c6 05 88 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c788,0x0
c0017c4f:	90                   	nop
c0017c50:	81 c4 90 00 00 00    	add    esp,0x90
c0017c56:	5b                   	pop    ebx
c0017c57:	5e                   	pop    esi
c0017c58:	5f                   	pop    edi
c0017c59:	c3                   	ret    

c0017c5a <HalEnableNMI()>:
c0017c5a:	c6 05 6c c7 02 c0 01 	mov    BYTE PTR ds:0xc002c76c,0x1
c0017c61:	6a 10                	push   0x10
c0017c63:	e8 3f ef ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c0017c68:	83 c4 04             	add    esp,0x4
c0017c6b:	90                   	nop
c0017c6c:	c3                   	ret    

c0017c6d <HalDisableNMI()>:
c0017c6d:	c6 05 6c c7 02 c0 00 	mov    BYTE PTR ds:0xc002c76c,0x0
c0017c74:	6a 10                	push   0x10
c0017c76:	e8 2c ef ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c0017c7b:	83 c4 04             	add    esp,0x4
c0017c7e:	90                   	nop
c0017c7f:	c3                   	ret    

c0017c80 <HalGetNMIState()>:
c0017c80:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0017c85:	c3                   	ret    

c0017c86 <x86rdmsr(unsigned int)>:
c0017c86:	83 ec 1c             	sub    esp,0x1c
c0017c89:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c8e:	83 e0 08             	and    eax,0x8
c0017c91:	0f b6 c0             	movzx  eax,al
c0017c94:	85 c0                	test   eax,eax
c0017c96:	75 10                	jne    c0017ca8 <x86rdmsr(unsigned int)+0x22>
c0017c98:	83 ec 0c             	sub    esp,0xc
c0017c9b:	68 65 2e 02 c0       	push   0xc0022e65
c0017ca0:	e8 41 70 ff ff       	call   c000ece6 <KePanic(char const*)>
c0017ca5:	83 c4 10             	add    esp,0x10
c0017ca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cac:	89 c1                	mov    ecx,eax
c0017cae:	0f 32                	rdmsr  
c0017cb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017cb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cc0:	83 c4 1c             	add    esp,0x1c
c0017cc3:	c3                   	ret    

c0017cc4 <x86wrmsr(unsigned int, unsigned long long)>:
c0017cc4:	83 ec 1c             	sub    esp,0x1c
c0017cc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ccb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ccf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cd7:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017cdc:	83 e0 08             	and    eax,0x8
c0017cdf:	0f b6 c0             	movzx  eax,al
c0017ce2:	85 c0                	test   eax,eax
c0017ce4:	75 10                	jne    c0017cf6 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0017ce6:	83 ec 0c             	sub    esp,0xc
c0017ce9:	68 6b 2e 02 c0       	push   0xc0022e6b
c0017cee:	e8 f3 6f ff ff       	call   c000ece6 <KePanic(char const*)>
c0017cf3:	83 c4 10             	add    esp,0x10
c0017cf6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cfe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d02:	0f 30                	wrmsr  
c0017d04:	90                   	nop
c0017d05:	83 c4 1c             	add    esp,0x1c
c0017d08:	c3                   	ret    

c0017d09 <HalHandleGeneralProtectionFault(void*, void*)>:
c0017d09:	83 ec 0c             	sub    esp,0xc
c0017d0c:	83 ec 0c             	sub    esp,0xc
c0017d0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d13:	e8 65 e7 ff ff       	call   c001647d <Vm::faultHandler(regs*)>
c0017d18:	83 c4 10             	add    esp,0x10
c0017d1b:	83 c4 0c             	add    esp,0xc
c0017d1e:	c3                   	ret    

c0017d1f <HalFindRSDP()>:
c0017d1f:	83 ec 1c             	sub    esp,0x1c
c0017d22:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c0017d27:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017d2c:	7e 0c                	jle    c0017d3a <HalFindRSDP()+0x1b>
c0017d2e:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017d33:	25 00 04 00 00       	and    eax,0x400
c0017d38:	74 0d                	je     c0017d47 <HalFindRSDP()+0x28>
c0017d3a:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017d3f:	83 e0 fb             	and    eax,0xfffffffb
c0017d42:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017d47:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017d4c:	83 e0 04             	and    eax,0x4
c0017d4f:	0f b6 c0             	movzx  eax,al
c0017d52:	85 c0                	test   eax,eax
c0017d54:	75 07                	jne    c0017d5d <HalFindRSDP()+0x3e>
c0017d56:	b8 00 00 00 00       	mov    eax,0x0
c0017d5b:	eb 53                	jmp    c0017db0 <HalFindRSDP()+0x91>
c0017d5d:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017d65:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017d6d:	77 2f                	ja     c0017d9e <HalFindRSDP()+0x7f>
c0017d6f:	83 ec 04             	sub    esp,0x4
c0017d72:	6a 08                	push   0x8
c0017d74:	68 71 2e 02 c0       	push   0xc0022e71
c0017d79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d7d:	e8 fe 85 fe ff       	call   c0000380 <memcmp>
c0017d82:	83 c4 10             	add    esp,0x10
c0017d85:	85 c0                	test   eax,eax
c0017d87:	0f 94 c0             	sete   al
c0017d8a:	0f b6 c0             	movzx  eax,al
c0017d8d:	85 c0                	test   eax,eax
c0017d8f:	74 06                	je     c0017d97 <HalFindRSDP()+0x78>
c0017d91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d95:	eb 19                	jmp    c0017db0 <HalFindRSDP()+0x91>
c0017d97:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017d9c:	eb c7                	jmp    c0017d65 <HalFindRSDP()+0x46>
c0017d9e:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017da3:	83 e0 fb             	and    eax,0xfffffffb
c0017da6:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017dab:	b8 00 00 00 00       	mov    eax,0x0
c0017db0:	83 c4 1c             	add    esp,0x1c
c0017db3:	c3                   	ret    

c0017db4 <HalHandlePageFault(void*, void*)>:
c0017db4:	83 ec 1c             	sub    esp,0x1c
c0017db7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dbe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dc1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017dc7:	0f 20 d2             	mov    edx,cr2
c0017dca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017dce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017dd2:	83 ec 08             	sub    esp,0x8
c0017dd5:	52                   	push   edx
c0017dd6:	50                   	push   eax
c0017dd7:	e8 22 b0 ff ff       	call   c0012dfe <VAS::tryLoadBackOffDisk(unsigned long)>
c0017ddc:	83 c4 10             	add    esp,0x10
c0017ddf:	83 c4 1c             	add    esp,0x1c
c0017de2:	c3                   	ret    

c0017de3 <HalHandleOpcodeFault(void*, void*)>:
c0017de3:	83 ec 1c             	sub    esp,0x1c
c0017de6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017dee:	a0 88 c7 02 c0       	mov    al,ds:0xc002c788
c0017df3:	0f b6 c0             	movzx  eax,al
c0017df6:	85 c0                	test   eax,eax
c0017df8:	74 25                	je     c0017e1f <HalHandleOpcodeFault(void*, void*)+0x3c>
c0017dfa:	83 ec 0c             	sub    esp,0xc
c0017dfd:	68 68 30 02 c0       	push   0xc0023068
c0017e02:	e8 5d f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e07:	83 c4 10             	add    esp,0x10
c0017e0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e11:	8d 50 19             	lea    edx,[eax+0x19]
c0017e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e18:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e1b:	b0 01                	mov    al,0x1
c0017e1d:	eb 02                	jmp    c0017e21 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0017e1f:	b0 00                	mov    al,0x0
c0017e21:	83 c4 1c             	add    esp,0x1c
c0017e24:	c3                   	ret    

c0017e25 <HalDisplayDebugInfo(void*)>:
c0017e25:	83 ec 2c             	sub    esp,0x2c
c0017e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e30:	0f 20 c0             	mov    eax,cr0
c0017e33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e37:	0f 20 d0             	mov    eax,cr2
c0017e3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e3e:	0f 20 d8             	mov    eax,cr3
c0017e41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e45:	0f 20 e0             	mov    eax,cr4
c0017e48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e50:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017e53:	83 ec 08             	sub    esp,0x8
c0017e56:	50                   	push   eax
c0017e57:	68 89 2e 02 c0       	push   0xc0022e89
c0017e5c:	e8 03 f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e61:	83 c4 10             	add    esp,0x10
c0017e64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e68:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017e6b:	83 ec 08             	sub    esp,0x8
c0017e6e:	50                   	push   eax
c0017e6f:	68 7a 2e 02 c0       	push   0xc0022e7a
c0017e74:	e8 eb f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e79:	83 c4 10             	add    esp,0x10
c0017e7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e80:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017e83:	83 ec 08             	sub    esp,0x8
c0017e86:	50                   	push   eax
c0017e87:	68 85 2e 02 c0       	push   0xc0022e85
c0017e8c:	e8 d3 f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e91:	83 c4 10             	add    esp,0x10
c0017e94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e98:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e9b:	83 ec 08             	sub    esp,0x8
c0017e9e:	50                   	push   eax
c0017e9f:	68 94 2e 02 c0       	push   0xc0022e94
c0017ea4:	e8 bb f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017ea9:	83 c4 10             	add    esp,0x10
c0017eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017eb0:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017eb3:	83 ec 08             	sub    esp,0x8
c0017eb6:	50                   	push   eax
c0017eb7:	68 9f 2e 02 c0       	push   0xc0022e9f
c0017ebc:	e8 a3 f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017ec1:	83 c4 10             	add    esp,0x10
c0017ec4:	83 ec 08             	sub    esp,0x8
c0017ec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ecb:	68 aa 2e 02 c0       	push   0xc0022eaa
c0017ed0:	e8 8f f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017ed5:	83 c4 10             	add    esp,0x10
c0017ed8:	83 ec 08             	sub    esp,0x8
c0017edb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017edf:	68 b5 2e 02 c0       	push   0xc0022eb5
c0017ee4:	e8 7b f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017ee9:	83 c4 10             	add    esp,0x10
c0017eec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ef0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017ef3:	c1 e0 05             	shl    eax,0x5
c0017ef6:	8d 90 a0 42 02 c0    	lea    edx,[eax-0x3ffdbd60]
c0017efc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f00:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017f03:	83 ec 04             	sub    esp,0x4
c0017f06:	52                   	push   edx
c0017f07:	50                   	push   eax
c0017f08:	68 c0 2e 02 c0       	push   0xc0022ec0
c0017f0d:	e8 52 f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017f12:	83 c4 10             	add    esp,0x10
c0017f15:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f1a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f20:	83 ec 0c             	sub    esp,0xc
c0017f23:	50                   	push   eax
c0017f24:	e8 00 92 ff ff       	call   c0011129 <setActiveTerminal(VgaText*)>
c0017f29:	83 c4 10             	add    esp,0x10
c0017f2c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f31:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f37:	83 ec 08             	sub    esp,0x8
c0017f3a:	68 cf 2e 02 c0       	push   0xc0022ecf
c0017f3f:	50                   	push   eax
c0017f40:	e8 31 95 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0017f45:	83 c4 10             	add    esp,0x10
c0017f48:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f4d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f57:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017f5a:	83 ec 08             	sub    esp,0x8
c0017f5d:	52                   	push   edx
c0017f5e:	50                   	push   eax
c0017f5f:	e8 cc 94 ff ff       	call   c0011430 <VgaText::putx(unsigned int)>
c0017f64:	83 c4 10             	add    esp,0x10
c0017f67:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f6c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f72:	83 ec 08             	sub    esp,0x8
c0017f75:	68 dd 2e 02 c0       	push   0xc0022edd
c0017f7a:	50                   	push   eax
c0017f7b:	e8 f6 94 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0017f80:	83 c4 10             	add    esp,0x10
c0017f83:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f8e:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017f93:	8b 12                	mov    edx,DWORD PTR [edx]
c0017f95:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017f98:	83 c2 0c             	add    edx,0xc
c0017f9b:	83 ec 08             	sub    esp,0x8
c0017f9e:	52                   	push   edx
c0017f9f:	50                   	push   eax
c0017fa0:	e8 d1 94 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0017fa5:	83 c4 10             	add    esp,0x10
c0017fa8:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fb3:	83 ec 08             	sub    esp,0x8
c0017fb6:	68 e6 2e 02 c0       	push   0xc0022ee6
c0017fbb:	50                   	push   eax
c0017fbc:	e8 b5 94 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0017fc1:	83 c4 10             	add    esp,0x10
c0017fc4:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fc9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fcf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fd3:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017fd6:	83 ec 08             	sub    esp,0x8
c0017fd9:	52                   	push   edx
c0017fda:	50                   	push   eax
c0017fdb:	e8 50 94 ff ff       	call   c0011430 <VgaText::putx(unsigned int)>
c0017fe0:	83 c4 10             	add    esp,0x10
c0017fe3:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fe8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fee:	83 ec 08             	sub    esp,0x8
c0017ff1:	68 ee 2e 02 c0       	push   0xc0022eee
c0017ff6:	50                   	push   eax
c0017ff7:	e8 7a 94 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0017ffc:	83 c4 10             	add    esp,0x10
c0017fff:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018004:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001800a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001800e:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0018011:	83 ec 08             	sub    esp,0x8
c0018014:	52                   	push   edx
c0018015:	50                   	push   eax
c0018016:	e8 15 94 ff ff       	call   c0011430 <VgaText::putx(unsigned int)>
c001801b:	83 c4 10             	add    esp,0x10
c001801e:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018023:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018029:	83 ec 08             	sub    esp,0x8
c001802c:	68 f6 2e 02 c0       	push   0xc0022ef6
c0018031:	50                   	push   eax
c0018032:	e8 3f 94 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0018037:	83 c4 10             	add    esp,0x10
c001803a:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001803f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018045:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018049:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001804c:	83 ec 08             	sub    esp,0x8
c001804f:	52                   	push   edx
c0018050:	50                   	push   eax
c0018051:	e8 da 93 ff ff       	call   c0011430 <VgaText::putx(unsigned int)>
c0018056:	83 c4 10             	add    esp,0x10
c0018059:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001805e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018064:	83 ec 08             	sub    esp,0x8
c0018067:	68 fe 2e 02 c0       	push   0xc0022efe
c001806c:	50                   	push   eax
c001806d:	e8 04 94 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0018072:	83 c4 10             	add    esp,0x10
c0018075:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001807a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018080:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018084:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018087:	83 ec 08             	sub    esp,0x8
c001808a:	52                   	push   edx
c001808b:	50                   	push   eax
c001808c:	e8 9f 93 ff ff       	call   c0011430 <VgaText::putx(unsigned int)>
c0018091:	83 c4 10             	add    esp,0x10
c0018094:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018099:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001809f:	83 ec 08             	sub    esp,0x8
c00180a2:	68 06 2f 02 c0       	push   0xc0022f06
c00180a7:	50                   	push   eax
c00180a8:	e8 c9 93 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c00180ad:	83 c4 10             	add    esp,0x10
c00180b0:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180bf:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00180c2:	83 ec 08             	sub    esp,0x8
c00180c5:	52                   	push   edx
c00180c6:	50                   	push   eax
c00180c7:	e8 64 93 ff ff       	call   c0011430 <VgaText::putx(unsigned int)>
c00180cc:	83 c4 10             	add    esp,0x10
c00180cf:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180da:	83 ec 08             	sub    esp,0x8
c00180dd:	68 0e 2f 02 c0       	push   0xc0022f0e
c00180e2:	50                   	push   eax
c00180e3:	e8 8e 93 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c00180e8:	83 c4 10             	add    esp,0x10
c00180eb:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180fa:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00180fd:	83 ec 08             	sub    esp,0x8
c0018100:	52                   	push   edx
c0018101:	50                   	push   eax
c0018102:	e8 29 93 ff ff       	call   c0011430 <VgaText::putx(unsigned int)>
c0018107:	83 c4 10             	add    esp,0x10
c001810a:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001810f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018115:	83 ec 08             	sub    esp,0x8
c0018118:	68 16 2f 02 c0       	push   0xc0022f16
c001811d:	50                   	push   eax
c001811e:	e8 53 93 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0018123:	83 c4 10             	add    esp,0x10
c0018126:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001812b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018131:	83 ec 08             	sub    esp,0x8
c0018134:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018138:	50                   	push   eax
c0018139:	e8 f2 92 ff ff       	call   c0011430 <VgaText::putx(unsigned int)>
c001813e:	83 c4 10             	add    esp,0x10
c0018141:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018146:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001814c:	83 ec 08             	sub    esp,0x8
c001814f:	68 1f 2f 02 c0       	push   0xc0022f1f
c0018154:	50                   	push   eax
c0018155:	e8 1c 93 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c001815a:	83 c4 10             	add    esp,0x10
c001815d:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018162:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018168:	83 ec 08             	sub    esp,0x8
c001816b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001816f:	50                   	push   eax
c0018170:	e8 bb 92 ff ff       	call   c0011430 <VgaText::putx(unsigned int)>
c0018175:	83 c4 10             	add    esp,0x10
c0018178:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001817d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018183:	83 ec 08             	sub    esp,0x8
c0018186:	68 27 2f 02 c0       	push   0xc0022f27
c001818b:	50                   	push   eax
c001818c:	e8 e5 92 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0018191:	83 c4 10             	add    esp,0x10
c0018194:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018199:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001819f:	83 ec 08             	sub    esp,0x8
c00181a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00181a6:	50                   	push   eax
c00181a7:	e8 84 92 ff ff       	call   c0011430 <VgaText::putx(unsigned int)>
c00181ac:	83 c4 10             	add    esp,0x10
c00181af:	fa                   	cli    
c00181b0:	f4                   	hlt    
c00181b1:	eb fe                	jmp    c00181b1 <HalDisplayDebugInfo(void*)+0x38c>

c00181b3 <HalReceivedNMI()>:
c00181b3:	83 ec 1c             	sub    esp,0x1c
c00181b6:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c00181bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181c1:	89 c2                	mov    edx,eax
c00181c3:	ec                   	in     al,dx
c00181c4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00181c8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00181cc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00181d0:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c00181d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181db:	89 c2                	mov    edx,eax
c00181dd:	ec                   	in     al,dx
c00181de:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00181e2:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00181e6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00181ea:	83 ec 0c             	sub    esp,0xc
c00181ed:	68 2f 2f 02 c0       	push   0xc0022f2f
c00181f2:	e8 6d ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00181f7:	83 c4 10             	add    esp,0x10
c00181fa:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00181ff:	83 e0 10             	and    eax,0x10
c0018202:	74 10                	je     c0018214 <HalReceivedNMI()+0x61>
c0018204:	83 ec 0c             	sub    esp,0xc
c0018207:	68 40 2f 02 c0       	push   0xc0022f40
c001820c:	e8 d5 6a ff ff       	call   c000ece6 <KePanic(char const*)>
c0018211:	83 c4 10             	add    esp,0x10
c0018214:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0018219:	83 e0 40             	and    eax,0x40
c001821c:	74 10                	je     c001822e <HalReceivedNMI()+0x7b>
c001821e:	83 ec 0c             	sub    esp,0xc
c0018221:	68 4d 2f 02 c0       	push   0xc0022f4d
c0018226:	e8 bb 6a ff ff       	call   c000ece6 <KePanic(char const*)>
c001822b:	83 c4 10             	add    esp,0x10
c001822e:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0018232:	0f be c0             	movsx  eax,al
c0018235:	85 c0                	test   eax,eax
c0018237:	79 10                	jns    c0018249 <HalReceivedNMI()+0x96>
c0018239:	83 ec 0c             	sub    esp,0xc
c001823c:	68 57 2f 02 c0       	push   0xc0022f57
c0018241:	e8 a0 6a ff ff       	call   c000ece6 <KePanic(char const*)>
c0018246:	83 c4 10             	add    esp,0x10
c0018249:	90                   	nop
c001824a:	83 c4 1c             	add    esp,0x1c
c001824d:	c3                   	ret    

c001824e <HalSystemIdle()>:
c001824e:	56                   	push   esi
c001824f:	53                   	push   ebx
c0018250:	83 ec 14             	sub    esp,0x14
c0018253:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0018258:	83 e0 10             	and    eax,0x10
c001825b:	0f b6 c0             	movzx  eax,al
c001825e:	85 c0                	test   eax,eax
c0018260:	74 43                	je     c00182a5 <HalSystemIdle()+0x57>
c0018262:	83 ec 0c             	sub    esp,0xc
c0018265:	68 e1 00 00 00       	push   0xe1
c001826a:	e8 17 fa ff ff       	call   c0017c86 <x86rdmsr(unsigned int)>
c001826f:	83 c4 10             	add    esp,0x10
c0018272:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018276:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001827a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001827e:	83 e0 02             	and    eax,0x2
c0018281:	89 c3                	mov    ebx,eax
c0018283:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018287:	83 e0 00             	and    eax,0x0
c001828a:	89 c6                	mov    esi,eax
c001828c:	83 ec 04             	sub    esp,0x4
c001828f:	56                   	push   esi
c0018290:	53                   	push   ebx
c0018291:	68 e1 00 00 00       	push   0xe1
c0018296:	e8 29 fa ff ff       	call   c0017cc4 <x86wrmsr(unsigned int, unsigned long long)>
c001829b:	83 c4 10             	add    esp,0x10
c001829e:	e8 f1 7e fe ff       	call   c0000194 <doTPAUSE>
c00182a3:	eb 01                	jmp    c00182a6 <HalSystemIdle()+0x58>
c00182a5:	f4                   	hlt    
c00182a6:	90                   	nop
c00182a7:	83 c4 14             	add    esp,0x14
c00182aa:	5b                   	pop    ebx
c00182ab:	5e                   	pop    esi
c00182ac:	c3                   	ret    

c00182ad <i386SaveCoprocessor(void*)>:
c00182ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182b1:	83 c0 3f             	add    eax,0x3f
c00182b4:	83 e0 c0             	and    eax,0xffffffc0
c00182b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00182bb:	ff 25 50 c7 02 c0    	jmp    DWORD PTR ds:0xc002c750

c00182c1 <i386LoadCoprocessor(void*)>:
c00182c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182c5:	83 c0 3f             	add    eax,0x3f
c00182c8:	83 e0 c0             	and    eax,0xffffffc0
c00182cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00182cf:	ff 25 4c c7 02 c0    	jmp    DWORD PTR ds:0xc002c74c

c00182d5 <x87EmulHandler(regs*, void*)>:
c00182d5:	53                   	push   ebx
c00182d6:	83 ec 08             	sub    esp,0x8
c00182d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182de:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00182e2:	74 10                	je     c00182f4 <x87EmulHandler(regs*, void*)+0x1f>
c00182e4:	83 ec 0c             	sub    esp,0xc
c00182e7:	68 64 2f 02 c0       	push   0xc0022f64
c00182ec:	e8 f5 69 ff ff       	call   c000ece6 <KePanic(char const*)>
c00182f1:	83 c4 10             	add    esp,0x10
c00182f4:	0f 20 c0             	mov    eax,cr0
c00182f7:	a8 08                	test   al,0x8
c00182f9:	74 59                	je     c0018354 <x87EmulHandler(regs*, void*)+0x7f>
c00182fb:	0f 06                	clts   
c00182fd:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c0018302:	85 c0                	test   eax,eax
c0018304:	74 0e                	je     c0018314 <x87EmulHandler(regs*, void*)+0x3f>
c0018306:	83 ec 0c             	sub    esp,0xc
c0018309:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001830c:	e8 9c ff ff ff       	call   c00182ad <i386SaveCoprocessor(void*)>
c0018311:	83 c4 10             	add    esp,0x10
c0018314:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001831a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001831e:	75 12                	jne    c0018332 <x87EmulHandler(regs*, void*)+0x5d>
c0018320:	83 ec 0c             	sub    esp,0xc
c0018323:	68 40 02 00 00       	push   0x240
c0018328:	e8 64 66 ff ff       	call   c000e991 <malloc>
c001832d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018330:	eb 10                	jmp    c0018342 <x87EmulHandler(regs*, void*)+0x6d>
c0018332:	83 ec 0c             	sub    esp,0xc
c0018335:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c001833a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001833d:	e8 7f ff ff ff       	call   c00182c1 <i386LoadCoprocessor(void*)>
c0018342:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018347:	83 c4 10             	add    esp,0x10
c001834a:	a3 48 c7 02 c0       	mov    ds:0xc002c748,eax
c001834f:	83 c4 08             	add    esp,0x8
c0018352:	5b                   	pop    ebx
c0018353:	c3                   	ret    
c0018354:	83 ec 0c             	sub    esp,0xc
c0018357:	68 78 2f 02 c0       	push   0xc0022f78
c001835c:	e8 03 ec fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018361:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018369:	83 c4 18             	add    esp,0x18
c001836c:	5b                   	pop    ebx
c001836d:	e9 62 da ff ff       	jmp    c0015dd4 <Thr::terminateFromIRQ(int)>

c0018372 <HalInitialiseCoprocessor()>:
c0018372:	83 ec 10             	sub    esp,0x10
c0018375:	c7 05 48 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c748,0x0
c001837f:	6a 00                	push   0x0
c0018381:	68 d5 82 01 c0       	push   0xc00182d5
c0018386:	6a 07                	push   0x7
c0018388:	e8 c2 06 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001838d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0018392:	83 c4 10             	add    esp,0x10
c0018395:	a8 80                	test   al,0x80
c0018397:	74 1c                	je     c00183b5 <HalInitialiseCoprocessor()+0x43>
c0018399:	c7 05 50 c7 02 c0 d8 f7 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f7d8
c00183a3:	c7 05 4c c7 02 c0 e0 f7 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f7e0
c00183ad:	83 c4 0c             	add    esp,0xc
c00183b0:	e9 33 74 00 00       	jmp    c001f7e8 <sseInit>
c00183b5:	a8 10                	test   al,0x10
c00183b7:	74 1c                	je     c00183d5 <HalInitialiseCoprocessor()+0x63>
c00183b9:	c7 05 50 c7 02 c0 27 f8 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f827
c00183c3:	c7 05 4c c7 02 c0 2e f8 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f82e
c00183cd:	83 c4 0c             	add    esp,0xc
c00183d0:	e9 60 74 00 00       	jmp    c001f835 <x87Init>
c00183d5:	c7 05 50 c7 02 c0 a2 6b 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc0016ba2
c00183df:	50                   	push   eax
c00183e0:	c7 05 4c c7 02 c0 a2 6b 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc0016ba2
c00183ea:	50                   	push   eax
c00183eb:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c00183f1:	68 32 20 02 c0       	push   0xc0022032
c00183f6:	e8 69 eb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00183fb:	5a                   	pop    edx
c00183fc:	59                   	pop    ecx
c00183fd:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0018403:	68 32 20 02 c0       	push   0xc0022032
c0018408:	e8 57 eb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001840d:	0f 20 c0             	mov    eax,cr0
c0018410:	83 c8 04             	or     eax,0x4
c0018413:	0f 22 c0             	mov    cr0,eax
c0018416:	83 c4 1c             	add    esp,0x1c
c0018419:	c3                   	ret    

c001841a <HalPanic(char const*)>:
c001841a:	53                   	push   ebx
c001841b:	83 ec 10             	sub    esp,0x10
c001841e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018422:	fa                   	cli    
c0018423:	53                   	push   ebx
c0018424:	68 8e 2f 02 c0       	push   0xc0022f8e
c0018429:	e8 36 eb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001842e:	a1 44 c7 02 c0       	mov    eax,ds:0xc002c744
c0018433:	83 c4 10             	add    esp,0x10
c0018436:	85 c0                	test   eax,eax
c0018438:	74 09                	je     c0018443 <HalPanic(char const*)+0x29>
c001843a:	83 ec 0c             	sub    esp,0xc
c001843d:	53                   	push   ebx
c001843e:	ff d0                	call   eax
c0018440:	83 c4 10             	add    esp,0x10
c0018443:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c0018448:	85 c0                	test   eax,eax
c001844a:	0f 84 dc 00 00 00    	je     c001852c <HalPanic(char const*)+0x112>
c0018450:	52                   	push   edx
c0018451:	6a 01                	push   0x1
c0018453:	6a 0f                	push   0xf
c0018455:	50                   	push   eax
c0018456:	e8 29 8b ff ff       	call   c0010f84 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001845b:	59                   	pop    ecx
c001845c:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018462:	e8 0d 8d ff ff       	call   c0011174 <VgaText::clearScreen()>
c0018467:	58                   	pop    eax
c0018468:	5a                   	pop    edx
c0018469:	68 0f 24 02 c0       	push   0xc002240f
c001846e:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018474:	e8 43 8b ff ff       	call   c0010fbc <VgaText::setTitle(char*)>
c0018479:	83 c4 0c             	add    esp,0xc
c001847c:	6a 01                	push   0x1
c001847e:	6a 0f                	push   0xf
c0018480:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018486:	e8 f9 8a ff ff       	call   c0010f84 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001848b:	59                   	pop    ecx
c001848c:	58                   	pop    eax
c001848d:	68 a7 2f 02 c0       	push   0xc0022fa7
c0018492:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018498:	e8 d9 8f ff ff       	call   c0011476 <VgaText::puts(char const*)>
c001849d:	83 c4 0c             	add    esp,0xc
c00184a0:	6a 0f                	push   0xf
c00184a2:	6a 01                	push   0x1
c00184a4:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00184aa:	e8 d5 8a ff ff       	call   c0010f84 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00184af:	58                   	pop    eax
c00184b0:	5a                   	pop    edx
c00184b1:	68 b0 2f 02 c0       	push   0xc0022fb0
c00184b6:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00184bc:	e8 b5 8f ff ff       	call   c0011476 <VgaText::puts(char const*)>
c00184c1:	83 c4 0c             	add    esp,0xc
c00184c4:	6a 01                	push   0x1
c00184c6:	6a 0f                	push   0xf
c00184c8:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00184ce:	e8 b1 8a ff ff       	call   c0010f84 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00184d3:	59                   	pop    ecx
c00184d4:	58                   	pop    eax
c00184d5:	68 f4 2f 02 c0       	push   0xc0022ff4
c00184da:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00184e0:	e8 91 8f ff ff       	call   c0011476 <VgaText::puts(char const*)>
c00184e5:	58                   	pop    eax
c00184e6:	5a                   	pop    edx
c00184e7:	68 bd 2f 02 c0       	push   0xc0022fbd
c00184ec:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00184f2:	e8 7f 8f ff ff       	call   c0011476 <VgaText::puts(char const*)>
c00184f7:	59                   	pop    ecx
c00184f8:	58                   	pop    eax
c00184f9:	68 f7 2f 02 c0       	push   0xc0022ff7
c00184fe:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018504:	e8 6d 8f ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0018509:	58                   	pop    eax
c001850a:	5a                   	pop    edx
c001850b:	53                   	push   ebx
c001850c:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018512:	e8 5f 8f ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0018517:	59                   	pop    ecx
c0018518:	5b                   	pop    ebx
c0018519:	68 f4 2f 02 c0       	push   0xc0022ff4
c001851e:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018524:	e8 4d 8f ff ff       	call   c0011476 <VgaText::puts(char const*)>
c0018529:	83 c4 10             	add    esp,0x10
c001852c:	eb fe                	jmp    c001852c <HalPanic(char const*)+0x112>

c001852e <HalQueryPerformanceCounter()>:
c001852e:	31 c0                	xor    eax,eax
c0018530:	31 d2                	xor    edx,edx
c0018532:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c0018539:	75 02                	jne    c001853d <HalQueryPerformanceCounter()+0xf>
c001853b:	0f 31                	rdtsc  
c001853d:	c3                   	ret    

c001853e <HalInitialise()>:
c001853e:	53                   	push   ebx
c001853f:	83 ec 08             	sub    esp,0x8
c0018542:	c6 05 40 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c740,0x0
c0018549:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001854e:	83 e0 fe             	and    eax,0xfffffffe
c0018551:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0018556:	e8 d1 07 00 00       	call   c0018d2c <picOpen()>
c001855b:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c0018562:	74 0a                	je     c001856e <HalInitialise()+0x30>
c0018564:	e8 13 07 00 00       	call   c0018c7c <picDisable()>
c0018569:	e8 5a 68 00 00       	call   c001edc8 <apicOpen()>
c001856e:	bb 0f 00 00 00       	mov    ebx,0xf
c0018573:	50                   	push   eax
c0018574:	6a 00                	push   0x0
c0018576:	68 34 e0 00 c0       	push   0xc000e034
c001857b:	6a 00                	push   0x0
c001857d:	e8 cd 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018582:	83 c4 0c             	add    esp,0xc
c0018585:	6a 00                	push   0x0
c0018587:	68 34 e0 00 c0       	push   0xc000e034
c001858c:	6a 01                	push   0x1
c001858e:	e8 bc 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018593:	83 c4 0c             	add    esp,0xc
c0018596:	6a 00                	push   0x0
c0018598:	68 24 e0 00 c0       	push   0xc000e024
c001859d:	6a 02                	push   0x2
c001859f:	e8 ab 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185a4:	83 c4 0c             	add    esp,0xc
c00185a7:	6a 00                	push   0x0
c00185a9:	68 34 e0 00 c0       	push   0xc000e034
c00185ae:	6a 03                	push   0x3
c00185b0:	e8 9a 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185b5:	83 c4 0c             	add    esp,0xc
c00185b8:	6a 00                	push   0x0
c00185ba:	68 34 e0 00 c0       	push   0xc000e034
c00185bf:	6a 04                	push   0x4
c00185c1:	e8 89 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185c6:	83 c4 0c             	add    esp,0xc
c00185c9:	6a 00                	push   0x0
c00185cb:	68 34 e0 00 c0       	push   0xc000e034
c00185d0:	6a 05                	push   0x5
c00185d2:	e8 78 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185d7:	83 c4 0c             	add    esp,0xc
c00185da:	6a 00                	push   0x0
c00185dc:	68 68 e0 00 c0       	push   0xc000e068
c00185e1:	6a 06                	push   0x6
c00185e3:	e8 67 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185e8:	83 c4 0c             	add    esp,0xc
c00185eb:	6a 00                	push   0x0
c00185ed:	68 bc e0 00 c0       	push   0xc000e0bc
c00185f2:	6a 08                	push   0x8
c00185f4:	e8 56 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185f9:	83 c4 0c             	add    esp,0xc
c00185fc:	6a 00                	push   0x0
c00185fe:	68 34 e0 00 c0       	push   0xc000e034
c0018603:	6a 09                	push   0x9
c0018605:	e8 45 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001860a:	83 c4 0c             	add    esp,0xc
c001860d:	6a 00                	push   0x0
c001860f:	68 34 e0 00 c0       	push   0xc000e034
c0018614:	6a 0a                	push   0xa
c0018616:	e8 34 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001861b:	83 c4 0c             	add    esp,0xc
c001861e:	6a 00                	push   0x0
c0018620:	68 34 e0 00 c0       	push   0xc000e034
c0018625:	6a 0b                	push   0xb
c0018627:	e8 23 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001862c:	83 c4 0c             	add    esp,0xc
c001862f:	6a 00                	push   0x0
c0018631:	68 7c df 00 c0       	push   0xc000df7c
c0018636:	6a 0d                	push   0xd
c0018638:	e8 12 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001863d:	83 c4 0c             	add    esp,0xc
c0018640:	6a 00                	push   0x0
c0018642:	68 d0 df 00 c0       	push   0xc000dfd0
c0018647:	6a 0e                	push   0xe
c0018649:	e8 01 04 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001864e:	83 c4 10             	add    esp,0x10
c0018651:	50                   	push   eax
c0018652:	6a 00                	push   0x0
c0018654:	68 34 e0 00 c0       	push   0xc000e034
c0018659:	53                   	push   ebx
c001865a:	43                   	inc    ebx
c001865b:	e8 ef 03 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018660:	83 c4 10             	add    esp,0x10
c0018663:	83 fb 1e             	cmp    ebx,0x1e
c0018666:	75 e9                	jne    c0018651 <HalInitialise()+0x113>
c0018668:	50                   	push   eax
c0018669:	6a 00                	push   0x0
c001866b:	68 11 0e 01 c0       	push   0xc0010e11
c0018670:	6a 60                	push   0x60
c0018672:	e8 d8 03 00 00       	call   c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018677:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001867c:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018686:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001868d:	e8 ff 62 ff ff       	call   c000e991 <malloc>
c0018692:	89 04 24             	mov    DWORD PTR [esp],eax
c0018695:	89 c3                	mov    ebx,eax
c0018697:	e8 fe 0d 00 00       	call   c001949a <RTC::RTC()>
c001869c:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00186a6:	5a                   	pop    edx
c00186a7:	59                   	pop    ecx
c00186a8:	53                   	push   ebx
c00186a9:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c00186af:	e8 8a 09 ff ff       	call   c000903e <Device::addChild(Device*)>
c00186b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00186b6:	6a 00                	push   0x0
c00186b8:	6a 00                	push   0x0
c00186ba:	6a 00                	push   0x0
c00186bc:	53                   	push   ebx
c00186bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00186c0:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00186c5:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00186cb:	83 c4 28             	add    esp,0x28
c00186ce:	5b                   	pop    ebx
c00186cf:	c3                   	ret    

c00186d0 <HalMakeBeep(int)>:
c00186d0:	53                   	push   ebx
c00186d1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00186d5:	85 db                	test   ebx,ebx
c00186d7:	75 07                	jne    c00186e0 <HalMakeBeep(int)+0x10>
c00186d9:	e4 61                	in     al,0x61
c00186db:	83 e0 fc             	and    eax,0xfffffffc
c00186de:	eb 26                	jmp    c0018706 <HalMakeBeep(int)+0x36>
c00186e0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00186e5:	99                   	cdq    
c00186e6:	f7 fb                	idiv   ebx
c00186e8:	89 c1                	mov    ecx,eax
c00186ea:	b0 b6                	mov    al,0xb6
c00186ec:	e6 43                	out    0x43,al
c00186ee:	88 c8                	mov    al,cl
c00186f0:	e6 42                	out    0x42,al
c00186f2:	89 c8                	mov    eax,ecx
c00186f4:	c1 e8 08             	shr    eax,0x8
c00186f7:	e6 42                	out    0x42,al
c00186f9:	e4 61                	in     al,0x61
c00186fb:	89 c2                	mov    edx,eax
c00186fd:	83 ca 03             	or     edx,0x3
c0018700:	38 d0                	cmp    al,dl
c0018702:	74 04                	je     c0018708 <HalMakeBeep(int)+0x38>
c0018704:	88 d0                	mov    al,dl
c0018706:	e6 61                	out    0x61,al
c0018708:	5b                   	pop    ebx
c0018709:	c3                   	ret    

c001870a <HalGetRand()>:
c001870a:	31 c0                	xor    eax,eax
c001870c:	c3                   	ret    

c001870d <HalEndOfInterrupt(int)>:
c001870d:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c0018714:	74 1d                	je     c0018733 <HalEndOfInterrupt(int)+0x26>
c0018716:	83 ec 18             	sub    esp,0x18
c0018719:	6a 1b                	push   0x1b
c001871b:	e8 66 f5 ff ff       	call   c0017c86 <x86rdmsr(unsigned int)>
c0018720:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018725:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001872f:	83 c4 1c             	add    esp,0x1c
c0018732:	c3                   	ret    
c0018733:	e9 78 07 00 00       	jmp    c0018eb0 <picEOI(int)>

c0018738 <HalRestart()>:
c0018738:	c3                   	ret    

c0018739 <HalShutdown()>:
c0018739:	c3                   	ret    

c001873a <HalSleep()>:
c001873a:	c3                   	ret    
c001873b:	90                   	nop

c001873c <CPU::CPU()>:
c001873c:	83 ec 0c             	sub    esp,0xc
c001873f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018743:	83 ec 08             	sub    esp,0x8
c0018746:	68 b9 2d 02 c0       	push   0xc0022db9
c001874b:	50                   	push   eax
c001874c:	e8 4f 0a ff ff       	call   c00091a0 <Device::Device(char const*)>
c0018751:	83 c4 10             	add    esp,0x10
c0018754:	ba 94 30 02 c0       	mov    edx,0xc0023094
c0018759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001875d:	89 10                	mov    DWORD PTR [eax],edx
c001875f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018763:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001876d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018771:	05 64 01 00 00       	add    eax,0x164
c0018776:	83 ec 0c             	sub    esp,0xc
c0018779:	50                   	push   eax
c001877a:	e8 91 59 ff ff       	call   c000e110 <GDT::GDT()>
c001877f:	83 c4 10             	add    esp,0x10
c0018782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018786:	05 68 09 00 00       	add    eax,0x968
c001878b:	83 ec 0c             	sub    esp,0xc
c001878e:	50                   	push   eax
c001878f:	e8 cc 5b ff ff       	call   c000e360 <IDT::IDT()>
c0018794:	83 c4 10             	add    esp,0x10
c0018797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001879b:	05 68 11 00 00       	add    eax,0x1168
c00187a0:	83 ec 0c             	sub    esp,0xc
c00187a3:	50                   	push   eax
c00187a4:	e8 6b 91 ff ff       	call   c0011914 <TSS::TSS()>
c00187a9:	83 c4 10             	add    esp,0x10
c00187ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187b0:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00187ba:	90                   	nop
c00187bb:	83 c4 0c             	add    esp,0xc
c00187be:	c3                   	ret    
c00187bf:	90                   	nop

c00187c0 <CPU::setupSMEP()>:
c00187c0:	0f 20 e0             	mov    eax,cr4
c00187c3:	0d 00 00 10 00       	or     eax,0x100000
c00187c8:	0f 22 e0             	mov    cr4,eax
c00187cb:	c3                   	ret    

c00187cc <CPU::setupUMIP()>:
c00187cc:	0f 20 e0             	mov    eax,cr4
c00187cf:	80 cc 08             	or     ah,0x8
c00187d2:	0f 22 e0             	mov    cr4,eax
c00187d5:	c3                   	ret    

c00187d6 <CPU::setupTSC()>:
c00187d6:	0f 20 e0             	mov    eax,cr4
c00187d9:	83 c8 04             	or     eax,0x4
c00187dc:	0f 22 e0             	mov    cr4,eax
c00187df:	c3                   	ret    

c00187e0 <CPU::setupLargePages()>:
c00187e0:	0f 20 e0             	mov    eax,cr4
c00187e3:	83 c8 10             	or     eax,0x10
c00187e6:	0f 22 e0             	mov    cr4,eax
c00187e9:	c3                   	ret    

c00187ea <CPU::setupPAT()>:
c00187ea:	f6 05 8c c7 02 c0 08 	test   BYTE PTR ds:0xc002c78c,0x8
c00187f1:	74 28                	je     c001881b <CPU::setupPAT()+0x31>
c00187f3:	53                   	push   ebx
c00187f4:	83 ec 14             	sub    esp,0x14
c00187f7:	68 77 02 00 00       	push   0x277
c00187fc:	e8 85 f4 ff ff       	call   c0017c86 <x86rdmsr(unsigned int)>
c0018801:	83 c4 0c             	add    esp,0xc
c0018804:	83 e2 f8             	and    edx,0xfffffff8
c0018807:	83 ca 01             	or     edx,0x1
c001880a:	52                   	push   edx
c001880b:	50                   	push   eax
c001880c:	68 77 02 00 00       	push   0x277
c0018811:	e8 ae f4 ff ff       	call   c0017cc4 <x86wrmsr(unsigned int, unsigned long long)>
c0018816:	83 c4 18             	add    esp,0x18
c0018819:	5b                   	pop    ebx
c001881a:	c3                   	ret    
c001881b:	c3                   	ret    

c001881c <CPU::setupMTRR()>:
c001881c:	c3                   	ret    
c001881d:	90                   	nop

c001881e <CPU::setupGlobalPages()>:
c001881e:	0f 20 e0             	mov    eax,cr4
c0018821:	0c 80                	or     al,0x80
c0018823:	0f 22 e0             	mov    cr4,eax
c0018826:	c3                   	ret    
c0018827:	90                   	nop

c0018828 <CPU::allowUsermodeDataAccess()>:
c0018828:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c001882f:	74 03                	je     c0018834 <CPU::allowUsermodeDataAccess()+0xc>
c0018831:	0f 01 cb             	stac   
c0018834:	c3                   	ret    
c0018835:	90                   	nop

c0018836 <CPU::prohibitUsermodeDataAccess()>:
c0018836:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c001883d:	74 03                	je     c0018842 <CPU::prohibitUsermodeDataAccess()+0xc>
c001883f:	0f 01 ca             	clac   
c0018842:	c3                   	ret    
c0018843:	90                   	nop

c0018844 <CPU::setupSMAP()>:
c0018844:	0f 20 e0             	mov    eax,cr4
c0018847:	0d 00 00 20 00       	or     eax,0x200000
c001884c:	0f 22 e0             	mov    cr4,eax
c001884f:	eb e5                	jmp    c0018836 <CPU::prohibitUsermodeDataAccess()>
c0018851:	90                   	nop

c0018852 <CPU::setupFeatures()>:
c0018852:	53                   	push   ebx
c0018853:	83 ec 08             	sub    esp,0x8
c0018856:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001885a:	f6 05 8f c7 02 c0 20 	test   BYTE PTR ds:0xc002c78f,0x20
c0018861:	74 18                	je     c001887b <CPU::setupFeatures()+0x29>
c0018863:	83 ec 0c             	sub    esp,0xc
c0018866:	68 02 30 02 c0       	push   0xc0023002
c001886b:	e8 f4 e6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018870:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018873:	e8 54 ff ff ff       	call   c00187cc <CPU::setupUMIP()>
c0018878:	83 c4 10             	add    esp,0x10
c001887b:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c0018882:	74 18                	je     c001889c <CPU::setupFeatures()+0x4a>
c0018884:	83 ec 0c             	sub    esp,0xc
c0018887:	68 0c 30 02 c0       	push   0xc002300c
c001888c:	e8 d3 e6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018891:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018894:	e8 3d ff ff ff       	call   c00187d6 <CPU::setupTSC()>
c0018899:	83 c4 10             	add    esp,0x10
c001889c:	f6 05 8e c7 02 c0 20 	test   BYTE PTR ds:0xc002c78e,0x20
c00188a3:	74 18                	je     c00188bd <CPU::setupFeatures()+0x6b>
c00188a5:	83 ec 0c             	sub    esp,0xc
c00188a8:	68 15 30 02 c0       	push   0xc0023015
c00188ad:	e8 b2 e6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00188b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00188b5:	e8 26 ff ff ff       	call   c00187e0 <CPU::setupLargePages()>
c00188ba:	83 c4 10             	add    esp,0x10
c00188bd:	f6 05 8e c7 02 c0 40 	test   BYTE PTR ds:0xc002c78e,0x40
c00188c4:	74 18                	je     c00188de <CPU::setupFeatures()+0x8c>
c00188c6:	83 ec 0c             	sub    esp,0xc
c00188c9:	68 1e 30 02 c0       	push   0xc002301e
c00188ce:	e8 91 e6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00188d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00188d6:	e8 43 ff ff ff       	call   c001881e <CPU::setupGlobalPages()>
c00188db:	83 c4 10             	add    esp,0x10
c00188de:	f6 05 8e c7 02 c0 80 	test   BYTE PTR ds:0xc002c78e,0x80
c00188e5:	74 18                	je     c00188ff <CPU::setupFeatures()+0xad>
c00188e7:	83 ec 0c             	sub    esp,0xc
c00188ea:	68 30 30 02 c0       	push   0xc0023030
c00188ef:	e8 70 e6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00188f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00188f7:	e8 ee fe ff ff       	call   c00187ea <CPU::setupPAT()>
c00188fc:	83 c4 10             	add    esp,0x10
c00188ff:	f6 05 90 c7 02 c0 04 	test   BYTE PTR ds:0xc002c790,0x4
c0018906:	74 11                	je     c0018919 <CPU::setupFeatures()+0xc7>
c0018908:	c7 44 24 10 39 30 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023039
c0018910:	83 c4 08             	add    esp,0x8
c0018913:	5b                   	pop    ebx
c0018914:	e9 4b e6 fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0018919:	83 c4 08             	add    esp,0x8
c001891c:	5b                   	pop    ebx
c001891d:	c3                   	ret    

c001891e <CPU::open(int, int, void*)>:
c001891e:	55                   	push   ebp
c001891f:	57                   	push   edi
c0018920:	56                   	push   esi
c0018921:	53                   	push   ebx
c0018922:	83 ec 18             	sub    esp,0x18
c0018925:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018929:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001892d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018931:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c0018937:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001893d:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c0018943:	50                   	push   eax
c0018944:	e8 29 58 ff ff       	call   c000e172 <GDT::setup()>
c0018949:	83 c4 0c             	add    esp,0xc
c001894c:	6a 00                	push   0x0
c001894e:	68 ef be ad de       	push   0xdeadbeef
c0018953:	55                   	push   ebp
c0018954:	e8 ff 8f ff ff       	call   c0011958 <TSS::setup(unsigned long, unsigned long)>
c0018959:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001895c:	e8 d7 8f ff ff       	call   c0011938 <TSS::flush()>
c0018961:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c0018967:	89 04 24             	mov    DWORD PTR [esp],eax
c001896a:	e8 67 5a ff ff       	call   c000e3d6 <IDT::setup()>
c001896f:	b8 00 04 00 00       	mov    eax,0x400
c0018974:	0f 23 f8             	mov    dr7,eax
c0018977:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0018981:	e8 54 65 ff ff       	call   c000eeda <Phys::allocatePage()>
c0018986:	83 c4 10             	add    esp,0x10
c0018989:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001898f:	85 f6                	test   esi,esi
c0018991:	89 38                	mov    DWORD PTR [eax],edi
c0018993:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018999:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001899c:	74 10                	je     c00189ae <CPU::open(int, int, void*)+0x90>
c001899e:	50                   	push   eax
c001899f:	50                   	push   eax
c00189a0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00189a6:	56                   	push   esi
c00189a7:	e8 96 99 ff ff       	call   c0012342 <VAS::setCPUSpecific(unsigned long)>
c00189ac:	eb 0d                	jmp    c00189bb <CPU::open(int, int, void*)+0x9d>
c00189ae:	83 ec 0c             	sub    esp,0xc
c00189b1:	68 43 30 02 c0       	push   0xc0023043
c00189b6:	e8 2b 63 ff ff       	call   c000ece6 <KePanic(char const*)>
c00189bb:	83 c4 10             	add    esp,0x10
c00189be:	83 ec 0c             	sub    esp,0xc
c00189c1:	68 51 30 02 c0       	push   0xc0023051
c00189c6:	e8 7d 3c ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c00189cb:	e8 6e fb ff ff       	call   c001853e <HalInitialise()>
c00189d0:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c00189d5:	83 e0 10             	and    eax,0x10
c00189d8:	83 f8 01             	cmp    eax,0x1
c00189db:	19 c0                	sbb    eax,eax
c00189dd:	83 e0 46             	and    eax,0x46
c00189e0:	83 c0 1e             	add    eax,0x1e
c00189e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00189e6:	e8 36 1d ff ff       	call   c000a721 <setupTimer(int)>
c00189eb:	83 c4 10             	add    esp,0x10
c00189ee:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c00189f4:	f6 05 90 bd 02 c0 20 	test   BYTE PTR ds:0xc002bd90,0x20
c00189fb:	74 0c                	je     c0018a09 <CPU::open(int, int, void*)+0xeb>
c00189fd:	83 ec 0c             	sub    esp,0xc
c0018a00:	53                   	push   ebx
c0018a01:	e8 4c fe ff ff       	call   c0018852 <CPU::setupFeatures()>
c0018a06:	83 c4 10             	add    esp,0x10
c0018a09:	83 c4 0c             	add    esp,0xc
c0018a0c:	31 c0                	xor    eax,eax
c0018a0e:	5b                   	pop    ebx
c0018a0f:	5e                   	pop    esi
c0018a10:	5f                   	pop    edi
c0018a11:	5d                   	pop    ebp
c0018a12:	c3                   	ret    

c0018a13 <convertLegacyIRQNumber(int)>:
c0018a13:	83 ec 0c             	sub    esp,0xc
c0018a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a1a:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018a21:	74 0c                	je     c0018a2f <convertLegacyIRQNumber(int)+0x1c>
c0018a23:	83 f8 0f             	cmp    eax,0xf
c0018a26:	7f 0b                	jg     c0018a33 <convertLegacyIRQNumber(int)+0x20>
c0018a28:	0f b6 80 28 3b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc4d8]
c0018a2f:	83 c4 0c             	add    esp,0xc
c0018a32:	c3                   	ret    
c0018a33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a37:	83 ec 0c             	sub    esp,0xc
c0018a3a:	68 b8 30 02 c0       	push   0xc00230b8
c0018a3f:	e8 a2 62 ff ff       	call   c000ece6 <KePanic(char const*)>
c0018a44:	83 c4 10             	add    esp,0x10
c0018a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a4b:	83 c4 0c             	add    esp,0xc
c0018a4e:	c3                   	ret    

c0018a4f <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0018a4f:	56                   	push   esi
c0018a50:	31 c0                	xor    eax,eax
c0018a52:	53                   	push   ebx
c0018a53:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018a5b:	89 ca                	mov    edx,ecx
c0018a5d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018a61:	c1 e2 04             	shl    edx,0x4
c0018a64:	83 bc 82 80 ad 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5280],0x0
c0018a6c:	74 17                	je     c0018a85 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0018a6e:	83 c0 01             	add    eax,0x1
c0018a71:	83 f8 04             	cmp    eax,0x4
c0018a74:	75 ee                	jne    c0018a64 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0018a76:	c7 44 24 0c 19 31 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023119
c0018a7e:	5b                   	pop    ebx
c0018a7f:	5e                   	pop    esi
c0018a80:	e9 61 62 ff ff       	jmp    c000ece6 <KePanic(char const*)>
c0018a85:	8d 04 88             	lea    eax,[eax+ecx*4]
c0018a88:	89 1c 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],ebx
c0018a8f:	89 34 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],esi
c0018a96:	5b                   	pop    ebx
c0018a97:	5e                   	pop    esi
c0018a98:	c3                   	ret    

c0018a99 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0018a99:	57                   	push   edi
c0018a9a:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018aa1:	56                   	push   esi
c0018aa2:	53                   	push   ebx
c0018aa3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018aa7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018aab:	74 54                	je     c0018b01 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c0018aad:	89 c7                	mov    edi,eax
c0018aaf:	84 c0                	test   al,al
c0018ab1:	74 1d                	je     c0018ad0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0018ab3:	83 fe 0f             	cmp    esi,0xf
c0018ab6:	0f 8f d5 00 00 00    	jg     c0018b91 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c0018abc:	0f b6 b6 28 3b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc4d8]
c0018ac3:	0f b7 bc 36 c0 9a 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd6540]
c0018acb:	d1 ef                	shr    edi,1
c0018acd:	83 e7 01             	and    edi,0x1
c0018ad0:	83 ec 08             	sub    esp,0x8
c0018ad3:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c0018ad8:	31 db                	xor    ebx,ebx
c0018ada:	50                   	push   eax
c0018adb:	68 26 31 02 c0       	push   0xc0023126
c0018ae0:	e8 7f e4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018ae5:	83 c4 10             	add    esp,0x10
c0018ae8:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c0018aed:	85 c0                	test   eax,eax
c0018aef:	7f 55                	jg     c0018b46 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018af1:	83 ec 0c             	sub    esp,0xc
c0018af4:	68 3d 31 02 c0       	push   0xc002313d
c0018af9:	e8 e8 61 ff ff       	call   c000ece6 <KePanic(char const*)>
c0018afe:	83 c4 10             	add    esp,0x10
c0018b01:	8d 7e 20             	lea    edi,[esi+0x20]
c0018b04:	89 f8                	mov    eax,edi
c0018b06:	31 d2                	xor    edx,edx
c0018b08:	c1 e0 04             	shl    eax,0x4
c0018b0b:	8b 8c 90 80 ad 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5280]
c0018b12:	85 c9                	test   ecx,ecx
c0018b14:	0f 84 8e 00 00 00    	je     c0018ba8 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c0018b1a:	83 c2 01             	add    edx,0x1
c0018b1d:	83 fa 04             	cmp    edx,0x4
c0018b20:	75 e9                	jne    c0018b0b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018b22:	83 ec 0c             	sub    esp,0xc
c0018b25:	68 f4 30 02 c0       	push   0xc00230f4
c0018b2a:	e8 b7 61 ff ff       	call   c000ece6 <KePanic(char const*)>
c0018b2f:	83 c4 10             	add    esp,0x10
c0018b32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018b37:	5b                   	pop    ebx
c0018b38:	5e                   	pop    esi
c0018b39:	5f                   	pop    edi
c0018b3a:	c3                   	ret    
c0018b3b:	83 c3 01             	add    ebx,0x1
c0018b3e:	39 1d e0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0e0,ebx
c0018b44:	7e ab                	jle    c0018af1 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c0018b46:	83 ec 08             	sub    esp,0x8
c0018b49:	8b 04 9d 00 d1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f00]
c0018b50:	56                   	push   esi
c0018b51:	50                   	push   eax
c0018b52:	e8 ed 63 00 00       	call   c001ef44 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0018b57:	83 c4 10             	add    esp,0x10
c0018b5a:	84 c0                	test   al,al
c0018b5c:	74 dd                	je     c0018b3b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c0018b5e:	83 ec 04             	sub    esp,0x4
c0018b61:	89 f8                	mov    eax,edi
c0018b63:	8b 1c 9d 00 d1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f00]
c0018b6a:	0f b6 f8             	movzx  edi,al
c0018b6d:	57                   	push   edi
c0018b6e:	8d 7e 20             	lea    edi,[esi+0x20]
c0018b71:	6a 00                	push   0x0
c0018b73:	89 f8                	mov    eax,edi
c0018b75:	0f b6 c0             	movzx  eax,al
c0018b78:	50                   	push   eax
c0018b79:	89 f0                	mov    eax,esi
c0018b7b:	6a 00                	push   0x0
c0018b7d:	0f b6 c0             	movzx  eax,al
c0018b80:	6a 00                	push   0x0
c0018b82:	50                   	push   eax
c0018b83:	53                   	push   ebx
c0018b84:	e8 27 65 00 00       	call   c001f0b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018b89:	83 c4 20             	add    esp,0x20
c0018b8c:	e9 73 ff ff ff       	jmp    c0018b04 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c0018b91:	83 ec 0c             	sub    esp,0xc
c0018b94:	31 ff                	xor    edi,edi
c0018b96:	68 b8 30 02 c0       	push   0xc00230b8
c0018b9b:	e8 46 61 ff ff       	call   c000ece6 <KePanic(char const*)>
c0018ba0:	83 c4 10             	add    esp,0x10
c0018ba3:	e9 28 ff ff ff       	jmp    c0018ad0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0018ba8:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018bab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018baf:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018bb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018bba:	5b                   	pop    ebx
c0018bbb:	89 14 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],edx
c0018bc2:	89 f0                	mov    eax,esi
c0018bc4:	5e                   	pop    esi
c0018bc5:	5f                   	pop    edi
c0018bc6:	c3                   	ret    

c0018bc7 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018bc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018bcb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018bcf:	c1 e0 04             	shl    eax,0x4
c0018bd2:	8d 50 10             	lea    edx,[eax+0x10]
c0018bd5:	39 88 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ecx
c0018bdb:	74 08                	je     c0018be5 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018bdd:	83 c0 04             	add    eax,0x4
c0018be0:	39 d0                	cmp    eax,edx
c0018be2:	75 f1                	jne    c0018bd5 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018be4:	c3                   	ret    
c0018be5:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018bef:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018bf9:	eb e2                	jmp    c0018bdd <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018bfb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018bfb:	53                   	push   ebx
c0018bfc:	83 ec 08             	sub    esp,0x8
c0018bff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018c03:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018c08:	74 09                	je     c0018c13 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018c0a:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018c11:	75 37                	jne    c0018c4a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c0018c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c17:	83 c0 20             	add    eax,0x20
c0018c1a:	c1 e0 04             	shl    eax,0x4
c0018c1d:	8d 50 10             	lea    edx,[eax+0x10]
c0018c20:	39 98 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ebx
c0018c26:	74 0c                	je     c0018c34 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c0018c28:	83 c0 04             	add    eax,0x4
c0018c2b:	39 d0                	cmp    eax,edx
c0018c2d:	75 f1                	jne    c0018c20 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c0018c2f:	83 c4 08             	add    esp,0x8
c0018c32:	5b                   	pop    ebx
c0018c33:	c3                   	ret    
c0018c34:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018c3e:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018c48:	eb de                	jmp    c0018c28 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c0018c4a:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c0018c4f:	7f 11                	jg     c0018c62 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c0018c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c55:	0f b6 80 28 3b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc4d8]
c0018c5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018c60:	eb b1                	jmp    c0018c13 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018c62:	83 ec 0c             	sub    esp,0xc
c0018c65:	68 4a 31 02 c0       	push   0xc002314a
c0018c6a:	e8 77 60 ff ff       	call   c000ece6 <KePanic(char const*)>
c0018c6f:	83 c4 10             	add    esp,0x10
c0018c72:	eb 9f                	jmp    c0018c13 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>

c0018c74 <picIoWait()>:
c0018c74:	eb 00                	jmp    c0018c76 <picIoWait()+0x2>
c0018c76:	eb 00                	jmp    c0018c78 <picIoWait()+0x4>
c0018c78:	90                   	nop
c0018c79:	c3                   	ret    
c0018c7a:	66 90                	xchg   ax,ax

c0018c7c <picDisable()>:
c0018c7c:	83 ec 10             	sub    esp,0x10
c0018c7f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018c86:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018c8b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018c8f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018c94:	ee                   	out    dx,al
c0018c95:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018c9c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018ca1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018ca5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018caa:	ee                   	out    dx,al
c0018cab:	90                   	nop
c0018cac:	83 c4 10             	add    esp,0x10
c0018caf:	c3                   	ret    

c0018cb0 <picGetIRQReg(int)>:
c0018cb0:	83 ec 10             	sub    esp,0x10
c0018cb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cb7:	0f b6 c0             	movzx  eax,al
c0018cba:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018cc1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018cc5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018cc9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018cce:	ee                   	out    dx,al
c0018ccf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cd3:	0f b6 c0             	movzx  eax,al
c0018cd6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018cdd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018ce1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018ce5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018cea:	ee                   	out    dx,al
c0018ceb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018cf2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018cf7:	89 c2                	mov    edx,eax
c0018cf9:	ec                   	in     al,dx
c0018cfa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018cfe:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018d02:	0f b6 c0             	movzx  eax,al
c0018d05:	c1 e0 08             	shl    eax,0x8
c0018d08:	89 c1                	mov    ecx,eax
c0018d0a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018d11:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018d16:	89 c2                	mov    edx,eax
c0018d18:	ec                   	in     al,dx
c0018d19:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018d1d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018d21:	0f b6 c0             	movzx  eax,al
c0018d24:	09 c8                	or     eax,ecx
c0018d26:	83 c4 10             	add    esp,0x10
c0018d29:	c3                   	ret    
c0018d2a:	66 90                	xchg   ax,ax

c0018d2c <picOpen()>:
c0018d2c:	83 ec 50             	sub    esp,0x50
c0018d2f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018d36:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018d3b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018d3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d43:	ee                   	out    dx,al
c0018d44:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018d4b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018d50:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018d54:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018d58:	ee                   	out    dx,al
c0018d59:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018d61:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018d69:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018d70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d74:	89 c2                	mov    edx,eax
c0018d76:	ec                   	in     al,dx
c0018d77:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018d7b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018d7f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018d83:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018d8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d8e:	89 c2                	mov    edx,eax
c0018d90:	ec                   	in     al,dx
c0018d91:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018d95:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018d99:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018d9d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018da4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018da9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018dad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018db1:	ee                   	out    dx,al
c0018db2:	e8 bd fe ff ff       	call   c0018c74 <picIoWait()>
c0018db7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018dbe:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018dc3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018dc7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018dcb:	ee                   	out    dx,al
c0018dcc:	e8 a3 fe ff ff       	call   c0018c74 <picIoWait()>
c0018dd1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018dd5:	0f b6 c0             	movzx  eax,al
c0018dd8:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018ddf:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018de3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018de7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018deb:	ee                   	out    dx,al
c0018dec:	e8 83 fe ff ff       	call   c0018c74 <picIoWait()>
c0018df1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018df5:	0f b6 c0             	movzx  eax,al
c0018df8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018dff:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018e03:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018e07:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018e0b:	ee                   	out    dx,al
c0018e0c:	e8 63 fe ff ff       	call   c0018c74 <picIoWait()>
c0018e11:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018e18:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018e1d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018e21:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018e25:	ee                   	out    dx,al
c0018e26:	e8 49 fe ff ff       	call   c0018c74 <picIoWait()>
c0018e2b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018e32:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018e37:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018e3b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018e3f:	ee                   	out    dx,al
c0018e40:	e8 2f fe ff ff       	call   c0018c74 <picIoWait()>
c0018e45:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018e4c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018e51:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018e55:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018e59:	ee                   	out    dx,al
c0018e5a:	e8 15 fe ff ff       	call   c0018c74 <picIoWait()>
c0018e5f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018e66:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018e6b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018e6f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018e73:	ee                   	out    dx,al
c0018e74:	e8 fb fd ff ff       	call   c0018c74 <picIoWait()>
c0018e79:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018e7e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018e85:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018e89:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018e8d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018e91:	ee                   	out    dx,al
c0018e92:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018e97:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018e9e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018ea2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018ea6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018eaa:	ee                   	out    dx,al
c0018eab:	90                   	nop
c0018eac:	83 c4 50             	add    esp,0x50
c0018eaf:	c3                   	ret    

c0018eb0 <picEOI(int)>:
c0018eb0:	83 ec 10             	sub    esp,0x10
c0018eb3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018eb8:	75 1e                	jne    c0018ed8 <picEOI(int)+0x28>
c0018eba:	6a 0b                	push   0xb
c0018ebc:	e8 ef fd ff ff       	call   c0018cb0 <picGetIRQReg(int)>
c0018ec1:	83 c4 04             	add    esp,0x4
c0018ec4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018ec9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018ece:	25 80 00 00 00       	and    eax,0x80
c0018ed3:	74 73                	je     c0018f48 <picEOI(int)+0x98>
c0018ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018edd:	75 31                	jne    c0018f10 <picEOI(int)+0x60>
c0018edf:	6a 0b                	push   0xb
c0018ee1:	e8 ca fd ff ff       	call   c0018cb0 <picGetIRQReg(int)>
c0018ee6:	83 c4 04             	add    esp,0x4
c0018ee9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018eee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ef2:	98                   	cwde   
c0018ef3:	85 c0                	test   eax,eax
c0018ef5:	78 19                	js     c0018f10 <picEOI(int)+0x60>
c0018ef7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018efe:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018f03:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f07:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018f0c:	ee                   	out    dx,al
c0018f0d:	eb 3d                	jmp    c0018f4c <picEOI(int)+0x9c>
c0018f0f:	90                   	nop
c0018f10:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018f15:	7e 19                	jle    c0018f30 <picEOI(int)+0x80>
c0018f17:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018f1e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018f23:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018f27:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018f2c:	ee                   	out    dx,al
c0018f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f30:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018f37:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018f3c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018f40:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018f45:	ee                   	out    dx,al
c0018f46:	eb 04                	jmp    c0018f4c <picEOI(int)+0x9c>
c0018f48:	90                   	nop
c0018f49:	8d 76 00             	lea    esi,[esi+0x0]
c0018f4c:	83 c4 10             	add    esp,0x10
c0018f4f:	c3                   	ret    

c0018f50 <RTC::open(int, int, void*)>:
c0018f50:	31 c0                	xor    eax,eax
c0018f52:	c3                   	ret    
c0018f53:	90                   	nop

c0018f54 <RTC::close(int, int, void*)>:
c0018f54:	31 c0                	xor    eax,eax
c0018f56:	c3                   	ret    
c0018f57:	90                   	nop

c0018f58 <RTC::timeInSecondsUTC()>:
c0018f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f5c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018f62:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018f68:	c3                   	ret    
c0018f69:	90                   	nop

c0018f6a <RTC::timeInDatetimeUTC()>:
c0018f6a:	53                   	push   ebx
c0018f6b:	83 ec 14             	sub    esp,0x14
c0018f6e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f76:	8b 10                	mov    edx,DWORD PTR [eax]
c0018f78:	50                   	push   eax
c0018f79:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018f7c:	83 c4 0c             	add    esp,0xc
c0018f7f:	52                   	push   edx
c0018f80:	50                   	push   eax
c0018f81:	53                   	push   ebx
c0018f82:	e8 2b fe fe ff       	call   c0008db2 <secondsToDatetime(unsigned long long)>
c0018f87:	89 d8                	mov    eax,ebx
c0018f89:	83 c4 14             	add    esp,0x14
c0018f8c:	5b                   	pop    ebx
c0018f8d:	c2 04 00             	ret    0x4

c0018f90 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018f90:	56                   	push   esi
c0018f91:	53                   	push   ebx
c0018f92:	83 ec 14             	sub    esp,0x14
c0018f95:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018f99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f9b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018f9e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018fa2:	52                   	push   edx
c0018fa3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018fa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018fab:	50                   	push   eax
c0018fac:	e8 01 fe fe ff       	call   c0008db2 <secondsToDatetime(unsigned long long)>
c0018fb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fb5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018fb9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018fbd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018fc1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018fc5:	89 f0                	mov    eax,esi
c0018fc7:	83 c4 20             	add    esp,0x20
c0018fca:	5b                   	pop    ebx
c0018fcb:	5e                   	pop    esi
c0018fcc:	ff e0                	jmp    eax

c0018fce <RTC::~RTC()>:
c0018fce:	83 ec 0c             	sub    esp,0xc
c0018fd1:	ba 74 31 02 c0       	mov    edx,0xc0023174
c0018fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fda:	89 10                	mov    DWORD PTR [eax],edx
c0018fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fe0:	83 ec 0c             	sub    esp,0xc
c0018fe3:	50                   	push   eax
c0018fe4:	e8 5b fb fe ff       	call   c0008b44 <Clock::~Clock()>
c0018fe9:	83 c4 10             	add    esp,0x10
c0018fec:	90                   	nop
c0018fed:	83 c4 0c             	add    esp,0xc
c0018ff0:	c3                   	ret    
c0018ff1:	90                   	nop

c0018ff2 <RTC::~RTC()>:
c0018ff2:	83 ec 0c             	sub    esp,0xc
c0018ff5:	83 ec 0c             	sub    esp,0xc
c0018ff8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ffc:	e8 cd ff ff ff       	call   c0018fce <RTC::~RTC()>
c0019001:	83 c4 10             	add    esp,0x10
c0019004:	83 ec 08             	sub    esp,0x8
c0019007:	68 60 01 00 00       	push   0x160
c001900c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019010:	e8 f3 36 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0019015:	83 c4 10             	add    esp,0x10
c0019018:	83 c4 0c             	add    esp,0xc
c001901b:	c3                   	ret    

c001901c <RTC::get_update_in_progress_flag()>:
c001901c:	83 ec 18             	sub    esp,0x18
c001901f:	6a 0a                	push   0xa
c0019021:	e8 81 db ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c0019026:	83 c4 1c             	add    esp,0x1c
c0019029:	0f b6 c0             	movzx  eax,al
c001902c:	c1 e8 07             	shr    eax,0x7
c001902f:	c3                   	ret    

c0019030 <RTC::completeRTCRefresh()>:
c0019030:	55                   	push   ebp
c0019031:	57                   	push   edi
c0019032:	56                   	push   esi
c0019033:	53                   	push   ebx
c0019034:	83 ec 3c             	sub    esp,0x3c
c0019037:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c001903d:	83 ec 0c             	sub    esp,0xc
c0019040:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019044:	e8 d3 ff ff ff       	call   c001901c <RTC::get_update_in_progress_flag()>
c0019049:	83 c4 10             	add    esp,0x10
c001904c:	84 c0                	test   al,al
c001904e:	74 0e                	je     c001905e <RTC::completeRTCRefresh()+0x2e>
c0019050:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019056:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c001905c:	73 df                	jae    c001903d <RTC::completeRTCRefresh()+0xd>
c001905e:	83 ec 0c             	sub    esp,0xc
c0019061:	6a 00                	push   0x0
c0019063:	e8 3f db ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c0019068:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001906f:	89 c5                	mov    ebp,eax
c0019071:	e8 31 db ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c0019076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001907d:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0019081:	e8 21 db ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c0019086:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001908d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019091:	e8 11 db ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c0019096:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001909d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00190a1:	e8 01 db ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c00190a6:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c00190ad:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00190b1:	e8 f1 da ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c00190b6:	0f b6 c0             	movzx  eax,al
c00190b9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00190bd:	83 c4 10             	add    esp,0x10
c00190c0:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c00190c6:	83 ec 0c             	sub    esp,0xc
c00190c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00190cd:	e8 4a ff ff ff       	call   c001901c <RTC::get_update_in_progress_flag()>
c00190d2:	83 c4 10             	add    esp,0x10
c00190d5:	84 c0                	test   al,al
c00190d7:	74 0e                	je     c00190e7 <RTC::completeRTCRefresh()+0xb7>
c00190d9:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00190df:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c00190e5:	73 df                	jae    c00190c6 <RTC::completeRTCRefresh()+0x96>
c00190e7:	83 ec 0c             	sub    esp,0xc
c00190ea:	6a 00                	push   0x0
c00190ec:	e8 b6 da ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c00190f1:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00190f8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00190fc:	e8 a6 da ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c0019101:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019108:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001910c:	e8 96 da ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c0019111:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019118:	88 c3                	mov    bl,al
c001911a:	e8 88 da ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c001911f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019126:	89 c6                	mov    esi,eax
c0019128:	e8 7a da ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c001912d:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019134:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019138:	e8 6a da ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c001913d:	89 e9                	mov    ecx,ebp
c001913f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019143:	0f b6 f8             	movzx  edi,al
c0019146:	83 c4 10             	add    esp,0x10
c0019149:	0f b6 eb             	movzx  ebp,bl
c001914c:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0019150:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019155:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001915a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001915e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019162:	0f 94 c0             	sete   al
c0019165:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0019169:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001916d:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0019172:	0f 94 c2             	sete   dl
c0019175:	21 d0                	and    eax,edx
c0019177:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001917b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001917f:	0f 94 c2             	sete   dl
c0019182:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0019186:	21 c2                	and    edx,eax
c0019188:	89 f0                	mov    eax,esi
c001918a:	0f b6 c0             	movzx  eax,al
c001918d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019191:	89 f0                	mov    eax,esi
c0019193:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0019197:	0f 94 c0             	sete   al
c001919a:	21 d0                	and    eax,edx
c001919c:	31 d2                	xor    edx,edx
c001919e:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00191a2:	0f 94 c2             	sete   dl
c00191a5:	85 c2                	test   edx,eax
c00191a7:	75 27                	jne    c00191d0 <RTC::completeRTCRefresh()+0x1a0>
c00191a9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00191ad:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c00191b1:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00191b5:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00191b9:	89 f0                	mov    eax,esi
c00191bb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00191bf:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00191c3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00191c7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00191cb:	e9 f0 fe ff ff       	jmp    c00190c0 <RTC::completeRTCRefresh()+0x90>
c00191d0:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c00191d4:	75 d3                	jne    c00191a9 <RTC::completeRTCRefresh()+0x179>
c00191d6:	83 ec 0c             	sub    esp,0xc
c00191d9:	6a 0b                	push   0xb
c00191db:	e8 c7 d9 ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c00191e0:	83 c4 10             	add    esp,0x10
c00191e3:	a8 04                	test   al,0x4
c00191e5:	75 7a                	jne    c0019261 <RTC::completeRTCRefresh()+0x231>
c00191e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00191eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00191ef:	83 e1 0f             	and    ecx,0xf
c00191f2:	c1 ea 04             	shr    edx,0x4
c00191f5:	83 e6 0f             	and    esi,0xf
c00191f8:	6b d2 0a             	imul   edx,edx,0xa
c00191fb:	c1 ef 04             	shr    edi,0x4
c00191fe:	01 d1                	add    ecx,edx
c0019200:	6b ff 0a             	imul   edi,edi,0xa
c0019203:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0019207:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001920b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001920f:	c1 ea 04             	shr    edx,0x4
c0019212:	83 e1 0f             	and    ecx,0xf
c0019215:	6b d2 0a             	imul   edx,edx,0xa
c0019218:	01 d1                	add    ecx,edx
c001921a:	89 ea                	mov    edx,ebp
c001921c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0019220:	c1 ea 04             	shr    edx,0x4
c0019223:	89 d9                	mov    ecx,ebx
c0019225:	83 e2 07             	and    edx,0x7
c0019228:	83 e1 0f             	and    ecx,0xf
c001922b:	6b d2 0a             	imul   edx,edx,0xa
c001922e:	83 e3 80             	and    ebx,0xffffff80
c0019231:	01 d1                	add    ecx,edx
c0019233:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019237:	09 cb                	or     ebx,ecx
c0019239:	c1 ea 04             	shr    edx,0x4
c001923c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019240:	6b d2 0a             	imul   edx,edx,0xa
c0019243:	83 e1 0f             	and    ecx,0xf
c0019246:	01 d6                	add    esi,edx
c0019248:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001924c:	c1 ea 04             	shr    edx,0x4
c001924f:	6b d2 0a             	imul   edx,edx,0xa
c0019252:	01 d1                	add    ecx,edx
c0019254:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019258:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001925c:	83 e2 0f             	and    edx,0xf
c001925f:	01 d7                	add    edi,edx
c0019261:	a8 02                	test   al,0x2
c0019263:	75 15                	jne    c001927a <RTC::completeRTCRefresh()+0x24a>
c0019265:	f6 c3 80             	test   bl,0x80
c0019268:	74 10                	je     c001927a <RTC::completeRTCRefresh()+0x24a>
c001926a:	83 e3 7f             	and    ebx,0x7f
c001926d:	b9 18 00 00 00       	mov    ecx,0x18
c0019272:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019275:	99                   	cdq    
c0019276:	f7 f9                	idiv   ecx
c0019278:	88 d3                	mov    bl,dl
c001927a:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0019280:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0019286:	77 06                	ja     c001928e <RTC::completeRTCRefresh()+0x25e>
c0019288:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001928e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019293:	31 c9                	xor    ecx,ecx
c0019295:	c1 e0 10             	shl    eax,0x10
c0019298:	89 cf                	mov    edi,ecx
c001929a:	c1 e5 10             	shl    ebp,0x10
c001929d:	31 d2                	xor    edx,edx
c001929f:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c00192a5:	09 c7                	or     edi,eax
c00192a7:	89 f0                	mov    eax,esi
c00192a9:	89 f9                	mov    ecx,edi
c00192ab:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00192af:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00192b3:	88 c2                	mov    dl,al
c00192b5:	88 d9                	mov    cl,bl
c00192b7:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00192bb:	0f b7 c2             	movzx  eax,dx
c00192be:	09 e8                	or     eax,ebp
c00192c0:	89 c2                	mov    edx,eax
c00192c2:	50                   	push   eax
c00192c3:	50                   	push   eax
c00192c4:	51                   	push   ecx
c00192c5:	52                   	push   edx
c00192c6:	e8 68 f9 fe ff       	call   c0008c33 <datetimeToSeconds(datetime_t)>
c00192cb:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00192cf:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00192d5:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00192db:	83 c4 4c             	add    esp,0x4c
c00192de:	5b                   	pop    ebx
c00192df:	5e                   	pop    esi
c00192e0:	5f                   	pop    edi
c00192e1:	5d                   	pop    ebp
c00192e2:	c3                   	ret    
c00192e3:	90                   	nop

c00192e4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00192e4:	55                   	push   ebp
c00192e5:	57                   	push   edi
c00192e6:	56                   	push   esi
c00192e7:	53                   	push   ebx
c00192e8:	83 ec 34             	sub    esp,0x34
c00192eb:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00192ef:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00192f3:	6a 00                	push   0x0
c00192f5:	89 fb                	mov    ebx,edi
c00192f7:	6a 00                	push   0x0
c00192f9:	e8 fd d8 ff ff       	call   c0016bfb <x86WriteCMOS(unsigned char, unsigned char)>
c00192fe:	5d                   	pop    ebp
c00192ff:	58                   	pop    eax
c0019300:	6a 00                	push   0x0
c0019302:	6a 02                	push   0x2
c0019304:	e8 f2 d8 ff ff       	call   c0016bfb <x86WriteCMOS(unsigned char, unsigned char)>
c0019309:	31 d2                	xor    edx,edx
c001930b:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0019312:	89 f9                	mov    ecx,edi
c0019314:	89 f8                	mov    eax,edi
c0019316:	c1 e9 10             	shr    ecx,0x10
c0019319:	0f b6 c4             	movzx  eax,ah
c001931c:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0019320:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019324:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019328:	b9 64 00 00 00       	mov    ecx,0x64
c001932d:	89 f0                	mov    eax,esi
c001932f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019333:	89 f0                	mov    eax,esi
c0019335:	0f b6 c4             	movzx  eax,ah
c0019338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001933c:	89 f0                	mov    eax,esi
c001933e:	c1 e8 10             	shr    eax,0x10
c0019341:	f7 f1                	div    ecx
c0019343:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019347:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001934b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001934f:	e8 53 d8 ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c0019354:	83 c4 10             	add    esp,0x10
c0019357:	89 c5                	mov    ebp,eax
c0019359:	a8 04                	test   al,0x4
c001935b:	75 6e                	jne    c00193cb <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001935d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019361:	31 d2                	xor    edx,edx
c0019363:	0f b6 c1             	movzx  eax,cl
c0019366:	b9 0a 00 00 00       	mov    ecx,0xa
c001936b:	f7 f1                	div    ecx
c001936d:	c1 e0 04             	shl    eax,0x4
c0019370:	09 d0                	or     eax,edx
c0019372:	31 d2                	xor    edx,edx
c0019374:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019378:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001937d:	f7 f1                	div    ecx
c001937f:	c1 e0 04             	shl    eax,0x4
c0019382:	09 d0                	or     eax,edx
c0019384:	31 d2                	xor    edx,edx
c0019386:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001938a:	0f b6 c3             	movzx  eax,bl
c001938d:	f7 f1                	div    ecx
c001938f:	c1 e0 04             	shl    eax,0x4
c0019392:	09 d0                	or     eax,edx
c0019394:	31 d2                	xor    edx,edx
c0019396:	89 c3                	mov    ebx,eax
c0019398:	89 f0                	mov    eax,esi
c001939a:	0f b6 c0             	movzx  eax,al
c001939d:	f7 f1                	div    ecx
c001939f:	c1 e0 04             	shl    eax,0x4
c00193a2:	09 d0                	or     eax,edx
c00193a4:	31 d2                	xor    edx,edx
c00193a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00193aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00193af:	f7 f1                	div    ecx
c00193b1:	c1 e0 04             	shl    eax,0x4
c00193b4:	09 d0                	or     eax,edx
c00193b6:	31 d2                	xor    edx,edx
c00193b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00193c0:	f7 f1                	div    ecx
c00193c2:	c1 e0 04             	shl    eax,0x4
c00193c5:	09 d0                	or     eax,edx
c00193c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00193cb:	83 e5 02             	and    ebp,0x2
c00193ce:	75 1e                	jne    c00193ee <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00193d0:	0f b6 c3             	movzx  eax,bl
c00193d3:	83 f8 0b             	cmp    eax,0xb
c00193d6:	76 10                	jbe    c00193e8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c00193d8:	8d 53 f4             	lea    edx,[ebx-0xc]
c00193db:	88 d3                	mov    bl,dl
c00193dd:	84 d2                	test   dl,dl
c00193df:	75 02                	jne    c00193e3 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c00193e1:	b3 0c                	mov    bl,0xc
c00193e3:	83 cb 80             	or     ebx,0xffffff80
c00193e6:	eb 06                	jmp    c00193ee <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00193e8:	85 c0                	test   eax,eax
c00193ea:	75 02                	jne    c00193ee <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00193ec:	b3 0c                	mov    bl,0xc
c00193ee:	0f b6 db             	movzx  ebx,bl
c00193f1:	50                   	push   eax
c00193f2:	50                   	push   eax
c00193f3:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00193f8:	52                   	push   edx
c00193f9:	6a 00                	push   0x0
c00193fb:	e8 fb d7 ff ff       	call   c0016bfb <x86WriteCMOS(unsigned char, unsigned char)>
c0019400:	5a                   	pop    edx
c0019401:	59                   	pop    ecx
c0019402:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019407:	50                   	push   eax
c0019408:	6a 02                	push   0x2
c001940a:	e8 ec d7 ff ff       	call   c0016bfb <x86WriteCMOS(unsigned char, unsigned char)>
c001940f:	5e                   	pop    esi
c0019410:	5f                   	pop    edi
c0019411:	53                   	push   ebx
c0019412:	6a 04                	push   0x4
c0019414:	e8 e2 d7 ff ff       	call   c0016bfb <x86WriteCMOS(unsigned char, unsigned char)>
c0019419:	5d                   	pop    ebp
c001941a:	58                   	pop    eax
c001941b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0019420:	52                   	push   edx
c0019421:	6a 07                	push   0x7
c0019423:	e8 d3 d7 ff ff       	call   c0016bfb <x86WriteCMOS(unsigned char, unsigned char)>
c0019428:	58                   	pop    eax
c0019429:	5a                   	pop    edx
c001942a:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001942f:	50                   	push   eax
c0019430:	6a 08                	push   0x8
c0019432:	e8 c4 d7 ff ff       	call   c0016bfb <x86WriteCMOS(unsigned char, unsigned char)>
c0019437:	59                   	pop    ecx
c0019438:	5b                   	pop    ebx
c0019439:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001943e:	55                   	push   ebp
c001943f:	6a 09                	push   0x9
c0019441:	e8 b5 d7 ff ff       	call   c0016bfb <x86WriteCMOS(unsigned char, unsigned char)>
c0019446:	5e                   	pop    esi
c0019447:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001944b:	e8 e0 fb ff ff       	call   c0019030 <RTC::completeRTCRefresh()>
c0019450:	83 c4 3c             	add    esp,0x3c
c0019453:	b0 01                	mov    al,0x1
c0019455:	5b                   	pop    ebx
c0019456:	5e                   	pop    esi
c0019457:	5f                   	pop    edi
c0019458:	5d                   	pop    ebp
c0019459:	c3                   	ret    

c001945a <rtcIRQHandler(regs*, void*)>:
c001945a:	53                   	push   ebx
c001945b:	83 ec 14             	sub    esp,0x14
c001945e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019462:	6a 0c                	push   0xc
c0019464:	e8 3e d7 ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c0019469:	83 c4 10             	add    esp,0x10
c001946c:	a8 80                	test   al,0x80
c001946e:	74 24                	je     c0019494 <rtcIRQHandler(regs*, void*)+0x3a>
c0019470:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0019477:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001947e:	66 ff 05 94 c7 02 c0 	inc    WORD PTR ds:0xc002c794
c0019485:	75 0d                	jne    c0019494 <rtcIRQHandler(regs*, void*)+0x3a>
c0019487:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001948b:	83 c4 08             	add    esp,0x8
c001948e:	5b                   	pop    ebx
c001948f:	e9 9c fb ff ff       	jmp    c0019030 <RTC::completeRTCRefresh()>
c0019494:	83 c4 08             	add    esp,0x8
c0019497:	5b                   	pop    ebx
c0019498:	c3                   	ret    
c0019499:	90                   	nop

c001949a <RTC::RTC()>:
c001949a:	83 ec 1c             	sub    esp,0x1c
c001949d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194a1:	83 ec 08             	sub    esp,0x8
c00194a4:	68 57 31 02 c0       	push   0xc0023157
c00194a9:	50                   	push   eax
c00194aa:	e8 5f f6 fe ff       	call   c0008b0e <Clock::Clock(char const*)>
c00194af:	83 c4 10             	add    esp,0x10
c00194b2:	ba 74 31 02 c0       	mov    edx,0xc0023174
c00194b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194bb:	89 10                	mov    DWORD PTR [eax],edx
c00194bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194c1:	83 ec 0c             	sub    esp,0xc
c00194c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194c8:	6a 01                	push   0x1
c00194ca:	68 5a 94 01 c0       	push   0xc001945a
c00194cf:	6a 08                	push   0x8
c00194d1:	50                   	push   eax
c00194d2:	e8 13 fb fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00194d7:	83 c4 20             	add    esp,0x20
c00194da:	89 c2                	mov    edx,eax
c00194dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194e0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00194e6:	fa                   	cli    
c00194e7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00194ec:	83 c0 01             	add    eax,0x1
c00194ef:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00194f4:	83 ec 0c             	sub    esp,0xc
c00194f7:	6a 0b                	push   0xb
c00194f9:	e8 a9 d6 ff ff       	call   c0016ba7 <x86ReadCMOS(unsigned char)>
c00194fe:	83 c4 10             	add    esp,0x10
c0019501:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019505:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019509:	83 c8 10             	or     eax,0x10
c001950c:	0f b6 c0             	movzx  eax,al
c001950f:	83 ec 08             	sub    esp,0x8
c0019512:	50                   	push   eax
c0019513:	6a 0b                	push   0xb
c0019515:	e8 e1 d6 ff ff       	call   c0016bfb <x86WriteCMOS(unsigned char, unsigned char)>
c001951a:	83 c4 10             	add    esp,0x10
c001951d:	83 ec 0c             	sub    esp,0xc
c0019520:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019524:	e8 07 fb ff ff       	call   c0019030 <RTC::completeRTCRefresh()>
c0019529:	83 c4 10             	add    esp,0x10
c001952c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0019531:	83 e8 01             	sub    eax,0x1
c0019534:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0019539:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001953e:	85 c0                	test   eax,eax
c0019540:	75 01                	jne    c0019543 <RTC::RTC()+0xa9>
c0019542:	fb                   	sti    
c0019543:	90                   	nop
c0019544:	83 c4 1c             	add    esp,0x1c
c0019547:	c3                   	ret    

c0019548 <HalConsoleScroll(int, int)>:
c0019548:	83 ec 10             	sub    esp,0x10
c001954b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0019553:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001955b:	90                   	nop
c001955c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019561:	0f 8f e1 00 00 00    	jg     c0019648 <HalConsoleScroll(int, int)+0x100>
c0019567:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001956f:	90                   	nop
c0019570:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019578:	0f 8f be 00 00 00    	jg     c001963c <HalConsoleScroll(int, int)+0xf4>
c001957e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019582:	89 d0                	mov    eax,edx
c0019584:	c1 e0 02             	shl    eax,0x2
c0019587:	01 d0                	add    eax,edx
c0019589:	c1 e0 05             	shl    eax,0x5
c001958c:	89 c2                	mov    edx,eax
c001958e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019592:	01 d0                	add    eax,edx
c0019594:	89 c2                	mov    edx,eax
c0019596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001959a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001959d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00195a1:	89 d0                	mov    eax,edx
c00195a3:	c1 e0 02             	shl    eax,0x2
c00195a6:	01 d0                	add    eax,edx
c00195a8:	c1 e0 05             	shl    eax,0x5
c00195ab:	89 c2                	mov    edx,eax
c00195ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195b1:	01 d0                	add    eax,edx
c00195b3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00195b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195bd:	01 c2                	add    edx,eax
c00195bf:	8a 01                	mov    al,BYTE PTR [ecx]
c00195c1:	88 02                	mov    BYTE PTR [edx],al
c00195c3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00195c8:	75 66                	jne    c0019630 <HalConsoleScroll(int, int)+0xe8>
c00195ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195ce:	83 e0 01             	and    eax,0x1
c00195d1:	74 39                	je     c001960c <HalConsoleScroll(int, int)+0xc4>
c00195d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195d7:	83 e0 0f             	and    eax,0xf
c00195da:	88 c2                	mov    dl,al
c00195dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195e0:	c1 e0 04             	shl    eax,0x4
c00195e3:	09 d0                	or     eax,edx
c00195e5:	88 c1                	mov    cl,al
c00195e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00195eb:	89 d0                	mov    eax,edx
c00195ed:	c1 e0 02             	shl    eax,0x2
c00195f0:	01 d0                	add    eax,edx
c00195f2:	c1 e0 05             	shl    eax,0x5
c00195f5:	89 c2                	mov    edx,eax
c00195f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195fb:	01 d0                	add    eax,edx
c00195fd:	89 c2                	mov    edx,eax
c00195ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019603:	01 d0                	add    eax,edx
c0019605:	88 ca                	mov    dl,cl
c0019607:	88 10                	mov    BYTE PTR [eax],dl
c0019609:	eb 25                	jmp    c0019630 <HalConsoleScroll(int, int)+0xe8>
c001960b:	90                   	nop
c001960c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019610:	89 d0                	mov    eax,edx
c0019612:	c1 e0 02             	shl    eax,0x2
c0019615:	01 d0                	add    eax,edx
c0019617:	c1 e0 05             	shl    eax,0x5
c001961a:	89 c2                	mov    edx,eax
c001961c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019620:	01 d0                	add    eax,edx
c0019622:	89 c2                	mov    edx,eax
c0019624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019628:	01 d0                	add    eax,edx
c001962a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001962d:	8d 76 00             	lea    esi,[esi+0x0]
c0019630:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0019635:	e9 36 ff ff ff       	jmp    c0019570 <HalConsoleScroll(int, int)+0x28>
c001963a:	66 90                	xchg   ax,ax
c001963c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019641:	e9 16 ff ff ff       	jmp    c001955c <HalConsoleScroll(int, int)+0x14>
c0019646:	66 90                	xchg   ax,ax
c0019648:	90                   	nop
c0019649:	83 c4 10             	add    esp,0x10
c001964c:	c3                   	ret    
c001964d:	8d 76 00             	lea    esi,[esi+0x0]

c0019650 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0019650:	83 ec 14             	sub    esp,0x14
c0019653:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019657:	88 04 24             	mov    BYTE PTR [esp],al
c001965a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001965d:	0f b6 c0             	movzx  eax,al
c0019660:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019664:	89 d1                	mov    ecx,edx
c0019666:	83 e1 0f             	and    ecx,0xf
c0019669:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001966d:	c1 e2 04             	shl    edx,0x4
c0019670:	0f b6 d2             	movzx  edx,dl
c0019673:	09 ca                	or     edx,ecx
c0019675:	c1 e2 08             	shl    edx,0x8
c0019678:	09 d0                	or     eax,edx
c001967a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001967f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0019687:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001968b:	89 d0                	mov    eax,edx
c001968d:	c1 e0 02             	shl    eax,0x2
c0019690:	01 d0                	add    eax,edx
c0019692:	c1 e0 04             	shl    eax,0x4
c0019695:	89 c2                	mov    edx,eax
c0019697:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001969b:	01 d0                	add    eax,edx
c001969d:	01 c0                	add    eax,eax
c001969f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00196a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00196a7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00196ac:	66 89 02             	mov    WORD PTR [edx],ax
c00196af:	90                   	nop
c00196b0:	83 c4 14             	add    esp,0x14
c00196b3:	c3                   	ret    

c00196b4 <HalConsoleCursorUpdate(int, int)>:
c00196b4:	83 ec 20             	sub    esp,0x20
c00196b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196bb:	89 c2                	mov    edx,eax
c00196bd:	c1 e2 02             	shl    edx,0x2
c00196c0:	01 d0                	add    eax,edx
c00196c2:	c1 e0 04             	shl    eax,0x4
c00196c5:	89 c2                	mov    edx,eax
c00196c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00196cb:	01 d0                	add    eax,edx
c00196cd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00196d2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00196d9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00196de:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00196e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196e6:	ee                   	out    dx,al
c00196e7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00196ec:	0f b6 c0             	movzx  eax,al
c00196ef:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00196f6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00196fa:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00196fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019702:	ee                   	out    dx,al
c0019703:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001970a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001970f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0019713:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019717:	ee                   	out    dx,al
c0019718:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001971d:	c1 e8 08             	shr    eax,0x8
c0019720:	0f b6 c0             	movzx  eax,al
c0019723:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001972a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001972e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019732:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019736:	ee                   	out    dx,al
c0019737:	90                   	nop
c0019738:	83 c4 20             	add    esp,0x20
c001973b:	c3                   	ret    

c001973c <FAT::getName()>:
c001973c:	b8 a8 31 02 c0       	mov    eax,0xc00231a8
c0019741:	c3                   	ret    
c0019742:	66 90                	xchg   ax,ax

c0019744 <FAT::tell(void*, unsigned long long*)>:
c0019744:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019749:	75 09                	jne    c0019754 <FAT::tell(void*, unsigned long long*)+0x10>
c001974b:	b8 04 00 00 00       	mov    eax,0x4
c0019750:	c3                   	ret    
c0019751:	8d 76 00             	lea    esi,[esi+0x0]
c0019754:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019759:	75 09                	jne    c0019764 <FAT::tell(void*, unsigned long long*)+0x20>
c001975b:	b8 04 00 00 00       	mov    eax,0x4
c0019760:	c3                   	ret    
c0019761:	8d 76 00             	lea    esi,[esi+0x0]
c0019764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019768:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001976b:	ba 00 00 00 00       	mov    edx,0x0
c0019770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019774:	89 01                	mov    DWORD PTR [ecx],eax
c0019776:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019779:	b8 00 00 00 00       	mov    eax,0x0
c001977e:	c3                   	ret    
c001977f:	90                   	nop

c0019780 <FAT::stat(void*, unsigned long long*)>:
c0019780:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019785:	75 09                	jne    c0019790 <FAT::stat(void*, unsigned long long*)+0x10>
c0019787:	b8 04 00 00 00       	mov    eax,0x4
c001978c:	c3                   	ret    
c001978d:	8d 76 00             	lea    esi,[esi+0x0]
c0019790:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019795:	75 09                	jne    c00197a0 <FAT::stat(void*, unsigned long long*)+0x20>
c0019797:	b8 04 00 00 00       	mov    eax,0x4
c001979c:	c3                   	ret    
c001979d:	8d 76 00             	lea    esi,[esi+0x0]
c00197a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00197a7:	ba 00 00 00 00       	mov    edx,0x0
c00197ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197b0:	89 01                	mov    DWORD PTR [ecx],eax
c00197b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00197b5:	b8 00 00 00 00       	mov    eax,0x0
c00197ba:	c3                   	ret    
c00197bb:	90                   	nop

c00197bc <FAT::~FAT()>:
c00197bc:	83 ec 0c             	sub    esp,0xc
c00197bf:	ba f4 31 02 c0       	mov    edx,0xc00231f4
c00197c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00197c8:	89 10                	mov    DWORD PTR [eax],edx
c00197ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00197ce:	83 ec 0c             	sub    esp,0xc
c00197d1:	50                   	push   eax
c00197d2:	e8 bd e5 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c00197d7:	83 c4 10             	add    esp,0x10
c00197da:	90                   	nop
c00197db:	83 c4 0c             	add    esp,0xc
c00197de:	c3                   	ret    
c00197df:	90                   	nop

c00197e0 <FAT::~FAT()>:
c00197e0:	83 ec 0c             	sub    esp,0xc
c00197e3:	83 ec 0c             	sub    esp,0xc
c00197e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197ea:	e8 cd ff ff ff       	call   c00197bc <FAT::~FAT()>
c00197ef:	83 c4 10             	add    esp,0x10
c00197f2:	83 ec 08             	sub    esp,0x8
c00197f5:	6a 08                	push   0x8
c00197f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197fb:	e8 08 2f ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0019800:	83 c4 10             	add    esp,0x10
c0019803:	83 c4 0c             	add    esp,0xc
c0019806:	c3                   	ret    
c0019807:	90                   	nop

c0019808 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019808:	83 ec 1c             	sub    esp,0x1c
c001980b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019812:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019817:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001981b:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019822:	83 f8 ff             	cmp    eax,0xffffffff
c0019825:	75 35                	jne    c001985c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019827:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001982b:	88 c2                	mov    dl,al
c001982d:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019832:	01 d0                	add    eax,edx
c0019834:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019838:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c001983e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019842:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019849:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c001984e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019852:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019859:	eb 19                	jmp    c0019874 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001985b:	90                   	nop
c001985c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019860:	88 c2                	mov    dl,al
c0019862:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019866:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001986d:	01 d0                	add    eax,edx
c001986f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019873:	90                   	nop
c0019874:	83 ec 04             	sub    esp,0x4
c0019877:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001987b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001987f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019883:	50                   	push   eax
c0019884:	e8 2f b9 fe ff       	call   c00051b8 <f_getlabel>
c0019889:	83 c4 10             	add    esp,0x10
c001988c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019890:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019895:	75 09                	jne    c00198a0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019897:	b8 00 00 00 00       	mov    eax,0x0
c001989c:	eb 0a                	jmp    c00198a8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001989e:	66 90                	xchg   ax,ax
c00198a0:	b8 01 00 00 00       	mov    eax,0x1
c00198a5:	8d 76 00             	lea    esi,[esi+0x0]
c00198a8:	83 c4 1c             	add    esp,0x1c
c00198ab:	c3                   	ret    

c00198ac <FAT::setlabel(LogicalDisk*, int, char*)>:
c00198ac:	57                   	push   edi
c00198ad:	83 ec 58             	sub    esp,0x58
c00198b0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00198b8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00198bc:	b8 00 00 00 00       	mov    eax,0x0
c00198c1:	b9 0f 00 00 00       	mov    ecx,0xf
c00198c6:	fc                   	cld    
c00198c7:	89 d7                	mov    edi,edx
c00198c9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00198cb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00198cf:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00198d6:	83 f8 ff             	cmp    eax,0xffffffff
c00198d9:	75 35                	jne    c0019910 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00198db:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00198df:	88 c2                	mov    dl,al
c00198e1:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00198e6:	01 d0                	add    eax,edx
c00198e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00198ec:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c00198f2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00198f6:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c00198fd:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019902:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019906:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c001990d:	eb 19                	jmp    c0019928 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001990f:	90                   	nop
c0019910:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019914:	88 c2                	mov    dl,al
c0019916:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001991a:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019921:	01 d0                	add    eax,edx
c0019923:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019927:	90                   	nop
c0019928:	83 ec 08             	sub    esp,0x8
c001992b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001992f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019933:	50                   	push   eax
c0019934:	e8 07 6f fe ff       	call   c0000840 <strcat>
c0019939:	83 c4 10             	add    esp,0x10
c001993c:	83 ec 0c             	sub    esp,0xc
c001993f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019943:	50                   	push   eax
c0019944:	e8 c0 b9 fe ff       	call   c0005309 <f_setlabel>
c0019949:	83 c4 10             	add    esp,0x10
c001994c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019950:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019955:	75 09                	jne    c0019960 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019957:	b8 00 00 00 00       	mov    eax,0x0
c001995c:	eb 0a                	jmp    c0019968 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001995e:	66 90                	xchg   ax,ax
c0019960:	b8 01 00 00 00       	mov    eax,0x1
c0019965:	8d 76 00             	lea    esi,[esi+0x0]
c0019968:	83 c4 58             	add    esp,0x58
c001996b:	5f                   	pop    edi
c001996c:	c3                   	ret    
c001996d:	90                   	nop
c001996e:	66 90                	xchg   ax,ax

c0019970 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019970:	83 ec 2c             	sub    esp,0x2c
c0019973:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001997b:	83 ec 08             	sub    esp,0x8
c001997e:	68 cc 31 02 c0       	push   0xc00231cc
c0019983:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019987:	e8 c4 6d fe ff       	call   c0000750 <strcmp>
c001998c:	83 c4 10             	add    esp,0x10
c001998f:	85 c0                	test   eax,eax
c0019991:	0f 94 c0             	sete   al
c0019994:	0f b6 c0             	movzx  eax,al
c0019997:	85 c0                	test   eax,eax
c0019999:	74 0d                	je     c00199a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001999b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00199a3:	e9 c0 00 00 00       	jmp    c0019a68 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00199a8:	83 ec 08             	sub    esp,0x8
c00199ab:	68 be 31 02 c0       	push   0xc00231be
c00199b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00199b4:	e8 97 6d fe ff       	call   c0000750 <strcmp>
c00199b9:	83 c4 10             	add    esp,0x10
c00199bc:	85 c0                	test   eax,eax
c00199be:	0f 94 c0             	sete   al
c00199c1:	0f b6 c0             	movzx  eax,al
c00199c4:	85 c0                	test   eax,eax
c00199c6:	74 10                	je     c00199d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00199c8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00199d0:	e9 93 00 00 00       	jmp    c0019a68 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00199d5:	8d 76 00             	lea    esi,[esi+0x0]
c00199d8:	83 ec 08             	sub    esp,0x8
c00199db:	68 c4 31 02 c0       	push   0xc00231c4
c00199e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00199e4:	e8 67 6d fe ff       	call   c0000750 <strcmp>
c00199e9:	83 c4 10             	add    esp,0x10
c00199ec:	85 c0                	test   eax,eax
c00199ee:	0f 94 c0             	sete   al
c00199f1:	0f b6 c0             	movzx  eax,al
c00199f4:	85 c0                	test   eax,eax
c00199f6:	74 0c                	je     c0019a04 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00199f8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019a00:	eb 66                	jmp    c0019a68 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019a02:	66 90                	xchg   ax,ax
c0019a04:	83 ec 08             	sub    esp,0x8
c0019a07:	68 3c 09 02 c0       	push   0xc002093c
c0019a0c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019a10:	e8 3b 6d fe ff       	call   c0000750 <strcmp>
c0019a15:	83 c4 10             	add    esp,0x10
c0019a18:	85 c0                	test   eax,eax
c0019a1a:	0f 94 c0             	sete   al
c0019a1d:	0f b6 c0             	movzx  eax,al
c0019a20:	85 c0                	test   eax,eax
c0019a22:	74 0c                	je     c0019a30 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019a24:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019a2c:	eb 3a                	jmp    c0019a68 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019a2e:	66 90                	xchg   ax,ax
c0019a30:	83 ec 08             	sub    esp,0x8
c0019a33:	68 ca 31 02 c0       	push   0xc00231ca
c0019a38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019a3c:	e8 0f 6d fe ff       	call   c0000750 <strcmp>
c0019a41:	83 c4 10             	add    esp,0x10
c0019a44:	85 c0                	test   eax,eax
c0019a46:	0f 94 c0             	sete   al
c0019a49:	0f b6 c0             	movzx  eax,al
c0019a4c:	85 c0                	test   eax,eax
c0019a4e:	74 0c                	je     c0019a5c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019a50:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019a58:	eb 0e                	jmp    c0019a68 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019a5a:	66 90                	xchg   ax,ax
c0019a5c:	b8 08 00 00 00       	mov    eax,0x8
c0019a61:	e9 ea 00 00 00       	jmp    c0019b50 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019a66:	66 90                	xchg   ax,ax
c0019a68:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019a6f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019a74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a78:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019a7f:	83 f8 ff             	cmp    eax,0xffffffff
c0019a82:	75 34                	jne    c0019ab8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019a84:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019a88:	88 c2                	mov    dl,al
c0019a8a:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019a8f:	01 d0                	add    eax,edx
c0019a91:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019a95:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019a9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a9f:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019aa6:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019aab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019aaf:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019ab6:	eb 18                	jmp    c0019ad0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019ab8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019abc:	88 c2                	mov    dl,al
c0019abe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ac2:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019ac9:	01 d0                	add    eax,edx
c0019acb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019acf:	90                   	nop
c0019ad0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ad4:	88 04 24             	mov    BYTE PTR [esp],al
c0019ad7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019adb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019adf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019ae7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019aec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019af4:	83 ec 0c             	sub    esp,0xc
c0019af7:	68 00 20 00 00       	push   0x2000
c0019afc:	e8 90 4e ff ff       	call   c000e991 <malloc>
c0019b01:	83 c4 10             	add    esp,0x10
c0019b04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b08:	68 00 20 00 00       	push   0x2000
c0019b0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b11:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019b15:	50                   	push   eax
c0019b16:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019b1a:	50                   	push   eax
c0019b1b:	e8 e6 ba fe ff       	call   c0005606 <f_mkfs>
c0019b20:	83 c4 10             	add    esp,0x10
c0019b23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b27:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b2c:	75 0a                	jne    c0019b38 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019b2e:	b8 00 00 00 00       	mov    eax,0x0
c0019b33:	eb 1b                	jmp    c0019b50 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019b35:	8d 76 00             	lea    esi,[esi+0x0]
c0019b38:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019b3d:	75 09                	jne    c0019b48 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019b3f:	b8 09 00 00 00       	mov    eax,0x9
c0019b44:	eb 0a                	jmp    c0019b50 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019b46:	66 90                	xchg   ax,ax
c0019b48:	b8 01 00 00 00       	mov    eax,0x1
c0019b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b50:	83 c4 2c             	add    esp,0x2c
c0019b53:	c3                   	ret    

c0019b54 <FAT::tryMount(LogicalDisk*, int)>:
c0019b54:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019b5a:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019b5f:	83 f8 14             	cmp    eax,0x14
c0019b62:	75 18                	jne    c0019b7c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019b64:	83 ec 0c             	sub    esp,0xc
c0019b67:	68 d0 31 02 c0       	push   0xc00231d0
c0019b6c:	e8 75 51 ff ff       	call   c000ece6 <KePanic(char const*)>
c0019b71:	83 c4 10             	add    esp,0x10
c0019b74:	b0 00                	mov    al,0x0
c0019b76:	e9 ed 01 00 00       	jmp    c0019d68 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b7b:	90                   	nop
c0019b7c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019b83:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b8f:	3d 00 02 00 00       	cmp    eax,0x200
c0019b94:	74 0a                	je     c0019ba0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019b96:	b0 00                	mov    al,0x0
c0019b98:	e9 cb 01 00 00       	jmp    c0019d68 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019ba8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019baf:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019bb6:	83 f8 ff             	cmp    eax,0xffffffff
c0019bb9:	74 09                	je     c0019bc4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019bbb:	b0 01                	mov    al,0x1
c0019bbd:	e9 a6 01 00 00       	jmp    c0019d68 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019bc2:	66 90                	xchg   ax,ax
c0019bc4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019bce:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019bd6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019bdd:	88 c2                	mov    dl,al
c0019bdf:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019be4:	01 d0                	add    eax,edx
c0019be6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019bed:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019bf3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019bfa:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019c01:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019c06:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019c0d:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019c14:	83 ec 0c             	sub    esp,0xc
c0019c17:	68 34 02 00 00       	push   0x234
c0019c1c:	e8 70 4d ff ff       	call   c000e991 <malloc>
c0019c21:	83 c4 10             	add    esp,0x10
c0019c24:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019c2b:	83 ec 04             	sub    esp,0x4
c0019c2e:	6a 00                	push   0x0
c0019c30:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019c37:	50                   	push   eax
c0019c38:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019c3f:	e8 9d a1 fe ff       	call   c0003de1 <f_mount>
c0019c44:	83 c4 10             	add    esp,0x10
c0019c47:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019c4e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019c56:	74 1c                	je     c0019c74 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019c58:	83 ec 0c             	sub    esp,0xc
c0019c5b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019c62:	e8 4a 4d ff ff       	call   c000e9b1 <rfree>
c0019c67:	83 c4 10             	add    esp,0x10
c0019c6a:	b0 00                	mov    al,0x0
c0019c6c:	e9 f7 00 00 00       	jmp    c0019d68 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019c71:	8d 76 00             	lea    esi,[esi+0x0]
c0019c74:	83 ec 04             	sub    esp,0x4
c0019c77:	68 00 01 00 00       	push   0x100
c0019c7c:	6a 00                	push   0x0
c0019c7e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019c85:	50                   	push   eax
c0019c86:	e8 65 68 fe ff       	call   c00004f0 <memset>
c0019c8b:	83 c4 10             	add    esp,0x10
c0019c8e:	83 ec 08             	sub    esp,0x8
c0019c91:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019c98:	50                   	push   eax
c0019c99:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019ca0:	50                   	push   eax
c0019ca1:	e8 9a 6b fe ff       	call   c0000840 <strcat>
c0019ca6:	83 c4 10             	add    esp,0x10
c0019ca9:	83 ec 08             	sub    esp,0x8
c0019cac:	68 de 31 02 c0       	push   0xc00231de
c0019cb1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019cb8:	50                   	push   eax
c0019cb9:	e8 82 6b fe ff       	call   c0000840 <strcat>
c0019cbe:	83 c4 10             	add    esp,0x10
c0019cc1:	83 ec 04             	sub    esp,0x4
c0019cc4:	6a 01                	push   0x1
c0019cc6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019ccd:	50                   	push   eax
c0019cce:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cd2:	50                   	push   eax
c0019cd3:	e8 6b a1 fe ff       	call   c0003e43 <f_open>
c0019cd8:	83 c4 10             	add    esp,0x10
c0019cdb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019ce2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019ce9:	85 c0                	test   eax,eax
c0019ceb:	74 0b                	je     c0019cf8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019ced:	78 31                	js     c0019d20 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019cef:	83 e8 04             	sub    eax,0x4
c0019cf2:	83 f8 01             	cmp    eax,0x1
c0019cf5:	77 29                	ja     c0019d20 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019cf7:	90                   	nop
c0019cf8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019d00:	83 ec 0c             	sub    esp,0xc
c0019d03:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d07:	50                   	push   eax
c0019d08:	e8 05 a9 fe ff       	call   c0004612 <f_close>
c0019d0d:	83 c4 10             	add    esp,0x10
c0019d10:	90                   	nop
c0019d11:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019d19:	85 c0                	test   eax,eax
c0019d1b:	74 43                	je     c0019d60 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019d1d:	eb 31                	jmp    c0019d50 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019d1f:	90                   	nop
c0019d20:	83 ec 0c             	sub    esp,0xc
c0019d23:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019d2a:	e8 82 4c ff ff       	call   c000e9b1 <rfree>
c0019d2f:	83 c4 10             	add    esp,0x10
c0019d32:	83 ec 04             	sub    esp,0x4
c0019d35:	6a 00                	push   0x0
c0019d37:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019d3e:	50                   	push   eax
c0019d3f:	6a 00                	push   0x0
c0019d41:	e8 9b a0 fe ff       	call   c0003de1 <f_mount>
c0019d46:	83 c4 10             	add    esp,0x10
c0019d49:	b0 00                	mov    al,0x0
c0019d4b:	eb 1b                	jmp    c0019d68 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d50:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019d55:	83 c0 01             	add    eax,0x1
c0019d58:	a3 a0 c7 02 c0       	mov    ds:0xc002c7a0,eax
c0019d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d60:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019d67:	90                   	nop
c0019d68:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019d6e:	c3                   	ret    
c0019d6f:	90                   	nop

c0019d70 <FAT::allocateSwapfile(char const*, int)>:
c0019d70:	55                   	push   ebp
c0019d71:	57                   	push   edi
c0019d72:	56                   	push   esi
c0019d73:	53                   	push   ebx
c0019d74:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019d7a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019d85:	83 ec 0c             	sub    esp,0xc
c0019d88:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019d8f:	e8 fd 4b ff ff       	call   c000e991 <malloc>
c0019d94:	83 c4 10             	add    esp,0x10
c0019d97:	89 c7                	mov    edi,eax
c0019d99:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0019d9e:	83 ec 04             	sub    esp,0x4
c0019da1:	50                   	push   eax
c0019da2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019da9:	57                   	push   edi
c0019daa:	e8 63 e3 fe ff       	call   c0008112 <File::File(char const*, Process*)>
c0019daf:	83 c4 10             	add    esp,0x10
c0019db2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019db9:	83 ec 04             	sub    esp,0x4
c0019dbc:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019dc0:	50                   	push   eax
c0019dc1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019dc5:	50                   	push   eax
c0019dc6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019dcd:	e8 60 e6 fe ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0019dd2:	83 c4 10             	add    esp,0x10
c0019dd5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019ddc:	c1 e0 14             	shl    eax,0x14
c0019ddf:	89 c7                	mov    edi,eax
c0019de1:	89 c5                	mov    ebp,eax
c0019de3:	c1 fd 1f             	sar    ebp,0x1f
c0019de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019dee:	89 f9                	mov    ecx,edi
c0019df0:	31 c1                	xor    ecx,eax
c0019df2:	89 cb                	mov    ebx,ecx
c0019df4:	89 e9                	mov    ecx,ebp
c0019df6:	31 d1                	xor    ecx,edx
c0019df8:	89 ce                	mov    esi,ecx
c0019dfa:	89 f0                	mov    eax,esi
c0019dfc:	09 d8                	or     eax,ebx
c0019dfe:	0f 84 9c 00 00 00    	je     c0019ea0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019e04:	83 ec 0c             	sub    esp,0xc
c0019e07:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e0e:	e8 eb e4 fe ff       	call   c00082fe <File::unlink()>
c0019e13:	83 c4 10             	add    esp,0x10
c0019e16:	83 ec 08             	sub    esp,0x8
c0019e19:	6a 12                	push   0x12
c0019e1b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e22:	e8 09 e3 fe ff       	call   c0008130 <File::open(FileOpenMode)>
c0019e27:	83 c4 10             	add    esp,0x10
c0019e2a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e31:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019e37:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019e3e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019e45:	c1 e0 14             	shl    eax,0x14
c0019e48:	83 ec 04             	sub    esp,0x4
c0019e4b:	6a 01                	push   0x1
c0019e4d:	50                   	push   eax
c0019e4e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019e55:	e8 3f b6 fe ff       	call   c0005499 <f_expand>
c0019e5a:	83 c4 10             	add    esp,0x10
c0019e5d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e64:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e66:	83 c0 10             	add    eax,0x10
c0019e69:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e6b:	83 ec 0c             	sub    esp,0xc
c0019e6e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019e72:	52                   	push   edx
c0019e73:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019e77:	52                   	push   edx
c0019e78:	6a 00                	push   0x0
c0019e7a:	68 00 04 00 00       	push   0x400
c0019e7f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019e86:	ff d0                	call   eax
c0019e88:	83 c4 20             	add    esp,0x20
c0019e8b:	83 ec 0c             	sub    esp,0xc
c0019e8e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e95:	e8 f4 e2 fe ff       	call   c000818e <File::close()>
c0019e9a:	83 c4 10             	add    esp,0x10
c0019e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ea0:	83 ec 08             	sub    esp,0x8
c0019ea3:	6a 01                	push   0x1
c0019ea5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019eac:	e8 7f e2 fe ff       	call   c0008130 <File::open(FileOpenMode)>
c0019eb1:	83 c4 10             	add    esp,0x10
c0019eb4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019ebb:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ebd:	83 c0 0c             	add    eax,0xc
c0019ec0:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ec2:	83 ec 0c             	sub    esp,0xc
c0019ec5:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019ec9:	52                   	push   edx
c0019eca:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019ece:	52                   	push   edx
c0019ecf:	6a 00                	push   0x0
c0019ed1:	6a 04                	push   0x4
c0019ed3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019eda:	ff d0                	call   eax
c0019edc:	83 c4 20             	add    esp,0x20
c0019edf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019ee6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019eec:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019ef3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019efa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019efd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019f04:	83 ec 0c             	sub    esp,0xc
c0019f07:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019f0e:	e8 7b e2 fe ff       	call   c000818e <File::close()>
c0019f13:	83 c4 10             	add    esp,0x10
c0019f16:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019f1d:	ba 00 00 00 00       	mov    edx,0x0
c0019f22:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019f28:	5b                   	pop    ebx
c0019f29:	5e                   	pop    esi
c0019f2a:	5f                   	pop    edi
c0019f2b:	5d                   	pop    ebp
c0019f2c:	c3                   	ret    
c0019f2d:	90                   	nop
c0019f2e:	66 90                	xchg   ax,ax

c0019f30 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019f30:	57                   	push   edi
c0019f31:	56                   	push   esi
c0019f32:	53                   	push   ebx
c0019f33:	81 ec 50 02 00 00    	sub    esp,0x250
c0019f39:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019f41:	74 0d                	je     c0019f50 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019f43:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019f4b:	75 0f                	jne    c0019f5c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f50:	b8 04 00 00 00       	mov    eax,0x4
c0019f55:	e9 3a 01 00 00       	jmp    c001a094 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019f5a:	66 90                	xchg   ax,ax
c0019f5c:	83 ec 08             	sub    esp,0x8
c0019f5f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019f66:	50                   	push   eax
c0019f67:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019f6e:	e8 6c a9 fe ff       	call   c00048df <f_readdir>
c0019f73:	83 c4 10             	add    esp,0x10
c0019f76:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019f7d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019f84:	83 ec 0c             	sub    esp,0xc
c0019f87:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f8e:	83 c0 16             	add    eax,0x16
c0019f91:	50                   	push   eax
c0019f92:	e8 d9 65 fe ff       	call   c0000570 <strlen>
c0019f97:	83 c4 10             	add    esp,0x10
c0019f9a:	ba 00 00 00 00       	mov    edx,0x0
c0019f9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fa3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019fa7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019fae:	0f b6 c0             	movzx  eax,al
c0019fb1:	83 e0 10             	and    eax,0x10
c0019fb4:	74 0a                	je     c0019fc0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019fb6:	b8 02 00 00 00       	mov    eax,0x2
c0019fbb:	eb 0b                	jmp    c0019fc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc0:	b8 01 00 00 00       	mov    eax,0x1
c0019fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019fcc:	83 ec 08             	sub    esp,0x8
c0019fcf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019fd6:	83 c0 16             	add    eax,0x16
c0019fd9:	50                   	push   eax
c0019fda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fde:	83 c0 10             	add    eax,0x10
c0019fe1:	50                   	push   eax
c0019fe2:	e8 59 66 fe ff       	call   c0000640 <strcpy>
c0019fe7:	83 c4 10             	add    esp,0x10
c0019fea:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019ff1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019ff8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ffc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001a003:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001a00a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001a011:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001a018:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001a01f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001a026:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001a02d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001a034:	89 c6                	mov    esi,eax
c001a036:	89 d7                	mov    edi,edx
c001a038:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a03a:	89 c8                	mov    eax,ecx
c001a03c:	89 fa                	mov    edx,edi
c001a03e:	89 f3                	mov    ebx,esi
c001a040:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001a047:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001a04e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001a055:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001a05c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a062:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001a069:	0f be c0             	movsx  eax,al
c001a06c:	85 c0                	test   eax,eax
c001a06e:	75 08                	jne    c001a078 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001a070:	b8 07 00 00 00       	mov    eax,0x7
c001a075:	eb 1d                	jmp    c001a094 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a077:	90                   	nop
c001a078:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001a07f:	85 c0                	test   eax,eax
c001a081:	75 09                	jne    c001a08c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001a083:	b8 00 00 00 00       	mov    eax,0x0
c001a088:	eb 0a                	jmp    c001a094 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a08a:	66 90                	xchg   ax,ax
c001a08c:	b8 01 00 00 00       	mov    eax,0x1
c001a091:	8d 76 00             	lea    esi,[esi+0x0]
c001a094:	81 c4 50 02 00 00    	add    esp,0x250
c001a09a:	5b                   	pop    ebx
c001a09b:	5e                   	pop    esi
c001a09c:	5f                   	pop    edi
c001a09d:	c3                   	ret    
c001a09e:	66 90                	xchg   ax,ax

c001a0a0 <FAT::read(void*, unsigned long, void*, int*)>:
c001a0a0:	83 ec 1c             	sub    esp,0x1c
c001a0a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a0a8:	74 0a                	je     c001a0b4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001a0aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a0af:	75 0b                	jne    c001a0bc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001a0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b4:	b8 04 00 00 00       	mov    eax,0x4
c001a0b9:	eb 41                	jmp    c001a0fc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a0bb:	90                   	nop
c001a0bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a0c0:	50                   	push   eax
c001a0c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a0c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0cd:	e8 34 a0 fe ff       	call   c0004106 <f_read>
c001a0d2:	83 c4 10             	add    esp,0x10
c001a0d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0dd:	89 c2                	mov    edx,eax
c001a0df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a0e3:	89 10                	mov    DWORD PTR [eax],edx
c001a0e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0e9:	85 c0                	test   eax,eax
c001a0eb:	75 07                	jne    c001a0f4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001a0ed:	b8 00 00 00 00       	mov    eax,0x0
c001a0f2:	eb 08                	jmp    c001a0fc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a0f4:	b8 01 00 00 00       	mov    eax,0x1
c001a0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0fc:	83 c4 1c             	add    esp,0x1c
c001a0ff:	c3                   	ret    

c001a100 <FAT::write(void*, unsigned long, void*, int*)>:
c001a100:	83 ec 1c             	sub    esp,0x1c
c001a103:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a108:	74 0a                	je     c001a114 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a10a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a10f:	75 0b                	jne    c001a11c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a111:	8d 76 00             	lea    esi,[esi+0x0]
c001a114:	b8 04 00 00 00       	mov    eax,0x4
c001a119:	eb 41                	jmp    c001a15c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a11b:	90                   	nop
c001a11c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a120:	50                   	push   eax
c001a121:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a125:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a129:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a12d:	e8 d3 a1 fe ff       	call   c0004305 <f_write>
c001a132:	83 c4 10             	add    esp,0x10
c001a135:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a139:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a13d:	89 c2                	mov    edx,eax
c001a13f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a143:	89 10                	mov    DWORD PTR [eax],edx
c001a145:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a149:	85 c0                	test   eax,eax
c001a14b:	75 07                	jne    c001a154 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a14d:	b8 00 00 00 00       	mov    eax,0x0
c001a152:	eb 08                	jmp    c001a15c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a154:	b8 01 00 00 00       	mov    eax,0x1
c001a159:	8d 76 00             	lea    esi,[esi+0x0]
c001a15c:	83 c4 1c             	add    esp,0x1c
c001a15f:	c3                   	ret    

c001a160 <FAT::close(void*)>:
c001a160:	83 ec 1c             	sub    esp,0x1c
c001a163:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a168:	75 0a                	jne    c001a174 <FAT::close(void*)+0x14>
c001a16a:	b8 04 00 00 00       	mov    eax,0x4
c001a16f:	eb 3f                	jmp    c001a1b0 <FAT::close(void*)+0x50>
c001a171:	8d 76 00             	lea    esi,[esi+0x0]
c001a174:	83 ec 0c             	sub    esp,0xc
c001a177:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a17b:	e8 92 a4 fe ff       	call   c0004612 <f_close>
c001a180:	83 c4 10             	add    esp,0x10
c001a183:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a187:	83 ec 0c             	sub    esp,0xc
c001a18a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a18e:	e8 0e 48 ff ff       	call   c000e9a1 <free>
c001a193:	83 c4 10             	add    esp,0x10
c001a196:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a19a:	85 c0                	test   eax,eax
c001a19c:	75 0a                	jne    c001a1a8 <FAT::close(void*)+0x48>
c001a19e:	b8 00 00 00 00       	mov    eax,0x0
c001a1a3:	eb 0b                	jmp    c001a1b0 <FAT::close(void*)+0x50>
c001a1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1a8:	b8 01 00 00 00       	mov    eax,0x1
c001a1ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a1b0:	83 c4 1c             	add    esp,0x1c
c001a1b3:	c3                   	ret    

c001a1b4 <FAT::closeDir(void*)>:
c001a1b4:	83 ec 1c             	sub    esp,0x1c
c001a1b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a1bc:	75 0a                	jne    c001a1c8 <FAT::closeDir(void*)+0x14>
c001a1be:	b8 04 00 00 00       	mov    eax,0x4
c001a1c3:	eb 3f                	jmp    c001a204 <FAT::closeDir(void*)+0x50>
c001a1c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1c8:	83 ec 0c             	sub    esp,0xc
c001a1cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1cf:	e8 e9 a6 fe ff       	call   c00048bd <f_closedir>
c001a1d4:	83 c4 10             	add    esp,0x10
c001a1d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1db:	83 ec 0c             	sub    esp,0xc
c001a1de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1e2:	e8 ba 47 ff ff       	call   c000e9a1 <free>
c001a1e7:	83 c4 10             	add    esp,0x10
c001a1ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a1ee:	85 c0                	test   eax,eax
c001a1f0:	75 0a                	jne    c001a1fc <FAT::closeDir(void*)+0x48>
c001a1f2:	b8 00 00 00 00       	mov    eax,0x0
c001a1f7:	eb 0b                	jmp    c001a204 <FAT::closeDir(void*)+0x50>
c001a1f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1fc:	b8 01 00 00 00       	mov    eax,0x1
c001a201:	8d 76 00             	lea    esi,[esi+0x0]
c001a204:	83 c4 1c             	add    esp,0x1c
c001a207:	c3                   	ret    

c001a208 <FAT::truncate(void*, unsigned long long)>:
c001a208:	83 ec 2c             	sub    esp,0x2c
c001a20b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a20f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a213:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a217:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a21b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a220:	75 0a                	jne    c001a22c <FAT::truncate(void*, unsigned long long)+0x24>
c001a222:	b8 04 00 00 00       	mov    eax,0x4
c001a227:	eb 47                	jmp    c001a270 <FAT::truncate(void*, unsigned long long)+0x68>
c001a229:	8d 76 00             	lea    esi,[esi+0x0]
c001a22c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a230:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a233:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a237:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a23f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a243:	83 ec 08             	sub    esp,0x8
c001a246:	50                   	push   eax
c001a247:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a24b:	e8 f1 a3 fe ff       	call   c0004641 <f_lseek>
c001a250:	83 c4 10             	add    esp,0x10
c001a253:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a257:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a25b:	85 c0                	test   eax,eax
c001a25d:	75 09                	jne    c001a268 <FAT::truncate(void*, unsigned long long)+0x60>
c001a25f:	b8 00 00 00 00       	mov    eax,0x0
c001a264:	eb 0a                	jmp    c001a270 <FAT::truncate(void*, unsigned long long)+0x68>
c001a266:	66 90                	xchg   ax,ax
c001a268:	b8 01 00 00 00       	mov    eax,0x1
c001a26d:	8d 76 00             	lea    esi,[esi+0x0]
c001a270:	83 c4 2c             	add    esp,0x2c
c001a273:	c3                   	ret    

c001a274 <FAT::seek(void*, unsigned long long)>:
c001a274:	83 ec 2c             	sub    esp,0x2c
c001a277:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a27b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a27f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a283:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a287:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a28c:	75 0a                	jne    c001a298 <FAT::seek(void*, unsigned long long)+0x24>
c001a28e:	b8 04 00 00 00       	mov    eax,0x4
c001a293:	eb 33                	jmp    c001a2c8 <FAT::seek(void*, unsigned long long)+0x54>
c001a295:	8d 76 00             	lea    esi,[esi+0x0]
c001a298:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a29c:	83 ec 08             	sub    esp,0x8
c001a29f:	50                   	push   eax
c001a2a0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a2a4:	e8 98 a3 fe ff       	call   c0004641 <f_lseek>
c001a2a9:	83 c4 10             	add    esp,0x10
c001a2ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2b4:	85 c0                	test   eax,eax
c001a2b6:	75 08                	jne    c001a2c0 <FAT::seek(void*, unsigned long long)+0x4c>
c001a2b8:	b8 00 00 00 00       	mov    eax,0x0
c001a2bd:	eb 09                	jmp    c001a2c8 <FAT::seek(void*, unsigned long long)+0x54>
c001a2bf:	90                   	nop
c001a2c0:	b8 01 00 00 00       	mov    eax,0x1
c001a2c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2c8:	83 c4 2c             	add    esp,0x2c
c001a2cb:	c3                   	ret    

c001a2cc <fatWrapperReadDisk>:
c001a2cc:	53                   	push   ebx
c001a2cd:	83 ec 18             	sub    esp,0x18
c001a2d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a2d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2dd:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a2e4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a2e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a2ec:	ba 00 00 00 00       	mov    edx,0x0
c001a2f1:	83 ec 0c             	sub    esp,0xc
c001a2f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a2f8:	53                   	push   ebx
c001a2f9:	52                   	push   edx
c001a2fa:	50                   	push   eax
c001a2fb:	51                   	push   ecx
c001a2fc:	e8 db fd fe ff       	call   c000a0dc <LogicalDisk::read(unsigned long long, int, void*)>
c001a301:	83 c4 20             	add    esp,0x20
c001a304:	83 c4 18             	add    esp,0x18
c001a307:	5b                   	pop    ebx
c001a308:	c3                   	ret    
c001a309:	8d 76 00             	lea    esi,[esi+0x0]

c001a30c <fatWrapperWriteDisk>:
c001a30c:	53                   	push   ebx
c001a30d:	83 ec 18             	sub    esp,0x18
c001a310:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a314:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a318:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a31d:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a324:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a328:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a32c:	ba 00 00 00 00       	mov    edx,0x0
c001a331:	83 ec 0c             	sub    esp,0xc
c001a334:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a338:	53                   	push   ebx
c001a339:	52                   	push   edx
c001a33a:	50                   	push   eax
c001a33b:	51                   	push   ecx
c001a33c:	e8 07 fe fe ff       	call   c000a148 <LogicalDisk::write(unsigned long long, int, void*)>
c001a341:	83 c4 20             	add    esp,0x20
c001a344:	83 c4 18             	add    esp,0x18
c001a347:	5b                   	pop    ebx
c001a348:	c3                   	ret    
c001a349:	8d 76 00             	lea    esi,[esi+0x0]

c001a34c <fatWrapperIoctl>:
c001a34c:	53                   	push   ebx
c001a34d:	83 ec 28             	sub    esp,0x28
c001a350:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a354:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a358:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a35c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a360:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a365:	83 f8 02             	cmp    eax,0x2
c001a368:	75 32                	jne    c001a39c <fatWrapperIoctl+0x50>
c001a36a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a36e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a372:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a377:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a37e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a384:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a38e:	66 89 02             	mov    WORD PTR [edx],ax
c001a391:	b8 00 00 00 00       	mov    eax,0x0
c001a396:	e9 c5 00 00 00       	jmp    c001a460 <fatWrapperIoctl+0x114>
c001a39b:	90                   	nop
c001a39c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a3a1:	83 f8 01             	cmp    eax,0x1
c001a3a4:	75 6a                	jne    c001a410 <fatWrapperIoctl+0xc4>
c001a3a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a3ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a3b3:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a3ba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a3c0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a3c6:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a3cc:	89 c8                	mov    eax,ecx
c001a3ce:	89 da                	mov    edx,ebx
c001a3d0:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a3d4:	c1 e0 0a             	shl    eax,0xa
c001a3d7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a3dc:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c001a3e3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a3e9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a3ef:	89 cb                	mov    ebx,ecx
c001a3f1:	c1 fb 1f             	sar    ebx,0x1f
c001a3f4:	53                   	push   ebx
c001a3f5:	51                   	push   ecx
c001a3f6:	52                   	push   edx
c001a3f7:	50                   	push   eax
c001a3f8:	e8 47 57 00 00       	call   c001fb44 <__udivdi3>
c001a3fd:	83 c4 10             	add    esp,0x10
c001a400:	89 c2                	mov    edx,eax
c001a402:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a406:	89 10                	mov    DWORD PTR [eax],edx
c001a408:	b8 00 00 00 00       	mov    eax,0x0
c001a40d:	eb 51                	jmp    c001a460 <fatWrapperIoctl+0x114>
c001a40f:	90                   	nop
c001a410:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a415:	85 c0                	test   eax,eax
c001a417:	75 07                	jne    c001a420 <fatWrapperIoctl+0xd4>
c001a419:	b8 00 00 00 00       	mov    eax,0x0
c001a41e:	eb 40                	jmp    c001a460 <fatWrapperIoctl+0x114>
c001a420:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a425:	83 f8 03             	cmp    eax,0x3
c001a428:	75 1a                	jne    c001a444 <fatWrapperIoctl+0xf8>
c001a42a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a42e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a432:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a436:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a43c:	b8 00 00 00 00       	mov    eax,0x0
c001a441:	eb 1d                	jmp    c001a460 <fatWrapperIoctl+0x114>
c001a443:	90                   	nop
c001a444:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a449:	83 f8 04             	cmp    eax,0x4
c001a44c:	75 0a                	jne    c001a458 <fatWrapperIoctl+0x10c>
c001a44e:	b8 00 00 00 00       	mov    eax,0x0
c001a453:	eb 0b                	jmp    c001a460 <fatWrapperIoctl+0x114>
c001a455:	8d 76 00             	lea    esi,[esi+0x0]
c001a458:	b8 04 00 00 00       	mov    eax,0x4
c001a45d:	8d 76 00             	lea    esi,[esi+0x0]
c001a460:	83 c4 28             	add    esp,0x28
c001a463:	5b                   	pop    ebx
c001a464:	c3                   	ret    
c001a465:	90                   	nop
c001a466:	66 90                	xchg   ax,ax

c001a468 <FAT::FAT()>:
c001a468:	83 ec 1c             	sub    esp,0x1c
c001a46b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a46f:	83 ec 0c             	sub    esp,0xc
c001a472:	50                   	push   eax
c001a473:	e8 f8 d8 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001a478:	83 c4 10             	add    esp,0x10
c001a47b:	ba f4 31 02 c0       	mov    edx,0xc00231f4
c001a480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a484:	89 10                	mov    DWORD PTR [eax],edx
c001a486:	c7 05 a0 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7a0,0x0
c001a490:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a498:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a49d:	7f 19                	jg     c001a4b8 <FAT::FAT()+0x50>
c001a49f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4a3:	c7 04 85 c0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3840],0xffffffff
c001a4ae:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a4b3:	eb e3                	jmp    c001a498 <FAT::FAT()+0x30>
c001a4b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4b8:	90                   	nop
c001a4b9:	83 c4 1c             	add    esp,0x1c
c001a4bc:	c3                   	ret    
c001a4bd:	90                   	nop
c001a4be:	66 90                	xchg   ax,ax

c001a4c0 <FAT::fixFilepath(char*)>:
c001a4c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4c4:	8a 00                	mov    al,BYTE PTR [eax]
c001a4c6:	0f be c0             	movsx  eax,al
c001a4c9:	83 f8 40             	cmp    eax,0x40
c001a4cc:	7e 2e                	jle    c001a4fc <FAT::fixFilepath(char*)+0x3c>
c001a4ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4d2:	8a 00                	mov    al,BYTE PTR [eax]
c001a4d4:	83 e8 41             	sub    eax,0x41
c001a4d7:	88 c2                	mov    dl,al
c001a4d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4dd:	88 10                	mov    BYTE PTR [eax],dl
c001a4df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4e3:	8a 00                	mov    al,BYTE PTR [eax]
c001a4e5:	0f be c0             	movsx  eax,al
c001a4e8:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001a4ef:	83 c0 30             	add    eax,0x30
c001a4f2:	88 c2                	mov    dl,al
c001a4f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4f8:	88 10                	mov    BYTE PTR [eax],dl
c001a4fa:	66 90                	xchg   ax,ax
c001a4fc:	90                   	nop
c001a4fd:	c3                   	ret    
c001a4fe:	66 90                	xchg   ax,ax

c001a500 <FAT::open(char const*, void**, FileOpenMode)>:
c001a500:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a506:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a50e:	74 0c                	je     c001a51c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a510:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a518:	75 0e                	jne    c001a528 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a51a:	66 90                	xchg   ax,ax
c001a51c:	b8 04 00 00 00       	mov    eax,0x4
c001a521:	e9 46 01 00 00       	jmp    c001a66c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a526:	66 90                	xchg   ax,ax
c001a528:	83 ec 08             	sub    esp,0x8
c001a52b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a532:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a536:	50                   	push   eax
c001a537:	e8 04 61 fe ff       	call   c0000640 <strcpy>
c001a53c:	83 c4 10             	add    esp,0x10
c001a53f:	83 ec 08             	sub    esp,0x8
c001a542:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a546:	50                   	push   eax
c001a547:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a54e:	e8 6d ff ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001a553:	83 c4 10             	add    esp,0x10
c001a556:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a55e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a565:	83 e0 01             	and    eax,0x1
c001a568:	74 12                	je     c001a57c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a56a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a571:	83 c8 01             	or     eax,0x1
c001a574:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a57b:	90                   	nop
c001a57c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a583:	83 e0 04             	and    eax,0x4
c001a586:	74 24                	je     c001a5ac <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a588:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a58f:	83 c8 30             	or     eax,0x30
c001a592:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a599:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a5a0:	83 c8 02             	or     eax,0x2
c001a5a3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a5aa:	66 90                	xchg   ax,ax
c001a5ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a5b3:	83 e0 02             	and    eax,0x2
c001a5b6:	74 14                	je     c001a5cc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a5b8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a5bf:	83 c8 02             	or     eax,0x2
c001a5c2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a5c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a5cc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a5d3:	83 e0 08             	and    eax,0x8
c001a5d6:	74 14                	je     c001a5ec <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a5d8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a5df:	83 c8 04             	or     eax,0x4
c001a5e2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a5e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a5ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a5f3:	83 e0 10             	and    eax,0x10
c001a5f6:	74 14                	je     c001a60c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a5f8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a5ff:	83 c8 08             	or     eax,0x8
c001a602:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a609:	8d 76 00             	lea    esi,[esi+0x0]
c001a60c:	83 ec 0c             	sub    esp,0xc
c001a60f:	68 28 02 00 00       	push   0x228
c001a614:	e8 78 43 ff ff       	call   c000e991 <malloc>
c001a619:	83 c4 10             	add    esp,0x10
c001a61c:	89 c2                	mov    edx,eax
c001a61e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a625:	89 10                	mov    DWORD PTR [eax],edx
c001a627:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a62f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a636:	8b 00                	mov    eax,DWORD PTR [eax]
c001a638:	83 ec 04             	sub    esp,0x4
c001a63b:	52                   	push   edx
c001a63c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a640:	52                   	push   edx
c001a641:	50                   	push   eax
c001a642:	e8 fc 97 fe ff       	call   c0003e43 <f_open>
c001a647:	83 c4 10             	add    esp,0x10
c001a64a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a651:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a659:	74 09                	je     c001a664 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a65b:	b8 01 00 00 00       	mov    eax,0x1
c001a660:	eb 0a                	jmp    c001a66c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a662:	66 90                	xchg   ax,ax
c001a664:	b8 00 00 00 00       	mov    eax,0x0
c001a669:	8d 76 00             	lea    esi,[esi+0x0]
c001a66c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a672:	c3                   	ret    
c001a673:	90                   	nop

c001a674 <FAT::openDir(char const*, void**)>:
c001a674:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a67a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a682:	74 0c                	je     c001a690 <FAT::openDir(char const*, void**)+0x1c>
c001a684:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a68c:	75 0e                	jne    c001a69c <FAT::openDir(char const*, void**)+0x28>
c001a68e:	66 90                	xchg   ax,ax
c001a690:	b8 04 00 00 00       	mov    eax,0x4
c001a695:	e9 82 00 00 00       	jmp    c001a71c <FAT::openDir(char const*, void**)+0xa8>
c001a69a:	66 90                	xchg   ax,ax
c001a69c:	83 ec 08             	sub    esp,0x8
c001a69f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a6a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6aa:	50                   	push   eax
c001a6ab:	e8 90 5f fe ff       	call   c0000640 <strcpy>
c001a6b0:	83 c4 10             	add    esp,0x10
c001a6b3:	83 ec 08             	sub    esp,0x8
c001a6b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a6ba:	50                   	push   eax
c001a6bb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a6c2:	e8 f9 fd ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001a6c7:	83 c4 10             	add    esp,0x10
c001a6ca:	83 ec 0c             	sub    esp,0xc
c001a6cd:	6a 30                	push   0x30
c001a6cf:	e8 bd 42 ff ff       	call   c000e991 <malloc>
c001a6d4:	83 c4 10             	add    esp,0x10
c001a6d7:	89 c2                	mov    edx,eax
c001a6d9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a6e0:	89 10                	mov    DWORD PTR [eax],edx
c001a6e2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a6e9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a6eb:	83 ec 08             	sub    esp,0x8
c001a6ee:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a6f2:	52                   	push   edx
c001a6f3:	50                   	push   eax
c001a6f4:	e8 f9 a0 fe ff       	call   c00047f2 <f_opendir>
c001a6f9:	83 c4 10             	add    esp,0x10
c001a6fc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a703:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a70b:	74 07                	je     c001a714 <FAT::openDir(char const*, void**)+0xa0>
c001a70d:	b8 01 00 00 00       	mov    eax,0x1
c001a712:	eb 08                	jmp    c001a71c <FAT::openDir(char const*, void**)+0xa8>
c001a714:	b8 00 00 00 00       	mov    eax,0x0
c001a719:	8d 76 00             	lea    esi,[esi+0x0]
c001a71c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a722:	c3                   	ret    
c001a723:	90                   	nop

c001a724 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a724:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a72a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a732:	75 0c                	jne    c001a740 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a734:	b8 04 00 00 00       	mov    eax,0x4
c001a739:	e9 d6 00 00 00       	jmp    c001a814 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a73e:	66 90                	xchg   ax,ax
c001a740:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a748:	75 0a                	jne    c001a754 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a74a:	b8 04 00 00 00       	mov    eax,0x4
c001a74f:	e9 c0 00 00 00       	jmp    c001a814 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a754:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a75c:	75 0a                	jne    c001a768 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a75e:	b8 04 00 00 00       	mov    eax,0x4
c001a763:	e9 ac 00 00 00       	jmp    c001a814 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a768:	83 ec 08             	sub    esp,0x8
c001a76b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a772:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a779:	50                   	push   eax
c001a77a:	e8 c1 5e fe ff       	call   c0000640 <strcpy>
c001a77f:	83 c4 10             	add    esp,0x10
c001a782:	83 ec 08             	sub    esp,0x8
c001a785:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a78c:	50                   	push   eax
c001a78d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a794:	e8 27 fd ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001a799:	83 c4 10             	add    esp,0x10
c001a79c:	83 ec 08             	sub    esp,0x8
c001a79f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a7a3:	50                   	push   eax
c001a7a4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a7ab:	50                   	push   eax
c001a7ac:	e8 c0 a1 fe ff       	call   c0004971 <f_stat>
c001a7b1:	83 c4 10             	add    esp,0x10
c001a7b4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a7bb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a7c2:	85 c0                	test   eax,eax
c001a7c4:	74 0a                	je     c001a7d0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a7c6:	83 f8 04             	cmp    eax,0x4
c001a7c9:	74 39                	je     c001a804 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a7cb:	eb 3f                	jmp    c001a80c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a7cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a7d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7d4:	0f b6 c0             	movzx  eax,al
c001a7d7:	83 e0 10             	and    eax,0x10
c001a7da:	0f 95 c2             	setne  dl
c001a7dd:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a7e4:	88 10                	mov    BYTE PTR [eax],dl
c001a7e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7ea:	ba 00 00 00 00       	mov    edx,0x0
c001a7ef:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a7f6:	89 01                	mov    DWORD PTR [ecx],eax
c001a7f8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a7fb:	b8 00 00 00 00       	mov    eax,0x0
c001a800:	eb 12                	jmp    c001a814 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a802:	66 90                	xchg   ax,ax
c001a804:	b8 02 00 00 00       	mov    eax,0x2
c001a809:	eb 09                	jmp    c001a814 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a80b:	90                   	nop
c001a80c:	b8 01 00 00 00       	mov    eax,0x1
c001a811:	8d 76 00             	lea    esi,[esi+0x0]
c001a814:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a81a:	c3                   	ret    
c001a81b:	90                   	nop

c001a81c <FAT::unlink(char const*)>:
c001a81c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a822:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a82a:	75 08                	jne    c001a834 <FAT::unlink(char const*)+0x18>
c001a82c:	b8 04 00 00 00       	mov    eax,0x4
c001a831:	eb 61                	jmp    c001a894 <FAT::unlink(char const*)+0x78>
c001a833:	90                   	nop
c001a834:	83 ec 08             	sub    esp,0x8
c001a837:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a83e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a842:	50                   	push   eax
c001a843:	e8 f8 5d fe ff       	call   c0000640 <strcpy>
c001a848:	83 c4 10             	add    esp,0x10
c001a84b:	83 ec 08             	sub    esp,0x8
c001a84e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a852:	50                   	push   eax
c001a853:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a85a:	e8 61 fc ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001a85f:	83 c4 10             	add    esp,0x10
c001a862:	83 ec 0c             	sub    esp,0xc
c001a865:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a869:	50                   	push   eax
c001a86a:	e8 74 a3 fe ff       	call   c0004be3 <f_unlink>
c001a86f:	83 c4 10             	add    esp,0x10
c001a872:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a879:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a880:	85 c0                	test   eax,eax
c001a882:	75 08                	jne    c001a88c <FAT::unlink(char const*)+0x70>
c001a884:	b8 00 00 00 00       	mov    eax,0x0
c001a889:	eb 09                	jmp    c001a894 <FAT::unlink(char const*)+0x78>
c001a88b:	90                   	nop
c001a88c:	b8 01 00 00 00       	mov    eax,0x1
c001a891:	8d 76 00             	lea    esi,[esi+0x0]
c001a894:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a89a:	c3                   	ret    
c001a89b:	90                   	nop

c001a89c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a89c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8a2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a8a9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a8b0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a8b4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a8b8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a8c0:	75 0a                	jne    c001a8cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a8c2:	b8 04 00 00 00       	mov    eax,0x4
c001a8c7:	e9 7c 01 00 00       	jmp    c001aa48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a8cc:	83 ec 08             	sub    esp,0x8
c001a8cf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a8d6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a8da:	50                   	push   eax
c001a8db:	e8 60 5d fe ff       	call   c0000640 <strcpy>
c001a8e0:	83 c4 10             	add    esp,0x10
c001a8e3:	83 ec 08             	sub    esp,0x8
c001a8e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a8ea:	50                   	push   eax
c001a8eb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a8f2:	e8 c9 fb ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001a8f7:	83 c4 10             	add    esp,0x10
c001a8fa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a902:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a90a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a90f:	83 e0 01             	and    eax,0x1
c001a912:	74 14                	je     c001a928 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a914:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a91b:	83 c8 01             	or     eax,0x1
c001a91e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a925:	8d 76 00             	lea    esi,[esi+0x0]
c001a928:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a92d:	83 e0 02             	and    eax,0x2
c001a930:	74 12                	je     c001a944 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a932:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a939:	83 c8 20             	or     eax,0x20
c001a93c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a943:	90                   	nop
c001a944:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a949:	83 e0 04             	and    eax,0x4
c001a94c:	74 12                	je     c001a960 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a94e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a955:	83 c8 04             	or     eax,0x4
c001a958:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a95f:	90                   	nop
c001a960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a965:	83 e0 08             	and    eax,0x8
c001a968:	74 12                	je     c001a97c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a96a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a971:	83 c8 02             	or     eax,0x2
c001a974:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a97b:	90                   	nop
c001a97c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a981:	83 e0 01             	and    eax,0x1
c001a984:	74 12                	je     c001a998 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a986:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a98d:	83 c8 01             	or     eax,0x1
c001a990:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a997:	90                   	nop
c001a998:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a99d:	83 e0 02             	and    eax,0x2
c001a9a0:	74 12                	je     c001a9b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a9a2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a9a9:	83 c8 20             	or     eax,0x20
c001a9ac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a9b3:	90                   	nop
c001a9b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a9b9:	83 e0 04             	and    eax,0x4
c001a9bc:	74 12                	je     c001a9d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a9be:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a9c5:	83 c8 04             	or     eax,0x4
c001a9c8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a9cf:	90                   	nop
c001a9d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a9d5:	83 e0 08             	and    eax,0x8
c001a9d8:	74 12                	je     c001a9ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a9da:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a9e1:	83 c8 02             	or     eax,0x2
c001a9e4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a9eb:	90                   	nop
c001a9ec:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a9f3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a9fa:	09 d0                	or     eax,edx
c001a9fc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001aa03:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001aa0b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001aa13:	83 ec 04             	sub    esp,0x4
c001aa16:	52                   	push   edx
c001aa17:	50                   	push   eax
c001aa18:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aa1c:	50                   	push   eax
c001aa1d:	e8 36 a6 fe ff       	call   c0005058 <f_chmod>
c001aa22:	83 c4 10             	add    esp,0x10
c001aa25:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001aa2c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001aa33:	85 c0                	test   eax,eax
c001aa35:	75 09                	jne    c001aa40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001aa37:	b8 00 00 00 00       	mov    eax,0x0
c001aa3c:	eb 0a                	jmp    c001aa48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001aa3e:	66 90                	xchg   ax,ax
c001aa40:	b8 01 00 00 00       	mov    eax,0x1
c001aa45:	8d 76 00             	lea    esi,[esi+0x0]
c001aa48:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aa4e:	c3                   	ret    
c001aa4f:	90                   	nop

c001aa50 <FAT::rename(char const*, char const*)>:
c001aa50:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aa56:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001aa5e:	74 0c                	je     c001aa6c <FAT::rename(char const*, char const*)+0x1c>
c001aa60:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001aa68:	75 0e                	jne    c001aa78 <FAT::rename(char const*, char const*)+0x28>
c001aa6a:	66 90                	xchg   ax,ax
c001aa6c:	b8 04 00 00 00       	mov    eax,0x4
c001aa71:	e9 9e 00 00 00       	jmp    c001ab14 <FAT::rename(char const*, char const*)+0xc4>
c001aa76:	66 90                	xchg   ax,ax
c001aa78:	83 ec 08             	sub    esp,0x8
c001aa7b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aa82:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aa89:	50                   	push   eax
c001aa8a:	e8 b1 5b fe ff       	call   c0000640 <strcpy>
c001aa8f:	83 c4 10             	add    esp,0x10
c001aa92:	83 ec 08             	sub    esp,0x8
c001aa95:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aa9c:	50                   	push   eax
c001aa9d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aaa4:	e8 17 fa ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001aaa9:	83 c4 10             	add    esp,0x10
c001aaac:	83 ec 08             	sub    esp,0x8
c001aaaf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001aab6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aaba:	50                   	push   eax
c001aabb:	e8 80 5b fe ff       	call   c0000640 <strcpy>
c001aac0:	83 c4 10             	add    esp,0x10
c001aac3:	83 ec 08             	sub    esp,0x8
c001aac6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aaca:	50                   	push   eax
c001aacb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aad2:	e8 e9 f9 ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001aad7:	83 c4 10             	add    esp,0x10
c001aada:	83 ec 08             	sub    esp,0x8
c001aadd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aae1:	50                   	push   eax
c001aae2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aae9:	50                   	push   eax
c001aaea:	e8 b1 a3 fe ff       	call   c0004ea0 <f_rename>
c001aaef:	83 c4 10             	add    esp,0x10
c001aaf2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001aaf9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ab00:	85 c0                	test   eax,eax
c001ab02:	75 08                	jne    c001ab0c <FAT::rename(char const*, char const*)+0xbc>
c001ab04:	b8 00 00 00 00       	mov    eax,0x0
c001ab09:	eb 09                	jmp    c001ab14 <FAT::rename(char const*, char const*)+0xc4>
c001ab0b:	90                   	nop
c001ab0c:	b8 01 00 00 00       	mov    eax,0x1
c001ab11:	8d 76 00             	lea    esi,[esi+0x0]
c001ab14:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ab1a:	c3                   	ret    
c001ab1b:	90                   	nop

c001ab1c <FAT::mkdir(char const*)>:
c001ab1c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab22:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab2a:	75 08                	jne    c001ab34 <FAT::mkdir(char const*)+0x18>
c001ab2c:	b8 04 00 00 00       	mov    eax,0x4
c001ab31:	eb 61                	jmp    c001ab94 <FAT::mkdir(char const*)+0x78>
c001ab33:	90                   	nop
c001ab34:	83 ec 08             	sub    esp,0x8
c001ab37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab3e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab42:	50                   	push   eax
c001ab43:	e8 f8 5a fe ff       	call   c0000640 <strcpy>
c001ab48:	83 c4 10             	add    esp,0x10
c001ab4b:	83 ec 08             	sub    esp,0x8
c001ab4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab52:	50                   	push   eax
c001ab53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab5a:	e8 61 f9 ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001ab5f:	83 c4 10             	add    esp,0x10
c001ab62:	83 ec 0c             	sub    esp,0xc
c001ab65:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab69:	50                   	push   eax
c001ab6a:	e8 96 a1 fe ff       	call   c0004d05 <f_mkdir>
c001ab6f:	83 c4 10             	add    esp,0x10
c001ab72:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ab79:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ab80:	85 c0                	test   eax,eax
c001ab82:	75 08                	jne    c001ab8c <FAT::mkdir(char const*)+0x70>
c001ab84:	b8 00 00 00 00       	mov    eax,0x0
c001ab89:	eb 09                	jmp    c001ab94 <FAT::mkdir(char const*)+0x78>
c001ab8b:	90                   	nop
c001ab8c:	b8 01 00 00 00       	mov    eax,0x1
c001ab91:	8d 76 00             	lea    esi,[esi+0x0]
c001ab94:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab9a:	c3                   	ret    
c001ab9b:	90                   	nop

c001ab9c <FAT::exists(char const*)>:
c001ab9c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aba2:	83 ec 08             	sub    esp,0x8
c001aba5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001abac:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abb0:	50                   	push   eax
c001abb1:	e8 8a 5a fe ff       	call   c0000640 <strcpy>
c001abb6:	83 c4 10             	add    esp,0x10
c001abb9:	83 ec 08             	sub    esp,0x8
c001abbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001abc0:	50                   	push   eax
c001abc1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001abc8:	e8 f3 f8 ff ff       	call   c001a4c0 <FAT::fixFilepath(char*)>
c001abcd:	83 c4 10             	add    esp,0x10
c001abd0:	83 ec 08             	sub    esp,0x8
c001abd3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001abda:	50                   	push   eax
c001abdb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abdf:	50                   	push   eax
c001abe0:	e8 8c 9d fe ff       	call   c0004971 <f_stat>
c001abe5:	83 c4 10             	add    esp,0x10
c001abe8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001abef:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001abf6:	85 c0                	test   eax,eax
c001abf8:	75 06                	jne    c001ac00 <FAT::exists(char const*)+0x64>
c001abfa:	b0 01                	mov    al,0x1
c001abfc:	eb 06                	jmp    c001ac04 <FAT::exists(char const*)+0x68>
c001abfe:	66 90                	xchg   ax,ax
c001ac00:	b0 00                	mov    al,0x0
c001ac02:	66 90                	xchg   ax,ax
c001ac04:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ac0a:	c3                   	ret    
c001ac0b:	90                   	nop

c001ac0c <isoReadDiscSectorHelper>:
c001ac0c:	83 ec 2c             	sub    esp,0x2c
c001ac0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac13:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ac17:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ac1c:	83 e8 41             	sub    eax,0x41
c001ac1f:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001ac26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac2a:	ba 00 00 00 00       	mov    edx,0x0
c001ac2f:	83 ec 0c             	sub    esp,0xc
c001ac32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac36:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ac3a:	52                   	push   edx
c001ac3b:	50                   	push   eax
c001ac3c:	51                   	push   ecx
c001ac3d:	e8 9a f4 fe ff       	call   c000a0dc <LogicalDisk::read(unsigned long long, int, void*)>
c001ac42:	83 c4 20             	add    esp,0x20
c001ac45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac49:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ac4e:	74 0c                	je     c001ac5c <isoReadDiscSectorHelper+0x50>
c001ac50:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac54:	c1 e0 0b             	shl    eax,0xb
c001ac57:	eb 0b                	jmp    c001ac64 <isoReadDiscSectorHelper+0x58>
c001ac59:	8d 76 00             	lea    esi,[esi+0x0]
c001ac5c:	b8 00 00 00 00       	mov    eax,0x0
c001ac61:	8d 76 00             	lea    esi,[esi+0x0]
c001ac64:	83 c4 2c             	add    esp,0x2c
c001ac67:	c3                   	ret    

c001ac68 <iso_kprintf>:
c001ac68:	83 ec 0c             	sub    esp,0xc
c001ac6b:	83 ec 08             	sub    esp,0x8
c001ac6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac72:	68 cb 2e 02 c0       	push   0xc0022ecb
c001ac77:	e8 e8 c2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ac7c:	83 c4 10             	add    esp,0x10
c001ac7f:	90                   	nop
c001ac80:	83 c4 0c             	add    esp,0xc
c001ac83:	c3                   	ret    

c001ac84 <iso_kprintfd>:
c001ac84:	83 ec 0c             	sub    esp,0xc
c001ac87:	83 ec 08             	sub    esp,0x8
c001ac8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac8e:	68 a1 15 02 c0       	push   0xc00215a1
c001ac93:	e8 cc c2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ac98:	83 c4 10             	add    esp,0x10
c001ac9b:	90                   	nop
c001ac9c:	83 c4 0c             	add    esp,0xc
c001ac9f:	c3                   	ret    

c001aca0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001aca0:	b8 08 00 00 00       	mov    eax,0x8
c001aca5:	c3                   	ret    

c001aca6 <ISO9660::truncate(void*, unsigned long long)>:
c001aca6:	b8 01 00 00 00       	mov    eax,0x1
c001acab:	c3                   	ret    

c001acac <ISO9660::getName()>:
c001acac:	b8 58 32 02 c0       	mov    eax,0xc0023258
c001acb1:	c3                   	ret    

c001acb2 <ISO9660::closeDir(void*)>:
c001acb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001acb8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001acbb:	90                   	nop

c001acbc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001acbc:	b8 01 00 00 00       	mov    eax,0x1
c001acc1:	c3                   	ret    

c001acc2 <ISO9660::unlink(char const*)>:
c001acc2:	b8 01 00 00 00       	mov    eax,0x1
c001acc7:	c3                   	ret    

c001acc8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001acc8:	b8 03 00 00 00       	mov    eax,0x3
c001accd:	c3                   	ret    

c001acce <ISO9660::rename(char const*, char const*)>:
c001acce:	b8 01 00 00 00       	mov    eax,0x1
c001acd3:	c3                   	ret    

c001acd4 <ISO9660::mkdir(char const*)>:
c001acd4:	b8 01 00 00 00       	mov    eax,0x1
c001acd9:	c3                   	ret    

c001acda <ISO9660::~ISO9660()>:
c001acda:	83 ec 0c             	sub    esp,0xc
c001acdd:	ba 98 33 02 c0       	mov    edx,0xc0023398
c001ace2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace6:	89 10                	mov    DWORD PTR [eax],edx
c001ace8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acec:	83 ec 0c             	sub    esp,0xc
c001acef:	50                   	push   eax
c001acf0:	e8 9f d0 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001acf5:	83 c4 10             	add    esp,0x10
c001acf8:	90                   	nop
c001acf9:	83 c4 0c             	add    esp,0xc
c001acfc:	c3                   	ret    
c001acfd:	90                   	nop

c001acfe <ISO9660::~ISO9660()>:
c001acfe:	83 ec 0c             	sub    esp,0xc
c001ad01:	83 ec 0c             	sub    esp,0xc
c001ad04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad08:	e8 cd ff ff ff       	call   c001acda <ISO9660::~ISO9660()>
c001ad0d:	83 c4 10             	add    esp,0x10
c001ad10:	83 ec 08             	sub    esp,0x8
c001ad13:	6a 08                	push   0x8
c001ad15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad19:	e8 ea 19 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c001ad1e:	83 c4 10             	add    esp,0x10
c001ad21:	83 c4 0c             	add    esp,0xc
c001ad24:	c3                   	ret    
c001ad25:	90                   	nop

c001ad26 <ISO9660::exists(char const*)>:
c001ad26:	83 ec 18             	sub    esp,0x18
c001ad29:	68 73 32 02 c0       	push   0xc0023273
c001ad2e:	e8 b3 3f ff ff       	call   c000ece6 <KePanic(char const*)>
c001ad33:	31 c0                	xor    eax,eax
c001ad35:	83 c4 1c             	add    esp,0x1c
c001ad38:	c3                   	ret    
c001ad39:	90                   	nop

c001ad3a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ad3a:	56                   	push   esi
c001ad3b:	53                   	push   ebx
c001ad3c:	53                   	push   ebx
c001ad3d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ad41:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ad45:	85 db                	test   ebx,ebx
c001ad47:	0f 84 ca 00 00 00    	je     c001ae17 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ad4d:	85 f6                	test   esi,esi
c001ad4f:	0f 84 c2 00 00 00    	je     c001ae17 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ad55:	b8 03 00 00 00       	mov    eax,0x3
c001ad5a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001ad5f:	0f 85 b7 00 00 00    	jne    c001ae1c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ad65:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ad67:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ad6e:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001ad74:	74 1b                	je     c001ad91 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ad76:	85 c0                	test   eax,eax
c001ad78:	74 10                	je     c001ad8a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ad7a:	83 ec 0c             	sub    esp,0xc
c001ad7d:	68 91 32 02 c0       	push   0xc0023291
c001ad82:	e8 5f 3f ff ff       	call   c000ece6 <KePanic(char const*)>
c001ad87:	83 c4 10             	add    esp,0x10
c001ad8a:	8a 03                	mov    al,BYTE PTR [ebx]
c001ad8c:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001ad91:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ad94:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ad9b:	85 c0                	test   eax,eax
c001ad9d:	74 09                	je     c001ada8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ad9f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ada6:	74 48                	je     c001adf0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	68 a1 32 02 c0       	push   0xc00232a1
c001adb0:	e8 af c1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001adb5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001adb8:	83 c4 10             	add    esp,0x10
c001adbb:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001adc2:	85 c0                	test   eax,eax
c001adc4:	74 17                	je     c001addd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001adc6:	83 ec 0c             	sub    esp,0xc
c001adc9:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001add0:	68 c1 32 02 c0       	push   0xc00232c1
c001add5:	e8 8a c1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001adda:	83 c4 10             	add    esp,0x10
c001addd:	83 ec 0c             	sub    esp,0xc
c001ade0:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ade7:	50                   	push   eax
c001ade8:	e8 41 be fe ff       	call   c0006c2e <init_percd>
c001aded:	83 c4 10             	add    esp,0x10
c001adf0:	83 c3 03             	add    ebx,0x3
c001adf3:	51                   	push   ecx
c001adf4:	51                   	push   ecx
c001adf5:	6a 00                	push   0x0
c001adf7:	53                   	push   ebx
c001adf8:	e8 f8 b8 fe ff       	call   c00066f5 <iso_open>
c001adfd:	83 c4 10             	add    esp,0x10
c001ae00:	89 c2                	mov    edx,eax
c001ae02:	b8 01 00 00 00       	mov    eax,0x1
c001ae07:	83 fa ff             	cmp    edx,0xffffffff
c001ae0a:	74 10                	je     c001ae1c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ae0c:	83 c2 32             	add    edx,0x32
c001ae0f:	31 c0                	xor    eax,eax
c001ae11:	01 d2                	add    edx,edx
c001ae13:	89 16                	mov    DWORD PTR [esi],edx
c001ae15:	eb 05                	jmp    c001ae1c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ae17:	b8 04 00 00 00       	mov    eax,0x4
c001ae1c:	5a                   	pop    edx
c001ae1d:	5b                   	pop    ebx
c001ae1e:	5e                   	pop    esi
c001ae1f:	c3                   	ret    

c001ae20 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ae20:	53                   	push   ebx
c001ae21:	83 ec 08             	sub    esp,0x8
c001ae24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae2c:	85 c0                	test   eax,eax
c001ae2e:	74 2d                	je     c001ae5d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ae30:	85 db                	test   ebx,ebx
c001ae32:	74 29                	je     c001ae5d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ae34:	b9 02 00 00 00       	mov    ecx,0x2
c001ae39:	52                   	push   edx
c001ae3a:	99                   	cdq    
c001ae3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae3f:	f7 f9                	idiv   ecx
c001ae41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ae45:	83 e8 32             	sub    eax,0x32
c001ae48:	50                   	push   eax
c001ae49:	e8 4f b9 fe ff       	call   c000679d <iso_read>
c001ae4e:	83 c4 10             	add    esp,0x10
c001ae51:	89 03                	mov    DWORD PTR [ebx],eax
c001ae53:	09 d0                	or     eax,edx
c001ae55:	0f 94 c0             	sete   al
c001ae58:	0f b6 c0             	movzx  eax,al
c001ae5b:	eb 05                	jmp    c001ae62 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001ae5d:	b8 04 00 00 00       	mov    eax,0x4
c001ae62:	83 c4 08             	add    esp,0x8
c001ae65:	5b                   	pop    ebx
c001ae66:	c3                   	ret    
c001ae67:	90                   	nop

c001ae68 <ISO9660::seek(void*, unsigned long long)>:
c001ae68:	57                   	push   edi
c001ae69:	56                   	push   esi
c001ae6a:	b8 04 00 00 00       	mov    eax,0x4
c001ae6f:	51                   	push   ecx
c001ae70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ae78:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ae7c:	85 d2                	test   edx,edx
c001ae7e:	74 26                	je     c001aea6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001ae80:	6a 00                	push   0x0
c001ae82:	b9 02 00 00 00       	mov    ecx,0x2
c001ae87:	57                   	push   edi
c001ae88:	89 d0                	mov    eax,edx
c001ae8a:	56                   	push   esi
c001ae8b:	99                   	cdq    
c001ae8c:	f7 f9                	idiv   ecx
c001ae8e:	83 e8 32             	sub    eax,0x32
c001ae91:	50                   	push   eax
c001ae92:	e8 1c ba fe ff       	call   c00068b3 <iso_seek>
c001ae97:	83 c4 10             	add    esp,0x10
c001ae9a:	31 f0                	xor    eax,esi
c001ae9c:	31 fa                	xor    edx,edi
c001ae9e:	09 d0                	or     eax,edx
c001aea0:	0f 95 c0             	setne  al
c001aea3:	0f b6 c0             	movzx  eax,al
c001aea6:	5a                   	pop    edx
c001aea7:	5e                   	pop    esi
c001aea8:	5f                   	pop    edi
c001aea9:	c3                   	ret    

c001aeaa <ISO9660::tell(void*, unsigned long long*)>:
c001aeaa:	53                   	push   ebx
c001aeab:	83 ec 08             	sub    esp,0x8
c001aeae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aeb2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aeb6:	85 c0                	test   eax,eax
c001aeb8:	74 24                	je     c001aede <ISO9660::tell(void*, unsigned long long*)+0x34>
c001aeba:	85 db                	test   ebx,ebx
c001aebc:	74 20                	je     c001aede <ISO9660::tell(void*, unsigned long long*)+0x34>
c001aebe:	83 ec 0c             	sub    esp,0xc
c001aec1:	b9 02 00 00 00       	mov    ecx,0x2
c001aec6:	99                   	cdq    
c001aec7:	f7 f9                	idiv   ecx
c001aec9:	83 e8 32             	sub    eax,0x32
c001aecc:	50                   	push   eax
c001aecd:	e8 65 ba fe ff       	call   c0006937 <iso_tell>
c001aed2:	83 c4 10             	add    esp,0x10
c001aed5:	89 03                	mov    DWORD PTR [ebx],eax
c001aed7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001aeda:	31 c0                	xor    eax,eax
c001aedc:	eb 05                	jmp    c001aee3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001aede:	b8 04 00 00 00       	mov    eax,0x4
c001aee3:	83 c4 08             	add    esp,0x8
c001aee6:	5b                   	pop    ebx
c001aee7:	c3                   	ret    

c001aee8 <ISO9660::stat(void*, unsigned long long*)>:
c001aee8:	53                   	push   ebx
c001aee9:	83 ec 14             	sub    esp,0x14
c001aeec:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001aef0:	68 e5 32 02 c0       	push   0xc00232e5
c001aef5:	e8 6a c0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001aefa:	83 c4 10             	add    esp,0x10
c001aefd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001af02:	74 2c                	je     c001af30 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001af04:	85 db                	test   ebx,ebx
c001af06:	74 28                	je     c001af30 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001af08:	83 ec 0c             	sub    esp,0xc
c001af0b:	b9 02 00 00 00       	mov    ecx,0x2
c001af10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af14:	99                   	cdq    
c001af15:	f7 f9                	idiv   ecx
c001af17:	83 e8 32             	sub    eax,0x32
c001af1a:	50                   	push   eax
c001af1b:	e8 48 ba fe ff       	call   c0006968 <iso_total>
c001af20:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001af27:	89 03                	mov    DWORD PTR [ebx],eax
c001af29:	83 c4 10             	add    esp,0x10
c001af2c:	31 c0                	xor    eax,eax
c001af2e:	eb 05                	jmp    c001af35 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001af30:	b8 04 00 00 00       	mov    eax,0x4
c001af35:	83 c4 08             	add    esp,0x8
c001af38:	5b                   	pop    ebx
c001af39:	c3                   	ret    

c001af3a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001af3a:	55                   	push   ebp
c001af3b:	57                   	push   edi
c001af3c:	56                   	push   esi
c001af3d:	53                   	push   ebx
c001af3e:	83 ec 18             	sub    esp,0x18
c001af41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001af45:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001af49:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001af4d:	68 ed 32 02 c0       	push   0xc00232ed
c001af52:	e8 0d c0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001af57:	83 c4 10             	add    esp,0x10
c001af5a:	85 ff                	test   edi,edi
c001af5c:	0f 94 c0             	sete   al
c001af5f:	85 f6                	test   esi,esi
c001af61:	0f 94 c2             	sete   dl
c001af64:	09 d0                	or     eax,edx
c001af66:	a8 01                	test   al,0x1
c001af68:	0f 85 dd 00 00 00    	jne    c001b04b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001af6e:	85 db                	test   ebx,ebx
c001af70:	0f 84 d5 00 00 00    	je     c001b04b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001af76:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001af79:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001af7f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001af86:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001af8d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001af8f:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001af95:	74 1b                	je     c001afb2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001af97:	85 c0                	test   eax,eax
c001af99:	74 10                	je     c001afab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001af9b:	83 ec 0c             	sub    esp,0xc
c001af9e:	68 91 32 02 c0       	push   0xc0023291
c001afa3:	e8 3e 3d ff ff       	call   c000ece6 <KePanic(char const*)>
c001afa8:	83 c4 10             	add    esp,0x10
c001afab:	8a 03                	mov    al,BYTE PTR [ebx]
c001afad:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001afb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001afb5:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001afbc:	85 c0                	test   eax,eax
c001afbe:	74 09                	je     c001afc9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001afc0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001afc7:	74 51                	je     c001b01a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001afc9:	83 ec 0c             	sub    esp,0xc
c001afcc:	68 f5 32 02 c0       	push   0xc00232f5
c001afd1:	e8 8e bf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001afd6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001afd9:	83 c4 10             	add    esp,0x10
c001afdc:	83 3c 85 7c 96 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6984],0x0
c001afe4:	74 21                	je     c001b007 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001afe6:	83 ec 0c             	sub    esp,0xc
c001afe9:	68 15 33 02 c0       	push   0xc0023315
c001afee:	e8 71 bf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001aff3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001aff6:	83 c4 10             	add    esp,0x10
c001aff9:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001b000:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b007:	83 ec 0c             	sub    esp,0xc
c001b00a:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b011:	50                   	push   eax
c001b012:	e8 17 bc fe ff       	call   c0006c2e <init_percd>
c001b017:	83 c4 10             	add    esp,0x10
c001b01a:	83 c3 03             	add    ebx,0x3
c001b01d:	52                   	push   edx
c001b01e:	52                   	push   edx
c001b01f:	6a 00                	push   0x0
c001b021:	53                   	push   ebx
c001b022:	e8 ce b6 fe ff       	call   c00066f5 <iso_open>
c001b027:	83 c4 10             	add    esp,0x10
c001b02a:	89 c5                	mov    ebp,eax
c001b02c:	83 f8 ff             	cmp    eax,0xffffffff
c001b02f:	75 21                	jne    c001b052 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001b031:	50                   	push   eax
c001b032:	50                   	push   eax
c001b033:	6a 01                	push   0x1
c001b035:	53                   	push   ebx
c001b036:	e8 ba b6 fe ff       	call   c00066f5 <iso_open>
c001b03b:	83 c4 10             	add    esp,0x10
c001b03e:	ba 02 00 00 00       	mov    edx,0x2
c001b043:	40                   	inc    eax
c001b044:	74 2b                	je     c001b071 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b046:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001b049:	eb 24                	jmp    c001b06f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001b04b:	ba 04 00 00 00       	mov    edx,0x4
c001b050:	eb 1f                	jmp    c001b071 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b052:	83 ec 0c             	sub    esp,0xc
c001b055:	50                   	push   eax
c001b056:	e8 0d b9 fe ff       	call   c0006968 <iso_total>
c001b05b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b062:	89 07                	mov    DWORD PTR [edi],eax
c001b064:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b067:	e8 13 b7 fe ff       	call   c000677f <iso_close>
c001b06c:	83 c4 10             	add    esp,0x10
c001b06f:	31 d2                	xor    edx,edx
c001b071:	83 c4 0c             	add    esp,0xc
c001b074:	89 d0                	mov    eax,edx
c001b076:	5b                   	pop    ebx
c001b077:	5e                   	pop    esi
c001b078:	5f                   	pop    edi
c001b079:	5d                   	pop    ebp
c001b07a:	c3                   	ret    
c001b07b:	90                   	nop

c001b07c <ISO9660::close(void*)>:
c001b07c:	83 ec 0c             	sub    esp,0xc
c001b07f:	b8 04 00 00 00       	mov    eax,0x4
c001b084:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b088:	85 d2                	test   edx,edx
c001b08a:	74 1b                	je     c001b0a7 <ISO9660::close(void*)+0x2b>
c001b08c:	83 ec 0c             	sub    esp,0xc
c001b08f:	b9 02 00 00 00       	mov    ecx,0x2
c001b094:	89 d0                	mov    eax,edx
c001b096:	99                   	cdq    
c001b097:	f7 f9                	idiv   ecx
c001b099:	83 e8 32             	sub    eax,0x32
c001b09c:	50                   	push   eax
c001b09d:	e8 dd b6 fe ff       	call   c000677f <iso_close>
c001b0a2:	83 c4 10             	add    esp,0x10
c001b0a5:	31 c0                	xor    eax,eax
c001b0a7:	83 c4 0c             	add    esp,0xc
c001b0aa:	c3                   	ret    
c001b0ab:	90                   	nop

c001b0ac <ISO9660::openDir(char const*, void**)>:
c001b0ac:	56                   	push   esi
c001b0ad:	53                   	push   ebx
c001b0ae:	50                   	push   eax
c001b0af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b0b3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b0b7:	85 db                	test   ebx,ebx
c001b0b9:	0f 84 bd 00 00 00    	je     c001b17c <ISO9660::openDir(char const*, void**)+0xd0>
c001b0bf:	85 f6                	test   esi,esi
c001b0c1:	0f 84 b5 00 00 00    	je     c001b17c <ISO9660::openDir(char const*, void**)+0xd0>
c001b0c7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001b0c9:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b0d0:	38 15 a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,dl
c001b0d6:	74 1b                	je     c001b0f3 <ISO9660::openDir(char const*, void**)+0x47>
c001b0d8:	85 c0                	test   eax,eax
c001b0da:	74 10                	je     c001b0ec <ISO9660::openDir(char const*, void**)+0x40>
c001b0dc:	83 ec 0c             	sub    esp,0xc
c001b0df:	68 91 32 02 c0       	push   0xc0023291
c001b0e4:	e8 fd 3b ff ff       	call   c000ece6 <KePanic(char const*)>
c001b0e9:	83 c4 10             	add    esp,0x10
c001b0ec:	8a 03                	mov    al,BYTE PTR [ebx]
c001b0ee:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001b0f3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b0f6:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001b0fd:	85 c0                	test   eax,eax
c001b0ff:	74 10                	je     c001b111 <ISO9660::openDir(char const*, void**)+0x65>
c001b101:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b108:	74 1a                	je     c001b124 <ISO9660::openDir(char const*, void**)+0x78>
c001b10a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b111:	83 ec 0c             	sub    esp,0xc
c001b114:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b11b:	50                   	push   eax
c001b11c:	e8 0d bb fe ff       	call   c0006c2e <init_percd>
c001b121:	83 c4 10             	add    esp,0x10
c001b124:	83 c3 03             	add    ebx,0x3
c001b127:	50                   	push   eax
c001b128:	50                   	push   eax
c001b129:	6a 01                	push   0x1
c001b12b:	53                   	push   ebx
c001b12c:	e8 c4 b5 fe ff       	call   c00066f5 <iso_open>
c001b131:	83 c4 10             	add    esp,0x10
c001b134:	89 c3                	mov    ebx,eax
c001b136:	83 f8 ff             	cmp    eax,0xffffffff
c001b139:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b13e:	75 1c                	jne    c001b15c <ISO9660::openDir(char const*, void**)+0xb0>
c001b140:	53                   	push   ebx
c001b141:	53                   	push   ebx
c001b142:	68 39 33 02 c0       	push   0xc0023339
c001b147:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b14d:	e8 24 63 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c001b152:	83 c4 10             	add    esp,0x10
c001b155:	b8 01 00 00 00       	mov    eax,0x1
c001b15a:	eb 25                	jmp    c001b181 <ISO9660::openDir(char const*, void**)+0xd5>
c001b15c:	01 db                	add    ebx,ebx
c001b15e:	51                   	push   ecx
c001b15f:	83 c3 65             	add    ebx,0x65
c001b162:	51                   	push   ecx
c001b163:	68 4c 33 02 c0       	push   0xc002334c
c001b168:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b16e:	e8 03 63 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c001b173:	89 1e                	mov    DWORD PTR [esi],ebx
c001b175:	83 c4 10             	add    esp,0x10
c001b178:	31 c0                	xor    eax,eax
c001b17a:	eb 05                	jmp    c001b181 <ISO9660::openDir(char const*, void**)+0xd5>
c001b17c:	b8 04 00 00 00       	mov    eax,0x4
c001b181:	5a                   	pop    edx
c001b182:	5b                   	pop    ebx
c001b183:	5e                   	pop    esi
c001b184:	c3                   	ret    
c001b185:	90                   	nop

c001b186 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b186:	55                   	push   ebp
c001b187:	57                   	push   edi
c001b188:	56                   	push   esi
c001b189:	53                   	push   ebx
c001b18a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b190:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b197:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b19e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b1a6:	0f 84 e7 00 00 00    	je     c001b293 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b1ac:	85 db                	test   ebx,ebx
c001b1ae:	0f 84 df 00 00 00    	je     c001b293 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b1b4:	83 ec 0c             	sub    esp,0xc
c001b1b7:	68 5f 33 02 c0       	push   0xc002335f
c001b1bc:	e8 a3 bd fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b1c1:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b1c8:	b9 02 00 00 00       	mov    ecx,0x2
c001b1cd:	99                   	cdq    
c001b1ce:	f7 f9                	idiv   ecx
c001b1d0:	83 e8 32             	sub    eax,0x32
c001b1d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b1d6:	e8 df b7 fe ff       	call   c00069ba <iso_readdir>
c001b1db:	83 c4 10             	add    esp,0x10
c001b1de:	89 c6                	mov    esi,eax
c001b1e0:	85 c0                	test   eax,eax
c001b1e2:	75 37                	jne    c001b21b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001b1e4:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b1e9:	56                   	push   esi
c001b1ea:	56                   	push   esi
c001b1eb:	68 6a 33 02 c0       	push   0xc002336a
c001b1f0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b1f6:	e8 7b 62 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c001b1fb:	83 c4 0c             	add    esp,0xc
c001b1fe:	68 10 01 00 00       	push   0x110
c001b203:	6a 00                	push   0x0
c001b205:	57                   	push   edi
c001b206:	e8 e5 52 fe ff       	call   c00004f0 <memset>
c001b20b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b211:	83 c4 10             	add    esp,0x10
c001b214:	b8 01 00 00 00       	mov    eax,0x1
c001b219:	eb 7d                	jmp    c001b298 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b21b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b221:	8d 68 08             	lea    ebp,[eax+0x8]
c001b224:	83 ec 0c             	sub    esp,0xc
c001b227:	55                   	push   ebp
c001b228:	e8 43 53 fe ff       	call   c0000570 <strlen>
c001b22d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b235:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b239:	83 c4 10             	add    esp,0x10
c001b23c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001b240:	75 0a                	jne    c001b24c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b242:	b8 02 00 00 00       	mov    eax,0x2
c001b247:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001b24a:	74 05                	je     c001b251 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001b24c:	b8 01 00 00 00       	mov    eax,0x1
c001b251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b255:	50                   	push   eax
c001b256:	50                   	push   eax
c001b257:	55                   	push   ebp
c001b258:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b25c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b260:	50                   	push   eax
c001b261:	e8 da 53 fe ff       	call   c0000640 <strcpy>
c001b266:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b26d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b26f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001b275:	5a                   	pop    edx
c001b276:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b27b:	59                   	pop    ecx
c001b27c:	68 7d 33 02 c0       	push   0xc002337d
c001b281:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b287:	e8 ea 61 ff ff       	call   c0011476 <VgaText::puts(char const*)>
c001b28c:	83 c4 10             	add    esp,0x10
c001b28f:	31 c0                	xor    eax,eax
c001b291:	eb 05                	jmp    c001b298 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b293:	b8 04 00 00 00       	mov    eax,0x4
c001b298:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b29e:	5b                   	pop    ebx
c001b29f:	5e                   	pop    esi
c001b2a0:	5f                   	pop    edi
c001b2a1:	5d                   	pop    ebp
c001b2a2:	c3                   	ret    

c001b2a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b2a3:	57                   	push   edi
c001b2a4:	56                   	push   esi
c001b2a5:	53                   	push   ebx
c001b2a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b2ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b2b2:	39 35 a4 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8a4,esi
c001b2b8:	0f be cb             	movsx  ecx,bl
c001b2bb:	75 0b                	jne    c001b2c8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b2bd:	0f be 05 44 45 02 c0 	movsx  eax,BYTE PTR ds:0xc0024544
c001b2c4:	39 c8                	cmp    eax,ecx
c001b2c6:	74 47                	je     c001b30f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b2c8:	83 ec 0c             	sub    esp,0xc
c001b2cb:	31 d2                	xor    edx,edx
c001b2cd:	68 c0 c8 02 c0       	push   0xc002c8c0
c001b2d2:	6a 01                	push   0x1
c001b2d4:	52                   	push   edx
c001b2d5:	56                   	push   esi
c001b2d6:	ff 34 8d 7c 96 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6984]
c001b2dd:	e8 fa ed fe ff       	call   c000a0dc <LogicalDisk::read(unsigned long long, int, void*)>
c001b2e2:	83 c4 20             	add    esp,0x20
c001b2e5:	85 c0                	test   eax,eax
c001b2e7:	75 0e                	jne    c001b2f7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b2e9:	89 35 a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,esi
c001b2ef:	88 1d 44 45 02 c0    	mov    BYTE PTR ds:0xc0024544,bl
c001b2f5:	eb 18                	jmp    c001b30f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b2f7:	50                   	push   eax
c001b2f8:	68 00 08 00 00       	push   0x800
c001b2fd:	6a 00                	push   0x0
c001b2ff:	57                   	push   edi
c001b300:	e8 eb 51 fe ff       	call   c00004f0 <memset>
c001b305:	83 c4 10             	add    esp,0x10
c001b308:	b8 01 00 00 00       	mov    eax,0x1
c001b30d:	eb 0e                	jmp    c001b31d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b30f:	be c0 c8 02 c0       	mov    esi,0xc002c8c0
c001b314:	b9 00 08 00 00       	mov    ecx,0x800
c001b319:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b31b:	31 c0                	xor    eax,eax
c001b31d:	5b                   	pop    ebx
c001b31e:	5e                   	pop    esi
c001b31f:	5f                   	pop    edi
c001b320:	c3                   	ret    
c001b321:	90                   	nop

c001b322 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b322:	53                   	push   ebx
c001b323:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b329:	c7 05 a4 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c8a4,0xdeadbeef
c001b333:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b33a:	8d 58 41             	lea    ebx,[eax+0x41]
c001b33d:	0f be db             	movsx  ebx,bl
c001b340:	53                   	push   ebx
c001b341:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b345:	50                   	push   eax
c001b346:	6a 10                	push   0x10
c001b348:	e8 56 ff ff ff       	call   c001b2a3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b34d:	83 c4 10             	add    esp,0x10
c001b350:	31 d2                	xor    edx,edx
c001b352:	85 c0                	test   eax,eax
c001b354:	75 33                	jne    c001b389 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b356:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b35b:	75 2c                	jne    c001b389 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b35d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b362:	75 25                	jne    c001b389 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b364:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b369:	75 1e                	jne    c001b389 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b36b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b370:	75 17                	jne    c001b389 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b372:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b377:	75 10                	jne    c001b389 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b379:	83 ec 0c             	sub    esp,0xc
c001b37c:	53                   	push   ebx
c001b37d:	e8 ac b8 fe ff       	call   c0006c2e <init_percd>
c001b382:	83 c4 10             	add    esp,0x10
c001b385:	40                   	inc    eax
c001b386:	0f 95 c2             	setne  dl
c001b389:	88 d0                	mov    al,dl
c001b38b:	81 c4 08 08 00 00    	add    esp,0x808
c001b391:	5b                   	pop    ebx
c001b392:	c3                   	ret    
c001b393:	90                   	nop

c001b394 <ISO9660::ISO9660()>:
c001b394:	83 ec 0c             	sub    esp,0xc
c001b397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b39b:	83 ec 0c             	sub    esp,0xc
c001b39e:	50                   	push   eax
c001b39f:	e8 cc c9 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001b3a4:	83 c4 10             	add    esp,0x10
c001b3a7:	ba 98 33 02 c0       	mov    edx,0xc0023398
c001b3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3b0:	89 10                	mov    DWORD PTR [eax],edx
c001b3b2:	e8 89 b9 fe ff       	call   c0006d40 <fs_iso9660_init>
c001b3b7:	90                   	nop
c001b3b8:	83 c4 0c             	add    esp,0xc
c001b3bb:	c3                   	ret    

c001b3bc <SoundCard::beginPlayback()>:
c001b3bc:	c7 44 24 04 fc 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc00233fc
c001b3c4:	e9 1d 39 ff ff       	jmp    c000ece6 <KePanic(char const*)>
c001b3c9:	90                   	nop

c001b3ca <SoundCard::stopPlayback()>:
c001b3ca:	c7 44 24 04 fc 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc00233fc
c001b3d2:	e9 0f 39 ff ff       	jmp    c000ece6 <KePanic(char const*)>
c001b3d7:	90                   	nop

c001b3d8 <SoundCard::SoundCard(char const*)>:
c001b3d8:	83 ec 1c             	sub    esp,0x1c
c001b3db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3df:	83 ec 08             	sub    esp,0x8
c001b3e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3e6:	50                   	push   eax
c001b3e7:	e8 b4 dd fe ff       	call   c00091a0 <Device::Device(char const*)>
c001b3ec:	83 c4 10             	add    esp,0x10
c001b3ef:	ba 48 34 02 c0       	mov    edx,0xc0023448
c001b3f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3f8:	89 10                	mov    DWORD PTR [eax],edx
c001b3fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3fe:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b405:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b409:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b417:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b421:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b425:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b42f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b433:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b43d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b445:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b44a:	7f 1a                	jg     c001b466 <SoundCard::SoundCard(char const*)+0x8e>
c001b44c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b454:	83 c2 54             	add    edx,0x54
c001b457:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b45f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b464:	eb df                	jmp    c001b445 <SoundCard::SoundCard(char const*)+0x6d>
c001b466:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b46a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b471:	90                   	nop
c001b472:	83 c4 1c             	add    esp,0x1c
c001b475:	c3                   	ret    

c001b476 <SoundCard::~SoundCard()>:
c001b476:	83 ec 0c             	sub    esp,0xc
c001b479:	ba 48 34 02 c0       	mov    edx,0xc0023448
c001b47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b482:	89 10                	mov    DWORD PTR [eax],edx
c001b484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b488:	83 ec 0c             	sub    esp,0xc
c001b48b:	50                   	push   eax
c001b48c:	e8 af da fe ff       	call   c0008f40 <Device::~Device()>
c001b491:	83 c4 10             	add    esp,0x10
c001b494:	90                   	nop
c001b495:	83 c4 0c             	add    esp,0xc
c001b498:	c3                   	ret    
c001b499:	90                   	nop

c001b49a <SoundCard::~SoundCard()>:
c001b49a:	83 ec 0c             	sub    esp,0xc
c001b49d:	83 ec 0c             	sub    esp,0xc
c001b4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4a4:	e8 cd ff ff ff       	call   c001b476 <SoundCard::~SoundCard()>
c001b4a9:	83 c4 10             	add    esp,0x10
c001b4ac:	83 ec 08             	sub    esp,0x8
c001b4af:	68 e8 01 00 00       	push   0x1e8
c001b4b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4b8:	e8 4b 12 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c001b4bd:	83 c4 10             	add    esp,0x10
c001b4c0:	83 c4 0c             	add    esp,0xc
c001b4c3:	c3                   	ret    

c001b4c4 <SoundCard::configureRates(int, int, int)>:
c001b4c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b4c8:	31 c0                	xor    eax,eax
c001b4ca:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b4d1:	75 20                	jne    c001b4f3 <SoundCard::configureRates(int, int, int)+0x2f>
c001b4d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4d7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b4dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4e1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4eb:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b4f1:	b0 01                	mov    al,0x1
c001b4f3:	c3                   	ret    

c001b4f4 <SoundCard::getSamples16(int, short*)>:
c001b4f4:	55                   	push   ebp
c001b4f5:	57                   	push   edi
c001b4f6:	31 ff                	xor    edi,edi
c001b4f8:	56                   	push   esi
c001b4f9:	53                   	push   ebx
c001b4fa:	31 db                	xor    ebx,ebx
c001b4fc:	83 ec 10             	sub    esp,0x10
c001b4ff:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b503:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b507:	8d 04 36             	lea    eax,[esi+esi*1]
c001b50a:	50                   	push   eax
c001b50b:	6a 00                	push   0x0
c001b50d:	55                   	push   ebp
c001b50e:	e8 dd 4f fe ff       	call   c00004f0 <memset>
c001b513:	83 c4 10             	add    esp,0x10
c001b516:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b51a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001b521:	85 c0                	test   eax,eax
c001b523:	74 1b                	je     c001b540 <SoundCard::getSamples16(int, short*)+0x4c>
c001b525:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b529:	75 15                	jne    c001b540 <SoundCard::getSamples16(int, short*)+0x4c>
c001b52b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b52f:	55                   	push   ebp
c001b530:	56                   	push   esi
c001b531:	50                   	push   eax
c001b532:	e8 f1 02 00 00       	call   c001b828 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b537:	83 c4 10             	add    esp,0x10
c001b53a:	39 c7                	cmp    edi,eax
c001b53c:	7d 02                	jge    c001b540 <SoundCard::getSamples16(int, short*)+0x4c>
c001b53e:	89 c7                	mov    edi,eax
c001b540:	43                   	inc    ebx
c001b541:	83 fb 20             	cmp    ebx,0x20
c001b544:	75 d0                	jne    c001b516 <SoundCard::getSamples16(int, short*)+0x22>
c001b546:	83 c4 0c             	add    esp,0xc
c001b549:	89 f8                	mov    eax,edi
c001b54b:	5b                   	pop    ebx
c001b54c:	5e                   	pop    esi
c001b54d:	5f                   	pop    edi
c001b54e:	5d                   	pop    ebp
c001b54f:	c3                   	ret    

c001b550 <SoundCard::getSamples32(int, int*)>:
c001b550:	55                   	push   ebp
c001b551:	57                   	push   edi
c001b552:	31 ff                	xor    edi,edi
c001b554:	56                   	push   esi
c001b555:	31 f6                	xor    esi,esi
c001b557:	53                   	push   ebx
c001b558:	83 ec 10             	sub    esp,0x10
c001b55b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b55f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b563:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b567:	c1 e0 02             	shl    eax,0x2
c001b56a:	50                   	push   eax
c001b56b:	6a 00                	push   0x0
c001b56d:	55                   	push   ebp
c001b56e:	e8 7d 4f fe ff       	call   c00004f0 <memset>
c001b573:	83 c4 10             	add    esp,0x10
c001b576:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b57d:	85 c0                	test   eax,eax
c001b57f:	74 1b                	je     c001b59c <SoundCard::getSamples32(int, int*)+0x4c>
c001b581:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b585:	75 15                	jne    c001b59c <SoundCard::getSamples32(int, int*)+0x4c>
c001b587:	53                   	push   ebx
c001b588:	55                   	push   ebp
c001b589:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b58d:	50                   	push   eax
c001b58e:	e8 61 03 00 00       	call   c001b8f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b593:	83 c4 10             	add    esp,0x10
c001b596:	39 c6                	cmp    esi,eax
c001b598:	7d 02                	jge    c001b59c <SoundCard::getSamples32(int, int*)+0x4c>
c001b59a:	89 c6                	mov    esi,eax
c001b59c:	47                   	inc    edi
c001b59d:	83 ff 20             	cmp    edi,0x20
c001b5a0:	75 d4                	jne    c001b576 <SoundCard::getSamples32(int, int*)+0x26>
c001b5a2:	85 f6                	test   esi,esi
c001b5a4:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b5ab:	75 0f                	jne    c001b5bc <SoundCard::getSamples32(int, int*)+0x6c>
c001b5ad:	85 c0                	test   eax,eax
c001b5af:	74 1b                	je     c001b5cc <SoundCard::getSamples32(int, int*)+0x7c>
c001b5b1:	83 ec 0c             	sub    esp,0xc
c001b5b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5b6:	53                   	push   ebx
c001b5b7:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b5ba:	eb 0d                	jmp    c001b5c9 <SoundCard::getSamples32(int, int*)+0x79>
c001b5bc:	85 c0                	test   eax,eax
c001b5be:	75 0c                	jne    c001b5cc <SoundCard::getSamples32(int, int*)+0x7c>
c001b5c0:	83 ec 0c             	sub    esp,0xc
c001b5c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5c5:	53                   	push   ebx
c001b5c6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b5c9:	83 c4 10             	add    esp,0x10
c001b5cc:	83 c4 0c             	add    esp,0xc
c001b5cf:	89 f0                	mov    eax,esi
c001b5d1:	5b                   	pop    ebx
c001b5d2:	5e                   	pop    esi
c001b5d3:	5f                   	pop    edi
c001b5d4:	5d                   	pop    ebp
c001b5d5:	c3                   	ret    

c001b5d6 <SoundCard::addChannel(SoundPort*)>:
c001b5d6:	83 ec 0c             	sub    esp,0xc
c001b5d9:	31 c0                	xor    eax,eax
c001b5db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b5df:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b5e7:	74 1b                	je     c001b604 <SoundCard::addChannel(SoundPort*)+0x2e>
c001b5e9:	40                   	inc    eax
c001b5ea:	83 f8 20             	cmp    eax,0x20
c001b5ed:	75 f0                	jne    c001b5df <SoundCard::addChannel(SoundPort*)+0x9>
c001b5ef:	83 ec 0c             	sub    esp,0xc
c001b5f2:	68 21 34 02 c0       	push   0xc0023421
c001b5f7:	e8 ea 36 ff ff       	call   c000ece6 <KePanic(char const*)>
c001b5fc:	83 c4 10             	add    esp,0x10
c001b5ff:	83 c8 ff             	or     eax,0xffffffff
c001b602:	eb 0b                	jmp    c001b60f <SoundCard::addChannel(SoundPort*)+0x39>
c001b604:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b608:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b60f:	83 c4 0c             	add    esp,0xc
c001b612:	c3                   	ret    
c001b613:	90                   	nop

c001b614 <SoundCard::removeChannel(int)>:
c001b614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b618:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b61c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b627:	c3                   	ret    

c001b628 <SoundPort::SoundPort(int, int, int, int)>:
c001b628:	83 ec 0c             	sub    esp,0xc
c001b62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b63a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b642:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b646:	89 10                	mov    DWORD PTR [eax],edx
c001b648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b64c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b650:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b657:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b65b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b65e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b663:	75 13                	jne    c001b678 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b669:	8b 00                	mov    eax,DWORD PTR [eax]
c001b66b:	05 a0 0f 00 00       	add    eax,0xfa0
c001b670:	01 c0                	add    eax,eax
c001b672:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b676:	66 90                	xchg   ax,ax
c001b678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b67c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b680:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b687:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b692:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b695:	c1 e0 02             	shl    eax,0x2
c001b698:	83 ec 0c             	sub    esp,0xc
c001b69b:	50                   	push   eax
c001b69c:	e8 f0 32 ff ff       	call   c000e991 <malloc>
c001b6a1:	83 c4 10             	add    esp,0x10
c001b6a4:	89 c2                	mov    edx,eax
c001b6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6aa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b6ad:	90                   	nop
c001b6ae:	83 c4 0c             	add    esp,0xc
c001b6b1:	c3                   	ret    
c001b6b2:	66 90                	xchg   ax,ax

c001b6b4 <SoundPort::~SoundPort()>:
c001b6b4:	83 ec 0c             	sub    esp,0xc
c001b6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b6be:	85 c0                	test   eax,eax
c001b6c0:	74 1e                	je     c001b6e0 <SoundPort::~SoundPort()+0x2c>
c001b6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6c6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b6c9:	83 ec 0c             	sub    esp,0xc
c001b6cc:	50                   	push   eax
c001b6cd:	e8 cf 32 ff ff       	call   c000e9a1 <free>
c001b6d2:	83 c4 10             	add    esp,0x10
c001b6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b6e0:	90                   	nop
c001b6e1:	83 c4 0c             	add    esp,0xc
c001b6e4:	c3                   	ret    
c001b6e5:	90                   	nop
c001b6e6:	66 90                	xchg   ax,ax

c001b6e8 <SoundPort::unpause()>:
c001b6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6ec:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b6f0:	c3                   	ret    
c001b6f1:	90                   	nop
c001b6f2:	66 90                	xchg   ax,ax

c001b6f4 <SoundPort::pause()>:
c001b6f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6f8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b6fc:	c3                   	ret    
c001b6fd:	90                   	nop
c001b6fe:	66 90                	xchg   ax,ax

c001b700 <SoundPort::getBufferUsed()>:
c001b700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b704:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b707:	c3                   	ret    

c001b708 <SoundPort::getBufferSize()>:
c001b708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b70c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b70f:	c3                   	ret    

c001b710 <SoundPort::buffer16(short*, int)>:
c001b710:	55                   	push   ebp
c001b711:	57                   	push   edi
c001b712:	56                   	push   esi
c001b713:	53                   	push   ebx
c001b714:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b718:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b71c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b71f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b722:	74 68                	je     c001b78c <SoundPort::buffer16(short*, int)+0x7c>
c001b724:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b728:	85 c9                	test   ecx,ecx
c001b72a:	7e 60                	jle    c001b78c <SoundPort::buffer16(short*, int)+0x7c>
c001b72c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001b730:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b733:	c1 e1 0f             	shl    ecx,0xf
c001b736:	8d 70 01             	lea    esi,[eax+0x1]
c001b739:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b73c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b73f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b742:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b745:	74 4d                	je     c001b794 <SoundPort::buffer16(short*, int)+0x84>
c001b747:	31 f6                	xor    esi,esi
c001b749:	eb 21                	jmp    c001b76c <SoundPort::buffer16(short*, int)+0x5c>
c001b74b:	90                   	nop
c001b74c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001b751:	8d 79 01             	lea    edi,[ecx+0x1]
c001b754:	c1 e3 0f             	shl    ebx,0xf
c001b757:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001b75a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001b75d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001b760:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b763:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b766:	74 1c                	je     c001b784 <SoundPort::buffer16(short*, int)+0x74>
c001b768:	89 c6                	mov    esi,eax
c001b76a:	66 90                	xchg   ax,ax
c001b76c:	8d 46 01             	lea    eax,[esi+0x1]
c001b76f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b773:	75 d7                	jne    c001b74c <SoundPort::buffer16(short*, int)+0x3c>
c001b775:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b779:	8d 76 00             	lea    esi,[esi+0x0]
c001b77c:	5b                   	pop    ebx
c001b77d:	5e                   	pop    esi
c001b77e:	5f                   	pop    edi
c001b77f:	5d                   	pop    ebp
c001b780:	c3                   	ret    
c001b781:	8d 76 00             	lea    esi,[esi+0x0]
c001b784:	5b                   	pop    ebx
c001b785:	8d 46 02             	lea    eax,[esi+0x2]
c001b788:	5e                   	pop    esi
c001b789:	5f                   	pop    edi
c001b78a:	5d                   	pop    ebp
c001b78b:	c3                   	ret    
c001b78c:	5b                   	pop    ebx
c001b78d:	31 c0                	xor    eax,eax
c001b78f:	5e                   	pop    esi
c001b790:	5f                   	pop    edi
c001b791:	5d                   	pop    ebp
c001b792:	c3                   	ret    
c001b793:	90                   	nop
c001b794:	b8 01 00 00 00       	mov    eax,0x1
c001b799:	eb e1                	jmp    c001b77c <SoundPort::buffer16(short*, int)+0x6c>
c001b79b:	90                   	nop

c001b79c <SoundPort::buffer32(int*, int)>:
c001b79c:	55                   	push   ebp
c001b79d:	57                   	push   edi
c001b79e:	56                   	push   esi
c001b79f:	53                   	push   ebx
c001b7a0:	83 ec 04             	sub    esp,0x4
c001b7a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b7a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ab:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b7ae:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b7b2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7b5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b7b8:	74 5a                	je     c001b814 <SoundPort::buffer32(int*, int)+0x78>
c001b7ba:	85 c0                	test   eax,eax
c001b7bc:	7e 56                	jle    c001b814 <SoundPort::buffer32(int*, int)+0x78>
c001b7be:	8d 71 01             	lea    esi,[ecx+0x1]
c001b7c1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b7c4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b7c7:	8b 37                	mov    esi,DWORD PTR [edi]
c001b7c9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b7cc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b7cf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b7d2:	74 4c                	je     c001b820 <SoundPort::buffer32(int*, int)+0x84>
c001b7d4:	31 f6                	xor    esi,esi
c001b7d6:	eb 1c                	jmp    c001b7f4 <SoundPort::buffer32(int*, int)+0x58>
c001b7d8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b7db:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b7de:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b7e1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b7e4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b7e8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b7eb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b7ee:	74 18                	je     c001b808 <SoundPort::buffer32(int*, int)+0x6c>
c001b7f0:	89 de                	mov    esi,ebx
c001b7f2:	66 90                	xchg   ax,ax
c001b7f4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b7f7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b7fa:	75 dc                	jne    c001b7d8 <SoundPort::buffer32(int*, int)+0x3c>
c001b7fc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b7ff:	90                   	nop
c001b800:	83 c4 04             	add    esp,0x4
c001b803:	5b                   	pop    ebx
c001b804:	5e                   	pop    esi
c001b805:	5f                   	pop    edi
c001b806:	5d                   	pop    ebp
c001b807:	c3                   	ret    
c001b808:	83 c4 04             	add    esp,0x4
c001b80b:	8d 46 02             	lea    eax,[esi+0x2]
c001b80e:	5b                   	pop    ebx
c001b80f:	5e                   	pop    esi
c001b810:	5f                   	pop    edi
c001b811:	5d                   	pop    ebp
c001b812:	c3                   	ret    
c001b813:	90                   	nop
c001b814:	83 c4 04             	add    esp,0x4
c001b817:	31 c0                	xor    eax,eax
c001b819:	5b                   	pop    ebx
c001b81a:	5e                   	pop    esi
c001b81b:	5f                   	pop    edi
c001b81c:	5d                   	pop    ebp
c001b81d:	c3                   	ret    
c001b81e:	66 90                	xchg   ax,ax
c001b820:	b8 01 00 00 00       	mov    eax,0x1
c001b825:	eb d9                	jmp    c001b800 <SoundPort::buffer32(int*, int)+0x64>
c001b827:	90                   	nop

c001b828 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b828:	57                   	push   edi
c001b829:	56                   	push   esi
c001b82a:	53                   	push   ebx
c001b82b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b82f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b833:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b839:	39 03                	cmp    DWORD PTR [ebx],eax
c001b83b:	74 13                	je     c001b850 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b83d:	83 ec 0c             	sub    esp,0xc
c001b840:	68 74 34 02 c0       	push   0xc0023474
c001b845:	e8 9c 34 ff ff       	call   c000ece6 <KePanic(char const*)>
c001b84a:	83 c4 10             	add    esp,0x10
c001b84d:	8d 76 00             	lea    esi,[esi+0x0]
c001b850:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b856:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b859:	74 11                	je     c001b86c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b85b:	83 ec 0c             	sub    esp,0xc
c001b85e:	68 b3 34 02 c0       	push   0xc00234b3
c001b863:	e8 7e 34 ff ff       	call   c000ece6 <KePanic(char const*)>
c001b868:	83 c4 10             	add    esp,0x10
c001b86b:	90                   	nop
c001b86c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b872:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b875:	74 11                	je     c001b888 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b877:	83 ec 0c             	sub    esp,0xc
c001b87a:	68 b3 34 02 c0       	push   0xc00234b3
c001b87f:	e8 62 34 ff ff       	call   c000ece6 <KePanic(char const*)>
c001b884:	83 c4 10             	add    esp,0x10
c001b887:	90                   	nop
c001b888:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b88b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b88f:	7e 07                	jle    c001b898 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b891:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b895:	8d 76 00             	lea    esi,[esi+0x0]
c001b898:	85 f6                	test   esi,esi
c001b89a:	7e 2c                	jle    c001b8c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b89c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8a0:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b8a3:	31 c9                	xor    ecx,ecx
c001b8a5:	01 d7                	add    edi,edx
c001b8a7:	90                   	nop
c001b8a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b8ab:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b8ae:	85 c0                	test   eax,eax
c001b8b0:	79 06                	jns    c001b8b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b8b2:	05 ff 7f 00 00       	add    eax,0x7fff
c001b8b7:	90                   	nop
c001b8b8:	c1 f8 0f             	sar    eax,0xf
c001b8bb:	83 c1 04             	add    ecx,0x4
c001b8be:	66 01 02             	add    WORD PTR [edx],ax
c001b8c1:	83 c2 02             	add    edx,0x2
c001b8c4:	39 d7                	cmp    edi,edx
c001b8c6:	75 e0                	jne    c001b8a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b8c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b8cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b8ce:	83 ec 04             	sub    esp,0x4
c001b8d1:	29 f0                	sub    eax,esi
c001b8d3:	c1 e0 02             	shl    eax,0x2
c001b8d6:	50                   	push   eax
c001b8d7:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b8da:	50                   	push   eax
c001b8db:	52                   	push   edx
c001b8dc:	e8 ef 4a fe ff       	call   c00003d0 <memmove>
c001b8e1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b8e4:	83 c4 10             	add    esp,0x10
c001b8e7:	29 f0                	sub    eax,esi
c001b8e9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b8ec:	89 f0                	mov    eax,esi
c001b8ee:	5b                   	pop    ebx
c001b8ef:	5e                   	pop    esi
c001b8f0:	5f                   	pop    edi
c001b8f1:	c3                   	ret    
c001b8f2:	66 90                	xchg   ax,ax

c001b8f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b8f4:	57                   	push   edi
c001b8f5:	56                   	push   esi
c001b8f6:	53                   	push   ebx
c001b8f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b8ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b903:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b909:	39 06                	cmp    DWORD PTR [esi],eax
c001b90b:	74 13                	je     c001b920 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b90d:	83 ec 0c             	sub    esp,0xc
c001b910:	68 94 34 02 c0       	push   0xc0023494
c001b915:	e8 cc 33 ff ff       	call   c000ece6 <KePanic(char const*)>
c001b91a:	83 c4 10             	add    esp,0x10
c001b91d:	8d 76 00             	lea    esi,[esi+0x0]
c001b920:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b926:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b929:	74 11                	je     c001b93c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b92b:	83 ec 0c             	sub    esp,0xc
c001b92e:	68 cf 34 02 c0       	push   0xc00234cf
c001b933:	e8 ae 33 ff ff       	call   c000ece6 <KePanic(char const*)>
c001b938:	83 c4 10             	add    esp,0x10
c001b93b:	90                   	nop
c001b93c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b942:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b945:	74 11                	je     c001b958 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b947:	83 ec 0c             	sub    esp,0xc
c001b94a:	68 cf 34 02 c0       	push   0xc00234cf
c001b94f:	e8 92 33 ff ff       	call   c000ece6 <KePanic(char const*)>
c001b954:	83 c4 10             	add    esp,0x10
c001b957:	90                   	nop
c001b958:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b95b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b95f:	7e 07                	jle    c001b968 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b961:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b965:	8d 76 00             	lea    esi,[esi+0x0]
c001b968:	85 ff                	test   edi,edi
c001b96a:	7e 1c                	jle    c001b988 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b96c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b973:	31 c0                	xor    eax,eax
c001b975:	8d 76 00             	lea    esi,[esi+0x0]
c001b978:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b97b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b97e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b981:	83 c0 04             	add    eax,0x4
c001b984:	39 c1                	cmp    ecx,eax
c001b986:	75 f0                	jne    c001b978 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b988:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b98b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b98e:	83 ec 04             	sub    esp,0x4
c001b991:	29 f8                	sub    eax,edi
c001b993:	c1 e0 02             	shl    eax,0x2
c001b996:	50                   	push   eax
c001b997:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b99a:	50                   	push   eax
c001b99b:	52                   	push   edx
c001b99c:	e8 2f 4a fe ff       	call   c00003d0 <memmove>
c001b9a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b9a4:	83 c4 10             	add    esp,0x10
c001b9a7:	29 f8                	sub    eax,edi
c001b9a9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b9ac:	89 f8                	mov    eax,edi
c001b9ae:	5b                   	pop    ebx
c001b9af:	5e                   	pop    esi
c001b9b0:	5f                   	pop    edi
c001b9b1:	c3                   	ret    

c001b9b2 <PCI::open(int, int, void*)>:
c001b9b2:	83 ec 18             	sub    esp,0x18
c001b9b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b9b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b9bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b9c3:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9c5:	50                   	push   eax
c001b9c6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b9c9:	31 c0                	xor    eax,eax
c001b9cb:	83 c4 1c             	add    esp,0x1c
c001b9ce:	c3                   	ret    
c001b9cf:	90                   	nop

c001b9d0 <PCI::close(int, int, void*)>:
c001b9d0:	31 c0                	xor    eax,eax
c001b9d2:	c3                   	ret    
c001b9d3:	90                   	nop

c001b9d4 <PCI::PCI()>:
c001b9d4:	83 ec 0c             	sub    esp,0xc
c001b9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9db:	83 ec 08             	sub    esp,0x8
c001b9de:	68 eb 34 02 c0       	push   0xc00234eb
c001b9e3:	50                   	push   eax
c001b9e4:	e8 03 cf fe ff       	call   c00088ec <Bus::Bus(char const*)>
c001b9e9:	83 c4 10             	add    esp,0x10
c001b9ec:	ba f8 35 02 c0       	mov    edx,0xc00235f8
c001b9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f5:	89 10                	mov    DWORD PTR [eax],edx
c001b9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fb:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ba05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba09:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001ba0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba12:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba18:	0f b6 d0             	movzx  edx,al
c001ba1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ba26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba30:	0f b6 d0             	movzx  edx,al
c001ba33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba37:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ba3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba40:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba46:	8d 50 01             	lea    edx,[eax+0x1]
c001ba49:	88 d1                	mov    cl,dl
c001ba4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba4f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ba55:	0f b6 d0             	movzx  edx,al
c001ba58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ba60:	83 c9 c0             	or     ecx,0xffffffc0
c001ba63:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ba67:	90                   	nop
c001ba68:	83 c4 0c             	add    esp,0xc
c001ba6b:	c3                   	ret    

c001ba6c <PCI::readBAR8(unsigned int, int)>:
c001ba6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba74:	f6 c2 01             	test   dl,0x1
c001ba77:	74 07                	je     c001ba80 <PCI::readBAR8(unsigned int, int)+0x14>
c001ba79:	83 e2 fc             	and    edx,0xfffffffc
c001ba7c:	01 c2                	add    edx,eax
c001ba7e:	ec                   	in     al,dx
c001ba7f:	c3                   	ret    
c001ba80:	83 e2 f0             	and    edx,0xfffffff0
c001ba83:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ba86:	c3                   	ret    
c001ba87:	90                   	nop

c001ba88 <PCI::readBAR16(unsigned int, int)>:
c001ba88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba90:	f6 c2 01             	test   dl,0x1
c001ba93:	74 08                	je     c001ba9d <PCI::readBAR16(unsigned int, int)+0x15>
c001ba95:	83 e2 fc             	and    edx,0xfffffffc
c001ba98:	01 c2                	add    edx,eax
c001ba9a:	66 ed                	in     ax,dx
c001ba9c:	c3                   	ret    
c001ba9d:	83 e2 f0             	and    edx,0xfffffff0
c001baa0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001baa4:	c3                   	ret    
c001baa5:	90                   	nop

c001baa6 <PCI::readBAR32(unsigned int, int)>:
c001baa6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001baaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baae:	f6 c2 01             	test   dl,0x1
c001bab1:	74 07                	je     c001baba <PCI::readBAR32(unsigned int, int)+0x14>
c001bab3:	83 e2 fc             	and    edx,0xfffffffc
c001bab6:	01 c2                	add    edx,eax
c001bab8:	ed                   	in     eax,dx
c001bab9:	c3                   	ret    
c001baba:	83 e2 f0             	and    edx,0xfffffff0
c001babd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001bac0:	c3                   	ret    
c001bac1:	90                   	nop

c001bac2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001bac2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bac6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bace:	f6 c2 01             	test   dl,0x1
c001bad1:	74 07                	je     c001bada <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001bad3:	83 e2 fc             	and    edx,0xfffffffc
c001bad6:	01 ca                	add    edx,ecx
c001bad8:	ee                   	out    dx,al
c001bad9:	c3                   	ret    
c001bada:	83 e2 f0             	and    edx,0xfffffff0
c001badd:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001bae0:	c3                   	ret    
c001bae1:	90                   	nop

c001bae2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001bae2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bae6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001baee:	f6 c2 01             	test   dl,0x1
c001baf1:	74 08                	je     c001bafb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001baf3:	83 e2 fc             	and    edx,0xfffffffc
c001baf6:	01 ca                	add    edx,ecx
c001baf8:	66 ef                	out    dx,ax
c001bafa:	c3                   	ret    
c001bafb:	83 e2 f0             	and    edx,0xfffffff0
c001bafe:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001bb02:	c3                   	ret    
c001bb03:	90                   	nop

c001bb04 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001bb04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bb08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb10:	f6 c2 01             	test   dl,0x1
c001bb13:	74 07                	je     c001bb1c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001bb15:	83 e2 fc             	and    edx,0xfffffffc
c001bb18:	01 ca                	add    edx,ecx
c001bb1a:	ef                   	out    dx,eax
c001bb1b:	c3                   	ret    
c001bb1c:	83 e2 f0             	and    edx,0xfffffff0
c001bb1f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001bb22:	c3                   	ret    
c001bb23:	90                   	nop

c001bb24 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bb24:	55                   	push   ebp
c001bb25:	57                   	push   edi
c001bb26:	56                   	push   esi
c001bb27:	53                   	push   ebx
c001bb28:	83 ec 0c             	sub    esp,0xc
c001bb2b:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001bb30:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001bb34:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bb38:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb3c:	83 fe 07             	cmp    esi,0x7
c001bb3f:	76 10                	jbe    c001bb51 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001bb41:	83 ec 0c             	sub    esp,0xc
c001bb44:	68 f3 34 02 c0       	push   0xc00234f3
c001bb49:	e8 98 31 ff ff       	call   c000ece6 <KePanic(char const*)>
c001bb4e:	83 c4 10             	add    esp,0x10
c001bb51:	0f b6 db             	movzx  ebx,bl
c001bb54:	83 fb 0f             	cmp    ebx,0xf
c001bb57:	76 10                	jbe    c001bb69 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001bb59:	83 ec 0c             	sub    esp,0xc
c001bb5c:	68 23 35 02 c0       	push   0xc0023523
c001bb61:	e8 80 31 ff ff       	call   c000ece6 <KePanic(char const*)>
c001bb66:	83 c4 10             	add    esp,0x10
c001bb69:	8d 04 36             	lea    eax,[esi+esi*1]
c001bb6c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bb71:	83 c8 f0             	or     eax,0xfffffff0
c001bb74:	ee                   	out    dx,al
c001bb75:	ba fa 0c 00 00       	mov    edx,0xcfa
c001bb7a:	89 e8                	mov    eax,ebp
c001bb7c:	ee                   	out    dx,al
c001bb7d:	83 c4 0c             	add    esp,0xc
c001bb80:	89 d8                	mov    eax,ebx
c001bb82:	89 f9                	mov    ecx,edi
c001bb84:	c1 e0 08             	shl    eax,0x8
c001bb87:	0f b6 d9             	movzx  ebx,cl
c001bb8a:	83 e3 fc             	and    ebx,0xfffffffc
c001bb8d:	09 d8                	or     eax,ebx
c001bb8f:	5b                   	pop    ebx
c001bb90:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001bb95:	5e                   	pop    esi
c001bb96:	5f                   	pop    edi
c001bb97:	5d                   	pop    ebp
c001bb98:	c3                   	ret    
c001bb99:	90                   	nop

c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bb9a:	57                   	push   edi
c001bb9b:	56                   	push   esi
c001bb9c:	53                   	push   ebx
c001bb9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bba1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bba5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001bbab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bbaf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bbb3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bbb7:	83 ff 01             	cmp    edi,0x1
c001bbba:	75 3f                	jne    c001bbfb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001bbbc:	89 de                	mov    esi,ebx
c001bbbe:	0f b6 c0             	movzx  eax,al
c001bbc1:	81 e6 fc 00 00 00    	and    esi,0xfc
c001bbc7:	c1 e0 10             	shl    eax,0x10
c001bbca:	0f b6 c9             	movzx  ecx,cl
c001bbcd:	09 f0                	or     eax,esi
c001bbcf:	c1 e1 08             	shl    ecx,0x8
c001bbd2:	0f b6 d2             	movzx  edx,dl
c001bbd5:	09 c8                	or     eax,ecx
c001bbd7:	c1 e2 0b             	shl    edx,0xb
c001bbda:	09 d0                	or     eax,edx
c001bbdc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bbe1:	0d 00 00 00 80       	or     eax,0x80000000
c001bbe6:	ef                   	out    dx,eax
c001bbe7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bbec:	ed                   	in     eax,dx
c001bbed:	83 e3 02             	and    ebx,0x2
c001bbf0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bbf7:	d3 e8                	shr    eax,cl
c001bbf9:	eb 44                	jmp    c001bc3f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bbfb:	83 ff 02             	cmp    edi,0x2
c001bbfe:	75 2d                	jne    c001bc2d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001bc00:	83 ec 0c             	sub    esp,0xc
c001bc03:	0f b6 c9             	movzx  ecx,cl
c001bc06:	0f b6 d2             	movzx  edx,dl
c001bc09:	0f b6 fb             	movzx  edi,bl
c001bc0c:	0f b6 c0             	movzx  eax,al
c001bc0f:	57                   	push   edi
c001bc10:	51                   	push   ecx
c001bc11:	52                   	push   edx
c001bc12:	50                   	push   eax
c001bc13:	56                   	push   esi
c001bc14:	e8 0b ff ff ff       	call   c001bb24 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc19:	89 c2                	mov    edx,eax
c001bc1b:	ed                   	in     eax,dx
c001bc1c:	83 e3 02             	and    ebx,0x2
c001bc1f:	83 c4 20             	add    esp,0x20
c001bc22:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bc29:	d3 e8                	shr    eax,cl
c001bc2b:	eb 12                	jmp    c001bc3f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bc2d:	83 ec 0c             	sub    esp,0xc
c001bc30:	68 53 35 02 c0       	push   0xc0023553
c001bc35:	e8 ac 30 ff ff       	call   c000ece6 <KePanic(char const*)>
c001bc3a:	83 c4 10             	add    esp,0x10
c001bc3d:	31 c0                	xor    eax,eax
c001bc3f:	5b                   	pop    ebx
c001bc40:	5e                   	pop    esi
c001bc41:	5f                   	pop    edi
c001bc42:	c3                   	ret    
c001bc43:	90                   	nop

c001bc44 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bc44:	83 ec 18             	sub    esp,0x18
c001bc47:	6a 00                	push   0x0
c001bc49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc4e:	50                   	push   eax
c001bc4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc54:	50                   	push   eax
c001bc55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc5a:	50                   	push   eax
c001bc5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc5f:	e8 36 ff ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc64:	83 c4 2c             	add    esp,0x2c
c001bc67:	c3                   	ret    

c001bc68 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bc68:	83 ec 18             	sub    esp,0x18
c001bc6b:	6a 0e                	push   0xe
c001bc6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc72:	50                   	push   eax
c001bc73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc78:	50                   	push   eax
c001bc79:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc7e:	50                   	push   eax
c001bc7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc83:	e8 12 ff ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc88:	83 c4 2c             	add    esp,0x2c
c001bc8b:	0f b6 c0             	movzx  eax,al
c001bc8e:	c3                   	ret    
c001bc8f:	90                   	nop

c001bc90 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bc90:	55                   	push   ebp
c001bc91:	57                   	push   edi
c001bc92:	56                   	push   esi
c001bc93:	53                   	push   ebx
c001bc94:	83 ec 18             	sub    esp,0x18
c001bc97:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001bc9c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001bca1:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001bca6:	6a 0a                	push   0xa
c001bca8:	56                   	push   esi
c001bca9:	55                   	push   ebp
c001bcaa:	57                   	push   edi
c001bcab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bcaf:	e8 e6 fe ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcb4:	83 c4 14             	add    esp,0x14
c001bcb7:	89 c3                	mov    ebx,eax
c001bcb9:	6a 0a                	push   0xa
c001bcbb:	0f b6 db             	movzx  ebx,bl
c001bcbe:	56                   	push   esi
c001bcbf:	55                   	push   ebp
c001bcc0:	57                   	push   edi
c001bcc1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bcc5:	e8 d0 fe ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcca:	83 c4 2c             	add    esp,0x2c
c001bccd:	25 00 ff 00 00       	and    eax,0xff00
c001bcd2:	09 d8                	or     eax,ebx
c001bcd4:	5b                   	pop    ebx
c001bcd5:	5e                   	pop    esi
c001bcd6:	5f                   	pop    edi
c001bcd7:	5d                   	pop    ebp
c001bcd8:	c3                   	ret    
c001bcd9:	90                   	nop

c001bcda <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bcda:	83 ec 18             	sub    esp,0x18
c001bcdd:	6a 08                	push   0x8
c001bcdf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bce4:	50                   	push   eax
c001bce5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcea:	50                   	push   eax
c001bceb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcf0:	50                   	push   eax
c001bcf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bcf5:	e8 a0 fe ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcfa:	83 c4 2c             	add    esp,0x2c
c001bcfd:	0f b6 c4             	movzx  eax,ah
c001bd00:	c3                   	ret    
c001bd01:	90                   	nop

c001bd02 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001bd02:	83 ec 18             	sub    esp,0x18
c001bd05:	6a 08                	push   0x8
c001bd07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd0c:	50                   	push   eax
c001bd0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd12:	50                   	push   eax
c001bd13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd18:	50                   	push   eax
c001bd19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd1d:	e8 78 fe ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd22:	83 c4 2c             	add    esp,0x2c
c001bd25:	c3                   	ret    

c001bd26 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001bd26:	83 ec 18             	sub    esp,0x18
c001bd29:	6a 3c                	push   0x3c
c001bd2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd30:	50                   	push   eax
c001bd31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd36:	50                   	push   eax
c001bd37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd3c:	50                   	push   eax
c001bd3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd41:	e8 54 fe ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd46:	83 c4 2c             	add    esp,0x2c
c001bd49:	c3                   	ret    

c001bd4a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001bd4a:	83 ec 18             	sub    esp,0x18
c001bd4d:	6a 18                	push   0x18
c001bd4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd54:	50                   	push   eax
c001bd55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd5a:	50                   	push   eax
c001bd5b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd60:	50                   	push   eax
c001bd61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd65:	e8 30 fe ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd6a:	83 c4 2c             	add    esp,0x2c
c001bd6d:	0f b6 c4             	movzx  eax,ah
c001bd70:	c3                   	ret    
c001bd71:	90                   	nop

c001bd72 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bd72:	55                   	push   ebp
c001bd73:	57                   	push   edi
c001bd74:	56                   	push   esi
c001bd75:	53                   	push   ebx
c001bd76:	83 ec 28             	sub    esp,0x28
c001bd79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bd7d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001bd82:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001bd87:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001bd8c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001bd93:	8d 43 12             	lea    eax,[ebx+0x12]
c001bd96:	83 c3 10             	add    ebx,0x10
c001bd99:	0f b6 c0             	movzx  eax,al
c001bd9c:	0f b6 db             	movzx  ebx,bl
c001bd9f:	50                   	push   eax
c001bda0:	51                   	push   ecx
c001bda1:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001bda5:	57                   	push   edi
c001bda6:	55                   	push   ebp
c001bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bdab:	e8 ea fd ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bdb0:	83 c4 14             	add    esp,0x14
c001bdb3:	89 c6                	mov    esi,eax
c001bdb5:	53                   	push   ebx
c001bdb6:	c1 e6 10             	shl    esi,0x10
c001bdb9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bdbd:	51                   	push   ecx
c001bdbe:	57                   	push   edi
c001bdbf:	55                   	push   ebp
c001bdc0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bdc4:	e8 d1 fd ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bdc9:	83 c4 3c             	add    esp,0x3c
c001bdcc:	0f b7 c0             	movzx  eax,ax
c001bdcf:	5b                   	pop    ebx
c001bdd0:	09 f0                	or     eax,esi
c001bdd2:	5e                   	pop    esi
c001bdd3:	5f                   	pop    edi
c001bdd4:	5d                   	pop    ebp
c001bdd5:	c3                   	ret    

c001bdd6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001bdd6:	55                   	push   ebp
c001bdd7:	57                   	push   edi
c001bdd8:	56                   	push   esi
c001bdd9:	53                   	push   ebx
c001bdda:	83 ec 0c             	sub    esp,0xc
c001bddd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bde1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bde5:	89 f5                	mov    ebp,esi
c001bde7:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001bded:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bdf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bdf5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bdf9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bdfd:	83 f9 01             	cmp    ecx,0x1
c001be00:	75 5d                	jne    c001be5f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001be02:	0f b6 c8             	movzx  ecx,al
c001be05:	0f b6 d2             	movzx  edx,dl
c001be08:	c1 e1 10             	shl    ecx,0x10
c001be0b:	c1 e2 0b             	shl    edx,0xb
c001be0e:	89 f0                	mov    eax,esi
c001be10:	25 fc 00 00 00       	and    eax,0xfc
c001be15:	09 c1                	or     ecx,eax
c001be17:	89 e8                	mov    eax,ebp
c001be19:	0f b6 c0             	movzx  eax,al
c001be1c:	c1 e0 08             	shl    eax,0x8
c001be1f:	09 c1                	or     ecx,eax
c001be21:	09 d1                	or     ecx,edx
c001be23:	ba f8 0c 00 00       	mov    edx,0xcf8
c001be28:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001be2e:	89 c8                	mov    eax,ecx
c001be30:	ef                   	out    dx,eax
c001be31:	ba fc 0c 00 00       	mov    edx,0xcfc
c001be36:	ed                   	in     eax,dx
c001be37:	0f b7 db             	movzx  ebx,bx
c001be3a:	83 e6 02             	and    esi,0x2
c001be3d:	74 0a                	je     c001be49 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001be3f:	0f b7 d0             	movzx  edx,ax
c001be42:	c1 e3 10             	shl    ebx,0x10
c001be45:	09 d3                	or     ebx,edx
c001be47:	eb 05                	jmp    c001be4e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001be49:	66 31 c0             	xor    ax,ax
c001be4c:	09 c3                	or     ebx,eax
c001be4e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001be53:	89 c8                	mov    eax,ecx
c001be55:	ef                   	out    dx,eax
c001be56:	ba fc 0c 00 00       	mov    edx,0xcfc
c001be5b:	89 d8                	mov    eax,ebx
c001be5d:	eb 41                	jmp    c001bea0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001be5f:	83 f9 02             	cmp    ecx,0x2
c001be62:	75 45                	jne    c001bea9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001be64:	83 ec 0c             	sub    esp,0xc
c001be67:	0f b6 d2             	movzx  edx,dl
c001be6a:	89 f1                	mov    ecx,esi
c001be6c:	0f b6 c0             	movzx  eax,al
c001be6f:	0f b6 f1             	movzx  esi,cl
c001be72:	89 e9                	mov    ecx,ebp
c001be74:	56                   	push   esi
c001be75:	0f b6 c9             	movzx  ecx,cl
c001be78:	51                   	push   ecx
c001be79:	52                   	push   edx
c001be7a:	50                   	push   eax
c001be7b:	57                   	push   edi
c001be7c:	e8 a3 fc ff ff       	call   c001bb24 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001be81:	89 c2                	mov    edx,eax
c001be83:	ed                   	in     eax,dx
c001be84:	83 c4 20             	add    esp,0x20
c001be87:	0f b7 db             	movzx  ebx,bx
c001be8a:	f6 c2 02             	test   dl,0x2
c001be8d:	74 0c                	je     c001be9b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001be8f:	0f b7 c8             	movzx  ecx,ax
c001be92:	89 d8                	mov    eax,ebx
c001be94:	c1 e0 10             	shl    eax,0x10
c001be97:	09 c8                	or     eax,ecx
c001be99:	eb 05                	jmp    c001bea0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001be9b:	66 31 c0             	xor    ax,ax
c001be9e:	09 d8                	or     eax,ebx
c001bea0:	ef                   	out    dx,eax
c001bea1:	83 c4 0c             	add    esp,0xc
c001bea4:	5b                   	pop    ebx
c001bea5:	5e                   	pop    esi
c001bea6:	5f                   	pop    edi
c001bea7:	5d                   	pop    ebp
c001bea8:	c3                   	ret    
c001bea9:	c7 44 24 20 53 35 02 c0 	mov    DWORD PTR [esp+0x20],0xc0023553
c001beb1:	83 c4 0c             	add    esp,0xc
c001beb4:	5b                   	pop    ebx
c001beb5:	5e                   	pop    esi
c001beb6:	5f                   	pop    edi
c001beb7:	5d                   	pop    ebp
c001beb8:	e9 29 2e ff ff       	jmp    c000ece6 <KePanic(char const*)>
c001bebd:	90                   	nop

c001bebe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001bebe:	55                   	push   ebp
c001bebf:	57                   	push   edi
c001bec0:	56                   	push   esi
c001bec1:	53                   	push   ebx
c001bec2:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001bec8:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001becf:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c001bed6:	0f 85 bd 00 00 00    	jne    c001bf99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001bedc:	83 ec 0c             	sub    esp,0xc
c001bedf:	68 14 01 00 00       	push   0x114
c001bee4:	e8 a8 2a ff ff       	call   c000e991 <malloc>
c001bee9:	83 c4 0c             	add    esp,0xc
c001beec:	89 c3                	mov    ebx,eax
c001beee:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001bef4:	68 59 35 02 c0       	push   0xc0023559
c001bef9:	50                   	push   eax
c001befa:	e8 13 c2 fe ff       	call   c0008112 <File::File(char const*, Process*)>
c001beff:	83 c4 10             	add    esp,0x10
c001bf02:	85 db                	test   ebx,ebx
c001bf04:	0f 84 67 02 00 00    	je     c001c171 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bf0a:	56                   	push   esi
c001bf0b:	56                   	push   esi
c001bf0c:	6a 01                	push   0x1
c001bf0e:	53                   	push   ebx
c001bf0f:	e8 1c c2 fe ff       	call   c0008130 <File::open(FileOpenMode)>
c001bf14:	83 c4 10             	add    esp,0x10
c001bf17:	85 c0                	test   eax,eax
c001bf19:	0f 85 52 02 00 00    	jne    c001c171 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bf1f:	52                   	push   edx
c001bf20:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001bf24:	50                   	push   eax
c001bf25:	8d 44 24 48          	lea    eax,[esp+0x48]
c001bf29:	50                   	push   eax
c001bf2a:	53                   	push   ebx
c001bf2b:	e8 02 c5 fe ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c001bf30:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bf34:	40                   	inc    eax
c001bf35:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf38:	e8 54 2a ff ff       	call   c000e991 <malloc>
c001bf3d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001bf41:	a3 c8 d0 02 c0       	mov    ds:0xc002d0c8,eax
c001bf46:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001bf4a:	59                   	pop    ecx
c001bf4b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf4d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001bf51:	51                   	push   ecx
c001bf52:	50                   	push   eax
c001bf53:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001bf57:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001bf5b:	53                   	push   ebx
c001bf5c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bf5f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001bf63:	83 c4 20             	add    esp,0x20
c001bf66:	89 c8                	mov    eax,ecx
c001bf68:	99                   	cdq    
c001bf69:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001bf6d:	0f 85 fe 01 00 00    	jne    c001c171 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bf73:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001bf77:	0f 85 f4 01 00 00    	jne    c001c171 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bf7d:	83 ec 0c             	sub    esp,0xc
c001bf80:	53                   	push   ebx
c001bf81:	e8 08 c2 fe ff       	call   c000818e <File::close()>
c001bf86:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bf8a:	c6 05 cc d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0cc,0x1
c001bf91:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c001bf96:	83 c4 10             	add    esp,0x10
c001bf99:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c001bf9e:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c001bfa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bfa8:	31 f6                	xor    esi,esi
c001bfaa:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001bfb2:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001bfb9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001bfbe:	31 c9                	xor    ecx,ecx
c001bfc0:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001bfc8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001bfcd:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001bfd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bfd9:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001bfe1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bfe5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001bfe9:	0f 8e 82 01 00 00    	jle    c001c171 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bfef:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001bff2:	d4 40                	aam    0x40
c001bff4:	d5 39                	aad    0x39
c001bff6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bffa:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001bffe:	d4 40                	aam    0x40
c001c000:	d5 39                	aad    0x39
c001c002:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c006:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001c00a:	d4 40                	aam    0x40
c001c00c:	d5 39                	aad    0x39
c001c00e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c012:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001c016:	d4 40                	aam    0x40
c001c018:	d5 39                	aad    0x39
c001c01a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c01e:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001c022:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001c026:	3c 56                	cmp    al,0x56
c001c028:	74 43                	je     c001c06d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001c02a:	d4 40                	aam    0x40
c001c02c:	d5 39                	aad    0x39
c001c02e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001c031:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001c035:	0f b6 c9             	movzx  ecx,cl
c001c038:	c1 e1 04             	shl    ecx,0x4
c001c03b:	d4 40                	aam    0x40
c001c03d:	d5 39                	aad    0x39
c001c03f:	83 e8 30             	sub    eax,0x30
c001c042:	0f b6 c0             	movzx  eax,al
c001c045:	09 c1                	or     ecx,eax
c001c047:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001c04b:	c1 e1 04             	shl    ecx,0x4
c001c04e:	d4 40                	aam    0x40
c001c050:	d5 39                	aad    0x39
c001c052:	83 e8 30             	sub    eax,0x30
c001c055:	0f b6 c0             	movzx  eax,al
c001c058:	09 c1                	or     ecx,eax
c001c05a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001c05e:	c1 e1 04             	shl    ecx,0x4
c001c061:	d4 40                	aam    0x40
c001c063:	d5 39                	aad    0x39
c001c065:	83 e8 30             	sub    eax,0x30
c001c068:	0f b6 c0             	movzx  eax,al
c001c06b:	09 c1                	or     ecx,eax
c001c06d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001c071:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c075:	3c 58                	cmp    al,0x58
c001c077:	74 47                	je     c001c0c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001c079:	d4 40                	aam    0x40
c001c07b:	d5 39                	aad    0x39
c001c07d:	8d 50 d0             	lea    edx,[eax-0x30]
c001c080:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001c084:	0f b6 d2             	movzx  edx,dl
c001c087:	c1 e2 04             	shl    edx,0x4
c001c08a:	d4 40                	aam    0x40
c001c08c:	d5 39                	aad    0x39
c001c08e:	83 e8 30             	sub    eax,0x30
c001c091:	0f b6 c0             	movzx  eax,al
c001c094:	09 c2                	or     edx,eax
c001c096:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001c09a:	c1 e2 04             	shl    edx,0x4
c001c09d:	d4 40                	aam    0x40
c001c09f:	d5 39                	aad    0x39
c001c0a1:	83 e8 30             	sub    eax,0x30
c001c0a4:	0f b6 c0             	movzx  eax,al
c001c0a7:	09 c2                	or     edx,eax
c001c0a9:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001c0ad:	c1 e2 04             	shl    edx,0x4
c001c0b0:	d4 40                	aam    0x40
c001c0b2:	d5 39                	aad    0x39
c001c0b4:	83 e8 30             	sub    eax,0x30
c001c0b7:	0f b6 c0             	movzx  eax,al
c001c0ba:	09 c2                	or     edx,eax
c001c0bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c0c0:	83 c6 10             	add    esi,0x10
c001c0c3:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001c0c7:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001c0cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c0cf:	83 fa 0a             	cmp    edx,0xa
c001c0d2:	74 0b                	je     c001c0df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001c0d4:	47                   	inc    edi
c001c0d5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001c0d9:	75 19                	jne    c001c0f4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001c0db:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001c0df:	31 c0                	xor    eax,eax
c001c0e1:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001c0e6:	0f 94 c0             	sete   al
c001c0e9:	01 c6                	add    esi,eax
c001c0eb:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c0f0:	75 0b                	jne    c001c0fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001c0f2:	eb 14                	jmp    c001c108 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001c0f4:	46                   	inc    esi
c001c0f5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001c0f8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c0fb:	eb ca                	jmp    c001c0c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001c0fd:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001c102:	0f 85 dd fe ff ff    	jne    c001bfe5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c108:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001c10d:	74 10                	je     c001c11f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001c10f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c114:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c119:	0f 85 c6 fe ff ff    	jne    c001bfe5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c11f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c123:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c127:	83 e8 30             	sub    eax,0x30
c001c12a:	83 ef 30             	sub    edi,0x30
c001c12d:	c1 e0 04             	shl    eax,0x4
c001c130:	09 f8                	or     eax,edi
c001c132:	0f b6 c0             	movzx  eax,al
c001c135:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c139:	0f 85 a6 fe ff ff    	jne    c001bfe5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c13f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c143:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001c147:	83 e8 30             	sub    eax,0x30
c001c14a:	83 ef 30             	sub    edi,0x30
c001c14d:	c1 e0 04             	shl    eax,0x4
c001c150:	09 f8                	or     eax,edi
c001c152:	0f b6 c0             	movzx  eax,al
c001c155:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c159:	0f 85 86 fe ff ff    	jne    c001bfe5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c15f:	50                   	push   eax
c001c160:	50                   	push   eax
c001c161:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c165:	50                   	push   eax
c001c166:	55                   	push   ebp
c001c167:	e8 d4 44 fe ff       	call   c0000640 <strcpy>
c001c16c:	83 c4 10             	add    esp,0x10
c001c16f:	eb 06                	jmp    c001c177 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001c171:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001c175:	31 ed                	xor    ebp,ebp
c001c177:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c17d:	89 e8                	mov    eax,ebp
c001c17f:	5b                   	pop    ebx
c001c180:	5e                   	pop    esi
c001c181:	5f                   	pop    edi
c001c182:	5d                   	pop    ebp
c001c183:	c3                   	ret    

c001c184 <PCI::checkBus(unsigned char)>:
c001c184:	56                   	push   esi
c001c185:	53                   	push   ebx
c001c186:	31 db                	xor    ebx,ebx
c001c188:	51                   	push   ecx
c001c189:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c18e:	52                   	push   edx
c001c18f:	53                   	push   ebx
c001c190:	43                   	inc    ebx
c001c191:	56                   	push   esi
c001c192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c196:	e8 6f 03 00 00       	call   c001c50a <PCI::checkDevice(unsigned char, unsigned char)>
c001c19b:	83 c4 10             	add    esp,0x10
c001c19e:	83 fb 20             	cmp    ebx,0x20
c001c1a1:	75 eb                	jne    c001c18e <PCI::checkBus(unsigned char)+0xa>
c001c1a3:	58                   	pop    eax
c001c1a4:	5b                   	pop    ebx
c001c1a5:	5e                   	pop    esi
c001c1a6:	c3                   	ret    
c001c1a7:	90                   	nop

c001c1a8 <PCI::foundDevice(PCIDeviceInfo)>:
c001c1a8:	55                   	push   ebp
c001c1a9:	57                   	push   edi
c001c1aa:	56                   	push   esi
c001c1ab:	53                   	push   ebx
c001c1ac:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c1b2:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c1ba:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001c1c1:	3d ff ff 00 00       	cmp    eax,0xffff
c001c1c6:	0f 84 b7 01 00 00    	je     c001c383 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c1cc:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001c1d4:	66 81 fb 06 04       	cmp    bx,0x406
c001c1d9:	75 32                	jne    c001c20d <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c1db:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c1e3:	50                   	push   eax
c001c1e4:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c1ec:	50                   	push   eax
c001c1ed:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c1f5:	50                   	push   eax
c001c1f6:	55                   	push   ebp
c001c1f7:	e8 4e fb ff ff       	call   c001bd4a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c1fc:	59                   	pop    ecx
c001c1fd:	0f b6 c0             	movzx  eax,al
c001c200:	5b                   	pop    ebx
c001c201:	50                   	push   eax
c001c202:	55                   	push   ebp
c001c203:	e8 7c ff ff ff       	call   c001c184 <PCI::checkBus(unsigned char)>
c001c208:	e9 16 01 00 00       	jmp    c001c323 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001c20d:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c214:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001c21a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c21e:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001c225:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001c22d:	85 c0                	test   eax,eax
c001c22f:	74 36                	je     c001c267 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001c231:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c234:	85 d2                	test   edx,edx
c001c236:	74 2b                	je     c001c263 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c238:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001c23e:	31 f9                	xor    ecx,edi
c001c240:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001c246:	75 1b                	jne    c001c263 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c248:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c24c:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001c252:	75 0f                	jne    c001c263 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c254:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c25b:	39 f2                	cmp    edx,esi
c001c25d:	0f 84 20 01 00 00    	je     c001c383 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c263:	8b 00                	mov    eax,DWORD PTR [eax]
c001c265:	eb c6                	jmp    c001c22d <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c267:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c26b:	be 8c 35 02 c0       	mov    esi,0xc002358c
c001c270:	b9 07 00 00 00       	mov    ecx,0x7
c001c275:	fc                   	cld    
c001c276:	31 d2                	xor    edx,edx
c001c278:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c27a:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c281:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c285:	b9 12 00 00 00       	mov    ecx,0x12
c001c28a:	83 ec 0c             	sub    esp,0xc
c001c28d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c28f:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c297:	b9 0a 00 00 00       	mov    ecx,0xa
c001c29c:	f7 f1                	div    ecx
c001c29e:	83 c0 30             	add    eax,0x30
c001c2a1:	83 c2 30             	add    edx,0x30
c001c2a4:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c2a8:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c2ac:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c2b4:	31 d2                	xor    edx,edx
c001c2b6:	f7 f1                	div    ecx
c001c2b8:	83 c0 30             	add    eax,0x30
c001c2bb:	83 c2 30             	add    edx,0x30
c001c2be:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c2c2:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c2c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c2ca:	50                   	push   eax
c001c2cb:	e8 78 03 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001c2d0:	83 c4 10             	add    esp,0x10
c001c2d3:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001c2d9:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c2e0:	75 46                	jne    c001c328 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001c2e2:	83 ec 0c             	sub    esp,0xc
c001c2e5:	68 64 01 00 00       	push   0x164
c001c2ea:	e8 a2 26 ff ff       	call   c000e991 <malloc>
c001c2ef:	89 c3                	mov    ebx,eax
c001c2f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2f4:	e8 9f 10 00 00       	call   c001d398 <SATABus::SATABus()>
c001c2f9:	58                   	pop    eax
c001c2fa:	5a                   	pop    edx
c001c2fb:	53                   	push   ebx
c001c2fc:	55                   	push   ebp
c001c2fd:	e8 3c cd fe ff       	call   c000903e <Device::addChild(Device*)>
c001c302:	83 ec 1c             	sub    esp,0x1c
c001c305:	b9 09 00 00 00       	mov    ecx,0x9
c001c30a:	89 e7                	mov    edi,esp
c001c30c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c30e:	53                   	push   ebx
c001c30f:	e8 70 cc fe ff       	call   c0008f84 <Device::preOpenPCI(PCIDeviceInfo)>
c001c314:	83 c4 30             	add    esp,0x30
c001c317:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c319:	6a 00                	push   0x0
c001c31b:	6a 00                	push   0x0
c001c31d:	6a 00                	push   0x0
c001c31f:	53                   	push   ebx
c001c320:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c323:	83 c4 10             	add    esp,0x10
c001c326:	eb 5b                	jmp    c001c383 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c328:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c32e:	75 19                	jne    c001c349 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001c330:	83 ec 0c             	sub    esp,0xc
c001c333:	68 70 02 00 00       	push   0x270
c001c338:	e8 54 26 ff ff       	call   c000e991 <malloc>
c001c33d:	89 c3                	mov    ebx,eax
c001c33f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c342:	e8 93 02 00 00       	call   c001c5da <IDE::IDE()>
c001c347:	eb b0                	jmp    c001c2f9 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001c349:	83 ec 0c             	sub    esp,0xc
c001c34c:	68 58 01 00 00       	push   0x158
c001c351:	e8 3b 26 ff ff       	call   c000e991 <malloc>
c001c356:	89 c3                	mov    ebx,eax
c001c358:	58                   	pop    eax
c001c359:	5a                   	pop    edx
c001c35a:	68 72 35 02 c0       	push   0xc0023572
c001c35f:	53                   	push   ebx
c001c360:	e8 8d cf fe ff       	call   c00092f2 <DriverlessDevice::DriverlessDevice(char const*)>
c001c365:	59                   	pop    ecx
c001c366:	5f                   	pop    edi
c001c367:	53                   	push   ebx
c001c368:	55                   	push   ebp
c001c369:	e8 d0 cc fe ff       	call   c000903e <Device::addChild(Device*)>
c001c36e:	83 ec 1c             	sub    esp,0x1c
c001c371:	b9 09 00 00 00       	mov    ecx,0x9
c001c376:	89 e7                	mov    edi,esp
c001c378:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c37a:	53                   	push   ebx
c001c37b:	e8 04 cc fe ff       	call   c0008f84 <Device::preOpenPCI(PCIDeviceInfo)>
c001c380:	83 c4 30             	add    esp,0x30
c001c383:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c389:	5b                   	pop    ebx
c001c38a:	5e                   	pop    esi
c001c38b:	5f                   	pop    edi
c001c38c:	5d                   	pop    ebp
c001c38d:	c3                   	ret    

c001c38e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c38e:	55                   	push   ebp
c001c38f:	57                   	push   edi
c001c390:	56                   	push   esi
c001c391:	53                   	push   ebx
c001c392:	83 ec 68             	sub    esp,0x68
c001c395:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c399:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c3a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3a4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c3ab:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c3b0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c3b4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c3bb:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c3c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3c4:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c3c9:	6a 0c                	push   0xc
c001c3cb:	57                   	push   edi
c001c3cc:	53                   	push   ebx
c001c3cd:	56                   	push   esi
c001c3ce:	55                   	push   ebp
c001c3cf:	e8 c6 f7 ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3d4:	83 c4 20             	add    esp,0x20
c001c3d7:	57                   	push   edi
c001c3d8:	53                   	push   ebx
c001c3d9:	56                   	push   esi
c001c3da:	55                   	push   ebp
c001c3db:	e8 b0 f8 ff ff       	call   c001bc90 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c3e0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c3e5:	57                   	push   edi
c001c3e6:	53                   	push   ebx
c001c3e7:	56                   	push   esi
c001c3e8:	55                   	push   ebp
c001c3e9:	e8 38 f9 ff ff       	call   c001bd26 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c3ee:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c3f2:	83 c4 14             	add    esp,0x14
c001c3f5:	6a 3c                	push   0x3c
c001c3f7:	57                   	push   edi
c001c3f8:	53                   	push   ebx
c001c3f9:	56                   	push   esi
c001c3fa:	55                   	push   ebp
c001c3fb:	e8 9a f7 ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c400:	0f b6 c4             	movzx  eax,ah
c001c403:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c407:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c40b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c40f:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001c414:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c41a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c420:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c424:	83 c4 20             	add    esp,0x20
c001c427:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c42c:	74 30                	je     c001c45e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c42e:	31 c0                	xor    eax,eax
c001c430:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c434:	7e 28                	jle    c001c45e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c436:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c43e:	39 cb                	cmp    ebx,ecx
c001c440:	75 19                	jne    c001c45b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c442:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c44a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c44e:	75 0b                	jne    c001c45b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c450:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c457:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c45b:	40                   	inc    eax
c001c45c:	eb d2                	jmp    c001c430 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c45e:	31 d2                	xor    edx,edx
c001c460:	83 ec 0c             	sub    esp,0xc
c001c463:	57                   	push   edi
c001c464:	53                   	push   ebx
c001c465:	56                   	push   esi
c001c466:	52                   	push   edx
c001c467:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c46b:	55                   	push   ebp
c001c46c:	e8 01 f9 ff ff       	call   c001bd72 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c471:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c475:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c479:	42                   	inc    edx
c001c47a:	83 c4 20             	add    esp,0x20
c001c47d:	83 fa 06             	cmp    edx,0x6
c001c480:	75 de                	jne    c001c460 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c482:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c486:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c48a:	c1 e2 08             	shl    edx,0x8
c001c48d:	83 ec 0c             	sub    esp,0xc
c001c490:	0f b6 c4             	movzx  eax,ah
c001c493:	09 d0                	or     eax,edx
c001c495:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c49a:	6a 02                	push   0x2
c001c49c:	57                   	push   edi
c001c49d:	53                   	push   ebx
c001c49e:	56                   	push   esi
c001c49f:	55                   	push   ebp
c001c4a0:	e8 f5 f6 ff ff       	call   c001bb9a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c4a5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c4aa:	83 c4 20             	add    esp,0x20
c001c4ad:	57                   	push   edi
c001c4ae:	53                   	push   ebx
c001c4af:	56                   	push   esi
c001c4b0:	55                   	push   ebp
c001c4b1:	e8 24 f8 ff ff       	call   c001bcda <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c4b6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c4ba:	57                   	push   edi
c001c4bb:	53                   	push   ebx
c001c4bc:	56                   	push   esi
c001c4bd:	55                   	push   ebp
c001c4be:	e8 81 f7 ff ff       	call   c001bc44 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4c3:	b9 09 00 00 00       	mov    ecx,0x9
c001c4c8:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c4cd:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c4d1:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c4d5:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c4d9:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c4dd:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c4e1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c4e5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c4e9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c4ed:	83 ec 0c             	sub    esp,0xc
c001c4f0:	fc                   	cld    
c001c4f1:	89 e7                	mov    edi,esp
c001c4f3:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c4f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c4f9:	55                   	push   ebp
c001c4fa:	e8 a9 fc ff ff       	call   c001c1a8 <PCI::foundDevice(PCIDeviceInfo)>
c001c4ff:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c505:	5b                   	pop    ebx
c001c506:	5e                   	pop    esi
c001c507:	5f                   	pop    edi
c001c508:	5d                   	pop    ebp
c001c509:	c3                   	ret    

c001c50a <PCI::checkDevice(unsigned char, unsigned char)>:
c001c50a:	55                   	push   ebp
c001c50b:	57                   	push   edi
c001c50c:	56                   	push   esi
c001c50d:	53                   	push   ebx
c001c50e:	83 ec 0c             	sub    esp,0xc
c001c511:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c515:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c51a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c51f:	6a 00                	push   0x0
c001c521:	56                   	push   esi
c001c522:	57                   	push   edi
c001c523:	55                   	push   ebp
c001c524:	e8 1b f7 ff ff       	call   c001bc44 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c529:	6a 00                	push   0x0
c001c52b:	56                   	push   esi
c001c52c:	57                   	push   edi
c001c52d:	55                   	push   ebp
c001c52e:	e8 5b fe ff ff       	call   c001c38e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c533:	83 c4 20             	add    esp,0x20
c001c536:	6a 00                	push   0x0
c001c538:	56                   	push   esi
c001c539:	57                   	push   edi
c001c53a:	55                   	push   ebp
c001c53b:	e8 28 f7 ff ff       	call   c001bc68 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c540:	83 c4 10             	add    esp,0x10
c001c543:	a8 80                	test   al,0x80
c001c545:	74 2d                	je     c001c574 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c547:	bb 01 00 00 00       	mov    ebx,0x1
c001c54c:	53                   	push   ebx
c001c54d:	56                   	push   esi
c001c54e:	57                   	push   edi
c001c54f:	55                   	push   ebp
c001c550:	e8 ef f6 ff ff       	call   c001bc44 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c555:	83 c4 10             	add    esp,0x10
c001c558:	0f b7 c0             	movzx  eax,ax
c001c55b:	3d ff ff 00 00       	cmp    eax,0xffff
c001c560:	74 0c                	je     c001c56e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c562:	53                   	push   ebx
c001c563:	56                   	push   esi
c001c564:	57                   	push   edi
c001c565:	55                   	push   ebp
c001c566:	e8 23 fe ff ff       	call   c001c38e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c56b:	83 c4 10             	add    esp,0x10
c001c56e:	43                   	inc    ebx
c001c56f:	83 fb 08             	cmp    ebx,0x8
c001c572:	75 d8                	jne    c001c54c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c574:	83 c4 0c             	add    esp,0xc
c001c577:	5b                   	pop    ebx
c001c578:	5e                   	pop    esi
c001c579:	5f                   	pop    edi
c001c57a:	5d                   	pop    ebp
c001c57b:	c3                   	ret    

c001c57c <PCI::detect()>:
c001c57c:	56                   	push   esi
c001c57d:	53                   	push   ebx
c001c57e:	53                   	push   ebx
c001c57f:	31 db                	xor    ebx,ebx
c001c581:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c585:	6a 00                	push   0x0
c001c587:	6a 00                	push   0x0
c001c589:	6a 00                	push   0x0
c001c58b:	56                   	push   esi
c001c58c:	e8 d7 f6 ff ff       	call   c001bc68 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c591:	83 c4 10             	add    esp,0x10
c001c594:	a8 80                	test   al,0x80
c001c596:	75 21                	jne    c001c5b9 <PCI::detect()+0x3d>
c001c598:	51                   	push   ecx
c001c599:	51                   	push   ecx
c001c59a:	6a 00                	push   0x0
c001c59c:	56                   	push   esi
c001c59d:	e8 e2 fb ff ff       	call   c001c184 <PCI::checkBus(unsigned char)>
c001c5a2:	83 c4 10             	add    esp,0x10
c001c5a5:	eb 2a                	jmp    c001c5d1 <PCI::detect()+0x55>
c001c5a7:	52                   	push   edx
c001c5a8:	52                   	push   edx
c001c5a9:	53                   	push   ebx
c001c5aa:	43                   	inc    ebx
c001c5ab:	56                   	push   esi
c001c5ac:	e8 d3 fb ff ff       	call   c001c184 <PCI::checkBus(unsigned char)>
c001c5b1:	83 c4 10             	add    esp,0x10
c001c5b4:	83 fb 08             	cmp    ebx,0x8
c001c5b7:	74 18                	je     c001c5d1 <PCI::detect()+0x55>
c001c5b9:	53                   	push   ebx
c001c5ba:	6a 00                	push   0x0
c001c5bc:	6a 00                	push   0x0
c001c5be:	56                   	push   esi
c001c5bf:	e8 80 f6 ff ff       	call   c001bc44 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c5c4:	83 c4 10             	add    esp,0x10
c001c5c7:	0f b7 c0             	movzx  eax,ax
c001c5ca:	3d ff ff 00 00       	cmp    eax,0xffff
c001c5cf:	74 d6                	je     c001c5a7 <PCI::detect()+0x2b>
c001c5d1:	58                   	pop    eax
c001c5d2:	5b                   	pop    ebx
c001c5d3:	5e                   	pop    esi
c001c5d4:	c3                   	ret    
c001c5d5:	90                   	nop

c001c5d6 <IDE::close(int, int, void*)>:
c001c5d6:	83 c8 ff             	or     eax,0xffffffff
c001c5d9:	c3                   	ret    

c001c5da <IDE::IDE()>:
c001c5da:	83 ec 0c             	sub    esp,0xc
c001c5dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e1:	83 ec 08             	sub    esp,0x8
c001c5e4:	68 1c 36 02 c0       	push   0xc002361c
c001c5e9:	50                   	push   eax
c001c5ea:	e8 a9 cd fe ff       	call   c0009398 <HardDiskController::HardDiskController(char const*)>
c001c5ef:	83 c4 10             	add    esp,0x10
c001c5f2:	ba 30 37 02 c0       	mov    edx,0xc0023730
c001c5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5fb:	89 10                	mov    DWORD PTR [eax],edx
c001c5fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c601:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c608:	90                   	nop
c001c609:	83 c4 0c             	add    esp,0xc
c001c60c:	c3                   	ret    
c001c60d:	90                   	nop

c001c60e <IDE::prepareInterrupt(unsigned char)>:
c001c60e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c613:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c617:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c61f:	c3                   	ret    

c001c620 <selectDrive(unsigned char, unsigned char)>:
c001c620:	c3                   	ret    
c001c621:	90                   	nop

c001c622 <IDE::getBase(unsigned char)>:
c001c622:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c627:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c62b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c633:	c3                   	ret    

c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c634:	55                   	push   ebp
c001c635:	57                   	push   edi
c001c636:	56                   	push   esi
c001c637:	53                   	push   ebx
c001c638:	83 ec 1c             	sub    esp,0x1c
c001c63b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c63f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c643:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c646:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c64a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c64e:	80 f9 03             	cmp    cl,0x3
c001c651:	77 4f                	ja     c001c6a2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001c653:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c657:	0f b6 fa             	movzx  edi,dl
c001c65a:	0f b6 db             	movzx  ebx,bl
c001c65d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001c660:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001c665:	80 ca 80             	or     dl,0x80
c001c668:	52                   	push   edx
c001c669:	6a 0c                	push   0xc
c001c66b:	57                   	push   edi
c001c66c:	56                   	push   esi
c001c66d:	e8 c2 ff ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c672:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c677:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c67b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c67f:	ee                   	out    dx,al
c001c680:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c685:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001c689:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c68d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c691:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c699:	83 c4 2c             	add    esp,0x2c
c001c69c:	5b                   	pop    ebx
c001c69d:	5e                   	pop    esi
c001c69e:	5f                   	pop    edi
c001c69f:	5d                   	pop    ebp
c001c6a0:	eb 92                	jmp    c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6a2:	0f b6 cb             	movzx  ecx,bl
c001c6a5:	83 f9 07             	cmp    ecx,0x7
c001c6a8:	77 12                	ja     c001c6bc <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001c6aa:	0f b6 d2             	movzx  edx,dl
c001c6ad:	0f b6 db             	movzx  ebx,bl
c001c6b0:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001c6b8:	01 da                	add    edx,ebx
c001c6ba:	eb 2f                	jmp    c001c6eb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c6bc:	83 f9 0d             	cmp    ecx,0xd
c001c6bf:	77 13                	ja     c001c6d4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001c6c1:	0f b6 d2             	movzx  edx,dl
c001c6c4:	0f b6 db             	movzx  ebx,bl
c001c6c7:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001c6ce:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c6d2:	eb 17                	jmp    c001c6eb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c6d4:	83 f9 15             	cmp    ecx,0x15
c001c6d7:	77 13                	ja     c001c6ec <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001c6d9:	0f b6 d2             	movzx  edx,dl
c001c6dc:	0f b6 db             	movzx  ebx,bl
c001c6df:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001c6e7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c6eb:	ee                   	out    dx,al
c001c6ec:	83 c4 1c             	add    esp,0x1c
c001c6ef:	5b                   	pop    ebx
c001c6f0:	5e                   	pop    esi
c001c6f1:	5f                   	pop    edi
c001c6f2:	5d                   	pop    ebp
c001c6f3:	c3                   	ret    

c001c6f4 <IDE::read(unsigned char, unsigned char)>:
c001c6f4:	55                   	push   ebp
c001c6f5:	57                   	push   edi
c001c6f6:	56                   	push   esi
c001c6f7:	53                   	push   ebx
c001c6f8:	83 ec 1c             	sub    esp,0x1c
c001c6fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c6ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c703:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c706:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c70a:	3c 03                	cmp    al,0x3
c001c70c:	77 40                	ja     c001c74e <IDE::read(unsigned char, unsigned char)+0x5a>
c001c70e:	0f b6 f9             	movzx  edi,cl
c001c711:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001c714:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c719:	0c 80                	or     al,0x80
c001c71b:	50                   	push   eax
c001c71c:	6a 0c                	push   0xc
c001c71e:	57                   	push   edi
c001c71f:	56                   	push   esi
c001c720:	e8 0f ff ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c725:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c72a:	0f b6 d3             	movzx  edx,bl
c001c72d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c731:	ec                   	in     al,dx
c001c732:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c736:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001c73b:	52                   	push   edx
c001c73c:	6a 0c                	push   0xc
c001c73e:	57                   	push   edi
c001c73f:	56                   	push   esi
c001c740:	e8 ef fe ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c745:	83 c4 20             	add    esp,0x20
c001c748:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c74c:	eb 4c                	jmp    c001c79a <IDE::read(unsigned char, unsigned char)+0xa6>
c001c74e:	0f b6 d3             	movzx  edx,bl
c001c751:	83 fa 07             	cmp    edx,0x7
c001c754:	77 12                	ja     c001c768 <IDE::read(unsigned char, unsigned char)+0x74>
c001c756:	0f b6 c9             	movzx  ecx,cl
c001c759:	0f b6 d3             	movzx  edx,bl
c001c75c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001c764:	01 c2                	add    edx,eax
c001c766:	eb 31                	jmp    c001c799 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c768:	83 fa 0d             	cmp    edx,0xd
c001c76b:	77 13                	ja     c001c780 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c76d:	0f b6 c9             	movzx  ecx,cl
c001c770:	0f b6 d3             	movzx  edx,bl
c001c773:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001c77a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c77e:	eb 19                	jmp    c001c799 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c780:	31 c0                	xor    eax,eax
c001c782:	83 fa 15             	cmp    edx,0x15
c001c785:	77 13                	ja     c001c79a <IDE::read(unsigned char, unsigned char)+0xa6>
c001c787:	0f b6 c9             	movzx  ecx,cl
c001c78a:	0f b6 d3             	movzx  edx,bl
c001c78d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001c795:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c799:	ec                   	in     al,dx
c001c79a:	83 c4 1c             	add    esp,0x1c
c001c79d:	5b                   	pop    ebx
c001c79e:	5e                   	pop    esi
c001c79f:	5f                   	pop    edi
c001c7a0:	5d                   	pop    ebp
c001c7a1:	c3                   	ret    

c001c7a2 <IDE::waitInterrupt(unsigned char)>:
c001c7a2:	55                   	push   ebp
c001c7a3:	57                   	push   edi
c001c7a4:	56                   	push   esi
c001c7a5:	53                   	push   ebx
c001c7a6:	31 db                	xor    ebx,ebx
c001c7a8:	83 ec 0c             	sub    esp,0xc
c001c7ab:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c7af:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c7b4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c7bc:	89 e8                	mov    eax,ebp
c001c7be:	84 c0                	test   al,al
c001c7c0:	75 30                	jne    c001c7f2 <IDE::waitInterrupt(unsigned char)+0x50>
c001c7c2:	50                   	push   eax
c001c7c3:	6a 0c                	push   0xc
c001c7c5:	56                   	push   esi
c001c7c6:	57                   	push   edi
c001c7c7:	e8 28 ff ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001c7cc:	83 c4 10             	add    esp,0x10
c001c7cf:	a8 01                	test   al,0x1
c001c7d1:	75 27                	jne    c001c7fa <IDE::waitInterrupt(unsigned char)+0x58>
c001c7d3:	f6 c3 04             	test   bl,0x4
c001c7d6:	75 12                	jne    c001c7ea <IDE::waitInterrupt(unsigned char)+0x48>
c001c7d8:	83 fb 32             	cmp    ebx,0x32
c001c7db:	7e 0d                	jle    c001c7ea <IDE::waitInterrupt(unsigned char)+0x48>
c001c7dd:	83 ec 0c             	sub    esp,0xc
c001c7e0:	6a 64                	push   0x64
c001c7e2:	e8 59 8f ff ff       	call   c0015740 <milliTenthSleep(unsigned int)>
c001c7e7:	83 c4 10             	add    esp,0x10
c001c7ea:	83 fb 3c             	cmp    ebx,0x3c
c001c7ed:	74 0b                	je     c001c7fa <IDE::waitInterrupt(unsigned char)+0x58>
c001c7ef:	43                   	inc    ebx
c001c7f0:	eb c2                	jmp    c001c7b4 <IDE::waitInterrupt(unsigned char)+0x12>
c001c7f2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c7fa:	83 c4 0c             	add    esp,0xc
c001c7fd:	89 e8                	mov    eax,ebp
c001c7ff:	5b                   	pop    ebx
c001c800:	5e                   	pop    esi
c001c801:	5f                   	pop    edi
c001c802:	5d                   	pop    ebp
c001c803:	c3                   	ret    

c001c804 <ideChannel0IRQHandler(regs*, void*)>:
c001c804:	83 ec 10             	sub    esp,0x10
c001c807:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c80b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c812:	6a 07                	push   0x7
c001c814:	6a 00                	push   0x0
c001c816:	50                   	push   eax
c001c817:	e8 d8 fe ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001c81c:	83 c4 1c             	add    esp,0x1c
c001c81f:	c3                   	ret    

c001c820 <ideChannel1IRQHandler(regs*, void*)>:
c001c820:	83 ec 10             	sub    esp,0x10
c001c823:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c827:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c82e:	6a 07                	push   0x7
c001c830:	6a 01                	push   0x1
c001c832:	50                   	push   eax
c001c833:	e8 bc fe ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001c838:	83 c4 1c             	add    esp,0x1c
c001c83b:	c3                   	ret    

c001c83c <IDE::enableIRQs(unsigned char, bool)>:
c001c83c:	57                   	push   edi
c001c83d:	b8 02 00 00 00       	mov    eax,0x2
c001c842:	56                   	push   esi
c001c843:	53                   	push   ebx
c001c844:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c848:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c84c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c851:	74 02                	je     c001c855 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c853:	31 c0                	xor    eax,eax
c001c855:	0f b6 db             	movzx  ebx,bl
c001c858:	bf 04 00 00 00       	mov    edi,0x4
c001c85d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c864:	50                   	push   eax
c001c865:	6a 0c                	push   0xc
c001c867:	53                   	push   ebx
c001c868:	56                   	push   esi
c001c869:	e8 c6 fd ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c86e:	83 c4 10             	add    esp,0x10
c001c871:	50                   	push   eax
c001c872:	6a 0c                	push   0xc
c001c874:	53                   	push   ebx
c001c875:	56                   	push   esi
c001c876:	e8 79 fe ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001c87b:	83 c4 10             	add    esp,0x10
c001c87e:	4f                   	dec    edi
c001c87f:	75 f0                	jne    c001c871 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c881:	5b                   	pop    ebx
c001c882:	5e                   	pop    esi
c001c883:	5f                   	pop    edi
c001c884:	c3                   	ret    
c001c885:	90                   	nop

c001c886 <IDE::open(int, int, void*)>:
c001c886:	57                   	push   edi
c001c887:	56                   	push   esi
c001c888:	53                   	push   ebx
c001c889:	83 ec 10             	sub    esp,0x10
c001c88c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c890:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c899:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c8a2:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c8a9:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c8b0:	0f 85 17 02 00 00    	jne    c001cacd <IDE::open(int, int, void*)+0x247>
c001c8b6:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c8bc:	a8 70                	test   al,0x70
c001c8be:	75 44                	jne    c001c904 <IDE::open(int, int, void*)+0x7e>
c001c8c0:	ba 20 84 00 00       	mov    edx,0x8420
c001c8c5:	0f a3 c2             	bt     edx,eax
c001c8c8:	73 3a                	jae    c001c904 <IDE::open(int, int, void*)+0x7e>
c001c8ca:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c8d0:	83 ec 0c             	sub    esp,0xc
c001c8d3:	83 e0 fc             	and    eax,0xfffffffc
c001c8d6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c8dd:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c8e3:	83 e0 fc             	and    eax,0xfffffffc
c001c8e6:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c8ed:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c8f3:	83 e0 fc             	and    eax,0xfffffffc
c001c8f6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c8fd:	68 f5 13 02 c0       	push   0xc00213f5
c001c902:	eb 60                	jmp    c001c964 <IDE::open(int, int, void*)+0xde>
c001c904:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c90e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c918:	be 64 00 00 00       	mov    esi,0x64
c001c91d:	57                   	push   edi
c001c91e:	57                   	push   edi
c001c91f:	68 34 36 02 c0       	push   0xc0023634
c001c924:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001c928:	57                   	push   edi
c001c929:	e8 12 3d fe ff       	call   c0000640 <strcpy>
c001c92e:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001c935:	31 d2                	xor    edx,edx
c001c937:	89 c8                	mov    eax,ecx
c001c939:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c93c:	f7 f6                	div    esi
c001c93e:	be 0a 00 00 00       	mov    esi,0xa
c001c943:	83 c0 30             	add    eax,0x30
c001c946:	31 d2                	xor    edx,edx
c001c948:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c94c:	89 c8                	mov    eax,ecx
c001c94e:	f7 f6                	div    esi
c001c950:	89 d1                	mov    ecx,edx
c001c952:	31 d2                	xor    edx,edx
c001c954:	83 c1 30             	add    ecx,0x30
c001c957:	f7 f6                	div    esi
c001c959:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001c95d:	83 c2 30             	add    edx,0x30
c001c960:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001c964:	e8 df fc fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001c969:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c96e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c975:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c97c:	c1 e1 10             	shl    ecx,0x10
c001c97f:	c1 e0 0b             	shl    eax,0xb
c001c982:	83 c4 10             	add    esp,0x10
c001c985:	09 c1                	or     ecx,eax
c001c987:	89 fa                	mov    edx,edi
c001c989:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c990:	c1 e0 08             	shl    eax,0x8
c001c993:	09 c1                	or     ecx,eax
c001c995:	89 c8                	mov    eax,ecx
c001c997:	0d 08 00 00 80       	or     eax,0x80000008
c001c99c:	ef                   	out    dx,eax
c001c99d:	be fc 0c 00 00       	mov    esi,0xcfc
c001c9a2:	89 f2                	mov    edx,esi
c001c9a4:	ed                   	in     eax,dx
c001c9a5:	c1 e8 10             	shr    eax,0x10
c001c9a8:	3d ff ff 00 00       	cmp    eax,0xffff
c001c9ad:	0f 84 e5 00 00 00    	je     c001ca98 <IDE::open(int, int, void*)+0x212>
c001c9b3:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c9b9:	89 fa                	mov    edx,edi
c001c9bb:	89 c8                	mov    eax,ecx
c001c9bd:	ef                   	out    dx,eax
c001c9be:	b0 fe                	mov    al,0xfe
c001c9c0:	89 f2                	mov    edx,esi
c001c9c2:	ee                   	out    dx,al
c001c9c3:	89 c8                	mov    eax,ecx
c001c9c5:	89 fa                	mov    edx,edi
c001c9c7:	ef                   	out    dx,eax
c001c9c8:	89 f2                	mov    edx,esi
c001c9ca:	ed                   	in     eax,dx
c001c9cb:	3c fe                	cmp    al,0xfe
c001c9cd:	0f 85 85 00 00 00    	jne    c001ca58 <IDE::open(int, int, void*)+0x1d2>
c001c9d3:	83 ec 0c             	sub    esp,0xc
c001c9d6:	68 2b 14 02 c0       	push   0xc002142b
c001c9db:	e8 68 fc fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001c9e0:	c7 04 24 3a 36 02 c0 	mov    DWORD PTR [esp],0xc002363a
c001c9e7:	e8 fa 22 ff ff       	call   c000ece6 <KePanic(char const*)>
c001c9ec:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c9f6:	c7 04 24 4c 16 02 c0 	mov    DWORD PTR [esp],0xc002164c
c001c9fd:	e8 46 fc fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001ca02:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ca09:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ca10:	c1 e1 10             	shl    ecx,0x10
c001ca13:	c1 e0 08             	shl    eax,0x8
c001ca16:	89 fa                	mov    edx,edi
c001ca18:	09 c1                	or     ecx,eax
c001ca1a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ca21:	c1 e0 0b             	shl    eax,0xb
c001ca24:	09 c1                	or     ecx,eax
c001ca26:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ca2c:	89 c8                	mov    eax,ecx
c001ca2e:	ef                   	out    dx,eax
c001ca2f:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ca35:	89 f2                	mov    edx,esi
c001ca37:	ee                   	out    dx,al
c001ca38:	89 c8                	mov    eax,ecx
c001ca3a:	89 fa                	mov    edx,edi
c001ca3c:	ef                   	out    dx,eax
c001ca3d:	89 f2                	mov    edx,esi
c001ca3f:	ed                   	in     eax,dx
c001ca40:	0f b6 c0             	movzx  eax,al
c001ca43:	83 c4 10             	add    esp,0x10
c001ca46:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ca4c:	74 5a                	je     c001caa8 <IDE::open(int, int, void*)+0x222>
c001ca4e:	83 ec 0c             	sub    esp,0xc
c001ca51:	68 4f 36 02 c0       	push   0xc002364f
c001ca56:	eb 48                	jmp    c001caa0 <IDE::open(int, int, void*)+0x21a>
c001ca58:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ca61:	75 2b                	jne    c001ca8e <IDE::open(int, int, void*)+0x208>
c001ca63:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ca6a:	3d 80 00 00 00       	cmp    eax,0x80
c001ca6f:	74 07                	je     c001ca78 <IDE::open(int, int, void*)+0x1f2>
c001ca71:	3d 8a 00 00 00       	cmp    eax,0x8a
c001ca76:	75 16                	jne    c001ca8e <IDE::open(int, int, void*)+0x208>
c001ca78:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ca7f:	83 ec 0c             	sub    esp,0xc
c001ca82:	68 1e 0f 02 c0       	push   0xc0020f1e
c001ca87:	e8 bc fb fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001ca8c:	eb 17                	jmp    c001caa5 <IDE::open(int, int, void*)+0x21f>
c001ca8e:	83 ec 0c             	sub    esp,0xc
c001ca91:	68 57 36 02 c0       	push   0xc0023657
c001ca96:	eb 08                	jmp    c001caa0 <IDE::open(int, int, void*)+0x21a>
c001ca98:	83 ec 0c             	sub    esp,0xc
c001ca9b:	68 88 36 02 c0       	push   0xc0023688
c001caa0:	e8 41 22 ff ff       	call   c000ece6 <KePanic(char const*)>
c001caa5:	83 c4 10             	add    esp,0x10
c001caa8:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001caaf:	74 56                	je     c001cb07 <IDE::open(int, int, void*)+0x281>
c001cab1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cab7:	83 e0 fc             	and    eax,0xfffffffc
c001caba:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cac1:	83 c0 08             	add    eax,0x8
c001cac4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cacb:	eb 3a                	jmp    c001cb07 <IDE::open(int, int, void*)+0x281>
c001cacd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001cad3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cada:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cae1:	05 06 02 00 00       	add    eax,0x206
c001cae6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001caed:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001caf4:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cafb:	05 06 02 00 00       	add    eax,0x206
c001cb00:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cb07:	83 ec 0c             	sub    esp,0xc
c001cb0a:	68 43 1b 02 c0       	push   0xc0021b43
c001cb0f:	e8 34 fb fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cb14:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cb1a:	83 c4 10             	add    esp,0x10
c001cb1d:	89 c2                	mov    edx,eax
c001cb1f:	83 e2 0f             	and    edx,0xf
c001cb22:	83 fa 08             	cmp    edx,0x8
c001cb25:	75 0a                	jne    c001cb31 <IDE::open(int, int, void*)+0x2ab>
c001cb27:	83 e8 02             	sub    eax,0x2
c001cb2a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cb31:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cb37:	89 c2                	mov    edx,eax
c001cb39:	83 e2 0f             	and    edx,0xf
c001cb3c:	83 fa 08             	cmp    edx,0x8
c001cb3f:	75 0a                	jne    c001cb4b <IDE::open(int, int, void*)+0x2c5>
c001cb41:	83 e8 02             	sub    eax,0x2
c001cb44:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cb4b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cb52:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cb59:	89 d0                	mov    eax,edx
c001cb5b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb5e:	8d 7a 01             	lea    edi,[edx+0x1]
c001cb61:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb65:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cb69:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cb6d:	83 e1 3f             	and    ecx,0x3f
c001cb70:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cb74:	89 f9                	mov    ecx,edi
c001cb76:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cb7d:	0f b6 c9             	movzx  ecx,cl
c001cb80:	8d 78 02             	lea    edi,[eax+0x2]
c001cb83:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cb86:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cb8a:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cb8e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cb92:	83 e2 3f             	and    edx,0x3f
c001cb95:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cb99:	89 f9                	mov    ecx,edi
c001cb9b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cba1:	0f b6 d1             	movzx  edx,cl
c001cba4:	8d 78 03             	lea    edi,[eax+0x3]
c001cba7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cbaa:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cbae:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cbb2:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cbb6:	83 e1 3f             	and    ecx,0x3f
c001cbb9:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cbbd:	89 fa                	mov    edx,edi
c001cbbf:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cbc5:	0f b6 ca             	movzx  ecx,dl
c001cbc8:	8d 78 04             	lea    edi,[eax+0x4]
c001cbcb:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cbce:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cbd2:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cbd6:	89 fa                	mov    edx,edi
c001cbd8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cbde:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cbe2:	83 e2 3f             	and    edx,0x3f
c001cbe5:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cbe9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cbf0:	66 85 f6             	test   si,si
c001cbf3:	74 24                	je     c001cc19 <IDE::open(int, int, void*)+0x393>
c001cbf5:	89 f9                	mov    ecx,edi
c001cbf7:	83 c0 05             	add    eax,0x5
c001cbfa:	0f b6 d1             	movzx  edx,cl
c001cbfd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc00:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc04:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cc08:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cc0e:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001cc12:	83 e0 3f             	and    eax,0x3f
c001cc15:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001cc19:	83 ec 0c             	sub    esp,0xc
c001cc1c:	68 b2 36 02 c0       	push   0xc00236b2
c001cc21:	e8 22 fa fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cc26:	58                   	pop    eax
c001cc27:	5a                   	pop    edx
c001cc28:	6a 00                	push   0x0
c001cc2a:	53                   	push   ebx
c001cc2b:	e8 de f9 ff ff       	call   c001c60e <IDE::prepareInterrupt(unsigned char)>
c001cc30:	59                   	pop    ecx
c001cc31:	5e                   	pop    esi
c001cc32:	6a 01                	push   0x1
c001cc34:	53                   	push   ebx
c001cc35:	e8 d4 f9 ff ff       	call   c001c60e <IDE::prepareInterrupt(unsigned char)>
c001cc3a:	c7 04 24 4b 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f4b
c001cc41:	e8 02 fa fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cc46:	83 c4 0c             	add    esp,0xc
c001cc49:	6a 00                	push   0x0
c001cc4b:	6a 00                	push   0x0
c001cc4d:	53                   	push   ebx
c001cc4e:	e8 e9 fb ff ff       	call   c001c83c <IDE::enableIRQs(unsigned char, bool)>
c001cc53:	83 c4 0c             	add    esp,0xc
c001cc56:	6a 00                	push   0x0
c001cc58:	6a 01                	push   0x1
c001cc5a:	53                   	push   ebx
c001cc5b:	e8 dc fb ff ff       	call   c001c83c <IDE::enableIRQs(unsigned char, bool)>
c001cc60:	c7 04 24 b4 36 02 c0 	mov    DWORD PTR [esp],0xc00236b4
c001cc67:	e8 dc f9 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cc6c:	83 c4 10             	add    esp,0x10
c001cc6f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cc76:	74 3c                	je     c001ccb4 <IDE::open(int, int, void*)+0x42e>
c001cc78:	83 ec 0c             	sub    esp,0xc
c001cc7b:	53                   	push   ebx
c001cc7c:	6a 01                	push   0x1
c001cc7e:	68 04 c8 01 c0       	push   0xc001c804
c001cc83:	6a 0e                	push   0xe
c001cc85:	53                   	push   ebx
c001cc86:	e8 5f c3 fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc8b:	83 c4 14             	add    esp,0x14
c001cc8e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc94:	53                   	push   ebx
c001cc95:	6a 01                	push   0x1
c001cc97:	68 20 c8 01 c0       	push   0xc001c820
c001cc9c:	6a 0f                	push   0xf
c001cc9e:	53                   	push   ebx
c001cc9f:	e8 46 c3 fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cca4:	83 c4 14             	add    esp,0x14
c001cca7:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ccad:	68 52 18 02 c0       	push   0xc0021852
c001ccb2:	eb 40                	jmp    c001ccf4 <IDE::open(int, int, void*)+0x46e>
c001ccb4:	83 ec 0c             	sub    esp,0xc
c001ccb7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ccc1:	53                   	push   ebx
c001ccc2:	6a 00                	push   0x0
c001ccc4:	68 04 c8 01 c0       	push   0xc001c804
c001ccc9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cccf:	53                   	push   ebx
c001ccd0:	e8 15 c3 fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ccd5:	83 c4 14             	add    esp,0x14
c001ccd8:	53                   	push   ebx
c001ccd9:	6a 00                	push   0x0
c001ccdb:	68 20 c8 01 c0       	push   0xc001c820
c001cce0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cce6:	53                   	push   ebx
c001cce7:	e8 fe c2 fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ccec:	83 c4 14             	add    esp,0x14
c001ccef:	68 08 24 02 c0       	push   0xc0022408
c001ccf4:	e8 4f f9 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001ccf9:	83 c4 10             	add    esp,0x10
c001ccfc:	83 ec 0c             	sub    esp,0xc
c001ccff:	68 b6 36 02 c0       	push   0xc00236b6
c001cd04:	e8 3f f9 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cd09:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd0e:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cd11:	c7 04 24 c6 27 02 c0 	mov    DWORD PTR [esp],0xc00227c6
c001cd18:	e8 2b f9 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cd1d:	83 c4 0c             	add    esp,0xc
c001cd20:	6a 07                	push   0x7
c001cd22:	6a 00                	push   0x0
c001cd24:	53                   	push   ebx
c001cd25:	e8 ca f9 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001cd2a:	83 c4 0c             	add    esp,0xc
c001cd2d:	6a 07                	push   0x7
c001cd2f:	6a 01                	push   0x1
c001cd31:	53                   	push   ebx
c001cd32:	e8 bd f9 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001cd37:	c7 04 24 18 22 02 c0 	mov    DWORD PTR [esp],0xc0022218
c001cd3e:	e8 05 f9 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cd43:	83 c4 0c             	add    esp,0xc
c001cd46:	6a 01                	push   0x1
c001cd48:	6a 00                	push   0x0
c001cd4a:	53                   	push   ebx
c001cd4b:	e8 ec fa ff ff       	call   c001c83c <IDE::enableIRQs(unsigned char, bool)>
c001cd50:	83 c4 0c             	add    esp,0xc
c001cd53:	6a 01                	push   0x1
c001cd55:	6a 01                	push   0x1
c001cd57:	53                   	push   ebx
c001cd58:	e8 df fa ff ff       	call   c001c83c <IDE::enableIRQs(unsigned char, bool)>
c001cd5d:	c7 04 24 b9 36 02 c0 	mov    DWORD PTR [esp],0xc00236b9
c001cd64:	e8 df f8 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cd69:	83 c4 20             	add    esp,0x20
c001cd6c:	31 c0                	xor    eax,eax
c001cd6e:	5b                   	pop    ebx
c001cd6f:	5e                   	pop    esi
c001cd70:	5f                   	pop    edi
c001cd71:	c3                   	ret    

c001cd72 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cd72:	55                   	push   ebp
c001cd73:	57                   	push   edi
c001cd74:	56                   	push   esi
c001cd75:	53                   	push   ebx
c001cd76:	83 ec 1c             	sub    esp,0x1c
c001cd79:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001cd7d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cd81:	8d 42 f8             	lea    eax,[edx-0x8]
c001cd84:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cd88:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cd8c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cd90:	3c 03                	cmp    al,0x3
c001cd92:	77 5a                	ja     c001cdee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001cd94:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cd98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cd9c:	0f b6 db             	movzx  ebx,bl
c001cd9f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cda2:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cda7:	0c 80                	or     al,0x80
c001cda9:	50                   	push   eax
c001cdaa:	6a 0c                	push   0xc
c001cdac:	53                   	push   ebx
c001cdad:	56                   	push   esi
c001cdae:	e8 81 f8 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdb3:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001cdb8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cdbc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cdc0:	0f b6 d2             	movzx  edx,dl
c001cdc3:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001cdc7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cdc9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cdce:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cdd2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cdd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cdda:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cde2:	83 c4 2c             	add    esp,0x2c
c001cde5:	5b                   	pop    ebx
c001cde6:	5e                   	pop    esi
c001cde7:	5f                   	pop    edi
c001cde8:	5d                   	pop    ebp
c001cde9:	e9 46 f8 ff ff       	jmp    c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdee:	0f b6 c2             	movzx  eax,dl
c001cdf1:	83 f8 07             	cmp    eax,0x7
c001cdf4:	77 12                	ja     c001ce08 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001cdf6:	0f b6 c2             	movzx  eax,dl
c001cdf9:	0f b6 db             	movzx  ebx,bl
c001cdfc:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001ce04:	01 c2                	add    edx,eax
c001ce06:	eb 2f                	jmp    c001ce37 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ce08:	83 f8 0d             	cmp    eax,0xd
c001ce0b:	77 13                	ja     c001ce20 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001ce0d:	0f b6 db             	movzx  ebx,bl
c001ce10:	0f b6 d2             	movzx  edx,dl
c001ce13:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001ce1a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ce1e:	eb 17                	jmp    c001ce37 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ce20:	83 f8 15             	cmp    eax,0x15
c001ce23:	77 14                	ja     c001ce39 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001ce25:	0f b6 db             	movzx  ebx,bl
c001ce28:	0f b6 d2             	movzx  edx,dl
c001ce2b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001ce33:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ce37:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ce39:	83 c4 1c             	add    esp,0x1c
c001ce3c:	5b                   	pop    ebx
c001ce3d:	5e                   	pop    esi
c001ce3e:	5f                   	pop    edi
c001ce3f:	5d                   	pop    ebp
c001ce40:	c3                   	ret    
c001ce41:	90                   	nop

c001ce42 <IDE::detect()>:
c001ce42:	55                   	push   ebp
c001ce43:	57                   	push   edi
c001ce44:	56                   	push   esi
c001ce45:	53                   	push   ebx
c001ce46:	81 ec 28 02 00 00    	sub    esp,0x228
c001ce4c:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001ce53:	68 bb 36 02 c0       	push   0xc00236bb
c001ce58:	e8 eb f7 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001ce5d:	83 c4 10             	add    esp,0x10
c001ce60:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ce67:	0f 85 0c 04 00 00    	jne    c001d279 <IDE::detect()+0x437>
c001ce6d:	83 ec 0c             	sub    esp,0xc
c001ce70:	31 f6                	xor    esi,esi
c001ce72:	68 be 36 02 c0       	push   0xc00236be
c001ce77:	31 ff                	xor    edi,edi
c001ce79:	e8 ca f7 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001ce7e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ce85:	83 c4 10             	add    esp,0x10
c001ce88:	83 ec 0c             	sub    esp,0xc
c001ce8b:	68 c1 36 02 c0       	push   0xc00236c1
c001ce90:	e8 b3 f7 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001ce95:	83 c4 10             	add    esp,0x10
c001ce98:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cea0:	83 ec 0c             	sub    esp,0xc
c001cea3:	31 ed                	xor    ebp,ebp
c001cea5:	68 c4 36 02 c0       	push   0xc00236c4
c001ceaa:	e8 99 f7 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001ceaf:	89 f8                	mov    eax,edi
c001ceb1:	c1 e0 06             	shl    eax,0x6
c001ceb4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cebc:	c7 04 24 c7 36 02 c0 	mov    DWORD PTR [esp],0xc00236c7
c001cec3:	e8 80 f7 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cec8:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001cecc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ced0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ced4:	c1 e0 04             	shl    eax,0x4
c001ced7:	83 c8 a0             	or     eax,0xffffffa0
c001ceda:	0f b6 c0             	movzx  eax,al
c001cedd:	50                   	push   eax
c001cede:	6a 06                	push   0x6
c001cee0:	56                   	push   esi
c001cee1:	53                   	push   ebx
c001cee2:	e8 4d f7 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee7:	83 c4 1c             	add    esp,0x1c
c001ceea:	6a 0c                	push   0xc
c001ceec:	56                   	push   esi
c001ceed:	53                   	push   ebx
c001ceee:	e8 01 f8 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001cef3:	83 c4 0c             	add    esp,0xc
c001cef6:	6a 0c                	push   0xc
c001cef8:	56                   	push   esi
c001cef9:	53                   	push   ebx
c001cefa:	e8 f5 f7 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001ceff:	83 c4 0c             	add    esp,0xc
c001cf02:	6a 0c                	push   0xc
c001cf04:	56                   	push   esi
c001cf05:	53                   	push   ebx
c001cf06:	e8 e9 f7 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001cf0b:	83 c4 0c             	add    esp,0xc
c001cf0e:	6a 0c                	push   0xc
c001cf10:	56                   	push   esi
c001cf11:	53                   	push   ebx
c001cf12:	e8 dd f7 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001cf17:	c7 04 24 ca 36 02 c0 	mov    DWORD PTR [esp],0xc00236ca
c001cf1e:	e8 25 f7 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cf23:	68 ec 00 00 00       	push   0xec
c001cf28:	6a 07                	push   0x7
c001cf2a:	56                   	push   esi
c001cf2b:	53                   	push   ebx
c001cf2c:	e8 03 f7 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf31:	83 c4 1c             	add    esp,0x1c
c001cf34:	6a 0c                	push   0xc
c001cf36:	56                   	push   esi
c001cf37:	53                   	push   ebx
c001cf38:	e8 b7 f7 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001cf3d:	83 c4 0c             	add    esp,0xc
c001cf40:	6a 0c                	push   0xc
c001cf42:	56                   	push   esi
c001cf43:	53                   	push   ebx
c001cf44:	e8 ab f7 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001cf49:	83 c4 0c             	add    esp,0xc
c001cf4c:	6a 0c                	push   0xc
c001cf4e:	56                   	push   esi
c001cf4f:	53                   	push   ebx
c001cf50:	e8 9f f7 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001cf55:	83 c4 0c             	add    esp,0xc
c001cf58:	6a 0c                	push   0xc
c001cf5a:	56                   	push   esi
c001cf5b:	53                   	push   ebx
c001cf5c:	e8 93 f7 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001cf61:	c7 04 24 cd 36 02 c0 	mov    DWORD PTR [esp],0xc00236cd
c001cf68:	e8 db f6 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cf6d:	83 c4 0c             	add    esp,0xc
c001cf70:	6a 0c                	push   0xc
c001cf72:	56                   	push   esi
c001cf73:	53                   	push   ebx
c001cf74:	e8 7b f7 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001cf79:	83 c4 10             	add    esp,0x10
c001cf7c:	84 c0                	test   al,al
c001cf7e:	75 1f                	jne    c001cf9f <IDE::detect()+0x15d>
c001cf80:	83 ec 0c             	sub    esp,0xc
c001cf83:	68 d0 36 02 c0       	push   0xc00236d0
c001cf88:	e8 bb f6 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cf8d:	e9 c3 02 00 00       	jmp    c001d255 <IDE::detect()+0x413>
c001cf92:	a8 80                	test   al,0x80
c001cf94:	74 21                	je     c001cfb7 <IDE::detect()+0x175>
c001cf96:	45                   	inc    ebp
c001cf97:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001cf9d:	7f 1e                	jg     c001cfbd <IDE::detect()+0x17b>
c001cf9f:	50                   	push   eax
c001cfa0:	6a 0c                	push   0xc
c001cfa2:	56                   	push   esi
c001cfa3:	53                   	push   ebx
c001cfa4:	e8 4b f7 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001cfa9:	83 c4 10             	add    esp,0x10
c001cfac:	a8 01                	test   al,0x1
c001cfae:	74 e2                	je     c001cf92 <IDE::detect()+0x150>
c001cfb0:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001cfb5:	eb 22                	jmp    c001cfd9 <IDE::detect()+0x197>
c001cfb7:	a8 08                	test   al,0x8
c001cfb9:	74 db                	je     c001cf96 <IDE::detect()+0x154>
c001cfbb:	eb 17                	jmp    c001cfd4 <IDE::detect()+0x192>
c001cfbd:	83 ec 0c             	sub    esp,0xc
c001cfc0:	6a 32                	push   0x32
c001cfc2:	e8 79 87 ff ff       	call   c0015740 <milliTenthSleep(unsigned int)>
c001cfc7:	83 c4 10             	add    esp,0x10
c001cfca:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001cfd0:	75 cd                	jne    c001cf9f <IDE::detect()+0x15d>
c001cfd2:	eb dc                	jmp    c001cfb0 <IDE::detect()+0x16e>
c001cfd4:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001cfd9:	83 ec 0c             	sub    esp,0xc
c001cfdc:	68 d3 36 02 c0       	push   0xc00236d3
c001cfe1:	e8 62 f6 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cfe6:	83 c4 10             	add    esp,0x10
c001cfe9:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001cfee:	74 60                	je     c001d050 <IDE::detect()+0x20e>
c001cff0:	50                   	push   eax
c001cff1:	6a 04                	push   0x4
c001cff3:	56                   	push   esi
c001cff4:	53                   	push   ebx
c001cff5:	e8 fa f6 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001cffa:	83 c4 0c             	add    esp,0xc
c001cffd:	89 c5                	mov    ebp,eax
c001cfff:	6a 05                	push   0x5
c001d001:	56                   	push   esi
c001d002:	53                   	push   ebx
c001d003:	e8 ec f6 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001d008:	83 c4 10             	add    esp,0x10
c001d00b:	89 e9                	mov    ecx,ebp
c001d00d:	0f b6 c0             	movzx  eax,al
c001d010:	0f b6 e9             	movzx  ebp,cl
c001d013:	83 fd 14             	cmp    ebp,0x14
c001d016:	75 07                	jne    c001d01f <IDE::detect()+0x1dd>
c001d018:	3d eb 00 00 00       	cmp    eax,0xeb
c001d01d:	eb 0e                	jmp    c001d02d <IDE::detect()+0x1eb>
c001d01f:	3d 96 00 00 00       	cmp    eax,0x96
c001d024:	0f 85 2e 02 00 00    	jne    c001d258 <IDE::detect()+0x416>
c001d02a:	83 fd 69             	cmp    ebp,0x69
c001d02d:	0f 85 25 02 00 00    	jne    c001d258 <IDE::detect()+0x416>
c001d033:	68 a1 00 00 00       	push   0xa1
c001d038:	6a 07                	push   0x7
c001d03a:	56                   	push   esi
c001d03b:	53                   	push   ebx
c001d03c:	e8 f3 f5 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d041:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001d048:	e8 f3 86 ff ff       	call   c0015740 <milliTenthSleep(unsigned int)>
c001d04d:	83 c4 10             	add    esp,0x10
c001d050:	83 ec 0c             	sub    esp,0xc
c001d053:	89 fd                	mov    ebp,edi
c001d055:	68 d6 36 02 c0       	push   0xc00236d6
c001d05a:	c1 e5 06             	shl    ebp,0x6
c001d05d:	e8 e6 f5 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d062:	01 dd                	add    ebp,ebx
c001d064:	8d 54 24 20          	lea    edx,[esp+0x20]
c001d068:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001d06f:	52                   	push   edx
c001d070:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d074:	6a 00                	push   0x0
c001d076:	56                   	push   esi
c001d077:	53                   	push   ebx
c001d078:	e8 f5 fc ff ff       	call   c001cd72 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d07d:	83 c4 14             	add    esp,0x14
c001d080:	68 da 36 02 c0       	push   0xc00236da
c001d085:	e8 be f5 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d08a:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001d08f:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001d096:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001d09d:	89 f0                	mov    eax,esi
c001d09f:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001d0a5:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d0a9:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001d0af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0b3:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001d0ba:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001d0c2:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001d0c9:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001d0d1:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001d0d7:	c7 04 24 de 36 02 c0 	mov    DWORD PTR [esp],0xc00236de
c001d0de:	e8 65 f5 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d0e3:	83 c4 10             	add    esp,0x10
c001d0e6:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d0ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0f1:	74 09                	je     c001d0fc <IDE::detect()+0x2ba>
c001d0f3:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d0fa:	eb 07                	jmp    c001d103 <IDE::detect()+0x2c1>
c001d0fc:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d103:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d107:	89 f8                	mov    eax,edi
c001d109:	83 ec 0c             	sub    esp,0xc
c001d10c:	c1 e0 06             	shl    eax,0x6
c001d10f:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d112:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d118:	68 e2 36 02 c0       	push   0xc00236e2
c001d11d:	e8 26 f5 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d122:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d126:	89 e8                	mov    eax,ebp
c001d128:	83 c4 10             	add    esp,0x10
c001d12b:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d12e:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d131:	83 c0 02             	add    eax,0x2
c001d134:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d13a:	83 c2 02             	add    edx,0x2
c001d13d:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d140:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d146:	39 d5                	cmp    ebp,edx
c001d148:	75 e4                	jne    c001d12e <IDE::detect()+0x2ec>
c001d14a:	83 ec 0c             	sub    esp,0xc
c001d14d:	89 fd                	mov    ebp,edi
c001d14f:	c1 e5 06             	shl    ebp,0x6
c001d152:	01 dd                	add    ebp,ebx
c001d154:	0f b7 85 74 01 00 00 	movzx  eax,WORD PTR [ebp+0x174]
c001d15b:	c6 85 a8 01 00 00 00 	mov    BYTE PTR [ebp+0x1a8],0x0
c001d162:	c1 e8 09             	shr    eax,0x9
c001d165:	83 e0 01             	and    eax,0x1
c001d168:	88 85 a9 01 00 00    	mov    BYTE PTR [ebp+0x1a9],al
c001d16e:	68 e6 36 02 c0       	push   0xc00236e6
c001d173:	e8 d0 f4 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d178:	83 c4 10             	add    esp,0x10
c001d17b:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001d180:	75 66                	jne    c001d1e8 <IDE::detect()+0x3a6>
c001d182:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d189:	0f 84 b8 00 00 00    	je     c001d247 <IDE::detect()+0x405>
c001d18f:	83 ec 0c             	sub    esp,0xc
c001d192:	68 ea 36 02 c0       	push   0xc00236ea
c001d197:	e8 ac f4 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d19c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d1a3:	e8 e9 17 ff ff       	call   c000e991 <malloc>
c001d1a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1ab:	89 c5                	mov    ebp,eax
c001d1ad:	e8 44 05 00 00       	call   c001d6f6 <ATA::ATA()>
c001d1b2:	c7 04 24 ee 36 02 c0 	mov    DWORD PTR [esp],0xc00236ee
c001d1b9:	e8 8a f4 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d1be:	59                   	pop    ecx
c001d1bf:	58                   	pop    eax
c001d1c0:	55                   	push   ebp
c001d1c1:	53                   	push   ebx
c001d1c2:	e8 77 be fe ff       	call   c000903e <Device::addChild(Device*)>
c001d1c7:	c7 04 24 f3 36 02 c0 	mov    DWORD PTR [esp],0xc00236f3
c001d1ce:	e8 75 f4 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d1d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d1d6:	53                   	push   ebx
c001d1d7:	57                   	push   edi
c001d1d8:	6a 00                	push   0x0
c001d1da:	55                   	push   ebp
c001d1db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d1de:	83 c4 14             	add    esp,0x14
c001d1e1:	68 f8 36 02 c0       	push   0xc00236f8
c001d1e6:	eb 57                	jmp    c001d23f <IDE::detect()+0x3fd>
c001d1e8:	83 ec 0c             	sub    esp,0xc
c001d1eb:	68 fd 36 02 c0       	push   0xc00236fd
c001d1f0:	e8 53 f4 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d1f5:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d1fc:	e8 90 17 ff ff       	call   c000e991 <malloc>
c001d201:	89 04 24             	mov    DWORD PTR [esp],eax
c001d204:	89 c5                	mov    ebp,eax
c001d206:	e8 67 0b 00 00       	call   c001dd72 <ATAPI::ATAPI()>
c001d20b:	c7 04 24 03 37 02 c0 	mov    DWORD PTR [esp],0xc0023703
c001d212:	e8 31 f4 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d217:	58                   	pop    eax
c001d218:	5a                   	pop    edx
c001d219:	55                   	push   ebp
c001d21a:	53                   	push   ebx
c001d21b:	e8 1e be fe ff       	call   c000903e <Device::addChild(Device*)>
c001d220:	c7 04 24 0a 37 02 c0 	mov    DWORD PTR [esp],0xc002370a
c001d227:	e8 1c f4 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d22c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d22f:	53                   	push   ebx
c001d230:	57                   	push   edi
c001d231:	6a 00                	push   0x0
c001d233:	55                   	push   ebp
c001d234:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d237:	83 c4 14             	add    esp,0x14
c001d23a:	68 11 37 02 c0       	push   0xc0023711
c001d23f:	e8 04 f4 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d244:	83 c4 10             	add    esp,0x10
c001d247:	83 ec 0c             	sub    esp,0xc
c001d24a:	47                   	inc    edi
c001d24b:	68 18 37 02 c0       	push   0xc0023718
c001d250:	e8 f3 f3 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d255:	83 c4 10             	add    esp,0x10
c001d258:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001d25d:	74 0d                	je     c001d26c <IDE::detect()+0x42a>
c001d25f:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d267:	e9 34 fc ff ff       	jmp    c001cea0 <IDE::detect()+0x5e>
c001d26c:	4e                   	dec    esi
c001d26d:	74 0a                	je     c001d279 <IDE::detect()+0x437>
c001d26f:	be 01 00 00 00       	mov    esi,0x1
c001d274:	e9 0f fc ff ff       	jmp    c001ce88 <IDE::detect()+0x46>
c001d279:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d27f:	5b                   	pop    ebx
c001d280:	5e                   	pop    esi
c001d281:	5f                   	pop    edi
c001d282:	5d                   	pop    ebp
c001d283:	c3                   	ret    

c001d284 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d284:	55                   	push   ebp
c001d285:	57                   	push   edi
c001d286:	56                   	push   esi
c001d287:	53                   	push   ebx
c001d288:	83 ec 1c             	sub    esp,0x1c
c001d28b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d28f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d293:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d297:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d29b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d29f:	88 c3                	mov    bl,al
c001d2a1:	25 ff 00 00 00       	and    eax,0xff
c001d2a6:	0f 84 88 00 00 00    	je     c001d334 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d2ac:	83 ec 0c             	sub    esp,0xc
c001d2af:	89 c7                	mov    edi,eax
c001d2b1:	68 1c 37 02 c0       	push   0xc002371c
c001d2b6:	e8 a9 9c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001d2bb:	83 c4 10             	add    esp,0x10
c001d2be:	83 ff 01             	cmp    edi,0x1
c001d2c1:	74 6b                	je     c001d32e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d2c3:	83 ff 02             	cmp    edi,0x2
c001d2c6:	75 58                	jne    c001d320 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d2c8:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d2cd:	01 ff                	add    edi,edi
c001d2cf:	50                   	push   eax
c001d2d0:	09 fe                	or     esi,edi
c001d2d2:	6a 01                	push   0x1
c001d2d4:	89 f0                	mov    eax,esi
c001d2d6:	0f b6 f0             	movzx  esi,al
c001d2d9:	c1 e6 06             	shl    esi,0x6
c001d2dc:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d2e4:	50                   	push   eax
c001d2e5:	55                   	push   ebp
c001d2e6:	e8 09 f4 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001d2eb:	83 c4 10             	add    esp,0x10
c001d2ee:	a8 01                	test   al,0x1
c001d2f0:	74 02                	je     c001d2f4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d2f2:	b3 07                	mov    bl,0x7
c001d2f4:	a8 02                	test   al,0x2
c001d2f6:	74 02                	je     c001d2fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d2f8:	b3 03                	mov    bl,0x3
c001d2fa:	a8 04                	test   al,0x4
c001d2fc:	74 02                	je     c001d300 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d2fe:	b3 14                	mov    bl,0x14
c001d300:	a8 08                	test   al,0x8
c001d302:	74 02                	je     c001d306 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d304:	b3 03                	mov    bl,0x3
c001d306:	a8 10                	test   al,0x10
c001d308:	74 02                	je     c001d30c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d30a:	b3 15                	mov    bl,0x15
c001d30c:	a8 20                	test   al,0x20
c001d30e:	74 02                	je     c001d312 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d310:	b3 03                	mov    bl,0x3
c001d312:	a8 40                	test   al,0x40
c001d314:	74 02                	je     c001d318 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d316:	b3 16                	mov    bl,0x16
c001d318:	a8 80                	test   al,0x80
c001d31a:	74 18                	je     c001d334 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d31c:	b3 0d                	mov    bl,0xd
c001d31e:	eb 14                	jmp    c001d334 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d320:	83 ff 03             	cmp    edi,0x3
c001d323:	74 0d                	je     c001d332 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d325:	83 ff 04             	cmp    edi,0x4
c001d328:	75 0a                	jne    c001d334 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d32a:	b3 08                	mov    bl,0x8
c001d32c:	eb 06                	jmp    c001d334 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d32e:	b3 13                	mov    bl,0x13
c001d330:	eb 02                	jmp    c001d334 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d332:	b3 17                	mov    bl,0x17
c001d334:	83 c4 1c             	add    esp,0x1c
c001d337:	88 d8                	mov    al,bl
c001d339:	5b                   	pop    ebx
c001d33a:	5e                   	pop    esi
c001d33b:	5f                   	pop    edi
c001d33c:	5d                   	pop    ebp
c001d33d:	c3                   	ret    

c001d33e <IDE::polling(unsigned char, unsigned int)>:
c001d33e:	57                   	push   edi
c001d33f:	56                   	push   esi
c001d340:	53                   	push   ebx
c001d341:	bb 04 00 00 00       	mov    ebx,0x4
c001d346:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d34a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d34f:	52                   	push   edx
c001d350:	6a 0c                	push   0xc
c001d352:	56                   	push   esi
c001d353:	57                   	push   edi
c001d354:	e8 9b f3 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001d359:	83 c4 10             	add    esp,0x10
c001d35c:	4b                   	dec    ebx
c001d35d:	75 f0                	jne    c001d34f <IDE::polling(unsigned char, unsigned int)+0x11>
c001d35f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d364:	50                   	push   eax
c001d365:	6a 0c                	push   0xc
c001d367:	56                   	push   esi
c001d368:	57                   	push   edi
c001d369:	e8 86 f3 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	a8 01                	test   al,0x1
c001d373:	75 17                	jne    c001d38c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d375:	a8 20                	test   al,0x20
c001d377:	75 0f                	jne    c001d388 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d379:	4b                   	dec    ebx
c001d37a:	74 10                	je     c001d38c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d37c:	a8 80                	test   al,0x80
c001d37e:	75 e4                	jne    c001d364 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d380:	a8 08                	test   al,0x8
c001d382:	74 e0                	je     c001d364 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d384:	31 c0                	xor    eax,eax
c001d386:	eb 06                	jmp    c001d38e <IDE::polling(unsigned char, unsigned int)+0x50>
c001d388:	b0 01                	mov    al,0x1
c001d38a:	eb 02                	jmp    c001d38e <IDE::polling(unsigned char, unsigned int)+0x50>
c001d38c:	b0 02                	mov    al,0x2
c001d38e:	5b                   	pop    ebx
c001d38f:	5e                   	pop    esi
c001d390:	5f                   	pop    edi
c001d391:	c3                   	ret    

c001d392 <SATABus::close(int, int, void*)>:
c001d392:	31 c0                	xor    eax,eax
c001d394:	c3                   	ret    
c001d395:	90                   	nop

c001d396 <SATABus::detect()>:
c001d396:	c3                   	ret    
c001d397:	90                   	nop

c001d398 <SATABus::SATABus()>:
c001d398:	83 ec 0c             	sub    esp,0xc
c001d39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d39f:	83 ec 08             	sub    esp,0x8
c001d3a2:	68 54 37 02 c0       	push   0xc0023754
c001d3a7:	50                   	push   eax
c001d3a8:	e8 eb bf fe ff       	call   c0009398 <HardDiskController::HardDiskController(char const*)>
c001d3ad:	83 c4 10             	add    esp,0x10
c001d3b0:	ba 80 37 02 c0       	mov    edx,0xc0023780
c001d3b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3b9:	89 10                	mov    DWORD PTR [eax],edx
c001d3bb:	83 ec 0c             	sub    esp,0xc
c001d3be:	6a 50                	push   0x50
c001d3c0:	e8 e4 1b ff ff       	call   c000efa9 <Phys::allocateContiguousPages(int)>
c001d3c5:	83 c4 10             	add    esp,0x10
c001d3c8:	89 c2                	mov    edx,eax
c001d3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3ce:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d3d4:	83 ec 0c             	sub    esp,0xc
c001d3d7:	6a 50                	push   0x50
c001d3d9:	e8 c3 4c ff ff       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c001d3de:	83 c4 10             	add    esp,0x10
c001d3e1:	89 c2                	mov    edx,eax
c001d3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d3ed:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001d3f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d3f6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d3fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d400:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d406:	83 ec 0c             	sub    esp,0xc
c001d409:	6a 03                	push   0x3
c001d40b:	6a 50                	push   0x50
c001d40d:	51                   	push   ecx
c001d40e:	52                   	push   edx
c001d40f:	50                   	push   eax
c001d410:	e8 79 55 ff ff       	call   c001298e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d415:	83 c4 20             	add    esp,0x20
c001d418:	90                   	nop
c001d419:	83 c4 0c             	add    esp,0xc
c001d41c:	c3                   	ret    
c001d41d:	90                   	nop

c001d41e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d41e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d422:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d425:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d428:	09 c2                	or     edx,eax
c001d42a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d42e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d434:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d436:	31 c0                	xor    eax,eax
c001d438:	c1 e9 08             	shr    ecx,0x8
c001d43b:	83 e1 0f             	and    ecx,0xf
c001d43e:	39 c8                	cmp    eax,ecx
c001d440:	74 0a                	je     c001d44c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d442:	f6 c2 01             	test   dl,0x1
c001d445:	74 08                	je     c001d44f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d447:	d1 ea                	shr    edx,1
c001d449:	40                   	inc    eax
c001d44a:	eb f2                	jmp    c001d43e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d44c:	83 c8 ff             	or     eax,0xffffffff
c001d44f:	c3                   	ret    

c001d450 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d450:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d454:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d457:	89 c2                	mov    edx,eax
c001d459:	c1 ea 08             	shr    edx,0x8
c001d45c:	83 e2 0f             	and    edx,0xf
c001d45f:	4a                   	dec    edx
c001d460:	75 32                	jne    c001d494 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d462:	83 e0 0f             	and    eax,0xf
c001d465:	83 f8 03             	cmp    eax,0x3
c001d468:	75 2a                	jne    c001d494 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d46a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d46d:	b8 02 00 00 00       	mov    eax,0x2
c001d472:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d478:	74 1c                	je     c001d496 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d47a:	b8 04 00 00 00       	mov    eax,0x4
c001d47f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d485:	74 0f                	je     c001d496 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d487:	31 c0                	xor    eax,eax
c001d489:	83 fa 03             	cmp    edx,0x3
c001d48c:	0f 94 c0             	sete   al
c001d48f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d493:	c3                   	ret    
c001d494:	31 c0                	xor    eax,eax
c001d496:	c3                   	ret    
c001d497:	90                   	nop

c001d498 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d49c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d49f:	0f ba e2 0f          	bt     edx,0xf
c001d4a3:	72 f7                	jb     c001d49c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d4a5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4a8:	83 ca 10             	or     edx,0x10
c001d4ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d4ae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4b1:	83 ca 01             	or     edx,0x1
c001d4b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d4b7:	c3                   	ret    

c001d4b8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d4b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d4bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4bf:	83 e2 fe             	and    edx,0xfffffffe
c001d4c2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d4c5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4c8:	83 e2 ef             	and    edx,0xffffffef
c001d4cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d4ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4d1:	0f ba e2 0e          	bt     edx,0xe
c001d4d5:	72 f7                	jb     c001d4ce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d4d7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4da:	0f ba e2 0f          	bt     edx,0xf
c001d4de:	72 ee                	jb     c001d4ce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d4e0:	c3                   	ret    
c001d4e1:	90                   	nop

c001d4e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d4e2:	55                   	push   ebp
c001d4e3:	57                   	push   edi
c001d4e4:	56                   	push   esi
c001d4e5:	53                   	push   ebx
c001d4e6:	83 ec 1c             	sub    esp,0x1c
c001d4e9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d4ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d4f1:	53                   	push   ebx
c001d4f2:	56                   	push   esi
c001d4f3:	e8 c0 ff ff ff       	call   c001d4b8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d4f8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d4fc:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001d502:	83 ec 0c             	sub    esp,0xc
c001d505:	c1 e5 0a             	shl    ebp,0xa
c001d508:	01 e8                	add    eax,ebp
c001d50a:	89 03                	mov    DWORD PTR [ebx],eax
c001d50c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d50e:	68 00 04 00 00       	push   0x400
c001d513:	6a 00                	push   0x0
c001d515:	50                   	push   eax
c001d516:	e8 d5 2f fe ff       	call   c00004f0 <memset>
c001d51b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001d521:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d525:	01 e8                	add    eax,ebp
c001d527:	83 c4 1c             	add    esp,0x1c
c001d52a:	89 03                	mov    DWORD PTR [ebx],eax
c001d52c:	c1 e2 08             	shl    edx,0x8
c001d52f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d536:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001d53c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001d542:	01 f8                	add    eax,edi
c001d544:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d547:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d54a:	68 00 01 00 00       	push   0x100
c001d54f:	6a 00                	push   0x0
c001d551:	50                   	push   eax
c001d552:	e8 99 2f fe ff       	call   c00004f0 <memset>
c001d557:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001d55d:	01 fa                	add    edx,edi
c001d55f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d563:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001d566:	c1 e7 0d             	shl    edi,0xd
c001d569:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d570:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001d576:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001d57c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d580:	31 ff                	xor    edi,edi
c001d582:	83 c4 10             	add    esp,0x10
c001d585:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001d58b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d58f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001d595:	83 c5 20             	add    ebp,0x20
c001d598:	01 f8                	add    eax,edi
c001d59a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d59d:	52                   	push   edx
c001d59e:	68 00 01 00 00       	push   0x100
c001d5a3:	6a 00                	push   0x0
c001d5a5:	50                   	push   eax
c001d5a6:	e8 45 2f fe ff       	call   c00004f0 <memset>
c001d5ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5af:	83 c4 10             	add    esp,0x10
c001d5b2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001d5b8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d5bf:	01 f8                	add    eax,edi
c001d5c1:	81 c7 00 01 00 00    	add    edi,0x100
c001d5c7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d5ca:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001d5d0:	75 b3                	jne    c001d585 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001d5d2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d5d9:	50                   	push   eax
c001d5da:	50                   	push   eax
c001d5db:	53                   	push   ebx
c001d5dc:	56                   	push   esi
c001d5dd:	e8 b6 fe ff ff       	call   c001d498 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d5e2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d5e9:	83 c4 2c             	add    esp,0x2c
c001d5ec:	5b                   	pop    ebx
c001d5ed:	5e                   	pop    esi
c001d5ee:	5f                   	pop    edi
c001d5ef:	5d                   	pop    ebp
c001d5f0:	c3                   	ret    
c001d5f1:	90                   	nop

c001d5f2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001d5f2:	55                   	push   ebp
c001d5f3:	57                   	push   edi
c001d5f4:	56                   	push   esi
c001d5f5:	53                   	push   ebx
c001d5f6:	31 db                	xor    ebx,ebx
c001d5f8:	83 ec 0c             	sub    esp,0xc
c001d5fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d5ff:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d603:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001d606:	f7 c7 01 00 00 00    	test   edi,0x1
c001d60c:	74 7a                	je     c001d688 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d60e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d612:	89 d8                	mov    eax,ebx
c001d614:	c1 e0 07             	shl    eax,0x7
c001d617:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001d61e:	55                   	push   ebp
c001d61f:	56                   	push   esi
c001d620:	e8 2b fe ff ff       	call   c001d450 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001d625:	5a                   	pop    edx
c001d626:	83 f8 01             	cmp    eax,0x1
c001d629:	59                   	pop    ecx
c001d62a:	75 21                	jne    c001d64d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001d62c:	50                   	push   eax
c001d62d:	53                   	push   ebx
c001d62e:	55                   	push   ebp
c001d62f:	56                   	push   esi
c001d630:	e8 ad fe ff ff       	call   c001d4e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d635:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d63c:	e8 50 13 ff ff       	call   c000e991 <malloc>
c001d641:	89 c5                	mov    ebp,eax
c001d643:	89 04 24             	mov    DWORD PTR [esp],eax
c001d646:	e8 f3 0d 00 00       	call   c001e43e <SATA::SATA()>
c001d64b:	eb 24                	jmp    c001d671 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001d64d:	83 f8 04             	cmp    eax,0x4
c001d650:	75 36                	jne    c001d688 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d652:	51                   	push   ecx
c001d653:	53                   	push   ebx
c001d654:	55                   	push   ebp
c001d655:	56                   	push   esi
c001d656:	e8 87 fe ff ff       	call   c001d4e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d65b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d662:	e8 2a 13 ff ff       	call   c000e991 <malloc>
c001d667:	89 c5                	mov    ebp,eax
c001d669:	89 04 24             	mov    DWORD PTR [esp],eax
c001d66c:	e8 65 11 00 00       	call   c001e7d6 <SATAPI::SATAPI()>
c001d671:	58                   	pop    eax
c001d672:	5a                   	pop    edx
c001d673:	55                   	push   ebp
c001d674:	56                   	push   esi
c001d675:	e8 c4 b9 fe ff       	call   c000903e <Device::addChild(Device*)>
c001d67a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001d67d:	56                   	push   esi
c001d67e:	6a 00                	push   0x0
c001d680:	53                   	push   ebx
c001d681:	55                   	push   ebp
c001d682:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001d685:	83 c4 20             	add    esp,0x20
c001d688:	d1 ef                	shr    edi,1
c001d68a:	43                   	inc    ebx
c001d68b:	83 fb 20             	cmp    ebx,0x20
c001d68e:	0f 85 72 ff ff ff    	jne    c001d606 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001d694:	83 c4 0c             	add    esp,0xc
c001d697:	5b                   	pop    ebx
c001d698:	5e                   	pop    esi
c001d699:	5f                   	pop    edi
c001d69a:	5d                   	pop    ebp
c001d69b:	c3                   	ret    

c001d69c <SATABus::open(int, int, void*)>:
c001d69c:	53                   	push   ebx
c001d69d:	83 ec 08             	sub    esp,0x8
c001d6a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d6a4:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001d6aa:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d6b0:	e8 1b 7c ff ff       	call   c00152d0 <KeDisablePreemption()>
c001d6b5:	52                   	push   edx
c001d6b6:	52                   	push   edx
c001d6b7:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001d6bd:	53                   	push   ebx
c001d6be:	e8 2f ff ff ff       	call   c001d5f2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001d6c3:	e8 30 7c ff ff       	call   c00152f8 <KeRestorePreemption()>
c001d6c8:	31 c0                	xor    eax,eax
c001d6ca:	83 c4 18             	add    esp,0x18
c001d6cd:	5b                   	pop    ebx
c001d6ce:	c3                   	ret    
c001d6cf:	90                   	nop

c001d6d0 <ATA::close(int, int, void*)>:
c001d6d0:	83 ec 0c             	sub    esp,0xc
c001d6d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d6dd:	85 c0                	test   eax,eax
c001d6df:	74 0c                	je     c001d6ed <ATA::close(int, int, void*)+0x1d>
c001d6e1:	83 ec 0c             	sub    esp,0xc
c001d6e4:	8b 10                	mov    edx,DWORD PTR [eax]
c001d6e6:	50                   	push   eax
c001d6e7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d6ea:	83 c4 10             	add    esp,0x10
c001d6ed:	31 c0                	xor    eax,eax
c001d6ef:	83 c4 0c             	add    esp,0xc
c001d6f2:	c3                   	ret    
c001d6f3:	90                   	nop

c001d6f4 <ATA::powerSaving(PowerSavingLevel)>:
c001d6f4:	c3                   	ret    
c001d6f5:	90                   	nop

c001d6f6 <ATA::ATA()>:
c001d6f6:	83 ec 0c             	sub    esp,0xc
c001d6f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6fd:	83 ec 04             	sub    esp,0x4
c001d700:	68 00 02 00 00       	push   0x200
c001d705:	68 59 38 02 c0       	push   0xc0023859
c001d70a:	50                   	push   eax
c001d70b:	e8 12 bd fe ff       	call   c0009422 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d710:	83 c4 10             	add    esp,0x10
c001d713:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c001d718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d71c:	89 10                	mov    DWORD PTR [eax],edx
c001d71e:	90                   	nop
c001d71f:	83 c4 0c             	add    esp,0xc
c001d722:	c3                   	ret    
c001d723:	90                   	nop

c001d724 <ATA::flush(bool)>:
c001d724:	53                   	push   ebx
c001d725:	83 ec 08             	sub    esp,0x8
c001d728:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d72c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d731:	83 f8 01             	cmp    eax,0x1
c001d734:	19 c0                	sbb    eax,eax
c001d736:	83 e0 fd             	and    eax,0xfffffffd
c001d739:	05 ea 00 00 00       	add    eax,0xea
c001d73e:	50                   	push   eax
c001d73f:	6a 07                	push   0x7
c001d741:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d748:	50                   	push   eax
c001d749:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d74f:	e8 e0 ee ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d754:	83 c4 0c             	add    esp,0xc
c001d757:	6a 00                	push   0x0
c001d759:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d760:	50                   	push   eax
c001d761:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d767:	e8 d2 fb ff ff       	call   c001d33e <IDE::polling(unsigned char, unsigned int)>
c001d76c:	83 c4 18             	add    esp,0x18
c001d76f:	5b                   	pop    ebx
c001d770:	c3                   	ret    
c001d771:	90                   	nop

c001d772 <ATA::readyForCommand()>:
c001d772:	56                   	push   esi
c001d773:	53                   	push   ebx
c001d774:	53                   	push   ebx
c001d775:	31 db                	xor    ebx,ebx
c001d777:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d77b:	51                   	push   ecx
c001d77c:	6a 0c                	push   0xc
c001d77e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d785:	50                   	push   eax
c001d786:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d78c:	e8 63 ef ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001d791:	83 c4 10             	add    esp,0x10
c001d794:	a8 88                	test   al,0x88
c001d796:	74 1f                	je     c001d7b7 <ATA::readyForCommand()+0x45>
c001d798:	43                   	inc    ebx
c001d799:	83 fb 63             	cmp    ebx,0x63
c001d79c:	7e dd                	jle    c001d77b <ATA::readyForCommand()+0x9>
c001d79e:	83 ec 0c             	sub    esp,0xc
c001d7a1:	6a 0a                	push   0xa
c001d7a3:	e8 98 7f ff ff       	call   c0015740 <milliTenthSleep(unsigned int)>
c001d7a8:	83 c4 10             	add    esp,0x10
c001d7ab:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d7b1:	75 c8                	jne    c001d77b <ATA::readyForCommand()+0x9>
c001d7b3:	31 c0                	xor    eax,eax
c001d7b5:	eb 02                	jmp    c001d7b9 <ATA::readyForCommand()+0x47>
c001d7b7:	b0 01                	mov    al,0x1
c001d7b9:	5a                   	pop    edx
c001d7ba:	5b                   	pop    ebx
c001d7bb:	5e                   	pop    esi
c001d7bc:	c3                   	ret    
c001d7bd:	90                   	nop

c001d7be <ATA::access(unsigned long long, int, void*, bool)>:
c001d7be:	55                   	push   ebp
c001d7bf:	57                   	push   edi
c001d7c0:	56                   	push   esi
c001d7c1:	53                   	push   ebx
c001d7c2:	83 ec 2c             	sub    esp,0x2c
c001d7c5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d7c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d7cd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d7d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d7d5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d7d9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d7dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d7e1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d7e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7eb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d7f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d7f5:	c1 e0 06             	shl    eax,0x6
c001d7f8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d800:	74 5d                	je     c001d85f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001d802:	89 fa                	mov    edx,edi
c001d804:	89 f0                	mov    eax,esi
c001d806:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d80a:	c1 ea 1c             	shr    edx,0x1c
c001d80d:	89 d1                	mov    ecx,edx
c001d80f:	09 c1                	or     ecx,eax
c001d811:	74 25                	je     c001d838 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d813:	31 ed                	xor    ebp,ebp
c001d815:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d81c:	89 fa                	mov    edx,edi
c001d81e:	89 f0                	mov    eax,esi
c001d820:	0f ad d0             	shrd   eax,edx,cl
c001d823:	d3 ea                	shr    edx,cl
c001d825:	f6 c1 20             	test   cl,0x20
c001d828:	74 02                	je     c001d82c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d82a:	89 d0                	mov    eax,edx
c001d82c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d830:	45                   	inc    ebp
c001d831:	83 fd 06             	cmp    ebp,0x6
c001d834:	75 df                	jne    c001d815 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d836:	eb 76                	jmp    c001d8ae <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001d838:	89 f0                	mov    eax,esi
c001d83a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d83f:	89 fa                	mov    edx,edi
c001d841:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d848:	0f ac d0 10          	shrd   eax,edx,0x10
c001d84c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d851:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d855:	c1 ee 18             	shr    esi,0x18
c001d858:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001d85d:	eb 56                	jmp    c001d8b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d85f:	6a 00                	push   0x0
c001d861:	6a 3f                	push   0x3f
c001d863:	57                   	push   edi
c001d864:	56                   	push   esi
c001d865:	e8 da 23 00 00       	call   c001fc44 <__umoddi3>
c001d86a:	83 c4 10             	add    esp,0x10
c001d86d:	40                   	inc    eax
c001d86e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d872:	6a 00                	push   0x0
c001d874:	68 f0 03 00 00       	push   0x3f0
c001d879:	57                   	push   edi
c001d87a:	56                   	push   esi
c001d87b:	e8 c4 22 00 00       	call   c001fb44 <__udivdi3>
c001d880:	83 c4 10             	add    esp,0x10
c001d883:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d888:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d88f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d894:	6a 00                	push   0x0
c001d896:	6a 3f                	push   0x3f
c001d898:	57                   	push   edi
c001d899:	56                   	push   esi
c001d89a:	e8 a5 22 00 00       	call   c001fb44 <__udivdi3>
c001d89f:	83 c4 10             	add    esp,0x10
c001d8a2:	83 e0 0f             	and    eax,0xf
c001d8a5:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001d8aa:	89 c6                	mov    esi,eax
c001d8ac:	eb 07                	jmp    c001d8b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d8ae:	31 f6                	xor    esi,esi
c001d8b0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001d8b5:	bf 01 00 00 00       	mov    edi,0x1
c001d8ba:	55                   	push   ebp
c001d8bb:	6a 00                	push   0x0
c001d8bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8c4:	50                   	push   eax
c001d8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d8c9:	e8 6e ef ff ff       	call   c001c83c <IDE::enableIRQs(unsigned char, bool)>
c001d8ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8d1:	e8 9c fe ff ff       	call   c001d772 <ATA::readyForCommand()>
c001d8d6:	83 c4 10             	add    esp,0x10
c001d8d9:	84 c0                	test   al,al
c001d8db:	0f 84 b1 02 00 00    	je     c001db92 <ATA::access(unsigned long long, int, void*, bool)+0x3d4>
c001d8e1:	fa                   	cli    
c001d8e2:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001d8e8:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d8ee:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001d8f3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d8f9:	75 0a                	jne    c001d905 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001d8fb:	c1 e0 04             	shl    eax,0x4
c001d8fe:	09 c6                	or     esi,eax
c001d900:	83 ce a0             	or     esi,0xffffffa0
c001d903:	eb 08                	jmp    c001d90d <ATA::access(unsigned long long, int, void*, bool)+0x14f>
c001d905:	c1 e0 04             	shl    eax,0x4
c001d908:	09 c6                	or     esi,eax
c001d90a:	83 ce e0             	or     esi,0xffffffe0
c001d90d:	89 f0                	mov    eax,esi
c001d90f:	0f b6 d2             	movzx  edx,dl
c001d912:	0f b6 f0             	movzx  esi,al
c001d915:	56                   	push   esi
c001d916:	6a 06                	push   0x6
c001d918:	52                   	push   edx
c001d919:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d91f:	e8 10 ed ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d924:	83 c4 10             	add    esp,0x10
c001d927:	6a 00                	push   0x0
c001d929:	6a 01                	push   0x1
c001d92b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d932:	50                   	push   eax
c001d933:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d939:	e8 f6 ec ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d93e:	83 c4 10             	add    esp,0x10
c001d941:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001d946:	83 f8 02             	cmp    eax,0x2
c001d949:	75 6e                	jne    c001d9b9 <ATA::access(unsigned long long, int, void*, bool)+0x1fb>
c001d94b:	6a 00                	push   0x0
c001d94d:	6a 08                	push   0x8
c001d94f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d956:	50                   	push   eax
c001d957:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d95d:	e8 d2 ec ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d962:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d967:	50                   	push   eax
c001d968:	6a 09                	push   0x9
c001d96a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d971:	50                   	push   eax
c001d972:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d978:	e8 b7 ec ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d97d:	83 c4 20             	add    esp,0x20
c001d980:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d985:	50                   	push   eax
c001d986:	6a 0a                	push   0xa
c001d988:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d98f:	50                   	push   eax
c001d990:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d996:	e8 99 ec ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d99b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d9a0:	50                   	push   eax
c001d9a1:	6a 0b                	push   0xb
c001d9a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9aa:	50                   	push   eax
c001d9ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9b1:	e8 7e ec ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9b6:	83 c4 20             	add    esp,0x20
c001d9b9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d9be:	50                   	push   eax
c001d9bf:	6a 02                	push   0x2
c001d9c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9c8:	50                   	push   eax
c001d9c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9cf:	e8 60 ec ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9d4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d9d9:	50                   	push   eax
c001d9da:	6a 03                	push   0x3
c001d9dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9e3:	50                   	push   eax
c001d9e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9ea:	e8 45 ec ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9ef:	83 c4 20             	add    esp,0x20
c001d9f2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d9f7:	50                   	push   eax
c001d9f8:	6a 04                	push   0x4
c001d9fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da01:	50                   	push   eax
c001da02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da08:	e8 27 ec ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001da12:	50                   	push   eax
c001da13:	6a 05                	push   0x5
c001da15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da1c:	50                   	push   eax
c001da1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da23:	e8 0c ec ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da28:	83 c4 20             	add    esp,0x20
c001da2b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001da30:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001da35:	74 11                	je     c001da48 <ATA::access(unsigned long long, int, void*, bool)+0x28a>
c001da37:	b8 30 00 00 00       	mov    eax,0x30
c001da3c:	83 fa 02             	cmp    edx,0x2
c001da3f:	75 16                	jne    c001da57 <ATA::access(unsigned long long, int, void*, bool)+0x299>
c001da41:	b8 34 00 00 00       	mov    eax,0x34
c001da46:	eb 0f                	jmp    c001da57 <ATA::access(unsigned long long, int, void*, bool)+0x299>
c001da48:	b8 20 00 00 00       	mov    eax,0x20
c001da4d:	83 fa 02             	cmp    edx,0x2
c001da50:	75 05                	jne    c001da57 <ATA::access(unsigned long long, int, void*, bool)+0x299>
c001da52:	b8 24 00 00 00       	mov    eax,0x24
c001da57:	50                   	push   eax
c001da58:	6a 07                	push   0x7
c001da5a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da61:	50                   	push   eax
c001da62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da68:	e8 c7 eb ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da6d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001da72:	83 c4 10             	add    esp,0x10
c001da75:	48                   	dec    eax
c001da76:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001da7b:	85 c0                	test   eax,eax
c001da7d:	75 01                	jne    c001da80 <ATA::access(unsigned long long, int, void*, bool)+0x2c2>
c001da7f:	fb                   	sti    
c001da80:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001da84:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001da89:	85 f6                	test   esi,esi
c001da8b:	0f 84 de 00 00 00    	je     c001db6f <ATA::access(unsigned long long, int, void*, bool)+0x3b1>
c001da91:	57                   	push   edi
c001da92:	6a 01                	push   0x1
c001da94:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da9b:	50                   	push   eax
c001da9c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001daa2:	e8 97 f8 ff ff       	call   c001d33e <IDE::polling(unsigned char, unsigned int)>
c001daa7:	83 c4 10             	add    esp,0x10
c001daaa:	0f b6 f8             	movzx  edi,al
c001daad:	85 ff                	test   edi,edi
c001daaf:	74 21                	je     c001dad2 <ATA::access(unsigned long long, int, void*, bool)+0x314>
c001dab1:	57                   	push   edi
c001dab2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001dab9:	50                   	push   eax
c001daba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dac1:	50                   	push   eax
c001dac2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dac8:	e8 b7 f7 ff ff       	call   c001d284 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dacd:	e9 bd 00 00 00       	jmp    c001db8f <ATA::access(unsigned long long, int, void*, bool)+0x3d1>
c001dad2:	85 ed                	test   ebp,ebp
c001dad4:	74 4d                	je     c001db23 <ATA::access(unsigned long long, int, void*, bool)+0x365>
c001dad6:	fa                   	cli    
c001dad7:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001dadd:	31 c9                	xor    ecx,ecx
c001dadf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dae3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dae7:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001daeb:	51                   	push   ecx
c001daec:	51                   	push   ecx
c001daed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001daf4:	50                   	push   eax
c001daf5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dafb:	e8 22 eb ff ff       	call   c001c622 <IDE::getBase(unsigned char)>
c001db00:	89 c2                	mov    edx,eax
c001db02:	89 f8                	mov    eax,edi
c001db04:	66 ef                	out    dx,ax
c001db06:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001db0a:	83 c4 10             	add    esp,0x10
c001db0d:	41                   	inc    ecx
c001db0e:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001db14:	75 c9                	jne    c001dadf <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001db16:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001db1b:	48                   	dec    eax
c001db1c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001db21:	eb 3b                	jmp    c001db5e <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001db23:	fa                   	cli    
c001db24:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001db2a:	52                   	push   edx
c001db2b:	52                   	push   edx
c001db2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db33:	50                   	push   eax
c001db34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db3a:	e8 e3 ea ff ff       	call   c001c622 <IDE::getBase(unsigned char)>
c001db3f:	b9 00 01 00 00       	mov    ecx,0x100
c001db44:	89 c2                	mov    edx,eax
c001db46:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001db4a:	fc                   	cld    
c001db4b:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001db4e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001db53:	83 c4 10             	add    esp,0x10
c001db56:	48                   	dec    eax
c001db57:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001db5c:	85 c0                	test   eax,eax
c001db5e:	75 01                	jne    c001db61 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001db60:	fb                   	sti    
c001db61:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001db69:	4e                   	dec    esi
c001db6a:	e9 1a ff ff ff       	jmp    c001da89 <ATA::access(unsigned long long, int, void*, bool)+0x2cb>
c001db6f:	31 ff                	xor    edi,edi
c001db71:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001db76:	74 1a                	je     c001db92 <ATA::access(unsigned long long, int, void*, bool)+0x3d4>
c001db78:	50                   	push   eax
c001db79:	50                   	push   eax
c001db7a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001db7f:	83 f8 02             	cmp    eax,0x2
c001db82:	0f 94 c0             	sete   al
c001db85:	0f b6 c0             	movzx  eax,al
c001db88:	50                   	push   eax
c001db89:	53                   	push   ebx
c001db8a:	e8 95 fb ff ff       	call   c001d724 <ATA::flush(bool)>
c001db8f:	83 c4 10             	add    esp,0x10
c001db92:	83 c4 2c             	add    esp,0x2c
c001db95:	89 f8                	mov    eax,edi
c001db97:	5b                   	pop    ebx
c001db98:	5e                   	pop    esi
c001db99:	5f                   	pop    edi
c001db9a:	5d                   	pop    ebp
c001db9b:	c3                   	ret    

c001db9c <ATA::read(unsigned long long, int, void*)>:
c001db9c:	57                   	push   edi
c001db9d:	b8 04 00 00 00       	mov    eax,0x4
c001dba2:	56                   	push   esi
c001dba3:	53                   	push   ebx
c001dba4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dba8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dbac:	8d 7a ff             	lea    edi,[edx-0x1]
c001dbaf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dbb3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dbb7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dbbd:	77 25                	ja     c001dbe4 <ATA::read(unsigned long long, int, void*)+0x48>
c001dbbf:	b8 06 00 00 00       	mov    eax,0x6
c001dbc4:	85 f6                	test   esi,esi
c001dbc6:	74 1c                	je     c001dbe4 <ATA::read(unsigned long long, int, void*)+0x48>
c001dbc8:	50                   	push   eax
c001dbc9:	50                   	push   eax
c001dbca:	6a 00                	push   0x0
c001dbcc:	56                   	push   esi
c001dbcd:	52                   	push   edx
c001dbce:	53                   	push   ebx
c001dbcf:	51                   	push   ecx
c001dbd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd4:	e8 e5 fb ff ff       	call   c001d7be <ATA::access(unsigned long long, int, void*, bool)>
c001dbd9:	83 c4 20             	add    esp,0x20
c001dbdc:	85 c0                	test   eax,eax
c001dbde:	0f 95 c0             	setne  al
c001dbe1:	0f b6 c0             	movzx  eax,al
c001dbe4:	5b                   	pop    ebx
c001dbe5:	5e                   	pop    esi
c001dbe6:	5f                   	pop    edi
c001dbe7:	c3                   	ret    

c001dbe8 <ATA::write(unsigned long long, int, void*)>:
c001dbe8:	57                   	push   edi
c001dbe9:	b8 04 00 00 00       	mov    eax,0x4
c001dbee:	56                   	push   esi
c001dbef:	53                   	push   ebx
c001dbf0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dbf4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dbf8:	8d 7a ff             	lea    edi,[edx-0x1]
c001dbfb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dbff:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dc03:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dc09:	77 25                	ja     c001dc30 <ATA::write(unsigned long long, int, void*)+0x48>
c001dc0b:	b8 06 00 00 00       	mov    eax,0x6
c001dc10:	85 f6                	test   esi,esi
c001dc12:	74 1c                	je     c001dc30 <ATA::write(unsigned long long, int, void*)+0x48>
c001dc14:	50                   	push   eax
c001dc15:	50                   	push   eax
c001dc16:	6a 01                	push   0x1
c001dc18:	56                   	push   esi
c001dc19:	52                   	push   edx
c001dc1a:	53                   	push   ebx
c001dc1b:	51                   	push   ecx
c001dc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc20:	e8 99 fb ff ff       	call   c001d7be <ATA::access(unsigned long long, int, void*, bool)>
c001dc25:	83 c4 20             	add    esp,0x20
c001dc28:	85 c0                	test   eax,eax
c001dc2a:	0f 95 c0             	setne  al
c001dc2d:	0f b6 c0             	movzx  eax,al
c001dc30:	5b                   	pop    ebx
c001dc31:	5e                   	pop    esi
c001dc32:	5f                   	pop    edi
c001dc33:	c3                   	ret    

c001dc34 <ATA::detectCHS()>:
c001dc34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dc38:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001dc3e:	c1 e0 06             	shl    eax,0x6
c001dc41:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001dc47:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001dc51:	c7 44 24 04 a4 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc00237a4
c001dc59:	e9 88 10 ff ff       	jmp    c000ece6 <KePanic(char const*)>

c001dc5e <ATA::open(int, int, void*)>:
c001dc5e:	53                   	push   ebx
c001dc5f:	83 ec 08             	sub    esp,0x8
c001dc62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc6e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dc74:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc7a:	c1 e0 06             	shl    eax,0x6
c001dc7d:	01 d0                	add    eax,edx
c001dc7f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001dc86:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001dc8c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dc93:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc9d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dca3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dcaa:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dcb1:	75 0c                	jne    c001dcbf <ATA::open(int, int, void*)+0x61>
c001dcb3:	83 ec 0c             	sub    esp,0xc
c001dcb6:	53                   	push   ebx
c001dcb7:	e8 78 ff ff ff       	call   c001dc34 <ATA::detectCHS()>
c001dcbc:	83 c4 10             	add    esp,0x10
c001dcbf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dcc5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dccb:	c1 e0 06             	shl    eax,0x6
c001dcce:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dcd5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dcdf:	d1 e8                	shr    eax,1
c001dce1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dce7:	6a 04                	push   0x4
c001dce9:	6a 0c                	push   0xc
c001dceb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dcf2:	50                   	push   eax
c001dcf3:	52                   	push   edx
c001dcf4:	e8 3b e9 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcf9:	90                   	nop
c001dcfa:	90                   	nop
c001dcfb:	6a 00                	push   0x0
c001dcfd:	6a 0c                	push   0xc
c001dcff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd06:	50                   	push   eax
c001dd07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd0d:	e8 22 e9 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd12:	83 c4 14             	add    esp,0x14
c001dd15:	53                   	push   ebx
c001dd16:	e8 6f b7 fe ff       	call   c000948a <PhysicalDisk::startCache()>
c001dd1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dd1e:	e8 4f c6 fe ff       	call   c000a372 <createPartitionsForDisk(PhysicalDisk*)>
c001dd23:	31 c0                	xor    eax,eax
c001dd25:	83 c4 18             	add    esp,0x18
c001dd28:	5b                   	pop    ebx
c001dd29:	c3                   	ret    

c001dd2a <combineCharAndColour(char, unsigned char)>:
c001dd2a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dd2f:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001dd35:	c1 e0 08             	shl    eax,0x8
c001dd38:	09 d0                	or     eax,edx
c001dd3a:	c3                   	ret    

c001dd3b <combineColours(unsigned char, unsigned char)>:
c001dd3b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dd40:	c1 e0 04             	shl    eax,0x4
c001dd43:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001dd47:	c3                   	ret    

c001dd48 <ATAPI::write(unsigned long long, int, void*)>:
c001dd48:	b8 03 00 00 00       	mov    eax,0x3
c001dd4d:	c3                   	ret    

c001dd4e <ATAPI::close(int, int, void*)>:
c001dd4e:	83 ec 0c             	sub    esp,0xc
c001dd51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dd5b:	85 c0                	test   eax,eax
c001dd5d:	74 0c                	je     c001dd6b <ATAPI::close(int, int, void*)+0x1d>
c001dd5f:	83 ec 0c             	sub    esp,0xc
c001dd62:	8b 10                	mov    edx,DWORD PTR [eax]
c001dd64:	50                   	push   eax
c001dd65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dd68:	83 c4 10             	add    esp,0x10
c001dd6b:	31 c0                	xor    eax,eax
c001dd6d:	83 c4 0c             	add    esp,0xc
c001dd70:	c3                   	ret    
c001dd71:	90                   	nop

c001dd72 <ATAPI::ATAPI()>:
c001dd72:	83 ec 0c             	sub    esp,0xc
c001dd75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd79:	83 ec 04             	sub    esp,0x4
c001dd7c:	68 00 08 00 00       	push   0x800
c001dd81:	68 f9 38 02 c0       	push   0xc00238f9
c001dd86:	50                   	push   eax
c001dd87:	e8 96 b6 fe ff       	call   c0009422 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd8c:	83 c4 10             	add    esp,0x10
c001dd8f:	ba 08 38 02 c0       	mov    edx,0xc0023808
c001dd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd98:	89 10                	mov    DWORD PTR [eax],edx
c001dd9a:	90                   	nop
c001dd9b:	83 c4 0c             	add    esp,0xc
c001dd9e:	c3                   	ret    
c001dd9f:	90                   	nop

c001dda0 <ATAPI::readyForCommand()>:
c001dda0:	56                   	push   esi
c001dda1:	53                   	push   ebx
c001dda2:	53                   	push   ebx
c001dda3:	31 db                	xor    ebx,ebx
c001dda5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dda9:	51                   	push   ecx
c001ddaa:	6a 0c                	push   0xc
c001ddac:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ddb3:	50                   	push   eax
c001ddb4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ddba:	e8 35 e9 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001ddbf:	83 c4 10             	add    esp,0x10
c001ddc2:	a8 88                	test   al,0x88
c001ddc4:	74 25                	je     c001ddeb <ATAPI::readyForCommand()+0x4b>
c001ddc6:	43                   	inc    ebx
c001ddc7:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001ddcd:	7e da                	jle    c001dda9 <ATAPI::readyForCommand()+0x9>
c001ddcf:	83 ec 0c             	sub    esp,0xc
c001ddd2:	68 5e 01 00 00       	push   0x15e
c001ddd7:	e8 64 79 ff ff       	call   c0015740 <milliTenthSleep(unsigned int)>
c001dddc:	83 c4 10             	add    esp,0x10
c001dddf:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001dde5:	75 c2                	jne    c001dda9 <ATAPI::readyForCommand()+0x9>
c001dde7:	31 c0                	xor    eax,eax
c001dde9:	eb 02                	jmp    c001dded <ATAPI::readyForCommand()+0x4d>
c001ddeb:	b0 01                	mov    al,0x1
c001dded:	5a                   	pop    edx
c001ddee:	5b                   	pop    ebx
c001ddef:	5e                   	pop    esi
c001ddf0:	c3                   	ret    
c001ddf1:	90                   	nop

c001ddf2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ddf2:	55                   	push   ebp
c001ddf3:	57                   	push   edi
c001ddf4:	56                   	push   esi
c001ddf5:	53                   	push   ebx
c001ddf6:	83 ec 20             	sub    esp,0x20
c001ddf9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ddfd:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001de01:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001de05:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001de09:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001de0d:	6a 01                	push   0x1
c001de0f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de16:	50                   	push   eax
c001de17:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de1d:	e8 1a ea ff ff       	call   c001c83c <IDE::enableIRQs(unsigned char, bool)>
c001de22:	5e                   	pop    esi
c001de23:	58                   	pop    eax
c001de24:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de2b:	50                   	push   eax
c001de2c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de32:	e8 d7 e7 ff ff       	call   c001c60e <IDE::prepareInterrupt(unsigned char)>
c001de37:	89 3c 24             	mov    DWORD PTR [esp],edi
c001de3a:	e8 61 ff ff ff       	call   c001dda0 <ATAPI::readyForCommand()>
c001de3f:	83 c4 10             	add    esp,0x10
c001de42:	84 c0                	test   al,al
c001de44:	75 0a                	jne    c001de50 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001de46:	bb 01 00 00 00       	mov    ebx,0x1
c001de4b:	e9 60 02 00 00       	jmp    c001e0b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001de50:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001de56:	c1 e0 04             	shl    eax,0x4
c001de59:	0f b6 c0             	movzx  eax,al
c001de5c:	50                   	push   eax
c001de5d:	6a 06                	push   0x6
c001de5f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de66:	50                   	push   eax
c001de67:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de6d:	e8 c2 e7 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de72:	6a 00                	push   0x0
c001de74:	6a 01                	push   0x1
c001de76:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de7d:	50                   	push   eax
c001de7e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de84:	e8 ab e7 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de89:	83 c4 20             	add    esp,0x20
c001de8c:	0f b6 c3             	movzx  eax,bl
c001de8f:	0f b6 df             	movzx  ebx,bh
c001de92:	50                   	push   eax
c001de93:	6a 04                	push   0x4
c001de95:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de9c:	50                   	push   eax
c001de9d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dea3:	e8 8c e7 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dea8:	53                   	push   ebx
c001dea9:	6a 05                	push   0x5
c001deab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001deb2:	50                   	push   eax
c001deb3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001deb9:	e8 76 e7 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001debe:	83 c4 20             	add    esp,0x20
c001dec1:	68 a0 00 00 00       	push   0xa0
c001dec6:	6a 07                	push   0x7
c001dec8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001decf:	50                   	push   eax
c001ded0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ded6:	e8 59 e7 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dedb:	83 c4 0c             	add    esp,0xc
c001dede:	6a 01                	push   0x1
c001dee0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dee7:	50                   	push   eax
c001dee8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001deee:	e8 4b f4 ff ff       	call   c001d33e <IDE::polling(unsigned char, unsigned int)>
c001def3:	83 c4 10             	add    esp,0x10
c001def6:	0f b6 d8             	movzx  ebx,al
c001def9:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001deff:	85 db                	test   ebx,ebx
c001df01:	74 20                	je     c001df23 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001df03:	53                   	push   ebx
c001df04:	0f b6 c0             	movzx  eax,al
c001df07:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001df0e:	52                   	push   edx
c001df0f:	50                   	push   eax
c001df10:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df16:	e8 69 f3 ff ff       	call   c001d284 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001df1b:	83 c4 10             	add    esp,0x10
c001df1e:	e9 8d 01 00 00       	jmp    c001e0b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001df23:	0f b6 c0             	movzx  eax,al
c001df26:	53                   	push   ebx
c001df27:	53                   	push   ebx
c001df28:	50                   	push   eax
c001df29:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df2f:	e8 ee e6 ff ff       	call   c001c622 <IDE::getBase(unsigned char)>
c001df34:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001df38:	b9 06 00 00 00       	mov    ecx,0x6
c001df3d:	89 c2                	mov    edx,eax
c001df3f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001df42:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001df46:	83 c4 10             	add    esp,0x10
c001df49:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001df4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001df52:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001df58:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001df5f:	85 db                	test   ebx,ebx
c001df61:	0f 84 ec 00 00 00    	je     c001e053 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001df67:	51                   	push   ecx
c001df68:	51                   	push   ecx
c001df69:	52                   	push   edx
c001df6a:	50                   	push   eax
c001df6b:	e8 32 e8 ff ff       	call   c001c7a2 <IDE::waitInterrupt(unsigned char)>
c001df70:	83 c4 10             	add    esp,0x10
c001df73:	84 c0                	test   al,al
c001df75:	0f 84 cb fe ff ff    	je     c001de46 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001df7b:	56                   	push   esi
c001df7c:	56                   	push   esi
c001df7d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df84:	50                   	push   eax
c001df85:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df8b:	e8 7e e6 ff ff       	call   c001c60e <IDE::prepareInterrupt(unsigned char)>
c001df90:	83 c4 0c             	add    esp,0xc
c001df93:	6a 04                	push   0x4
c001df95:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df9c:	50                   	push   eax
c001df9d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dfa3:	e8 4c e7 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001dfa8:	83 c4 0c             	add    esp,0xc
c001dfab:	89 c6                	mov    esi,eax
c001dfad:	6a 05                	push   0x5
c001dfaf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dfb6:	50                   	push   eax
c001dfb7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dfbd:	e8 32 e7 ff ff       	call   c001c6f4 <IDE::read(unsigned char, unsigned char)>
c001dfc2:	89 f1                	mov    ecx,esi
c001dfc4:	0f b6 c0             	movzx  eax,al
c001dfc7:	0f b6 f1             	movzx  esi,cl
c001dfca:	c1 e0 08             	shl    eax,0x8
c001dfcd:	09 c6                	or     esi,eax
c001dfcf:	d1 fe                	sar    esi,1
c001dfd1:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001dfd5:	83 c4 10             	add    esp,0x10
c001dfd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dfdd:	74 41                	je     c001e020 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001dfdf:	31 c9                	xor    ecx,ecx
c001dfe1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dfe7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dfee:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001dff2:	75 0a                	jne    c001dffe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001dff4:	01 c9                	add    ecx,ecx
c001dff6:	01 cd                	add    ebp,ecx
c001dff8:	4b                   	dec    ebx
c001dff9:	e9 54 ff ff ff       	jmp    c001df52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001dffe:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001e003:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e007:	51                   	push   ecx
c001e008:	51                   	push   ecx
c001e009:	52                   	push   edx
c001e00a:	50                   	push   eax
c001e00b:	e8 12 e6 ff ff       	call   c001c622 <IDE::getBase(unsigned char)>
c001e010:	89 c2                	mov    edx,eax
c001e012:	89 f0                	mov    eax,esi
c001e014:	66 ef                	out    dx,ax
c001e016:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e01a:	83 c4 10             	add    esp,0x10
c001e01d:	41                   	inc    ecx
c001e01e:	eb c1                	jmp    c001dfe1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001e020:	31 f6                	xor    esi,esi
c001e022:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e028:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e02f:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001e033:	75 06                	jne    c001e03b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001e035:	01 f6                	add    esi,esi
c001e037:	01 f5                	add    ebp,esi
c001e039:	eb bd                	jmp    c001dff8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001e03b:	51                   	push   ecx
c001e03c:	51                   	push   ecx
c001e03d:	52                   	push   edx
c001e03e:	50                   	push   eax
c001e03f:	e8 de e5 ff ff       	call   c001c622 <IDE::getBase(unsigned char)>
c001e044:	89 c2                	mov    edx,eax
c001e046:	66 ed                	in     ax,dx
c001e048:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001e04d:	83 c4 10             	add    esp,0x10
c001e050:	46                   	inc    esi
c001e051:	eb cf                	jmp    c001e022 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001e053:	51                   	push   ecx
c001e054:	51                   	push   ecx
c001e055:	52                   	push   edx
c001e056:	50                   	push   eax
c001e057:	e8 46 e7 ff ff       	call   c001c7a2 <IDE::waitInterrupt(unsigned char)>
c001e05c:	83 c4 10             	add    esp,0x10
c001e05f:	84 c0                	test   al,al
c001e061:	0f 84 df fd ff ff    	je     c001de46 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001e067:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e06c:	52                   	push   edx
c001e06d:	52                   	push   edx
c001e06e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e075:	50                   	push   eax
c001e076:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e07c:	e8 8d e5 ff ff       	call   c001c60e <IDE::prepareInterrupt(unsigned char)>
c001e081:	83 c4 10             	add    esp,0x10
c001e084:	50                   	push   eax
c001e085:	50                   	push   eax
c001e086:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e08d:	50                   	push   eax
c001e08e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e094:	e8 89 e5 ff ff       	call   c001c622 <IDE::getBase(unsigned char)>
c001e099:	8d 50 07             	lea    edx,[eax+0x7]
c001e09c:	ec                   	in     al,dx
c001e09d:	83 c4 10             	add    esp,0x10
c001e0a0:	a8 88                	test   al,0x88
c001e0a2:	74 0a                	je     c001e0ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001e0a4:	4b                   	dec    ebx
c001e0a5:	75 dd                	jne    c001e084 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001e0a7:	bb 02 00 00 00       	mov    ebx,0x2
c001e0ac:	eb 02                	jmp    c001e0b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e0ae:	31 db                	xor    ebx,ebx
c001e0b0:	83 c4 1c             	add    esp,0x1c
c001e0b3:	89 d8                	mov    eax,ebx
c001e0b5:	5b                   	pop    ebx
c001e0b6:	5e                   	pop    esi
c001e0b7:	5f                   	pop    edi
c001e0b8:	5d                   	pop    ebp
c001e0b9:	c3                   	ret    

c001e0ba <ATAPI::diskRemoved()>:
c001e0ba:	53                   	push   ebx
c001e0bb:	83 ec 14             	sub    esp,0x14
c001e0be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e0c2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e0c9:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e0cf:	e8 8e bf fe ff       	call   c000a062 <LogicalDisk::unmount()>
c001e0d4:	58                   	pop    eax
c001e0d5:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0db:	e8 60 c9 fe ff       	call   c000aa40 <VCache::writeWriteBuffer()>
c001e0e0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e0ea:	83 c4 18             	add    esp,0x18
c001e0ed:	5b                   	pop    ebx
c001e0ee:	e9 3d c9 fe ff       	jmp    c000aa30 <VCache::invalidateReadBuffer()>
c001e0f3:	90                   	nop

c001e0f4 <ATAPI::eject()>:
c001e0f4:	57                   	push   edi
c001e0f5:	b9 03 00 00 00       	mov    ecx,0x3
c001e0fa:	53                   	push   ebx
c001e0fb:	83 ec 14             	sub    esp,0x14
c001e0fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e102:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e106:	fc                   	cld    
c001e107:	31 c0                	xor    eax,eax
c001e109:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e10b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e110:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e115:	50                   	push   eax
c001e116:	50                   	push   eax
c001e117:	6a 00                	push   0x0
c001e119:	6a 00                	push   0x0
c001e11b:	6a 00                	push   0x0
c001e11d:	6a 02                	push   0x2
c001e11f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e123:	50                   	push   eax
c001e124:	53                   	push   ebx
c001e125:	e8 c8 fc ff ff       	call   c001ddf2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e12a:	83 c4 14             	add    esp,0x14
c001e12d:	53                   	push   ebx
c001e12e:	e8 87 ff ff ff       	call   c001e0ba <ATAPI::diskRemoved()>
c001e133:	83 c4 24             	add    esp,0x24
c001e136:	31 c0                	xor    eax,eax
c001e138:	5b                   	pop    ebx
c001e139:	5f                   	pop    edi
c001e13a:	c3                   	ret    
c001e13b:	90                   	nop

c001e13c <ATAPI::diskInserted()>:
c001e13c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e140:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e147:	c3                   	ret    

c001e148 <ATAPI::detectMedia()>:
c001e148:	56                   	push   esi
c001e149:	53                   	push   ebx
c001e14a:	83 ec 28             	sub    esp,0x28
c001e14d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e151:	6a 0c                	push   0xc
c001e153:	6a 00                	push   0x0
c001e155:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e159:	56                   	push   esi
c001e15a:	e8 91 23 fe ff       	call   c00004f0 <memset>
c001e15f:	58                   	pop    eax
c001e160:	5a                   	pop    edx
c001e161:	6a 00                	push   0x0
c001e163:	6a 00                	push   0x0
c001e165:	6a 00                	push   0x0
c001e167:	6a 00                	push   0x0
c001e169:	56                   	push   esi
c001e16a:	53                   	push   ebx
c001e16b:	e8 82 fc ff ff       	call   c001ddf2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e170:	83 c4 1c             	add    esp,0x1c
c001e173:	6a 0c                	push   0xc
c001e175:	6a 00                	push   0x0
c001e177:	56                   	push   esi
c001e178:	e8 73 23 fe ff       	call   c00004f0 <memset>
c001e17d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e182:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e187:	59                   	pop    ecx
c001e188:	58                   	pop    eax
c001e189:	6a 01                	push   0x1
c001e18b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e18f:	50                   	push   eax
c001e190:	6a 00                	push   0x0
c001e192:	6a 12                	push   0x12
c001e194:	56                   	push   esi
c001e195:	53                   	push   ebx
c001e196:	e8 57 fc ff ff       	call   c001ddf2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e19b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e19f:	83 c4 20             	add    esp,0x20
c001e1a2:	83 e0 7f             	and    eax,0x7f
c001e1a5:	83 f8 70             	cmp    eax,0x70
c001e1a8:	74 15                	je     c001e1bf <ATAPI::detectMedia()+0x77>
c001e1aa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e1b1:	75 0c                	jne    c001e1bf <ATAPI::detectMedia()+0x77>
c001e1b3:	83 ec 0c             	sub    esp,0xc
c001e1b6:	53                   	push   ebx
c001e1b7:	e8 80 ff ff ff       	call   c001e13c <ATAPI::diskInserted()>
c001e1bc:	83 c4 10             	add    esp,0x10
c001e1bf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e1c3:	83 e0 0f             	and    eax,0xf
c001e1c6:	83 f8 02             	cmp    eax,0x2
c001e1c9:	75 1b                	jne    c001e1e6 <ATAPI::detectMedia()+0x9e>
c001e1cb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e1d0:	75 2d                	jne    c001e1ff <ATAPI::detectMedia()+0xb7>
c001e1d2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e1d9:	74 24                	je     c001e1ff <ATAPI::detectMedia()+0xb7>
c001e1db:	83 ec 0c             	sub    esp,0xc
c001e1de:	53                   	push   ebx
c001e1df:	e8 d6 fe ff ff       	call   c001e0ba <ATAPI::diskRemoved()>
c001e1e4:	eb 16                	jmp    c001e1fc <ATAPI::detectMedia()+0xb4>
c001e1e6:	85 c0                	test   eax,eax
c001e1e8:	75 15                	jne    c001e1ff <ATAPI::detectMedia()+0xb7>
c001e1ea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e1f1:	75 0c                	jne    c001e1ff <ATAPI::detectMedia()+0xb7>
c001e1f3:	83 ec 0c             	sub    esp,0xc
c001e1f6:	53                   	push   ebx
c001e1f7:	e8 40 ff ff ff       	call   c001e13c <ATAPI::diskInserted()>
c001e1fc:	83 c4 10             	add    esp,0x10
c001e1ff:	83 c4 24             	add    esp,0x24
c001e202:	5b                   	pop    ebx
c001e203:	5e                   	pop    esi
c001e204:	c3                   	ret    
c001e205:	90                   	nop

c001e206 <ATAPI::open(int, int, void*)>:
c001e206:	56                   	push   esi
c001e207:	53                   	push   ebx
c001e208:	50                   	push   eax
c001e209:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e20d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e211:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e215:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e21b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e221:	c1 e0 06             	shl    eax,0x6
c001e224:	01 d0                	add    eax,edx
c001e226:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e22d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e233:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e23a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e244:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e24a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e251:	6a 04                	push   0x4
c001e253:	6a 0c                	push   0xc
c001e255:	51                   	push   ecx
c001e256:	52                   	push   edx
c001e257:	e8 d8 e3 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e25c:	90                   	nop
c001e25d:	90                   	nop
c001e25e:	6a 00                	push   0x0
c001e260:	6a 0c                	push   0xc
c001e262:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e269:	50                   	push   eax
c001e26a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e270:	e8 bf e3 ff ff       	call   c001c634 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e275:	83 c4 14             	add    esp,0x14
c001e278:	68 78 01 00 00       	push   0x178
c001e27d:	e8 0f 07 ff ff       	call   c000e991 <malloc>
c001e282:	83 c4 0c             	add    esp,0xc
c001e285:	89 c6                	mov    esi,eax
c001e287:	6a 00                	push   0x0
c001e289:	68 ff ff ff 7f       	push   0x7fffffff
c001e28e:	6a 00                	push   0x0
c001e290:	6a 00                	push   0x0
c001e292:	53                   	push   ebx
c001e293:	68 ab 39 02 c0       	push   0xc00239ab
c001e298:	50                   	push   eax
c001e299:	e8 02 bc fe ff       	call   c0009ea0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e29e:	83 c4 14             	add    esp,0x14
c001e2a1:	56                   	push   esi
c001e2a2:	e8 b9 bc fe ff       	call   c0009f60 <LogicalDisk::assignDriveLetter()>
c001e2a7:	5a                   	pop    edx
c001e2a8:	0f be c0             	movsx  eax,al
c001e2ab:	59                   	pop    ecx
c001e2ac:	50                   	push   eax
c001e2ad:	68 f0 37 02 c0       	push   0xc00237f0
c001e2b2:	e8 ad 8c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e2b7:	58                   	pop    eax
c001e2b8:	5a                   	pop    edx
c001e2b9:	56                   	push   esi
c001e2ba:	53                   	push   ebx
c001e2bb:	e8 7e ad fe ff       	call   c000903e <Device::addChild(Device*)>
c001e2c0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e2c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e2c9:	e8 bc b1 fe ff       	call   c000948a <PhysicalDisk::startCache()>
c001e2ce:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e2d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e2d8:	e8 6b fe ff ff       	call   c001e148 <ATAPI::detectMedia()>
c001e2dd:	83 c4 14             	add    esp,0x14
c001e2e0:	31 c0                	xor    eax,eax
c001e2e2:	5b                   	pop    ebx
c001e2e3:	5e                   	pop    esi
c001e2e4:	c3                   	ret    
c001e2e5:	90                   	nop

c001e2e6 <ATAPI::read(unsigned long long, int, void*)>:
c001e2e6:	55                   	push   ebp
c001e2e7:	57                   	push   edi
c001e2e8:	56                   	push   esi
c001e2e9:	53                   	push   ebx
c001e2ea:	83 ec 1c             	sub    esp,0x1c
c001e2ed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e2f1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e2f5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e2f9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e300:	74 3c                	je     c001e33e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e302:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e306:	b9 03 00 00 00       	mov    ecx,0x3
c001e30b:	fc                   	cld    
c001e30c:	31 c0                	xor    eax,eax
c001e30e:	0f ce                	bswap  esi
c001e310:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e312:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e317:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e31b:	89 e8                	mov    eax,ebp
c001e31d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e321:	50                   	push   eax
c001e322:	50                   	push   eax
c001e323:	55                   	push   ebp
c001e324:	c1 e5 0b             	shl    ebp,0xb
c001e327:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e32b:	6a 00                	push   0x0
c001e32d:	55                   	push   ebp
c001e32e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e332:	50                   	push   eax
c001e333:	53                   	push   ebx
c001e334:	e8 b9 fa ff ff       	call   c001ddf2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e339:	83 c4 20             	add    esp,0x20
c001e33c:	eb 1a                	jmp    c001e358 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e33e:	83 ec 0c             	sub    esp,0xc
c001e341:	53                   	push   ebx
c001e342:	e8 01 fe ff ff       	call   c001e148 <ATAPI::detectMedia()>
c001e347:	83 c4 10             	add    esp,0x10
c001e34a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e351:	75 af                	jne    c001e302 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e353:	b8 02 00 00 00       	mov    eax,0x2
c001e358:	83 c4 1c             	add    esp,0x1c
c001e35b:	5b                   	pop    ebx
c001e35c:	5e                   	pop    esi
c001e35d:	5f                   	pop    edi
c001e35e:	5d                   	pop    ebp
c001e35f:	c3                   	ret    

c001e360 <SATA::close(int, int, void*)>:
c001e360:	83 ec 0c             	sub    esp,0xc
c001e363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e367:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e36d:	85 c0                	test   eax,eax
c001e36f:	74 0c                	je     c001e37d <SATA::close(int, int, void*)+0x1d>
c001e371:	83 ec 0c             	sub    esp,0xc
c001e374:	8b 10                	mov    edx,DWORD PTR [eax]
c001e376:	50                   	push   eax
c001e377:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e37a:	83 c4 10             	add    esp,0x10
c001e37d:	31 c0                	xor    eax,eax
c001e37f:	83 c4 0c             	add    esp,0xc
c001e382:	c3                   	ret    
c001e383:	90                   	nop

c001e384 <SATA::powerSaving(PowerSavingLevel)>:
c001e384:	c3                   	ret    
c001e385:	90                   	nop

c001e386 <SATA::open(int, int, void*)>:
c001e386:	56                   	push   esi
c001e387:	53                   	push   ebx
c001e388:	83 ec 10             	sub    esp,0x10
c001e38b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e38f:	68 38 38 02 c0       	push   0xc0023838
c001e394:	e8 cb 8b fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e399:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e39d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e3a7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e3ad:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e3b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e3bb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e3c5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e3cb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e3d2:	e8 03 0b ff ff       	call   c000eeda <Phys::allocatePage()>
c001e3d7:	89 c6                	mov    esi,eax
c001e3d9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e3df:	81 c6 00 10 00 00    	add    esi,0x1000
c001e3e5:	e8 f0 0a ff ff       	call   c000eeda <Phys::allocatePage()>
c001e3ea:	83 c4 10             	add    esp,0x10
c001e3ed:	39 c6                	cmp    esi,eax
c001e3ef:	74 10                	je     c001e401 <SATA::open(int, int, void*)+0x7b>
c001e3f1:	83 ec 0c             	sub    esp,0xc
c001e3f4:	68 44 38 02 c0       	push   0xc0023844
c001e3f9:	e8 e8 08 ff ff       	call   c000ece6 <KePanic(char const*)>
c001e3fe:	83 c4 10             	add    esp,0x10
c001e401:	83 ec 0c             	sub    esp,0xc
c001e404:	6a 02                	push   0x2
c001e406:	e8 96 3c ff ff       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c001e40b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e411:	6a 03                	push   0x3
c001e413:	50                   	push   eax
c001e414:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e41a:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001e420:	e8 65 43 ff ff       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c001e425:	83 c4 14             	add    esp,0x14
c001e428:	53                   	push   ebx
c001e429:	e8 5c b0 fe ff       	call   c000948a <PhysicalDisk::startCache()>
c001e42e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e431:	e8 3c bf fe ff       	call   c000a372 <createPartitionsForDisk(PhysicalDisk*)>
c001e436:	83 c4 14             	add    esp,0x14
c001e439:	31 c0                	xor    eax,eax
c001e43b:	5b                   	pop    ebx
c001e43c:	5e                   	pop    esi
c001e43d:	c3                   	ret    

c001e43e <SATA::SATA()>:
c001e43e:	83 ec 0c             	sub    esp,0xc
c001e441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e445:	83 ec 04             	sub    esp,0x4
c001e448:	68 00 02 00 00       	push   0x200
c001e44d:	68 58 38 02 c0       	push   0xc0023858
c001e452:	50                   	push   eax
c001e453:	e8 ca af fe ff       	call   c0009422 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e458:	83 c4 10             	add    esp,0x10
c001e45b:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c001e460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e464:	89 10                	mov    DWORD PTR [eax],edx
c001e466:	90                   	nop
c001e467:	83 c4 0c             	add    esp,0xc
c001e46a:	c3                   	ret    
c001e46b:	90                   	nop

c001e46c <SATA::access(unsigned long long, int, void*, bool)>:
c001e46c:	55                   	push   ebp
c001e46d:	57                   	push   edi
c001e46e:	56                   	push   esi
c001e46f:	53                   	push   ebx
c001e470:	83 ec 2c             	sub    esp,0x2c
c001e473:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e477:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e47b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e47f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e483:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e487:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e48b:	fa                   	cli    
c001e48c:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001e492:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e497:	7e 10                	jle    c001e4a9 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c001e499:	83 ec 0c             	sub    esp,0xc
c001e49c:	68 68 38 02 c0       	push   0xc0023868
c001e4a1:	e8 40 08 ff ff       	call   c000ece6 <KePanic(char const*)>
c001e4a6:	83 c4 10             	add    esp,0x10
c001e4a9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e4af:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001e4b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e4bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e4bf:	89 d0                	mov    eax,edx
c001e4c1:	c1 e0 07             	shl    eax,0x7
c001e4c4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001e4c8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e4d2:	51                   	push   ecx
c001e4d3:	8d 42 02             	lea    eax,[edx+0x2]
c001e4d6:	51                   	push   ecx
c001e4d7:	c1 e0 07             	shl    eax,0x7
c001e4da:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e4de:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4e2:	50                   	push   eax
c001e4e3:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001e4e9:	e8 30 ef ff ff       	call   c001d41e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e4ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4f2:	83 c4 10             	add    esp,0x10
c001e4f5:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e4fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4fe:	0f 84 aa 01 00 00    	je     c001e6ae <SATA::access(unsigned long long, int, void*, bool)+0x242>
c001e504:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e508:	c1 e0 09             	shl    eax,0x9
c001e50b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e510:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e514:	74 0e                	je     c001e524 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c001e516:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001e51c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e520:	89 c1                	mov    ecx,eax
c001e522:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e524:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e52a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e52e:	8d 42 02             	lea    eax,[edx+0x2]
c001e531:	c1 e0 07             	shl    eax,0x7
c001e534:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001e538:	8b 00                	mov    eax,DWORD PTR [eax]
c001e53a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e540:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e546:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e54a:	c1 e1 05             	shl    ecx,0x5
c001e54d:	01 c8                	add    eax,ecx
c001e54f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e553:	83 e1 01             	and    ecx,0x1
c001e556:	89 ce                	mov    esi,ecx
c001e558:	8a 08                	mov    cl,BYTE PTR [eax]
c001e55a:	c1 e6 06             	shl    esi,0x6
c001e55d:	83 e1 bf             	and    ecx,0xffffffbf
c001e560:	09 f1                	or     ecx,esi
c001e562:	88 08                	mov    BYTE PTR [eax],cl
c001e564:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e566:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001e56c:	81 c9 05 00 01 00    	or     ecx,0x10005
c001e572:	89 08                	mov    DWORD PTR [eax],ecx
c001e574:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e57a:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001e580:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001e586:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001e589:	50                   	push   eax
c001e58a:	68 90 00 00 00       	push   0x90
c001e58f:	6a 00                	push   0x0
c001e591:	56                   	push   esi
c001e592:	e8 59 1f fe ff       	call   c00004f0 <memset>
c001e597:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e59d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001e5a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e5a7:	83 c4 10             	add    esp,0x10
c001e5aa:	48                   	dec    eax
c001e5ab:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e5b0:	89 c1                	mov    ecx,eax
c001e5b2:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001e5b8:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e5bd:	09 c8                	or     eax,ecx
c001e5bf:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001e5c5:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001e5cb:	83 c8 80             	or     eax,0xffffff80
c001e5ce:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001e5d4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e5d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e5db:	25 00 7f 00 00       	and    eax,0x7f00
c001e5e0:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e5e5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e5ea:	66 89 06             	mov    WORD PTR [esi],ax
c001e5ed:	b0 35                	mov    al,0x35
c001e5ef:	75 02                	jne    c001e5f3 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c001e5f1:	b0 25                	mov    al,0x25
c001e5f3:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001e5f6:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001e5fa:	89 e8                	mov    eax,ebp
c001e5fc:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001e600:	c1 e8 10             	shr    eax,0x10
c001e603:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001e606:	89 e8                	mov    eax,ebp
c001e608:	c1 e8 18             	shr    eax,0x18
c001e60b:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001e60e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e612:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001e615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e619:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001e61c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e620:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001e624:	89 d6                	mov    esi,edx
c001e626:	31 c0                	xor    eax,eax
c001e628:	c1 e6 07             	shl    esi,0x7
c001e62b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001e62f:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001e635:	80 e1 88             	and    cl,0x88
c001e638:	74 0a                	je     c001e644 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001e63a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e63f:	74 0a                	je     c001e64b <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001e641:	40                   	inc    eax
c001e642:	eb eb                	jmp    c001e62f <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001e644:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e649:	75 0a                	jne    c001e655 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001e64b:	83 ec 0c             	sub    esp,0xc
c001e64e:	68 a1 38 02 c0       	push   0xc00238a1
c001e653:	eb 36                	jmp    c001e68b <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001e655:	b8 01 00 00 00       	mov    eax,0x1
c001e65a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e65e:	c1 e2 07             	shl    edx,0x7
c001e661:	d3 e0                	shl    eax,cl
c001e663:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001e667:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001e66d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001e673:	85 c8                	test   eax,ecx
c001e675:	74 2b                	je     c001e6a2 <SATA::access(unsigned long long, int, void*, bool)+0x236>
c001e677:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001e67d:	0f ba e1 1e          	bt     ecx,0x1e
c001e681:	73 ea                	jae    c001e66d <SATA::access(unsigned long long, int, void*, bool)+0x201>
c001e683:	83 ec 0c             	sub    esp,0xc
c001e686:	68 af 38 02 c0       	push   0xc00238af
c001e68b:	e8 d4 88 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e690:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e695:	83 c4 10             	add    esp,0x10
c001e698:	48                   	dec    eax
c001e699:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001e69e:	85 c0                	test   eax,eax
c001e6a0:	eb 17                	jmp    c001e6b9 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c001e6a2:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001e6a8:	0f ba e0 1e          	bt     eax,0x1e
c001e6ac:	73 15                	jae    c001e6c3 <SATA::access(unsigned long long, int, void*, bool)+0x257>
c001e6ae:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e6b3:	48                   	dec    eax
c001e6b4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001e6b9:	75 01                	jne    c001e6bc <SATA::access(unsigned long long, int, void*, bool)+0x250>
c001e6bb:	fb                   	sti    
c001e6bc:	b8 01 00 00 00       	mov    eax,0x1
c001e6c1:	eb 29                	jmp    c001e6ec <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001e6c3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e6c8:	75 10                	jne    c001e6da <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c001e6ca:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001e6d0:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e6d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e6d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e6da:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e6df:	48                   	dec    eax
c001e6e0:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001e6e5:	75 03                	jne    c001e6ea <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e6e7:	fb                   	sti    
c001e6e8:	eb 02                	jmp    c001e6ec <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001e6ea:	31 c0                	xor    eax,eax
c001e6ec:	83 c4 2c             	add    esp,0x2c
c001e6ef:	5b                   	pop    ebx
c001e6f0:	5e                   	pop    esi
c001e6f1:	5f                   	pop    edi
c001e6f2:	5d                   	pop    ebp
c001e6f3:	c3                   	ret    

c001e6f4 <SATA::read(unsigned long long, int, void*)>:
c001e6f4:	57                   	push   edi
c001e6f5:	b8 04 00 00 00       	mov    eax,0x4
c001e6fa:	56                   	push   esi
c001e6fb:	53                   	push   ebx
c001e6fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e700:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e704:	8d 7a ff             	lea    edi,[edx-0x1]
c001e707:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e70b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e70f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e715:	77 25                	ja     c001e73c <SATA::read(unsigned long long, int, void*)+0x48>
c001e717:	b8 06 00 00 00       	mov    eax,0x6
c001e71c:	85 f6                	test   esi,esi
c001e71e:	74 1c                	je     c001e73c <SATA::read(unsigned long long, int, void*)+0x48>
c001e720:	50                   	push   eax
c001e721:	50                   	push   eax
c001e722:	6a 00                	push   0x0
c001e724:	56                   	push   esi
c001e725:	52                   	push   edx
c001e726:	53                   	push   ebx
c001e727:	51                   	push   ecx
c001e728:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e72c:	e8 3b fd ff ff       	call   c001e46c <SATA::access(unsigned long long, int, void*, bool)>
c001e731:	83 c4 20             	add    esp,0x20
c001e734:	85 c0                	test   eax,eax
c001e736:	0f 95 c0             	setne  al
c001e739:	0f b6 c0             	movzx  eax,al
c001e73c:	5b                   	pop    ebx
c001e73d:	5e                   	pop    esi
c001e73e:	5f                   	pop    edi
c001e73f:	c3                   	ret    

c001e740 <SATA::write(unsigned long long, int, void*)>:
c001e740:	55                   	push   ebp
c001e741:	b8 04 00 00 00       	mov    eax,0x4
c001e746:	57                   	push   edi
c001e747:	56                   	push   esi
c001e748:	53                   	push   ebx
c001e749:	83 ec 0c             	sub    esp,0xc
c001e74c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e750:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e754:	8d 73 ff             	lea    esi,[ebx-0x1]
c001e757:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e75b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e75f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e765:	77 3d                	ja     c001e7a4 <SATA::write(unsigned long long, int, void*)+0x64>
c001e767:	b8 06 00 00 00       	mov    eax,0x6
c001e76c:	85 ed                	test   ebp,ebp
c001e76e:	74 34                	je     c001e7a4 <SATA::write(unsigned long long, int, void*)+0x64>
c001e770:	c1 e3 09             	shl    ebx,0x9
c001e773:	01 eb                	add    ebx,ebp
c001e775:	89 d6                	mov    esi,edx
c001e777:	89 cf                	mov    edi,ecx
c001e779:	83 c6 01             	add    esi,0x1
c001e77c:	83 d7 00             	adc    edi,0x0
c001e77f:	50                   	push   eax
c001e780:	50                   	push   eax
c001e781:	6a 01                	push   0x1
c001e783:	55                   	push   ebp
c001e784:	81 c5 00 02 00 00    	add    ebp,0x200
c001e78a:	6a 01                	push   0x1
c001e78c:	51                   	push   ecx
c001e78d:	52                   	push   edx
c001e78e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e792:	e8 d5 fc ff ff       	call   c001e46c <SATA::access(unsigned long long, int, void*, bool)>
c001e797:	83 c4 20             	add    esp,0x20
c001e79a:	89 f2                	mov    edx,esi
c001e79c:	89 f9                	mov    ecx,edi
c001e79e:	39 dd                	cmp    ebp,ebx
c001e7a0:	75 d3                	jne    c001e775 <SATA::write(unsigned long long, int, void*)+0x35>
c001e7a2:	31 c0                	xor    eax,eax
c001e7a4:	83 c4 0c             	add    esp,0xc
c001e7a7:	5b                   	pop    ebx
c001e7a8:	5e                   	pop    esi
c001e7a9:	5f                   	pop    edi
c001e7aa:	5d                   	pop    ebp
c001e7ab:	c3                   	ret    

c001e7ac <SATAPI::write(unsigned long long, int, void*)>:
c001e7ac:	b8 03 00 00 00       	mov    eax,0x3
c001e7b1:	c3                   	ret    

c001e7b2 <SATAPI::close(int, int, void*)>:
c001e7b2:	83 ec 0c             	sub    esp,0xc
c001e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e7bf:	85 c0                	test   eax,eax
c001e7c1:	74 0c                	je     c001e7cf <SATAPI::close(int, int, void*)+0x1d>
c001e7c3:	83 ec 0c             	sub    esp,0xc
c001e7c6:	8b 10                	mov    edx,DWORD PTR [eax]
c001e7c8:	50                   	push   eax
c001e7c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e7cc:	83 c4 10             	add    esp,0x10
c001e7cf:	31 c0                	xor    eax,eax
c001e7d1:	83 c4 0c             	add    esp,0xc
c001e7d4:	c3                   	ret    
c001e7d5:	90                   	nop

c001e7d6 <SATAPI::SATAPI()>:
c001e7d6:	83 ec 0c             	sub    esp,0xc
c001e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7dd:	83 ec 04             	sub    esp,0x4
c001e7e0:	68 00 08 00 00       	push   0x800
c001e7e5:	68 f8 38 02 c0       	push   0xc00238f8
c001e7ea:	50                   	push   eax
c001e7eb:	e8 32 ac fe ff       	call   c0009422 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e7f0:	83 c4 10             	add    esp,0x10
c001e7f3:	ba ec 39 02 c0       	mov    edx,0xc00239ec
c001e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7fc:	89 10                	mov    DWORD PTR [eax],edx
c001e7fe:	90                   	nop
c001e7ff:	83 c4 0c             	add    esp,0xc
c001e802:	c3                   	ret    
c001e803:	90                   	nop

c001e804 <SATAPI::diskRemoved()>:
c001e804:	c3                   	ret    
c001e805:	90                   	nop

c001e806 <SATAPI::diskInserted()>:
c001e806:	83 ec 18             	sub    esp,0x18
c001e809:	68 04 39 02 c0       	push   0xc0023904
c001e80e:	e8 51 87 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e817:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e81e:	83 c4 1c             	add    esp,0x1c
c001e821:	c3                   	ret    

c001e822 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e822:	55                   	push   ebp
c001e823:	57                   	push   edi
c001e824:	56                   	push   esi
c001e825:	53                   	push   ebx
c001e826:	83 ec 34             	sub    esp,0x34
c001e829:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e82d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e831:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e835:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e839:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e83d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e843:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e849:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e84d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e853:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e857:	83 c0 02             	add    eax,0x2
c001e85a:	c1 e0 07             	shl    eax,0x7
c001e85d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e861:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e865:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e869:	c1 e0 07             	shl    eax,0x7
c001e86c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e870:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e874:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e87e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e882:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e888:	e8 91 eb ff ff       	call   c001d41e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e88d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e891:	83 c4 10             	add    esp,0x10
c001e894:	b8 01 00 00 00       	mov    eax,0x1
c001e899:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e89e:	0f 84 53 02 00 00    	je     c001eaf7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e8a4:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e8aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ae:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8b0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e8b6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e8bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e8c0:	c1 e1 05             	shl    ecx,0x5
c001e8c3:	01 c8                	add    eax,ecx
c001e8c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e8c7:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e8cd:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e8d3:	89 08                	mov    DWORD PTR [eax],ecx
c001e8d5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e8db:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e8e1:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e8e7:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e8ea:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e8ed:	50                   	push   eax
c001e8ee:	68 90 00 00 00       	push   0x90
c001e8f3:	6a 00                	push   0x0
c001e8f5:	53                   	push   ebx
c001e8f6:	e8 f5 1b fe ff       	call   c00004f0 <memset>
c001e8fb:	b9 0c 00 00 00       	mov    ecx,0xc
c001e900:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e904:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e906:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e90c:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e910:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e916:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e91a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e91e:	48                   	dec    eax
c001e91f:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e924:	89 c1                	mov    ecx,eax
c001e926:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e92c:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e931:	09 c8                	or     eax,ecx
c001e933:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e939:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e93f:	83 c8 80             	or     eax,0xffffff80
c001e942:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e948:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e94b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e94f:	25 00 7f 00 00       	and    eax,0x7f00
c001e954:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e958:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e95d:	66 89 03             	mov    WORD PTR [ebx],ax
c001e960:	89 d0                	mov    eax,edx
c001e962:	c1 ea 18             	shr    edx,0x18
c001e965:	c1 e8 10             	shr    eax,0x10
c001e968:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e96b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e96e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e972:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e975:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e979:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e97c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e980:	83 c4 10             	add    esp,0x10
c001e983:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e987:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e98b:	31 c0                	xor    eax,eax
c001e98d:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e993:	80 e1 88             	and    cl,0x88
c001e996:	74 0a                	je     c001e9a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e998:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e99d:	74 0a                	je     c001e9a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e99f:	40                   	inc    eax
c001e9a0:	eb eb                	jmp    c001e98d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e9a2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e9a7:	75 43                	jne    c001e9ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e9a9:	83 ec 0c             	sub    esp,0xc
c001e9ac:	68 1c 39 02 c0       	push   0xc002391c
c001e9b1:	e8 ae 85 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e9b6:	58                   	pop    eax
c001e9b7:	5a                   	pop    edx
c001e9b8:	68 31 39 02 c0       	push   0xc0023931
c001e9bd:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001e9c3:	e8 ae 2a ff ff       	call   c0011476 <VgaText::puts(char const*)>
c001e9c8:	59                   	pop    ecx
c001e9c9:	5b                   	pop    ebx
c001e9ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e9ce:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e9d4:	e8 df ea ff ff       	call   c001d4b8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e9d9:	5e                   	pop    esi
c001e9da:	5f                   	pop    edi
c001e9db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e9df:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e9e5:	e8 ae ea ff ff       	call   c001d498 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e9ea:	eb 48                	jmp    c001ea34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e9ec:	be 01 00 00 00       	mov    esi,0x1
c001e9f1:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e9f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e9f9:	d3 e6                	shl    esi,cl
c001e9fb:	c1 e7 07             	shl    edi,0x7
c001e9fe:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001ea04:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ea09:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ea0d:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ea13:	85 c6                	test   esi,eax
c001ea15:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001ea1b:	0f 84 a3 00 00 00    	je     c001eac4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001ea21:	0f ba e0 1e          	bt     eax,0x1e
c001ea25:	73 1a                	jae    c001ea41 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001ea27:	83 ec 0c             	sub    esp,0xc
c001ea2a:	68 43 39 02 c0       	push   0xc0023943
c001ea2f:	e8 30 85 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ea34:	83 c4 10             	add    esp,0x10
c001ea37:	b8 01 00 00 00       	mov    eax,0x1
c001ea3c:	e9 b6 00 00 00       	jmp    c001eaf7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ea41:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001ea47:	83 f8 0d             	cmp    eax,0xd
c001ea4a:	77 0a                	ja     c001ea56 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001ea4c:	83 ec 0c             	sub    esp,0xc
c001ea4f:	68 c8 00 00 00       	push   0xc8
c001ea54:	eb 28                	jmp    c001ea7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001ea56:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001ea5c:	83 f8 0d             	cmp    eax,0xd
c001ea5f:	77 0a                	ja     c001ea6b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001ea61:	83 ec 0c             	sub    esp,0xc
c001ea64:	68 58 02 00 00       	push   0x258
c001ea69:	eb 13                	jmp    c001ea7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001ea6b:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001ea71:	83 f8 06             	cmp    eax,0x6
c001ea74:	77 10                	ja     c001ea86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001ea76:	83 ec 0c             	sub    esp,0xc
c001ea79:	68 dc 05 00 00       	push   0x5dc
c001ea7e:	e8 bd 6c ff ff       	call   c0015740 <milliTenthSleep(unsigned int)>
c001ea83:	83 c4 10             	add    esp,0x10
c001ea86:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ea8a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ea8d:	75 06                	jne    c001ea95 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001ea8f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ea93:	74 15                	je     c001eaaa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001ea95:	83 fb 06             	cmp    ebx,0x6
c001ea98:	77 10                	ja     c001eaaa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001ea9a:	83 ec 0c             	sub    esp,0xc
c001ea9d:	68 c4 09 00 00       	push   0x9c4
c001eaa2:	e8 99 6c ff ff       	call   c0015740 <milliTenthSleep(unsigned int)>
c001eaa7:	83 c4 10             	add    esp,0x10
c001eaaa:	43                   	inc    ebx
c001eaab:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001eab1:	0f 85 56 ff ff ff    	jne    c001ea0d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001eab7:	83 ec 0c             	sub    esp,0xc
c001eaba:	68 56 39 02 c0       	push   0xc0023956
c001eabf:	e9 6b ff ff ff       	jmp    c001ea2f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001eac4:	0f ba e0 1e          	bt     eax,0x1e
c001eac8:	73 0d                	jae    c001ead7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001eaca:	83 ec 0c             	sub    esp,0xc
c001eacd:	68 6a 39 02 c0       	push   0xc002396a
c001ead2:	e9 58 ff ff ff       	jmp    c001ea2f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001ead7:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001eadc:	74 17                	je     c001eaf5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001eade:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001eae3:	74 10                	je     c001eaf5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001eae5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001eaeb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001eaef:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001eaf3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eaf5:	31 c0                	xor    eax,eax
c001eaf7:	83 c4 2c             	add    esp,0x2c
c001eafa:	5b                   	pop    ebx
c001eafb:	5e                   	pop    esi
c001eafc:	5f                   	pop    edi
c001eafd:	5d                   	pop    ebp
c001eafe:	c3                   	ret    
c001eaff:	90                   	nop

c001eb00 <SATAPI::eject()>:
c001eb00:	57                   	push   edi
c001eb01:	b9 03 00 00 00       	mov    ecx,0x3
c001eb06:	83 ec 18             	sub    esp,0x18
c001eb09:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001eb0d:	fc                   	cld    
c001eb0e:	31 c0                	xor    eax,eax
c001eb10:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eb12:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001eb17:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001eb1c:	50                   	push   eax
c001eb1d:	6a 00                	push   0x0
c001eb1f:	6a 00                	push   0x0
c001eb21:	6a 00                	push   0x0
c001eb23:	6a 00                	push   0x0
c001eb25:	6a 02                	push   0x2
c001eb27:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001eb2b:	50                   	push   eax
c001eb2c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001eb30:	e8 ed fc ff ff       	call   c001e822 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001eb35:	31 c0                	xor    eax,eax
c001eb37:	83 c4 38             	add    esp,0x38
c001eb3a:	5f                   	pop    edi
c001eb3b:	c3                   	ret    

c001eb3c <SATAPI::detectMedia()>:
c001eb3c:	53                   	push   ebx
c001eb3d:	83 ec 14             	sub    esp,0x14
c001eb40:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001eb44:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001eb4a:	e8 f1 be fe ff       	call   c000aa40 <VCache::writeWriteBuffer()>
c001eb4f:	59                   	pop    ecx
c001eb50:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001eb56:	e8 d5 be fe ff       	call   c000aa30 <VCache::invalidateReadBuffer()>
c001eb5b:	c7 04 24 7f 39 02 c0 	mov    DWORD PTR [esp],0xc002397f
c001eb62:	e8 fd 83 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001eb67:	83 c4 10             	add    esp,0x10
c001eb6a:	31 c0                	xor    eax,eax
c001eb6c:	8b 14 85 80 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6880]
c001eb73:	85 d2                	test   edx,edx
c001eb75:	74 0f                	je     c001eb86 <SATAPI::detectMedia()+0x4a>
c001eb77:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001eb7d:	75 07                	jne    c001eb86 <SATAPI::detectMedia()+0x4a>
c001eb7f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001eb86:	40                   	inc    eax
c001eb87:	83 f8 1a             	cmp    eax,0x1a
c001eb8a:	75 e0                	jne    c001eb6c <SATAPI::detectMedia()+0x30>
c001eb8c:	83 c4 08             	add    esp,0x8
c001eb8f:	5b                   	pop    ebx
c001eb90:	c3                   	ret    
c001eb91:	90                   	nop

c001eb92 <SATAPI::open(int, int, void*)>:
c001eb92:	56                   	push   esi
c001eb93:	53                   	push   ebx
c001eb94:	51                   	push   ecx
c001eb95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb9d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001eba7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ebad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ebb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ebbb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ebc5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ebcb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ebd2:	e8 03 03 ff ff       	call   c000eeda <Phys::allocatePage()>
c001ebd7:	89 c6                	mov    esi,eax
c001ebd9:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ebdf:	81 c6 00 10 00 00    	add    esi,0x1000
c001ebe5:	e8 f0 02 ff ff       	call   c000eeda <Phys::allocatePage()>
c001ebea:	39 c6                	cmp    esi,eax
c001ebec:	74 10                	je     c001ebfe <SATAPI::open(int, int, void*)+0x6c>
c001ebee:	83 ec 0c             	sub    esp,0xc
c001ebf1:	68 94 39 02 c0       	push   0xc0023994
c001ebf6:	e8 eb 00 ff ff       	call   c000ece6 <KePanic(char const*)>
c001ebfb:	83 c4 10             	add    esp,0x10
c001ebfe:	83 ec 0c             	sub    esp,0xc
c001ec01:	6a 02                	push   0x2
c001ec03:	e8 99 34 ff ff       	call   c00120a1 <Virt::allocateKernelVirtualPages(int)>
c001ec08:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ec0e:	6a 03                	push   0x3
c001ec10:	50                   	push   eax
c001ec11:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ec17:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001ec1d:	e8 68 3b ff ff       	call   c001278a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ec22:	83 c4 14             	add    esp,0x14
c001ec25:	68 78 01 00 00       	push   0x178
c001ec2a:	e8 62 fd fe ff       	call   c000e991 <malloc>
c001ec2f:	83 c4 0c             	add    esp,0xc
c001ec32:	89 c6                	mov    esi,eax
c001ec34:	6a 00                	push   0x0
c001ec36:	68 ff ff ff 7f       	push   0x7fffffff
c001ec3b:	6a 00                	push   0x0
c001ec3d:	6a 00                	push   0x0
c001ec3f:	53                   	push   ebx
c001ec40:	68 aa 39 02 c0       	push   0xc00239aa
c001ec45:	50                   	push   eax
c001ec46:	e8 55 b2 fe ff       	call   c0009ea0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ec4b:	83 c4 14             	add    esp,0x14
c001ec4e:	56                   	push   esi
c001ec4f:	e8 0c b3 fe ff       	call   c0009f60 <LogicalDisk::assignDriveLetter()>
c001ec54:	5a                   	pop    edx
c001ec55:	0f be c0             	movsx  eax,al
c001ec58:	59                   	pop    ecx
c001ec59:	50                   	push   eax
c001ec5a:	68 f0 37 02 c0       	push   0xc00237f0
c001ec5f:	e8 00 83 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ec64:	58                   	pop    eax
c001ec65:	5a                   	pop    edx
c001ec66:	56                   	push   esi
c001ec67:	53                   	push   ebx
c001ec68:	e8 d1 a3 fe ff       	call   c000903e <Device::addChild(Device*)>
c001ec6d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ec73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ec76:	e8 0f a8 fe ff       	call   c000948a <PhysicalDisk::startCache()>
c001ec7b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ec82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ec85:	e8 b2 fe ff ff       	call   c001eb3c <SATAPI::detectMedia()>
c001ec8a:	83 c4 14             	add    esp,0x14
c001ec8d:	31 c0                	xor    eax,eax
c001ec8f:	5b                   	pop    ebx
c001ec90:	5e                   	pop    esi
c001ec91:	c3                   	ret    

c001ec92 <SATAPI::read(unsigned long long, int, void*)>:
c001ec92:	57                   	push   edi
c001ec93:	56                   	push   esi
c001ec94:	53                   	push   ebx
c001ec95:	83 ec 30             	sub    esp,0x30
c001ec98:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ec9c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001eca0:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001eca4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001eca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ecac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ecb0:	83 fe 04             	cmp    esi,0x4
c001ecb3:	7e 10                	jle    c001ecc5 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001ecb5:	83 ec 0c             	sub    esp,0xc
c001ecb8:	68 b8 39 02 c0       	push   0xc00239b8
c001ecbd:	e8 24 00 ff ff       	call   c000ece6 <KePanic(char const*)>
c001ecc2:	83 c4 10             	add    esp,0x10
c001ecc5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001eccb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ecd1:	51                   	push   ecx
c001ecd2:	50                   	push   eax
c001ecd3:	83 c0 02             	add    eax,0x2
c001ecd6:	c1 e0 07             	shl    eax,0x7
c001ecd9:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ecdf:	50                   	push   eax
c001ece0:	52                   	push   edx
c001ece1:	e8 fc e7 ff ff       	call   c001d4e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ece6:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ecea:	b9 03 00 00 00       	mov    ecx,0x3
c001ecef:	fc                   	cld    
c001ecf0:	31 c0                	xor    eax,eax
c001ecf2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ecf4:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ecf9:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ecfe:	83 c4 0c             	add    esp,0xc
c001ed01:	6a 00                	push   0x0
c001ed03:	6a 00                	push   0x0
c001ed05:	6a 00                	push   0x0
c001ed07:	6a 00                	push   0x0
c001ed09:	6a 02                	push   0x2
c001ed0b:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ed0f:	50                   	push   eax
c001ed10:	53                   	push   ebx
c001ed11:	e8 0c fb ff ff       	call   c001e822 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ed16:	83 c4 20             	add    esp,0x20
c001ed19:	85 c0                	test   eax,eax
c001ed1b:	75 44                	jne    c001ed61 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001ed1d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ed21:	b9 03 00 00 00       	mov    ecx,0x3
c001ed26:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ed28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed2c:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ed31:	0f c8                	bswap  eax
c001ed33:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ed37:	89 f0                	mov    eax,esi
c001ed39:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ed3d:	50                   	push   eax
c001ed3e:	56                   	push   esi
c001ed3f:	c1 e6 0b             	shl    esi,0xb
c001ed42:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ed46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ed4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ed4e:	56                   	push   esi
c001ed4f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ed53:	50                   	push   eax
c001ed54:	53                   	push   ebx
c001ed55:	e8 c8 fa ff ff       	call   c001e822 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ed5a:	83 c4 20             	add    esp,0x20
c001ed5d:	85 c0                	test   eax,eax
c001ed5f:	74 14                	je     c001ed75 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001ed61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ed65:	83 ec 0c             	sub    esp,0xc
c001ed68:	53                   	push   ebx
c001ed69:	e8 ce fd ff ff       	call   c001eb3c <SATAPI::detectMedia()>
c001ed6e:	83 c4 10             	add    esp,0x10
c001ed71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed75:	83 c4 30             	add    esp,0x30
c001ed78:	5b                   	pop    ebx
c001ed79:	5e                   	pop    esi
c001ed7a:	5f                   	pop    edi
c001ed7b:	c3                   	ret    

c001ed7c <IOAPIC::close(int, int, void*)>:
c001ed7c:	b8 00 00 00 00       	mov    eax,0x0
c001ed81:	c3                   	ret    

c001ed82 <apicGetBase()>:
c001ed82:	55                   	push   ebp
c001ed83:	89 e5                	mov    ebp,esp
c001ed85:	83 ec 08             	sub    esp,0x8
c001ed88:	83 ec 0c             	sub    esp,0xc
c001ed8b:	68 1c 3a 02 c0       	push   0xc0023a1c
c001ed90:	e8 51 ff fe ff       	call   c000ece6 <KePanic(char const*)>
c001ed95:	83 c4 10             	add    esp,0x10
c001ed98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ed9d:	c9                   	leave  
c001ed9e:	c3                   	ret    
c001ed9f:	90                   	nop

c001eda0 <IOAPIC::IOAPIC()>:
c001eda0:	83 ec 0c             	sub    esp,0xc
c001eda3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda7:	83 ec 08             	sub    esp,0x8
c001edaa:	68 2b 3a 02 c0       	push   0xc0023a2b
c001edaf:	50                   	push   eax
c001edb0:	e8 eb a3 fe ff       	call   c00091a0 <Device::Device(char const*)>
c001edb5:	83 c4 10             	add    esp,0x10
c001edb8:	ba 3c 3a 02 c0       	mov    edx,0xc0023a3c
c001edbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc1:	89 10                	mov    DWORD PTR [eax],edx
c001edc3:	90                   	nop
c001edc4:	83 c4 0c             	add    esp,0xc
c001edc7:	c3                   	ret    

c001edc8 <apicOpen()>:
c001edc8:	55                   	push   ebp
c001edc9:	89 e5                	mov    ebp,esp
c001edcb:	53                   	push   ebx
c001edcc:	83 ec 34             	sub    esp,0x34
c001edcf:	a0 20 d1 02 c0       	mov    al,ds:0xc002d120
c001edd4:	83 f0 01             	xor    eax,0x1
c001edd7:	0f b6 c0             	movzx  eax,al
c001edda:	85 c0                	test   eax,eax
c001eddc:	0f 84 a3 00 00 00    	je     c001ee85 <apicOpen()+0xbd>
c001ede2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ede6:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c001edeb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001edef:	0f b6 c0             	movzx  eax,al
c001edf2:	39 c2                	cmp    edx,eax
c001edf4:	0f 83 84 00 00 00    	jae    c001ee7e <apicOpen()+0xb6>
c001edfa:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ee01:	83 ec 0c             	sub    esp,0xc
c001ee04:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ee07:	e8 85 fb fe ff       	call   c000e991 <malloc>
c001ee0c:	83 c4 10             	add    esp,0x10
c001ee0f:	89 c3                	mov    ebx,eax
c001ee11:	83 ec 0c             	sub    esp,0xc
c001ee14:	53                   	push   ebx
c001ee15:	e8 86 ff ff ff       	call   c001eda0 <IOAPIC::IOAPIC()>
c001ee1a:	83 c4 10             	add    esp,0x10
c001ee1d:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ee20:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ee24:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ee27:	89 14 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],edx
c001ee2e:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c001ee33:	83 c0 01             	add    eax,0x1
c001ee36:	a3 e0 d0 02 c0       	mov    ds:0xc002d0e0,eax
c001ee3b:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001ee40:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ee46:	83 ec 08             	sub    esp,0x8
c001ee49:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ee4c:	50                   	push   eax
c001ee4d:	e8 ec a1 fe ff       	call   c000903e <Device::addChild(Device*)>
c001ee52:	83 c4 10             	add    esp,0x10
c001ee55:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ee58:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee5a:	83 c0 08             	add    eax,0x8
c001ee5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee5f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ee63:	6a 00                	push   0x0
c001ee65:	6a 00                	push   0x0
c001ee67:	52                   	push   edx
c001ee68:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ee6b:	ff d0                	call   eax
c001ee6d:	83 c4 10             	add    esp,0x10
c001ee70:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ee73:	83 c0 01             	add    eax,0x1
c001ee76:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ee79:	e9 68 ff ff ff       	jmp    c001ede6 <apicOpen()+0x1e>
c001ee7e:	c6 05 20 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d120,0x1
c001ee85:	e8 f8 fe ff ff       	call   c001ed82 <apicGetBase()>
c001ee8a:	05 f0 00 00 00       	add    eax,0xf0
c001ee8f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ee92:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ee95:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee97:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ee9a:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eea1:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eea8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eeab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eeae:	89 10                	mov    DWORD PTR [eax],edx
c001eeb0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eeb7:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c001eebc:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eebf:	7d 7c                	jge    c001ef3d <apicOpen()+0x175>
c001eec1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eec4:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001eecb:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eece:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eed1:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001eed8:	c1 e8 08             	shr    eax,0x8
c001eedb:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eedf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eee2:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001eee9:	c1 e8 18             	shr    eax,0x18
c001eeec:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eeef:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eef3:	3d ff 00 00 00       	cmp    eax,0xff
c001eef8:	75 3a                	jne    c001ef34 <apicOpen()+0x16c>
c001eefa:	e8 83 fe ff ff       	call   c001ed82 <apicGetBase()>
c001eeff:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ef03:	83 fa 01             	cmp    edx,0x1
c001ef06:	75 07                	jne    c001ef0f <apicOpen()+0x147>
c001ef08:	ba 60 03 00 00       	mov    edx,0x360
c001ef0d:	eb 05                	jmp    c001ef14 <apicOpen()+0x14c>
c001ef0f:	ba 50 03 00 00       	mov    edx,0x350
c001ef14:	01 d0                	add    eax,edx
c001ef16:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ef19:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ef1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef1e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ef21:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ef28:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ef2c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ef2f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ef32:	89 10                	mov    DWORD PTR [eax],edx
c001ef34:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ef38:	e9 7a ff ff ff       	jmp    c001eeb7 <apicOpen()+0xef>
c001ef3d:	90                   	nop
c001ef3e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ef41:	c9                   	leave  
c001ef42:	c3                   	ret    
c001ef43:	90                   	nop

c001ef44 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ef44:	55                   	push   ebp
c001ef45:	89 e5                	mov    ebp,esp
c001ef47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ef50:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ef53:	72 1d                	jb     c001ef72 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ef55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef58:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ef5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef61:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ef67:	01 d0                	add    eax,edx
c001ef69:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ef6c:	73 04                	jae    c001ef72 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ef6e:	b0 01                	mov    al,0x1
c001ef70:	eb 02                	jmp    c001ef74 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ef72:	b0 00                	mov    al,0x0
c001ef74:	5d                   	pop    ebp
c001ef75:	c3                   	ret    

c001ef76 <IOAPIC::read(int)>:
c001ef76:	55                   	push   ebp
c001ef77:	89 e5                	mov    ebp,esp
c001ef79:	83 ec 10             	sub    esp,0x10
c001ef7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef7f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ef85:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ef88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ef8b:	0f b6 d0             	movzx  edx,al
c001ef8e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ef91:	89 10                	mov    DWORD PTR [eax],edx
c001ef93:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ef96:	83 c0 10             	add    eax,0x10
c001ef99:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef9b:	c9                   	leave  
c001ef9c:	c3                   	ret    
c001ef9d:	90                   	nop

c001ef9e <IOAPIC::open(int, int, void*)>:
c001ef9e:	55                   	push   ebp
c001ef9f:	89 e5                	mov    ebp,esp
c001efa1:	57                   	push   edi
c001efa2:	56                   	push   esi
c001efa3:	53                   	push   ebx
c001efa4:	83 ec 04             	sub    esp,0x4
c001efa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efaa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001efad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001efb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efb6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001efbc:	8b 14 85 20 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd64e0]
c001efc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efc6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001efcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efcf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001efd5:	8b 14 85 a0 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6460]
c001efdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efdf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001efe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efe8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001efee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eff1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eff7:	0f b6 f0             	movzx  esi,al
c001effa:	89 d0                	mov    eax,edx
c001effc:	ba 00 00 00 00       	mov    edx,0x0
c001f001:	89 c7                	mov    edi,eax
c001f003:	83 e7 ff             	and    edi,0xffffffff
c001f006:	89 f9                	mov    ecx,edi
c001f008:	0f b6 da             	movzx  ebx,dl
c001f00b:	89 c8                	mov    eax,ecx
c001f00d:	89 da                	mov    edx,ebx
c001f00f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001f012:	8d 5e 08             	lea    ebx,[esi+0x8]
c001f015:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001f019:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001f01d:	83 e0 00             	and    eax,0x0
c001f020:	09 d0                	or     eax,edx
c001f022:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001f026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f029:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f02f:	8d 50 01             	lea    edx,[eax+0x1]
c001f032:	88 d1                	mov    cl,dl
c001f034:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001f037:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001f03d:	0f b6 d0             	movzx  edx,al
c001f040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f043:	83 c2 08             	add    edx,0x8
c001f046:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001f04a:	0f b6 c9             	movzx  ecx,cl
c001f04d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001f053:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001f057:	6a 01                	push   0x1
c001f059:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f05c:	e8 15 ff ff ff       	call   c001ef76 <IOAPIC::read(int)>
c001f061:	83 c4 08             	add    esp,0x8
c001f064:	c1 f8 10             	sar    eax,0x10
c001f067:	0f b6 c0             	movzx  eax,al
c001f06a:	8d 50 01             	lea    edx,[eax+0x1]
c001f06d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f070:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001f076:	b8 00 00 00 00       	mov    eax,0x0
c001f07b:	8d 65 f4             	lea    esp,[ebp-0xc]
c001f07e:	5b                   	pop    ebx
c001f07f:	5e                   	pop    esi
c001f080:	5f                   	pop    edi
c001f081:	5d                   	pop    ebp
c001f082:	c3                   	ret    
c001f083:	90                   	nop

c001f084 <IOAPIC::write(int, int)>:
c001f084:	55                   	push   ebp
c001f085:	89 e5                	mov    ebp,esp
c001f087:	83 ec 10             	sub    esp,0x10
c001f08a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f08d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f093:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f096:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f099:	0f b6 d0             	movzx  edx,al
c001f09c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f09f:	89 10                	mov    DWORD PTR [eax],edx
c001f0a1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f0a4:	8d 50 10             	lea    edx,[eax+0x10]
c001f0a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f0aa:	89 02                	mov    DWORD PTR [edx],eax
c001f0ac:	90                   	nop
c001f0ad:	c9                   	leave  
c001f0ae:	c3                   	ret    
c001f0af:	90                   	nop

c001f0b0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f0b0:	55                   	push   ebp
c001f0b1:	89 e5                	mov    ebp,esp
c001f0b3:	53                   	push   ebx
c001f0b4:	83 ec 2c             	sub    esp,0x2c
c001f0b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f0ba:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f0bd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f0c0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f0c3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f0c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f0c9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f0cc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f0cf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f0d2:	88 d8                	mov    al,bl
c001f0d4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f0d7:	88 c8                	mov    al,cl
c001f0d9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f0dc:	88 d0                	mov    al,dl
c001f0de:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f0e1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f0e5:	83 c0 08             	add    eax,0x8
c001f0e8:	01 c0                	add    eax,eax
c001f0ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f0ed:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f0f1:	83 c0 08             	add    eax,0x8
c001f0f4:	01 c0                	add    eax,eax
c001f0f6:	83 c0 01             	add    eax,0x1
c001f0f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f0fc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f0ff:	50                   	push   eax
c001f100:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f103:	e8 6e fe ff ff       	call   c001ef76 <IOAPIC::read(int)>
c001f108:	83 c4 08             	add    esp,0x8
c001f10b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f10e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f115:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f118:	c1 e0 18             	shl    eax,0x18
c001f11b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f11e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f121:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f124:	52                   	push   edx
c001f125:	50                   	push   eax
c001f126:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f129:	e8 56 ff ff ff       	call   c001f084 <IOAPIC::write(int, int)>
c001f12e:	83 c4 0c             	add    esp,0xc
c001f131:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f134:	50                   	push   eax
c001f135:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f138:	e8 39 fe ff ff       	call   c001ef76 <IOAPIC::read(int)>
c001f13d:	83 c4 08             	add    esp,0x8
c001f140:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f143:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f14a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f151:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f158:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f15c:	85 c0                	test   eax,eax
c001f15e:	74 09                	je     c001f169 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f160:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f167:	eb 07                	jmp    c001f170 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f169:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f170:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f174:	85 c0                	test   eax,eax
c001f176:	74 09                	je     c001f181 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f178:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f17f:	eb 07                	jmp    c001f188 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f181:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f188:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f18f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f193:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f196:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f199:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f19c:	52                   	push   edx
c001f19d:	50                   	push   eax
c001f19e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f1a1:	e8 de fe ff ff       	call   c001f084 <IOAPIC::write(int, int)>
c001f1a6:	83 c4 0c             	add    esp,0xc
c001f1a9:	90                   	nop
c001f1aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f1ad:	c9                   	leave  
c001f1ae:	c3                   	ret    
c001f1af:	90                   	nop

c001f1b0 <APICTimer::close(int, int, void*)>:
c001f1b0:	b8 00 00 00 00       	mov    eax,0x0
c001f1b5:	c3                   	ret    
c001f1b6:	66 90                	xchg   ax,ax

c001f1b8 <apicTimerHandler(regs*, void*)>:
c001f1b8:	83 ec 0c             	sub    esp,0xc
c001f1bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f1c1:	b8 10 27 00 00       	mov    eax,0x2710
c001f1c6:	ba 00 00 00 00       	mov    edx,0x0
c001f1cb:	f7 f1                	div    ecx
c001f1cd:	83 ec 0c             	sub    esp,0xc
c001f1d0:	50                   	push   eax
c001f1d1:	e8 86 b5 fe ff       	call   c000a75c <timerHandler(unsigned int)>
c001f1d6:	83 c4 10             	add    esp,0x10
c001f1d9:	90                   	nop
c001f1da:	83 c4 0c             	add    esp,0xc
c001f1dd:	c3                   	ret    
c001f1de:	66 90                	xchg   ax,ax

c001f1e0 <APICTimer::open(int, int, void*)>:
c001f1e0:	83 ec 0c             	sub    esp,0xc
c001f1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1e9:	83 c0 24             	add    eax,0x24
c001f1ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1ee:	83 ec 08             	sub    esp,0x8
c001f1f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f9:	ff d0                	call   eax
c001f1fb:	83 c4 10             	add    esp,0x10
c001f1fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f202:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f206:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f210:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f214:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f21a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f21e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f224:	83 ec 0c             	sub    esp,0xc
c001f227:	51                   	push   ecx
c001f228:	6a 01                	push   0x1
c001f22a:	68 b8 f1 01 c0       	push   0xc001f1b8
c001f22f:	52                   	push   edx
c001f230:	50                   	push   eax
c001f231:	e8 b4 9d fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f236:	83 c4 20             	add    esp,0x20
c001f239:	89 c2                	mov    edx,eax
c001f23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f245:	b8 00 00 00 00       	mov    eax,0x0
c001f24a:	83 c4 0c             	add    esp,0xc
c001f24d:	c3                   	ret    
c001f24e:	66 90                	xchg   ax,ax

c001f250 <APICTimer::write(int)>:
c001f250:	83 ec 0c             	sub    esp,0xc
c001f253:	83 ec 0c             	sub    esp,0xc
c001f256:	68 60 3a 02 c0       	push   0xc0023a60
c001f25b:	e8 86 fa fe ff       	call   c000ece6 <KePanic(char const*)>
c001f260:	83 c4 10             	add    esp,0x10
c001f263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f267:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f26b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f271:	90                   	nop
c001f272:	83 c4 0c             	add    esp,0xc
c001f275:	c3                   	ret    
c001f276:	66 90                	xchg   ax,ax

c001f278 <APICTimer::APICTimer()>:
c001f278:	83 ec 0c             	sub    esp,0xc
c001f27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27f:	83 ec 08             	sub    esp,0x8
c001f282:	68 70 3a 02 c0       	push   0xc0023a70
c001f287:	50                   	push   eax
c001f288:	e8 03 b4 fe ff       	call   c000a690 <Timer::Timer(char const*)>
c001f28d:	83 c4 10             	add    esp,0x10
c001f290:	ba 84 3a 02 c0       	mov    edx,0xc0023a84
c001f295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f299:	89 10                	mov    DWORD PTR [eax],edx
c001f29b:	90                   	nop
c001f29c:	83 c4 0c             	add    esp,0xc
c001f29f:	c3                   	ret    

c001f2a0 <PIT::write(int)>:
c001f2a0:	83 ec 10             	sub    esp,0x10
c001f2a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f2a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f2ab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f2b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f2b5:	a3 24 d1 02 c0       	mov    ds:0xc002d124,eax
c001f2ba:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f2bf:	89 c2                	mov    edx,eax
c001f2c1:	c1 fa 1f             	sar    edx,0x1f
c001f2c4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f2c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2cc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f2d3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f2d8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f2dc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f2e1:	ee                   	out    dx,al
c001f2e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2e6:	0f b6 c0             	movzx  eax,al
c001f2e9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f2f0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f2f4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f2f8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f2fd:	ee                   	out    dx,al
c001f2fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f302:	c1 f8 08             	sar    eax,0x8
c001f305:	0f b6 c0             	movzx  eax,al
c001f308:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f30f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f313:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f317:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f31c:	ee                   	out    dx,al
c001f31d:	90                   	nop
c001f31e:	83 c4 10             	add    esp,0x10
c001f321:	c3                   	ret    
c001f322:	66 90                	xchg   ax,ax

c001f324 <pitHandler(regs*, void*)>:
c001f324:	83 ec 0c             	sub    esp,0xc
c001f327:	8b 0d 24 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d124
c001f32d:	b8 10 27 00 00       	mov    eax,0x2710
c001f332:	89 c2                	mov    edx,eax
c001f334:	c1 fa 1f             	sar    edx,0x1f
c001f337:	f7 f9                	idiv   ecx
c001f339:	83 ec 0c             	sub    esp,0xc
c001f33c:	50                   	push   eax
c001f33d:	e8 1a b4 fe ff       	call   c000a75c <timerHandler(unsigned int)>
c001f342:	83 c4 10             	add    esp,0x10
c001f345:	90                   	nop
c001f346:	83 c4 0c             	add    esp,0xc
c001f349:	c3                   	ret    
c001f34a:	66 90                	xchg   ax,ax

c001f34c <PIT::open(int, int, void*)>:
c001f34c:	83 ec 0c             	sub    esp,0xc
c001f34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f353:	8b 00                	mov    eax,DWORD PTR [eax]
c001f355:	83 c0 24             	add    eax,0x24
c001f358:	8b 00                	mov    eax,DWORD PTR [eax]
c001f35a:	83 ec 08             	sub    esp,0x8
c001f35d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f365:	ff d0                	call   eax
c001f367:	83 c4 10             	add    esp,0x10
c001f36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f36e:	83 ec 0c             	sub    esp,0xc
c001f371:	6a 00                	push   0x0
c001f373:	6a 01                	push   0x1
c001f375:	68 24 f3 01 c0       	push   0xc001f324
c001f37a:	6a 00                	push   0x0
c001f37c:	50                   	push   eax
c001f37d:	e8 68 9c fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f382:	83 c4 20             	add    esp,0x20
c001f385:	89 c2                	mov    edx,eax
c001f387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f38b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f391:	b8 00 00 00 00       	mov    eax,0x0
c001f396:	83 c4 0c             	add    esp,0xc
c001f399:	c3                   	ret    
c001f39a:	66 90                	xchg   ax,ax

c001f39c <PIT::close(int, int, void*)>:
c001f39c:	83 ec 0c             	sub    esp,0xc
c001f39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f3ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b1:	6a 01                	push   0x1
c001f3b3:	68 24 f3 01 c0       	push   0xc001f324
c001f3b8:	6a 00                	push   0x0
c001f3ba:	50                   	push   eax
c001f3bb:	e8 60 9c fe ff       	call   c0009020 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f3c0:	83 c4 10             	add    esp,0x10
c001f3c3:	b8 00 00 00 00       	mov    eax,0x0
c001f3c8:	83 c4 0c             	add    esp,0xc
c001f3cb:	c3                   	ret    

c001f3cc <PIT::PIT()>:
c001f3cc:	83 ec 0c             	sub    esp,0xc
c001f3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d3:	83 ec 08             	sub    esp,0x8
c001f3d6:	68 ac 3a 02 c0       	push   0xc0023aac
c001f3db:	50                   	push   eax
c001f3dc:	e8 af b2 fe ff       	call   c000a690 <Timer::Timer(char const*)>
c001f3e1:	83 c4 10             	add    esp,0x10
c001f3e4:	ba d4 3a 02 c0       	mov    edx,0xc0023ad4
c001f3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ed:	89 10                	mov    DWORD PTR [eax],edx
c001f3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f3f9:	0f b6 d0             	movzx  edx,al
c001f3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f400:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f40b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f411:	0f b6 d0             	movzx  edx,al
c001f414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f418:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f41d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f421:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f427:	8d 50 01             	lea    edx,[eax+0x1]
c001f42a:	88 d1                	mov    cl,dl
c001f42c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f430:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f436:	0f b6 d0             	movzx  edx,al
c001f439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f43d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f441:	83 e1 3f             	and    ecx,0x3f
c001f444:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f448:	90                   	nop
c001f449:	83 c4 0c             	add    esp,0xc
c001f44c:	c3                   	ret    
c001f44d:	66 90                	xchg   ax,ax
c001f44f:	90                   	nop

c001f450 <avxDetect>:
c001f450:	b8 01 00 00 00       	mov    eax,0x1
c001f455:	0f a2                	cpuid  
c001f457:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f45d:	74 15                	je     c001f474 <avxDetect.noAVX>
c001f45f:	b8 01 00 00 00       	mov    eax,0x1
c001f464:	0f a2                	cpuid  
c001f466:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f46c:	74 06                	je     c001f474 <avxDetect.noAVX>
c001f46e:	b8 01 00 00 00       	mov    eax,0x1
c001f473:	c3                   	ret    

c001f474 <avxDetect.noAVX>:
c001f474:	b8 00 00 00 00       	mov    eax,0x0
c001f479:	c3                   	ret    

c001f47a <avxSave>:
c001f47a:	53                   	push   ebx
c001f47b:	52                   	push   edx
c001f47c:	31 c0                	xor    eax,eax
c001f47e:	48                   	dec    eax
c001f47f:	89 c2                	mov    edx,eax
c001f481:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f485:	0f ae 23             	xsave  [ebx]
c001f488:	5a                   	pop    edx
c001f489:	5b                   	pop    ebx
c001f48a:	c3                   	ret    

c001f48b <avxLoad>:
c001f48b:	53                   	push   ebx
c001f48c:	52                   	push   edx
c001f48d:	31 c0                	xor    eax,eax
c001f48f:	48                   	dec    eax
c001f490:	89 c2                	mov    edx,eax
c001f492:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f496:	0f ae 2b             	xrstor [ebx]
c001f499:	5a                   	pop    edx
c001f49a:	5b                   	pop    ebx
c001f49b:	c3                   	ret    

c001f49c <avxInit>:
c001f49c:	e8 47 03 00 00       	call   c001f7e8 <sseInit>
c001f4a1:	50                   	push   eax
c001f4a2:	51                   	push   ecx
c001f4a3:	0f 20 e0             	mov    eax,cr4
c001f4a6:	0d 00 00 04 00       	or     eax,0x40000
c001f4ab:	0f 22 e0             	mov    cr4,eax
c001f4ae:	31 c9                	xor    ecx,ecx
c001f4b0:	0f 01 d0             	xgetbv 
c001f4b3:	0d 07 00 00 00       	or     eax,0x7
c001f4b8:	0f 01 d1             	xsetbv 
c001f4bb:	59                   	pop    ecx
c001f4bc:	58                   	pop    eax
c001f4bd:	c3                   	ret    

c001f4be <avxClose>:
c001f4be:	c3                   	ret    
c001f4bf:	90                   	nop

c001f4c0 <isr0>:
c001f4c0:	fa                   	cli    
c001f4c1:	68 00 00 00 00       	push   0x0
c001f4c6:	68 00 00 00 00       	push   0x0
c001f4cb:	e9 56 01 00 00       	jmp    c001f626 <int_common_stub>

c001f4d0 <isr1>:
c001f4d0:	fa                   	cli    
c001f4d1:	6a 00                	push   0x0
c001f4d3:	6a 01                	push   0x1
c001f4d5:	e9 4c 01 00 00       	jmp    c001f626 <int_common_stub>

c001f4da <isr2>:
c001f4da:	fa                   	cli    
c001f4db:	6a 00                	push   0x0
c001f4dd:	6a 02                	push   0x2
c001f4df:	e9 42 01 00 00       	jmp    c001f626 <int_common_stub>

c001f4e4 <isr3>:
c001f4e4:	fa                   	cli    
c001f4e5:	6a 00                	push   0x0
c001f4e7:	6a 03                	push   0x3
c001f4e9:	e9 38 01 00 00       	jmp    c001f626 <int_common_stub>

c001f4ee <isr4>:
c001f4ee:	fa                   	cli    
c001f4ef:	6a 00                	push   0x0
c001f4f1:	6a 04                	push   0x4
c001f4f3:	e9 2e 01 00 00       	jmp    c001f626 <int_common_stub>

c001f4f8 <isr5>:
c001f4f8:	fa                   	cli    
c001f4f9:	6a 00                	push   0x0
c001f4fb:	6a 05                	push   0x5
c001f4fd:	e9 24 01 00 00       	jmp    c001f626 <int_common_stub>

c001f502 <isr6>:
c001f502:	fa                   	cli    
c001f503:	6a 00                	push   0x0
c001f505:	6a 06                	push   0x6
c001f507:	e9 1a 01 00 00       	jmp    c001f626 <int_common_stub>

c001f50c <isr7>:
c001f50c:	fa                   	cli    
c001f50d:	6a 00                	push   0x0
c001f50f:	6a 07                	push   0x7
c001f511:	e9 10 01 00 00       	jmp    c001f626 <int_common_stub>

c001f516 <isr8>:
c001f516:	fa                   	cli    
c001f517:	6a 08                	push   0x8
c001f519:	e9 08 01 00 00       	jmp    c001f626 <int_common_stub>

c001f51e <isr9>:
c001f51e:	fa                   	cli    
c001f51f:	6a 00                	push   0x0
c001f521:	6a 09                	push   0x9
c001f523:	e9 fe 00 00 00       	jmp    c001f626 <int_common_stub>

c001f528 <isr10>:
c001f528:	fa                   	cli    
c001f529:	6a 0a                	push   0xa
c001f52b:	e9 f6 00 00 00       	jmp    c001f626 <int_common_stub>

c001f530 <isr11>:
c001f530:	fa                   	cli    
c001f531:	6a 0b                	push   0xb
c001f533:	e9 ee 00 00 00       	jmp    c001f626 <int_common_stub>

c001f538 <isr12>:
c001f538:	fa                   	cli    
c001f539:	6a 0c                	push   0xc
c001f53b:	e9 e6 00 00 00       	jmp    c001f626 <int_common_stub>

c001f540 <isr13>:
c001f540:	fa                   	cli    
c001f541:	6a 0d                	push   0xd
c001f543:	53                   	push   ebx
c001f544:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f548:	81 fb 16 f7 01 c0    	cmp    ebx,0xc001f716
c001f54e:	5b                   	pop    ebx
c001f54f:	0f 84 c3 01 00 00    	je     c001f718 <finishSignal2>
c001f555:	e9 cc 00 00 00       	jmp    c001f626 <int_common_stub>

c001f55a <isr14>:
c001f55a:	fa                   	cli    
c001f55b:	6a 0e                	push   0xe
c001f55d:	e9 c4 00 00 00       	jmp    c001f626 <int_common_stub>

c001f562 <isr15>:
c001f562:	fa                   	cli    
c001f563:	6a 00                	push   0x0
c001f565:	6a 0f                	push   0xf
c001f567:	e9 ba 00 00 00       	jmp    c001f626 <int_common_stub>

c001f56c <isr16>:
c001f56c:	fa                   	cli    
c001f56d:	6a 00                	push   0x0
c001f56f:	6a 10                	push   0x10
c001f571:	e9 b0 00 00 00       	jmp    c001f626 <int_common_stub>

c001f576 <isr17>:
c001f576:	fa                   	cli    
c001f577:	6a 00                	push   0x0
c001f579:	6a 11                	push   0x11
c001f57b:	e9 a6 00 00 00       	jmp    c001f626 <int_common_stub>

c001f580 <isr18>:
c001f580:	fa                   	cli    
c001f581:	6a 00                	push   0x0
c001f583:	6a 12                	push   0x12
c001f585:	e9 9c 00 00 00       	jmp    c001f626 <int_common_stub>

c001f58a <irq3>:
c001f58a:	fa                   	cli    
c001f58b:	6a 00                	push   0x0
c001f58d:	6a 23                	push   0x23
c001f58f:	e9 92 00 00 00       	jmp    c001f626 <int_common_stub>

c001f594 <irq4>:
c001f594:	fa                   	cli    
c001f595:	6a 00                	push   0x0
c001f597:	6a 24                	push   0x24
c001f599:	e9 88 00 00 00       	jmp    c001f626 <int_common_stub>

c001f59e <irq5>:
c001f59e:	fa                   	cli    
c001f59f:	6a 00                	push   0x0
c001f5a1:	6a 25                	push   0x25
c001f5a3:	e9 7e 00 00 00       	jmp    c001f626 <int_common_stub>

c001f5a8 <irq6>:
c001f5a8:	fa                   	cli    
c001f5a9:	6a 00                	push   0x0
c001f5ab:	6a 26                	push   0x26
c001f5ad:	e9 74 00 00 00       	jmp    c001f626 <int_common_stub>

c001f5b2 <irq7>:
c001f5b2:	fa                   	cli    
c001f5b3:	6a 00                	push   0x0
c001f5b5:	6a 27                	push   0x27
c001f5b7:	e9 6a 00 00 00       	jmp    c001f626 <int_common_stub>

c001f5bc <irq8>:
c001f5bc:	fa                   	cli    
c001f5bd:	6a 00                	push   0x0
c001f5bf:	6a 28                	push   0x28
c001f5c1:	e9 60 00 00 00       	jmp    c001f626 <int_common_stub>

c001f5c6 <irq9>:
c001f5c6:	fa                   	cli    
c001f5c7:	6a 00                	push   0x0
c001f5c9:	6a 29                	push   0x29
c001f5cb:	e9 56 00 00 00       	jmp    c001f626 <int_common_stub>

c001f5d0 <irq10>:
c001f5d0:	fa                   	cli    
c001f5d1:	6a 00                	push   0x0
c001f5d3:	6a 2a                	push   0x2a
c001f5d5:	e9 4c 00 00 00       	jmp    c001f626 <int_common_stub>

c001f5da <irq11>:
c001f5da:	fa                   	cli    
c001f5db:	6a 00                	push   0x0
c001f5dd:	6a 2b                	push   0x2b
c001f5df:	e9 42 00 00 00       	jmp    c001f626 <int_common_stub>

c001f5e4 <irq12>:
c001f5e4:	fa                   	cli    
c001f5e5:	6a 00                	push   0x0
c001f5e7:	6a 2c                	push   0x2c
c001f5e9:	e9 38 00 00 00       	jmp    c001f626 <int_common_stub>

c001f5ee <irq13>:
c001f5ee:	fa                   	cli    
c001f5ef:	6a 00                	push   0x0
c001f5f1:	6a 2d                	push   0x2d
c001f5f3:	e9 2e 00 00 00       	jmp    c001f626 <int_common_stub>

c001f5f8 <irq14>:
c001f5f8:	fa                   	cli    
c001f5f9:	6a 00                	push   0x0
c001f5fb:	6a 2e                	push   0x2e
c001f5fd:	e9 24 00 00 00       	jmp    c001f626 <int_common_stub>

c001f602 <irq15>:
c001f602:	fa                   	cli    
c001f603:	6a 00                	push   0x0
c001f605:	6a 2f                	push   0x2f
c001f607:	e9 1a 00 00 00       	jmp    c001f626 <int_common_stub>

c001f60c <irq1>:
c001f60c:	fa                   	cli    
c001f60d:	6a 00                	push   0x0
c001f60f:	6a 21                	push   0x21
c001f611:	eb 13                	jmp    c001f626 <int_common_stub>

c001f613 <irq2>:
c001f613:	fa                   	cli    
c001f614:	6a 00                	push   0x0
c001f616:	6a 22                	push   0x22
c001f618:	eb 0c                	jmp    c001f626 <int_common_stub>

c001f61a <isr96>:
c001f61a:	6a 00                	push   0x0
c001f61c:	6a 60                	push   0x60
c001f61e:	fb                   	sti    
c001f61f:	eb 37                	jmp    c001f658 <syscall_common_stub>

c001f621 <irq0>:
c001f621:	fa                   	cli    
c001f622:	6a 00                	push   0x0
c001f624:	6a 20                	push   0x20

c001f626 <int_common_stub>:
c001f626:	60                   	pusha  
c001f627:	1e                   	push   ds
c001f628:	06                   	push   es
c001f629:	0f a0                	push   fs
c001f62b:	0f a8                	push   gs
c001f62d:	66 b8 10 00          	mov    ax,0x10
c001f631:	66 8e d8             	mov    ds,ax
c001f634:	66 8e c0             	mov    es,ax
c001f637:	66 8e e0             	mov    fs,ax
c001f63a:	66 8e e8             	mov    gs,ax
c001f63d:	54                   	push   esp
c001f63e:	fc                   	cld    
c001f63f:	e8 b8 e7 fe ff       	call   c000ddfc <int_handler>
c001f644:	81 c4 04 00 00 00    	add    esp,0x4
c001f64a:	0f a9                	pop    gs
c001f64c:	0f a1                	pop    fs
c001f64e:	07                   	pop    es
c001f64f:	1f                   	pop    ds
c001f650:	61                   	popa   
c001f651:	81 c4 08 00 00 00    	add    esp,0x8
c001f657:	cf                   	iret   

c001f658 <syscall_common_stub>:
c001f658:	60                   	pusha  
c001f659:	1e                   	push   ds
c001f65a:	06                   	push   es
c001f65b:	0f a0                	push   fs
c001f65d:	0f a8                	push   gs
c001f65f:	66 b8 10 00          	mov    ax,0x10
c001f663:	66 8e d8             	mov    ds,ax
c001f666:	66 8e c0             	mov    es,ax
c001f669:	66 8e e0             	mov    fs,ax
c001f66c:	66 8e e8             	mov    gs,ax
c001f66f:	54                   	push   esp
c001f670:	fc                   	cld    
c001f671:	e8 86 e7 fe ff       	call   c000ddfc <int_handler>
c001f676:	81 c4 04 00 00 00    	add    esp,0x4
c001f67c:	0f a9                	pop    gs
c001f67e:	0f a1                	pop    fs
c001f680:	07                   	pop    es
c001f681:	1f                   	pop    ds
c001f682:	e8 08 09 ff ff       	call   c000ff8f <KiCheckSignalZ>
c001f687:	3d 00 00 00 00       	cmp    eax,0x0
c001f68c:	0f 84 c0 00 00 00    	je     c001f752 <skipSignals>
c001f692:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f697:	61                   	popa   
c001f698:	53                   	push   ebx
c001f699:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f69f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f6a2:	5b                   	pop    ebx
c001f6a3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f6a8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f6ab:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f6ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f6b1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f6b4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f6b7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f6ba:	81 c4 08 00 00 00    	add    esp,0x8
c001f6c0:	5e                   	pop    esi
c001f6c1:	5b                   	pop    ebx
c001f6c2:	59                   	pop    ecx
c001f6c3:	5a                   	pop    edx
c001f6c4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f6c7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f6ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f6cd:	52                   	push   edx
c001f6ce:	51                   	push   ecx
c001f6cf:	53                   	push   ebx
c001f6d0:	56                   	push   esi
c001f6d1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f6d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f6da:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f6dd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f6e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f6e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f6e6:	60                   	pusha  
c001f6e7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f6ed:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f6f0:	89 e3                	mov    ebx,esp
c001f6f2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f6f5:	52                   	push   edx
c001f6f6:	68 16 f7 01 c0       	push   0xc001f716
c001f6fb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f6fe:	89 dc                	mov    esp,ebx
c001f700:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f703:	68 23 00 00 00       	push   0x23
c001f708:	51                   	push   ecx
c001f709:	68 02 02 00 00       	push   0x202
c001f70e:	68 1b 00 00 00       	push   0x1b
c001f713:	ff 36                	push   DWORD PTR [esi]
c001f715:	cf                   	iret   

c001f716 <finishSignal>:
c001f716:	cd 0f                	int    0xf

c001f718 <finishSignal2>:
c001f718:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f71e:	e8 e9 08 ff ff       	call   c001000c <KiFinishSignalZ>
c001f723:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f729:	68 23 00 00 00       	push   0x23
c001f72e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f731:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f734:	68 1b 00 00 00       	push   0x1b
c001f739:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f73c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f73f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f742:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f745:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f748:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f74b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f74e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f751:	cf                   	iret   

c001f752 <skipSignals>:
c001f752:	61                   	popa   
c001f753:	81 c4 08 00 00 00    	add    esp,0x8
c001f759:	cf                   	iret   
c001f75a:	90                   	nop
c001f75b:	90                   	nop

c001f75c <irq16>:
c001f75c:	fa                   	cli    
c001f75d:	6a 00                	push   0x0
c001f75f:	6a 30                	push   0x30
c001f761:	e9 c0 fe ff ff       	jmp    c001f626 <int_common_stub>

c001f766 <irq17>:
c001f766:	fa                   	cli    
c001f767:	6a 00                	push   0x0
c001f769:	6a 31                	push   0x31
c001f76b:	e9 b6 fe ff ff       	jmp    c001f626 <int_common_stub>

c001f770 <irq18>:
c001f770:	fa                   	cli    
c001f771:	6a 00                	push   0x0
c001f773:	6a 32                	push   0x32
c001f775:	e9 ac fe ff ff       	jmp    c001f626 <int_common_stub>

c001f77a <irq19>:
c001f77a:	fa                   	cli    
c001f77b:	6a 00                	push   0x0
c001f77d:	6a 33                	push   0x33
c001f77f:	e9 a2 fe ff ff       	jmp    c001f626 <int_common_stub>

c001f784 <irq20>:
c001f784:	fa                   	cli    
c001f785:	6a 00                	push   0x0
c001f787:	6a 34                	push   0x34
c001f789:	e9 98 fe ff ff       	jmp    c001f626 <int_common_stub>

c001f78e <irq21>:
c001f78e:	fa                   	cli    
c001f78f:	6a 00                	push   0x0
c001f791:	6a 35                	push   0x35
c001f793:	e9 8e fe ff ff       	jmp    c001f626 <int_common_stub>

c001f798 <irq22>:
c001f798:	fa                   	cli    
c001f799:	6a 00                	push   0x0
c001f79b:	6a 36                	push   0x36
c001f79d:	e9 84 fe ff ff       	jmp    c001f626 <int_common_stub>

c001f7a2 <irq23>:
c001f7a2:	fa                   	cli    
c001f7a3:	6a 00                	push   0x0
c001f7a5:	6a 37                	push   0x37
c001f7a7:	e9 7a fe ff ff       	jmp    c001f626 <int_common_stub>
c001f7ac:	66 90                	xchg   ax,ax
c001f7ae:	66 90                	xchg   ax,ax

c001f7b0 <i386GetRDRAND>:
c001f7b0:	b9 64 00 00 00       	mov    ecx,0x64

c001f7b5 <retry>:
c001f7b5:	0f c7 f0             	rdrand eax
c001f7b8:	72 05                	jb     c001f7bf <retry.done>
c001f7ba:	e2 f9                	loop   c001f7b5 <retry>

c001f7bc <retry.fail>:
c001f7bc:	31 c0                	xor    eax,eax
c001f7be:	c3                   	ret    

c001f7bf <retry.done>:
c001f7bf:	c3                   	ret    

c001f7c0 <sseDetect>:
c001f7c0:	b8 01 00 00 00       	mov    eax,0x1
c001f7c5:	0f a2                	cpuid  
c001f7c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f7cd:	74 06                	je     c001f7d5 <sseDetect.noSSE>
c001f7cf:	b8 01 00 00 00       	mov    eax,0x1
c001f7d4:	c3                   	ret    

c001f7d5 <sseDetect.noSSE>:
c001f7d5:	31 c0                	xor    eax,eax
c001f7d7:	c3                   	ret    

c001f7d8 <sseSave>:
c001f7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7dc:	0f ae 00             	fxsave [eax]
c001f7df:	c3                   	ret    

c001f7e0 <sseLoad>:
c001f7e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7e4:	0f ae 08             	fxrstor [eax]
c001f7e7:	c3                   	ret    

c001f7e8 <sseInit>:
c001f7e8:	e8 48 00 00 00       	call   c001f835 <x87Init>
c001f7ed:	0f 20 e0             	mov    eax,cr4
c001f7f0:	66 0d 00 06          	or     ax,0x600
c001f7f4:	0f 22 e0             	mov    cr4,eax
c001f7f7:	c3                   	ret    

c001f7f8 <sseClose>:
c001f7f8:	c3                   	ret    
c001f7f9:	66 90                	xchg   ax,ax
c001f7fb:	66 90                	xchg   ax,ax
c001f7fd:	66 90                	xchg   ax,ax
c001f7ff:	90                   	nop

c001f800 <value_37F>:
c001f800:	7f 03                	jg     c001f805 <value_37A+0x1>

c001f802 <value_37E>:
c001f802:	7e 03                	jle    c001f807 <x87Detect+0x1>

c001f804 <value_37A>:
c001f804:	7a 03                	jp     c001f809 <x87Detect+0x3>

c001f806 <x87Detect>:
c001f806:	53                   	push   ebx
c001f807:	51                   	push   ecx
c001f808:	52                   	push   edx
c001f809:	b8 01 00 00 00       	mov    eax,0x1
c001f80e:	0f a2                	cpuid  
c001f810:	f7 c2 01 00 00 00    	test   edx,0x1
c001f816:	74 06                	je     c001f81e <x87Detect.nox87>
c001f818:	b8 01 00 00 00       	mov    eax,0x1
c001f81d:	c3                   	ret    

c001f81e <x87Detect.nox87>:
c001f81e:	b8 00 00 00 00       	mov    eax,0x0
c001f823:	5a                   	pop    edx
c001f824:	59                   	pop    ecx
c001f825:	5b                   	pop    ebx
c001f826:	c3                   	ret    

c001f827 <x87Save>:
c001f827:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f82b:	dd 30                	fnsave [eax]
c001f82d:	c3                   	ret    

c001f82e <x87Load>:
c001f82e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f832:	dd 20                	frstor [eax]
c001f834:	c3                   	ret    

c001f835 <x87Init>:
c001f835:	0f 20 c0             	mov    eax,cr0
c001f838:	66 25 fb ff          	and    ax,0xfffb
c001f83c:	66 0d 22 00          	or     ax,0x22
c001f840:	0f 22 c0             	mov    cr0,eax
c001f843:	db e3                	fninit 
c001f845:	0f 06                	clts   
c001f847:	d9 2d 04 f8 01 c0    	fldcw  WORD PTR ds:0xc001f804
c001f84d:	c3                   	ret    

c001f84e <x87Close>:
c001f84e:	c3                   	ret    
c001f84f:	90                   	nop

c001f850 <__do_global_ctors_aux>:
c001f850:	a1 04 08 02 c0       	mov    eax,ds:0xc0020804
c001f855:	83 f8 ff             	cmp    eax,0xffffffff
c001f858:	74 1a                	je     c001f874 <__do_global_ctors_aux+0x24>
c001f85a:	55                   	push   ebp
c001f85b:	89 e5                	mov    ebp,esp
c001f85d:	53                   	push   ebx
c001f85e:	52                   	push   edx
c001f85f:	bb 04 08 02 c0       	mov    ebx,0xc0020804
c001f864:	ff d0                	call   eax
c001f866:	83 eb 04             	sub    ebx,0x4
c001f869:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f86b:	83 f8 ff             	cmp    eax,0xffffffff
c001f86e:	75 f4                	jne    c001f864 <__do_global_ctors_aux+0x14>
c001f870:	58                   	pop    eax
c001f871:	5b                   	pop    ebx
c001f872:	5d                   	pop    ebp
c001f873:	c3                   	ret    
c001f874:	c3                   	ret    
c001f875:	66 90                	xchg   ax,ax
c001f877:	90                   	nop

c001f878 <__divdi3>:
c001f878:	55                   	push   ebp
c001f879:	57                   	push   edi
c001f87a:	56                   	push   esi
c001f87b:	53                   	push   ebx
c001f87c:	83 ec 1c             	sub    esp,0x1c
c001f87f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f883:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f887:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f88a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f88e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f892:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f896:	85 db                	test   ebx,ebx
c001f898:	0f 88 8e 00 00 00    	js     c001f92c <__divdi3+0xb4>
c001f89e:	89 dd                	mov    ebp,ebx
c001f8a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f8a8:	89 d3                	mov    ebx,edx
c001f8aa:	85 d2                	test   edx,edx
c001f8ac:	79 0d                	jns    c001f8bb <__divdi3+0x43>
c001f8ae:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f8b2:	f7 d8                	neg    eax
c001f8b4:	83 d2 00             	adc    edx,0x0
c001f8b7:	f7 da                	neg    edx
c001f8b9:	89 d3                	mov    ebx,edx
c001f8bb:	89 c7                	mov    edi,eax
c001f8bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f8c0:	85 db                	test   ebx,ebx
c001f8c2:	75 48                	jne    c001f90c <__divdi3+0x94>
c001f8c4:	39 ef                	cmp    edi,ebp
c001f8c6:	76 24                	jbe    c001f8ec <__divdi3+0x74>
c001f8c8:	89 ea                	mov    edx,ebp
c001f8ca:	f7 f7                	div    edi
c001f8cc:	89 c1                	mov    ecx,eax
c001f8ce:	31 f6                	xor    esi,esi
c001f8d0:	89 c8                	mov    eax,ecx
c001f8d2:	89 f2                	mov    edx,esi
c001f8d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8d8:	85 c9                	test   ecx,ecx
c001f8da:	74 07                	je     c001f8e3 <__divdi3+0x6b>
c001f8dc:	f7 d8                	neg    eax
c001f8de:	83 d2 00             	adc    edx,0x0
c001f8e1:	f7 da                	neg    edx
c001f8e3:	83 c4 1c             	add    esp,0x1c
c001f8e6:	5b                   	pop    ebx
c001f8e7:	5e                   	pop    esi
c001f8e8:	5f                   	pop    edi
c001f8e9:	5d                   	pop    ebp
c001f8ea:	c3                   	ret    
c001f8eb:	90                   	nop
c001f8ec:	85 ff                	test   edi,edi
c001f8ee:	75 0b                	jne    c001f8fb <__divdi3+0x83>
c001f8f0:	b8 01 00 00 00       	mov    eax,0x1
c001f8f5:	31 d2                	xor    edx,edx
c001f8f7:	f7 f3                	div    ebx
c001f8f9:	89 c7                	mov    edi,eax
c001f8fb:	31 d2                	xor    edx,edx
c001f8fd:	89 e8                	mov    eax,ebp
c001f8ff:	f7 f7                	div    edi
c001f901:	89 c6                	mov    esi,eax
c001f903:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f906:	f7 f7                	div    edi
c001f908:	89 c1                	mov    ecx,eax
c001f90a:	eb c4                	jmp    c001f8d0 <__divdi3+0x58>
c001f90c:	39 eb                	cmp    ebx,ebp
c001f90e:	77 3c                	ja     c001f94c <__divdi3+0xd4>
c001f910:	0f bd f3             	bsr    esi,ebx
c001f913:	83 f6 1f             	xor    esi,0x1f
c001f916:	75 40                	jne    c001f958 <__divdi3+0xe0>
c001f918:	39 eb                	cmp    ebx,ebp
c001f91a:	72 09                	jb     c001f925 <__divdi3+0xad>
c001f91c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f91f:	0f 87 97 00 00 00    	ja     c001f9bc <__divdi3+0x144>
c001f925:	b9 01 00 00 00       	mov    ecx,0x1
c001f92a:	eb a4                	jmp    c001f8d0 <__divdi3+0x58>
c001f92c:	f7 d9                	neg    ecx
c001f92e:	83 d3 00             	adc    ebx,0x0
c001f931:	f7 db                	neg    ebx
c001f933:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f936:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f93a:	89 dd                	mov    ebp,ebx
c001f93c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f944:	e9 5f ff ff ff       	jmp    c001f8a8 <__divdi3+0x30>
c001f949:	8d 76 00             	lea    esi,[esi+0x0]
c001f94c:	31 f6                	xor    esi,esi
c001f94e:	31 c9                	xor    ecx,ecx
c001f950:	e9 7b ff ff ff       	jmp    c001f8d0 <__divdi3+0x58>
c001f955:	8d 76 00             	lea    esi,[esi+0x0]
c001f958:	b8 20 00 00 00       	mov    eax,0x20
c001f95d:	29 f0                	sub    eax,esi
c001f95f:	89 f1                	mov    ecx,esi
c001f961:	d3 e3                	shl    ebx,cl
c001f963:	89 fa                	mov    edx,edi
c001f965:	88 c1                	mov    cl,al
c001f967:	d3 ea                	shr    edx,cl
c001f969:	09 da                	or     edx,ebx
c001f96b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f96f:	89 f1                	mov    ecx,esi
c001f971:	d3 e7                	shl    edi,cl
c001f973:	89 eb                	mov    ebx,ebp
c001f975:	88 c1                	mov    cl,al
c001f977:	d3 eb                	shr    ebx,cl
c001f979:	89 f1                	mov    ecx,esi
c001f97b:	d3 e5                	shl    ebp,cl
c001f97d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f980:	88 c1                	mov    cl,al
c001f982:	d3 ea                	shr    edx,cl
c001f984:	09 d5                	or     ebp,edx
c001f986:	89 e8                	mov    eax,ebp
c001f988:	89 da                	mov    edx,ebx
c001f98a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f98e:	89 d3                	mov    ebx,edx
c001f990:	89 c5                	mov    ebp,eax
c001f992:	f7 e7                	mul    edi
c001f994:	39 d3                	cmp    ebx,edx
c001f996:	72 18                	jb     c001f9b0 <__divdi3+0x138>
c001f998:	74 0a                	je     c001f9a4 <__divdi3+0x12c>
c001f99a:	89 e9                	mov    ecx,ebp
c001f99c:	31 f6                	xor    esi,esi
c001f99e:	e9 2d ff ff ff       	jmp    c001f8d0 <__divdi3+0x58>
c001f9a3:	90                   	nop
c001f9a4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f9a7:	89 f1                	mov    ecx,esi
c001f9a9:	d3 e7                	shl    edi,cl
c001f9ab:	39 c7                	cmp    edi,eax
c001f9ad:	73 eb                	jae    c001f99a <__divdi3+0x122>
c001f9af:	90                   	nop
c001f9b0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f9b3:	31 f6                	xor    esi,esi
c001f9b5:	e9 16 ff ff ff       	jmp    c001f8d0 <__divdi3+0x58>
c001f9ba:	66 90                	xchg   ax,ax
c001f9bc:	31 c9                	xor    ecx,ecx
c001f9be:	e9 0d ff ff ff       	jmp    c001f8d0 <__divdi3+0x58>
c001f9c3:	90                   	nop

c001f9c4 <__moddi3>:
c001f9c4:	55                   	push   ebp
c001f9c5:	57                   	push   edi
c001f9c6:	56                   	push   esi
c001f9c7:	53                   	push   ebx
c001f9c8:	83 ec 2c             	sub    esp,0x2c
c001f9cb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f9cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f9d3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f9d7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f9db:	85 db                	test   ebx,ebx
c001f9dd:	0f 88 85 00 00 00    	js     c001fa68 <__moddi3+0xa4>
c001f9e3:	89 de                	mov    esi,ebx
c001f9e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f9ed:	89 d7                	mov    edi,edx
c001f9ef:	85 d2                	test   edx,edx
c001f9f1:	79 09                	jns    c001f9fc <__moddi3+0x38>
c001f9f3:	f7 d8                	neg    eax
c001f9f5:	83 d2 00             	adc    edx,0x0
c001f9f8:	f7 da                	neg    edx
c001f9fa:	89 d7                	mov    edi,edx
c001f9fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa00:	89 cd                	mov    ebp,ecx
c001fa02:	85 ff                	test   edi,edi
c001fa04:	75 52                	jne    c001fa58 <__moddi3+0x94>
c001fa06:	89 c3                	mov    ebx,eax
c001fa08:	39 f0                	cmp    eax,esi
c001fa0a:	76 24                	jbe    c001fa30 <__moddi3+0x6c>
c001fa0c:	89 c8                	mov    eax,ecx
c001fa0e:	89 f2                	mov    edx,esi
c001fa10:	f7 f3                	div    ebx
c001fa12:	89 d6                	mov    esi,edx
c001fa14:	89 f0                	mov    eax,esi
c001fa16:	31 d2                	xor    edx,edx
c001fa18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fa1c:	85 c9                	test   ecx,ecx
c001fa1e:	74 07                	je     c001fa27 <__moddi3+0x63>
c001fa20:	f7 d8                	neg    eax
c001fa22:	83 d2 00             	adc    edx,0x0
c001fa25:	f7 da                	neg    edx
c001fa27:	83 c4 2c             	add    esp,0x2c
c001fa2a:	5b                   	pop    ebx
c001fa2b:	5e                   	pop    esi
c001fa2c:	5f                   	pop    edi
c001fa2d:	5d                   	pop    ebp
c001fa2e:	c3                   	ret    
c001fa2f:	90                   	nop
c001fa30:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fa34:	85 db                	test   ebx,ebx
c001fa36:	75 0d                	jne    c001fa45 <__moddi3+0x81>
c001fa38:	b8 01 00 00 00       	mov    eax,0x1
c001fa3d:	31 d2                	xor    edx,edx
c001fa3f:	f7 f7                	div    edi
c001fa41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa45:	89 f0                	mov    eax,esi
c001fa47:	31 d2                	xor    edx,edx
c001fa49:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fa4d:	f7 f7                	div    edi
c001fa4f:	89 e8                	mov    eax,ebp
c001fa51:	f7 f7                	div    edi
c001fa53:	89 d6                	mov    esi,edx
c001fa55:	eb bd                	jmp    c001fa14 <__moddi3+0x50>
c001fa57:	90                   	nop
c001fa58:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001fa5c:	39 f7                	cmp    edi,esi
c001fa5e:	76 20                	jbe    c001fa80 <__moddi3+0xbc>
c001fa60:	89 c8                	mov    eax,ecx
c001fa62:	89 f2                	mov    edx,esi
c001fa64:	eb b2                	jmp    c001fa18 <__moddi3+0x54>
c001fa66:	66 90                	xchg   ax,ax
c001fa68:	f7 d9                	neg    ecx
c001fa6a:	83 d3 00             	adc    ebx,0x0
c001fa6d:	f7 db                	neg    ebx
c001fa6f:	89 de                	mov    esi,ebx
c001fa71:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001fa79:	e9 6f ff ff ff       	jmp    c001f9ed <__moddi3+0x29>
c001fa7e:	66 90                	xchg   ax,ax
c001fa80:	0f bd c7             	bsr    eax,edi
c001fa83:	83 f0 1f             	xor    eax,0x1f
c001fa86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fa8a:	75 24                	jne    c001fab0 <__moddi3+0xec>
c001fa8c:	39 f7                	cmp    edi,esi
c001fa8e:	72 06                	jb     c001fa96 <__moddi3+0xd2>
c001fa90:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001fa94:	77 0c                	ja     c001faa2 <__moddi3+0xde>
c001fa96:	89 e9                	mov    ecx,ebp
c001fa98:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001fa9c:	19 fe                	sbb    esi,edi
c001fa9e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001faa2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001faa6:	89 f2                	mov    edx,esi
c001faa8:	e9 6b ff ff ff       	jmp    c001fa18 <__moddi3+0x54>
c001faad:	8d 76 00             	lea    esi,[esi+0x0]
c001fab0:	b8 20 00 00 00       	mov    eax,0x20
c001fab5:	89 c2                	mov    edx,eax
c001fab7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fabb:	29 da                	sub    edx,ebx
c001fabd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fac1:	88 d9                	mov    cl,bl
c001fac3:	d3 e7                	shl    edi,cl
c001fac5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fac9:	88 d1                	mov    cl,dl
c001facb:	d3 e8                	shr    eax,cl
c001facd:	09 c7                	or     edi,eax
c001facf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001fad3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fad7:	89 d8                	mov    eax,ebx
c001fad9:	88 d9                	mov    cl,bl
c001fadb:	d3 e7                	shl    edi,cl
c001fadd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fae1:	89 f3                	mov    ebx,esi
c001fae3:	88 d1                	mov    cl,dl
c001fae5:	d3 eb                	shr    ebx,cl
c001fae7:	89 c7                	mov    edi,eax
c001fae9:	88 c1                	mov    cl,al
c001faeb:	d3 e6                	shl    esi,cl
c001faed:	89 e8                	mov    eax,ebp
c001faef:	88 d1                	mov    cl,dl
c001faf1:	d3 e8                	shr    eax,cl
c001faf3:	09 f0                	or     eax,esi
c001faf5:	89 f9                	mov    ecx,edi
c001faf7:	d3 e5                	shl    ebp,cl
c001faf9:	89 da                	mov    edx,ebx
c001fafb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001faff:	89 d3                	mov    ebx,edx
c001fb01:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fb05:	89 c6                	mov    esi,eax
c001fb07:	89 d1                	mov    ecx,edx
c001fb09:	39 d3                	cmp    ebx,edx
c001fb0b:	72 27                	jb     c001fb34 <__moddi3+0x170>
c001fb0d:	74 21                	je     c001fb30 <__moddi3+0x16c>
c001fb0f:	29 f5                	sub    ebp,esi
c001fb11:	19 cb                	sbb    ebx,ecx
c001fb13:	89 de                	mov    esi,ebx
c001fb15:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001fb19:	d3 e6                	shl    esi,cl
c001fb1b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fb1f:	89 f9                	mov    ecx,edi
c001fb21:	d3 ed                	shr    ebp,cl
c001fb23:	09 ee                	or     esi,ebp
c001fb25:	89 f0                	mov    eax,esi
c001fb27:	d3 eb                	shr    ebx,cl
c001fb29:	89 da                	mov    edx,ebx
c001fb2b:	e9 e8 fe ff ff       	jmp    c001fa18 <__moddi3+0x54>
c001fb30:	39 c5                	cmp    ebp,eax
c001fb32:	73 db                	jae    c001fb0f <__moddi3+0x14b>
c001fb34:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fb38:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001fb3c:	89 d1                	mov    ecx,edx
c001fb3e:	89 c6                	mov    esi,eax
c001fb40:	eb cd                	jmp    c001fb0f <__moddi3+0x14b>
c001fb42:	66 90                	xchg   ax,ax

c001fb44 <__udivdi3>:
c001fb44:	55                   	push   ebp
c001fb45:	57                   	push   edi
c001fb46:	56                   	push   esi
c001fb47:	53                   	push   ebx
c001fb48:	83 ec 1c             	sub    esp,0x1c
c001fb4b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fb4f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001fb53:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fb57:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fb5b:	85 d2                	test   edx,edx
c001fb5d:	75 41                	jne    c001fba0 <__udivdi3+0x5c>
c001fb5f:	39 f7                	cmp    edi,esi
c001fb61:	76 15                	jbe    c001fb78 <__udivdi3+0x34>
c001fb63:	89 e8                	mov    eax,ebp
c001fb65:	89 f2                	mov    edx,esi
c001fb67:	f7 f7                	div    edi
c001fb69:	31 db                	xor    ebx,ebx
c001fb6b:	89 da                	mov    edx,ebx
c001fb6d:	83 c4 1c             	add    esp,0x1c
c001fb70:	5b                   	pop    ebx
c001fb71:	5e                   	pop    esi
c001fb72:	5f                   	pop    edi
c001fb73:	5d                   	pop    ebp
c001fb74:	c3                   	ret    
c001fb75:	8d 76 00             	lea    esi,[esi+0x0]
c001fb78:	89 f9                	mov    ecx,edi
c001fb7a:	85 ff                	test   edi,edi
c001fb7c:	75 0b                	jne    c001fb89 <__udivdi3+0x45>
c001fb7e:	b8 01 00 00 00       	mov    eax,0x1
c001fb83:	31 d2                	xor    edx,edx
c001fb85:	f7 f7                	div    edi
c001fb87:	89 c1                	mov    ecx,eax
c001fb89:	31 d2                	xor    edx,edx
c001fb8b:	89 f0                	mov    eax,esi
c001fb8d:	f7 f1                	div    ecx
c001fb8f:	89 c3                	mov    ebx,eax
c001fb91:	89 e8                	mov    eax,ebp
c001fb93:	f7 f1                	div    ecx
c001fb95:	89 da                	mov    edx,ebx
c001fb97:	83 c4 1c             	add    esp,0x1c
c001fb9a:	5b                   	pop    ebx
c001fb9b:	5e                   	pop    esi
c001fb9c:	5f                   	pop    edi
c001fb9d:	5d                   	pop    ebp
c001fb9e:	c3                   	ret    
c001fb9f:	90                   	nop
c001fba0:	39 f2                	cmp    edx,esi
c001fba2:	77 1c                	ja     c001fbc0 <__udivdi3+0x7c>
c001fba4:	0f bd da             	bsr    ebx,edx
c001fba7:	83 f3 1f             	xor    ebx,0x1f
c001fbaa:	75 24                	jne    c001fbd0 <__udivdi3+0x8c>
c001fbac:	39 f2                	cmp    edx,esi
c001fbae:	72 08                	jb     c001fbb8 <__udivdi3+0x74>
c001fbb0:	39 ef                	cmp    edi,ebp
c001fbb2:	0f 87 84 00 00 00    	ja     c001fc3c <__udivdi3+0xf8>
c001fbb8:	b8 01 00 00 00       	mov    eax,0x1
c001fbbd:	eb ac                	jmp    c001fb6b <__udivdi3+0x27>
c001fbbf:	90                   	nop
c001fbc0:	31 db                	xor    ebx,ebx
c001fbc2:	31 c0                	xor    eax,eax
c001fbc4:	89 da                	mov    edx,ebx
c001fbc6:	83 c4 1c             	add    esp,0x1c
c001fbc9:	5b                   	pop    ebx
c001fbca:	5e                   	pop    esi
c001fbcb:	5f                   	pop    edi
c001fbcc:	5d                   	pop    ebp
c001fbcd:	c3                   	ret    
c001fbce:	66 90                	xchg   ax,ax
c001fbd0:	b8 20 00 00 00       	mov    eax,0x20
c001fbd5:	29 d8                	sub    eax,ebx
c001fbd7:	88 d9                	mov    cl,bl
c001fbd9:	d3 e2                	shl    edx,cl
c001fbdb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fbdf:	89 fa                	mov    edx,edi
c001fbe1:	88 c1                	mov    cl,al
c001fbe3:	d3 ea                	shr    edx,cl
c001fbe5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbe9:	09 d1                	or     ecx,edx
c001fbeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fbef:	88 d9                	mov    cl,bl
c001fbf1:	d3 e7                	shl    edi,cl
c001fbf3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fbf7:	89 f7                	mov    edi,esi
c001fbf9:	88 c1                	mov    cl,al
c001fbfb:	d3 ef                	shr    edi,cl
c001fbfd:	88 d9                	mov    cl,bl
c001fbff:	d3 e6                	shl    esi,cl
c001fc01:	89 ea                	mov    edx,ebp
c001fc03:	88 c1                	mov    cl,al
c001fc05:	d3 ea                	shr    edx,cl
c001fc07:	09 d6                	or     esi,edx
c001fc09:	89 f0                	mov    eax,esi
c001fc0b:	89 fa                	mov    edx,edi
c001fc0d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fc11:	89 d7                	mov    edi,edx
c001fc13:	89 c6                	mov    esi,eax
c001fc15:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fc19:	39 d7                	cmp    edi,edx
c001fc1b:	72 13                	jb     c001fc30 <__udivdi3+0xec>
c001fc1d:	74 09                	je     c001fc28 <__udivdi3+0xe4>
c001fc1f:	89 f0                	mov    eax,esi
c001fc21:	31 db                	xor    ebx,ebx
c001fc23:	e9 43 ff ff ff       	jmp    c001fb6b <__udivdi3+0x27>
c001fc28:	88 d9                	mov    cl,bl
c001fc2a:	d3 e5                	shl    ebp,cl
c001fc2c:	39 c5                	cmp    ebp,eax
c001fc2e:	73 ef                	jae    c001fc1f <__udivdi3+0xdb>
c001fc30:	8d 46 ff             	lea    eax,[esi-0x1]
c001fc33:	31 db                	xor    ebx,ebx
c001fc35:	e9 31 ff ff ff       	jmp    c001fb6b <__udivdi3+0x27>
c001fc3a:	66 90                	xchg   ax,ax
c001fc3c:	31 c0                	xor    eax,eax
c001fc3e:	e9 28 ff ff ff       	jmp    c001fb6b <__udivdi3+0x27>
c001fc43:	90                   	nop

c001fc44 <__umoddi3>:
c001fc44:	55                   	push   ebp
c001fc45:	57                   	push   edi
c001fc46:	56                   	push   esi
c001fc47:	53                   	push   ebx
c001fc48:	83 ec 1c             	sub    esp,0x1c
c001fc4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fc4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fc53:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fc57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fc5b:	89 da                	mov    edx,ebx
c001fc5d:	85 c0                	test   eax,eax
c001fc5f:	75 37                	jne    c001fc98 <__umoddi3+0x54>
c001fc61:	39 df                	cmp    edi,ebx
c001fc63:	76 13                	jbe    c001fc78 <__umoddi3+0x34>
c001fc65:	89 f0                	mov    eax,esi
c001fc67:	f7 f7                	div    edi
c001fc69:	89 d0                	mov    eax,edx
c001fc6b:	31 d2                	xor    edx,edx
c001fc6d:	83 c4 1c             	add    esp,0x1c
c001fc70:	5b                   	pop    ebx
c001fc71:	5e                   	pop    esi
c001fc72:	5f                   	pop    edi
c001fc73:	5d                   	pop    ebp
c001fc74:	c3                   	ret    
c001fc75:	8d 76 00             	lea    esi,[esi+0x0]
c001fc78:	89 fd                	mov    ebp,edi
c001fc7a:	85 ff                	test   edi,edi
c001fc7c:	75 0b                	jne    c001fc89 <__umoddi3+0x45>
c001fc7e:	b8 01 00 00 00       	mov    eax,0x1
c001fc83:	31 d2                	xor    edx,edx
c001fc85:	f7 f7                	div    edi
c001fc87:	89 c5                	mov    ebp,eax
c001fc89:	89 d8                	mov    eax,ebx
c001fc8b:	31 d2                	xor    edx,edx
c001fc8d:	f7 f5                	div    ebp
c001fc8f:	89 f0                	mov    eax,esi
c001fc91:	f7 f5                	div    ebp
c001fc93:	89 d0                	mov    eax,edx
c001fc95:	eb d4                	jmp    c001fc6b <__umoddi3+0x27>
c001fc97:	90                   	nop
c001fc98:	89 f1                	mov    ecx,esi
c001fc9a:	39 d8                	cmp    eax,ebx
c001fc9c:	76 0a                	jbe    c001fca8 <__umoddi3+0x64>
c001fc9e:	89 f0                	mov    eax,esi
c001fca0:	83 c4 1c             	add    esp,0x1c
c001fca3:	5b                   	pop    ebx
c001fca4:	5e                   	pop    esi
c001fca5:	5f                   	pop    edi
c001fca6:	5d                   	pop    ebp
c001fca7:	c3                   	ret    
c001fca8:	0f bd e8             	bsr    ebp,eax
c001fcab:	83 f5 1f             	xor    ebp,0x1f
c001fcae:	75 1c                	jne    c001fccc <__umoddi3+0x88>
c001fcb0:	39 d8                	cmp    eax,ebx
c001fcb2:	72 04                	jb     c001fcb8 <__umoddi3+0x74>
c001fcb4:	39 f7                	cmp    edi,esi
c001fcb6:	77 08                	ja     c001fcc0 <__umoddi3+0x7c>
c001fcb8:	89 da                	mov    edx,ebx
c001fcba:	29 fe                	sub    esi,edi
c001fcbc:	19 c2                	sbb    edx,eax
c001fcbe:	89 f1                	mov    ecx,esi
c001fcc0:	89 c8                	mov    eax,ecx
c001fcc2:	83 c4 1c             	add    esp,0x1c
c001fcc5:	5b                   	pop    ebx
c001fcc6:	5e                   	pop    esi
c001fcc7:	5f                   	pop    edi
c001fcc8:	5d                   	pop    ebp
c001fcc9:	c3                   	ret    
c001fcca:	66 90                	xchg   ax,ax
c001fccc:	ba 20 00 00 00       	mov    edx,0x20
c001fcd1:	29 ea                	sub    edx,ebp
c001fcd3:	89 e9                	mov    ecx,ebp
c001fcd5:	d3 e0                	shl    eax,cl
c001fcd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fcdb:	89 f8                	mov    eax,edi
c001fcdd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fce1:	88 d1                	mov    cl,dl
c001fce3:	d3 e8                	shr    eax,cl
c001fce5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fce9:	09 c1                	or     ecx,eax
c001fceb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fcef:	89 e9                	mov    ecx,ebp
c001fcf1:	d3 e7                	shl    edi,cl
c001fcf3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fcf7:	89 d8                	mov    eax,ebx
c001fcf9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fcfd:	88 d1                	mov    cl,dl
c001fcff:	d3 e8                	shr    eax,cl
c001fd01:	89 c7                	mov    edi,eax
c001fd03:	89 e9                	mov    ecx,ebp
c001fd05:	d3 e3                	shl    ebx,cl
c001fd07:	89 f0                	mov    eax,esi
c001fd09:	88 d1                	mov    cl,dl
c001fd0b:	d3 e8                	shr    eax,cl
c001fd0d:	09 d8                	or     eax,ebx
c001fd0f:	89 e9                	mov    ecx,ebp
c001fd11:	d3 e6                	shl    esi,cl
c001fd13:	89 f3                	mov    ebx,esi
c001fd15:	89 fa                	mov    edx,edi
c001fd17:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fd1b:	89 d1                	mov    ecx,edx
c001fd1d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fd21:	89 c6                	mov    esi,eax
c001fd23:	89 d7                	mov    edi,edx
c001fd25:	39 d1                	cmp    ecx,edx
c001fd27:	72 27                	jb     c001fd50 <__umoddi3+0x10c>
c001fd29:	74 21                	je     c001fd4c <__umoddi3+0x108>
c001fd2b:	89 ca                	mov    edx,ecx
c001fd2d:	29 f3                	sub    ebx,esi
c001fd2f:	19 fa                	sbb    edx,edi
c001fd31:	89 d0                	mov    eax,edx
c001fd33:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fd37:	d3 e0                	shl    eax,cl
c001fd39:	89 e9                	mov    ecx,ebp
c001fd3b:	d3 eb                	shr    ebx,cl
c001fd3d:	09 d8                	or     eax,ebx
c001fd3f:	d3 ea                	shr    edx,cl
c001fd41:	83 c4 1c             	add    esp,0x1c
c001fd44:	5b                   	pop    ebx
c001fd45:	5e                   	pop    esi
c001fd46:	5f                   	pop    edi
c001fd47:	5d                   	pop    ebp
c001fd48:	c3                   	ret    
c001fd49:	8d 76 00             	lea    esi,[esi+0x0]
c001fd4c:	39 c3                	cmp    ebx,eax
c001fd4e:	73 db                	jae    c001fd2b <__umoddi3+0xe7>
c001fd50:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fd54:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fd58:	89 d7                	mov    edi,edx
c001fd5a:	89 c6                	mov    esi,eax
c001fd5c:	eb cd                	jmp    c001fd2b <__umoddi3+0xe7>

Disassembly of section .init:

c001fd5e <_init>:
c001fd5e:	55                   	push   ebp
c001fd5f:	89 e5                	mov    ebp,esp
c001fd61:	e8 8e 03 fe ff       	call   c00000f4 <frame_dummy>
c001fd66:	e8 e5 fa ff ff       	call   c001f850 <__do_global_ctors_aux>
c001fd6b:	5d                   	pop    ebp
c001fd6c:	c3                   	ret    

Disassembly of section .fini:

c001fd6d <_fini>:
c001fd6d:	55                   	push   ebp
c001fd6e:	89 e5                	mov    ebp,esp
c001fd70:	e8 0f 03 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fd75:	5d                   	pop    ebp
c001fd76:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fd78 <DriverlessDevice::~DriverlessDevice()>:
c001fd78:	ba 00 17 02 c0       	mov    edx,0xc0021700
c001fd7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd81:	89 10                	mov    DWORD PTR [eax],edx
c001fd83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd87:	50                   	push   eax
c001fd88:	e8 b3 91 fe ff       	call   c0008f40 <Device::~Device()>
c001fd8d:	83 c4 04             	add    esp,0x4
c001fd90:	90                   	nop
c001fd91:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fd92 <DriverlessDevice::~DriverlessDevice()>:
c001fd92:	83 ec 0c             	sub    esp,0xc
c001fd95:	83 ec 0c             	sub    esp,0xc
c001fd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd9c:	e8 d7 ff ff ff       	call   c001fd78 <DriverlessDevice::~DriverlessDevice()>
c001fda1:	83 c4 10             	add    esp,0x10
c001fda4:	83 ec 08             	sub    esp,0x8
c001fda7:	68 58 01 00 00       	push   0x158
c001fdac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb0:	e8 53 c9 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c001fdb5:	83 c4 10             	add    esp,0x10
c001fdb8:	83 c4 0c             	add    esp,0xc
c001fdbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fdbc <LinkedList<Device>::addElement(Device*)>:
c001fdbc:	83 ec 0c             	sub    esp,0xc
c001fdbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fdc4:	75 10                	jne    c001fdd6 <LinkedList<Device>::addElement(Device*)+0x1a>
c001fdc6:	83 ec 0c             	sub    esp,0xc
c001fdc9:	68 94 16 02 c0       	push   0xc0021694
c001fdce:	e8 13 ef fe ff       	call   c000ece6 <KePanic(char const*)>
c001fdd3:	83 c4 10             	add    esp,0x10
c001fdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdda:	8b 00                	mov    eax,DWORD PTR [eax]
c001fddc:	85 c0                	test   eax,eax
c001fdde:	74 3a                	je     c001fe1a <LinkedList<Device>::addElement(Device*)+0x5e>
c001fde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fde7:	85 c0                	test   eax,eax
c001fde9:	74 2f                	je     c001fe1a <LinkedList<Device>::addElement(Device*)+0x5e>
c001fdeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdf2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdf6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe04:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe0e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fe18:	eb 68                	jmp    c001fe82 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fe1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe20:	85 c0                	test   eax,eax
c001fe22:	75 4e                	jne    c001fe72 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fe24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe2b:	85 c0                	test   eax,eax
c001fe2d:	75 43                	jne    c001fe72 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fe2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe37:	89 10                	mov    DWORD PTR [eax],edx
c001fe39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe41:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe4b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fe55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe5c:	85 c0                	test   eax,eax
c001fe5e:	74 22                	je     c001fe82 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fe60:	83 ec 0c             	sub    esp,0xc
c001fe63:	68 b6 16 02 c0       	push   0xc00216b6
c001fe68:	e8 79 ee fe ff       	call   c000ece6 <KePanic(char const*)>
c001fe6d:	83 c4 10             	add    esp,0x10
c001fe70:	eb 10                	jmp    c001fe82 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fe72:	83 ec 0c             	sub    esp,0xc
c001fe75:	68 c0 16 02 c0       	push   0xc00216c0
c001fe7a:	e8 67 ee fe ff       	call   c000ece6 <KePanic(char const*)>
c001fe7f:	83 c4 10             	add    esp,0x10
c001fe82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe86:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe89:	8d 50 01             	lea    edx,[eax+0x1]
c001fe8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe90:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe93:	90                   	nop
c001fe94:	83 c4 0c             	add    esp,0xc
c001fe97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fe98 <LinkedList<Device>::LinkedList()>:
c001fe98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fea6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fead:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feb1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001feb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001febc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fec6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fed1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fed8:	90                   	nop
c001fed9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fedc <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fee0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fee2:	85 c0                	test   eax,eax
c001fee4:	75 0e                	jne    c001fef4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feed:	85 c0                	test   eax,eax
c001feef:	75 03                	jne    c001fef4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fef1:	b0 01                	mov    al,0x1
c001fef3:	c3                   	ret    
c001fef4:	b0 00                	mov    al,0x0
c001fef6:	90                   	nop
c001fef7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fef8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fefc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fefe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ff00 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ff00:	83 ec 0c             	sub    esp,0xc
c001ff03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff07:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff09:	85 c0                	test   eax,eax
c001ff0b:	75 17                	jne    c001ff24 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ff0d:	83 ec 0c             	sub    esp,0xc
c001ff10:	68 30 19 02 c0       	push   0xc0021930
c001ff15:	e8 cc ed fe ff       	call   c000ece6 <KePanic(char const*)>
c001ff1a:	83 c4 10             	add    esp,0x10
c001ff1d:	e9 96 00 00 00       	jmp    c001ffb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ff22:	66 90                	xchg   ax,ax
c001ff24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ff2e:	85 c0                	test   eax,eax
c001ff30:	0f 95 c0             	setne  al
c001ff33:	0f b6 c0             	movzx  eax,al
c001ff36:	85 c0                	test   eax,eax
c001ff38:	74 12                	je     c001ff4c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ff3a:	83 ec 0c             	sub    esp,0xc
c001ff3d:	68 7b 19 02 c0       	push   0xc002197b
c001ff42:	e8 9f ed fe ff       	call   c000ece6 <KePanic(char const*)>
c001ff47:	83 c4 10             	add    esp,0x10
c001ff4a:	66 90                	xchg   ax,ax
c001ff4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff52:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ff55:	85 c0                	test   eax,eax
c001ff57:	0f 94 c0             	sete   al
c001ff5a:	0f b6 c0             	movzx  eax,al
c001ff5d:	85 c0                	test   eax,eax
c001ff5f:	74 33                	je     c001ff94 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ff61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff65:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff7d:	83 f8 01             	cmp    eax,0x1
c001ff80:	74 22                	je     c001ffa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ff82:	83 ec 0c             	sub    esp,0xc
c001ff85:	68 54 19 02 c0       	push   0xc0021954
c001ff8a:	e8 57 ed fe ff       	call   c000ece6 <KePanic(char const*)>
c001ff8f:	83 c4 10             	add    esp,0x10
c001ff92:	eb 10                	jmp    c001ffa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ff94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff98:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff9a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ff9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa1:	89 10                	mov    DWORD PTR [eax],edx
c001ffa3:	90                   	nop
c001ffa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffab:	8d 50 ff             	lea    edx,[eax-0x1]
c001ffae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffb5:	8d 76 00             	lea    esi,[esi+0x0]
c001ffb8:	83 c4 0c             	add    esp,0xc
c001ffbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ffbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ffbc:	83 ec 0c             	sub    esp,0xc
c001ffbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ffc4:	75 12                	jne    c001ffd8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ffc6:	83 ec 0c             	sub    esp,0xc
c001ffc9:	68 94 16 02 c0       	push   0xc0021694
c001ffce:	e8 13 ed fe ff       	call   c000ece6 <KePanic(char const*)>
c001ffd3:	83 c4 10             	add    esp,0x10
c001ffd6:	66 90                	xchg   ax,ax
c001ffd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffdc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffde:	85 c0                	test   eax,eax
c001ffe0:	74 36                	je     c0020018 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ffe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffe9:	85 c0                	test   eax,eax
c001ffeb:	74 2b                	je     c0020018 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ffed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fff4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fff8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020003:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002000a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002000d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020014:	eb 6a                	jmp    c0020080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0020016:	66 90                	xchg   ax,ax
c0020018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002001c:	8b 00                	mov    eax,DWORD PTR [eax]
c002001e:	85 c0                	test   eax,eax
c0020020:	75 4e                	jne    c0020070 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0020022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020026:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020029:	85 c0                	test   eax,eax
c002002b:	75 43                	jne    c0020070 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002002d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020031:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020035:	89 10                	mov    DWORD PTR [eax],edx
c0020037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002003b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002003f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020049:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020054:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020057:	85 c0                	test   eax,eax
c0020059:	74 25                	je     c0020080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002005b:	83 ec 0c             	sub    esp,0xc
c002005e:	68 b6 16 02 c0       	push   0xc00216b6
c0020063:	e8 7e ec fe ff       	call   c000ece6 <KePanic(char const*)>
c0020068:	83 c4 10             	add    esp,0x10
c002006b:	eb 13                	jmp    c0020080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002006d:	8d 76 00             	lea    esi,[esi+0x0]
c0020070:	83 ec 0c             	sub    esp,0xc
c0020073:	68 c0 16 02 c0       	push   0xc00216c0
c0020078:	e8 69 ec fe ff       	call   c000ece6 <KePanic(char const*)>
c002007d:	83 c4 10             	add    esp,0x10
c0020080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020084:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020087:	8d 50 01             	lea    edx,[eax+0x1]
c002008a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002008e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020091:	90                   	nop
c0020092:	83 c4 0c             	add    esp,0xc
c0020095:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0020098 <ACPI::~ACPI()>:
c0020098:	83 ec 0c             	sub    esp,0xc
c002009b:	ba cc 1c 02 c0       	mov    edx,0xc0021ccc
c00200a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a4:	89 10                	mov    DWORD PTR [eax],edx
c00200a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200aa:	83 ec 0c             	sub    esp,0xc
c00200ad:	50                   	push   eax
c00200ae:	e8 8d 8e fe ff       	call   c0008f40 <Device::~Device()>
c00200b3:	83 c4 10             	add    esp,0x10
c00200b6:	90                   	nop
c00200b7:	83 c4 0c             	add    esp,0xc
c00200ba:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00200bc <ACPI::~ACPI()>:
c00200bc:	83 ec 0c             	sub    esp,0xc
c00200bf:	83 ec 0c             	sub    esp,0xc
c00200c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200c6:	e8 cd ff ff ff       	call   c0020098 <ACPI::~ACPI()>
c00200cb:	83 c4 10             	add    esp,0x10
c00200ce:	83 ec 08             	sub    esp,0x8
c00200d1:	68 64 12 00 00       	push   0x1264
c00200d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200da:	e8 29 c6 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c00200df:	83 c4 10             	add    esp,0x10
c00200e2:	83 c4 0c             	add    esp,0xc
c00200e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00200e8 <LinkedList<Device>::~LinkedList()>:
c00200e8:	90                   	nop
c00200e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00200ec <LinkedList<Device>::isEmpty()>:
c00200ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00200f2:	85 c0                	test   eax,eax
c00200f4:	75 0e                	jne    c0020104 <LinkedList<Device>::isEmpty()+0x18>
c00200f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00200fd:	85 c0                	test   eax,eax
c00200ff:	75 03                	jne    c0020104 <LinkedList<Device>::isEmpty()+0x18>
c0020101:	b0 01                	mov    al,0x1
c0020103:	c3                   	ret    
c0020104:	b0 00                	mov    al,0x0
c0020106:	90                   	nop
c0020107:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020108 <LinkedList<Device>::getFirstElement()>:
c0020108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002010c:	8b 00                	mov    eax,DWORD PTR [eax]
c002010e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020110 <LinkedList<Device>::removeFirst()>:
c0020110:	83 ec 0c             	sub    esp,0xc
c0020113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020117:	8b 00                	mov    eax,DWORD PTR [eax]
c0020119:	85 c0                	test   eax,eax
c002011b:	75 17                	jne    c0020134 <LinkedList<Device>::removeFirst()+0x24>
c002011d:	83 ec 0c             	sub    esp,0xc
c0020120:	68 30 19 02 c0       	push   0xc0021930
c0020125:	e8 bc eb fe ff       	call   c000ece6 <KePanic(char const*)>
c002012a:	83 c4 10             	add    esp,0x10
c002012d:	e9 92 00 00 00       	jmp    c00201c4 <LinkedList<Device>::removeFirst()+0xb4>
c0020132:	66 90                	xchg   ax,ax
c0020134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020138:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002013b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020141:	85 c0                	test   eax,eax
c0020143:	74 13                	je     c0020158 <LinkedList<Device>::removeFirst()+0x48>
c0020145:	83 ec 0c             	sub    esp,0xc
c0020148:	68 7b 19 02 c0       	push   0xc002197b
c002014d:	e8 94 eb fe ff       	call   c000ece6 <KePanic(char const*)>
c0020152:	83 c4 10             	add    esp,0x10
c0020155:	8d 76 00             	lea    esi,[esi+0x0]
c0020158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002015c:	8b 00                	mov    eax,DWORD PTR [eax]
c002015e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020164:	85 c0                	test   eax,eax
c0020166:	75 34                	jne    c002019c <LinkedList<Device>::removeFirst()+0x8c>
c0020168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002016c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020176:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002017d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020181:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020184:	83 f8 01             	cmp    eax,0x1
c0020187:	74 27                	je     c00201b0 <LinkedList<Device>::removeFirst()+0xa0>
c0020189:	83 ec 0c             	sub    esp,0xc
c002018c:	68 54 19 02 c0       	push   0xc0021954
c0020191:	e8 50 eb fe ff       	call   c000ece6 <KePanic(char const*)>
c0020196:	83 c4 10             	add    esp,0x10
c0020199:	eb 15                	jmp    c00201b0 <LinkedList<Device>::removeFirst()+0xa0>
c002019b:	90                   	nop
c002019c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00201a2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00201a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ac:	89 10                	mov    DWORD PTR [eax],edx
c00201ae:	66 90                	xchg   ax,ax
c00201b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00201b7:	8d 50 ff             	lea    edx,[eax-0x1]
c00201ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00201c1:	8d 76 00             	lea    esi,[esi+0x0]
c00201c4:	83 c4 0c             	add    esp,0xc
c00201c7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00201c8 <Computer::~Computer()>:
c00201c8:	83 ec 0c             	sub    esp,0xc
c00201cb:	ba 6c 1f 02 c0       	mov    edx,0xc0021f6c
c00201d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d4:	89 10                	mov    DWORD PTR [eax],edx
c00201d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201da:	83 ec 0c             	sub    esp,0xc
c00201dd:	50                   	push   eax
c00201de:	e8 5d 8d fe ff       	call   c0008f40 <Device::~Device()>
c00201e3:	83 c4 10             	add    esp,0x10
c00201e6:	90                   	nop
c00201e7:	83 c4 0c             	add    esp,0xc
c00201ea:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00201ec <Computer::~Computer()>:
c00201ec:	83 ec 0c             	sub    esp,0xc
c00201ef:	83 ec 0c             	sub    esp,0xc
c00201f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f6:	e8 cd ff ff ff       	call   c00201c8 <Computer::~Computer()>
c00201fb:	83 c4 10             	add    esp,0x10
c00201fe:	83 ec 08             	sub    esp,0x8
c0020201:	68 6c 01 00 00       	push   0x16c
c0020206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002020a:	e8 f9 c4 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c002020f:	83 c4 10             	add    esp,0x10
c0020212:	83 c4 0c             	add    esp,0xc
c0020215:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0020216 <idleCommon()>:
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	fa                   	cli    
c002021a:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0020220:	e8 43 53 ff ff       	call   c0015568 <schedule()>
c0020225:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c002022a:	48                   	dec    eax
c002022b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0020230:	75 01                	jne    c0020233 <idleCommon()+0x1d>
c0020232:	fb                   	sti    
c0020233:	83 c4 0c             	add    esp,0xc
c0020236:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0020238 <LinkedList<UnixFile>::~LinkedList()>:
c0020238:	90                   	nop
c0020239:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002023a <LinkedList<UnixFile>::LinkedList()>:
c002023a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002023e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020248:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002024f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020253:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002025a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002025e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020268:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002026f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020273:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002027a:	90                   	nop
c002027b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002027c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002027c:	83 ec 0c             	sub    esp,0xc
c002027f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020284:	75 10                	jne    c0020296 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0020286:	83 ec 0c             	sub    esp,0xc
c0020289:	68 94 16 02 c0       	push   0xc0021694
c002028e:	e8 53 ea fe ff       	call   c000ece6 <KePanic(char const*)>
c0020293:	83 c4 10             	add    esp,0x10
c0020296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029a:	8b 00                	mov    eax,DWORD PTR [eax]
c002029c:	85 c0                	test   eax,eax
c002029e:	74 34                	je     c00202d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00202a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202a7:	85 c0                	test   eax,eax
c00202a9:	74 29                	je     c00202d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00202ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00202b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00202c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00202d2:	eb 65                	jmp    c0020339 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00202d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00202da:	85 c0                	test   eax,eax
c00202dc:	75 4b                	jne    c0020329 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00202de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202e5:	85 c0                	test   eax,eax
c00202e7:	75 40                	jne    c0020329 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00202e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202f1:	89 10                	mov    DWORD PTR [eax],edx
c00202f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00202fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020302:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020305:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002030c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020310:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020313:	85 c0                	test   eax,eax
c0020315:	74 22                	je     c0020339 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020317:	83 ec 0c             	sub    esp,0xc
c002031a:	68 b6 16 02 c0       	push   0xc00216b6
c002031f:	e8 c2 e9 fe ff       	call   c000ece6 <KePanic(char const*)>
c0020324:	83 c4 10             	add    esp,0x10
c0020327:	eb 10                	jmp    c0020339 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020329:	83 ec 0c             	sub    esp,0xc
c002032c:	68 c0 16 02 c0       	push   0xc00216c0
c0020331:	e8 b0 e9 fe ff       	call   c000ece6 <KePanic(char const*)>
c0020336:	83 c4 10             	add    esp,0x10
c0020339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002033d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020340:	8d 50 01             	lea    edx,[eax+0x1]
c0020343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020347:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002034a:	90                   	nop
c002034b:	83 c4 0c             	add    esp,0xc
c002034e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0020350 <LinkedList<UnixFile>::getFirstElement()>:
c0020350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020354:	8b 00                	mov    eax,DWORD PTR [eax]
c0020356:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0020358 <LinkedList<UnixFile>::removeFirst()>:
c0020358:	83 ec 0c             	sub    esp,0xc
c002035b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020361:	85 c0                	test   eax,eax
c0020363:	75 12                	jne    c0020377 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0020365:	83 ec 0c             	sub    esp,0xc
c0020368:	68 30 19 02 c0       	push   0xc0021930
c002036d:	e8 74 e9 fe ff       	call   c000ece6 <KePanic(char const*)>
c0020372:	83 c4 10             	add    esp,0x10
c0020375:	eb 7e                	jmp    c00203f5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0020377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002037b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002037e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020381:	85 c0                	test   eax,eax
c0020383:	74 10                	je     c0020395 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0020385:	83 ec 0c             	sub    esp,0xc
c0020388:	68 7b 19 02 c0       	push   0xc002197b
c002038d:	e8 54 e9 fe ff       	call   c000ece6 <KePanic(char const*)>
c0020392:	83 c4 10             	add    esp,0x10
c0020395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020399:	8b 00                	mov    eax,DWORD PTR [eax]
c002039b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002039e:	85 c0                	test   eax,eax
c00203a0:	75 33                	jne    c00203d5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00203a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00203ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00203b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00203be:	83 f8 01             	cmp    eax,0x1
c00203c1:	74 21                	je     c00203e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00203c3:	83 ec 0c             	sub    esp,0xc
c00203c6:	68 54 19 02 c0       	push   0xc0021954
c00203cb:	e8 16 e9 fe ff       	call   c000ece6 <KePanic(char const*)>
c00203d0:	83 c4 10             	add    esp,0x10
c00203d3:	eb 0f                	jmp    c00203e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00203d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00203db:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00203de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203e2:	89 10                	mov    DWORD PTR [eax],edx
c00203e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00203eb:	8d 50 ff             	lea    edx,[eax-0x1]
c00203ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00203f5:	83 c4 0c             	add    esp,0xc
c00203f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00203fa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00203fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020401:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0020404 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0020404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020408:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002040b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002040c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002040c:	90                   	nop
c002040d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020410 <ThreadControlBlock::ThreadControlBlock()>:
c0020410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020414:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002041b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002041f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0020426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002042a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020435:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002043c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020440:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0020447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002044b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002044f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020453:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0020457:	90                   	nop
c0020458:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002045c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002045c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020460:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002046a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020471:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020475:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002047c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020480:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002048a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020491:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020495:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002049c:	90                   	nop
c002049d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002049e <CPU::~CPU()>:
c002049e:	83 ec 0c             	sub    esp,0xc
c00204a1:	ba 94 30 02 c0       	mov    edx,0xc0023094
c00204a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204aa:	89 10                	mov    DWORD PTR [eax],edx
c00204ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b0:	83 ec 0c             	sub    esp,0xc
c00204b3:	50                   	push   eax
c00204b4:	e8 87 8a fe ff       	call   c0008f40 <Device::~Device()>
c00204b9:	83 c4 10             	add    esp,0x10
c00204bc:	90                   	nop
c00204bd:	83 c4 0c             	add    esp,0xc
c00204c0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00204c2 <CPU::~CPU()>:
c00204c2:	83 ec 0c             	sub    esp,0xc
c00204c5:	83 ec 0c             	sub    esp,0xc
c00204c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204cc:	e8 cd ff ff ff       	call   c002049e <CPU::~CPU()>
c00204d1:	83 c4 10             	add    esp,0x10
c00204d4:	83 ec 08             	sub    esp,0x8
c00204d7:	68 78 11 00 00       	push   0x1178
c00204dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204e0:	e8 23 c2 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c00204e5:	83 c4 10             	add    esp,0x10
c00204e8:	83 c4 0c             	add    esp,0xc
c00204eb:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00204ec <PCI::~PCI()>:
c00204ec:	83 ec 0c             	sub    esp,0xc
c00204ef:	ba f8 35 02 c0       	mov    edx,0xc00235f8
c00204f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204f8:	89 10                	mov    DWORD PTR [eax],edx
c00204fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204fe:	83 ec 0c             	sub    esp,0xc
c0020501:	50                   	push   eax
c0020502:	e8 1d 84 fe ff       	call   c0008924 <Bus::~Bus()>
c0020507:	83 c4 10             	add    esp,0x10
c002050a:	90                   	nop
c002050b:	83 c4 0c             	add    esp,0xc
c002050e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0020510 <PCI::~PCI()>:
c0020510:	83 ec 0c             	sub    esp,0xc
c0020513:	83 ec 0c             	sub    esp,0xc
c0020516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002051a:	e8 cd ff ff ff       	call   c00204ec <PCI::~PCI()>
c002051f:	83 c4 10             	add    esp,0x10
c0020522:	83 ec 08             	sub    esp,0x8
c0020525:	68 5c 01 00 00       	push   0x15c
c002052a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002052e:	e8 d5 c1 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0020533:	83 c4 10             	add    esp,0x10
c0020536:	83 c4 0c             	add    esp,0xc
c0020539:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002053a <IDE::~IDE()>:
c002053a:	83 ec 0c             	sub    esp,0xc
c002053d:	ba 30 37 02 c0       	mov    edx,0xc0023730
c0020542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020546:	89 10                	mov    DWORD PTR [eax],edx
c0020548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002054c:	83 ec 0c             	sub    esp,0xc
c002054f:	50                   	push   eax
c0020550:	e8 7b 8e fe ff       	call   c00093d0 <HardDiskController::~HardDiskController()>
c0020555:	83 c4 10             	add    esp,0x10
c0020558:	90                   	nop
c0020559:	83 c4 0c             	add    esp,0xc
c002055c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002055e <IDE::~IDE()>:
c002055e:	83 ec 0c             	sub    esp,0xc
c0020561:	83 ec 0c             	sub    esp,0xc
c0020564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020568:	e8 cd ff ff ff       	call   c002053a <IDE::~IDE()>
c002056d:	83 c4 10             	add    esp,0x10
c0020570:	83 ec 08             	sub    esp,0x8
c0020573:	68 70 02 00 00       	push   0x270
c0020578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002057c:	e8 87 c1 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0020581:	83 c4 10             	add    esp,0x10
c0020584:	83 c4 0c             	add    esp,0xc
c0020587:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020588 <SATABus::~SATABus()>:
c0020588:	83 ec 0c             	sub    esp,0xc
c002058b:	ba 80 37 02 c0       	mov    edx,0xc0023780
c0020590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020594:	89 10                	mov    DWORD PTR [eax],edx
c0020596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002059a:	83 ec 0c             	sub    esp,0xc
c002059d:	50                   	push   eax
c002059e:	e8 2d 8e fe ff       	call   c00093d0 <HardDiskController::~HardDiskController()>
c00205a3:	83 c4 10             	add    esp,0x10
c00205a6:	90                   	nop
c00205a7:	83 c4 0c             	add    esp,0xc
c00205aa:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00205ac <SATABus::~SATABus()>:
c00205ac:	83 ec 0c             	sub    esp,0xc
c00205af:	83 ec 0c             	sub    esp,0xc
c00205b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205b6:	e8 cd ff ff ff       	call   c0020588 <SATABus::~SATABus()>
c00205bb:	83 c4 10             	add    esp,0x10
c00205be:	83 ec 08             	sub    esp,0x8
c00205c1:	68 64 01 00 00       	push   0x164
c00205c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205ca:	e8 39 c1 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c00205cf:	83 c4 10             	add    esp,0x10
c00205d2:	83 c4 0c             	add    esp,0xc
c00205d5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00205d6 <ATA::~ATA()>:
c00205d6:	83 ec 0c             	sub    esp,0xc
c00205d9:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c00205de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205e2:	89 10                	mov    DWORD PTR [eax],edx
c00205e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205e8:	83 ec 0c             	sub    esp,0xc
c00205eb:	50                   	push   eax
c00205ec:	e8 c1 8e fe ff       	call   c00094b2 <PhysicalDisk::~PhysicalDisk()>
c00205f1:	83 c4 10             	add    esp,0x10
c00205f4:	90                   	nop
c00205f5:	83 c4 0c             	add    esp,0xc
c00205f8:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00205fa <ATA::~ATA()>:
c00205fa:	83 ec 0c             	sub    esp,0xc
c00205fd:	83 ec 0c             	sub    esp,0xc
c0020600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020604:	e8 cd ff ff ff       	call   c00205d6 <ATA::~ATA()>
c0020609:	83 c4 10             	add    esp,0x10
c002060c:	83 ec 08             	sub    esp,0x8
c002060f:	68 7c 01 00 00       	push   0x17c
c0020614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020618:	e8 eb c0 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c002061d:	83 c4 10             	add    esp,0x10
c0020620:	83 c4 0c             	add    esp,0xc
c0020623:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0020624 <ATAPI::~ATAPI()>:
c0020624:	83 ec 0c             	sub    esp,0xc
c0020627:	ba 08 38 02 c0       	mov    edx,0xc0023808
c002062c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020630:	89 10                	mov    DWORD PTR [eax],edx
c0020632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020636:	83 ec 0c             	sub    esp,0xc
c0020639:	50                   	push   eax
c002063a:	e8 73 8e fe ff       	call   c00094b2 <PhysicalDisk::~PhysicalDisk()>
c002063f:	83 c4 10             	add    esp,0x10
c0020642:	90                   	nop
c0020643:	83 c4 0c             	add    esp,0xc
c0020646:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020648 <ATAPI::~ATAPI()>:
c0020648:	83 ec 0c             	sub    esp,0xc
c002064b:	83 ec 0c             	sub    esp,0xc
c002064e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020652:	e8 cd ff ff ff       	call   c0020624 <ATAPI::~ATAPI()>
c0020657:	83 c4 10             	add    esp,0x10
c002065a:	83 ec 08             	sub    esp,0x8
c002065d:	68 84 01 00 00       	push   0x184
c0020662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020666:	e8 9d c0 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c002066b:	83 c4 10             	add    esp,0x10
c002066e:	83 c4 0c             	add    esp,0xc
c0020671:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0020672 <SATA::~SATA()>:
c0020672:	83 ec 0c             	sub    esp,0xc
c0020675:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c002067a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002067e:	89 10                	mov    DWORD PTR [eax],edx
c0020680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020684:	83 ec 0c             	sub    esp,0xc
c0020687:	50                   	push   eax
c0020688:	e8 25 8e fe ff       	call   c00094b2 <PhysicalDisk::~PhysicalDisk()>
c002068d:	83 c4 10             	add    esp,0x10
c0020690:	90                   	nop
c0020691:	83 c4 0c             	add    esp,0xc
c0020694:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020696 <SATA::~SATA()>:
c0020696:	83 ec 0c             	sub    esp,0xc
c0020699:	83 ec 0c             	sub    esp,0xc
c002069c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206a0:	e8 cd ff ff ff       	call   c0020672 <SATA::~SATA()>
c00206a5:	83 c4 10             	add    esp,0x10
c00206a8:	83 ec 08             	sub    esp,0x8
c00206ab:	68 7c 01 00 00       	push   0x17c
c00206b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206b4:	e8 4f c0 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c00206b9:	83 c4 10             	add    esp,0x10
c00206bc:	83 c4 0c             	add    esp,0xc
c00206bf:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00206c0 <SATAPI::~SATAPI()>:
c00206c0:	83 ec 0c             	sub    esp,0xc
c00206c3:	ba ec 39 02 c0       	mov    edx,0xc00239ec
c00206c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206cc:	89 10                	mov    DWORD PTR [eax],edx
c00206ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206d2:	83 ec 0c             	sub    esp,0xc
c00206d5:	50                   	push   eax
c00206d6:	e8 d7 8d fe ff       	call   c00094b2 <PhysicalDisk::~PhysicalDisk()>
c00206db:	83 c4 10             	add    esp,0x10
c00206de:	90                   	nop
c00206df:	83 c4 0c             	add    esp,0xc
c00206e2:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00206e4 <SATAPI::~SATAPI()>:
c00206e4:	83 ec 0c             	sub    esp,0xc
c00206e7:	83 ec 0c             	sub    esp,0xc
c00206ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ee:	e8 cd ff ff ff       	call   c00206c0 <SATAPI::~SATAPI()>
c00206f3:	83 c4 10             	add    esp,0x10
c00206f6:	83 ec 08             	sub    esp,0x8
c00206f9:	68 84 01 00 00       	push   0x184
c00206fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020702:	e8 01 c0 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0020707:	83 c4 10             	add    esp,0x10
c002070a:	83 c4 0c             	add    esp,0xc
c002070d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002070e <IOAPIC::~IOAPIC()>:
c002070e:	83 ec 0c             	sub    esp,0xc
c0020711:	ba 3c 3a 02 c0       	mov    edx,0xc0023a3c
c0020716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002071a:	89 10                	mov    DWORD PTR [eax],edx
c002071c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020720:	83 ec 0c             	sub    esp,0xc
c0020723:	50                   	push   eax
c0020724:	e8 17 88 fe ff       	call   c0008f40 <Device::~Device()>
c0020729:	83 c4 10             	add    esp,0x10
c002072c:	90                   	nop
c002072d:	83 c4 0c             	add    esp,0xc
c0020730:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020732 <IOAPIC::~IOAPIC()>:
c0020732:	83 ec 0c             	sub    esp,0xc
c0020735:	83 ec 0c             	sub    esp,0xc
c0020738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002073c:	e8 cd ff ff ff       	call   c002070e <IOAPIC::~IOAPIC()>
c0020741:	83 c4 10             	add    esp,0x10
c0020744:	83 ec 08             	sub    esp,0x8
c0020747:	68 68 01 00 00       	push   0x168
c002074c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020750:	e8 b3 bf fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0020755:	83 c4 10             	add    esp,0x10
c0020758:	83 c4 0c             	add    esp,0xc
c002075b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002075c <APICTimer::~APICTimer()>:
c002075c:	83 ec 0c             	sub    esp,0xc
c002075f:	ba 84 3a 02 c0       	mov    edx,0xc0023a84
c0020764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020768:	89 10                	mov    DWORD PTR [eax],edx
c002076a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002076e:	83 ec 0c             	sub    esp,0xc
c0020771:	50                   	push   eax
c0020772:	e8 51 9f fe ff       	call   c000a6c8 <Timer::~Timer()>
c0020777:	83 c4 10             	add    esp,0x10
c002077a:	90                   	nop
c002077b:	83 c4 0c             	add    esp,0xc
c002077e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020780 <APICTimer::~APICTimer()>:
c0020780:	83 ec 0c             	sub    esp,0xc
c0020783:	83 ec 0c             	sub    esp,0xc
c0020786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002078a:	e8 cd ff ff ff       	call   c002075c <APICTimer::~APICTimer()>
c002078f:	83 c4 10             	add    esp,0x10
c0020792:	83 ec 08             	sub    esp,0x8
c0020795:	68 60 01 00 00       	push   0x160
c002079a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002079e:	e8 65 bf fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c00207a3:	83 c4 10             	add    esp,0x10
c00207a6:	83 c4 0c             	add    esp,0xc
c00207a9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00207ac <PIT::~PIT()>:
c00207ac:	83 ec 0c             	sub    esp,0xc
c00207af:	ba d4 3a 02 c0       	mov    edx,0xc0023ad4
c00207b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207b8:	89 10                	mov    DWORD PTR [eax],edx
c00207ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207be:	83 ec 0c             	sub    esp,0xc
c00207c1:	50                   	push   eax
c00207c2:	e8 01 9f fe ff       	call   c000a6c8 <Timer::~Timer()>
c00207c7:	83 c4 10             	add    esp,0x10
c00207ca:	90                   	nop
c00207cb:	83 c4 0c             	add    esp,0xc
c00207ce:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00207d0 <PIT::~PIT()>:
c00207d0:	83 ec 0c             	sub    esp,0xc
c00207d3:	83 ec 0c             	sub    esp,0xc
c00207d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207da:	e8 cd ff ff ff       	call   c00207ac <PIT::~PIT()>
c00207df:	83 c4 10             	add    esp,0x10
c00207e2:	83 ec 08             	sub    esp,0x8
c00207e5:	68 5c 01 00 00       	push   0x15c
c00207ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207ee:	e8 15 bf fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c00207f3:	83 c4 10             	add    esp,0x10
c00207f6:	83 c4 0c             	add    esp,0xc
c00207f9:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be eb 22 02 c0       	mov    esi,0xc00222eb
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 07 23 02 c0       	mov    esi,0xc0022307
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
