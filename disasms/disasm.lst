
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0b 06 01 00       	call   c001062b <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a0 01 03 c0       	mov    eax,0xc00301a0
c0000025:	3d a0 01 03 c0       	cmp    eax,0xc00301a0
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a0 01 03 c0       	push   0xc00301a0
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a0 01 03 c0       	mov    eax,0xc00301a0
c0000051:	2d a0 01 03 c0       	sub    eax,0xc00301a0
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a0 01 03 c0       	push   0xc00301a0
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 20 03 c0 00 	cmp    BYTE PTR ds:0xc00320c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb f8 9a 02 c0       	mov    ebx,0xc0029af8
c0000097:	81 eb f4 9a 02 c0    	sub    ebx,0xc0029af4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be f4 9a 02 c0       	mov    esi,0xc0029af4
c00000a6:	a1 c4 20 03 c0       	mov    eax,ds:0xc00320c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 20 03 c0       	mov    ds:0xc00320c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 20 03 c0       	mov    eax,ds:0xc00320c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a0 01 03 c0       	push   0xc00301a0
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 20 03 c0 01 	mov    BYTE PTR ds:0xc00320c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 20 03 c0       	push   0xc00320c8
c0000108:	68 a0 01 03 c0       	push   0xc00301a0
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 97 67 01 00       	call   c0016a44 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 f1 4b 01 00       	call   c0014eb6 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 75 67 01 00       	call   c0016a44 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 d6 6c 01 00       	call   c0016fc4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 51 72 01 00       	call   c0017548 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 61 03 c0 	lgdtd  ds:0xc0036118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 ca f6 00 00       	jmp    c000fa49 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 20 03 c0       	mov    ds:0xc00320e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 20 03 c0    	mov    DWORD PTR ds:0xc00320e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 20 03 c0    	mov    ebx,DWORD PTR ds:0xc00320e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 00 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd6500],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 00 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6500],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 00 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd6500],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 00 9b 02 c0 04 	test   BYTE PTR [ecx-0x3ffd6500],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 00 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6500],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 21 03 c0    	mov    ebx,DWORD PTR ds:0xc0032100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 21 03 c0    	mov    DWORD PTR ds:0xc0032100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 21 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcdefc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdefc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 21 03 c0    	mov    DWORD PTR ds:0xc0032100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 21 03 c0    	cmp    DWORD PTR ds:0xc003212c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 21 03 c0    	mov    ecx,DWORD PTR ds:0xc003213c
c0000df7:	c7 42 0c 34 21 03 c0 	mov    DWORD PTR [edx+0xc],0xc0032134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 21 03 c0    	mov    DWORD PTR ds:0xc003213c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 21 03 c0    	mov    DWORD PTR ds:0xc003212c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 21 03 c0 02 	test   BYTE PTR ds:0xc0032100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 24 03 c0    	dec    DWORD PTR ds:0xc0032450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 24 03 c0    	sub    DWORD PTR ds:0xc0032464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 15 f4 00 00       	call   c0010275 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 22 f3 00 00       	call   c0010217 <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 01 f2 00 00       	call   c00101e1 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 fc f1 00 00       	call   c0010217 <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 a8 f0 00 00       	call   c00101e1 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 8e f0 00 00       	call   c00101e1 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 64 f0 00 00       	call   c00101e1 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 21 03 c0    	mov    edi,DWORD PTR ds:0xc0032100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 21 03 c0       	mov    eax,0xc0032100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 21 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdefc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 21 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdefc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 21 03 c0 	lea    edx,[eax*8-0x3ffcdecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 21 03 c0       	mov    eax,0xc0032100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 21 03 c0    	mov    ebx,DWORD PTR ds:0xc0032140
c00012e5:	81 fb 34 21 03 c0    	cmp    ebx,0xc0032134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 21 03 c0       	cmp    eax,0xc0032134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 21 03 c0    	cmp    DWORD PTR ds:0xc0032130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 21 03 c0       	mov    ds:0xc003213c,eax
c0001321:	a3 40 21 03 c0       	mov    ds:0xc0032140,eax
c0001326:	a3 30 21 03 c0       	mov    ds:0xc0032130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 21 03 c0 	mov    DWORD PTR [eax+0x8],0xc0032134
c0001334:	c7 40 0c 34 21 03 c0 	mov    DWORD PTR [eax+0xc],0xc0032134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 21 03 c0       	mov    ds:0xc0032140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 21 03 c0 	mov    DWORD PTR [eax+0x8],0xc0032134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 20 03 c0 	lea    ebp,[edx*4-0x3ffcdf08]
c0001385:	8b 14 95 00 21 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcdf00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 21 03 c0 	lea    ecx,[edx*4-0x3ffcdf00]
c00013a0:	8b 14 95 00 21 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcdf00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 24 03 c0 	or     DWORD PTR [edi*4-0x3ffcdbcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 21 03 c0 	lea    eax,[eax*8-0x3ffcdecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 21 03 c0    	mov    DWORD PTR ds:0xc003213c,ecx
c000145a:	89 0d 40 21 03 c0    	mov    DWORD PTR ds:0xc0032140,ecx
c0001460:	c7 41 08 34 21 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0032134
c0001467:	c7 41 0c 34 21 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0032134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 21 03 c0 	lea    edx,[ecx*8-0x3ffcded4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 24 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffcdbcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 24 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffcdbcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 21 03 c0 	lea    edx,[eax*4-0x3ffcded4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 24 03 c0 	mov    DWORD PTR [ebx*4-0x3ffcdbcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 21 03 c0    	mov    DWORD PTR ds:0xc003213c,edi
c000152d:	89 3d 40 21 03 c0    	mov    DWORD PTR ds:0xc0032140,edi
c0001533:	c7 47 08 34 21 03 c0 	mov    DWORD PTR [edi+0x8],0xc0032134
c000153a:	c7 47 0c 34 21 03 c0 	mov    DWORD PTR [edi+0xc],0xc0032134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 21 03 c0    	mov    DWORD PTR ds:0xc0032130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 21 03 c0       	mov    eax,ds:0xc003212c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 21 03 c0    	mov    DWORD PTR ds:0xc003212c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 21 03 c0       	mov    edx,0xc0032100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 21 03 c0 00 	cmp    DWORD PTR ds:0xc0032100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 21 03 c0       	mov    eax,0xc0032100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 24 03 c0    	mov    ebx,DWORD PTR ds:0xc0032454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 24 03 c0    	mov    DWORD PTR ds:0xc0032454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 21 03 c0    	cmp    DWORD PTR ds:0xc003212c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 21 03 c0    	mov    DWORD PTR ds:0xc003212c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 21 03 c0 00 	cmp    DWORD PTR ds:0xc0032100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 24 03 c0    	push   DWORD PTR ds:0xc003245c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 21 03 c0 00 	cmp    DWORD PTR ds:0xc0032100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 24 03 c0       	mov    eax,ds:0xc003245c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 21 03 c0 00 	cmp    DWORD PTR ds:0xc003212c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 21 03 c0       	mov    eax,ds:0xc003212c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 21 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdefc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 21 03 c0       	mov    eax,0xc0032134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 24 03 c0       	cmp    eax,0xc003242c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 24 03 c0       	mov    eax,ds:0xc0032468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 24 03 c0    	mov    esi,DWORD PTR ds:0xc0032450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 24 03 c0    	mov    esi,DWORD PTR ds:0xc0032464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 24 03 c0    	mov    esi,DWORD PTR ds:0xc0032474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 21 03 c0       	mov    eax,0xc0032100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 04 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd63fc]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 21 03 c0       	mov    eax,ds:0xc0032100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 21 03 c0       	mov    ds:0xc0032100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 24 03 c0    	mov    DWORD PTR ds:0xc0032444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 24 03 c0    	mov    DWORD PTR ds:0xc0032448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 24 03 c0    	mov    DWORD PTR ds:0xc003244c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 24 03 c0    	mov    DWORD PTR ds:0xc0032454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 20 85 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc7ae0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 81 ce 01 00       	jmp    c001ee0c <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 20 85 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc7ae0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 ab ce 01 00       	jmp    c001ee4c <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 20 85 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc7ae0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 cc ce 01 00       	jmp    c001ee8c <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 60 9d 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd62a0]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 60 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd62a0]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba f4 dd 02 c0       	mov    edx,0xc002ddf4
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 1c 9c 02 c0       	mov    edx,0xc0029c1c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 24 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffcdb60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 24 03 c0    	mov    ax,ds:0xc0032480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 24 03 c0    	mov    ds:0xc0032480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 22 9c 02 c0       	mov    eax,0xc0029c22
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf e0 9c 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd6320]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 2b 9c 02 c0       	mov    eax,0xc0029c2b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 60 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd62a0]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 24 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdb60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 24 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdb60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 b0 9c 02 c0       	mov    eax,0xc0029cb0
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 24 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdb60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb a0 9c 02 c0       	mov    ebx,0xc0029ca0
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 80 9c 02 c0       	mov    eax,0xc0029c80
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 90 9c 02 c0       	mov    eax,0xc0029c90
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 32 9c 02 c0       	mov    edx,0xc0029c32
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 3e 9c 02 c0       	mov    edx,0xc0029c3e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 52 9c 02 c0       	mov    edx,0xc0029c52
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 e0 a4 00 00       	call   c00102f7 <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 d8 a4 00 00       	call   c0010307 <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 80 a0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a080
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 80 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a080
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 80 9e 02 c0       	mov    eax,0xc0029e80
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 c0 9d 02 c0       	mov    eax,0xc0029dc0
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 80 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6280]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 80 a1 02 c0       	push   0xc002a180
c0006303:	e8 a0 94 01 00       	call   c001f7a8 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 20 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdfe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 20 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdf80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 8e a1 02 c0       	push   0xc002a18e
c000633b:	e8 68 94 01 00       	call   c001f7a8 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 25 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffcda30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 20 03 c0 	movsx  eax,BYTE PTR ds:0xc0032060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 d1 93 01 00       	call   c001f74c <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 20 03 c0       	mov    eax,0xc0032080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 20 03 c0       	mov    eax,0xc0032020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 2e 03 c0 00 	cmp    DWORD PTR ds:0xc0032eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdf80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 2e 03 c0    	mov    ebp,DWORD PTR ds:0xc0032eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 9d a1 02 c0       	push   0xc002a19d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 2e 03 c0       	mov    ecx,0xc0032e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 25 03 c0 00 	cmp    DWORD PTR [edi-0x3ffcdac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 25 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffcdac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 25 03 c0    	mov    DWORD PTR [edi-0x3ffcdabc],esi
c0006746:	89 87 40 25 03 c0    	mov    DWORD PTR [edi-0x3ffcdac0],eax
c000674c:	c7 87 48 25 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffcdab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 25 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffcda30],0x0
c0006768:	89 87 4c 25 03 c0    	mov    DWORD PTR [edi-0x3ffcdab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 25 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 25 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffcdac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 25 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffcda30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 25 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffcdab8]
c00067e1:	8b 8d 4c 25 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffcdab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 25 03 c0    	add    eax,DWORD PTR [ebp-0x3ffcdac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 20 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcdfe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 25 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffcdab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 25 03 c0    	add    DWORD PTR [ebp-0x3ffcdab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 25 03 c0    	lea    ecx,[ebp-0x3ffcdac0]
c00068d9:	83 bd 40 25 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffcdac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 25 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffcdab4]
c0006917:	05 40 25 03 c0       	add    eax,0xc0032540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 25 03 c0    	mov    eax,DWORD PTR [edx-0x3ffcdab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 25 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffcdac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 25 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffcda30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 25 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffcdab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 25 03 c0 00 	cmp    DWORD PTR [edx-0x3ffcdac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 25 03 c0 00 	cmp    DWORD PTR [edx-0x3ffcda30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 25 03 c0    	mov    eax,DWORD PTR [edx-0x3ffcdab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 25 03 c0    	lea    edi,[eax-0x3ffcdac0]
c00069d6:	83 b8 40 25 03 c0 00 	cmp    DWORD PTR [eax-0x3ffcdac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 a0 a1 02 c0       	push   0xc002a1a0
c00069fa:	e8 a9 8d 01 00       	call   c001f7a8 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 bd 8d 01 00       	call   c001f7c4 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 a5 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1a5
c0006a14:	e8 8f 8d 01 00       	call   c001f7a8 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 25 03 c0    	push   DWORD PTR [ebx-0x3ffcdac0]
c0006a20:	e8 9f 8d 01 00       	call   c001f7c4 <iso_kprintfd>
c0006a25:	c7 04 24 ab a1 02 c0 	mov    DWORD PTR [esp],0xc002a1ab
c0006a2c:	e8 77 8d 01 00       	call   c001f7a8 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 25 03 c0    	push   DWORD PTR [ebx-0x3ffcdabc]
c0006a38:	e8 87 8d 01 00       	call   c001f7c4 <iso_kprintfd>
c0006a3d:	c7 04 24 b1 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1b1
c0006a44:	e8 5f 8d 01 00       	call   c001f7a8 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 25 03 c0    	push   DWORD PTR [ebx-0x3ffcda30]
c0006a50:	e8 6f 8d 01 00       	call   c001f7c4 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 20 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffcdf80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 25 03 c0    	mov    edi,DWORD PTR [edx-0x3ffcdab8]
c0006ab6:	81 c2 40 25 03 c0    	add    edx,0xc0032540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 20 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffcdf80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 25 03 c0    	lea    ebp,[eax-0x3ffcdaa8]
c0006b12:	83 3d b4 2e 03 c0 00 	cmp    DWORD PTR ds:0xc0032eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 25 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffcdaa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 9d a1 02 c0       	push   0xc002a19d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 25 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffcdaad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 25 03 c0    	mov    DWORD PTR [ebx-0x3ffcdab0],eax
c0006bee:	89 93 54 25 03 c0    	mov    DWORD PTR [ebx-0x3ffcdaac],edx
c0006bf4:	81 c3 40 25 03 c0    	add    ebx,0xc0032540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 25 03 c0       	add    eax,0xc0032550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 ba a1 02 c0       	push   0xc002a1ba
c0006c19:	e8 8a 8b 01 00       	call   c001f7a8 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 20 03 c0       	mov    ds:0xc0032060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 2e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032eb4,0x0
c0006c4e:	a1 ac 2e 03 c0       	mov    eax,ds:0xc0032eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdf80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 c5 a1 02 c0       	push   0xc002a1c5
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 20 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffcdf80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 2e 03 c0       	mov    ds:0xc0032eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 2e 03 c0 00 	cmp    DWORD PTR ds:0xc0032eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 2e 03 c0       	mov    eax,ds:0xc0032eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 20 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffcdf80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 cc a1 02 c0       	push   0xc002a1cc
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 20 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffcdf80]
c0006cec:	bf 80 2e 03 c0       	mov    edi,0xc0032e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 2e 03 c0       	mov    eax,0xc0032e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 2e 03 c0       	mov    ds:0xc0032ea8,eax
c0006d0f:	b8 8a 2e 03 c0       	mov    eax,0xc0032e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 2e 03 c0       	mov    ds:0xc0032ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 d3 a1 02 c0       	push   0xc002a1d3
c0006d30:	e8 73 8a 01 00       	call   c001f7a8 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 de a1 02 c0       	push   0xc002a1de
c0006d4b:	e8 58 8a 01 00       	call   c001f7a8 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 25 03 c0       	push   0xc0032540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 25 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0032540,0xffffffff
c0006d75:	e8 7d 95 00 00       	call   c00102f7 <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 2e 03 c0       	mov    ds:0xc0032eb0,eax
c0006d86:	e8 6c 95 00 00       	call   c00102f7 <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 25 03 c0       	mov    ds:0xc0032520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 57 95 00 00       	call   c00102f7 <malloc>
c0006da0:	89 04 9d 80 20 03 c0 	mov    DWORD PTR [ebx*4-0x3ffcdf80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 3e 95 00 00       	call   c00102f7 <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 20 03 c0 	mov    DWORD PTR [ebx*4-0x3ffcdfe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 20 03 c0 	push   DWORD PTR [ebx*4-0x3ffcdf80]
c0006de6:	e8 1c 95 00 00       	call   c0010307 <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 20 03 c0 	push   DWORD PTR [ebx*4-0x3ffcdfe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 0e 95 00 00       	call   c0010307 <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 2e 03 c0       	mov    eax,ds:0xc0032eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 f4 94 00 00       	call   c0010307 <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 df 94 00 00       	call   c0010307 <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c0006e35:	c7 05 b0 2e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be f0 a1 02 c0       	mov    esi,0xc002a1f0
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 ef a1 02 c0       	mov    al,ds:0xc002a1ef
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	53                   	push   ebx
c0006ee7:	83 ec 14             	sub    esp,0x14
c0006eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006eee:	6a 10                	push   0x10
c0006ef0:	e8 17 6e 00 00       	call   c000dd0c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006ef5:	83 c4 10             	add    esp,0x10
c0006ef8:	84 c0                	test   al,al
c0006efa:	75 12                	jne    c0006f0e <Dbg::logc(char)+0x28>
c0006efc:	ba fd 03 00 00       	mov    edx,0x3fd
c0006f01:	ec                   	in     al,dx
c0006f02:	a8 20                	test   al,0x20
c0006f04:	74 fb                	je     c0006f01 <Dbg::logc(char)+0x1b>
c0006f06:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f0b:	88 d8                	mov    al,bl
c0006f0d:	ee                   	out    dx,al
c0006f0e:	83 c4 08             	add    esp,0x8
c0006f11:	5b                   	pop    ebx
c0006f12:	c3                   	ret    

c0006f13 <Dbg::logs(char*)>:
c0006f13:	53                   	push   ebx
c0006f14:	83 ec 08             	sub    esp,0x8
c0006f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	74 16                	je     c0006f38 <Dbg::logs(char*)+0x25>
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	83 c3 01             	add    ebx,0x1
c0006f28:	50                   	push   eax
c0006f29:	e8 b8 ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f2e:	83 c4 10             	add    esp,0x10
c0006f31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f34:	85 c0                	test   eax,eax
c0006f36:	75 ea                	jne    c0006f22 <Dbg::logs(char*)+0xf>
c0006f38:	83 c4 08             	add    esp,0x8
c0006f3b:	5b                   	pop    ebx
c0006f3c:	c3                   	ret    

c0006f3d <Dbg::logWriteInt(unsigned int)>:
c0006f3d:	83 ec 1c             	sub    esp,0x1c
c0006f40:	6a 0a                	push   0xa
c0006f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f46:	50                   	push   eax
c0006f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f4b:	50                   	push   eax
c0006f4c:	e8 f5 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f51:	50                   	push   eax
c0006f52:	e8 bc ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f57:	83 c4 2c             	add    esp,0x2c
c0006f5a:	c3                   	ret    

c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f5b:	83 ec 1c             	sub    esp,0x1c
c0006f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f62:	50                   	push   eax
c0006f63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f67:	50                   	push   eax
c0006f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f6c:	52                   	push   edx
c0006f6d:	e8 d4 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f72:	50                   	push   eax
c0006f73:	e8 9b ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f78:	83 c4 2c             	add    esp,0x2c
c0006f7b:	c3                   	ret    

c0006f7c <Dbg::kprintf(char const*, ...)>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 1c             	sub    esp,0x1c
c0006f83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f87:	85 db                	test   ebx,ebx
c0006f89:	0f 84 4c 01 00 00    	je     c00070db <Dbg::kprintf(char const*, ...)+0x15f>
c0006f8f:	83 ec 0c             	sub    esp,0xc
c0006f92:	6a 10                	push   0x10
c0006f94:	e8 73 6d 00 00       	call   c000dd0c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f99:	83 c4 10             	add    esp,0x10
c0006f9c:	84 c0                	test   al,al
c0006f9e:	74 08                	je     c0006fa8 <Dbg::kprintf(char const*, ...)+0x2c>
c0006fa0:	83 c4 1c             	add    esp,0x1c
c0006fa3:	5b                   	pop    ebx
c0006fa4:	5e                   	pop    esi
c0006fa5:	5f                   	pop    edi
c0006fa6:	5d                   	pop    ebp
c0006fa7:	c3                   	ret    
c0006fa8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006fac:	31 ff                	xor    edi,edi
c0006fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fb5:	85 c0                	test   eax,eax
c0006fb7:	74 e7                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0006fb9:	8d 77 01             	lea    esi,[edi+0x1]
c0006fbc:	83 f8 25             	cmp    eax,0x25
c0006fbf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fc2:	75 4c                	jne    c0007010 <Dbg::kprintf(char const*, ...)+0x94>
c0006fc4:	83 c7 02             	add    edi,0x2
c0006fc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fca:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fcd:	83 e8 25             	sub    eax,0x25
c0006fd0:	0f b6 c0             	movzx  eax,al
c0006fd3:	83 f8 53             	cmp    eax,0x53
c0006fd6:	0f 87 e1 00 00 00    	ja     c00070bd <Dbg::kprintf(char const*, ...)+0x141>
c0006fdc:	ff 24 85 38 a2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5dc8]
c0006fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fe7:	83 ec 0c             	sub    esp,0xc
c0006fea:	89 c8                	mov    eax,ecx
c0006fec:	83 c1 04             	add    ecx,0x4
c0006fef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ff5:	50                   	push   eax
c0006ff6:	e8 42 ff ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0006ffb:	83 c4 10             	add    esp,0x10
c0006ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007001:	85 c0                	test   eax,eax
c0007003:	74 9b                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0007005:	8d 77 01             	lea    esi,[edi+0x1]
c0007008:	83 f8 25             	cmp    eax,0x25
c000700b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000700e:	74 b4                	je     c0006fc4 <Dbg::kprintf(char const*, ...)+0x48>
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 f7                	mov    edi,esi
c0007015:	50                   	push   eax
c0007016:	89 ee                	mov    esi,ebp
c0007018:	e8 c9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	eb dc                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c0007022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007026:	83 ec 0c             	sub    esp,0xc
c0007029:	89 c8                	mov    eax,ecx
c000702b:	83 c1 04             	add    ecx,0x4
c000702e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007030:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007034:	55                   	push   ebp
c0007035:	e8 d9 fe ff ff       	call   c0006f13 <Dbg::logs(char*)>
c000703a:	83 c4 10             	add    esp,0x10
c000703d:	eb bf                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	89 d0                	mov    eax,edx
c0007048:	83 c2 04             	add    edx,0x4
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007051:	51                   	push   ecx
c0007052:	e8 e6 fe ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	eb a2                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000705c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007060:	83 ec 0c             	sub    esp,0xc
c0007063:	89 d0                	mov    eax,edx
c0007065:	83 c2 04             	add    edx,0x4
c0007068:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000706b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000706f:	50                   	push   eax
c0007070:	e8 71 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007075:	83 c4 10             	add    esp,0x10
c0007078:	eb 84                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000707a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707e:	89 c8                	mov    eax,ecx
c0007080:	83 c1 04             	add    ecx,0x4
c0007083:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	6a 10                	push   0x10
c000708c:	8b 10                	mov    edx,DWORD PTR [eax]
c000708e:	52                   	push   edx
c000708f:	e8 c7 fe ff ff       	call   c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	e9 62 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000709c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070a0:	89 d0                	mov    eax,edx
c00070a2:	83 c2 08             	add    edx,0x8
c00070a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a9:	eb dc                	jmp    c0007087 <Dbg::kprintf(char const*, ...)+0x10b>
c00070ab:	83 ec 0c             	sub    esp,0xc
c00070ae:	6a 25                	push   0x25
c00070b0:	e8 31 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b5:	83 c4 10             	add    esp,0x10
c00070b8:	e9 41 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 25                	push   0x25
c00070c2:	e8 1f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ce:	e8 13 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	e9 23 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070db:	83 ec 0c             	sub    esp,0xc
c00070de:	68 00 a2 02 c0       	push   0xc002a200
c00070e3:	e8 94 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00070e8:	83 c4 10             	add    esp,0x10
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	5b                   	pop    ebx
c00070ef:	5e                   	pop    esi
c00070f0:	5f                   	pop    edi
c00070f1:	5d                   	pop    ebp
c00070f2:	c3                   	ret    
c00070f3:	90                   	nop

c00070f4 <KiUbsanPrintDetails(char const*, void*)>:
c00070f4:	83 ec 1c             	sub    esp,0x1c
c00070f7:	83 ec 08             	sub    esp,0x8
c00070fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070fe:	68 88 a3 02 c0       	push   0xc002a388
c0007103:	e8 74 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007108:	83 c4 10             	add    esp,0x10
c000710b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000710f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007117:	8b 00                	mov    eax,DWORD PTR [eax]
c0007119:	83 ec 08             	sub    esp,0x8
c000711c:	50                   	push   eax
c000711d:	68 9c a3 02 c0       	push   0xc002a39c
c0007122:	e8 55 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007131:	83 ec 08             	sub    esp,0x8
c0007134:	50                   	push   eax
c0007135:	68 a6 a3 02 c0       	push   0xc002a3a6
c000713a:	e8 3d fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000713f:	83 c4 10             	add    esp,0x10
c0007142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007149:	83 ec 08             	sub    esp,0x8
c000714c:	50                   	push   eax
c000714d:	68 b0 a3 02 c0       	push   0xc002a3b0
c0007152:	e8 25 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007157:	83 c4 10             	add    esp,0x10
c000715a:	90                   	nop
c000715b:	83 c4 1c             	add    esp,0x1c
c000715e:	c3                   	ret    
c000715f:	90                   	nop

c0007160 <__ubsan_handle_type_mismatch_v1>:
c0007160:	83 ec 0c             	sub    esp,0xc
c0007163:	83 ec 08             	sub    esp,0x8
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	68 f4 a4 02 c0       	push   0xc002a4f4
c000716f:	e8 80 ff ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007174:	83 c4 10             	add    esp,0x10
c0007177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000717c:	75 16                	jne    c0007194 <__ubsan_handle_type_mismatch_v1+0x34>
c000717e:	83 ec 0c             	sub    esp,0xc
c0007181:	68 ba a3 02 c0       	push   0xc002a3ba
c0007186:	e8 f1 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000718b:	83 c4 10             	add    esp,0x10
c000718e:	e9 91 00 00 00       	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007193:	90                   	nop
c0007194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000719b:	85 c0                	test   eax,eax
c000719d:	74 29                	je     c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c000719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00071a6:	83 e8 01             	sub    eax,0x1
c00071a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00071ad:	75 19                	jne    c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00071af:	83 ec 08             	sub    esp,0x8
c00071b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071b6:	68 14 a5 02 c0       	push   0xc002a514
c00071bb:	e8 bc fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071c0:	83 c4 10             	add    esp,0x10
c00071c3:	eb 5f                	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071c5:	8d 76 00             	lea    esi,[esi+0x0]
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	68 cf a3 02 c0       	push   0xc002a3cf
c00071d0:	e8 a7 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071df:	0f b6 c0             	movzx  eax,al
c00071e2:	83 ec 08             	sub    esp,0x8
c00071e5:	50                   	push   eax
c00071e6:	68 e9 a3 02 c0       	push   0xc002a3e9
c00071eb:	e8 8c fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007208:	0f b6 c0             	movzx  eax,al
c000720b:	8b 04 85 c0 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0940]
c0007212:	51                   	push   ecx
c0007213:	52                   	push   edx
c0007214:	50                   	push   eax
c0007215:	68 3c a5 02 c0       	push   0xc002a53c
c000721a:	e8 5d fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	66 90                	xchg   ax,ax
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	68 f4 a4 02 c0       	push   0xc002a4f4
c000722c:	e8 1b 95 00 00       	call   c001074c <KePanic(char const*)>
c0007231:	83 c4 10             	add    esp,0x10
c0007234:	90                   	nop
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	c3                   	ret    
c0007239:	8d 76 00             	lea    esi,[esi+0x0]

c000723c <__ubsan_handle_pointer_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 84 a5 02 c0       	push   0xc002a584
c000724b:	e8 a4 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 84 a5 02 c0       	push   0xc002a584
c000725b:	e8 ec 94 00 00       	call   c001074c <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_out_of_bounds>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 f4 a3 02 c0       	push   0xc002a3f4
c0007277:	e8 78 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 f4 a3 02 c0       	push   0xc002a3f4
c0007287:	e8 c0 94 00 00       	call   c001074c <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_add_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 11 a4 02 c0       	push   0xc002a411
c00072a3:	e8 4c fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 11 a4 02 c0       	push   0xc002a411
c00072b3:	e8 94 94 00 00       	call   c001074c <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_load_invalid_value>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 a4 a5 02 c0       	push   0xc002a5a4
c00072cf:	e8 20 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 a4 a5 02 c0       	push   0xc002a5a4
c00072df:	e8 68 94 00 00       	call   c001074c <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_divrem_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 c8 a5 02 c0       	push   0xc002a5c8
c00072fb:	e8 f4 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 c8 a5 02 c0       	push   0xc002a5c8
c000730b:	e8 3c 94 00 00       	call   c001074c <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_mul_overflow>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 2d a4 02 c0       	push   0xc002a42d
c0007327:	e8 c8 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 2d a4 02 c0       	push   0xc002a42d
c0007337:	e8 10 94 00 00       	call   c001074c <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_sub_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 49 a4 02 c0       	push   0xc002a449
c0007353:	e8 9c fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 49 a4 02 c0       	push   0xc002a449
c0007363:	e8 e4 93 00 00       	call   c001074c <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <__ubsan_handle_shift_out_of_bounds>:
c0007370:	83 ec 0c             	sub    esp,0xc
c0007373:	83 ec 08             	sub    esp,0x8
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	68 e8 a5 02 c0       	push   0xc002a5e8
c000737f:	e8 70 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007384:	83 c4 10             	add    esp,0x10
c0007387:	83 ec 0c             	sub    esp,0xc
c000738a:	68 e8 a5 02 c0       	push   0xc002a5e8
c000738f:	e8 b8 93 00 00       	call   c001074c <KePanic(char const*)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	90                   	nop
c0007398:	83 c4 0c             	add    esp,0xc
c000739b:	c3                   	ret    

c000739c <__ubsan_handle_negate_overflow>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	83 ec 08             	sub    esp,0x8
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	68 0c a6 02 c0       	push   0xc002a60c
c00073ab:	e8 44 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00073b0:	83 c4 10             	add    esp,0x10
c00073b3:	83 ec 0c             	sub    esp,0xc
c00073b6:	68 0c a6 02 c0       	push   0xc002a60c
c00073bb:	e8 8c 93 00 00       	call   c001074c <KePanic(char const*)>
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	90                   	nop
c00073c4:	83 c4 0c             	add    esp,0xc
c00073c7:	c3                   	ret    

c00073c8 <Hardware::getHumanReadableName()>:
c00073c8:	83 ec 18             	sub    esp,0x18
c00073cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00073d1:	50                   	push   eax
c00073d2:	ff 12                	call   DWORD PTR [edx]
c00073d4:	83 c4 10             	add    esp,0x10
c00073d7:	85 c0                	test   eax,eax
c00073d9:	74 0d                	je     c00073e8 <Hardware::getHumanReadableName()+0x20>
c00073db:	8b 10                	mov    edx,DWORD PTR [eax]
c00073dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00073e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00073e3:	83 c4 0c             	add    esp,0xc
c00073e6:	ff e0                	jmp    eax
c00073e8:	b8 2b a6 02 c0       	mov    eax,0xc002a62b
c00073ed:	83 c4 0c             	add    esp,0xc
c00073f0:	c3                   	ret    

c00073f1 <KeIsPortInUse(unsigned short, int)>:
c00073f1:	83 ec 18             	sub    esp,0x18
c00073f4:	68 3a a6 02 c0       	push   0xc002a63a
c00073f9:	e8 7e fb ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00073fe:	31 c0                	xor    eax,eax
c0007400:	83 c4 1c             	add    esp,0x1c
c0007403:	c3                   	ret    

c0007404 <KeGetRootDevice()>:
c0007404:	a1 b8 2e 03 c0       	mov    eax,ds:0xc0032eb8
c0007409:	c3                   	ret    

c000740a <Hardware::registerIRQ(int)>:
c000740a:	53                   	push   ebx
c000740b:	31 c9                	xor    ecx,ecx
c000740d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007411:	0f b6 42 3c          	movzx  eax,BYTE PTR [edx+0x3c]
c0007415:	89 c3                	mov    ebx,eax
c0007417:	90                   	nop
c0007418:	0f a3 c8             	bt     eax,ecx
c000741b:	72 17                	jb     c0007434 <Hardware::registerIRQ(int)+0x2a>
c000741d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007421:	89 44 8a 2c          	mov    DWORD PTR [edx+ecx*4+0x2c],eax
c0007425:	b8 01 00 00 00       	mov    eax,0x1
c000742a:	d3 e0                	shl    eax,cl
c000742c:	09 d8                	or     eax,ebx
c000742e:	88 42 3c             	mov    BYTE PTR [edx+0x3c],al
c0007431:	eb 09                	jmp    c000743c <Hardware::registerIRQ(int)+0x32>
c0007433:	90                   	nop
c0007434:	41                   	inc    ecx
c0007435:	83 f9 04             	cmp    ecx,0x4
c0007438:	75 de                	jne    c0007418 <Hardware::registerIRQ(int)+0xe>
c000743a:	66 90                	xchg   ax,ax
c000743c:	5b                   	pop    ebx
c000743d:	c3                   	ret    

c000743e <Hardware::deregisterIRQ(int)>:
c000743e:	56                   	push   esi
c000743f:	31 c9                	xor    ecx,ecx
c0007441:	53                   	push   ebx
c0007442:	bb 01 00 00 00       	mov    ebx,0x1
c0007447:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000744b:	90                   	nop
c000744c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007450:	39 44 8a 2c          	cmp    DWORD PTR [edx+ecx*4+0x2c],eax
c0007454:	75 0e                	jne    c0007464 <Hardware::deregisterIRQ(int)+0x26>
c0007456:	8b 72 3c             	mov    esi,DWORD PTR [edx+0x3c]
c0007459:	89 d8                	mov    eax,ebx
c000745b:	d3 e0                	shl    eax,cl
c000745d:	f7 d0                	not    eax
c000745f:	21 f0                	and    eax,esi
c0007461:	88 42 3c             	mov    BYTE PTR [edx+0x3c],al
c0007464:	41                   	inc    ecx
c0007465:	83 f9 04             	cmp    ecx,0x4
c0007468:	75 e2                	jne    c000744c <Hardware::deregisterIRQ(int)+0xe>
c000746a:	5b                   	pop    ebx
c000746b:	5e                   	pop    esi
c000746c:	c3                   	ret    
c000746d:	90                   	nop
c000746e:	66 90                	xchg   ax,ax

c0007470 <Hardware::~Hardware()>:
c0007470:	83 ec 0c             	sub    esp,0xc
c0007473:	ba f4 a7 02 c0       	mov    edx,0xc002a7f4
c0007478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000747c:	89 10                	mov    DWORD PTR [eax],edx
c000747e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007482:	83 c0 74             	add    eax,0x74
c0007485:	83 ec 0c             	sub    esp,0xc
c0007488:	50                   	push   eax
c0007489:	e8 f6 0b 02 00       	call   c0028084 <std::vector<Hardware*>::~vector()>
c000748e:	83 c4 10             	add    esp,0x10
c0007491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007495:	83 c0 18             	add    eax,0x18
c0007498:	83 ec 0c             	sub    esp,0xc
c000749b:	50                   	push   eax
c000749c:	e8 af 0b 02 00       	call   c0028050 <std::vector<DevicePortRange>::~vector()>
c00074a1:	83 c4 10             	add    esp,0x10
c00074a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074a8:	83 c0 04             	add    eax,0x4
c00074ab:	83 ec 0c             	sub    esp,0xc
c00074ae:	50                   	push   eax
c00074af:	e8 68 0b 02 00       	call   c002801c <std::vector<DeviceMemoryRange>::~vector()>
c00074b4:	83 c4 10             	add    esp,0x10
c00074b7:	90                   	nop
c00074b8:	83 c4 0c             	add    esp,0xc
c00074bb:	c3                   	ret    

c00074bc <Hardware::~Hardware()>:
c00074bc:	83 ec 0c             	sub    esp,0xc
c00074bf:	83 ec 0c             	sub    esp,0xc
c00074c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074c6:	e8 a5 ff ff ff       	call   c0007470 <Hardware::~Hardware()>
c00074cb:	83 c4 10             	add    esp,0x10
c00074ce:	83 ec 08             	sub    esp,0x8
c00074d1:	68 88 00 00 00       	push   0x88
c00074d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00074da:	e8 25 69 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c00074df:	83 c4 10             	add    esp,0x10
c00074e2:	83 c4 0c             	add    esp,0xc
c00074e5:	c3                   	ret    
c00074e6:	66 90                	xchg   ax,ax

c00074e8 <Hardware::Hardware()>:
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	ba f4 a7 02 c0       	mov    edx,0xc002a7f4
c00074f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074f4:	89 10                	mov    DWORD PTR [eax],edx
c00074f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074fa:	83 c0 04             	add    eax,0x4
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	50                   	push   eax
c0007501:	e8 02 0c 02 00       	call   c0028108 <std::vector<DeviceMemoryRange>::vector()>
c0007506:	83 c4 10             	add    esp,0x10
c0007509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000750d:	83 c0 18             	add    eax,0x18
c0007510:	83 ec 0c             	sub    esp,0xc
c0007513:	50                   	push   eax
c0007514:	e8 6b 0c 02 00       	call   c0028184 <std::vector<DevicePortRange>::vector()>
c0007519:	83 c4 10             	add    esp,0x10
c000751c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007520:	83 c0 74             	add    eax,0x74
c0007523:	83 ec 0c             	sub    esp,0xc
c0007526:	50                   	push   eax
c0007527:	e8 d4 0c 02 00       	call   c0028200 <std::vector<Hardware*>::vector()>
c000752c:	83 c4 10             	add    esp,0x10
c000752f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007533:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0007537:	90                   	nop
c0007538:	83 c4 0c             	add    esp,0xc
c000753b:	c3                   	ret    

c000753c <KeGetChildOfRootWithName(char const*)>:
c000753c:	57                   	push   edi
c000753d:	56                   	push   esi
c000753e:	53                   	push   ebx
c000753f:	83 ec 10             	sub    esp,0x10
c0007542:	e8 bd fe ff ff       	call   c0007404 <KeGetRootDevice()>
c0007547:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c000754b:	8d 70 74             	lea    esi,[eax+0x74]
c000754e:	57                   	push   edi
c000754f:	57                   	push   edi
c0007550:	56                   	push   esi
c0007551:	53                   	push   ebx
c0007552:	e8 c9 0d 02 00       	call   c0028320 <std::vector<Hardware*>::begin()>
c0007557:	8d 44 24 14          	lea    eax,[esp+0x14]
c000755b:	83 ec 0c             	sub    esp,0xc
c000755e:	56                   	push   esi
c000755f:	50                   	push   eax
c0007560:	e8 df 0d 02 00       	call   c0028344 <std::vector<Hardware*>::end()>
c0007565:	83 c4 1c             	add    esp,0x1c
c0007568:	56                   	push   esi
c0007569:	56                   	push   esi
c000756a:	8d 74 24 10          	lea    esi,[esp+0x10]
c000756e:	56                   	push   esi
c000756f:	53                   	push   ebx
c0007570:	e8 8b 0a 02 00       	call   c0028000 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0007575:	83 c4 10             	add    esp,0x10
c0007578:	84 c0                	test   al,al
c000757a:	74 58                	je     c00075d4 <KeGetChildOfRootWithName(char const*)+0x98>
c000757c:	83 ec 0c             	sub    esp,0xc
c000757f:	53                   	push   ebx
c0007580:	e8 8f 0a 02 00       	call   c0028014 <std::vector<Hardware*>::iterator::operator*() const>
c0007585:	89 c7                	mov    edi,eax
c0007587:	8b 00                	mov    eax,DWORD PTR [eax]
c0007589:	8b 10                	mov    edx,DWORD PTR [eax]
c000758b:	89 04 24             	mov    DWORD PTR [esp],eax
c000758e:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0007591:	5a                   	pop    edx
c0007592:	59                   	pop    ecx
c0007593:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007597:	50                   	push   eax
c0007598:	e8 b3 91 ff ff       	call   c0000750 <strcmp>
c000759d:	83 c4 10             	add    esp,0x10
c00075a0:	85 c0                	test   eax,eax
c00075a2:	75 18                	jne    c00075bc <KeGetChildOfRootWithName(char const*)+0x80>
c00075a4:	83 ec 0c             	sub    esp,0xc
c00075a7:	8b 3f                	mov    edi,DWORD PTR [edi]
c00075a9:	56                   	push   esi
c00075aa:	e8 3d 0a 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00075af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075b2:	e8 35 0a 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00075b7:	83 c4 10             	add    esp,0x10
c00075ba:	eb 30                	jmp    c00075ec <KeGetChildOfRootWithName(char const*)+0xb0>
c00075bc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00075c0:	50                   	push   eax
c00075c1:	50                   	push   eax
c00075c2:	53                   	push   ebx
c00075c3:	56                   	push   esi
c00075c4:	e8 9f 0d 02 00       	call   c0028368 <std::vector<Hardware*>::iterator::operator++()>
c00075c9:	56                   	push   esi
c00075ca:	e8 1d 0a 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00075cf:	83 c4 10             	add    esp,0x10
c00075d2:	eb 94                	jmp    c0007568 <KeGetChildOfRootWithName(char const*)+0x2c>
c00075d4:	83 ec 0c             	sub    esp,0xc
c00075d7:	31 ff                	xor    edi,edi
c00075d9:	56                   	push   esi
c00075da:	e8 0d 0a 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00075df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00075e2:	e8 05 0a 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00075e7:	83 c4 10             	add    esp,0x10
c00075ea:	66 90                	xchg   ax,ax
c00075ec:	83 c4 10             	add    esp,0x10
c00075ef:	89 f8                	mov    eax,edi
c00075f1:	5b                   	pop    ebx
c00075f2:	5e                   	pop    esi
c00075f3:	5f                   	pop    edi
c00075f4:	c3                   	ret    

c00075f5 <KeGetPCIDevice()>:
c00075f5:	83 ec 18             	sub    esp,0x18
c00075f8:	68 5f a6 02 c0       	push   0xc002a65f
c00075fd:	e8 3a ff ff ff       	call   c000753c <KeGetChildOfRootWithName(char const*)>
c0007602:	83 c4 1c             	add    esp,0x1c
c0007605:	c3                   	ret    

c0007606 <KeGetACPIDevice()>:
c0007606:	83 ec 18             	sub    esp,0x18
c0007609:	68 67 a6 02 c0       	push   0xc002a667
c000760e:	e8 29 ff ff ff       	call   c000753c <KeGetChildOfRootWithName(char const*)>
c0007613:	83 c4 1c             	add    esp,0x1c
c0007616:	c3                   	ret    

c0007617 <KeGetISAPnPDevice()>:
c0007617:	83 ec 18             	sub    esp,0x18
c000761a:	68 6c a6 02 c0       	push   0xc002a66c
c000761f:	e8 18 ff ff ff       	call   c000753c <KeGetChildOfRootWithName(char const*)>
c0007624:	83 c4 1c             	add    esp,0x1c
c0007627:	c3                   	ret    

c0007628 <KeGetISADevice()>:
c0007628:	83 ec 18             	sub    esp,0x18
c000762b:	68 82 a6 02 c0       	push   0xc002a682
c0007630:	e8 07 ff ff ff       	call   c000753c <KeGetChildOfRootWithName(char const*)>
c0007635:	83 c4 1c             	add    esp,0x1c
c0007638:	c3                   	ret    
c0007639:	90                   	nop

c000763a <Hardware::printRecursively(int)>:
c000763a:	55                   	push   ebp
c000763b:	57                   	push   edi
c000763c:	56                   	push   esi
c000763d:	31 f6                	xor    esi,esi
c000763f:	53                   	push   ebx
c0007640:	83 ec 6c             	sub    esp,0x6c
c0007643:	8b 9c 24 80 00 00 00 	mov    ebx,DWORD PTR [esp+0x80]
c000764a:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0007651:	8d 76 00             	lea    esi,[esi+0x0]
c0007654:	39 ee                	cmp    esi,ebp
c0007656:	7d 14                	jge    c000766c <Hardware::printRecursively(int)+0x32>
c0007658:	83 ec 0c             	sub    esp,0xc
c000765b:	46                   	inc    esi
c000765c:	68 02 cc 02 c0       	push   0xc002cc02
c0007661:	e8 16 f9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007666:	83 c4 10             	add    esp,0x10
c0007669:	eb e9                	jmp    c0007654 <Hardware::printRecursively(int)+0x1a>
c000766b:	90                   	nop
c000766c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007670:	be 60 a7 02 c0       	mov    esi,0xc002a760
c0007675:	b9 15 00 00 00       	mov    ecx,0x15
c000767a:	fc                   	cld    
c000767b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000767d:	83 ec 0c             	sub    esp,0xc
c0007680:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007682:	53                   	push   ebx
c0007683:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0007686:	89 c6                	mov    esi,eax
c0007688:	8b 03                	mov    eax,DWORD PTR [ebx]
c000768a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000768d:	83 c3 74             	add    ebx,0x74
c0007690:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007693:	83 c4 0c             	add    esp,0xc
c0007696:	6b c0 0c             	imul   eax,eax,0xc
c0007699:	56                   	push   esi
c000769a:	8d 44 04 14          	lea    eax,[esp+eax*1+0x14]
c000769e:	50                   	push   eax
c000769f:	68 8a a6 02 c0       	push   0xc002a68a
c00076a4:	e8 d3 f8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00076a9:	8d 74 24 10          	lea    esi,[esp+0x10]
c00076ad:	5f                   	pop    edi
c00076ae:	58                   	pop    eax
c00076af:	53                   	push   ebx
c00076b0:	56                   	push   esi
c00076b1:	e8 6a 0c 02 00       	call   c0028320 <std::vector<Hardware*>::begin()>
c00076b6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076ba:	83 ec 0c             	sub    esp,0xc
c00076bd:	53                   	push   ebx
c00076be:	57                   	push   edi
c00076bf:	e8 80 0c 02 00       	call   c0028344 <std::vector<Hardware*>::end()>
c00076c4:	83 c4 1c             	add    esp,0x1c
c00076c7:	90                   	nop
c00076c8:	51                   	push   ecx
c00076c9:	51                   	push   ecx
c00076ca:	57                   	push   edi
c00076cb:	56                   	push   esi
c00076cc:	e8 2f 09 02 00       	call   c0028000 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00076d1:	83 c4 10             	add    esp,0x10
c00076d4:	84 c0                	test   al,al
c00076d6:	74 30                	je     c0007708 <Hardware::printRecursively(int)+0xce>
c00076d8:	83 ec 0c             	sub    esp,0xc
c00076db:	56                   	push   esi
c00076dc:	e8 33 09 02 00       	call   c0028014 <std::vector<Hardware*>::iterator::operator*() const>
c00076e1:	5a                   	pop    edx
c00076e2:	8d 55 01             	lea    edx,[ebp+0x1]
c00076e5:	59                   	pop    ecx
c00076e6:	52                   	push   edx
c00076e7:	ff 30                	push   DWORD PTR [eax]
c00076e9:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00076ed:	e8 48 ff ff ff       	call   c000763a <Hardware::printRecursively(int)>
c00076f2:	58                   	pop    eax
c00076f3:	5a                   	pop    edx
c00076f4:	56                   	push   esi
c00076f5:	53                   	push   ebx
c00076f6:	e8 6d 0c 02 00       	call   c0028368 <std::vector<Hardware*>::iterator::operator++()>
c00076fb:	53                   	push   ebx
c00076fc:	e8 eb 08 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0007701:	83 c4 10             	add    esp,0x10
c0007704:	eb c2                	jmp    c00076c8 <Hardware::printRecursively(int)+0x8e>
c0007706:	66 90                	xchg   ax,ax
c0007708:	83 ec 0c             	sub    esp,0xc
c000770b:	57                   	push   edi
c000770c:	e8 db 08 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0007711:	89 34 24             	mov    DWORD PTR [esp],esi
c0007714:	e8 d3 08 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0007719:	83 c4 7c             	add    esp,0x7c
c000771c:	5b                   	pop    ebx
c000771d:	5e                   	pop    esi
c000771e:	5f                   	pop    edi
c000771f:	5d                   	pop    ebp
c0007720:	c3                   	ret    

c0007721 <KePrintDeviceTree()>:
c0007721:	83 ec 18             	sub    esp,0x18
c0007724:	68 91 a6 02 c0       	push   0xc002a691
c0007729:	e8 4e f8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000772e:	58                   	pop    eax
c000772f:	5a                   	pop    edx
c0007730:	6a 00                	push   0x0
c0007732:	ff 35 b8 2e 03 c0    	push   DWORD PTR ds:0xc0032eb8
c0007738:	e8 fd fe ff ff       	call   c000763a <Hardware::printRecursively(int)>
c000773d:	c7 04 24 cc a6 02 c0 	mov    DWORD PTR [esp],0xc002a6cc
c0007744:	e8 33 f8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007749:	83 c4 1c             	add    esp,0x1c
c000774c:	c3                   	ret    
c000774d:	90                   	nop

c000774e <Hardware::detectRecursively()>:
c000774e:	57                   	push   edi
c000774f:	56                   	push   esi
c0007750:	53                   	push   ebx
c0007751:	83 ec 1c             	sub    esp,0x1c
c0007754:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0007758:	68 f9 a6 02 c0       	push   0xc002a6f9
c000775d:	e8 1a f8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007762:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007764:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007767:	ff 10                	call   DWORD PTR [eax]
c0007769:	83 c4 10             	add    esp,0x10
c000776c:	85 c0                	test   eax,eax
c000776e:	74 0c                	je     c000777c <Hardware::detectRecursively()+0x2e>
c0007770:	83 ec 0c             	sub    esp,0xc
c0007773:	8b 10                	mov    edx,DWORD PTR [eax]
c0007775:	50                   	push   eax
c0007776:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007779:	83 c4 10             	add    esp,0x10
c000777c:	8d 74 24 04          	lea    esi,[esp+0x4]
c0007780:	83 c3 74             	add    ebx,0x74
c0007783:	50                   	push   eax
c0007784:	50                   	push   eax
c0007785:	53                   	push   ebx
c0007786:	56                   	push   esi
c0007787:	e8 94 0b 02 00       	call   c0028320 <std::vector<Hardware*>::begin()>
c000778c:	8d 7c 24 14          	lea    edi,[esp+0x14]
c0007790:	83 ec 0c             	sub    esp,0xc
c0007793:	53                   	push   ebx
c0007794:	57                   	push   edi
c0007795:	e8 aa 0b 02 00       	call   c0028344 <std::vector<Hardware*>::end()>
c000779a:	83 c4 1c             	add    esp,0x1c
c000779d:	8d 76 00             	lea    esi,[esi+0x0]
c00077a0:	50                   	push   eax
c00077a1:	50                   	push   eax
c00077a2:	57                   	push   edi
c00077a3:	56                   	push   esi
c00077a4:	e8 57 08 02 00       	call   c0028000 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00077a9:	83 c4 10             	add    esp,0x10
c00077ac:	84 c0                	test   al,al
c00077ae:	74 2c                	je     c00077dc <Hardware::detectRecursively()+0x8e>
c00077b0:	83 ec 0c             	sub    esp,0xc
c00077b3:	56                   	push   esi
c00077b4:	e8 5b 08 02 00       	call   c0028014 <std::vector<Hardware*>::iterator::operator*() const>
c00077b9:	5a                   	pop    edx
c00077ba:	ff 30                	push   DWORD PTR [eax]
c00077bc:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00077c0:	e8 89 ff ff ff       	call   c000774e <Hardware::detectRecursively()>
c00077c5:	59                   	pop    ecx
c00077c6:	58                   	pop    eax
c00077c7:	56                   	push   esi
c00077c8:	53                   	push   ebx
c00077c9:	e8 9a 0b 02 00       	call   c0028368 <std::vector<Hardware*>::iterator::operator++()>
c00077ce:	53                   	push   ebx
c00077cf:	e8 18 08 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00077d4:	83 c4 10             	add    esp,0x10
c00077d7:	eb c7                	jmp    c00077a0 <Hardware::detectRecursively()+0x52>
c00077d9:	8d 76 00             	lea    esi,[esi+0x0]
c00077dc:	83 ec 0c             	sub    esp,0xc
c00077df:	57                   	push   edi
c00077e0:	e8 07 08 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00077e5:	89 34 24             	mov    DWORD PTR [esp],esi
c00077e8:	e8 ff 07 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00077ed:	83 c4 20             	add    esp,0x20
c00077f0:	5b                   	pop    ebx
c00077f1:	5e                   	pop    esi
c00077f2:	5f                   	pop    edi
c00077f3:	c3                   	ret    

c00077f4 <KeSetupDeviceTree()>:
c00077f4:	53                   	push   ebx
c00077f5:	83 ec 14             	sub    esp,0x14
c00077f8:	68 8c 00 00 00       	push   0x8c
c00077fd:	e8 f5 8a 00 00       	call   c00102f7 <malloc>
c0007802:	89 04 24             	mov    DWORD PTR [esp],eax
c0007805:	89 c3                	mov    ebx,eax
c0007807:	e8 70 0a 02 00       	call   c002827c <RootHardware::RootHardware()>
c000780c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000780f:	89 1d b8 2e 03 c0    	mov    DWORD PTR ds:0xc0032eb8,ebx
c0007815:	e8 34 ff ff ff       	call   c000774e <Hardware::detectRecursively()>
c000781a:	58                   	pop    eax
c000781b:	ff 35 b8 2e 03 c0    	push   DWORD PTR ds:0xc0032eb8
c0007821:	e8 28 ff ff ff       	call   c000774e <Hardware::detectRecursively()>
c0007826:	5a                   	pop    edx
c0007827:	a1 b8 2e 03 c0       	mov    eax,ds:0xc0032eb8
c000782c:	ff b0 88 00 00 00    	push   DWORD PTR [eax+0x88]
c0007832:	e8 39 05 00 00       	call   c0007d70 <RootDriver::detectLegacyISA()>
c0007837:	83 c4 18             	add    esp,0x18
c000783a:	5b                   	pop    ebx
c000783b:	c3                   	ret    

c000783c <Hardware::deinitialiseRecursively()>:
c000783c:	55                   	push   ebp
c000783d:	57                   	push   edi
c000783e:	56                   	push   esi
c000783f:	53                   	push   ebx
c0007840:	83 ec 1c             	sub    esp,0x1c
c0007843:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0007847:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c000784b:	8d 6e 74             	lea    ebp,[esi+0x74]
c000784e:	50                   	push   eax
c000784f:	50                   	push   eax
c0007850:	55                   	push   ebp
c0007851:	53                   	push   ebx
c0007852:	e8 c9 0a 02 00       	call   c0028320 <std::vector<Hardware*>::begin()>
c0007857:	8d 7c 24 14          	lea    edi,[esp+0x14]
c000785b:	83 ec 0c             	sub    esp,0xc
c000785e:	55                   	push   ebp
c000785f:	57                   	push   edi
c0007860:	e8 df 0a 02 00       	call   c0028344 <std::vector<Hardware*>::end()>
c0007865:	83 c4 1c             	add    esp,0x1c
c0007868:	50                   	push   eax
c0007869:	50                   	push   eax
c000786a:	57                   	push   edi
c000786b:	53                   	push   ebx
c000786c:	e8 8f 07 02 00       	call   c0028000 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0007871:	83 c4 10             	add    esp,0x10
c0007874:	84 c0                	test   al,al
c0007876:	74 2c                	je     c00078a4 <Hardware::deinitialiseRecursively()+0x68>
c0007878:	83 ec 0c             	sub    esp,0xc
c000787b:	53                   	push   ebx
c000787c:	e8 93 07 02 00       	call   c0028014 <std::vector<Hardware*>::iterator::operator*() const>
c0007881:	5a                   	pop    edx
c0007882:	ff 30                	push   DWORD PTR [eax]
c0007884:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007888:	e8 af ff ff ff       	call   c000783c <Hardware::deinitialiseRecursively()>
c000788d:	59                   	pop    ecx
c000788e:	58                   	pop    eax
c000788f:	53                   	push   ebx
c0007890:	55                   	push   ebp
c0007891:	e8 d2 0a 02 00       	call   c0028368 <std::vector<Hardware*>::iterator::operator++()>
c0007896:	55                   	push   ebp
c0007897:	e8 50 07 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c000789c:	83 c4 10             	add    esp,0x10
c000789f:	eb c7                	jmp    c0007868 <Hardware::deinitialiseRecursively()+0x2c>
c00078a1:	8d 76 00             	lea    esi,[esi+0x0]
c00078a4:	83 ec 0c             	sub    esp,0xc
c00078a7:	57                   	push   edi
c00078a8:	e8 3f 07 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00078ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078b0:	e8 37 07 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00078b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00078b7:	89 34 24             	mov    DWORD PTR [esp],esi
c00078ba:	ff 10                	call   DWORD PTR [eax]
c00078bc:	83 c4 10             	add    esp,0x10
c00078bf:	85 c0                	test   eax,eax
c00078c1:	74 0d                	je     c00078d0 <Hardware::deinitialiseRecursively()+0x94>
c00078c3:	83 ec 0c             	sub    esp,0xc
c00078c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00078c8:	50                   	push   eax
c00078c9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00078cc:	83 c4 10             	add    esp,0x10
c00078cf:	90                   	nop
c00078d0:	83 c4 1c             	add    esp,0x1c
c00078d3:	5b                   	pop    ebx
c00078d4:	5e                   	pop    esi
c00078d5:	5f                   	pop    edi
c00078d6:	5d                   	pop    ebp
c00078d7:	c3                   	ret    

c00078d8 <Hardware::setPowerStateRecursively(DevicePowerState)>:
c00078d8:	55                   	push   ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	83 ec 1c             	sub    esp,0x1c
c00078df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00078e3:	8d 5c 24 04          	lea    ebx,[esp+0x4]
c00078e7:	8d 7e 74             	lea    edi,[esi+0x74]
c00078ea:	55                   	push   ebp
c00078eb:	55                   	push   ebp
c00078ec:	57                   	push   edi
c00078ed:	53                   	push   ebx
c00078ee:	e8 2d 0a 02 00       	call   c0028320 <std::vector<Hardware*>::begin()>
c00078f3:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00078f7:	83 ec 0c             	sub    esp,0xc
c00078fa:	57                   	push   edi
c00078fb:	55                   	push   ebp
c00078fc:	e8 43 0a 02 00       	call   c0028344 <std::vector<Hardware*>::end()>
c0007901:	83 c4 1c             	add    esp,0x1c
c0007904:	51                   	push   ecx
c0007905:	51                   	push   ecx
c0007906:	55                   	push   ebp
c0007907:	53                   	push   ebx
c0007908:	e8 f3 06 02 00       	call   c0028000 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c000790d:	83 c4 10             	add    esp,0x10
c0007910:	84 c0                	test   al,al
c0007912:	74 30                	je     c0007944 <Hardware::setPowerStateRecursively(DevicePowerState)+0x6c>
c0007914:	83 ec 0c             	sub    esp,0xc
c0007917:	53                   	push   ebx
c0007918:	e8 f7 06 02 00       	call   c0028014 <std::vector<Hardware*>::iterator::operator*() const>
c000791d:	59                   	pop    ecx
c000791e:	5f                   	pop    edi
c000791f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007923:	ff 30                	push   DWORD PTR [eax]
c0007925:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007929:	e8 aa ff ff ff       	call   c00078d8 <Hardware::setPowerStateRecursively(DevicePowerState)>
c000792e:	58                   	pop    eax
c000792f:	5a                   	pop    edx
c0007930:	53                   	push   ebx
c0007931:	57                   	push   edi
c0007932:	e8 31 0a 02 00       	call   c0028368 <std::vector<Hardware*>::iterator::operator++()>
c0007937:	57                   	push   edi
c0007938:	e8 af 06 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c000793d:	83 c4 10             	add    esp,0x10
c0007940:	eb c2                	jmp    c0007904 <Hardware::setPowerStateRecursively(DevicePowerState)+0x2c>
c0007942:	66 90                	xchg   ax,ax
c0007944:	83 ec 0c             	sub    esp,0xc
c0007947:	55                   	push   ebp
c0007948:	e8 9f 06 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c000794d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007950:	e8 97 06 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0007955:	8b 06                	mov    eax,DWORD PTR [esi]
c0007957:	89 34 24             	mov    DWORD PTR [esp],esi
c000795a:	ff 10                	call   DWORD PTR [eax]
c000795c:	83 c4 10             	add    esp,0x10
c000795f:	85 c0                	test   eax,eax
c0007961:	74 11                	je     c0007974 <Hardware::setPowerStateRecursively(DevicePowerState)+0x9c>
c0007963:	52                   	push   edx
c0007964:	52                   	push   edx
c0007965:	8b 10                	mov    edx,DWORD PTR [eax]
c0007967:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000796b:	50                   	push   eax
c000796c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000796f:	83 c4 10             	add    esp,0x10
c0007972:	66 90                	xchg   ax,ax
c0007974:	83 c4 1c             	add    esp,0x1c
c0007977:	5b                   	pop    ebx
c0007978:	5e                   	pop    esi
c0007979:	5f                   	pop    edi
c000797a:	5d                   	pop    ebp
c000797b:	c3                   	ret    

c000797c <Hardware::addChild(Hardware*)>:
c000797c:	83 ec 14             	sub    esp,0x14
c000797f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0007983:	50                   	push   eax
c0007984:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007988:	83 c0 74             	add    eax,0x74
c000798b:	50                   	push   eax
c000798c:	e8 d7 0d 02 00       	call   c0028768 <std::vector<Hardware*>::push_back(Hardware* const&)>
c0007991:	83 c4 1c             	add    esp,0x1c
c0007994:	c3                   	ret    
c0007995:	90                   	nop

c0007996 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>:
c0007996:	55                   	push   ebp
c0007997:	57                   	push   edi
c0007998:	56                   	push   esi
c0007999:	53                   	push   ebx
c000799a:	83 ec 28             	sub    esp,0x28
c000799d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00079a1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00079a5:	8b 07                	mov    eax,DWORD PTR [edi]
c00079a7:	57                   	push   edi
c00079a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00079ab:	83 c4 10             	add    esp,0x10
c00079ae:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00079b2:	75 14                	jne    c00079c8 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x32>
c00079b4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00079b8:	56                   	push   esi
c00079b9:	56                   	push   esi
c00079ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00079be:	50                   	push   eax
c00079bf:	55                   	push   ebp
c00079c0:	e8 a3 0d 02 00       	call   c0028768 <std::vector<Hardware*>::push_back(Hardware* const&)>
c00079c5:	83 c4 10             	add    esp,0x10
c00079c8:	8d 74 24 04          	lea    esi,[esp+0x4]
c00079cc:	83 c7 74             	add    edi,0x74
c00079cf:	53                   	push   ebx
c00079d0:	53                   	push   ebx
c00079d1:	57                   	push   edi
c00079d2:	56                   	push   esi
c00079d3:	e8 48 09 02 00       	call   c0028320 <std::vector<Hardware*>::begin()>
c00079d8:	8d 5c 24 14          	lea    ebx,[esp+0x14]
c00079dc:	83 ec 0c             	sub    esp,0xc
c00079df:	57                   	push   edi
c00079e0:	53                   	push   ebx
c00079e1:	e8 5e 09 02 00       	call   c0028344 <std::vector<Hardware*>::end()>
c00079e6:	83 c4 1c             	add    esp,0x1c
c00079e9:	8d 76 00             	lea    esi,[esi+0x0]
c00079ec:	51                   	push   ecx
c00079ed:	51                   	push   ecx
c00079ee:	53                   	push   ebx
c00079ef:	56                   	push   esi
c00079f0:	e8 0b 06 02 00       	call   c0028000 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00079f5:	83 c4 10             	add    esp,0x10
c00079f8:	84 c0                	test   al,al
c00079fa:	74 30                	je     c0007a2c <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x96>
c00079fc:	83 ec 0c             	sub    esp,0xc
c00079ff:	56                   	push   esi
c0007a00:	e8 0f 06 02 00       	call   c0028014 <std::vector<Hardware*>::iterator::operator*() const>
c0007a05:	83 c4 0c             	add    esp,0xc
c0007a08:	55                   	push   ebp
c0007a09:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a0d:	ff 30                	push   DWORD PTR [eax]
c0007a0f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007a13:	e8 7e ff ff ff       	call   c0007996 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>
c0007a18:	58                   	pop    eax
c0007a19:	5a                   	pop    edx
c0007a1a:	56                   	push   esi
c0007a1b:	57                   	push   edi
c0007a1c:	e8 47 09 02 00       	call   c0028368 <std::vector<Hardware*>::iterator::operator++()>
c0007a21:	57                   	push   edi
c0007a22:	e8 c5 05 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0007a27:	83 c4 10             	add    esp,0x10
c0007a2a:	eb c0                	jmp    c00079ec <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)+0x56>
c0007a2c:	83 ec 0c             	sub    esp,0xc
c0007a2f:	53                   	push   ebx
c0007a30:	e8 b7 05 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0007a35:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a38:	e8 af 05 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0007a3d:	83 c4 2c             	add    esp,0x2c
c0007a40:	5b                   	pop    ebx
c0007a41:	5e                   	pop    esi
c0007a42:	5f                   	pop    edi
c0007a43:	5d                   	pop    ebp
c0007a44:	c3                   	ret    

c0007a45 <KeGetHardwareOfType(HardwareType)>:
c0007a45:	53                   	push   ebx
c0007a46:	83 ec 14             	sub    esp,0x14
c0007a49:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007a4d:	53                   	push   ebx
c0007a4e:	e8 ad 07 02 00       	call   c0028200 <std::vector<Hardware*>::vector()>
c0007a53:	83 c4 0c             	add    esp,0xc
c0007a56:	53                   	push   ebx
c0007a57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a5b:	ff 35 b8 2e 03 c0    	push   DWORD PTR ds:0xc0032eb8
c0007a61:	e8 30 ff ff ff       	call   c0007996 <Hardware::getHardwareOfTypeAux(HardwareType, std::vector<Hardware*>&)>
c0007a66:	89 d8                	mov    eax,ebx
c0007a68:	83 c4 18             	add    esp,0x18
c0007a6b:	5b                   	pop    ebx
c0007a6c:	c2 04 00             	ret    0x4
c0007a6f:	90                   	nop

c0007a70 <Hardware::removeChild(Hardware*)>:
c0007a70:	55                   	push   ebp
c0007a71:	57                   	push   edi
c0007a72:	56                   	push   esi
c0007a73:	53                   	push   ebx
c0007a74:	83 ec 2c             	sub    esp,0x2c
c0007a77:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007a7b:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007a7f:	8d 58 74             	lea    ebx,[eax+0x74]
c0007a82:	50                   	push   eax
c0007a83:	50                   	push   eax
c0007a84:	53                   	push   ebx
c0007a85:	56                   	push   esi
c0007a86:	e8 b9 08 02 00       	call   c0028344 <std::vector<Hardware*>::end()>
c0007a8b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007a8f:	83 ec 0c             	sub    esp,0xc
c0007a92:	53                   	push   ebx
c0007a93:	57                   	push   edi
c0007a94:	e8 ab 08 02 00       	call   c0028344 <std::vector<Hardware*>::end()>
c0007a99:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0007a9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007aa0:	55                   	push   ebp
c0007aa1:	e8 7a 08 02 00       	call   c0028320 <std::vector<Hardware*>::begin()>
c0007aa6:	8d 44 24 30          	lea    eax,[esp+0x30]
c0007aaa:	83 c4 1c             	add    esp,0x1c
c0007aad:	8d 54 24 44          	lea    edx,[esp+0x44]
c0007ab1:	52                   	push   edx
c0007ab2:	57                   	push   edi
c0007ab3:	55                   	push   ebp
c0007ab4:	50                   	push   eax
c0007ab5:	e8 c6 09 02 00       	call   c0028480 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c0007aba:	8d 54 24 28          	lea    edx,[esp+0x28]
c0007abe:	83 c4 0c             	add    esp,0xc
c0007ac1:	56                   	push   esi
c0007ac2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007ac6:	50                   	push   eax
c0007ac7:	53                   	push   ebx
c0007ac8:	52                   	push   edx
c0007ac9:	e8 2a 0d 02 00       	call   c00287f8 <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>
c0007ace:	8d 54 24 28          	lea    edx,[esp+0x28]
c0007ad2:	52                   	push   edx
c0007ad3:	e8 14 05 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0007ad8:	5a                   	pop    edx
c0007ad9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007add:	50                   	push   eax
c0007ade:	e8 09 05 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0007ae3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0007ae6:	e8 01 05 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0007aeb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0007aee:	e8 f9 04 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0007af3:	89 34 24             	mov    DWORD PTR [esp],esi
c0007af6:	e8 f1 04 02 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0007afb:	83 c4 3c             	add    esp,0x3c
c0007afe:	5b                   	pop    ebx
c0007aff:	5e                   	pop    esi
c0007b00:	5f                   	pop    edi
c0007b01:	5d                   	pop    ebp
c0007b02:	c3                   	ret    
c0007b03:	90                   	nop

c0007b04 <Hardware::registerMemoryRange(unsigned long, unsigned long)>:
c0007b04:	83 ec 24             	sub    esp,0x24
c0007b07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007b0b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007b0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007b13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b17:	8d 44 24 10          	lea    eax,[esp+0x10]
c0007b1b:	50                   	push   eax
c0007b1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007b20:	83 c0 04             	add    eax,0x4
c0007b23:	50                   	push   eax
c0007b24:	e8 7b 0f 02 00       	call   c0028aa4 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>
c0007b29:	83 c4 2c             	add    esp,0x2c
c0007b2c:	c3                   	ret    
c0007b2d:	90                   	nop

c0007b2e <Hardware::registerPortRange(unsigned short, unsigned char, int)>:
c0007b2e:	53                   	push   ebx
c0007b2f:	83 ec 18             	sub    esp,0x18
c0007b32:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007b36:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007b3a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0007b3e:	83 fa 02             	cmp    edx,0x2
c0007b41:	74 2d                	je     c0007b70 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x42>
c0007b43:	7f 07                	jg     c0007b4c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x1e>
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	4a                   	dec    edx
c0007b48:	eb 12                	jmp    c0007b5c <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x2e>
c0007b4a:	66 90                	xchg   ax,ax
c0007b4c:	83 fa 04             	cmp    edx,0x4
c0007b4f:	74 27                	je     c0007b78 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x4a>
c0007b51:	b8 03 00 00 00       	mov    eax,0x3
c0007b56:	83 fa 08             	cmp    edx,0x8
c0007b59:	8d 76 00             	lea    esi,[esi+0x0]
c0007b5c:	74 22                	je     c0007b80 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x52>
c0007b5e:	83 ec 0c             	sub    esp,0xc
c0007b61:	68 13 a7 02 c0       	push   0xc002a713
c0007b66:	e8 e1 8b 00 00       	call   c001074c <KePanic(char const*)>
c0007b6b:	eb 37                	jmp    c0007ba4 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x76>
c0007b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0007b70:	b8 01 00 00 00       	mov    eax,0x1
c0007b75:	eb 09                	jmp    c0007b80 <Hardware::registerPortRange(unsigned short, unsigned char, int)+0x52>
c0007b77:	90                   	nop
c0007b78:	b8 02 00 00 00       	mov    eax,0x2
c0007b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0007b80:	c1 e0 06             	shl    eax,0x6
c0007b83:	66 89 5c 24 0c       	mov    WORD PTR [esp+0xc],bx
c0007b88:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0007b8c:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
c0007b90:	50                   	push   eax
c0007b91:	50                   	push   eax
c0007b92:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007b96:	50                   	push   eax
c0007b97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007b9b:	83 c0 18             	add    eax,0x18
c0007b9e:	50                   	push   eax
c0007b9f:	e8 b8 10 02 00       	call   c0028c5c <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>
c0007ba4:	83 c4 10             	add    esp,0x10
c0007ba7:	83 c4 18             	add    esp,0x18
c0007baa:	5b                   	pop    ebx
c0007bab:	c3                   	ret    

c0007bac <RootDriver::detect()>:
c0007bac:	90                   	nop
c0007bad:	c3                   	ret    
c0007bae:	66 90                	xchg   ax,ax

c0007bb0 <RootDriver::deinitialise()>:
c0007bb0:	90                   	nop
c0007bb1:	c3                   	ret    
c0007bb2:	66 90                	xchg   ax,ax

c0007bb4 <RootDriver::setPowerState(DevicePowerState)>:
c0007bb4:	90                   	nop
c0007bb5:	c3                   	ret    
c0007bb6:	66 90                	xchg   ax,ax

c0007bb8 <RootDriver::getHumanReadableName()>:
c0007bb8:	b8 08 a8 02 c0       	mov    eax,0xc002a808
c0007bbd:	c3                   	ret    
c0007bbe:	66 90                	xchg   ax,ax

c0007bc0 <RootDriver::hasACPI()>:
c0007bc0:	b0 01                	mov    al,0x1
c0007bc2:	c3                   	ret    
c0007bc3:	90                   	nop

c0007bc4 <RootDriver::hasISAPnP()>:
c0007bc4:	b0 01                	mov    al,0x1
c0007bc6:	c3                   	ret    
c0007bc7:	90                   	nop

c0007bc8 <RootDriver::hasPCI()>:
c0007bc8:	b0 01                	mov    al,0x1
c0007bca:	c3                   	ret    
c0007bcb:	90                   	nop

c0007bcc <RootDriver::initialise()>:
c0007bcc:	56                   	push   esi
c0007bcd:	53                   	push   ebx
c0007bce:	83 ec 34             	sub    esp,0x34
c0007bd1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0007bd5:	e8 e6 ff ff ff       	call   c0007bc0 <RootDriver::hasACPI()>
c0007bda:	83 c4 04             	add    esp,0x4
c0007bdd:	0f b6 c0             	movzx  eax,al
c0007be0:	85 c0                	test   eax,eax
c0007be2:	74 78                	je     c0007c5c <RootDriver::initialise()+0x90>
c0007be4:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c0007bec:	83 ec 0c             	sub    esp,0xc
c0007bef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007bf3:	e8 ff 86 00 00       	call   c00102f7 <malloc>
c0007bf8:	83 c4 10             	add    esp,0x10
c0007bfb:	89 c3                	mov    ebx,eax
c0007bfd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007c03:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007c0a:	83 ec 0c             	sub    esp,0xc
c0007c0d:	53                   	push   ebx
c0007c0e:	e8 0d 12 02 00       	call   c0028e20 <ACPIDriver::ACPIDriver()>
c0007c13:	83 c4 10             	add    esp,0x10
c0007c16:	89 de                	mov    esi,ebx
c0007c18:	c7 44 24 20 8c 00 00 00 	mov    DWORD PTR [esp+0x20],0x8c
c0007c20:	83 ec 0c             	sub    esp,0xc
c0007c23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007c27:	e8 cb 86 00 00       	call   c00102f7 <malloc>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	89 c3                	mov    ebx,eax
c0007c31:	83 ec 08             	sub    esp,0x8
c0007c34:	56                   	push   esi
c0007c35:	53                   	push   ebx
c0007c36:	e8 39 11 02 00       	call   c0028d74 <BusHardware::BusHardware(BusDriver*)>
c0007c3b:	83 c4 10             	add    esp,0x10
c0007c3e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0007c42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007c49:	83 ec 08             	sub    esp,0x8
c0007c4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007c50:	50                   	push   eax
c0007c51:	e8 26 fd ff ff       	call   c000797c <Hardware::addChild(Hardware*)>
c0007c56:	83 c4 10             	add    esp,0x10
c0007c59:	8d 76 00             	lea    esi,[esi+0x0]
c0007c5c:	83 ec 0c             	sub    esp,0xc
c0007c5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007c63:	e8 60 ff ff ff       	call   c0007bc8 <RootDriver::hasPCI()>
c0007c68:	83 c4 10             	add    esp,0x10
c0007c6b:	0f b6 c0             	movzx  eax,al
c0007c6e:	85 c0                	test   eax,eax
c0007c70:	74 76                	je     c0007ce8 <RootDriver::initialise()+0x11c>
c0007c72:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0007c7a:	83 ec 0c             	sub    esp,0xc
c0007c7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007c81:	e8 71 86 00 00       	call   c00102f7 <malloc>
c0007c86:	83 c4 10             	add    esp,0x10
c0007c89:	89 c3                	mov    ebx,eax
c0007c8b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007c91:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007c98:	83 ec 0c             	sub    esp,0xc
c0007c9b:	53                   	push   ebx
c0007c9c:	e8 a3 11 02 00       	call   c0028e44 <PCIDriver::PCIDriver()>
c0007ca1:	83 c4 10             	add    esp,0x10
c0007ca4:	89 de                	mov    esi,ebx
c0007ca6:	c7 44 24 18 8c 00 00 00 	mov    DWORD PTR [esp+0x18],0x8c
c0007cae:	83 ec 0c             	sub    esp,0xc
c0007cb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007cb5:	e8 3d 86 00 00       	call   c00102f7 <malloc>
c0007cba:	83 c4 10             	add    esp,0x10
c0007cbd:	89 c3                	mov    ebx,eax
c0007cbf:	83 ec 08             	sub    esp,0x8
c0007cc2:	56                   	push   esi
c0007cc3:	53                   	push   ebx
c0007cc4:	e8 ab 10 02 00       	call   c0028d74 <BusHardware::BusHardware(BusDriver*)>
c0007cc9:	83 c4 10             	add    esp,0x10
c0007ccc:	89 5c 24 28          	mov    DWORD PTR [esp+0x28],ebx
c0007cd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007cd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007cd7:	83 ec 08             	sub    esp,0x8
c0007cda:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007cde:	50                   	push   eax
c0007cdf:	e8 98 fc ff ff       	call   c000797c <Hardware::addChild(Hardware*)>
c0007ce4:	83 c4 10             	add    esp,0x10
c0007ce7:	90                   	nop
c0007ce8:	83 ec 0c             	sub    esp,0xc
c0007ceb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0007cef:	e8 d0 fe ff ff       	call   c0007bc4 <RootDriver::hasISAPnP()>
c0007cf4:	83 c4 10             	add    esp,0x10
c0007cf7:	0f b6 c0             	movzx  eax,al
c0007cfa:	85 c0                	test   eax,eax
c0007cfc:	74 6a                	je     c0007d68 <RootDriver::initialise()+0x19c>
c0007cfe:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0007d06:	83 ec 0c             	sub    esp,0xc
c0007d09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007d0d:	e8 e5 85 00 00       	call   c00102f7 <malloc>
c0007d12:	83 c4 10             	add    esp,0x10
c0007d15:	89 c3                	mov    ebx,eax
c0007d17:	83 ec 0c             	sub    esp,0xc
c0007d1a:	53                   	push   ebx
c0007d1b:	e8 bc 10 02 00       	call   c0028ddc <ISAPnPDriver::ISAPnPDriver()>
c0007d20:	83 c4 10             	add    esp,0x10
c0007d23:	89 de                	mov    esi,ebx
c0007d25:	c7 44 24 10 8c 00 00 00 	mov    DWORD PTR [esp+0x10],0x8c
c0007d2d:	83 ec 0c             	sub    esp,0xc
c0007d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d34:	e8 be 85 00 00       	call   c00102f7 <malloc>
c0007d39:	83 c4 10             	add    esp,0x10
c0007d3c:	89 c3                	mov    ebx,eax
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	56                   	push   esi
c0007d42:	53                   	push   ebx
c0007d43:	e8 2c 10 02 00       	call   c0028d74 <BusHardware::BusHardware(BusDriver*)>
c0007d48:	83 c4 10             	add    esp,0x10
c0007d4b:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0007d4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007d53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d56:	83 ec 08             	sub    esp,0x8
c0007d59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007d5d:	50                   	push   eax
c0007d5e:	e8 19 fc ff ff       	call   c000797c <Hardware::addChild(Hardware*)>
c0007d63:	83 c4 10             	add    esp,0x10
c0007d66:	66 90                	xchg   ax,ax
c0007d68:	90                   	nop
c0007d69:	83 c4 34             	add    esp,0x34
c0007d6c:	5b                   	pop    ebx
c0007d6d:	5e                   	pop    esi
c0007d6e:	c3                   	ret    
c0007d6f:	90                   	nop

c0007d70 <RootDriver::detectLegacyISA()>:
c0007d70:	56                   	push   esi
c0007d71:	53                   	push   ebx
c0007d72:	83 ec 14             	sub    esp,0x14
c0007d75:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0007d7d:	83 ec 0c             	sub    esp,0xc
c0007d80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d84:	e8 6e 85 00 00       	call   c00102f7 <malloc>
c0007d89:	83 c4 10             	add    esp,0x10
c0007d8c:	89 c3                	mov    ebx,eax
c0007d8e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0007d94:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0007d9b:	83 ec 0c             	sub    esp,0xc
c0007d9e:	53                   	push   ebx
c0007d9f:	e8 c4 10 02 00       	call   c0028e68 <ISADriver::ISADriver()>
c0007da4:	83 c4 10             	add    esp,0x10
c0007da7:	89 de                	mov    esi,ebx
c0007da9:	c7 44 24 08 8c 00 00 00 	mov    DWORD PTR [esp+0x8],0x8c
c0007db1:	83 ec 0c             	sub    esp,0xc
c0007db4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007db8:	e8 3a 85 00 00       	call   c00102f7 <malloc>
c0007dbd:	83 c4 10             	add    esp,0x10
c0007dc0:	89 c3                	mov    ebx,eax
c0007dc2:	83 ec 08             	sub    esp,0x8
c0007dc5:	56                   	push   esi
c0007dc6:	53                   	push   ebx
c0007dc7:	e8 a8 0f 02 00       	call   c0028d74 <BusHardware::BusHardware(BusDriver*)>
c0007dcc:	83 c4 10             	add    esp,0x10
c0007dcf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0007dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007dd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007dda:	83 ec 08             	sub    esp,0x8
c0007ddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007de1:	50                   	push   eax
c0007de2:	e8 95 fb ff ff       	call   c000797c <Hardware::addChild(Hardware*)>
c0007de7:	83 c4 10             	add    esp,0x10
c0007dea:	90                   	nop
c0007deb:	83 c4 14             	add    esp,0x14
c0007dee:	5b                   	pop    ebx
c0007def:	5e                   	pop    esi
c0007df0:	c3                   	ret    

c0007df1 <KiIsHashInTable(unsigned short)>:
c0007df1:	0f b7 d0             	movzx  edx,ax
c0007df4:	83 e0 07             	and    eax,0x7
c0007df7:	c1 fa 03             	sar    edx,0x3
c0007dfa:	88 c1                	mov    cl,al
c0007dfc:	0f b6 92 00 33 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffccd00]
c0007e03:	d3 fa                	sar    edx,cl
c0007e05:	89 d0                	mov    eax,edx
c0007e07:	83 e0 01             	and    eax,0x1
c0007e0a:	c3                   	ret    

c0007e0b <KiSetHashInTable(unsigned short, bool)>:
c0007e0b:	56                   	push   esi
c0007e0c:	53                   	push   ebx
c0007e0d:	0f b7 d8             	movzx  ebx,ax
c0007e10:	83 e0 07             	and    eax,0x7
c0007e13:	c1 fb 03             	sar    ebx,0x3
c0007e16:	89 c1                	mov    ecx,eax
c0007e18:	0f b6 b3 00 33 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffccd00]
c0007e1f:	b8 01 00 00 00       	mov    eax,0x1
c0007e24:	d3 e0                	shl    eax,cl
c0007e26:	84 d2                	test   dl,dl
c0007e28:	74 04                	je     c0007e2e <KiSetHashInTable(unsigned short, bool)+0x23>
c0007e2a:	09 f0                	or     eax,esi
c0007e2c:	eb 04                	jmp    c0007e32 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007e2e:	f7 d0                	not    eax
c0007e30:	21 f0                	and    eax,esi
c0007e32:	88 83 00 33 03 c0    	mov    BYTE PTR [ebx-0x3ffccd00],al
c0007e38:	5b                   	pop    ebx
c0007e39:	5e                   	pop    esi
c0007e3a:	c3                   	ret    

c0007e3b <KiFlushSymlinkChanges()>:
c0007e3b:	57                   	push   edi
c0007e3c:	56                   	push   esi
c0007e3d:	53                   	push   ebx
c0007e3e:	83 ec 1c             	sub    esp,0x1c
c0007e41:	68 14 01 00 00       	push   0x114
c0007e46:	e8 ac 84 00 00       	call   c00102f7 <malloc>
c0007e4b:	83 c4 0c             	add    esp,0xc
c0007e4e:	89 c3                	mov    ebx,eax
c0007e50:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c0007e56:	68 68 a8 02 c0       	push   0xc002a868
c0007e5b:	50                   	push   eax
c0007e5c:	e8 53 0d 00 00       	call   c0008bb4 <File::File(char const*, Process*)>
c0007e61:	83 c4 10             	add    esp,0x10
c0007e64:	85 db                	test   ebx,ebx
c0007e66:	75 10                	jne    c0007e78 <KiFlushSymlinkChanges()+0x3d>
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	68 86 a8 02 c0       	push   0xc002a886
c0007e70:	e8 d7 88 00 00       	call   c001074c <KePanic(char const*)>
c0007e75:	83 c4 10             	add    esp,0x10
c0007e78:	50                   	push   eax
c0007e79:	50                   	push   eax
c0007e7a:	6a 06                	push   0x6
c0007e7c:	53                   	push   ebx
c0007e7d:	e8 50 0d 00 00       	call   c0008bd2 <File::open(FileOpenMode)>
c0007e82:	83 c4 10             	add    esp,0x10
c0007e85:	85 c0                	test   eax,eax
c0007e87:	74 10                	je     c0007e99 <KiFlushSymlinkChanges()+0x5e>
c0007e89:	83 ec 0c             	sub    esp,0xc
c0007e8c:	68 a0 a8 02 c0       	push   0xc002a8a0
c0007e91:	e8 b6 88 00 00       	call   c001074c <KePanic(char const*)>
c0007e96:	83 c4 10             	add    esp,0x10
c0007e99:	31 f6                	xor    esi,esi
c0007e9b:	39 35 c0 2e 03 c0    	cmp    DWORD PTR ds:0xc0032ec0,esi
c0007ea1:	7e 70                	jle    c0007f13 <KiFlushSymlinkChanges()+0xd8>
c0007ea3:	83 ec 0c             	sub    esp,0xc
c0007ea6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007ea8:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007eac:	89 f0                	mov    eax,esi
c0007eae:	57                   	push   edi
c0007eaf:	c1 e0 08             	shl    eax,0x8
c0007eb2:	05 00 2f 03 c0       	add    eax,0xc0032f00
c0007eb7:	50                   	push   eax
c0007eb8:	6a 00                	push   0x0
c0007eba:	68 00 01 00 00       	push   0x100
c0007ebf:	53                   	push   ebx
c0007ec0:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007ec3:	83 c4 20             	add    esp,0x20
c0007ec6:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007ece:	74 10                	je     c0007ee0 <KiFlushSymlinkChanges()+0xa5>
c0007ed0:	83 ec 0c             	sub    esp,0xc
c0007ed3:	68 ba a8 02 c0       	push   0xc002a8ba
c0007ed8:	e8 6f 88 00 00       	call   c001074c <KePanic(char const*)>
c0007edd:	83 c4 10             	add    esp,0x10
c0007ee0:	83 ec 0c             	sub    esp,0xc
c0007ee3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ee5:	8d 14 f5 e0 2e 03 c0 	lea    edx,[esi*8-0x3ffcd120]
c0007eec:	57                   	push   edi
c0007eed:	52                   	push   edx
c0007eee:	6a 00                	push   0x0
c0007ef0:	6a 08                	push   0x8
c0007ef2:	53                   	push   ebx
c0007ef3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ef6:	83 c4 20             	add    esp,0x20
c0007ef9:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007efe:	74 10                	je     c0007f10 <KiFlushSymlinkChanges()+0xd5>
c0007f00:	83 ec 0c             	sub    esp,0xc
c0007f03:	68 d4 a8 02 c0       	push   0xc002a8d4
c0007f08:	e8 3f 88 00 00       	call   c001074c <KePanic(char const*)>
c0007f0d:	83 c4 10             	add    esp,0x10
c0007f10:	46                   	inc    esi
c0007f11:	eb 88                	jmp    c0007e9b <KiFlushSymlinkChanges()+0x60>
c0007f13:	83 ec 0c             	sub    esp,0xc
c0007f16:	53                   	push   ebx
c0007f17:	e8 14 0d 00 00       	call   c0008c30 <File::close()>
c0007f1c:	83 c4 10             	add    esp,0x10
c0007f1f:	85 db                	test   ebx,ebx
c0007f21:	74 0c                	je     c0007f2f <KiFlushSymlinkChanges()+0xf4>
c0007f23:	83 ec 0c             	sub    esp,0xc
c0007f26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007f28:	53                   	push   ebx
c0007f29:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007f2c:	83 c4 10             	add    esp,0x10
c0007f2f:	c7 05 c0 2e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032ec0,0x0
c0007f39:	83 c4 10             	add    esp,0x10
c0007f3c:	5b                   	pop    ebx
c0007f3d:	5e                   	pop    esi
c0007f3e:	5f                   	pop    edi
c0007f3f:	c3                   	ret    

c0007f40 <KiDeinitialiseSymlinks(void*)>:
c0007f40:	e9 f6 fe ff ff       	jmp    c0007e3b <KiFlushSymlinkChanges()>

c0007f45 <KiGetSymlinkHash(char const*)>:
c0007f45:	53                   	push   ebx
c0007f46:	89 c3                	mov    ebx,eax
c0007f48:	83 ec 14             	sub    esp,0x14
c0007f4b:	50                   	push   eax
c0007f4c:	e8 1f 86 ff ff       	call   c0000570 <strlen>
c0007f51:	5a                   	pop    edx
c0007f52:	59                   	pop    ecx
c0007f53:	50                   	push   eax
c0007f54:	53                   	push   ebx
c0007f55:	e8 6d 6c 00 00       	call   c000ebc7 <KeCalculateCRC32(unsigned char*, int)>
c0007f5a:	83 c4 18             	add    esp,0x18
c0007f5d:	89 c2                	mov    edx,eax
c0007f5f:	5b                   	pop    ebx
c0007f60:	c1 ea 10             	shr    edx,0x10
c0007f63:	31 d0                	xor    eax,edx
c0007f65:	c3                   	ret    

c0007f66 <KiCreateSymlinkID()>:
c0007f66:	55                   	push   ebp
c0007f67:	57                   	push   edi
c0007f68:	56                   	push   esi
c0007f69:	53                   	push   ebx
c0007f6a:	31 db                	xor    ebx,ebx
c0007f6c:	83 ec 1c             	sub    esp,0x1c
c0007f6f:	e8 b8 91 00 00       	call   c001112c <KeRand()>
c0007f74:	43                   	inc    ebx
c0007f75:	8b 2d 00 53 03 c0    	mov    ebp,DWORD PTR ds:0xc0035300
c0007f7b:	31 d2                	xor    edx,edx
c0007f7d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007f80:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007f84:	89 0d 00 53 03 c0    	mov    DWORD PTR ds:0xc0035300,ecx
c0007f8a:	c1 e0 1f             	shl    eax,0x1f
c0007f8d:	89 d7                	mov    edi,edx
c0007f8f:	89 c6                	mov    esi,eax
c0007f91:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007f95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f9d:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007fa3:	75 10                	jne    c0007fb5 <KiCreateSymlinkID()+0x4f>
c0007fa5:	83 ec 0c             	sub    esp,0xc
c0007fa8:	68 ee a8 02 c0       	push   0xc002a8ee
c0007fad:	e8 9a 87 00 00       	call   c001074c <KePanic(char const*)>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007fb9:	75 04                	jne    c0007fbf <KiCreateSymlinkID()+0x59>
c0007fbb:	39 f5                	cmp    ebp,esi
c0007fbd:	74 b0                	je     c0007f6f <KiCreateSymlinkID()+0x9>
c0007fbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007fc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007fc7:	31 f0                	xor    eax,esi
c0007fc9:	83 c4 1c             	add    esp,0x1c
c0007fcc:	31 fa                	xor    edx,edi
c0007fce:	5b                   	pop    ebx
c0007fcf:	5e                   	pop    esi
c0007fd0:	5f                   	pop    edi
c0007fd1:	5d                   	pop    ebp
c0007fd2:	c3                   	ret    

c0007fd3 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007fd3:	53                   	push   ebx
c0007fd4:	83 ec 0c             	sub    esp,0xc
c0007fd7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007fdb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007fdf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007fe3:	a1 c0 2e 03 c0       	mov    eax,ds:0xc0032ec0
c0007fe8:	68 00 01 00 00       	push   0x100
c0007fed:	89 0c c5 e4 2e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd11c],ecx
c0007ff4:	6a 00                	push   0x0
c0007ff6:	89 14 c5 e0 2e 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd120],edx
c0007ffd:	c1 e0 08             	shl    eax,0x8
c0008000:	05 00 2f 03 c0       	add    eax,0xc0032f00
c0008005:	50                   	push   eax
c0008006:	e8 e5 84 ff ff       	call   c00004f0 <memset>
c000800b:	58                   	pop    eax
c000800c:	a1 c0 2e 03 c0       	mov    eax,ds:0xc0032ec0
c0008011:	5a                   	pop    edx
c0008012:	c1 e0 08             	shl    eax,0x8
c0008015:	53                   	push   ebx
c0008016:	05 00 2f 03 c0       	add    eax,0xc0032f00
c000801b:	50                   	push   eax
c000801c:	e8 1f 86 ff ff       	call   c0000640 <strcpy>
c0008021:	89 d8                	mov    eax,ebx
c0008023:	e8 1d ff ff ff       	call   c0007f45 <KiGetSymlinkHash(char const*)>
c0008028:	ba 01 00 00 00       	mov    edx,0x1
c000802d:	0f b7 c0             	movzx  eax,ax
c0008030:	e8 d6 fd ff ff       	call   c0007e0b <KiSetHashInTable(unsigned short, bool)>
c0008035:	a1 c0 2e 03 c0       	mov    eax,ds:0xc0032ec0
c000803a:	83 c4 10             	add    esp,0x10
c000803d:	40                   	inc    eax
c000803e:	a3 c0 2e 03 c0       	mov    ds:0xc0032ec0,eax
c0008043:	83 f8 03             	cmp    eax,0x3
c0008046:	7e 09                	jle    c0008051 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0008048:	83 c4 08             	add    esp,0x8
c000804b:	5b                   	pop    ebx
c000804c:	e9 ea fd ff ff       	jmp    c0007e3b <KiFlushSymlinkChanges()>
c0008051:	83 c4 08             	add    esp,0x8
c0008054:	5b                   	pop    ebx
c0008055:	c3                   	ret    

c0008056 <KeInitialiseSymlinks()>:
c0008056:	57                   	push   edi
c0008057:	56                   	push   esi
c0008058:	53                   	push   ebx
c0008059:	81 ec 14 01 00 00    	sub    esp,0x114
c000805f:	c7 05 00 53 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035300,0x0
c0008069:	68 00 20 00 00       	push   0x2000
c000806e:	c7 05 c0 2e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032ec0,0x0
c0008078:	6a 00                	push   0x0
c000807a:	68 00 33 03 c0       	push   0xc0033300
c000807f:	e8 6c 84 ff ff       	call   c00004f0 <memset>
c0008084:	59                   	pop    ecx
c0008085:	5b                   	pop    ebx
c0008086:	6a 00                	push   0x0
c0008088:	68 40 7f 00 c0       	push   0xc0007f40
c000808d:	e8 0a 5c 00 00       	call   c000dc9c <KeRegisterAtexit(void (*)(void*), void*)>
c0008092:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0008099:	e8 59 82 00 00       	call   c00102f7 <malloc>
c000809e:	83 c4 0c             	add    esp,0xc
c00080a1:	89 c3                	mov    ebx,eax
c00080a3:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c00080a9:	68 68 a8 02 c0       	push   0xc002a868
c00080ae:	50                   	push   eax
c00080af:	e8 00 0b 00 00       	call   c0008bb4 <File::File(char const*, Process*)>
c00080b4:	83 c4 10             	add    esp,0x10
c00080b7:	85 db                	test   ebx,ebx
c00080b9:	75 10                	jne    c00080cb <KeInitialiseSymlinks()+0x75>
c00080bb:	83 ec 0c             	sub    esp,0xc
c00080be:	68 f7 a8 02 c0       	push   0xc002a8f7
c00080c3:	e8 84 86 00 00       	call   c001074c <KePanic(char const*)>
c00080c8:	83 c4 10             	add    esp,0x10
c00080cb:	83 ec 0c             	sub    esp,0xc
c00080ce:	53                   	push   ebx
c00080cf:	e8 c2 0d 00 00       	call   c0008e96 <File::exists()>
c00080d4:	83 c4 10             	add    esp,0x10
c00080d7:	84 c0                	test   al,al
c00080d9:	75 3a                	jne    c0008115 <KeInitialiseSymlinks()+0xbf>
c00080db:	52                   	push   edx
c00080dc:	52                   	push   edx
c00080dd:	6a 12                	push   0x12
c00080df:	53                   	push   ebx
c00080e0:	e8 ed 0a 00 00       	call   c0008bd2 <File::open(FileOpenMode)>
c00080e5:	83 c4 10             	add    esp,0x10
c00080e8:	85 c0                	test   eax,eax
c00080ea:	74 10                	je     c00080fc <KeInitialiseSymlinks()+0xa6>
c00080ec:	83 ec 0c             	sub    esp,0xc
c00080ef:	68 14 a9 02 c0       	push   0xc002a914
c00080f4:	e8 53 86 00 00       	call   c001074c <KePanic(char const*)>
c00080f9:	83 c4 10             	add    esp,0x10
c00080fc:	83 ec 0c             	sub    esp,0xc
c00080ff:	53                   	push   ebx
c0008100:	e8 2b 0b 00 00       	call   c0008c30 <File::close()>
c0008105:	83 c4 10             	add    esp,0x10
c0008108:	85 db                	test   ebx,ebx
c000810a:	0f 84 9e 00 00 00    	je     c00081ae <KeInitialiseSymlinks()+0x158>
c0008110:	e9 8d 00 00 00       	jmp    c00081a2 <KeInitialiseSymlinks()+0x14c>
c0008115:	50                   	push   eax
c0008116:	50                   	push   eax
c0008117:	6a 01                	push   0x1
c0008119:	53                   	push   ebx
c000811a:	e8 b3 0a 00 00       	call   c0008bd2 <File::open(FileOpenMode)>
c000811f:	83 c4 10             	add    esp,0x10
c0008122:	85 c0                	test   eax,eax
c0008124:	74 10                	je     c0008136 <KeInitialiseSymlinks()+0xe0>
c0008126:	83 ec 0c             	sub    esp,0xc
c0008129:	68 31 a9 02 c0       	push   0xc002a931
c000812e:	e8 19 86 00 00       	call   c001074c <KePanic(char const*)>
c0008133:	83 c4 10             	add    esp,0x10
c0008136:	83 ec 0c             	sub    esp,0xc
c0008139:	ff 05 00 53 03 c0    	inc    DWORD PTR ds:0xc0035300
c000813f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0008143:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008145:	57                   	push   edi
c0008146:	8d 74 24 20          	lea    esi,[esp+0x20]
c000814a:	56                   	push   esi
c000814b:	6a 00                	push   0x0
c000814d:	68 00 01 00 00       	push   0x100
c0008152:	53                   	push   ebx
c0008153:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008156:	83 c4 20             	add    esp,0x20
c0008159:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0008161:	75 33                	jne    c0008196 <KeInitialiseSymlinks()+0x140>
c0008163:	83 ec 0c             	sub    esp,0xc
c0008166:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008168:	57                   	push   edi
c0008169:	8d 54 24 18          	lea    edx,[esp+0x18]
c000816d:	52                   	push   edx
c000816e:	6a 00                	push   0x0
c0008170:	6a 08                	push   0x8
c0008172:	53                   	push   ebx
c0008173:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000817e:	75 16                	jne    c0008196 <KeInitialiseSymlinks()+0x140>
c0008180:	89 f0                	mov    eax,esi
c0008182:	e8 be fd ff ff       	call   c0007f45 <KiGetSymlinkHash(char const*)>
c0008187:	ba 01 00 00 00       	mov    edx,0x1
c000818c:	0f b7 c0             	movzx  eax,ax
c000818f:	e8 77 fc ff ff       	call   c0007e0b <KiSetHashInTable(unsigned short, bool)>
c0008194:	eb a0                	jmp    c0008136 <KeInitialiseSymlinks()+0xe0>
c0008196:	83 ec 0c             	sub    esp,0xc
c0008199:	53                   	push   ebx
c000819a:	e8 91 0a 00 00       	call   c0008c30 <File::close()>
c000819f:	83 c4 10             	add    esp,0x10
c00081a2:	83 ec 0c             	sub    esp,0xc
c00081a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00081a7:	53                   	push   ebx
c00081a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00081ab:	83 c4 10             	add    esp,0x10
c00081ae:	81 c4 10 01 00 00    	add    esp,0x110
c00081b4:	5b                   	pop    ebx
c00081b5:	5e                   	pop    esi
c00081b6:	5f                   	pop    edi
c00081b7:	c3                   	ret    

c00081b8 <KiIsSymlinkRegistered(char const*)>:
c00081b8:	55                   	push   ebp
c00081b9:	57                   	push   edi
c00081ba:	56                   	push   esi
c00081bb:	53                   	push   ebx
c00081bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00081c2:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00081c9:	89 f0                	mov    eax,esi
c00081cb:	e8 75 fd ff ff       	call   c0007f45 <KiGetSymlinkHash(char const*)>
c00081d0:	0f b7 c0             	movzx  eax,ax
c00081d3:	e8 19 fc ff ff       	call   c0007df1 <KiIsHashInTable(unsigned short)>
c00081d8:	31 d2                	xor    edx,edx
c00081da:	88 c1                	mov    cl,al
c00081dc:	31 c0                	xor    eax,eax
c00081de:	84 c9                	test   cl,cl
c00081e0:	0f 84 31 01 00 00    	je     c0008317 <KiIsSymlinkRegistered(char const*)+0x15f>
c00081e6:	31 db                	xor    ebx,ebx
c00081e8:	39 1d c0 2e 03 c0    	cmp    DWORD PTR ds:0xc0032ec0,ebx
c00081ee:	7e 30                	jle    c0008220 <KiIsSymlinkRegistered(char const*)+0x68>
c00081f0:	89 d8                	mov    eax,ebx
c00081f2:	51                   	push   ecx
c00081f3:	c1 e0 08             	shl    eax,0x8
c00081f6:	51                   	push   ecx
c00081f7:	05 00 2f 03 c0       	add    eax,0xc0032f00
c00081fc:	50                   	push   eax
c00081fd:	56                   	push   esi
c00081fe:	e8 4d 85 ff ff       	call   c0000750 <strcmp>
c0008203:	83 c4 10             	add    esp,0x10
c0008206:	85 c0                	test   eax,eax
c0008208:	75 13                	jne    c000821d <KiIsSymlinkRegistered(char const*)+0x65>
c000820a:	8b 04 dd e0 2e 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffcd120]
c0008211:	8b 14 dd e4 2e 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffcd11c]
c0008218:	e9 fa 00 00 00       	jmp    c0008317 <KiIsSymlinkRegistered(char const*)+0x15f>
c000821d:	43                   	inc    ebx
c000821e:	eb c8                	jmp    c00081e8 <KiIsSymlinkRegistered(char const*)+0x30>
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	68 14 01 00 00       	push   0x114
c0008228:	e8 ca 80 00 00       	call   c00102f7 <malloc>
c000822d:	83 c4 0c             	add    esp,0xc
c0008230:	89 c3                	mov    ebx,eax
c0008232:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c0008238:	68 68 a8 02 c0       	push   0xc002a868
c000823d:	50                   	push   eax
c000823e:	e8 71 09 00 00       	call   c0008bb4 <File::File(char const*, Process*)>
c0008243:	83 c4 10             	add    esp,0x10
c0008246:	85 db                	test   ebx,ebx
c0008248:	75 12                	jne    c000825c <KiIsSymlinkRegistered(char const*)+0xa4>
c000824a:	83 ec 0c             	sub    esp,0xc
c000824d:	68 4c a9 02 c0       	push   0xc002a94c
c0008252:	e8 f5 84 00 00       	call   c001074c <KePanic(char const*)>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	eb 10                	jmp    c000826c <KiIsSymlinkRegistered(char const*)+0xb4>
c000825c:	83 ec 0c             	sub    esp,0xc
c000825f:	53                   	push   ebx
c0008260:	e8 31 0c 00 00       	call   c0008e96 <File::exists()>
c0008265:	83 c4 10             	add    esp,0x10
c0008268:	84 c0                	test   al,al
c000826a:	74 de                	je     c000824a <KiIsSymlinkRegistered(char const*)+0x92>
c000826c:	52                   	push   edx
c000826d:	52                   	push   edx
c000826e:	6a 01                	push   0x1
c0008270:	53                   	push   ebx
c0008271:	e8 5c 09 00 00       	call   c0008bd2 <File::open(FileOpenMode)>
c0008276:	83 c4 10             	add    esp,0x10
c0008279:	85 c0                	test   eax,eax
c000827b:	74 10                	je     c000828d <KiIsSymlinkRegistered(char const*)+0xd5>
c000827d:	83 ec 0c             	sub    esp,0xc
c0008280:	68 67 a9 02 c0       	push   0xc002a967
c0008285:	e8 c2 84 00 00       	call   c001074c <KePanic(char const*)>
c000828a:	83 c4 10             	add    esp,0x10
c000828d:	83 ec 0c             	sub    esp,0xc
c0008290:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008292:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0008296:	55                   	push   ebp
c0008297:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000829b:	57                   	push   edi
c000829c:	6a 00                	push   0x0
c000829e:	68 00 01 00 00       	push   0x100
c00082a3:	53                   	push   ebx
c00082a4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00082a7:	83 c4 20             	add    esp,0x20
c00082aa:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00082b2:	75 4b                	jne    c00082ff <KiIsSymlinkRegistered(char const*)+0x147>
c00082b4:	83 ec 0c             	sub    esp,0xc
c00082b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00082b9:	55                   	push   ebp
c00082ba:	8d 54 24 18          	lea    edx,[esp+0x18]
c00082be:	52                   	push   edx
c00082bf:	6a 00                	push   0x0
c00082c1:	6a 08                	push   0x8
c00082c3:	53                   	push   ebx
c00082c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00082c7:	83 c4 20             	add    esp,0x20
c00082ca:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00082cf:	75 2e                	jne    c00082ff <KiIsSymlinkRegistered(char const*)+0x147>
c00082d1:	50                   	push   eax
c00082d2:	50                   	push   eax
c00082d3:	57                   	push   edi
c00082d4:	56                   	push   esi
c00082d5:	e8 76 84 ff ff       	call   c0000750 <strcmp>
c00082da:	83 c4 10             	add    esp,0x10
c00082dd:	85 c0                	test   eax,eax
c00082df:	75 ac                	jne    c000828d <KiIsSymlinkRegistered(char const*)+0xd5>
c00082e1:	83 ec 0c             	sub    esp,0xc
c00082e4:	53                   	push   ebx
c00082e5:	e8 46 09 00 00       	call   c0008c30 <File::close()>
c00082ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00082ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00082ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00082f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082fa:	83 c4 10             	add    esp,0x10
c00082fd:	eb 18                	jmp    c0008317 <KiIsSymlinkRegistered(char const*)+0x15f>
c00082ff:	83 ec 0c             	sub    esp,0xc
c0008302:	53                   	push   ebx
c0008303:	e8 28 09 00 00       	call   c0008c30 <File::close()>
c0008308:	8b 03                	mov    eax,DWORD PTR [ebx]
c000830a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000830d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008310:	83 c4 10             	add    esp,0x10
c0008313:	31 c0                	xor    eax,eax
c0008315:	31 d2                	xor    edx,edx
c0008317:	81 c4 1c 01 00 00    	add    esp,0x11c
c000831d:	5b                   	pop    ebx
c000831e:	5e                   	pop    esi
c000831f:	5f                   	pop    edi
c0008320:	5d                   	pop    ebp
c0008321:	c3                   	ret    

c0008322 <KeDereferenceSymlink(char const*, char*)>:
c0008322:	55                   	push   ebp
c0008323:	57                   	push   edi
c0008324:	56                   	push   esi
c0008325:	53                   	push   ebx
c0008326:	83 ec 48             	sub    esp,0x48
c0008329:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000832d:	56                   	push   esi
c000832e:	e8 85 fe ff ff       	call   c00081b8 <KiIsSymlinkRegistered(char const*)>
c0008333:	83 c4 10             	add    esp,0x10
c0008336:	89 c7                	mov    edi,eax
c0008338:	89 d0                	mov    eax,edx
c000833a:	09 f8                	or     eax,edi
c000833c:	75 07                	jne    c0008345 <KeDereferenceSymlink(char const*, char*)+0x23>
c000833e:	31 c0                	xor    eax,eax
c0008340:	e9 7c 01 00 00       	jmp    c00084c1 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0008345:	83 ec 0c             	sub    esp,0xc
c0008348:	89 d5                	mov    ebp,edx
c000834a:	68 14 01 00 00       	push   0x114
c000834f:	e8 a3 7f 00 00       	call   c00102f7 <malloc>
c0008354:	83 c4 0c             	add    esp,0xc
c0008357:	89 c3                	mov    ebx,eax
c0008359:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c000835f:	56                   	push   esi
c0008360:	50                   	push   eax
c0008361:	e8 4e 08 00 00       	call   c0008bb4 <File::File(char const*, Process*)>
c0008366:	83 c4 10             	add    esp,0x10
c0008369:	85 db                	test   ebx,ebx
c000836b:	0f 84 32 01 00 00    	je     c00084a3 <KeDereferenceSymlink(char const*, char*)+0x181>
c0008371:	56                   	push   esi
c0008372:	56                   	push   esi
c0008373:	6a 01                	push   0x1
c0008375:	53                   	push   ebx
c0008376:	e8 57 08 00 00       	call   c0008bd2 <File::open(FileOpenMode)>
c000837b:	83 c4 10             	add    esp,0x10
c000837e:	85 c0                	test   eax,eax
c0008380:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008382:	74 09                	je     c000838d <KeDereferenceSymlink(char const*, char*)+0x6b>
c0008384:	83 ec 0c             	sub    esp,0xc
c0008387:	53                   	push   ebx
c0008388:	e9 10 01 00 00       	jmp    c000849d <KeDereferenceSymlink(char const*, char*)+0x17b>
c000838d:	83 ec 0c             	sub    esp,0xc
c0008390:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008394:	56                   	push   esi
c0008395:	8d 54 24 37          	lea    edx,[esp+0x37]
c0008399:	52                   	push   edx
c000839a:	6a 00                	push   0x0
c000839c:	6a 08                	push   0x8
c000839e:	53                   	push   ebx
c000839f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00083a2:	83 c4 20             	add    esp,0x20
c00083a5:	85 c0                	test   eax,eax
c00083a7:	0f 85 e2 00 00 00    	jne    c000848f <KeDereferenceSymlink(char const*, char*)+0x16d>
c00083ad:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00083b2:	0f 85 d7 00 00 00    	jne    c000848f <KeDereferenceSymlink(char const*, char*)+0x16d>
c00083b8:	83 ec 0c             	sub    esp,0xc
c00083bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00083bd:	56                   	push   esi
c00083be:	8d 54 24 20          	lea    edx,[esp+0x20]
c00083c2:	52                   	push   edx
c00083c3:	6a 00                	push   0x0
c00083c5:	6a 08                	push   0x8
c00083c7:	53                   	push   ebx
c00083c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00083cb:	83 c4 20             	add    esp,0x20
c00083ce:	85 c0                	test   eax,eax
c00083d0:	0f 85 b9 00 00 00    	jne    c000848f <KeDereferenceSymlink(char const*, char*)+0x16d>
c00083d6:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00083db:	0f 85 ae 00 00 00    	jne    c000848f <KeDereferenceSymlink(char const*, char*)+0x16d>
c00083e1:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00083e5:	0f 85 53 ff ff ff    	jne    c000833e <KeDereferenceSymlink(char const*, char*)+0x1c>
c00083eb:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00083ef:	0f 85 49 ff ff ff    	jne    c000833e <KeDereferenceSymlink(char const*, char*)+0x1c>
c00083f5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00083fd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008405:	51                   	push   ecx
c0008406:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000840a:	50                   	push   eax
c000840b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000840f:	50                   	push   eax
c0008410:	53                   	push   ebx
c0008411:	e8 be 0a 00 00       	call   c0008ed4 <File::stat(unsigned long long*, bool*)>
c0008416:	83 c4 10             	add    esp,0x10
c0008419:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000841e:	75 6f                	jne    c000848f <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008420:	31 c9                	xor    ecx,ecx
c0008422:	bf 0f 00 00 00       	mov    edi,0xf
c0008427:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000842b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000842f:	39 c7                	cmp    edi,eax
c0008431:	89 cf                	mov    edi,ecx
c0008433:	19 d7                	sbb    edi,edx
c0008435:	73 58                	jae    c000848f <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008437:	83 c0 f0             	add    eax,0xfffffff0
c000843a:	bf ff 00 00 00       	mov    edi,0xff
c000843f:	83 d2 ff             	adc    edx,0xffffffff
c0008442:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008446:	39 c7                	cmp    edi,eax
c0008448:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000844c:	19 d1                	sbb    ecx,edx
c000844e:	72 53                	jb     c00084a3 <KeDereferenceSymlink(char const*, char*)+0x181>
c0008450:	40                   	inc    eax
c0008451:	52                   	push   edx
c0008452:	50                   	push   eax
c0008453:	6a 00                	push   0x0
c0008455:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0008459:	e8 92 80 ff ff       	call   c00004f0 <memset>
c000845e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008460:	89 34 24             	mov    DWORD PTR [esp],esi
c0008463:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0008467:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000846b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000846f:	53                   	push   ebx
c0008470:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008473:	83 c4 20             	add    esp,0x20
c0008476:	85 c0                	test   eax,eax
c0008478:	75 15                	jne    c000848f <KeDereferenceSymlink(char const*, char*)+0x16d>
c000847a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000847e:	89 c7                	mov    edi,eax
c0008480:	c1 ff 1f             	sar    edi,0x1f
c0008483:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0008487:	75 06                	jne    c000848f <KeDereferenceSymlink(char const*, char*)+0x16d>
c0008489:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000848d:	74 19                	je     c00084a8 <KeDereferenceSymlink(char const*, char*)+0x186>
c000848f:	83 ec 0c             	sub    esp,0xc
c0008492:	53                   	push   ebx
c0008493:	e8 98 07 00 00       	call   c0008c30 <File::close()>
c0008498:	8b 03                	mov    eax,DWORD PTR [ebx]
c000849a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000849d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00084a0:	83 c4 10             	add    esp,0x10
c00084a3:	83 c8 ff             	or     eax,0xffffffff
c00084a6:	eb 19                	jmp    c00084c1 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00084a8:	83 ec 0c             	sub    esp,0xc
c00084ab:	53                   	push   ebx
c00084ac:	e8 7f 07 00 00       	call   c0008c30 <File::close()>
c00084b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00084b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	b8 01 00 00 00       	mov    eax,0x1
c00084c1:	83 c4 3c             	add    esp,0x3c
c00084c4:	5b                   	pop    ebx
c00084c5:	5e                   	pop    esi
c00084c6:	5f                   	pop    edi
c00084c7:	5d                   	pop    ebp
c00084c8:	c3                   	ret    

c00084c9 <KeCreateSymlink(char const*, char const*)>:
c00084c9:	55                   	push   ebp
c00084ca:	57                   	push   edi
c00084cb:	56                   	push   esi
c00084cc:	53                   	push   ebx
c00084cd:	83 ec 38             	sub    esp,0x38
c00084d0:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00084d4:	68 14 01 00 00       	push   0x114
c00084d9:	e8 19 7e 00 00       	call   c00102f7 <malloc>
c00084de:	6a 00                	push   0x0
c00084e0:	89 c3                	mov    ebx,eax
c00084e2:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c00084e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00084ec:	50                   	push   eax
c00084ed:	e8 c4 05 00 00       	call   c0008ab6 <File::File(char const*, Process*, bool)>
c00084f2:	83 c4 20             	add    esp,0x20
c00084f5:	b8 01 00 00 00       	mov    eax,0x1
c00084fa:	85 db                	test   ebx,ebx
c00084fc:	0f 84 fb 00 00 00    	je     c00085fd <KeCreateSymlink(char const*, char const*)+0x134>
c0008502:	52                   	push   edx
c0008503:	52                   	push   edx
c0008504:	6a 12                	push   0x12
c0008506:	53                   	push   ebx
c0008507:	e8 c6 06 00 00       	call   c0008bd2 <File::open(FileOpenMode)>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	85 c0                	test   eax,eax
c0008511:	74 0b                	je     c000851e <KeCreateSymlink(char const*, char const*)+0x55>
c0008513:	83 ec 0c             	sub    esp,0xc
c0008516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008518:	53                   	push   ebx
c0008519:	e9 d4 00 00 00       	jmp    c00085f2 <KeCreateSymlink(char const*, char const*)+0x129>
c000851e:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0008522:	be 82 a9 02 c0       	mov    esi,0xc002a982
c0008527:	b9 09 00 00 00       	mov    ecx,0x9
c000852c:	fc                   	cld    
c000852d:	83 ec 0c             	sub    esp,0xc
c0008530:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008532:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008536:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008538:	56                   	push   esi
c0008539:	8d 54 24 27          	lea    edx,[esp+0x27]
c000853d:	52                   	push   edx
c000853e:	6a 00                	push   0x0
c0008540:	6a 08                	push   0x8
c0008542:	53                   	push   ebx
c0008543:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008546:	83 c4 20             	add    esp,0x20
c0008549:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000854e:	0f 85 90 00 00 00    	jne    c00085e4 <KeCreateSymlink(char const*, char const*)+0x11b>
c0008554:	85 c0                	test   eax,eax
c0008556:	0f 85 88 00 00 00    	jne    c00085e4 <KeCreateSymlink(char const*, char const*)+0x11b>
c000855c:	e8 05 fa ff ff       	call   c0007f66 <KiCreateSymlinkID()>
c0008561:	83 ec 0c             	sub    esp,0xc
c0008564:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008568:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000856c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000856e:	56                   	push   esi
c000856f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0008573:	52                   	push   edx
c0008574:	6a 00                	push   0x0
c0008576:	6a 08                	push   0x8
c0008578:	53                   	push   ebx
c0008579:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000857c:	83 c4 20             	add    esp,0x20
c000857f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0008584:	75 5e                	jne    c00085e4 <KeCreateSymlink(char const*, char const*)+0x11b>
c0008586:	85 c0                	test   eax,eax
c0008588:	75 5a                	jne    c00085e4 <KeCreateSymlink(char const*, char const*)+0x11b>
c000858a:	83 ec 0c             	sub    esp,0xc
c000858d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000858f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0008592:	55                   	push   ebp
c0008593:	e8 d8 7f ff ff       	call   c0000570 <strlen>
c0008598:	89 34 24             	mov    DWORD PTR [esp],esi
c000859b:	31 d2                	xor    edx,edx
c000859d:	55                   	push   ebp
c000859e:	52                   	push   edx
c000859f:	50                   	push   eax
c00085a0:	53                   	push   ebx
c00085a1:	ff d7                	call   edi
c00085a3:	83 c4 14             	add    esp,0x14
c00085a6:	89 c6                	mov    esi,eax
c00085a8:	55                   	push   ebp
c00085a9:	e8 c2 7f ff ff       	call   c0000570 <strlen>
c00085ae:	83 c4 10             	add    esp,0x10
c00085b1:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00085b5:	75 2d                	jne    c00085e4 <KeCreateSymlink(char const*, char const*)+0x11b>
c00085b7:	85 f6                	test   esi,esi
c00085b9:	75 29                	jne    c00085e4 <KeCreateSymlink(char const*, char const*)+0x11b>
c00085bb:	50                   	push   eax
c00085bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00085c8:	e8 06 fa ff ff       	call   c0007fd3 <KeRegisterSymlink(char const*, unsigned long long)>
c00085cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085d0:	e8 5b 06 00 00       	call   c0008c30 <File::close()>
c00085d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085dd:	83 c4 10             	add    esp,0x10
c00085e0:	31 c0                	xor    eax,eax
c00085e2:	eb 19                	jmp    c00085fd <KeCreateSymlink(char const*, char const*)+0x134>
c00085e4:	83 ec 0c             	sub    esp,0xc
c00085e7:	53                   	push   ebx
c00085e8:	e8 43 06 00 00       	call   c0008c30 <File::close()>
c00085ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	b8 01 00 00 00       	mov    eax,0x1
c00085fd:	83 c4 2c             	add    esp,0x2c
c0008600:	5b                   	pop    ebx
c0008601:	5e                   	pop    esi
c0008602:	5f                   	pop    edi
c0008603:	5d                   	pop    ebp
c0008604:	c3                   	ret    
c0008605:	90                   	nop

c0008606 <File::read(unsigned long long, void*, int*)>:
c0008606:	53                   	push   ebx
c0008607:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000860b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000860f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0008616:	83 f8 19             	cmp    eax,0x19
c0008619:	77 35                	ja     c0008650 <File::read(unsigned long long, void*, int*)+0x4a>
c000861b:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0008622:	85 c0                	test   eax,eax
c0008624:	74 2a                	je     c0008650 <File::read(unsigned long long, void*, int*)+0x4a>
c0008626:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000862c:	85 c0                	test   eax,eax
c000862e:	74 20                	je     c0008650 <File::read(unsigned long long, void*, int*)+0x4a>
c0008630:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008634:	74 21                	je     c0008657 <File::read(unsigned long long, void*, int*)+0x51>
c0008636:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008638:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000863c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0008642:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008646:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000864a:	5b                   	pop    ebx
c000864b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000864e:	ff e0                	jmp    eax
c0008650:	b8 0b 00 00 00       	mov    eax,0xb
c0008655:	eb 05                	jmp    c000865c <File::read(unsigned long long, void*, int*)+0x56>
c0008657:	b8 05 00 00 00       	mov    eax,0x5
c000865c:	5b                   	pop    ebx
c000865d:	c3                   	ret    

c000865e <File::write(unsigned long long, void*, int*)>:
c000865e:	53                   	push   ebx
c000865f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008663:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008667:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000866e:	83 f8 19             	cmp    eax,0x19
c0008671:	77 35                	ja     c00086a8 <File::write(unsigned long long, void*, int*)+0x4a>
c0008673:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c000867a:	85 c0                	test   eax,eax
c000867c:	74 2a                	je     c00086a8 <File::write(unsigned long long, void*, int*)+0x4a>
c000867e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008684:	85 c0                	test   eax,eax
c0008686:	74 20                	je     c00086a8 <File::write(unsigned long long, void*, int*)+0x4a>
c0008688:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000868c:	74 21                	je     c00086af <File::write(unsigned long long, void*, int*)+0x51>
c000868e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008690:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008694:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000869a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000869e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00086a2:	5b                   	pop    ebx
c00086a3:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00086a6:	ff e0                	jmp    eax
c00086a8:	b8 0b 00 00 00       	mov    eax,0xb
c00086ad:	eb 05                	jmp    c00086b4 <File::write(unsigned long long, void*, int*)+0x56>
c00086af:	b8 05 00 00 00       	mov    eax,0x5
c00086b4:	5b                   	pop    ebx
c00086b5:	c3                   	ret    

c00086b6 <Directory::read(unsigned long long, void*, int*)>:
c00086b6:	53                   	push   ebx
c00086b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00086bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00086bf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00086c6:	83 f8 19             	cmp    eax,0x19
c00086c9:	77 35                	ja     c0008700 <Directory::read(unsigned long long, void*, int*)+0x4a>
c00086cb:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c00086d2:	85 c0                	test   eax,eax
c00086d4:	74 2a                	je     c0008700 <Directory::read(unsigned long long, void*, int*)+0x4a>
c00086d6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086dc:	85 c0                	test   eax,eax
c00086de:	74 20                	je     c0008700 <Directory::read(unsigned long long, void*, int*)+0x4a>
c00086e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00086e4:	74 21                	je     c0008707 <Directory::read(unsigned long long, void*, int*)+0x51>
c00086e6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00086e8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00086ec:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00086f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00086f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00086fa:	5b                   	pop    ebx
c00086fb:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c00086fe:	ff e0                	jmp    eax
c0008700:	b8 0b 00 00 00       	mov    eax,0xb
c0008705:	eb 05                	jmp    c000870c <Directory::read(unsigned long long, void*, int*)+0x56>
c0008707:	b8 05 00 00 00       	mov    eax,0x5
c000870c:	5b                   	pop    ebx
c000870d:	c3                   	ret    

c000870e <Directory::write(unsigned long long, void*, int*)>:
c000870e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008712:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0008719:	b8 0b 00 00 00       	mov    eax,0xb
c000871e:	83 fa 19             	cmp    edx,0x19
c0008721:	77 18                	ja     c000873b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0008723:	8b 14 95 e0 5a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffca520]
c000872a:	85 d2                	test   edx,edx
c000872c:	74 0d                	je     c000873b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000872e:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0008735:	19 c0                	sbb    eax,eax
c0008737:	83 e0 0a             	and    eax,0xa
c000873a:	40                   	inc    eax
c000873b:	c3                   	ret    

c000873c <File::isAtty()>:
c000873c:	31 c0                	xor    eax,eax
c000873e:	c3                   	ret    
c000873f:	90                   	nop

c0008740 <Directory::isAtty()>:
c0008740:	31 c0                	xor    eax,eax
c0008742:	c3                   	ret    
c0008743:	90                   	nop

c0008744 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0008744:	b8 0a 00 00 00       	mov    eax,0xa
c0008749:	c3                   	ret    

c000874a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000874a:	b8 0a 00 00 00       	mov    eax,0xa
c000874f:	c3                   	ret    

c0008750 <Filesystem::allocateSwapfile(char const*, int)>:
c0008750:	31 c0                	xor    eax,eax
c0008752:	31 d2                	xor    edx,edx
c0008754:	c3                   	ret    
c0008755:	90                   	nop

c0008756 <File::~File()>:
c0008756:	83 ec 0c             	sub    esp,0xc
c0008759:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c000875e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008762:	89 10                	mov    DWORD PTR [eax],edx
c0008764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008768:	83 ec 0c             	sub    esp,0xc
c000876b:	50                   	push   eax
c000876c:	e8 05 b3 00 00       	call   c0013a76 <UnixFile::~UnixFile()>
c0008771:	83 c4 10             	add    esp,0x10
c0008774:	90                   	nop
c0008775:	83 c4 0c             	add    esp,0xc
c0008778:	c3                   	ret    
c0008779:	90                   	nop

c000877a <File::~File()>:
c000877a:	83 ec 0c             	sub    esp,0xc
c000877d:	83 ec 0c             	sub    esp,0xc
c0008780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008784:	e8 cd ff ff ff       	call   c0008756 <File::~File()>
c0008789:	83 c4 10             	add    esp,0x10
c000878c:	83 ec 08             	sub    esp,0x8
c000878f:	68 14 01 00 00       	push   0x114
c0008794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008798:	e8 67 56 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000879d:	83 c4 10             	add    esp,0x10
c00087a0:	83 c4 0c             	add    esp,0xc
c00087a3:	c3                   	ret    

c00087a4 <Directory::~Directory()>:
c00087a4:	83 ec 0c             	sub    esp,0xc
c00087a7:	ba 74 aa 02 c0       	mov    edx,0xc002aa74
c00087ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087b0:	89 10                	mov    DWORD PTR [eax],edx
c00087b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00087b6:	83 ec 0c             	sub    esp,0xc
c00087b9:	50                   	push   eax
c00087ba:	e8 b7 b2 00 00       	call   c0013a76 <UnixFile::~UnixFile()>
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	90                   	nop
c00087c3:	83 c4 0c             	add    esp,0xc
c00087c6:	c3                   	ret    
c00087c7:	90                   	nop

c00087c8 <Directory::~Directory()>:
c00087c8:	83 ec 0c             	sub    esp,0xc
c00087cb:	83 ec 0c             	sub    esp,0xc
c00087ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087d2:	e8 cd ff ff ff       	call   c00087a4 <Directory::~Directory()>
c00087d7:	83 c4 10             	add    esp,0x10
c00087da:	83 ec 08             	sub    esp,0x8
c00087dd:	68 14 01 00 00       	push   0x114
c00087e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087e6:	e8 19 56 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c00087eb:	83 c4 10             	add    esp,0x10
c00087ee:	83 c4 0c             	add    esp,0xc
c00087f1:	c3                   	ret    

c00087f2 <Filesystem::Filesystem()>:
c00087f2:	ba ec a9 02 c0       	mov    edx,0xc002a9ec
c00087f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00087fb:	89 10                	mov    DWORD PTR [eax],edx
c00087fd:	8b 15 04 53 03 c0    	mov    edx,DWORD PTR ds:0xc0035304
c0008803:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008807:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000880a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000880e:	a3 04 53 03 c0       	mov    ds:0xc0035304,eax
c0008813:	90                   	nop
c0008814:	c3                   	ret    
c0008815:	90                   	nop

c0008816 <Filesystem::~Filesystem()>:
c0008816:	ba ec a9 02 c0       	mov    edx,0xc002a9ec
c000881b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000881f:	89 10                	mov    DWORD PTR [eax],edx
c0008821:	90                   	nop
c0008822:	c3                   	ret    
c0008823:	90                   	nop

c0008824 <Filesystem::~Filesystem()>:
c0008824:	83 ec 0c             	sub    esp,0xc
c0008827:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000882b:	e8 e6 ff ff ff       	call   c0008816 <Filesystem::~Filesystem()>
c0008830:	83 c4 04             	add    esp,0x4
c0008833:	83 ec 08             	sub    esp,0x8
c0008836:	6a 08                	push   0x8
c0008838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000883c:	e8 c3 55 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c0008841:	83 c4 10             	add    esp,0x10
c0008844:	83 c4 0c             	add    esp,0xc
c0008847:	c3                   	ret    

c0008848 <Fs::getcwd(Process*, char*, int)>:
c0008848:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000884c:	31 c0                	xor    eax,eax
c000884e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0008851:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0008855:	7d 15                	jge    c000886c <Fs::getcwd(Process*, char*, int)+0x24>
c0008857:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000885b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0008862:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0008865:	84 c9                	test   cl,cl
c0008867:	74 06                	je     c000886f <Fs::getcwd(Process*, char*, int)+0x27>
c0008869:	40                   	inc    eax
c000886a:	eb e2                	jmp    c000884e <Fs::getcwd(Process*, char*, int)+0x6>
c000886c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000886f:	31 c0                	xor    eax,eax
c0008871:	c3                   	ret    

c0008872 <Fs::initVFS()>:
c0008872:	83 ec 18             	sub    esp,0x18
c0008875:	6a 08                	push   0x8
c0008877:	e8 7b 7a 00 00       	call   c00102f7 <malloc>
c000887c:	89 04 24             	mov    DWORD PTR [esp],eax
c000887f:	e8 24 67 01 00       	call   c001efa8 <FAT::FAT()>
c0008884:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000888b:	e8 67 7a 00 00       	call   c00102f7 <malloc>
c0008890:	89 04 24             	mov    DWORD PTR [esp],eax
c0008893:	e8 3c 76 01 00       	call   c001fed4 <ISO9660::ISO9660()>
c0008898:	83 c4 1c             	add    esp,0x1c
c000889b:	c3                   	ret    

c000889c <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000889c:	55                   	push   ebp
c000889d:	57                   	push   edi
c000889e:	56                   	push   esi
c000889f:	53                   	push   ebx
c00088a0:	81 ec 10 04 00 00    	sub    esp,0x410
c00088a6:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c00088ad:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c00088b4:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c00088bc:	68 00 04 00 00       	push   0x400
c00088c1:	6a 00                	push   0x0
c00088c3:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00088c7:	57                   	push   edi
c00088c8:	e8 23 7c ff ff       	call   c00004f0 <memset>
c00088cd:	83 c4 10             	add    esp,0x10
c00088d0:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c00088d4:	75 0b                	jne    c00088e1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c00088d6:	50                   	push   eax
c00088d7:	50                   	push   eax
c00088d8:	55                   	push   ebp
c00088d9:	57                   	push   edi
c00088da:	e8 61 7d ff ff       	call   c0000640 <strcpy>
c00088df:	eb 51                	jmp    c0008932 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c00088e1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00088e5:	83 f8 5c             	cmp    eax,0x5c
c00088e8:	74 05                	je     c00088ef <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c00088ea:	83 f8 2f             	cmp    eax,0x2f
c00088ed:	75 1e                	jne    c000890d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c00088ef:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00088f6:	8a 00                	mov    al,BYTE PTR [eax]
c00088f8:	3c 60                	cmp    al,0x60
c00088fa:	7e 03                	jle    c00088ff <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c00088fc:	83 e8 20             	sub    eax,0x20
c00088ff:	88 04 24             	mov    BYTE PTR [esp],al
c0008902:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0008909:	50                   	push   eax
c000890a:	50                   	push   eax
c000890b:	eb 1e                	jmp    c000892b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000890d:	50                   	push   eax
c000890e:	50                   	push   eax
c000890f:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0008916:	57                   	push   edi
c0008917:	e8 24 7d ff ff       	call   c0000640 <strcpy>
c000891c:	58                   	pop    eax
c000891d:	5a                   	pop    edx
c000891e:	68 66 c3 02 c0       	push   0xc002c366
c0008923:	57                   	push   edi
c0008924:	e8 17 7f ff ff       	call   c0000840 <strcat>
c0008929:	59                   	pop    ecx
c000892a:	58                   	pop    eax
c000892b:	55                   	push   ebp
c000892c:	57                   	push   edi
c000892d:	e8 0e 7f ff ff       	call   c0000840 <strcat>
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	8a 04 24             	mov    al,BYTE PTR [esp]
c0008938:	3c 60                	cmp    al,0x60
c000893a:	7e 03                	jle    c000893f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000893c:	83 e8 20             	sub    eax,0x20
c000893f:	88 04 24             	mov    BYTE PTR [esp],al
c0008942:	88 06                	mov    BYTE PTR [esi],al
c0008944:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000894b:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0008951:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0008955:	bf 03 00 00 00       	mov    edi,0x3
c000895a:	b8 03 00 00 00       	mov    eax,0x3
c000895f:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0008963:	89 e9                	mov    ecx,ebp
c0008965:	85 ed                	test   ebp,ebp
c0008967:	0f 84 97 00 00 00    	je     c0008a04 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000896d:	8d 57 01             	lea    edx,[edi+0x1]
c0008970:	83 fd 5c             	cmp    ebp,0x5c
c0008973:	74 05                	je     c000897a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0008975:	83 fd 2f             	cmp    ebp,0x2f
c0008978:	75 12                	jne    c000898c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000897a:	89 c5                	mov    ebp,eax
c000897c:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0008981:	74 09                	je     c000898c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0008983:	40                   	inc    eax
c0008984:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0008988:	89 d7                	mov    edi,edx
c000898a:	eb d3                	jmp    c000895f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000898c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0008991:	0f be e9             	movsx  ebp,cl
c0008994:	75 5e                	jne    c00089f4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0008996:	83 fd 2e             	cmp    ebp,0x2e
c0008999:	75 59                	jne    c00089f4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000899b:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000899f:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c00089a4:	74 18                	je     c00089be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c00089a6:	83 fd 2e             	cmp    ebp,0x2e
c00089a9:	74 53                	je     c00089fe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c00089ab:	89 fa                	mov    edx,edi
c00089ad:	42                   	inc    edx
c00089ae:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c00089b2:	83 f9 2f             	cmp    ecx,0x2f
c00089b5:	74 f6                	je     c00089ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c00089b7:	83 f9 5c             	cmp    ecx,0x5c
c00089ba:	74 f1                	je     c00089ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c00089bc:	eb ca                	jmp    c0008988 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c00089be:	83 fd 2e             	cmp    ebp,0x2e
c00089c1:	74 3b                	je     c00089fe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c00089c3:	83 f8 03             	cmp    eax,0x3
c00089c6:	74 c0                	je     c0008988 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c00089c8:	42                   	inc    edx
c00089c9:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c00089cd:	83 f9 5c             	cmp    ecx,0x5c
c00089d0:	74 f6                	je     c00089c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c00089d2:	83 f9 2f             	cmp    ecx,0x2f
c00089d5:	74 f1                	je     c00089c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c00089d7:	48                   	dec    eax
c00089d8:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c00089dc:	75 06                	jne    c00089e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c00089de:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00089e2:	eb f3                	jmp    c00089d7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c00089e4:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c00089e8:	74 07                	je     c00089f1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c00089ea:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00089ee:	48                   	dec    eax
c00089ef:	eb f3                	jmp    c00089e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c00089f1:	40                   	inc    eax
c00089f2:	eb 94                	jmp    c0008988 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c00089f4:	83 fd 5c             	cmp    ebp,0x5c
c00089f7:	74 8f                	je     c0008988 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c00089f9:	83 fd 2f             	cmp    ebp,0x2f
c00089fc:	74 8a                	je     c0008988 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c00089fe:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0008a01:	40                   	inc    eax
c0008a02:	eb 84                	jmp    c0008988 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0008a04:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0008a08:	83 ec 0c             	sub    esp,0xc
c0008a0b:	56                   	push   esi
c0008a0c:	e8 5f 7b ff ff       	call   c0000570 <strlen>
c0008a11:	83 c4 10             	add    esp,0x10
c0008a14:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0008a19:	74 17                	je     c0008a32 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008a1b:	83 ec 0c             	sub    esp,0xc
c0008a1e:	56                   	push   esi
c0008a1f:	e8 4c 7b ff ff       	call   c0000570 <strlen>
c0008a24:	83 c4 10             	add    esp,0x10
c0008a27:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0008a2c:	74 04                	je     c0008a32 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008a2e:	31 ff                	xor    edi,edi
c0008a30:	eb 5c                	jmp    c0008a8e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008a32:	83 ec 0c             	sub    esp,0xc
c0008a35:	56                   	push   esi
c0008a36:	e8 35 7b ff ff       	call   c0000570 <strlen>
c0008a3b:	83 c4 10             	add    esp,0x10
c0008a3e:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0008a43:	74 e9                	je     c0008a2e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0008a45:	83 ec 0c             	sub    esp,0xc
c0008a48:	56                   	push   esi
c0008a49:	e8 22 7b ff ff       	call   c0000570 <strlen>
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0008a56:	eb b0                	jmp    c0008a08 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0008a58:	52                   	push   edx
c0008a59:	52                   	push   edx
c0008a5a:	56                   	push   esi
c0008a5b:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0008a5f:	55                   	push   ebp
c0008a60:	e8 db 7b ff ff       	call   c0000640 <strcpy>
c0008a65:	59                   	pop    ecx
c0008a66:	58                   	pop    eax
c0008a67:	56                   	push   esi
c0008a68:	55                   	push   ebp
c0008a69:	e8 b4 f8 ff ff       	call   c0008322 <KeDereferenceSymlink(char const*, char*)>
c0008a6e:	83 c4 10             	add    esp,0x10
c0008a71:	48                   	dec    eax
c0008a72:	75 37                	jne    c0008aab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008a74:	50                   	push   eax
c0008a75:	56                   	push   esi
c0008a76:	55                   	push   ebp
c0008a77:	68 8b a9 02 c0       	push   0xc002a98b
c0008a7c:	e8 fb e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008a81:	83 c4 10             	add    esp,0x10
c0008a84:	8d 47 01             	lea    eax,[edi+0x1]
c0008a87:	83 ff 14             	cmp    edi,0x14
c0008a8a:	74 08                	je     c0008a94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c0008a8c:	89 c7                	mov    edi,eax
c0008a8e:	85 db                	test   ebx,ebx
c0008a90:	75 c6                	jne    c0008a58 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008a92:	eb 17                	jmp    c0008aab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008a94:	83 ec 0c             	sub    esp,0xc
c0008a97:	bf 15 00 00 00       	mov    edi,0x15
c0008a9c:	68 a6 a9 02 c0       	push   0xc002a9a6
c0008aa1:	e8 a6 7c 00 00       	call   c001074c <KePanic(char const*)>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	eb e3                	jmp    c0008a8e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008aab:	81 c4 0c 04 00 00    	add    esp,0x40c
c0008ab1:	5b                   	pop    ebx
c0008ab2:	5e                   	pop    esi
c0008ab3:	5f                   	pop    edi
c0008ab4:	5d                   	pop    ebp
c0008ab5:	c3                   	ret    

c0008ab6 <File::File(char const*, Process*, bool)>:
c0008ab6:	83 ec 1c             	sub    esp,0x1c
c0008ab9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008abd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008ac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ac5:	83 ec 08             	sub    esp,0x8
c0008ac8:	6a 00                	push   0x0
c0008aca:	50                   	push   eax
c0008acb:	e8 c0 ad 00 00       	call   c0013890 <UnixFile::UnixFile(int)>
c0008ad0:	83 c4 10             	add    esp,0x10
c0008ad3:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c0008ad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008adc:	89 10                	mov    DWORD PTR [eax],edx
c0008ade:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008ae3:	85 c0                	test   eax,eax
c0008ae5:	74 0f                	je     c0008af6 <File::File(char const*, Process*, bool)+0x40>
c0008ae7:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c0008aec:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008af0:	74 04                	je     c0008af6 <File::File(char const*, Process*, bool)+0x40>
c0008af2:	b0 01                	mov    al,0x1
c0008af4:	eb 02                	jmp    c0008af8 <File::File(char const*, Process*, bool)+0x42>
c0008af6:	b0 00                	mov    al,0x0
c0008af8:	0f b6 c0             	movzx  eax,al
c0008afb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008aff:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008b05:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008b09:	83 c2 0d             	add    edx,0xd
c0008b0c:	50                   	push   eax
c0008b0d:	51                   	push   ecx
c0008b0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008b12:	52                   	push   edx
c0008b13:	e8 84 fd ff ff       	call   c000889c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008b22:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008b26:	83 c2 0d             	add    edx,0xd
c0008b29:	83 ec 04             	sub    esp,0x4
c0008b2c:	50                   	push   eax
c0008b2d:	52                   	push   edx
c0008b2e:	68 cc a9 02 c0       	push   0xc002a9cc
c0008b33:	e8 44 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b38:	83 c4 10             	add    esp,0x10
c0008b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b3f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008b42:	83 e8 41             	sub    eax,0x41
c0008b45:	88 c2                	mov    dl,al
c0008b47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b4b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b55:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008b59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b5d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008b63:	0f b6 c0             	movzx  eax,al
c0008b66:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0008b6d:	85 c0                	test   eax,eax
c0008b6f:	74 3e                	je     c0008baf <File::File(char const*, Process*, bool)+0xf9>
c0008b71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b75:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008b7b:	0f b6 c0             	movzx  eax,al
c0008b7e:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0008b85:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008b8b:	85 c0                	test   eax,eax
c0008b8d:	75 20                	jne    c0008baf <File::File(char const*, Process*, bool)+0xf9>
c0008b8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b93:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008b99:	0f b6 c0             	movzx  eax,al
c0008b9c:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0008ba3:	83 ec 0c             	sub    esp,0xc
c0008ba6:	50                   	push   eax
c0008ba7:	e8 30 28 00 00       	call   c000b3dc <LogicalDisk::mount()>
c0008bac:	83 c4 10             	add    esp,0x10
c0008baf:	90                   	nop
c0008bb0:	83 c4 1c             	add    esp,0x1c
c0008bb3:	c3                   	ret    

c0008bb4 <File::File(char const*, Process*)>:
c0008bb4:	83 ec 0c             	sub    esp,0xc
c0008bb7:	6a 01                	push   0x1
c0008bb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bc5:	e8 ec fe ff ff       	call   c0008ab6 <File::File(char const*, Process*, bool)>
c0008bca:	83 c4 10             	add    esp,0x10
c0008bcd:	90                   	nop
c0008bce:	83 c4 0c             	add    esp,0xc
c0008bd1:	c3                   	ret    

c0008bd2 <File::open(FileOpenMode)>:
c0008bd2:	53                   	push   ebx
c0008bd3:	b8 0b 00 00 00       	mov    eax,0xb
c0008bd8:	83 ec 08             	sub    esp,0x8
c0008bdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008bdf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008be6:	83 fa 19             	cmp    edx,0x19
c0008be9:	77 40                	ja     c0008c2b <File::open(FileOpenMode)+0x59>
c0008beb:	8b 14 95 e0 5a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffca520]
c0008bf2:	85 d2                	test   edx,edx
c0008bf4:	74 35                	je     c0008c2b <File::open(FileOpenMode)+0x59>
c0008bf6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008bfc:	85 d2                	test   edx,edx
c0008bfe:	74 2b                	je     c0008c2b <File::open(FileOpenMode)+0x59>
c0008c00:	b8 06 00 00 00       	mov    eax,0x6
c0008c05:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008c09:	75 20                	jne    c0008c2b <File::open(FileOpenMode)+0x59>
c0008c0b:	8b 02                	mov    eax,DWORD PTR [edx]
c0008c0d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008c13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c17:	51                   	push   ecx
c0008c18:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008c1b:	51                   	push   ecx
c0008c1c:	52                   	push   edx
c0008c1d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008c20:	83 c4 10             	add    esp,0x10
c0008c23:	85 c0                	test   eax,eax
c0008c25:	75 04                	jne    c0008c2b <File::open(FileOpenMode)+0x59>
c0008c27:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008c2b:	83 c4 08             	add    esp,0x8
c0008c2e:	5b                   	pop    ebx
c0008c2f:	c3                   	ret    

c0008c30 <File::close()>:
c0008c30:	53                   	push   ebx
c0008c31:	b8 0b 00 00 00       	mov    eax,0xb
c0008c36:	83 ec 08             	sub    esp,0x8
c0008c39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c3d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008c44:	83 f9 19             	cmp    ecx,0x19
c0008c47:	77 41                	ja     c0008c8a <File::close()+0x5a>
c0008c49:	8b 1c 8d e0 5a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffca520]
c0008c50:	85 db                	test   ebx,ebx
c0008c52:	74 36                	je     c0008c8a <File::close()+0x5a>
c0008c54:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008c5b:	74 2d                	je     c0008c8a <File::close()+0x5a>
c0008c5d:	b8 05 00 00 00       	mov    eax,0x5
c0008c62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008c66:	74 22                	je     c0008c8a <File::close()+0x5a>
c0008c68:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008c6c:	8b 04 8d e0 5a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffca520]
c0008c73:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008c79:	53                   	push   ebx
c0008c7a:	53                   	push   ebx
c0008c7b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008c7d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008c83:	50                   	push   eax
c0008c84:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008c87:	83 c4 10             	add    esp,0x10
c0008c8a:	83 c4 08             	add    esp,0x8
c0008c8d:	5b                   	pop    ebx
c0008c8e:	c3                   	ret    
c0008c8f:	90                   	nop

c0008c90 <File::seek(unsigned long long)>:
c0008c90:	56                   	push   esi
c0008c91:	53                   	push   ebx
c0008c92:	b8 0b 00 00 00       	mov    eax,0xb
c0008c97:	51                   	push   ecx
c0008c98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c9c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ca0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008ca7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008cab:	83 fa 19             	cmp    edx,0x19
c0008cae:	77 31                	ja     c0008ce1 <File::seek(unsigned long long)+0x51>
c0008cb0:	8b 14 95 e0 5a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffca520]
c0008cb7:	85 d2                	test   edx,edx
c0008cb9:	74 26                	je     c0008ce1 <File::seek(unsigned long long)+0x51>
c0008cbb:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008cc1:	85 d2                	test   edx,edx
c0008cc3:	74 1c                	je     c0008ce1 <File::seek(unsigned long long)+0x51>
c0008cc5:	b8 05 00 00 00       	mov    eax,0x5
c0008cca:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008cce:	74 11                	je     c0008ce1 <File::seek(unsigned long long)+0x51>
c0008cd0:	8b 02                	mov    eax,DWORD PTR [edx]
c0008cd2:	53                   	push   ebx
c0008cd3:	51                   	push   ecx
c0008cd4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008cda:	52                   	push   edx
c0008cdb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008cde:	83 c4 10             	add    esp,0x10
c0008ce1:	5a                   	pop    edx
c0008ce2:	5b                   	pop    ebx
c0008ce3:	5e                   	pop    esi
c0008ce4:	c3                   	ret    
c0008ce5:	90                   	nop

c0008ce6 <File::truncate(unsigned long long)>:
c0008ce6:	56                   	push   esi
c0008ce7:	53                   	push   ebx
c0008ce8:	b8 0b 00 00 00       	mov    eax,0xb
c0008ced:	51                   	push   ecx
c0008cee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008cf2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008cf6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008cfd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008d01:	83 fa 19             	cmp    edx,0x19
c0008d04:	77 31                	ja     c0008d37 <File::truncate(unsigned long long)+0x51>
c0008d06:	8b 14 95 e0 5a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffca520]
c0008d0d:	85 d2                	test   edx,edx
c0008d0f:	74 26                	je     c0008d37 <File::truncate(unsigned long long)+0x51>
c0008d11:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008d17:	85 d2                	test   edx,edx
c0008d19:	74 1c                	je     c0008d37 <File::truncate(unsigned long long)+0x51>
c0008d1b:	b8 05 00 00 00       	mov    eax,0x5
c0008d20:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008d24:	74 11                	je     c0008d37 <File::truncate(unsigned long long)+0x51>
c0008d26:	8b 02                	mov    eax,DWORD PTR [edx]
c0008d28:	53                   	push   ebx
c0008d29:	51                   	push   ecx
c0008d2a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008d30:	52                   	push   edx
c0008d31:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	5a                   	pop    edx
c0008d38:	5b                   	pop    ebx
c0008d39:	5e                   	pop    esi
c0008d3a:	c3                   	ret    
c0008d3b:	90                   	nop

c0008d3c <File::tell(unsigned long long*)>:
c0008d3c:	83 ec 0c             	sub    esp,0xc
c0008d3f:	b8 0b 00 00 00       	mov    eax,0xb
c0008d44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008d48:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008d4f:	83 fa 19             	cmp    edx,0x19
c0008d52:	77 34                	ja     c0008d88 <File::tell(unsigned long long*)+0x4c>
c0008d54:	8b 14 95 e0 5a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffca520]
c0008d5b:	85 d2                	test   edx,edx
c0008d5d:	74 29                	je     c0008d88 <File::tell(unsigned long long*)+0x4c>
c0008d5f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008d65:	85 d2                	test   edx,edx
c0008d67:	74 1f                	je     c0008d88 <File::tell(unsigned long long*)+0x4c>
c0008d69:	b8 05 00 00 00       	mov    eax,0x5
c0008d6e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008d72:	74 14                	je     c0008d88 <File::tell(unsigned long long*)+0x4c>
c0008d74:	50                   	push   eax
c0008d75:	8b 02                	mov    eax,DWORD PTR [edx]
c0008d77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d7b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008d81:	52                   	push   edx
c0008d82:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008d85:	83 c4 10             	add    esp,0x10
c0008d88:	83 c4 0c             	add    esp,0xc
c0008d8b:	c3                   	ret    

c0008d8c <File::rewind()>:
c0008d8c:	83 ec 10             	sub    esp,0x10
c0008d8f:	6a 00                	push   0x0
c0008d91:	6a 00                	push   0x0
c0008d93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d97:	e8 f4 fe ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c0008d9c:	83 c4 1c             	add    esp,0x1c
c0008d9f:	c3                   	ret    

c0008da0 <File::unlink()>:
c0008da0:	83 ec 0c             	sub    esp,0xc
c0008da3:	b8 0b 00 00 00       	mov    eax,0xb
c0008da8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008dac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008db3:	83 f9 19             	cmp    ecx,0x19
c0008db6:	77 2f                	ja     c0008de7 <File::unlink()+0x47>
c0008db8:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0008dbf:	85 c9                	test   ecx,ecx
c0008dc1:	74 24                	je     c0008de7 <File::unlink()+0x47>
c0008dc3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008dc9:	85 c9                	test   ecx,ecx
c0008dcb:	74 1a                	je     c0008de7 <File::unlink()+0x47>
c0008dcd:	b8 06 00 00 00       	mov    eax,0x6
c0008dd2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008dd6:	75 0f                	jne    c0008de7 <File::unlink()+0x47>
c0008dd8:	83 c2 0d             	add    edx,0xd
c0008ddb:	50                   	push   eax
c0008ddc:	50                   	push   eax
c0008ddd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008ddf:	52                   	push   edx
c0008de0:	51                   	push   ecx
c0008de1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008de4:	83 c4 10             	add    esp,0x10
c0008de7:	83 c4 0c             	add    esp,0xc
c0008dea:	c3                   	ret    
c0008deb:	90                   	nop

c0008dec <File::rename(char const*)>:
c0008dec:	83 ec 0c             	sub    esp,0xc
c0008def:	b8 0b 00 00 00       	mov    eax,0xb
c0008df4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008df8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008dff:	83 f9 19             	cmp    ecx,0x19
c0008e02:	77 32                	ja     c0008e36 <File::rename(char const*)+0x4a>
c0008e04:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0008e0b:	85 c9                	test   ecx,ecx
c0008e0d:	74 27                	je     c0008e36 <File::rename(char const*)+0x4a>
c0008e0f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008e15:	85 c9                	test   ecx,ecx
c0008e17:	74 1d                	je     c0008e36 <File::rename(char const*)+0x4a>
c0008e19:	b8 06 00 00 00       	mov    eax,0x6
c0008e1e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008e22:	75 12                	jne    c0008e36 <File::rename(char const*)+0x4a>
c0008e24:	83 c2 0d             	add    edx,0xd
c0008e27:	50                   	push   eax
c0008e28:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008e2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008e2e:	52                   	push   edx
c0008e2f:	51                   	push   ecx
c0008e30:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008e33:	83 c4 10             	add    esp,0x10
c0008e36:	83 c4 0c             	add    esp,0xc
c0008e39:	c3                   	ret    

c0008e3a <File::chfatattr(unsigned char, unsigned char)>:
c0008e3a:	57                   	push   edi
c0008e3b:	b8 0b 00 00 00       	mov    eax,0xb
c0008e40:	56                   	push   esi
c0008e41:	53                   	push   ebx
c0008e42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e46:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008e4a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008e51:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008e55:	83 f9 19             	cmp    ecx,0x19
c0008e58:	77 37                	ja     c0008e91 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008e5a:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0008e61:	85 c9                	test   ecx,ecx
c0008e63:	74 2c                	je     c0008e91 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008e65:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008e6b:	85 c9                	test   ecx,ecx
c0008e6d:	74 22                	je     c0008e91 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008e6f:	b8 06 00 00 00       	mov    eax,0x6
c0008e74:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008e78:	75 17                	jne    c0008e91 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008e7a:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008e7c:	89 f0                	mov    eax,esi
c0008e7e:	83 c2 0d             	add    edx,0xd
c0008e81:	0f b6 f0             	movzx  esi,al
c0008e84:	0f b6 db             	movzx  ebx,bl
c0008e87:	56                   	push   esi
c0008e88:	53                   	push   ebx
c0008e89:	52                   	push   edx
c0008e8a:	51                   	push   ecx
c0008e8b:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008e8e:	83 c4 10             	add    esp,0x10
c0008e91:	5b                   	pop    ebx
c0008e92:	5e                   	pop    esi
c0008e93:	5f                   	pop    edi
c0008e94:	c3                   	ret    
c0008e95:	90                   	nop

c0008e96 <File::exists()>:
c0008e96:	83 ec 0c             	sub    esp,0xc
c0008e99:	31 c0                	xor    eax,eax
c0008e9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e9f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008ea6:	83 f9 19             	cmp    ecx,0x19
c0008ea9:	77 24                	ja     c0008ecf <File::exists()+0x39>
c0008eab:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0008eb2:	85 c9                	test   ecx,ecx
c0008eb4:	74 19                	je     c0008ecf <File::exists()+0x39>
c0008eb6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008ebc:	85 c9                	test   ecx,ecx
c0008ebe:	74 0f                	je     c0008ecf <File::exists()+0x39>
c0008ec0:	83 c2 0d             	add    edx,0xd
c0008ec3:	50                   	push   eax
c0008ec4:	50                   	push   eax
c0008ec5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008ec7:	52                   	push   edx
c0008ec8:	51                   	push   ecx
c0008ec9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008ecc:	83 c4 10             	add    esp,0x10
c0008ecf:	83 c4 0c             	add    esp,0xc
c0008ed2:	c3                   	ret    
c0008ed3:	90                   	nop

c0008ed4 <File::stat(unsigned long long*, bool*)>:
c0008ed4:	56                   	push   esi
c0008ed5:	53                   	push   ebx
c0008ed6:	50                   	push   eax
c0008ed7:	b8 0b 00 00 00       	mov    eax,0xb
c0008edc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ee0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ee4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008eeb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008eef:	83 f9 19             	cmp    ecx,0x19
c0008ef2:	77 3d                	ja     c0008f31 <File::stat(unsigned long long*, bool*)+0x5d>
c0008ef4:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0008efb:	85 c9                	test   ecx,ecx
c0008efd:	74 32                	je     c0008f31 <File::stat(unsigned long long*, bool*)+0x5d>
c0008eff:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008f05:	85 c9                	test   ecx,ecx
c0008f07:	74 28                	je     c0008f31 <File::stat(unsigned long long*, bool*)+0x5d>
c0008f09:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008f0b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008f0f:	74 13                	je     c0008f24 <File::stat(unsigned long long*, bool*)+0x50>
c0008f11:	83 ec 04             	sub    esp,0x4
c0008f14:	56                   	push   esi
c0008f15:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008f1b:	51                   	push   ecx
c0008f1c:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008f1f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0008f22:	eb 0a                	jmp    c0008f2e <File::stat(unsigned long long*, bool*)+0x5a>
c0008f24:	53                   	push   ebx
c0008f25:	83 c2 0d             	add    edx,0xd
c0008f28:	56                   	push   esi
c0008f29:	52                   	push   edx
c0008f2a:	51                   	push   ecx
c0008f2b:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008f2e:	83 c4 10             	add    esp,0x10
c0008f31:	5a                   	pop    edx
c0008f32:	5b                   	pop    ebx
c0008f33:	5e                   	pop    esi
c0008f34:	c3                   	ret    

c0008f35 <Fs::setcwd(Process*, char*)>:
c0008f35:	55                   	push   ebp
c0008f36:	57                   	push   edi
c0008f37:	56                   	push   esi
c0008f38:	53                   	push   ebx
c0008f39:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008f3f:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c0008f46:	6a 00                	push   0x0
c0008f48:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008f4e:	57                   	push   edi
c0008f4f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0008f56:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008f5a:	56                   	push   esi
c0008f5b:	e8 3c f9 ff ff       	call   c000889c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008f60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008f63:	e8 08 76 ff ff       	call   c0000570 <strlen>
c0008f68:	83 c4 10             	add    esp,0x10
c0008f6b:	83 f8 02             	cmp    eax,0x2
c0008f6e:	77 15                	ja     c0008f85 <Fs::setcwd(Process*, char*)+0x50>
c0008f70:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008f75:	83 eb 41             	sub    ebx,0x41
c0008f78:	8b 04 9d e0 5a 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffca520]
c0008f7f:	85 c0                	test   eax,eax
c0008f81:	75 1c                	jne    c0008f9f <Fs::setcwd(Process*, char*)+0x6a>
c0008f83:	eb 2f                	jmp    c0008fb4 <Fs::setcwd(Process*, char*)+0x7f>
c0008f85:	83 ec 0c             	sub    esp,0xc
c0008f88:	56                   	push   esi
c0008f89:	e8 e2 75 ff ff       	call   c0000570 <strlen>
c0008f8e:	83 c4 10             	add    esp,0x10
c0008f91:	83 f8 03             	cmp    eax,0x3
c0008f94:	75 57                	jne    c0008fed <Fs::setcwd(Process*, char*)+0xb8>
c0008f96:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008f9b:	75 50                	jne    c0008fed <Fs::setcwd(Process*, char*)+0xb8>
c0008f9d:	eb d1                	jmp    c0008f70 <Fs::setcwd(Process*, char*)+0x3b>
c0008f9f:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008fa6:	75 0c                	jne    c0008fb4 <Fs::setcwd(Process*, char*)+0x7f>
c0008fa8:	83 ec 0c             	sub    esp,0xc
c0008fab:	50                   	push   eax
c0008fac:	e8 2b 24 00 00       	call   c000b3dc <LogicalDisk::mount()>
c0008fb1:	83 c4 10             	add    esp,0x10
c0008fb4:	b8 03 00 00 00       	mov    eax,0x3
c0008fb9:	83 fb 19             	cmp    ebx,0x19
c0008fbc:	0f 87 c6 00 00 00    	ja     c0009088 <Fs::setcwd(Process*, char*)+0x153>
c0008fc2:	8b 14 9d e0 5a 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffca520]
c0008fc9:	b8 05 00 00 00       	mov    eax,0x5
c0008fce:	85 d2                	test   edx,edx
c0008fd0:	0f 84 b2 00 00 00    	je     c0009088 <Fs::setcwd(Process*, char*)+0x153>
c0008fd6:	b8 06 00 00 00       	mov    eax,0x6
c0008fdb:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008fe2:	0f 85 92 00 00 00    	jne    c000907a <Fs::setcwd(Process*, char*)+0x145>
c0008fe8:	e9 9b 00 00 00       	jmp    c0009088 <Fs::setcwd(Process*, char*)+0x153>
c0008fed:	83 ec 0c             	sub    esp,0xc
c0008ff0:	68 14 01 00 00       	push   0x114
c0008ff5:	e8 fd 72 00 00       	call   c00102f7 <malloc>
c0008ffa:	83 c4 0c             	add    esp,0xc
c0008ffd:	89 c3                	mov    ebx,eax
c0008fff:	55                   	push   ebp
c0009000:	56                   	push   esi
c0009001:	50                   	push   eax
c0009002:	e8 ad fb ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c0009007:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000900c:	83 c4 0c             	add    esp,0xc
c000900f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0009013:	50                   	push   eax
c0009014:	8d 44 24 10          	lea    eax,[esp+0x10]
c0009018:	50                   	push   eax
c0009019:	53                   	push   ebx
c000901a:	e8 b5 fe ff ff       	call   c0008ed4 <File::stat(unsigned long long*, bool*)>
c000901f:	83 c4 10             	add    esp,0x10
c0009022:	83 f8 02             	cmp    eax,0x2
c0009025:	74 27                	je     c000904e <Fs::setcwd(Process*, char*)+0x119>
c0009027:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000902c:	75 1c                	jne    c000904a <Fs::setcwd(Process*, char*)+0x115>
c000902e:	b8 02 00 00 00       	mov    eax,0x2
c0009033:	85 db                	test   ebx,ebx
c0009035:	74 51                	je     c0009088 <Fs::setcwd(Process*, char*)+0x153>
c0009037:	83 ec 0c             	sub    esp,0xc
c000903a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000903c:	53                   	push   ebx
c000903d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009040:	83 c4 10             	add    esp,0x10
c0009043:	b8 02 00 00 00       	mov    eax,0x2
c0009048:	eb 3e                	jmp    c0009088 <Fs::setcwd(Process*, char*)+0x153>
c000904a:	85 c0                	test   eax,eax
c000904c:	74 1c                	je     c000906a <Fs::setcwd(Process*, char*)+0x135>
c000904e:	b8 01 00 00 00       	mov    eax,0x1
c0009053:	85 db                	test   ebx,ebx
c0009055:	74 31                	je     c0009088 <Fs::setcwd(Process*, char*)+0x153>
c0009057:	83 ec 0c             	sub    esp,0xc
c000905a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000905c:	53                   	push   ebx
c000905d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009060:	83 c4 10             	add    esp,0x10
c0009063:	b8 01 00 00 00       	mov    eax,0x1
c0009068:	eb 1e                	jmp    c0009088 <Fs::setcwd(Process*, char*)+0x153>
c000906a:	85 db                	test   ebx,ebx
c000906c:	74 0c                	je     c000907a <Fs::setcwd(Process*, char*)+0x145>
c000906e:	83 ec 0c             	sub    esp,0xc
c0009071:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009073:	53                   	push   ebx
c0009074:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009077:	83 c4 10             	add    esp,0x10
c000907a:	50                   	push   eax
c000907b:	50                   	push   eax
c000907c:	56                   	push   esi
c000907d:	57                   	push   edi
c000907e:	e8 bd 75 ff ff       	call   c0000640 <strcpy>
c0009083:	83 c4 10             	add    esp,0x10
c0009086:	31 c0                	xor    eax,eax
c0009088:	81 c4 1c 02 00 00    	add    esp,0x21c
c000908e:	5b                   	pop    ebx
c000908f:	5e                   	pop    esi
c0009090:	5f                   	pop    edi
c0009091:	5d                   	pop    ebp
c0009092:	c3                   	ret    
c0009093:	90                   	nop

c0009094 <Directory::Directory(char const*, Process*)>:
c0009094:	83 ec 0c             	sub    esp,0xc
c0009097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000909b:	83 ec 08             	sub    esp,0x8
c000909e:	6a 00                	push   0x0
c00090a0:	50                   	push   eax
c00090a1:	e8 ea a7 00 00       	call   c0013890 <UnixFile::UnixFile(int)>
c00090a6:	83 c4 10             	add    esp,0x10
c00090a9:	ba 74 aa 02 c0       	mov    edx,0xc002aa74
c00090ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b2:	89 10                	mov    DWORD PTR [eax],edx
c00090b4:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c00090b9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00090bd:	0f 95 c0             	setne  al
c00090c0:	0f b6 c0             	movzx  eax,al
c00090c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00090c7:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00090cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00090d1:	83 c2 0d             	add    edx,0xd
c00090d4:	50                   	push   eax
c00090d5:	51                   	push   ecx
c00090d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090da:	52                   	push   edx
c00090db:	e8 bc f7 ff ff       	call   c000889c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00090e0:	83 c4 10             	add    esp,0x10
c00090e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00090ea:	83 e8 41             	sub    eax,0x41
c00090ed:	88 c2                	mov    dl,al
c00090ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00090f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0009101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009105:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000910b:	0f b6 c0             	movzx  eax,al
c000910e:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0009115:	85 c0                	test   eax,eax
c0009117:	74 3e                	je     c0009157 <Directory::Directory(char const*, Process*)+0xc3>
c0009119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000911d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009123:	0f b6 c0             	movzx  eax,al
c0009126:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c000912d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009133:	85 c0                	test   eax,eax
c0009135:	75 20                	jne    c0009157 <Directory::Directory(char const*, Process*)+0xc3>
c0009137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000913b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0009141:	0f b6 c0             	movzx  eax,al
c0009144:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	50                   	push   eax
c000914f:	e8 88 22 00 00       	call   c000b3dc <LogicalDisk::mount()>
c0009154:	83 c4 10             	add    esp,0x10
c0009157:	90                   	nop
c0009158:	83 c4 0c             	add    esp,0xc
c000915b:	c3                   	ret    

c000915c <Directory::open()>:
c000915c:	53                   	push   ebx
c000915d:	b8 0b 00 00 00       	mov    eax,0xb
c0009162:	83 ec 08             	sub    esp,0x8
c0009165:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009169:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0009170:	83 fa 19             	cmp    edx,0x19
c0009173:	77 3d                	ja     c00091b2 <Directory::open()+0x56>
c0009175:	8b 14 95 e0 5a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffca520]
c000917c:	85 d2                	test   edx,edx
c000917e:	74 32                	je     c00091b2 <Directory::open()+0x56>
c0009180:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0009186:	85 d2                	test   edx,edx
c0009188:	74 28                	je     c00091b2 <Directory::open()+0x56>
c000918a:	b8 06 00 00 00       	mov    eax,0x6
c000918f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0009193:	75 1d                	jne    c00091b2 <Directory::open()+0x56>
c0009195:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000919b:	50                   	push   eax
c000919c:	8b 02                	mov    eax,DWORD PTR [edx]
c000919e:	51                   	push   ecx
c000919f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00091a2:	51                   	push   ecx
c00091a3:	52                   	push   edx
c00091a4:	ff 50 50             	call   DWORD PTR [eax+0x50]
c00091a7:	83 c4 10             	add    esp,0x10
c00091aa:	85 c0                	test   eax,eax
c00091ac:	75 04                	jne    c00091b2 <Directory::open()+0x56>
c00091ae:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00091b2:	83 c4 08             	add    esp,0x8
c00091b5:	5b                   	pop    ebx
c00091b6:	c3                   	ret    
c00091b7:	90                   	nop

c00091b8 <Directory::close()>:
c00091b8:	53                   	push   ebx
c00091b9:	b8 0b 00 00 00       	mov    eax,0xb
c00091be:	83 ec 08             	sub    esp,0x8
c00091c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00091c5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00091cc:	83 f9 19             	cmp    ecx,0x19
c00091cf:	77 41                	ja     c0009212 <Directory::close()+0x5a>
c00091d1:	8b 1c 8d e0 5a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffca520]
c00091d8:	85 db                	test   ebx,ebx
c00091da:	74 36                	je     c0009212 <Directory::close()+0x5a>
c00091dc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00091e3:	74 2d                	je     c0009212 <Directory::close()+0x5a>
c00091e5:	b8 05 00 00 00       	mov    eax,0x5
c00091ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00091ee:	74 22                	je     c0009212 <Directory::close()+0x5a>
c00091f0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00091f4:	8b 04 8d e0 5a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffca520]
c00091fb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009201:	53                   	push   ebx
c0009202:	53                   	push   ebx
c0009203:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009205:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000920b:	50                   	push   eax
c000920c:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000920f:	83 c4 10             	add    esp,0x10
c0009212:	83 c4 08             	add    esp,0x8
c0009215:	5b                   	pop    ebx
c0009216:	c3                   	ret    
c0009217:	90                   	nop

c0009218 <Directory::unlink()>:
c0009218:	83 ec 0c             	sub    esp,0xc
c000921b:	b8 0b 00 00 00       	mov    eax,0xb
c0009220:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009224:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000922b:	83 f9 19             	cmp    ecx,0x19
c000922e:	77 2f                	ja     c000925f <Directory::unlink()+0x47>
c0009230:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0009237:	85 c9                	test   ecx,ecx
c0009239:	74 24                	je     c000925f <Directory::unlink()+0x47>
c000923b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009241:	85 c9                	test   ecx,ecx
c0009243:	74 1a                	je     c000925f <Directory::unlink()+0x47>
c0009245:	b8 06 00 00 00       	mov    eax,0x6
c000924a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000924e:	75 0f                	jne    c000925f <Directory::unlink()+0x47>
c0009250:	83 c2 0d             	add    edx,0xd
c0009253:	50                   	push   eax
c0009254:	50                   	push   eax
c0009255:	8b 01                	mov    eax,DWORD PTR [ecx]
c0009257:	52                   	push   edx
c0009258:	51                   	push   ecx
c0009259:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000925c:	83 c4 10             	add    esp,0x10
c000925f:	83 c4 0c             	add    esp,0xc
c0009262:	c3                   	ret    
c0009263:	90                   	nop

c0009264 <Directory::rename(char const*)>:
c0009264:	83 ec 0c             	sub    esp,0xc
c0009267:	b8 0b 00 00 00       	mov    eax,0xb
c000926c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009270:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009277:	83 f9 19             	cmp    ecx,0x19
c000927a:	77 32                	ja     c00092ae <Directory::rename(char const*)+0x4a>
c000927c:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0009283:	85 c9                	test   ecx,ecx
c0009285:	74 27                	je     c00092ae <Directory::rename(char const*)+0x4a>
c0009287:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000928d:	85 c9                	test   ecx,ecx
c000928f:	74 1d                	je     c00092ae <Directory::rename(char const*)+0x4a>
c0009291:	b8 06 00 00 00       	mov    eax,0x6
c0009296:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000929a:	75 12                	jne    c00092ae <Directory::rename(char const*)+0x4a>
c000929c:	83 c2 0d             	add    edx,0xd
c000929f:	50                   	push   eax
c00092a0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00092a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00092a6:	52                   	push   edx
c00092a7:	51                   	push   ecx
c00092a8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00092ab:	83 c4 10             	add    esp,0x10
c00092ae:	83 c4 0c             	add    esp,0xc
c00092b1:	c3                   	ret    

c00092b2 <Directory::exists()>:
c00092b2:	83 ec 0c             	sub    esp,0xc
c00092b5:	31 c0                	xor    eax,eax
c00092b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00092bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00092c2:	83 f9 19             	cmp    ecx,0x19
c00092c5:	77 24                	ja     c00092eb <Directory::exists()+0x39>
c00092c7:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c00092ce:	85 c9                	test   ecx,ecx
c00092d0:	74 19                	je     c00092eb <Directory::exists()+0x39>
c00092d2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00092d8:	85 c9                	test   ecx,ecx
c00092da:	74 0f                	je     c00092eb <Directory::exists()+0x39>
c00092dc:	83 c2 0d             	add    edx,0xd
c00092df:	50                   	push   eax
c00092e0:	50                   	push   eax
c00092e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00092e3:	52                   	push   edx
c00092e4:	51                   	push   ecx
c00092e5:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00092e8:	83 c4 10             	add    esp,0x10
c00092eb:	83 c4 0c             	add    esp,0xc
c00092ee:	c3                   	ret    
c00092ef:	90                   	nop

c00092f0 <Directory::read(dirent*)>:
c00092f0:	83 ec 1c             	sub    esp,0x1c
c00092f3:	b8 0b 00 00 00       	mov    eax,0xb
c00092f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00092fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0009303:	83 f9 19             	cmp    ecx,0x19
c0009306:	77 30                	ja     c0009338 <Directory::read(dirent*)+0x48>
c0009308:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c000930f:	85 c9                	test   ecx,ecx
c0009311:	74 25                	je     c0009338 <Directory::read(dirent*)+0x48>
c0009313:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000931a:	74 1c                	je     c0009338 <Directory::read(dirent*)+0x48>
c000931c:	83 ec 0c             	sub    esp,0xc
c000931f:	8b 02                	mov    eax,DWORD PTR [edx]
c0009321:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0009325:	51                   	push   ecx
c0009326:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000932a:	6a 00                	push   0x0
c000932c:	68 10 01 00 00       	push   0x110
c0009331:	52                   	push   edx
c0009332:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009335:	83 c4 20             	add    esp,0x20
c0009338:	83 c4 1c             	add    esp,0x1c
c000933b:	c3                   	ret    

c000933c <Directory::create()>:
c000933c:	83 ec 0c             	sub    esp,0xc
c000933f:	b8 0b 00 00 00       	mov    eax,0xb
c0009344:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009348:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000934f:	83 f9 19             	cmp    ecx,0x19
c0009352:	77 2f                	ja     c0009383 <Directory::create()+0x47>
c0009354:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c000935b:	85 c9                	test   ecx,ecx
c000935d:	74 24                	je     c0009383 <Directory::create()+0x47>
c000935f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0009365:	85 c9                	test   ecx,ecx
c0009367:	74 1a                	je     c0009383 <Directory::create()+0x47>
c0009369:	b8 06 00 00 00       	mov    eax,0x6
c000936e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0009372:	75 0f                	jne    c0009383 <Directory::create()+0x47>
c0009374:	83 c2 0d             	add    edx,0xd
c0009377:	50                   	push   eax
c0009378:	50                   	push   eax
c0009379:	8b 01                	mov    eax,DWORD PTR [ecx]
c000937b:	52                   	push   edx
c000937c:	51                   	push   ecx
c000937d:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0009380:	83 c4 10             	add    esp,0x10
c0009383:	83 c4 0c             	add    esp,0xc
c0009386:	c3                   	ret    
c0009387:	90                   	nop

c0009388 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0009388:	b8 0a 00 00 00       	mov    eax,0xa
c000938d:	c3                   	ret    
c000938e:	66 90                	xchg   ax,ax

c0009390 <Bus::Bus(char const*)>:
c0009390:	83 ec 0c             	sub    esp,0xc
c0009393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009397:	83 ec 08             	sub    esp,0x8
c000939a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000939e:	50                   	push   eax
c000939f:	e8 3e 12 00 00       	call   c000a5e2 <Device::Device(char const*)>
c00093a4:	83 c4 10             	add    esp,0x10
c00093a7:	ba 90 aa 02 c0       	mov    edx,0xc002aa90
c00093ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093b6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00093c0:	90                   	nop
c00093c1:	83 c4 0c             	add    esp,0xc
c00093c4:	c3                   	ret    
c00093c5:	90                   	nop
c00093c6:	66 90                	xchg   ax,ax

c00093c8 <Bus::~Bus()>:
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	ba 90 aa 02 c0       	mov    edx,0xc002aa90
c00093d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093d4:	89 10                	mov    DWORD PTR [eax],edx
c00093d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093da:	83 ec 0c             	sub    esp,0xc
c00093dd:	50                   	push   eax
c00093de:	e8 9f 0f 00 00       	call   c000a382 <Device::~Device()>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	90                   	nop
c00093e7:	83 c4 0c             	add    esp,0xc
c00093ea:	c3                   	ret    
c00093eb:	90                   	nop

c00093ec <Bus::~Bus()>:
c00093ec:	83 ec 0c             	sub    esp,0xc
c00093ef:	83 ec 0c             	sub    esp,0xc
c00093f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093f6:	e8 cd ff ff ff       	call   c00093c8 <Bus::~Bus()>
c00093fb:	83 c4 10             	add    esp,0x10
c00093fe:	83 ec 08             	sub    esp,0x8
c0009401:	68 58 01 00 00       	push   0x158
c0009406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000940a:	e8 f5 49 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000940f:	83 c4 10             	add    esp,0x10
c0009412:	83 c4 0c             	add    esp,0xc
c0009415:	c3                   	ret    

c0009416 <KeBeepThread(void*)>:
c0009416:	83 ec 0c             	sub    esp,0xc
c0009419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000941d:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0009424:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c000942b:	75 01                	jne    c000942e <KeBeepThread(void*)+0x18>
c000942d:	fb                   	sti    
c000942e:	6b c0 0a             	imul   eax,eax,0xa
c0009431:	52                   	push   edx
c0009432:	52                   	push   edx
c0009433:	99                   	cdq    
c0009434:	52                   	push   edx
c0009435:	50                   	push   eax
c0009436:	e8 9d e0 00 00       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c000943b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009442:	e8 94 21 01 00       	call   c001b5db <HalMakeBeep(int)>
c0009447:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000944f:	83 c4 1c             	add    esp,0x1c
c0009452:	e9 4d df 00 00       	jmp    c00173a4 <blockTask(TaskState)>

c0009457 <KeBeep(int, int, bool)>:
c0009457:	56                   	push   esi
c0009458:	53                   	push   ebx
c0009459:	83 ec 10             	sub    esp,0x10
c000945c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009460:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009468:	e8 6e 21 01 00       	call   c001b5db <HalMakeBeep(int)>
c000946d:	83 c4 10             	add    esp,0x10
c0009470:	89 f0                	mov    eax,esi
c0009472:	84 c0                	test   al,al
c0009474:	74 1f                	je     c0009495 <KeBeep(int, int, bool)+0x3e>
c0009476:	50                   	push   eax
c0009477:	50                   	push   eax
c0009478:	6b c3 0a             	imul   eax,ebx,0xa
c000947b:	99                   	cdq    
c000947c:	52                   	push   edx
c000947d:	50                   	push   eax
c000947e:	e8 55 e0 00 00       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c0009483:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000948b:	83 c4 14             	add    esp,0x14
c000948e:	5b                   	pop    ebx
c000948f:	5e                   	pop    esi
c0009490:	e9 46 21 01 00       	jmp    c001b5db <HalMakeBeep(int)>
c0009495:	68 e6 00 00 00       	push   0xe6
c000949a:	53                   	push   ebx
c000949b:	68 16 94 00 c0       	push   0xc0009416
c00094a0:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c00094a6:	e8 6d db 00 00       	call   c0017018 <Process::createThread(void (*)(void*), void*, int)>
c00094ab:	83 c4 14             	add    esp,0x14
c00094ae:	5b                   	pop    ebx
c00094af:	5e                   	pop    esi
c00094b0:	c3                   	ret    
c00094b1:	90                   	nop

c00094b2 <KeLoadTimezoneStrings()>:
c00094b2:	55                   	push   ebp
c00094b3:	89 e5                	mov    ebp,esp
c00094b5:	53                   	push   ebx
c00094b6:	83 ec 44             	sub    esp,0x44
c00094b9:	c6 05 20 53 03 c0 01 	mov    BYTE PTR ds:0xc0035320,0x1
c00094c0:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c00094c7:	83 ec 0c             	sub    esp,0xc
c00094ca:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c00094cd:	e8 25 6e 00 00       	call   c00102f7 <malloc>
c00094d2:	83 c4 10             	add    esp,0x10
c00094d5:	89 c3                	mov    ebx,eax
c00094d7:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c00094dc:	83 ec 04             	sub    esp,0x4
c00094df:	50                   	push   eax
c00094e0:	68 c0 aa 02 c0       	push   0xc002aac0
c00094e5:	53                   	push   ebx
c00094e6:	e8 c9 f6 ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c00094eb:	83 c4 10             	add    esp,0x10
c00094ee:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00094f1:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00094f5:	75 10                	jne    c0009507 <KeLoadTimezoneStrings()+0x55>
c00094f7:	83 ec 0c             	sub    esp,0xc
c00094fa:	68 df aa 02 c0       	push   0xc002aadf
c00094ff:	e8 48 72 00 00       	call   c001074c <KePanic(char const*)>
c0009504:	83 c4 10             	add    esp,0x10
c0009507:	83 ec 08             	sub    esp,0x8
c000950a:	6a 01                	push   0x1
c000950c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000950f:	e8 be f6 ff ff       	call   c0008bd2 <File::open(FileOpenMode)>
c0009514:	83 c4 10             	add    esp,0x10
c0009517:	83 ec 04             	sub    esp,0x4
c000951a:	8d 45 cf             	lea    eax,[ebp-0x31]
c000951d:	50                   	push   eax
c000951e:	8d 45 d0             	lea    eax,[ebp-0x30]
c0009521:	50                   	push   eax
c0009522:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009525:	e8 aa f9 ff ff       	call   c0008ed4 <File::stat(unsigned long long*, bool*)>
c000952a:	83 c4 10             	add    esp,0x10
c000952d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0009530:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0009533:	83 ec 08             	sub    esp,0x8
c0009536:	50                   	push   eax
c0009537:	68 f5 aa 02 c0       	push   0xc002aaf5
c000953c:	e8 3b da ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009541:	83 c4 10             	add    esp,0x10
c0009544:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0009547:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000954a:	83 c0 01             	add    eax,0x1
c000954d:	83 ec 0c             	sub    esp,0xc
c0009550:	50                   	push   eax
c0009551:	e8 a1 6d 00 00       	call   c00102f7 <malloc>
c0009556:	83 c4 10             	add    esp,0x10
c0009559:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000955c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c000955f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0009562:	83 ec 04             	sub    esp,0x4
c0009565:	50                   	push   eax
c0009566:	6a 00                	push   0x0
c0009568:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000956b:	e8 80 6f ff ff       	call   c00004f0 <memset>
c0009570:	83 c4 10             	add    esp,0x10
c0009573:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009576:	8b 00                	mov    eax,DWORD PTR [eax]
c0009578:	83 c0 0c             	add    eax,0xc
c000957b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000957d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0009580:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0009583:	83 ec 0c             	sub    esp,0xc
c0009586:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0009589:	53                   	push   ebx
c000958a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000958d:	52                   	push   edx
c000958e:	50                   	push   eax
c000958f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009592:	ff d1                	call   ecx
c0009594:	83 c4 20             	add    esp,0x20
c0009597:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	50                   	push   eax
c000959e:	68 05 ab 02 c0       	push   0xc002ab05
c00095a3:	e8 d4 d9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00095a8:	83 c4 10             	add    esp,0x10
c00095ab:	83 ec 0c             	sub    esp,0xc
c00095ae:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095b1:	e8 7a f6 ff ff       	call   c0008c30 <File::close()>
c00095b6:	83 c4 10             	add    esp,0x10
c00095b9:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00095bd:	74 15                	je     c00095d4 <KeLoadTimezoneStrings()+0x122>
c00095bf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00095c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00095c4:	83 c0 08             	add    eax,0x8
c00095c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00095c9:	83 ec 0c             	sub    esp,0xc
c00095cc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095cf:	ff d0                	call   eax
c00095d1:	83 c4 10             	add    esp,0x10
c00095d4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00095db:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00095e2:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c00095e9:	7f 3a                	jg     c0009625 <KeLoadTimezoneStrings()+0x173>
c00095eb:	83 ec 0c             	sub    esp,0xc
c00095ee:	6a 78                	push   0x78
c00095f0:	e8 02 6d 00 00       	call   c00102f7 <malloc>
c00095f5:	83 c4 10             	add    esp,0x10
c00095f8:	89 c2                	mov    edx,eax
c00095fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095fd:	89 14 85 40 53 03 c0 	mov    DWORD PTR [eax*4-0x3ffcacc0],edx
c0009604:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009607:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c000960e:	83 ec 08             	sub    esp,0x8
c0009611:	68 0e ab 02 c0       	push   0xc002ab0e
c0009616:	50                   	push   eax
c0009617:	e8 24 70 ff ff       	call   c0000640 <strcpy>
c000961c:	83 c4 10             	add    esp,0x10
c000961f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0009623:	eb bd                	jmp    c00095e2 <KeLoadTimezoneStrings()+0x130>
c0009625:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000962c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000962f:	8d 50 01             	lea    edx,[eax+0x1]
c0009632:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0009635:	89 c2                	mov    edx,eax
c0009637:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000963a:	01 d0                	add    eax,edx
c000963c:	8a 00                	mov    al,BYTE PTR [eax]
c000963e:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0009641:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0009645:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009648:	0f be c0             	movsx  eax,al
c000964b:	83 f8 0d             	cmp    eax,0xd
c000964e:	0f 84 82 01 00 00    	je     c00097d6 <KeLoadTimezoneStrings()+0x324>
c0009654:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0009657:	0f be c0             	movsx  eax,al
c000965a:	83 f8 09             	cmp    eax,0x9
c000965d:	75 44                	jne    c00096a3 <KeLoadTimezoneStrings()+0x1f1>
c000965f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009662:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c0009669:	83 ec 0c             	sub    esp,0xc
c000966c:	50                   	push   eax
c000966d:	e8 fe 6e ff ff       	call   c0000570 <strlen>
c0009672:	83 c4 10             	add    esp,0x10
c0009675:	83 f8 08             	cmp    eax,0x8
c0009678:	0f 96 c0             	setbe  al
c000967b:	0f b6 c0             	movzx  eax,al
c000967e:	85 c0                	test   eax,eax
c0009680:	0f 84 56 01 00 00    	je     c00097dc <KeLoadTimezoneStrings()+0x32a>
c0009686:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009689:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c0009690:	83 ec 08             	sub    esp,0x8
c0009693:	68 0e ab 02 c0       	push   0xc002ab0e
c0009698:	50                   	push   eax
c0009699:	e8 a2 71 ff ff       	call   c0000840 <strcat>
c000969e:	83 c4 10             	add    esp,0x10
c00096a1:	eb bc                	jmp    c000965f <KeLoadTimezoneStrings()+0x1ad>
c00096a3:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c00096a6:	0f be c0             	movsx  eax,al
c00096a9:	83 f8 0a             	cmp    eax,0xa
c00096ac:	0f 85 9b 00 00 00    	jne    c000974d <KeLoadTimezoneStrings()+0x29b>
c00096b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00096b5:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c00096bc:	83 ec 0c             	sub    esp,0xc
c00096bf:	50                   	push   eax
c00096c0:	e8 ab 6e ff ff       	call   c0000570 <strlen>
c00096c5:	83 c4 10             	add    esp,0x10
c00096c8:	83 f8 35             	cmp    eax,0x35
c00096cb:	0f 96 c0             	setbe  al
c00096ce:	0f b6 c0             	movzx  eax,al
c00096d1:	85 c0                	test   eax,eax
c00096d3:	74 1d                	je     c00096f2 <KeLoadTimezoneStrings()+0x240>
c00096d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00096d8:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c00096df:	83 ec 08             	sub    esp,0x8
c00096e2:	68 0e ab 02 c0       	push   0xc002ab0e
c00096e7:	50                   	push   eax
c00096e8:	e8 53 71 ff ff       	call   c0000840 <strcat>
c00096ed:	83 c4 10             	add    esp,0x10
c00096f0:	eb c0                	jmp    c00096b2 <KeLoadTimezoneStrings()+0x200>
c00096f2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c00096f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00096f9:	89 c2                	mov    edx,eax
c00096fb:	c1 fa 1f             	sar    edx,0x1f
c00096fe:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0009701:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0009704:	39 c8                	cmp    eax,ecx
c0009706:	89 d0                	mov    eax,edx
c0009708:	19 d8                	sbb    eax,ebx
c000970a:	0f 82 d2 00 00 00    	jb     c00097e2 <KeLoadTimezoneStrings()+0x330>
c0009710:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009713:	a3 24 53 03 c0       	mov    ds:0xc0035324,eax
c0009718:	83 ec 08             	sub    esp,0x8
c000971b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000971e:	68 10 ab 02 c0       	push   0xc002ab10
c0009723:	e8 54 d8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009728:	83 c4 10             	add    esp,0x10
c000972b:	a1 24 53 03 c0       	mov    eax,ds:0xc0035324
c0009730:	83 ec 08             	sub    esp,0x8
c0009733:	50                   	push   eax
c0009734:	68 25 ab 02 c0       	push   0xc002ab25
c0009739:	e8 3e d8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000973e:	83 c4 10             	add    esp,0x10
c0009741:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009748:	e9 9b 00 00 00       	jmp    c00097e8 <KeLoadTimezoneStrings()+0x336>
c000974d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009750:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c0009757:	83 ec 0c             	sub    esp,0xc
c000975a:	50                   	push   eax
c000975b:	e8 10 6e ff ff       	call   c0000570 <strlen>
c0009760:	83 c4 10             	add    esp,0x10
c0009763:	83 f8 31             	cmp    eax,0x31
c0009766:	0f 96 c0             	setbe  al
c0009769:	0f b6 c0             	movzx  eax,al
c000976c:	85 c0                	test   eax,eax
c000976e:	74 1f                	je     c000978f <KeLoadTimezoneStrings()+0x2dd>
c0009770:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009773:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c000977a:	83 ec 08             	sub    esp,0x8
c000977d:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0009780:	52                   	push   edx
c0009781:	50                   	push   eax
c0009782:	e8 b9 70 ff ff       	call   c0000840 <strcat>
c0009787:	83 c4 10             	add    esp,0x10
c000978a:	e9 9d fe ff ff       	jmp    c000962c <KeLoadTimezoneStrings()+0x17a>
c000978f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009792:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c0009799:	83 ec 0c             	sub    esp,0xc
c000979c:	50                   	push   eax
c000979d:	e8 ce 6d ff ff       	call   c0000570 <strlen>
c00097a2:	83 c4 10             	add    esp,0x10
c00097a5:	83 f8 32             	cmp    eax,0x32
c00097a8:	0f 94 c0             	sete   al
c00097ab:	0f b6 c0             	movzx  eax,al
c00097ae:	85 c0                	test   eax,eax
c00097b0:	0f 84 76 fe ff ff    	je     c000962c <KeLoadTimezoneStrings()+0x17a>
c00097b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00097b9:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c00097c0:	83 ec 08             	sub    esp,0x8
c00097c3:	68 29 ab 02 c0       	push   0xc002ab29
c00097c8:	50                   	push   eax
c00097c9:	e8 72 70 ff ff       	call   c0000840 <strcat>
c00097ce:	83 c4 10             	add    esp,0x10
c00097d1:	e9 56 fe ff ff       	jmp    c000962c <KeLoadTimezoneStrings()+0x17a>
c00097d6:	90                   	nop
c00097d7:	e9 50 fe ff ff       	jmp    c000962c <KeLoadTimezoneStrings()+0x17a>
c00097dc:	90                   	nop
c00097dd:	e9 4a fe ff ff       	jmp    c000962c <KeLoadTimezoneStrings()+0x17a>
c00097e2:	90                   	nop
c00097e3:	e9 44 fe ff ff       	jmp    c000962c <KeLoadTimezoneStrings()+0x17a>
c00097e8:	a1 24 53 03 c0       	mov    eax,ds:0xc0035324
c00097ed:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c00097f0:	7d 49                	jge    c000983b <KeLoadTimezoneStrings()+0x389>
c00097f2:	a1 24 53 03 c0       	mov    eax,ds:0xc0035324
c00097f7:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c00097fa:	0f 9c c0             	setl   al
c00097fd:	0f b6 d0             	movzx  edx,al
c0009800:	a1 24 53 03 c0       	mov    eax,ds:0xc0035324
c0009805:	52                   	push   edx
c0009806:	50                   	push   eax
c0009807:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000980a:	68 2e ab 02 c0       	push   0xc002ab2e
c000980f:	e8 68 d7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009814:	83 c4 10             	add    esp,0x10
c0009817:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000981a:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c0009821:	83 ec 04             	sub    esp,0x4
c0009824:	50                   	push   eax
c0009825:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0009828:	68 3c ab 02 c0       	push   0xc002ab3c
c000982d:	e8 4a d7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009832:	83 c4 10             	add    esp,0x10
c0009835:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0009839:	eb ad                	jmp    c00097e8 <KeLoadTimezoneStrings()+0x336>
c000983b:	90                   	nop
c000983c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000983f:	c9                   	leave  
c0009840:	c3                   	ret    

c0009841 <KeGetTimezoneStringFromID(int)>:
c0009841:	55                   	push   ebp
c0009842:	89 e5                	mov    ebp,esp
c0009844:	83 ec 08             	sub    esp,0x8
c0009847:	83 ec 08             	sub    esp,0x8
c000984a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000984d:	68 45 ab 02 c0       	push   0xc002ab45
c0009852:	e8 25 d7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009857:	83 c4 10             	add    esp,0x10
c000985a:	a0 20 53 03 c0       	mov    al,ds:0xc0035320
c000985f:	83 f0 01             	xor    eax,0x1
c0009862:	0f b6 c0             	movzx  eax,al
c0009865:	85 c0                	test   eax,eax
c0009867:	74 15                	je     c000987e <KeGetTimezoneStringFromID(int)+0x3d>
c0009869:	e8 44 fc ff ff       	call   c00094b2 <KeLoadTimezoneStrings()>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	68 63 ab 02 c0       	push   0xc002ab63
c0009876:	e8 01 d7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000987b:	83 c4 10             	add    esp,0x10
c000987e:	a1 24 53 03 c0       	mov    eax,ds:0xc0035324
c0009883:	83 ec 04             	sub    esp,0x4
c0009886:	50                   	push   eax
c0009887:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000988a:	68 74 ab 02 c0       	push   0xc002ab74
c000988f:	e8 e8 d6 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009894:	83 c4 10             	add    esp,0x10
c0009897:	a1 24 53 03 c0       	mov    eax,ds:0xc0035324
c000989c:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c000989f:	7d 06                	jge    c00098a7 <KeGetTimezoneStringFromID(int)+0x66>
c00098a1:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c00098a5:	79 07                	jns    c00098ae <KeGetTimezoneStringFromID(int)+0x6d>
c00098a7:	b8 00 00 00 00       	mov    eax,0x0
c00098ac:	eb 2e                	jmp    c00098dc <KeGetTimezoneStringFromID(int)+0x9b>
c00098ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b1:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c00098b8:	83 c0 01             	add    eax,0x1
c00098bb:	83 ec 04             	sub    esp,0x4
c00098be:	50                   	push   eax
c00098bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00098c2:	68 87 ab 02 c0       	push   0xc002ab87
c00098c7:	e8 b0 d6 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00098cc:	83 c4 10             	add    esp,0x10
c00098cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d2:	8b 04 85 40 53 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcacc0]
c00098d9:	83 c0 01             	add    eax,0x1
c00098dc:	c9                   	leave  
c00098dd:	c3                   	ret    

c00098de <KeUpdateTimezone(char const*)>:
c00098de:	55                   	push   ebp
c00098df:	89 e5                	mov    ebp,esp
c00098e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098e4:	8a 00                	mov    al,BYTE PTR [eax]
c00098e6:	0f be c0             	movsx  eax,al
c00098e9:	83 f8 2b             	cmp    eax,0x2b
c00098ec:	74 11                	je     c00098ff <KeUpdateTimezone(char const*)+0x21>
c00098ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098f1:	8a 00                	mov    al,BYTE PTR [eax]
c00098f3:	0f be c0             	movsx  eax,al
c00098f6:	83 f8 2d             	cmp    eax,0x2d
c00098f9:	0f 85 be 00 00 00    	jne    c00099bd <KeUpdateTimezone(char const*)+0xdf>
c00098ff:	c6 05 60 56 03 c0 00 	mov    BYTE PTR ds:0xc0035660,0x0
c0009906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009909:	83 c0 02             	add    eax,0x2
c000990c:	8a 00                	mov    al,BYTE PTR [eax]
c000990e:	0f be c0             	movsx  eax,al
c0009911:	83 f8 2e             	cmp    eax,0x2e
c0009914:	75 10                	jne    c0009926 <KeUpdateTimezone(char const*)+0x48>
c0009916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009919:	83 c0 03             	add    eax,0x3
c000991c:	8a 00                	mov    al,BYTE PTR [eax]
c000991e:	0f be c0             	movsx  eax,al
c0009921:	83 f8 35             	cmp    eax,0x35
c0009924:	74 20                	je     c0009946 <KeUpdateTimezone(char const*)+0x68>
c0009926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009929:	83 c0 03             	add    eax,0x3
c000992c:	8a 00                	mov    al,BYTE PTR [eax]
c000992e:	0f be c0             	movsx  eax,al
c0009931:	83 f8 2e             	cmp    eax,0x2e
c0009934:	75 14                	jne    c000994a <KeUpdateTimezone(char const*)+0x6c>
c0009936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009939:	83 c0 04             	add    eax,0x4
c000993c:	8a 00                	mov    al,BYTE PTR [eax]
c000993e:	0f be c0             	movsx  eax,al
c0009941:	83 f8 35             	cmp    eax,0x35
c0009944:	75 04                	jne    c000994a <KeUpdateTimezone(char const*)+0x6c>
c0009946:	b0 01                	mov    al,0x1
c0009948:	eb 02                	jmp    c000994c <KeUpdateTimezone(char const*)+0x6e>
c000994a:	b0 00                	mov    al,0x0
c000994c:	a2 61 56 03 c0       	mov    ds:0xc0035661,al
c0009951:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009954:	83 c0 01             	add    eax,0x1
c0009957:	8a 00                	mov    al,BYTE PTR [eax]
c0009959:	0f be c0             	movsx  eax,al
c000995c:	83 e8 30             	sub    eax,0x30
c000995f:	a3 64 56 03 c0       	mov    ds:0xc0035664,eax
c0009964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009967:	83 c0 03             	add    eax,0x3
c000996a:	8a 00                	mov    al,BYTE PTR [eax]
c000996c:	0f be c0             	movsx  eax,al
c000996f:	83 f8 2e             	cmp    eax,0x2e
c0009972:	75 2e                	jne    c00099a2 <KeUpdateTimezone(char const*)+0xc4>
c0009974:	8b 15 64 56 03 c0    	mov    edx,DWORD PTR ds:0xc0035664
c000997a:	89 d0                	mov    eax,edx
c000997c:	c1 e0 02             	shl    eax,0x2
c000997f:	01 d0                	add    eax,edx
c0009981:	01 c0                	add    eax,eax
c0009983:	a3 64 56 03 c0       	mov    ds:0xc0035664,eax
c0009988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000998b:	83 c0 02             	add    eax,0x2
c000998e:	8a 00                	mov    al,BYTE PTR [eax]
c0009990:	0f be c0             	movsx  eax,al
c0009993:	8d 50 d0             	lea    edx,[eax-0x30]
c0009996:	a1 64 56 03 c0       	mov    eax,ds:0xc0035664
c000999b:	01 d0                	add    eax,edx
c000999d:	a3 64 56 03 c0       	mov    ds:0xc0035664,eax
c00099a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099a5:	8a 00                	mov    al,BYTE PTR [eax]
c00099a7:	0f be c0             	movsx  eax,al
c00099aa:	83 f8 2d             	cmp    eax,0x2d
c00099ad:	75 26                	jne    c00099d5 <KeUpdateTimezone(char const*)+0xf7>
c00099af:	a1 64 56 03 c0       	mov    eax,ds:0xc0035664
c00099b4:	f7 d8                	neg    eax
c00099b6:	a3 64 56 03 c0       	mov    ds:0xc0035664,eax
c00099bb:	eb 18                	jmp    c00099d5 <KeUpdateTimezone(char const*)+0xf7>
c00099bd:	c6 05 60 56 03 c0 00 	mov    BYTE PTR ds:0xc0035660,0x0
c00099c4:	c6 05 61 56 03 c0 00 	mov    BYTE PTR ds:0xc0035661,0x0
c00099cb:	c7 05 64 56 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035664,0x0
c00099d5:	90                   	nop
c00099d6:	5d                   	pop    ebp
c00099d7:	c3                   	ret    

c00099d8 <KeSetTimezone(char const*)>:
c00099d8:	55                   	push   ebp
c00099d9:	89 e5                	mov    ebp,esp
c00099db:	83 ec 18             	sub    esp,0x18
c00099de:	83 ec 0c             	sub    esp,0xc
c00099e1:	68 94 ab 02 c0       	push   0xc002ab94
c00099e6:	e8 6d 44 00 00       	call   c000de58 <CmOpen(char const*)>
c00099eb:	83 c4 10             	add    esp,0x10
c00099ee:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00099f1:	83 ec 08             	sub    esp,0x8
c00099f4:	68 b9 ab 02 c0       	push   0xc002abb9
c00099f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00099fc:	e8 57 50 00 00       	call   c000ea58 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009a01:	83 c4 10             	add    esp,0x10
c0009a04:	83 ec 04             	sub    esp,0x4
c0009a07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009a0a:	50                   	push   eax
c0009a0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009a0e:	e8 17 49 00 00       	call   c000e32a <CmSetString(Reghive_Tag*, int, char const*)>
c0009a13:	83 c4 10             	add    esp,0x10
c0009a16:	83 ec 0c             	sub    esp,0xc
c0009a19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009a1c:	e8 55 45 00 00       	call   c000df76 <CmClose(Reghive_Tag*)>
c0009a21:	83 c4 10             	add    esp,0x10
c0009a24:	83 ec 0c             	sub    esp,0xc
c0009a27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009a2a:	e8 af fe ff ff       	call   c00098de <KeUpdateTimezone(char const*)>
c0009a2f:	83 c4 10             	add    esp,0x10
c0009a32:	90                   	nop
c0009a33:	c9                   	leave  
c0009a34:	c3                   	ret    

c0009a35 <KeSetTimezone(int)>:
c0009a35:	55                   	push   ebp
c0009a36:	89 e5                	mov    ebp,esp
c0009a38:	83 ec 18             	sub    esp,0x18
c0009a3b:	83 ec 0c             	sub    esp,0xc
c0009a3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009a41:	e8 fb fd ff ff       	call   c0009841 <KeGetTimezoneStringFromID(int)>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009a4c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009a50:	74 12                	je     c0009a64 <KeSetTimezone(int)+0x2f>
c0009a52:	83 ec 0c             	sub    esp,0xc
c0009a55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009a58:	e8 7b ff ff ff       	call   c00099d8 <KeSetTimezone(char const*)>
c0009a5d:	83 c4 10             	add    esp,0x10
c0009a60:	b0 01                	mov    al,0x1
c0009a62:	eb 02                	jmp    c0009a66 <KeSetTimezone(int)+0x31>
c0009a64:	b0 00                	mov    al,0x0
c0009a66:	c9                   	leave  
c0009a67:	c3                   	ret    

c0009a68 <KeLoadTimezone()>:
c0009a68:	55                   	push   ebp
c0009a69:	89 e5                	mov    ebp,esp
c0009a6b:	81 ec 68 02 00 00    	sub    esp,0x268
c0009a71:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0009a78:	83 ec 0c             	sub    esp,0xc
c0009a7b:	68 94 ab 02 c0       	push   0xc002ab94
c0009a80:	e8 d3 43 00 00       	call   c000de58 <CmOpen(char const*)>
c0009a85:	83 c4 10             	add    esp,0x10
c0009a88:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009a8b:	83 ec 08             	sub    esp,0x8
c0009a8e:	68 b9 ab 02 c0       	push   0xc002abb9
c0009a93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009a96:	e8 bd 4f 00 00       	call   c000ea58 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009a9b:	83 c4 10             	add    esp,0x10
c0009a9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009aa1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009aa5:	7e 18                	jle    c0009abf <KeLoadTimezone()+0x57>
c0009aa7:	83 ec 04             	sub    esp,0x4
c0009aaa:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009ab0:	50                   	push   eax
c0009ab1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009ab4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009ab7:	e8 0c 45 00 00       	call   c000dfc8 <CmGetString(Reghive_Tag*, int, char*)>
c0009abc:	83 c4 10             	add    esp,0x10
c0009abf:	83 ec 0c             	sub    esp,0xc
c0009ac2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009ac5:	e8 ac 44 00 00       	call   c000df76 <CmClose(Reghive_Tag*)>
c0009aca:	83 c4 10             	add    esp,0x10
c0009acd:	83 ec 0c             	sub    esp,0xc
c0009ad0:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009ad6:	50                   	push   eax
c0009ad7:	e8 02 fe ff ff       	call   c00098de <KeUpdateTimezone(char const*)>
c0009adc:	83 c4 10             	add    esp,0x10
c0009adf:	90                   	nop
c0009ae0:	c9                   	leave  
c0009ae1:	c3                   	ret    

c0009ae2 <Clock::Clock(char const*)>:
c0009ae2:	83 ec 0c             	sub    esp,0xc
c0009ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ae9:	83 ec 08             	sub    esp,0x8
c0009aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009af0:	50                   	push   eax
c0009af1:	e8 ec 0a 00 00       	call   c000a5e2 <Device::Device(char const*)>
c0009af6:	83 c4 10             	add    esp,0x10
c0009af9:	ba 18 ac 02 c0       	mov    edx,0xc002ac18
c0009afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b02:	89 10                	mov    DWORD PTR [eax],edx
c0009b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b08:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0009b12:	90                   	nop
c0009b13:	83 c4 0c             	add    esp,0xc
c0009b16:	c3                   	ret    
c0009b17:	90                   	nop

c0009b18 <Clock::~Clock()>:
c0009b18:	83 ec 0c             	sub    esp,0xc
c0009b1b:	ba 18 ac 02 c0       	mov    edx,0xc002ac18
c0009b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b24:	89 10                	mov    DWORD PTR [eax],edx
c0009b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b2a:	83 ec 0c             	sub    esp,0xc
c0009b2d:	50                   	push   eax
c0009b2e:	e8 4f 08 00 00       	call   c000a382 <Device::~Device()>
c0009b33:	83 c4 10             	add    esp,0x10
c0009b36:	90                   	nop
c0009b37:	83 c4 0c             	add    esp,0xc
c0009b3a:	c3                   	ret    
c0009b3b:	90                   	nop

c0009b3c <Clock::~Clock()>:
c0009b3c:	83 ec 0c             	sub    esp,0xc
c0009b3f:	83 ec 0c             	sub    esp,0xc
c0009b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b46:	e8 cd ff ff ff       	call   c0009b18 <Clock::~Clock()>
c0009b4b:	83 c4 10             	add    esp,0x10
c0009b4e:	83 ec 08             	sub    esp,0x8
c0009b51:	68 58 01 00 00       	push   0x158
c0009b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b5a:	e8 a5 42 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c0009b5f:	83 c4 10             	add    esp,0x10
c0009b62:	83 c4 0c             	add    esp,0xc
c0009b65:	c3                   	ret    

c0009b66 <Clock::timeInSecondsLocal()>:
c0009b66:	55                   	push   ebp
c0009b67:	89 e5                	mov    ebp,esp
c0009b69:	53                   	push   ebx
c0009b6a:	83 ec 04             	sub    esp,0x4
c0009b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b72:	83 c0 24             	add    eax,0x24
c0009b75:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b77:	83 ec 0c             	sub    esp,0xc
c0009b7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009b7d:	ff d0                	call   eax
c0009b7f:	83 c4 10             	add    esp,0x10
c0009b82:	89 c1                	mov    ecx,eax
c0009b84:	89 d3                	mov    ebx,edx
c0009b86:	a0 60 56 03 c0       	mov    al,ds:0xc0035660
c0009b8b:	0f b6 d0             	movzx  edx,al
c0009b8e:	a1 64 56 03 c0       	mov    eax,ds:0xc0035664
c0009b93:	01 c2                	add    edx,eax
c0009b95:	89 d0                	mov    eax,edx
c0009b97:	01 c0                	add    eax,eax
c0009b99:	01 d0                	add    eax,edx
c0009b9b:	01 c0                	add    eax,eax
c0009b9d:	01 d0                	add    eax,edx
c0009b9f:	c1 e0 05             	shl    eax,0x5
c0009ba2:	01 d0                	add    eax,edx
c0009ba4:	c1 e0 04             	shl    eax,0x4
c0009ba7:	89 c2                	mov    edx,eax
c0009ba9:	c1 fa 1f             	sar    edx,0x1f
c0009bac:	01 c1                	add    ecx,eax
c0009bae:	11 d3                	adc    ebx,edx
c0009bb0:	a0 61 56 03 c0       	mov    al,ds:0xc0035661
c0009bb5:	0f b6 c0             	movzx  eax,al
c0009bb8:	85 c0                	test   eax,eax
c0009bba:	74 0c                	je     c0009bc8 <Clock::timeInSecondsLocal()+0x62>
c0009bbc:	b8 08 07 00 00       	mov    eax,0x708
c0009bc1:	ba 00 00 00 00       	mov    edx,0x0
c0009bc6:	eb 0a                	jmp    c0009bd2 <Clock::timeInSecondsLocal()+0x6c>
c0009bc8:	b8 00 00 00 00       	mov    eax,0x0
c0009bcd:	ba 00 00 00 00       	mov    edx,0x0
c0009bd2:	01 c8                	add    eax,ecx
c0009bd4:	11 da                	adc    edx,ebx
c0009bd6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009bd9:	c9                   	leave  
c0009bda:	c3                   	ret    
c0009bdb:	90                   	nop

c0009bdc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009bdc:	55                   	push   ebp
c0009bdd:	89 e5                	mov    ebp,esp
c0009bdf:	56                   	push   esi
c0009be0:	53                   	push   ebx
c0009be1:	83 ec 10             	sub    esp,0x10
c0009be4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009be7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009bea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009bed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009bf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf5:	83 c0 2c             	add    eax,0x2c
c0009bf8:	8b 30                	mov    esi,DWORD PTR [eax]
c0009bfa:	a0 60 56 03 c0       	mov    al,ds:0xc0035660
c0009bff:	0f b6 d0             	movzx  edx,al
c0009c02:	a1 64 56 03 c0       	mov    eax,ds:0xc0035664
c0009c07:	01 c2                	add    edx,eax
c0009c09:	89 d0                	mov    eax,edx
c0009c0b:	01 c0                	add    eax,eax
c0009c0d:	01 d0                	add    eax,edx
c0009c0f:	01 c0                	add    eax,eax
c0009c11:	01 d0                	add    eax,edx
c0009c13:	c1 e0 05             	shl    eax,0x5
c0009c16:	01 d0                	add    eax,edx
c0009c18:	c1 e0 04             	shl    eax,0x4
c0009c1b:	89 c2                	mov    edx,eax
c0009c1d:	c1 fa 1f             	sar    edx,0x1f
c0009c20:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009c23:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c0009c26:	29 c1                	sub    ecx,eax
c0009c28:	19 d3                	sbb    ebx,edx
c0009c2a:	a0 61 56 03 c0       	mov    al,ds:0xc0035661
c0009c2f:	0f b6 c0             	movzx  eax,al
c0009c32:	85 c0                	test   eax,eax
c0009c34:	74 0c                	je     c0009c42 <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c0009c36:	b8 08 07 00 00       	mov    eax,0x708
c0009c3b:	ba 00 00 00 00       	mov    edx,0x0
c0009c40:	eb 0a                	jmp    c0009c4c <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c0009c42:	b8 00 00 00 00       	mov    eax,0x0
c0009c47:	ba 00 00 00 00       	mov    edx,0x0
c0009c4c:	29 c1                	sub    ecx,eax
c0009c4e:	19 d3                	sbb    ebx,edx
c0009c50:	89 c8                	mov    eax,ecx
c0009c52:	89 da                	mov    edx,ebx
c0009c54:	83 ec 04             	sub    esp,0x4
c0009c57:	52                   	push   edx
c0009c58:	50                   	push   eax
c0009c59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009c5c:	ff d6                	call   esi
c0009c5e:	83 c4 10             	add    esp,0x10
c0009c61:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009c64:	5b                   	pop    ebx
c0009c65:	5e                   	pop    esi
c0009c66:	5d                   	pop    ebp
c0009c67:	c3                   	ret    

c0009c68 <KeDatetimeToSeconds(datetime_t)>:
c0009c68:	55                   	push   ebp
c0009c69:	89 e5                	mov    ebp,esp
c0009c6b:	53                   	push   ebx
c0009c6c:	83 ec 24             	sub    esp,0x24
c0009c6f:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009c73:	2d 6c 07 00 00       	sub    eax,0x76c
c0009c78:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009c7c:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009c7f:	83 e8 01             	sub    eax,0x1
c0009c82:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009c85:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009c8c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009c93:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009c9a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009ca1:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009ca4:	0f b6 c8             	movzx  ecx,al
c0009ca7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009caa:	0f b6 d0             	movzx  edx,al
c0009cad:	89 d0                	mov    eax,edx
c0009caf:	01 c0                	add    eax,eax
c0009cb1:	01 d0                	add    eax,edx
c0009cb3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009cba:	01 d0                	add    eax,edx
c0009cbc:	c1 e0 02             	shl    eax,0x2
c0009cbf:	01 c1                	add    ecx,eax
c0009cc1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009cc4:	0f b6 d0             	movzx  edx,al
c0009cc7:	89 d0                	mov    eax,edx
c0009cc9:	01 c0                	add    eax,eax
c0009ccb:	01 d0                	add    eax,edx
c0009ccd:	01 c0                	add    eax,eax
c0009ccf:	01 d0                	add    eax,edx
c0009cd1:	c1 e0 05             	shl    eax,0x5
c0009cd4:	01 d0                	add    eax,edx
c0009cd6:	c1 e0 04             	shl    eax,0x4
c0009cd9:	01 c8                	add    eax,ecx
c0009cdb:	89 c2                	mov    edx,eax
c0009cdd:	c1 fa 1f             	sar    edx,0x1f
c0009ce0:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009ce3:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009ce6:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009ce9:	0f b6 c0             	movzx  eax,al
c0009cec:	83 e8 01             	sub    eax,0x1
c0009cef:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009cf2:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009cf5:	0f b6 c0             	movzx  eax,al
c0009cf8:	8b 04 85 e0 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5420]
c0009cff:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009d02:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009d05:	0f b6 c0             	movzx  eax,al
c0009d08:	83 f8 01             	cmp    eax,0x1
c0009d0b:	76 7c                	jbe    c0009d89 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009d0d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009d11:	0f b7 c0             	movzx  eax,ax
c0009d14:	83 e0 03             	and    eax,0x3
c0009d17:	85 c0                	test   eax,eax
c0009d19:	75 6e                	jne    c0009d89 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009d1b:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009d1f:	0f b7 c8             	movzx  ecx,ax
c0009d22:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009d27:	89 c8                	mov    eax,ecx
c0009d29:	f7 e2                	mul    edx
c0009d2b:	c1 ea 05             	shr    edx,0x5
c0009d2e:	89 d0                	mov    eax,edx
c0009d30:	c1 e0 02             	shl    eax,0x2
c0009d33:	01 d0                	add    eax,edx
c0009d35:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009d3c:	01 d0                	add    eax,edx
c0009d3e:	c1 e0 02             	shl    eax,0x2
c0009d41:	29 c1                	sub    ecx,eax
c0009d43:	89 c8                	mov    eax,ecx
c0009d45:	0f b7 c0             	movzx  eax,ax
c0009d48:	85 c0                	test   eax,eax
c0009d4a:	75 39                	jne    c0009d85 <KeDatetimeToSeconds(datetime_t)+0x11d>
c0009d4c:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009d50:	0f b7 c0             	movzx  eax,ax
c0009d53:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009d59:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009d5e:	f7 e9                	imul   ecx
c0009d60:	c1 fa 07             	sar    edx,0x7
c0009d63:	89 c8                	mov    eax,ecx
c0009d65:	c1 f8 1f             	sar    eax,0x1f
c0009d68:	29 c2                	sub    edx,eax
c0009d6a:	89 d0                	mov    eax,edx
c0009d6c:	c1 e0 02             	shl    eax,0x2
c0009d6f:	01 d0                	add    eax,edx
c0009d71:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009d78:	01 d0                	add    eax,edx
c0009d7a:	c1 e0 04             	shl    eax,0x4
c0009d7d:	29 c1                	sub    ecx,eax
c0009d7f:	89 ca                	mov    edx,ecx
c0009d81:	85 d2                	test   edx,edx
c0009d83:	75 04                	jne    c0009d89 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009d85:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009d89:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009d8d:	0f b7 c0             	movzx  eax,ax
c0009d90:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009d93:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009d96:	83 f8 46             	cmp    eax,0x46
c0009d99:	0f 9f c0             	setg   al
c0009d9c:	0f b6 c0             	movzx  eax,al
c0009d9f:	85 c0                	test   eax,eax
c0009da1:	0f 84 a4 00 00 00    	je     c0009e4b <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009da7:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009dae:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009db2:	0f b7 d0             	movzx  edx,ax
c0009db5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009db8:	39 c2                	cmp    edx,eax
c0009dba:	0f 8e b8 01 00 00    	jle    c0009f78 <KeDatetimeToSeconds(datetime_t)+0x310>
c0009dc0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009dc3:	83 e0 03             	and    eax,0x3
c0009dc6:	85 c0                	test   eax,eax
c0009dc8:	75 6b                	jne    c0009e35 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009dca:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009dcd:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009dd2:	f7 e9                	imul   ecx
c0009dd4:	c1 fa 05             	sar    edx,0x5
c0009dd7:	89 c8                	mov    eax,ecx
c0009dd9:	c1 f8 1f             	sar    eax,0x1f
c0009ddc:	29 c2                	sub    edx,eax
c0009dde:	89 d0                	mov    eax,edx
c0009de0:	c1 e0 02             	shl    eax,0x2
c0009de3:	01 d0                	add    eax,edx
c0009de5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009dec:	01 d0                	add    eax,edx
c0009dee:	c1 e0 02             	shl    eax,0x2
c0009df1:	29 c1                	sub    ecx,eax
c0009df3:	89 ca                	mov    edx,ecx
c0009df5:	85 d2                	test   edx,edx
c0009df7:	75 35                	jne    c0009e2e <KeDatetimeToSeconds(datetime_t)+0x1c6>
c0009df9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009dfc:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009e02:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009e07:	f7 e9                	imul   ecx
c0009e09:	c1 fa 07             	sar    edx,0x7
c0009e0c:	89 c8                	mov    eax,ecx
c0009e0e:	c1 f8 1f             	sar    eax,0x1f
c0009e11:	29 c2                	sub    edx,eax
c0009e13:	89 d0                	mov    eax,edx
c0009e15:	c1 e0 02             	shl    eax,0x2
c0009e18:	01 d0                	add    eax,edx
c0009e1a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009e21:	01 d0                	add    eax,edx
c0009e23:	c1 e0 04             	shl    eax,0x4
c0009e26:	29 c1                	sub    ecx,eax
c0009e28:	89 ca                	mov    edx,ecx
c0009e2a:	85 d2                	test   edx,edx
c0009e2c:	75 07                	jne    c0009e35 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009e2e:	b8 6e 01 00 00       	mov    eax,0x16e
c0009e33:	eb 05                	jmp    c0009e3a <KeDatetimeToSeconds(datetime_t)+0x1d2>
c0009e35:	b8 6d 01 00 00       	mov    eax,0x16d
c0009e3a:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009e3d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009e40:	83 c0 01             	add    eax,0x1
c0009e43:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009e46:	e9 63 ff ff ff       	jmp    c0009dae <KeDatetimeToSeconds(datetime_t)+0x146>
c0009e4b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009e4e:	83 f8 45             	cmp    eax,0x45
c0009e51:	0f 8f 21 01 00 00    	jg     c0009f78 <KeDatetimeToSeconds(datetime_t)+0x310>
c0009e57:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009e5e:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009e62:	0f b7 d0             	movzx  edx,ax
c0009e65:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009e68:	39 c2                	cmp    edx,eax
c0009e6a:	0f 8d 8b 00 00 00    	jge    c0009efb <KeDatetimeToSeconds(datetime_t)+0x293>
c0009e70:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009e73:	83 e0 03             	and    eax,0x3
c0009e76:	85 c0                	test   eax,eax
c0009e78:	75 6b                	jne    c0009ee5 <KeDatetimeToSeconds(datetime_t)+0x27d>
c0009e7a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009e7d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009e82:	f7 e9                	imul   ecx
c0009e84:	c1 fa 05             	sar    edx,0x5
c0009e87:	89 c8                	mov    eax,ecx
c0009e89:	c1 f8 1f             	sar    eax,0x1f
c0009e8c:	29 c2                	sub    edx,eax
c0009e8e:	89 d0                	mov    eax,edx
c0009e90:	c1 e0 02             	shl    eax,0x2
c0009e93:	01 d0                	add    eax,edx
c0009e95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009e9c:	01 d0                	add    eax,edx
c0009e9e:	c1 e0 02             	shl    eax,0x2
c0009ea1:	29 c1                	sub    ecx,eax
c0009ea3:	89 ca                	mov    edx,ecx
c0009ea5:	85 d2                	test   edx,edx
c0009ea7:	75 35                	jne    c0009ede <KeDatetimeToSeconds(datetime_t)+0x276>
c0009ea9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009eac:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009eb2:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009eb7:	f7 e9                	imul   ecx
c0009eb9:	c1 fa 07             	sar    edx,0x7
c0009ebc:	89 c8                	mov    eax,ecx
c0009ebe:	c1 f8 1f             	sar    eax,0x1f
c0009ec1:	29 c2                	sub    edx,eax
c0009ec3:	89 d0                	mov    eax,edx
c0009ec5:	c1 e0 02             	shl    eax,0x2
c0009ec8:	01 d0                	add    eax,edx
c0009eca:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009ed1:	01 d0                	add    eax,edx
c0009ed3:	c1 e0 04             	shl    eax,0x4
c0009ed6:	29 c1                	sub    ecx,eax
c0009ed8:	89 ca                	mov    edx,ecx
c0009eda:	85 d2                	test   edx,edx
c0009edc:	75 07                	jne    c0009ee5 <KeDatetimeToSeconds(datetime_t)+0x27d>
c0009ede:	b8 6e 01 00 00       	mov    eax,0x16e
c0009ee3:	eb 05                	jmp    c0009eea <KeDatetimeToSeconds(datetime_t)+0x282>
c0009ee5:	b8 6d 01 00 00       	mov    eax,0x16d
c0009eea:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009eed:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009ef0:	83 e8 01             	sub    eax,0x1
c0009ef3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009ef6:	e9 63 ff ff ff       	jmp    c0009e5e <KeDatetimeToSeconds(datetime_t)+0x1f6>
c0009efb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009efe:	83 e0 03             	and    eax,0x3
c0009f01:	85 c0                	test   eax,eax
c0009f03:	75 6b                	jne    c0009f70 <KeDatetimeToSeconds(datetime_t)+0x308>
c0009f05:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009f08:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009f0d:	f7 e9                	imul   ecx
c0009f0f:	c1 fa 05             	sar    edx,0x5
c0009f12:	89 c8                	mov    eax,ecx
c0009f14:	c1 f8 1f             	sar    eax,0x1f
c0009f17:	29 c2                	sub    edx,eax
c0009f19:	89 d0                	mov    eax,edx
c0009f1b:	c1 e0 02             	shl    eax,0x2
c0009f1e:	01 d0                	add    eax,edx
c0009f20:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009f27:	01 d0                	add    eax,edx
c0009f29:	c1 e0 02             	shl    eax,0x2
c0009f2c:	29 c1                	sub    ecx,eax
c0009f2e:	89 ca                	mov    edx,ecx
c0009f30:	85 d2                	test   edx,edx
c0009f32:	75 35                	jne    c0009f69 <KeDatetimeToSeconds(datetime_t)+0x301>
c0009f34:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009f37:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009f3d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009f42:	f7 e9                	imul   ecx
c0009f44:	c1 fa 07             	sar    edx,0x7
c0009f47:	89 c8                	mov    eax,ecx
c0009f49:	c1 f8 1f             	sar    eax,0x1f
c0009f4c:	29 c2                	sub    edx,eax
c0009f4e:	89 d0                	mov    eax,edx
c0009f50:	c1 e0 02             	shl    eax,0x2
c0009f53:	01 d0                	add    eax,edx
c0009f55:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009f5c:	01 d0                	add    eax,edx
c0009f5e:	c1 e0 04             	shl    eax,0x4
c0009f61:	29 c1                	sub    ecx,eax
c0009f63:	89 ca                	mov    edx,ecx
c0009f65:	85 d2                	test   edx,edx
c0009f67:	75 07                	jne    c0009f70 <KeDatetimeToSeconds(datetime_t)+0x308>
c0009f69:	b8 6e 01 00 00       	mov    eax,0x16e
c0009f6e:	eb 05                	jmp    c0009f75 <KeDatetimeToSeconds(datetime_t)+0x30d>
c0009f70:	b8 6d 01 00 00       	mov    eax,0x16d
c0009f75:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009f78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009f7b:	89 c2                	mov    edx,eax
c0009f7d:	c1 fa 1f             	sar    edx,0x1f
c0009f80:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c0009f86:	6b c8 00             	imul   ecx,eax,0x0
c0009f89:	01 d9                	add    ecx,ebx
c0009f8b:	bb 80 51 01 00       	mov    ebx,0x15180
c0009f90:	f7 e3                	mul    ebx
c0009f92:	01 d1                	add    ecx,edx
c0009f94:	89 ca                	mov    edx,ecx
c0009f96:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009f99:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009f9c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009f9f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009fa2:	83 c4 24             	add    esp,0x24
c0009fa5:	5b                   	pop    ebx
c0009fa6:	5d                   	pop    ebp
c0009fa7:	c3                   	ret    

c0009fa8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009fa8:	55                   	push   ebp
c0009fa9:	89 e5                	mov    ebp,esp
c0009fab:	56                   	push   esi
c0009fac:	53                   	push   ebx
c0009fad:	83 ec 20             	sub    esp,0x20
c0009fb0:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009fb3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009fb6:	e8 ad fc ff ff       	call   c0009c68 <KeDatetimeToSeconds(datetime_t)>
c0009fbb:	83 c4 08             	add    esp,0x8
c0009fbe:	89 c3                	mov    ebx,eax
c0009fc0:	89 d6                	mov    esi,edx
c0009fc2:	a0 60 56 03 c0       	mov    al,ds:0xc0035660
c0009fc7:	0f b6 d0             	movzx  edx,al
c0009fca:	a1 64 56 03 c0       	mov    eax,ds:0xc0035664
c0009fcf:	01 c2                	add    edx,eax
c0009fd1:	89 d0                	mov    eax,edx
c0009fd3:	01 c0                	add    eax,eax
c0009fd5:	01 d0                	add    eax,edx
c0009fd7:	01 c0                	add    eax,eax
c0009fd9:	01 d0                	add    eax,edx
c0009fdb:	c1 e0 05             	shl    eax,0x5
c0009fde:	01 d0                	add    eax,edx
c0009fe0:	c1 e0 04             	shl    eax,0x4
c0009fe3:	89 c2                	mov    edx,eax
c0009fe5:	c1 fa 1f             	sar    edx,0x1f
c0009fe8:	29 c3                	sub    ebx,eax
c0009fea:	19 d6                	sbb    esi,edx
c0009fec:	a0 61 56 03 c0       	mov    al,ds:0xc0035661
c0009ff1:	0f b6 c0             	movzx  eax,al
c0009ff4:	85 c0                	test   eax,eax
c0009ff6:	74 0c                	je     c000a004 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c0009ff8:	b8 08 07 00 00       	mov    eax,0x708
c0009ffd:	ba 00 00 00 00       	mov    edx,0x0
c000a002:	eb 0a                	jmp    c000a00e <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c000a004:	b8 00 00 00 00       	mov    eax,0x0
c000a009:	ba 00 00 00 00       	mov    edx,0x0
c000a00e:	29 c3                	sub    ebx,eax
c000a010:	19 d6                	sbb    esi,edx
c000a012:	89 d8                	mov    eax,ebx
c000a014:	89 f2                	mov    edx,esi
c000a016:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a019:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000a01c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a01f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000a022:	89 d0                	mov    eax,edx
c000a024:	31 d2                	xor    edx,edx
c000a026:	89 c3                	mov    ebx,eax
c000a028:	89 d6                	mov    esi,edx
c000a02a:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a02d:	80 e5 ff             	and    ch,0xff
c000a030:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c000a033:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000a036:	83 e1 00             	and    ecx,0x0
c000a039:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c000a03c:	83 ec 0c             	sub    esp,0xc
c000a03f:	56                   	push   esi
c000a040:	53                   	push   ebx
c000a041:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000a044:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000a047:	68 ce ab 02 c0       	push   0xc002abce
c000a04c:	e8 2b cf ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000a051:	83 c4 20             	add    esp,0x20
c000a054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a057:	8b 00                	mov    eax,DWORD PTR [eax]
c000a059:	83 c0 2c             	add    eax,0x2c
c000a05c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a05e:	83 ec 04             	sub    esp,0x4
c000a061:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000a064:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a067:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000a06a:	ff d0                	call   eax
c000a06c:	83 c4 10             	add    esp,0x10
c000a06f:	8d 65 f8             	lea    esp,[ebp-0x8]
c000a072:	5b                   	pop    ebx
c000a073:	5e                   	pop    esi
c000a074:	5d                   	pop    ebp
c000a075:	c3                   	ret    

c000a076 <KeSecondsToDatetime(unsigned long long)>:
c000a076:	55                   	push   ebp
c000a077:	89 e5                	mov    ebp,esp
c000a079:	83 ec 48             	sub    esp,0x48
c000a07c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a07f:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c000a082:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a085:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c000a088:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000a08b:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000a08e:	6a 00                	push   0x0
c000a090:	68 80 51 01 00       	push   0x15180
c000a095:	52                   	push   edx
c000a096:	50                   	push   eax
c000a097:	e8 f8 a3 01 00       	call   c0024494 <__udivdi3>
c000a09c:	83 c4 10             	add    esp,0x10
c000a09f:	05 6c fa 0a 00       	add    eax,0xafa6c
c000a0a4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a0a7:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000a0aa:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000a0ad:	6a 00                	push   0x0
c000a0af:	68 80 51 01 00       	push   0x15180
c000a0b4:	52                   	push   edx
c000a0b5:	50                   	push   eax
c000a0b6:	e8 d9 a4 01 00       	call   c0024594 <__umoddi3>
c000a0bb:	83 c4 10             	add    esp,0x10
c000a0be:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a0c1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000a0c5:	79 0b                	jns    c000a0d2 <KeSecondsToDatetime(unsigned long long)+0x5c>
c000a0c7:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000a0ce:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c000a0d2:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a0d5:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000a0da:	89 c8                	mov    eax,ecx
c000a0dc:	f7 ea                	imul   edx
c000a0de:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a0e1:	c1 f8 0b             	sar    eax,0xb
c000a0e4:	89 c2                	mov    edx,eax
c000a0e6:	89 c8                	mov    eax,ecx
c000a0e8:	c1 f8 1f             	sar    eax,0x1f
c000a0eb:	29 c2                	sub    edx,eax
c000a0ed:	89 d0                	mov    eax,edx
c000a0ef:	88 c2                	mov    dl,al
c000a0f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f4:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000a0f7:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a0fa:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000a0ff:	89 c8                	mov    eax,ecx
c000a101:	f7 ea                	imul   edx
c000a103:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a106:	c1 f8 0b             	sar    eax,0xb
c000a109:	89 c2                	mov    edx,eax
c000a10b:	89 c8                	mov    eax,ecx
c000a10d:	c1 f8 1f             	sar    eax,0x1f
c000a110:	29 c2                	sub    edx,eax
c000a112:	89 d0                	mov    eax,edx
c000a114:	01 c0                	add    eax,eax
c000a116:	01 d0                	add    eax,edx
c000a118:	01 c0                	add    eax,eax
c000a11a:	01 d0                	add    eax,edx
c000a11c:	c1 e0 05             	shl    eax,0x5
c000a11f:	01 d0                	add    eax,edx
c000a121:	c1 e0 04             	shl    eax,0x4
c000a124:	29 c1                	sub    ecx,eax
c000a126:	89 c8                	mov    eax,ecx
c000a128:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a12b:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a12e:	ba 89 88 88 88       	mov    edx,0x88888889
c000a133:	89 c8                	mov    eax,ecx
c000a135:	f7 ea                	imul   edx
c000a137:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a13a:	c1 f8 05             	sar    eax,0x5
c000a13d:	89 c2                	mov    edx,eax
c000a13f:	89 c8                	mov    eax,ecx
c000a141:	c1 f8 1f             	sar    eax,0x1f
c000a144:	29 c2                	sub    edx,eax
c000a146:	89 d0                	mov    eax,edx
c000a148:	88 c2                	mov    dl,al
c000a14a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000a150:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a153:	ba 89 88 88 88       	mov    edx,0x88888889
c000a158:	89 c8                	mov    eax,ecx
c000a15a:	f7 ea                	imul   edx
c000a15c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000a15f:	c1 f8 05             	sar    eax,0x5
c000a162:	89 c2                	mov    edx,eax
c000a164:	89 c8                	mov    eax,ecx
c000a166:	c1 f8 1f             	sar    eax,0x1f
c000a169:	29 c2                	sub    edx,eax
c000a16b:	89 d0                	mov    eax,edx
c000a16d:	01 c0                	add    eax,eax
c000a16f:	01 d0                	add    eax,edx
c000a171:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a178:	01 d0                	add    eax,edx
c000a17a:	c1 e0 02             	shl    eax,0x2
c000a17d:	29 c1                	sub    ecx,eax
c000a17f:	89 ca                	mov    edx,ecx
c000a181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a184:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c000a187:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a18b:	79 20                	jns    c000a1ad <KeSecondsToDatetime(unsigned long long)+0x137>
c000a18d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a190:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c000a196:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000a19b:	89 c8                	mov    eax,ecx
c000a19d:	f7 ea                	imul   edx
c000a19f:	c1 fa 0f             	sar    edx,0xf
c000a1a2:	89 c8                	mov    eax,ecx
c000a1a4:	c1 f8 1f             	sar    eax,0x1f
c000a1a7:	29 c2                	sub    edx,eax
c000a1a9:	89 d0                	mov    eax,edx
c000a1ab:	eb 18                	jmp    c000a1c5 <KeSecondsToDatetime(unsigned long long)+0x14f>
c000a1ad:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000a1b0:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000a1b5:	89 c8                	mov    eax,ecx
c000a1b7:	f7 ea                	imul   edx
c000a1b9:	c1 fa 0f             	sar    edx,0xf
c000a1bc:	89 c8                	mov    eax,ecx
c000a1be:	c1 f8 1f             	sar    eax,0x1f
c000a1c1:	29 c2                	sub    edx,eax
c000a1c3:	89 d0                	mov    eax,edx
c000a1c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000a1c8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000a1cb:	89 d0                	mov    eax,edx
c000a1cd:	c1 e0 03             	shl    eax,0x3
c000a1d0:	01 d0                	add    eax,edx
c000a1d2:	c1 e0 04             	shl    eax,0x4
c000a1d5:	01 d0                	add    eax,edx
c000a1d7:	c1 e0 04             	shl    eax,0x4
c000a1da:	29 d0                	sub    eax,edx
c000a1dc:	89 c2                	mov    edx,eax
c000a1de:	c1 e2 06             	shl    edx,0x6
c000a1e1:	29 c2                	sub    edx,eax
c000a1e3:	89 d0                	mov    eax,edx
c000a1e5:	f7 d8                	neg    eax
c000a1e7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000a1ea:	01 d0                	add    eax,edx
c000a1ec:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000a1ef:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a1f2:	c1 e8 02             	shr    eax,0x2
c000a1f5:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c000a1fa:	f7 e2                	mul    edx
c000a1fc:	c1 ea 07             	shr    edx,0x7
c000a1ff:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a202:	29 d0                	sub    eax,edx
c000a204:	89 c1                	mov    ecx,eax
c000a206:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a209:	c1 e8 02             	shr    eax,0x2
c000a20c:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c000a211:	f7 e2                	mul    edx
c000a213:	89 d0                	mov    eax,edx
c000a215:	c1 e8 0b             	shr    eax,0xb
c000a218:	01 c1                	add    ecx,eax
c000a21a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a21d:	c1 e8 04             	shr    eax,0x4
c000a220:	ba 41 d6 72 00       	mov    edx,0x72d641
c000a225:	f7 e2                	mul    edx
c000a227:	89 d0                	mov    eax,edx
c000a229:	c1 e8 04             	shr    eax,0x4
c000a22c:	29 c1                	sub    ecx,eax
c000a22e:	ba 61 f3 19 67       	mov    edx,0x6719f361
c000a233:	89 c8                	mov    eax,ecx
c000a235:	f7 e2                	mul    edx
c000a237:	89 c8                	mov    eax,ecx
c000a239:	29 d0                	sub    eax,edx
c000a23b:	d1 e8                	shr    eax,1
c000a23d:	01 d0                	add    eax,edx
c000a23f:	c1 e8 08             	shr    eax,0x8
c000a242:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000a245:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a248:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c000a24d:	f7 e2                	mul    edx
c000a24f:	89 d1                	mov    ecx,edx
c000a251:	c1 e9 05             	shr    ecx,0x5
c000a254:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000a257:	89 d0                	mov    eax,edx
c000a259:	c1 e0 03             	shl    eax,0x3
c000a25c:	01 d0                	add    eax,edx
c000a25e:	c1 e0 03             	shl    eax,0x3
c000a261:	01 d0                	add    eax,edx
c000a263:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a26a:	01 c2                	add    edx,eax
c000a26c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a26f:	c1 e8 02             	shr    eax,0x2
c000a272:	01 d0                	add    eax,edx
c000a274:	29 c1                	sub    ecx,eax
c000a276:	89 ca                	mov    edx,ecx
c000a278:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000a27b:	01 d0                	add    eax,edx
c000a27d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000a280:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000a283:	89 d0                	mov    eax,edx
c000a285:	c1 e0 02             	shl    eax,0x2
c000a288:	01 d0                	add    eax,edx
c000a28a:	83 c0 02             	add    eax,0x2
c000a28d:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c000a292:	f7 e2                	mul    edx
c000a294:	89 d0                	mov    eax,edx
c000a296:	c1 e8 07             	shr    eax,0x7
c000a299:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000a29c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000a29f:	89 d0                	mov    eax,edx
c000a2a1:	c1 e0 03             	shl    eax,0x3
c000a2a4:	01 d0                	add    eax,edx
c000a2a6:	01 c0                	add    eax,eax
c000a2a8:	01 d0                	add    eax,edx
c000a2aa:	c1 e0 03             	shl    eax,0x3
c000a2ad:	01 d0                	add    eax,edx
c000a2af:	83 c0 02             	add    eax,0x2
c000a2b2:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000a2b7:	f7 e2                	mul    edx
c000a2b9:	c1 ea 02             	shr    edx,0x2
c000a2bc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000a2bf:	29 d0                	sub    eax,edx
c000a2c1:	83 c0 01             	add    eax,0x1
c000a2c4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000a2c7:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000a2cb:	77 07                	ja     c000a2d4 <KeSecondsToDatetime(unsigned long long)+0x25e>
c000a2cd:	b8 02 00 00 00       	mov    eax,0x2
c000a2d2:	eb 05                	jmp    c000a2d9 <KeSecondsToDatetime(unsigned long long)+0x263>
c000a2d4:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c000a2d9:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c000a2dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000a2df:	89 d0                	mov    eax,edx
c000a2e1:	c1 e0 02             	shl    eax,0x2
c000a2e4:	01 d0                	add    eax,edx
c000a2e6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a2ed:	01 d0                	add    eax,edx
c000a2ef:	c1 e0 04             	shl    eax,0x4
c000a2f2:	89 c2                	mov    edx,eax
c000a2f4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000a2f7:	01 c2                	add    edx,eax
c000a2f9:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c000a2fd:	0f 96 c0             	setbe  al
c000a300:	0f b6 c0             	movzx  eax,al
c000a303:	01 d0                	add    eax,edx
c000a305:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000a308:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000a30b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a30e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000a312:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000a315:	83 c0 01             	add    eax,0x1
c000a318:	88 c2                	mov    dl,al
c000a31a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a31d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a320:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000a323:	88 c2                	mov    dl,al
c000a325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a328:	88 10                	mov    BYTE PTR [eax],dl
c000a32a:	90                   	nop
c000a32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a32e:	c9                   	leave  
c000a32f:	c2 04 00             	ret    0x4

c000a332 <Clock::timeInDatetimeLocal()>:
c000a332:	55                   	push   ebp
c000a333:	89 e5                	mov    ebp,esp
c000a335:	83 ec 08             	sub    esp,0x8
c000a338:	83 ec 0c             	sub    esp,0xc
c000a33b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000a33e:	e8 23 f8 ff ff       	call   c0009b66 <Clock::timeInSecondsLocal()>
c000a343:	83 c4 10             	add    esp,0x10
c000a346:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a349:	83 ec 04             	sub    esp,0x4
c000a34c:	52                   	push   edx
c000a34d:	50                   	push   eax
c000a34e:	51                   	push   ecx
c000a34f:	e8 22 fd ff ff       	call   c000a076 <KeSecondsToDatetime(unsigned long long)>
c000a354:	83 c4 0c             	add    esp,0xc
c000a357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a35a:	c9                   	leave  
c000a35b:	c2 04 00             	ret    0x4

c000a35e <Device::hibernate()>:
c000a35e:	c3                   	ret    
c000a35f:	90                   	nop

c000a360 <Device::wake()>:
c000a360:	c3                   	ret    
c000a361:	90                   	nop

c000a362 <Device::detect()>:
c000a362:	c3                   	ret    
c000a363:	90                   	nop

c000a364 <Device::disableLegacy()>:
c000a364:	c3                   	ret    
c000a365:	90                   	nop

c000a366 <Device::powerSaving(PowerSavingLevel)>:
c000a366:	c3                   	ret    
c000a367:	90                   	nop

c000a368 <DriverlessDevice::close(int, int, void*)>:
c000a368:	31 c0                	xor    eax,eax
c000a36a:	c3                   	ret    
c000a36b:	90                   	nop

c000a36c <DriverlessDevice::detect()>:
c000a36c:	c3                   	ret    
c000a36d:	90                   	nop

c000a36e <DriverlessDevice::open(int, int, void*)>:
c000a36e:	83 ec 18             	sub    esp,0x18
c000a371:	68 4c ac 02 c0       	push   0xc002ac4c
c000a376:	e8 d1 63 00 00       	call   c001074c <KePanic(char const*)>
c000a37b:	83 c8 ff             	or     eax,0xffffffff
c000a37e:	83 c4 1c             	add    esp,0x1c
c000a381:	c3                   	ret    

c000a382 <Device::~Device()>:
c000a382:	ba f0 ac 02 c0       	mov    edx,0xc002acf0
c000a387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a38b:	89 10                	mov    DWORD PTR [eax],edx
c000a38d:	90                   	nop
c000a38e:	c3                   	ret    
c000a38f:	90                   	nop

c000a390 <Device::~Device()>:
c000a390:	83 ec 0c             	sub    esp,0xc
c000a393:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a397:	e8 e6 ff ff ff       	call   c000a382 <Device::~Device()>
c000a39c:	83 c4 04             	add    esp,0x4
c000a39f:	83 ec 08             	sub    esp,0x8
c000a3a2:	68 58 01 00 00       	push   0x158
c000a3a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3ab:	e8 54 3a 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000a3b0:	83 c4 10             	add    esp,0x10
c000a3b3:	83 c4 0c             	add    esp,0xc
c000a3b6:	c3                   	ret    
c000a3b7:	90                   	nop

c000a3b8 <Device::findAndLoadDriver()>:
c000a3b8:	c7 44 24 04 6a ac 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ac6a
c000a3c0:	e9 b7 cb ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000a3c5:	90                   	nop

c000a3c6 <Device::preOpenPCI(PCIDeviceInfo)>:
c000a3c6:	57                   	push   edi
c000a3c7:	b9 09 00 00 00       	mov    ecx,0x9
c000a3cc:	56                   	push   esi
c000a3cd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a3d1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000a3d5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000a3df:	81 c7 18 01 00 00    	add    edi,0x118
c000a3e5:	fc                   	cld    
c000a3e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a3e8:	5e                   	pop    esi
c000a3e9:	5f                   	pop    edi
c000a3ea:	c3                   	ret    
c000a3eb:	90                   	nop

c000a3ec <Device::preOpenACPI(void*, char*, char*)>:
c000a3ec:	57                   	push   edi
c000a3ed:	b9 1e 00 00 00       	mov    ecx,0x1e
c000a3f2:	56                   	push   esi
c000a3f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a3fb:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000a405:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000a40b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000a411:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a415:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a417:	b9 0e 00 00 00       	mov    ecx,0xe
c000a41c:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000a422:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000a426:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a428:	5e                   	pop    esi
c000a429:	5f                   	pop    edi
c000a42a:	c3                   	ret    
c000a42b:	90                   	nop

c000a42c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000a42c:	53                   	push   ebx
c000a42d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a431:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a435:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a439:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a43d:	0f b6 c0             	movzx  eax,al
c000a440:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a444:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a448:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a44c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a450:	5b                   	pop    ebx
c000a451:	e9 3b 16 01 00       	jmp    c001ba91 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000a456 <Device::getParent()>:
c000a456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a45a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000a460:	c3                   	ret    
c000a461:	90                   	nop

c000a462 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000a462:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a466:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a46a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000a46f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a473:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a477:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a47b:	e9 73 17 01 00       	jmp    c001bbf3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000a480 <Device::addChild(Device*)>:
c000a480:	53                   	push   ebx
c000a481:	83 ec 08             	sub    esp,0x8
c000a484:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a488:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a48c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000a492:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000a498:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a49a:	85 d2                	test   edx,edx
c000a49c:	74 04                	je     c000a4a2 <Device::addChild(Device*)+0x22>
c000a49e:	89 d3                	mov    ebx,edx
c000a4a0:	eb f6                	jmp    c000a498 <Device::addChild(Device*)+0x18>
c000a4a2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a4a5:	83 ec 0c             	sub    esp,0xc
c000a4a8:	6a 08                	push   0x8
c000a4aa:	e8 48 5e 00 00       	call   c00102f7 <malloc>
c000a4af:	89 03                	mov    DWORD PTR [ebx],eax
c000a4b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a4b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a4be:	83 c4 18             	add    esp,0x18
c000a4c1:	5b                   	pop    ebx
c000a4c2:	c3                   	ret    
c000a4c3:	90                   	nop

c000a4c4 <Device::removeAllChildren()>:
c000a4c4:	56                   	push   esi
c000a4c5:	53                   	push   ebx
c000a4c6:	52                   	push   edx
c000a4c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a4cb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000a4d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a4d4:	74 17                	je     c000a4ed <Device::removeAllChildren()+0x29>
c000a4d6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a4d9:	85 c0                	test   eax,eax
c000a4db:	74 0c                	je     c000a4e9 <Device::removeAllChildren()+0x25>
c000a4dd:	83 ec 0c             	sub    esp,0xc
c000a4e0:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4e2:	50                   	push   eax
c000a4e3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000a4e6:	83 c4 10             	add    esp,0x10
c000a4e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a4eb:	eb e4                	jmp    c000a4d1 <Device::removeAllChildren()+0xd>
c000a4ed:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000a4f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a4f9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000a4ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a506:	58                   	pop    eax
c000a507:	5b                   	pop    ebx
c000a508:	5e                   	pop    esi
c000a509:	c3                   	ret    

c000a50a <Device::hibernateAll()>:
c000a50a:	53                   	push   ebx
c000a50b:	83 ec 14             	sub    esp,0x14
c000a50e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a512:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a514:	53                   	push   ebx
c000a515:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000a518:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a51e:	83 c4 10             	add    esp,0x10
c000a521:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a524:	74 0f                	je     c000a535 <Device::hibernateAll()+0x2b>
c000a526:	83 ec 0c             	sub    esp,0xc
c000a529:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a52c:	e8 d9 ff ff ff       	call   c000a50a <Device::hibernateAll()>
c000a531:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a533:	eb e9                	jmp    c000a51e <Device::hibernateAll()+0x14>
c000a535:	83 c4 08             	add    esp,0x8
c000a538:	5b                   	pop    ebx
c000a539:	c3                   	ret    

c000a53a <Device::wakeAll()>:
c000a53a:	53                   	push   ebx
c000a53b:	83 ec 14             	sub    esp,0x14
c000a53e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a542:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a544:	53                   	push   ebx
c000a545:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000a548:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a54e:	83 c4 10             	add    esp,0x10
c000a551:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a554:	74 0f                	je     c000a565 <Device::wakeAll()+0x2b>
c000a556:	83 ec 0c             	sub    esp,0xc
c000a559:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a55c:	e8 d9 ff ff ff       	call   c000a53a <Device::wakeAll()>
c000a561:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a563:	eb e9                	jmp    c000a54e <Device::wakeAll()+0x14>
c000a565:	83 c4 08             	add    esp,0x8
c000a568:	5b                   	pop    ebx
c000a569:	c3                   	ret    

c000a56a <Device::detectAll()>:
c000a56a:	53                   	push   ebx
c000a56b:	83 ec 14             	sub    esp,0x14
c000a56e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a572:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a574:	53                   	push   ebx
c000a575:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000a578:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a57e:	83 c4 10             	add    esp,0x10
c000a581:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a584:	74 0f                	je     c000a595 <Device::detectAll()+0x2b>
c000a586:	83 ec 0c             	sub    esp,0xc
c000a589:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a58c:	e8 d9 ff ff ff       	call   c000a56a <Device::detectAll()>
c000a591:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a593:	eb e9                	jmp    c000a57e <Device::detectAll()+0x14>
c000a595:	83 c4 08             	add    esp,0x8
c000a598:	5b                   	pop    ebx
c000a599:	c3                   	ret    

c000a59a <Device::disableLegacyAll()>:
c000a59a:	c3                   	ret    
c000a59b:	90                   	nop

c000a59c <Device::loadDriversForAll()>:
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <Device::powerSavingAll(PowerSavingLevel)>:
c000a59e:	56                   	push   esi
c000a59f:	53                   	push   ebx
c000a5a0:	83 ec 0c             	sub    esp,0xc
c000a5a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a5a7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000a5ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a5ad:	56                   	push   esi
c000a5ae:	53                   	push   ebx
c000a5af:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000a5b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a5b8:	83 c4 10             	add    esp,0x10
c000a5bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a5be:	74 0f                	je     c000a5cf <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000a5c0:	52                   	push   edx
c000a5c1:	52                   	push   edx
c000a5c2:	56                   	push   esi
c000a5c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a5c6:	e8 d3 ff ff ff       	call   c000a59e <Device::powerSavingAll(PowerSavingLevel)>
c000a5cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a5cd:	eb e9                	jmp    c000a5b8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000a5cf:	58                   	pop    eax
c000a5d0:	5b                   	pop    ebx
c000a5d1:	5e                   	pop    esi
c000a5d2:	c3                   	ret    
c000a5d3:	90                   	nop

c000a5d4 <Device::setName(char const*)>:
c000a5d4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000a5dc:	e9 5f 60 ff ff       	jmp    c0000640 <strcpy>
c000a5e1:	90                   	nop

c000a5e2 <Device::Device(char const*)>:
c000a5e2:	83 ec 1c             	sub    esp,0x1c
c000a5e5:	ba f0 ac 02 c0       	mov    edx,0xc002acf0
c000a5ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a5ee:	89 10                	mov    DWORD PTR [eax],edx
c000a5f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a5f4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000a5fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a602:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a60c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a610:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a61a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a61e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a628:	83 ec 08             	sub    esp,0x8
c000a62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a633:	e8 9c ff ff ff       	call   c000a5d4 <Device::setName(char const*)>
c000a638:	83 c4 10             	add    esp,0x10
c000a63b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000a643:	83 ec 0c             	sub    esp,0xc
c000a646:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a64a:	e8 a8 5c 00 00       	call   c00102f7 <malloc>
c000a64f:	83 c4 10             	add    esp,0x10
c000a652:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a658:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a65f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000a663:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000a669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a66d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a673:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000a679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a67d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000a683:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a68a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a68e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000a695:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a699:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000a6a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a6a4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000a6ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a6b2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000a6bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a6c0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000a6ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a6ce:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000a6d8:	90                   	nop
c000a6d9:	83 c4 1c             	add    esp,0x1c
c000a6dc:	c3                   	ret    
c000a6dd:	90                   	nop

c000a6de <Device::getName()>:
c000a6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6e2:	05 d0 00 00 00       	add    eax,0xd0
c000a6e7:	c3                   	ret    

c000a6e8 <Device::closeAll()>:
c000a6e8:	53                   	push   ebx
c000a6e9:	83 ec 08             	sub    esp,0x8
c000a6ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a6f0:	53                   	push   ebx
c000a6f1:	e8 e8 ff ff ff       	call   c000a6de <Device::getName()>
c000a6f6:	52                   	push   edx
c000a6f7:	50                   	push   eax
c000a6f8:	68 a4 ac 02 c0       	push   0xc002aca4
c000a6fd:	e8 7a c8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000a702:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a704:	6a 00                	push   0x0
c000a706:	6a 00                	push   0x0
c000a708:	6a 00                	push   0x0
c000a70a:	53                   	push   ebx
c000a70b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000a70e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a714:	83 c4 20             	add    esp,0x20
c000a717:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a71a:	74 12                	je     c000a72e <Device::closeAll()+0x46>
c000a71c:	83 ec 0c             	sub    esp,0xc
c000a71f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a722:	e8 c1 ff ff ff       	call   c000a6e8 <Device::closeAll()>
c000a727:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a729:	83 c4 10             	add    esp,0x10
c000a72c:	eb e9                	jmp    c000a717 <Device::closeAll()+0x2f>
c000a72e:	83 c4 08             	add    esp,0x8
c000a731:	5b                   	pop    ebx
c000a732:	c3                   	ret    
c000a733:	90                   	nop

c000a734 <DriverlessDevice::DriverlessDevice(char const*)>:
c000a734:	83 ec 0c             	sub    esp,0xc
c000a737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73b:	83 ec 08             	sub    esp,0x8
c000a73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a742:	50                   	push   eax
c000a743:	e8 9a fe ff ff       	call   c000a5e2 <Device::Device(char const*)>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	ba 1c ad 02 c0       	mov    edx,0xc002ad1c
c000a750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a754:	89 10                	mov    DWORD PTR [eax],edx
c000a756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a75a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000a764:	90                   	nop
c000a765:	83 c4 0c             	add    esp,0xc
c000a768:	c3                   	ret    
c000a769:	90                   	nop

c000a76a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000a76a:	57                   	push   edi
c000a76b:	56                   	push   esi
c000a76c:	53                   	push   ebx
c000a76d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a771:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000a775:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a779:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000a77f:	75 0c                	jne    c000a78d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000a781:	52                   	push   edx
c000a782:	52                   	push   edx
c000a783:	53                   	push   ebx
c000a784:	56                   	push   esi
c000a785:	e8 46 e7 01 00       	call   c0028ed0 <LinkedList<Device>::addElement(Device*)>
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000a793:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000a796:	74 12                	je     c000a7aa <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000a798:	50                   	push   eax
c000a799:	57                   	push   edi
c000a79a:	56                   	push   esi
c000a79b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a79e:	e8 c7 ff ff ff       	call   c000a76a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000a7a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000a7a5:	83 c4 10             	add    esp,0x10
c000a7a8:	eb e9                	jmp    c000a793 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000a7aa:	5b                   	pop    ebx
c000a7ab:	5e                   	pop    esi
c000a7ac:	5f                   	pop    edi
c000a7ad:	c3                   	ret    

c000a7ae <getDevicesOfType(DeviceType)>:
c000a7ae:	53                   	push   ebx
c000a7af:	83 ec 14             	sub    esp,0x14
c000a7b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a7b6:	53                   	push   ebx
c000a7b7:	e8 f0 e7 01 00       	call   c0028fac <LinkedList<Device>::LinkedList()>
c000a7bc:	83 c4 0c             	add    esp,0xc
c000a7bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7c3:	53                   	push   ebx
c000a7c4:	ff 35 08 61 03 c0    	push   DWORD PTR ds:0xc0036108
c000a7ca:	e8 9b ff ff ff       	call   c000a76a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000a7cf:	89 d8                	mov    eax,ebx
c000a7d1:	83 c4 18             	add    esp,0x18
c000a7d4:	5b                   	pop    ebx
c000a7d5:	c2 04 00             	ret    0x4

c000a7d8 <HardDiskController::HardDiskController(char const*)>:
c000a7d8:	83 ec 0c             	sub    esp,0xc
c000a7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7df:	83 ec 08             	sub    esp,0x8
c000a7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e6:	50                   	push   eax
c000a7e7:	e8 f6 fd ff ff       	call   c000a5e2 <Device::Device(char const*)>
c000a7ec:	83 c4 10             	add    esp,0x10
c000a7ef:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c000a7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7f8:	89 10                	mov    DWORD PTR [eax],edx
c000a7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7fe:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000a808:	90                   	nop
c000a809:	83 c4 0c             	add    esp,0xc
c000a80c:	c3                   	ret    
c000a80d:	90                   	nop
c000a80e:	66 90                	xchg   ax,ax

c000a810 <HardDiskController::~HardDiskController()>:
c000a810:	83 ec 0c             	sub    esp,0xc
c000a813:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c000a818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a81c:	89 10                	mov    DWORD PTR [eax],edx
c000a81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a822:	83 ec 0c             	sub    esp,0xc
c000a825:	50                   	push   eax
c000a826:	e8 57 fb ff ff       	call   c000a382 <Device::~Device()>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	90                   	nop
c000a82f:	83 c4 0c             	add    esp,0xc
c000a832:	c3                   	ret    
c000a833:	90                   	nop

c000a834 <HardDiskController::~HardDiskController()>:
c000a834:	83 ec 0c             	sub    esp,0xc
c000a837:	83 ec 0c             	sub    esp,0xc
c000a83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a83e:	e8 cd ff ff ff       	call   c000a810 <HardDiskController::~HardDiskController()>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	83 ec 08             	sub    esp,0x8
c000a849:	68 58 01 00 00       	push   0x158
c000a84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a852:	e8 ad 35 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000a857:	83 c4 10             	add    esp,0x10
c000a85a:	83 c4 0c             	add    esp,0xc
c000a85d:	c3                   	ret    

c000a85e <PhysicalDisk::eject()>:
c000a85e:	83 c8 ff             	or     eax,0xffffffff
c000a861:	c3                   	ret    

c000a862 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000a862:	83 ec 0c             	sub    esp,0xc
c000a865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a869:	83 ec 08             	sub    esp,0x8
c000a86c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a870:	50                   	push   eax
c000a871:	e8 6c fd ff ff       	call   c000a5e2 <Device::Device(char const*)>
c000a876:	83 c4 10             	add    esp,0x10
c000a879:	ba 74 ad 02 c0       	mov    edx,0xc002ad74
c000a87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a882:	89 10                	mov    DWORD PTR [eax],edx
c000a884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a888:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a893:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000a89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a89e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000a8a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a8b0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000a8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000a8c4:	90                   	nop
c000a8c5:	83 c4 0c             	add    esp,0xc
c000a8c8:	c3                   	ret    
c000a8c9:	90                   	nop

c000a8ca <PhysicalDisk::startCache()>:
c000a8ca:	56                   	push   esi
c000a8cb:	53                   	push   ebx
c000a8cc:	83 ec 10             	sub    esp,0x10
c000a8cf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000a8d3:	6a 44                	push   0x44
c000a8d5:	e8 1d 5a 00 00       	call   c00102f7 <malloc>
c000a8da:	89 c6                	mov    esi,eax
c000a8dc:	58                   	pop    eax
c000a8dd:	5a                   	pop    edx
c000a8de:	53                   	push   ebx
c000a8df:	56                   	push   esi
c000a8e0:	e8 a7 13 00 00       	call   c000bc8c <VCache::VCache(PhysicalDisk*)>
c000a8e5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000a8eb:	83 c4 14             	add    esp,0x14
c000a8ee:	5b                   	pop    ebx
c000a8ef:	5e                   	pop    esi
c000a8f0:	c3                   	ret    
c000a8f1:	90                   	nop

c000a8f2 <PhysicalDisk::~PhysicalDisk()>:
c000a8f2:	83 ec 0c             	sub    esp,0xc
c000a8f5:	ba 74 ad 02 c0       	mov    edx,0xc002ad74
c000a8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8fe:	89 10                	mov    DWORD PTR [eax],edx
c000a900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a904:	83 ec 0c             	sub    esp,0xc
c000a907:	50                   	push   eax
c000a908:	e8 75 fa ff ff       	call   c000a382 <Device::~Device()>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	90                   	nop
c000a911:	83 c4 0c             	add    esp,0xc
c000a914:	c3                   	ret    
c000a915:	90                   	nop

c000a916 <PhysicalDisk::~PhysicalDisk()>:
c000a916:	83 ec 0c             	sub    esp,0xc
c000a919:	83 ec 0c             	sub    esp,0xc
c000a91c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a920:	e8 cd ff ff ff       	call   c000a8f2 <PhysicalDisk::~PhysicalDisk()>
c000a925:	83 c4 10             	add    esp,0x10
c000a928:	83 ec 08             	sub    esp,0x8
c000a92b:	68 6c 01 00 00       	push   0x16c
c000a930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a934:	e8 cb 34 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000a939:	83 c4 10             	add    esp,0x10
c000a93c:	83 c4 0c             	add    esp,0xc
c000a93f:	c3                   	ret    

c000a940 <startGUI(void*)>:
c000a940:	55                   	push   ebp
c000a941:	89 e5                	mov    ebp,esp
c000a943:	83 ec 08             	sub    esp,0x8
c000a946:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c000a94e:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000a953:	85 c0                	test   eax,eax
c000a955:	75 01                	jne    c000a958 <startGUI(void*)+0x18>
c000a957:	fb                   	sti    
c000a958:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c000a95d:	83 ec 04             	sub    esp,0x4
c000a960:	6a 00                	push   0x0
c000a962:	50                   	push   eax
c000a963:	68 a4 ad 02 c0       	push   0xc002ada4
c000a968:	e8 db bf 00 00       	call   c0016948 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a96d:	83 c4 10             	add    esp,0x10
c000a970:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c000a975:	83 ec 04             	sub    esp,0x4
c000a978:	6a 00                	push   0x0
c000a97a:	50                   	push   eax
c000a97b:	68 be ad 02 c0       	push   0xc002adbe
c000a980:	e8 c3 bf 00 00       	call   c0016948 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a985:	83 c4 10             	add    esp,0x10
c000a988:	eb fe                	jmp    c000a988 <startGUI(void*)+0x48>

c000a98a <startGUIVESA(void*)>:
c000a98a:	55                   	push   ebp
c000a98b:	89 e5                	mov    ebp,esp
c000a98d:	83 ec 08             	sub    esp,0x8
c000a990:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c000a998:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000a99d:	85 c0                	test   eax,eax
c000a99f:	75 01                	jne    c000a9a2 <startGUIVESA(void*)+0x18>
c000a9a1:	fb                   	sti    
c000a9a2:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c000a9a7:	83 ec 04             	sub    esp,0x4
c000a9aa:	6a 00                	push   0x0
c000a9ac:	50                   	push   eax
c000a9ad:	68 dc ad 02 c0       	push   0xc002addc
c000a9b2:	e8 91 bf 00 00       	call   c0016948 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a9b7:	83 c4 10             	add    esp,0x10
c000a9ba:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c000a9bf:	83 ec 04             	sub    esp,0x4
c000a9c2:	6a 00                	push   0x0
c000a9c4:	50                   	push   eax
c000a9c5:	68 be ad 02 c0       	push   0xc002adbe
c000a9ca:	e8 79 bf 00 00       	call   c0016948 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000a9cf:	83 c4 10             	add    esp,0x10
c000a9d2:	eb fe                	jmp    c000a9d2 <startGUIVESA(void*)+0x48>

c000a9d4 <sendKeyToTerminal(unsigned char)>:
c000a9d4:	55                   	push   ebp
c000a9d5:	89 e5                	mov    ebp,esp
c000a9d7:	83 ec 28             	sub    esp,0x28
c000a9da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a9dd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000a9e0:	a1 f4 61 03 c0       	mov    eax,ds:0xc00361f4
c000a9e5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000a9e9:	83 ec 08             	sub    esp,0x8
c000a9ec:	52                   	push   edx
c000a9ed:	50                   	push   eax
c000a9ee:	e8 11 8a 00 00       	call   c0013404 <VgaText::receiveKey(unsigned char)>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a9fa:	83 f8 0a             	cmp    eax,0xa
c000a9fd:	74 16                	je     c000aa15 <sendKeyToTerminal(unsigned char)+0x41>
c000a9ff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000aa03:	83 f8 03             	cmp    eax,0x3
c000aa06:	74 0d                	je     c000aa15 <sendKeyToTerminal(unsigned char)+0x41>
c000aa08:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000aa0c:	83 f8 1c             	cmp    eax,0x1c
c000aa0f:	0f 85 92 00 00 00    	jne    c000aaa7 <sendKeyToTerminal(unsigned char)+0xd3>
c000aa15:	fa                   	cli    
c000aa16:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000aa1b:	83 c0 01             	add    eax,0x1
c000aa1e:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c000aa23:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c000aa28:	83 c0 01             	add    eax,0x1
c000aa2b:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c000aa30:	a1 80 56 03 c0       	mov    eax,ds:0xc0035680
c000aa35:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000aa38:	c7 05 80 56 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035680,0x0
c000aa42:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000aa46:	74 1f                	je     c000aa67 <sendKeyToTerminal(unsigned char)+0x93>
c000aa48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000aa4b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000aa4e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000aa51:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000aa54:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000aa57:	83 ec 0c             	sub    esp,0xc
c000aa5a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000aa5d:	e8 de cb 00 00       	call   c0017640 <unblockTask(ThreadControlBlock*)>
c000aa62:	83 c4 10             	add    esp,0x10
c000aa65:	eb db                	jmp    c000aa42 <sendKeyToTerminal(unsigned char)+0x6e>
c000aa67:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c000aa6c:	83 e8 01             	sub    eax,0x1
c000aa6f:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c000aa74:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c000aa79:	85 c0                	test   eax,eax
c000aa7b:	75 18                	jne    c000aa95 <sendKeyToTerminal(unsigned char)+0xc1>
c000aa7d:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c000aa82:	85 c0                	test   eax,eax
c000aa84:	74 0f                	je     c000aa95 <sendKeyToTerminal(unsigned char)+0xc1>
c000aa86:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c000aa90:	e8 4f c8 00 00       	call   c00172e4 <schedule()>
c000aa95:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c000aa9d:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000aaa2:	85 c0                	test   eax,eax
c000aaa4:	75 01                	jne    c000aaa7 <sendKeyToTerminal(unsigned char)+0xd3>
c000aaa6:	fb                   	sti    
c000aaa7:	90                   	nop
c000aaa8:	c9                   	leave  
c000aaa9:	c3                   	ret    

c000aaaa <sendKeyboardToken(KeyboardToken)>:
c000aaaa:	55                   	push   ebp
c000aaab:	89 e5                	mov    ebp,esp
c000aaad:	83 ec 18             	sub    esp,0x18
c000aab0:	e8 1c 65 00 00       	call   c0010fd1 <KeUserIOReceived()>
c000aab5:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000aab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aabb:	0f b7 c0             	movzx  eax,ax
c000aabe:	83 f2 01             	xor    edx,0x1
c000aac1:	88 90 a0 56 03 c0    	mov    BYTE PTR [eax-0x3ffca960],dl
c000aac7:	a1 88 56 03 c0       	mov    eax,ds:0xc0035688
c000aacc:	85 c0                	test   eax,eax
c000aace:	74 24                	je     c000aaf4 <sendKeyboardToken(KeyboardToken)+0x4a>
c000aad0:	8b 0d 88 56 03 c0    	mov    ecx,DWORD PTR ds:0xc0035688
c000aad6:	83 ec 04             	sub    esp,0x4
c000aad9:	68 a0 56 03 c0       	push   0xc00356a0
c000aade:	83 ec 08             	sub    esp,0x8
c000aae1:	89 e2                	mov    edx,esp
c000aae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aae6:	89 02                	mov    DWORD PTR [edx],eax
c000aae8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000aaeb:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000aaef:	ff d1                	call   ecx
c000aaf1:	83 c4 10             	add    esp,0x10
c000aaf4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000aaf8:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000aafb:	0f b6 c0             	movzx  eax,al
c000aafe:	85 c0                	test   eax,eax
c000ab00:	0f 84 da 00 00 00    	je     c000abe0 <sendKeyboardToken(KeyboardToken)+0x136>
c000ab06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab09:	0f b7 c0             	movzx  eax,ax
c000ab0c:	3d 18 03 00 00       	cmp    eax,0x318
c000ab11:	75 06                	jne    c000ab19 <sendKeyboardToken(KeyboardToken)+0x6f>
c000ab13:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000ab19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab1c:	0f b7 c0             	movzx  eax,ax
c000ab1f:	3d 19 03 00 00       	cmp    eax,0x319
c000ab24:	75 06                	jne    c000ab2c <sendKeyboardToken(KeyboardToken)+0x82>
c000ab26:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000ab2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab2f:	0f b7 c0             	movzx  eax,ax
c000ab32:	3d 1a 03 00 00       	cmp    eax,0x31a
c000ab37:	75 06                	jne    c000ab3f <sendKeyboardToken(KeyboardToken)+0x95>
c000ab39:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000ab3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab42:	0f b7 c0             	movzx  eax,ax
c000ab45:	3d 1b 03 00 00       	cmp    eax,0x31b
c000ab4a:	75 06                	jne    c000ab52 <sendKeyboardToken(KeyboardToken)+0xa8>
c000ab4c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000ab52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab55:	0f b7 c0             	movzx  eax,ax
c000ab58:	3d 1c 03 00 00       	cmp    eax,0x31c
c000ab5d:	75 06                	jne    c000ab65 <sendKeyboardToken(KeyboardToken)+0xbb>
c000ab5f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000ab65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab68:	0f b7 c0             	movzx  eax,ax
c000ab6b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000ab70:	75 06                	jne    c000ab78 <sendKeyboardToken(KeyboardToken)+0xce>
c000ab72:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ab78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab7b:	0f b7 c0             	movzx  eax,ax
c000ab7e:	3d 1e 03 00 00       	cmp    eax,0x31e
c000ab83:	75 06                	jne    c000ab8b <sendKeyboardToken(KeyboardToken)+0xe1>
c000ab85:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000ab8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ab8e:	0f b7 c0             	movzx  eax,ax
c000ab91:	3d 1f 03 00 00       	cmp    eax,0x31f
c000ab96:	75 06                	jne    c000ab9e <sendKeyboardToken(KeyboardToken)+0xf4>
c000ab98:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000ab9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aba1:	0f b7 c0             	movzx  eax,ax
c000aba4:	3d 20 03 00 00       	cmp    eax,0x320
c000aba9:	75 06                	jne    c000abb1 <sendKeyboardToken(KeyboardToken)+0x107>
c000abab:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000abb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abb4:	0f b7 c0             	movzx  eax,ax
c000abb7:	3d 21 03 00 00       	cmp    eax,0x321
c000abbc:	75 06                	jne    c000abc4 <sendKeyboardToken(KeyboardToken)+0x11a>
c000abbe:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000abc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abc7:	0f b7 c0             	movzx  eax,ax
c000abca:	3d 22 03 00 00       	cmp    eax,0x322
c000abcf:	0f 85 f1 00 00 00    	jne    c000acc6 <sendKeyboardToken(KeyboardToken)+0x21c>
c000abd5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000abdb:	e9 e6 00 00 00       	jmp    c000acc6 <sendKeyboardToken(KeyboardToken)+0x21c>
c000abe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abe3:	0f b7 c0             	movzx  eax,ax
c000abe6:	3d 18 03 00 00       	cmp    eax,0x318
c000abeb:	75 0a                	jne    c000abf7 <sendKeyboardToken(KeyboardToken)+0x14d>
c000abed:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000abf3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000abf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abfa:	0f b7 c0             	movzx  eax,ax
c000abfd:	3d 19 03 00 00       	cmp    eax,0x319
c000ac02:	75 0a                	jne    c000ac0e <sendKeyboardToken(KeyboardToken)+0x164>
c000ac04:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000ac0a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ac0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac11:	0f b7 c0             	movzx  eax,ax
c000ac14:	3d 1a 03 00 00       	cmp    eax,0x31a
c000ac19:	75 0a                	jne    c000ac25 <sendKeyboardToken(KeyboardToken)+0x17b>
c000ac1b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000ac21:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ac25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac28:	0f b7 c0             	movzx  eax,ax
c000ac2b:	3d 1b 03 00 00       	cmp    eax,0x31b
c000ac30:	75 0a                	jne    c000ac3c <sendKeyboardToken(KeyboardToken)+0x192>
c000ac32:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000ac38:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ac3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac3f:	0f b7 c0             	movzx  eax,ax
c000ac42:	3d 1c 03 00 00       	cmp    eax,0x31c
c000ac47:	75 0a                	jne    c000ac53 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000ac49:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000ac4f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ac53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac56:	0f b7 c0             	movzx  eax,ax
c000ac59:	3d 1d 03 00 00       	cmp    eax,0x31d
c000ac5e:	75 0a                	jne    c000ac6a <sendKeyboardToken(KeyboardToken)+0x1c0>
c000ac60:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ac66:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ac6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac6d:	0f b7 c0             	movzx  eax,ax
c000ac70:	3d 1e 03 00 00       	cmp    eax,0x31e
c000ac75:	75 0a                	jne    c000ac81 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000ac77:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000ac7d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ac81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac84:	0f b7 c0             	movzx  eax,ax
c000ac87:	3d 1f 03 00 00       	cmp    eax,0x31f
c000ac8c:	75 0a                	jne    c000ac98 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000ac8e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000ac94:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ac98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ac9b:	0f b7 c0             	movzx  eax,ax
c000ac9e:	3d 20 03 00 00       	cmp    eax,0x320
c000aca3:	75 0a                	jne    c000acaf <sendKeyboardToken(KeyboardToken)+0x205>
c000aca5:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000acab:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000acaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acb2:	0f b7 c0             	movzx  eax,ax
c000acb5:	3d 21 03 00 00       	cmp    eax,0x321
c000acba:	75 0a                	jne    c000acc6 <sendKeyboardToken(KeyboardToken)+0x21c>
c000acbc:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000acc2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000acc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000acc9:	0f b7 c0             	movzx  eax,ax
c000accc:	3d 00 02 00 00       	cmp    eax,0x200
c000acd1:	75 2f                	jne    c000ad02 <sendKeyboardToken(KeyboardToken)+0x258>
c000acd3:	a0 a0 5a 03 c0       	mov    al,ds:0xc0035aa0
c000acd8:	83 f0 01             	xor    eax,0x1
c000acdb:	0f b6 c0             	movzx  eax,al
c000acde:	85 c0                	test   eax,eax
c000ace0:	74 20                	je     c000ad02 <sendKeyboardToken(KeyboardToken)+0x258>
c000ace2:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c000ace7:	6a 01                	push   0x1
c000ace9:	6a 00                	push   0x0
c000aceb:	68 40 a9 00 c0       	push   0xc000a940
c000acf0:	50                   	push   eax
c000acf1:	e8 22 c3 00 00       	call   c0017018 <Process::createThread(void (*)(void*), void*, int)>
c000acf6:	83 c4 10             	add    esp,0x10
c000acf9:	c6 05 a0 5a 03 c0 01 	mov    BYTE PTR ds:0xc0035aa0,0x1
c000ad00:	eb 3a                	jmp    c000ad3c <sendKeyboardToken(KeyboardToken)+0x292>
c000ad02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad05:	0f b7 c0             	movzx  eax,ax
c000ad08:	3d 01 02 00 00       	cmp    eax,0x201
c000ad0d:	75 2d                	jne    c000ad3c <sendKeyboardToken(KeyboardToken)+0x292>
c000ad0f:	a0 a0 5a 03 c0       	mov    al,ds:0xc0035aa0
c000ad14:	83 f0 01             	xor    eax,0x1
c000ad17:	0f b6 c0             	movzx  eax,al
c000ad1a:	85 c0                	test   eax,eax
c000ad1c:	74 1e                	je     c000ad3c <sendKeyboardToken(KeyboardToken)+0x292>
c000ad1e:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c000ad23:	6a 01                	push   0x1
c000ad25:	6a 00                	push   0x0
c000ad27:	68 8a a9 00 c0       	push   0xc000a98a
c000ad2c:	50                   	push   eax
c000ad2d:	e8 e6 c2 00 00       	call   c0017018 <Process::createThread(void (*)(void*), void*, int)>
c000ad32:	83 c4 10             	add    esp,0x10
c000ad35:	c6 05 a0 5a 03 c0 01 	mov    BYTE PTR ds:0xc0035aa0,0x1
c000ad3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad3f:	0f b7 c0             	movzx  eax,ax
c000ad42:	3d 25 03 00 00       	cmp    eax,0x325
c000ad47:	75 06                	jne    c000ad4f <sendKeyboardToken(KeyboardToken)+0x2a5>
c000ad49:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ad4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad52:	0f b7 c0             	movzx  eax,ax
c000ad55:	3d 24 03 00 00       	cmp    eax,0x324
c000ad5a:	75 06                	jne    c000ad62 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000ad5c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ad62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad65:	0f b7 c0             	movzx  eax,ax
c000ad68:	3d 23 03 00 00       	cmp    eax,0x323
c000ad6d:	75 06                	jne    c000ad75 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000ad6f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ad75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad78:	0f b7 c0             	movzx  eax,ax
c000ad7b:	3d 26 03 00 00       	cmp    eax,0x326
c000ad80:	75 06                	jne    c000ad88 <sendKeyboardToken(KeyboardToken)+0x2de>
c000ad82:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ad88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad8b:	0f b7 c0             	movzx  eax,ax
c000ad8e:	3d 27 03 00 00       	cmp    eax,0x327
c000ad93:	75 06                	jne    c000ad9b <sendKeyboardToken(KeyboardToken)+0x2f1>
c000ad95:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ad9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ad9e:	0f b7 c0             	movzx  eax,ax
c000ada1:	3d 22 03 00 00       	cmp    eax,0x322
c000ada6:	75 06                	jne    c000adae <sendKeyboardToken(KeyboardToken)+0x304>
c000ada8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000adae:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000adb2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000adb5:	83 f0 01             	xor    eax,0x1
c000adb8:	0f b6 c0             	movzx  eax,al
c000adbb:	85 c0                	test   eax,eax
c000adbd:	74 7c                	je     c000ae3b <sendKeyboardToken(KeyboardToken)+0x391>
c000adbf:	a0 a1 57 03 c0       	mov    al,ds:0xc00357a1
c000adc4:	0f b6 c0             	movzx  eax,al
c000adc7:	85 c0                	test   eax,eax
c000adc9:	74 43                	je     c000ae0e <sendKeyboardToken(KeyboardToken)+0x364>
c000adcb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000adcf:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000add3:	85 c0                	test   eax,eax
c000add5:	74 2b                	je     c000ae02 <sendKeyboardToken(KeyboardToken)+0x358>
c000add7:	8b 15 a4 5a 03 c0    	mov    edx,DWORD PTR ds:0xc0035aa4
c000addd:	89 d0                	mov    eax,edx
c000addf:	c1 e0 02             	shl    eax,0x2
c000ade2:	01 d0                	add    eax,edx
c000ade4:	01 c0                	add    eax,eax
c000ade6:	a3 a4 5a 03 c0       	mov    ds:0xc0035aa4,eax
c000adeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adee:	0f b7 c0             	movzx  eax,ax
c000adf1:	8d 50 d0             	lea    edx,[eax-0x30]
c000adf4:	a1 a4 5a 03 c0       	mov    eax,ds:0xc0035aa4
c000adf9:	01 d0                	add    eax,edx
c000adfb:	a3 a4 5a 03 c0       	mov    ds:0xc0035aa4,eax
c000ae00:	eb 71                	jmp    c000ae73 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000ae02:	c7 05 a4 5a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035aa4,0x0
c000ae0c:	eb 65                	jmp    c000ae73 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000ae0e:	a1 a4 5a 03 c0       	mov    eax,ds:0xc0035aa4
c000ae13:	85 c0                	test   eax,eax
c000ae15:	74 18                	je     c000ae2f <sendKeyboardToken(KeyboardToken)+0x385>
c000ae17:	a1 a4 5a 03 c0       	mov    eax,ds:0xc0035aa4
c000ae1c:	0f b6 c0             	movzx  eax,al
c000ae1f:	83 ec 0c             	sub    esp,0xc
c000ae22:	50                   	push   eax
c000ae23:	e8 ac fb ff ff       	call   c000a9d4 <sendKeyToTerminal(unsigned char)>
c000ae28:	83 c4 10             	add    esp,0x10
c000ae2b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ae2f:	c7 05 a4 5a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035aa4,0x0
c000ae39:	eb 38                	jmp    c000ae73 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000ae3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae3e:	0f b7 c0             	movzx  eax,ax
c000ae41:	3d 01 01 00 00       	cmp    eax,0x101
c000ae46:	75 2b                	jne    c000ae73 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000ae48:	a1 a4 5a 03 c0       	mov    eax,ds:0xc0035aa4
c000ae4d:	85 c0                	test   eax,eax
c000ae4f:	74 18                	je     c000ae69 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000ae51:	a1 a4 5a 03 c0       	mov    eax,ds:0xc0035aa4
c000ae56:	0f b6 c0             	movzx  eax,al
c000ae59:	83 ec 0c             	sub    esp,0xc
c000ae5c:	50                   	push   eax
c000ae5d:	e8 72 fb ff ff       	call   c000a9d4 <sendKeyToTerminal(unsigned char)>
c000ae62:	83 c4 10             	add    esp,0x10
c000ae65:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ae69:	c7 05 a4 5a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035aa4,0x0
c000ae73:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ae76:	83 f0 01             	xor    eax,0x1
c000ae79:	0f b6 c0             	movzx  eax,al
c000ae7c:	85 c0                	test   eax,eax
c000ae7e:	74 5a                	je     c000aeda <sendKeyboardToken(KeyboardToken)+0x430>
c000ae80:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ae83:	83 f0 01             	xor    eax,0x1
c000ae86:	0f b6 c0             	movzx  eax,al
c000ae89:	85 c0                	test   eax,eax
c000ae8b:	74 4d                	je     c000aeda <sendKeyboardToken(KeyboardToken)+0x430>
c000ae8d:	a0 a0 57 03 c0       	mov    al,ds:0xc00357a0
c000ae92:	83 f0 01             	xor    eax,0x1
c000ae95:	0f b6 c0             	movzx  eax,al
c000ae98:	85 c0                	test   eax,eax
c000ae9a:	74 3e                	je     c000aeda <sendKeyboardToken(KeyboardToken)+0x430>
c000ae9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae9f:	0f b7 c0             	movzx  eax,ax
c000aea2:	83 f8 1f             	cmp    eax,0x1f
c000aea5:	76 0b                	jbe    c000aeb2 <sendKeyboardToken(KeyboardToken)+0x408>
c000aea7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aeaa:	0f b7 c0             	movzx  eax,ax
c000aead:	83 f8 7e             	cmp    eax,0x7e
c000aeb0:	76 16                	jbe    c000aec8 <sendKeyboardToken(KeyboardToken)+0x41e>
c000aeb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aeb5:	0f b7 c0             	movzx  eax,ax
c000aeb8:	83 f8 0a             	cmp    eax,0xa
c000aebb:	74 0b                	je     c000aec8 <sendKeyboardToken(KeyboardToken)+0x41e>
c000aebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aec0:	0f b7 c0             	movzx  eax,ax
c000aec3:	83 f8 08             	cmp    eax,0x8
c000aec6:	75 12                	jne    c000aeda <sendKeyboardToken(KeyboardToken)+0x430>
c000aec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aecb:	0f b6 c0             	movzx  eax,al
c000aece:	83 ec 0c             	sub    esp,0xc
c000aed1:	50                   	push   eax
c000aed2:	e8 fd fa ff ff       	call   c000a9d4 <sendKeyToTerminal(unsigned char)>
c000aed7:	83 c4 10             	add    esp,0x10
c000aeda:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000aedd:	83 f0 01             	xor    eax,0x1
c000aee0:	0f b6 c0             	movzx  eax,al
c000aee3:	85 c0                	test   eax,eax
c000aee5:	74 5d                	je     c000af44 <sendKeyboardToken(KeyboardToken)+0x49a>
c000aee7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000aeea:	83 f0 01             	xor    eax,0x1
c000aeed:	0f b6 c0             	movzx  eax,al
c000aef0:	85 c0                	test   eax,eax
c000aef2:	74 50                	je     c000af44 <sendKeyboardToken(KeyboardToken)+0x49a>
c000aef4:	a0 a0 57 03 c0       	mov    al,ds:0xc00357a0
c000aef9:	0f b6 c0             	movzx  eax,al
c000aefc:	85 c0                	test   eax,eax
c000aefe:	74 44                	je     c000af44 <sendKeyboardToken(KeyboardToken)+0x49a>
c000af00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af03:	0f b7 c0             	movzx  eax,ax
c000af06:	83 f8 3f             	cmp    eax,0x3f
c000af09:	76 39                	jbe    c000af44 <sendKeyboardToken(KeyboardToken)+0x49a>
c000af0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af0e:	0f b7 c0             	movzx  eax,ax
c000af11:	83 f8 7f             	cmp    eax,0x7f
c000af14:	77 2e                	ja     c000af44 <sendKeyboardToken(KeyboardToken)+0x49a>
c000af16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af19:	88 c2                	mov    dl,al
c000af1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af1e:	0f b7 c0             	movzx  eax,ax
c000af21:	83 f8 5f             	cmp    eax,0x5f
c000af24:	76 04                	jbe    c000af2a <sendKeyboardToken(KeyboardToken)+0x480>
c000af26:	b0 20                	mov    al,0x20
c000af28:	eb 02                	jmp    c000af2c <sendKeyboardToken(KeyboardToken)+0x482>
c000af2a:	b0 00                	mov    al,0x0
c000af2c:	89 d1                	mov    ecx,edx
c000af2e:	29 c1                	sub    ecx,eax
c000af30:	89 c8                	mov    eax,ecx
c000af32:	83 e8 40             	sub    eax,0x40
c000af35:	0f b6 c0             	movzx  eax,al
c000af38:	83 ec 0c             	sub    esp,0xc
c000af3b:	50                   	push   eax
c000af3c:	e8 93 fa ff ff       	call   c000a9d4 <sendKeyToTerminal(unsigned char)>
c000af41:	83 c4 10             	add    esp,0x10
c000af44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af47:	0f b7 c0             	movzx  eax,ax
c000af4a:	3d 00 03 00 00       	cmp    eax,0x300
c000af4f:	75 12                	jne    c000af63 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000af51:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000af54:	83 f0 01             	xor    eax,0x1
c000af57:	0f b6 c0             	movzx  eax,al
c000af5a:	85 c0                	test   eax,eax
c000af5c:	74 05                	je     c000af63 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000af5e:	e8 96 7b 00 00       	call   c0012af9 <doTerminalCycle()>
c000af63:	90                   	nop
c000af64:	c9                   	leave  
c000af65:	c3                   	ret    

c000af66 <clearInternalKeybuffer(VgaText*)>:
c000af66:	55                   	push   ebp
c000af67:	89 e5                	mov    ebp,esp
c000af69:	83 ec 08             	sub    esp,0x8
c000af6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000af6f:	05 02 01 00 00       	add    eax,0x102
c000af74:	83 ec 0c             	sub    esp,0xc
c000af77:	50                   	push   eax
c000af78:	e8 f3 55 ff ff       	call   c0000570 <strlen>
c000af7d:	83 c4 10             	add    esp,0x10
c000af80:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000af83:	81 c2 02 01 00 00    	add    edx,0x102
c000af89:	83 ec 04             	sub    esp,0x4
c000af8c:	50                   	push   eax
c000af8d:	6a 00                	push   0x0
c000af8f:	52                   	push   edx
c000af90:	e8 5b 55 ff ff       	call   c00004f0 <memset>
c000af95:	83 c4 10             	add    esp,0x10
c000af98:	90                   	nop
c000af99:	c9                   	leave  
c000af9a:	c3                   	ret    

c000af9b <readKeyboard(VgaText*, char*, unsigned long)>:
c000af9b:	55                   	push   ebp
c000af9c:	89 e5                	mov    ebp,esp
c000af9e:	83 ec 18             	sub    esp,0x18
c000afa1:	a1 88 56 03 c0       	mov    eax,ds:0xc0035688
c000afa6:	85 c0                	test   eax,eax
c000afa8:	74 2a                	je     c000afd4 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000afaa:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000afb0:	8b 0d 88 56 03 c0    	mov    ecx,DWORD PTR ds:0xc0035688
c000afb6:	83 ec 04             	sub    esp,0x4
c000afb9:	68 a0 56 03 c0       	push   0xc00356a0
c000afbe:	83 ec 08             	sub    esp,0x8
c000afc1:	89 e2                	mov    edx,esp
c000afc3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000afc6:	89 02                	mov    DWORD PTR [edx],eax
c000afc8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000afcb:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000afcf:	ff d1                	call   ecx
c000afd1:	83 c4 10             	add    esp,0x10
c000afd4:	fb                   	sti    
c000afd5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000afdc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000afe0:	0f 84 08 01 00 00    	je     c000b0ee <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000afe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000afe9:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000afef:	0f be c0             	movsx  eax,al
c000aff2:	85 c0                	test   eax,eax
c000aff4:	75 27                	jne    c000b01d <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000aff6:	fa                   	cli    
c000aff7:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000affc:	83 c0 01             	add    eax,0x1
c000afff:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c000b004:	e8 db c2 00 00       	call   c00172e4 <schedule()>
c000b009:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c000b011:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000b016:	85 c0                	test   eax,eax
c000b018:	75 cc                	jne    c000afe6 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000b01a:	fb                   	sti    
c000b01b:	eb c9                	jmp    c000afe6 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000b01d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b020:	8d 50 01             	lea    edx,[eax+0x1]
c000b023:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000b026:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b029:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000b02f:	88 10                	mov    BYTE PTR [eax],dl
c000b031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b034:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000b03a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000b03d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b041:	83 f8 03             	cmp    eax,0x3
c000b044:	75 1e                	jne    c000b064 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000b046:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b04b:	8b 00                	mov    eax,DWORD PTR [eax]
c000b04d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b050:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000b056:	83 ec 08             	sub    esp,0x8
c000b059:	6a 02                	push   0x2
c000b05b:	50                   	push   eax
c000b05c:	e8 06 69 00 00       	call   c0011967 <KeRaiseSignal(SigHandlerBlock*, int)>
c000b061:	83 c4 10             	add    esp,0x10
c000b064:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b068:	83 f8 1c             	cmp    eax,0x1c
c000b06b:	75 1e                	jne    c000b08b <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000b06d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000b072:	8b 00                	mov    eax,DWORD PTR [eax]
c000b074:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b077:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000b07d:	83 ec 08             	sub    esp,0x8
c000b080:	6a 09                	push   0x9
c000b082:	50                   	push   eax
c000b083:	e8 df 68 00 00       	call   c0011967 <KeRaiseSignal(SigHandlerBlock*, int)>
c000b088:	83 c4 10             	add    esp,0x10
c000b08b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b08e:	05 02 01 00 00       	add    eax,0x102
c000b093:	83 ec 0c             	sub    esp,0xc
c000b096:	50                   	push   eax
c000b097:	e8 d4 54 ff ff       	call   c0000570 <strlen>
c000b09c:	83 c4 10             	add    esp,0x10
c000b09f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b0a2:	81 c2 02 01 00 00    	add    edx,0x102
c000b0a8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b0ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b0ae:	81 c2 02 01 00 00    	add    edx,0x102
c000b0b4:	83 ec 04             	sub    esp,0x4
c000b0b7:	50                   	push   eax
c000b0b8:	51                   	push   ecx
c000b0b9:	52                   	push   edx
c000b0ba:	e8 11 53 ff ff       	call   c00003d0 <memmove>
c000b0bf:	83 c4 10             	add    esp,0x10
c000b0c2:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000b0c6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000b0ca:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b0ce:	83 f8 0a             	cmp    eax,0xa
c000b0d1:	74 16                	je     c000b0e9 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000b0d3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b0d7:	83 f8 03             	cmp    eax,0x3
c000b0da:	74 0d                	je     c000b0e9 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000b0dc:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000b0e0:	83 f8 1c             	cmp    eax,0x1c
c000b0e3:	0f 85 f3 fe ff ff    	jne    c000afdc <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000b0e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b0ec:	eb 03                	jmp    c000b0f1 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000b0ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000b0f1:	c9                   	leave  
c000b0f2:	c3                   	ret    
c000b0f3:	90                   	nop

c000b0f4 <Keyboard::Keyboard(char const*)>:
c000b0f4:	83 ec 0c             	sub    esp,0xc
c000b0f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fb:	83 ec 08             	sub    esp,0x8
c000b0fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b102:	50                   	push   eax
c000b103:	e8 da f4 ff ff       	call   c000a5e2 <Device::Device(char const*)>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	ba 00 ae 02 c0       	mov    edx,0xc002ae00
c000b110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b114:	89 10                	mov    DWORD PTR [eax],edx
c000b116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b11a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000b124:	c6 05 84 56 03 c0 01 	mov    BYTE PTR ds:0xc0035684,0x1
c000b12b:	90                   	nop
c000b12c:	83 c4 0c             	add    esp,0xc
c000b12f:	c3                   	ret    

c000b130 <Keyboard::~Keyboard()>:
c000b130:	83 ec 0c             	sub    esp,0xc
c000b133:	ba 00 ae 02 c0       	mov    edx,0xc002ae00
c000b138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b13c:	89 10                	mov    DWORD PTR [eax],edx
c000b13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b142:	83 ec 0c             	sub    esp,0xc
c000b145:	50                   	push   eax
c000b146:	e8 37 f2 ff ff       	call   c000a382 <Device::~Device()>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	90                   	nop
c000b14f:	83 c4 0c             	add    esp,0xc
c000b152:	c3                   	ret    
c000b153:	90                   	nop

c000b154 <Keyboard::~Keyboard()>:
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	83 ec 0c             	sub    esp,0xc
c000b15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b15e:	e8 cd ff ff ff       	call   c000b130 <Keyboard::~Keyboard()>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	83 ec 08             	sub    esp,0x8
c000b169:	68 5c 01 00 00       	push   0x15c
c000b16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b172:	e8 8d 2c 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000b177:	83 c4 10             	add    esp,0x10
c000b17a:	83 c4 0c             	add    esp,0xc
c000b17d:	c3                   	ret    

c000b17e <LogicalDisk::close(int, int, void*)>:
c000b17e:	83 c8 ff             	or     eax,0xffffffff
c000b181:	c3                   	ret    

c000b182 <LogicalDisk::~LogicalDisk()>:
c000b182:	83 ec 0c             	sub    esp,0xc
c000b185:	ba 78 ae 02 c0       	mov    edx,0xc002ae78
c000b18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b18e:	89 10                	mov    DWORD PTR [eax],edx
c000b190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b194:	83 ec 0c             	sub    esp,0xc
c000b197:	50                   	push   eax
c000b198:	e8 e5 f1 ff ff       	call   c000a382 <Device::~Device()>
c000b19d:	83 c4 10             	add    esp,0x10
c000b1a0:	90                   	nop
c000b1a1:	83 c4 0c             	add    esp,0xc
c000b1a4:	c3                   	ret    
c000b1a5:	90                   	nop

c000b1a6 <LogicalDisk::~LogicalDisk()>:
c000b1a6:	83 ec 0c             	sub    esp,0xc
c000b1a9:	83 ec 0c             	sub    esp,0xc
c000b1ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1b0:	e8 cd ff ff ff       	call   c000b182 <LogicalDisk::~LogicalDisk()>
c000b1b5:	83 c4 10             	add    esp,0x10
c000b1b8:	83 ec 08             	sub    esp,0x8
c000b1bb:	68 78 01 00 00       	push   0x178
c000b1c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1c4:	e8 3b 2c 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000b1c9:	83 c4 10             	add    esp,0x10
c000b1cc:	83 c4 0c             	add    esp,0xc
c000b1cf:	c3                   	ret    

c000b1d0 <LogicalDisk::open(int, int, void*)>:
c000b1d0:	83 ec 18             	sub    esp,0x18
c000b1d3:	68 2c ae 02 c0       	push   0xc002ae2c
c000b1d8:	e8 6f 55 00 00       	call   c001074c <KePanic(char const*)>
c000b1dd:	83 c8 ff             	or     eax,0xffffffff
c000b1e0:	83 c4 1c             	add    esp,0x1c
c000b1e3:	c3                   	ret    

c000b1e4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000b1e4:	53                   	push   ebx
c000b1e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b1e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b1ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1f1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000b1f7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000b1fd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000b203:	77 10                	ja     c000b215 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000b205:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000b20b:	89 d3                	mov    ebx,edx
c000b20d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000b213:	72 05                	jb     c000b21a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000b215:	83 c8 ff             	or     eax,0xffffffff
c000b218:	89 c2                	mov    edx,eax
c000b21a:	5b                   	pop    ebx
c000b21b:	c3                   	ret    

c000b21c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000b21c:	56                   	push   esi
c000b21d:	83 c8 ff             	or     eax,0xffffffff
c000b220:	53                   	push   ebx
c000b221:	89 c2                	mov    edx,eax
c000b223:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b227:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b22b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b22f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b235:	77 27                	ja     c000b25e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000b237:	89 d8                	mov    eax,ebx
c000b239:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000b23f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000b245:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b24a:	89 c2                	mov    edx,eax
c000b24c:	73 10                	jae    c000b25e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000b24e:	89 c8                	mov    eax,ecx
c000b250:	89 da                	mov    edx,ebx
c000b252:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000b258:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000b25e:	5b                   	pop    ebx
c000b25f:	5e                   	pop    esi
c000b260:	c3                   	ret    
c000b261:	90                   	nop

c000b262 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b262:	83 ec 1c             	sub    esp,0x1c
c000b265:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b269:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b26d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b271:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b275:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b279:	89 04 24             	mov    DWORD PTR [esp],eax
c000b27c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b280:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b288:	83 ec 08             	sub    esp,0x8
c000b28b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b28f:	50                   	push   eax
c000b290:	e8 4d f3 ff ff       	call   c000a5e2 <Device::Device(char const*)>
c000b295:	83 c4 10             	add    esp,0x10
c000b298:	ba 78 ae 02 c0       	mov    edx,0xc002ae78
c000b29d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2a1:	89 10                	mov    DWORD PTR [eax],edx
c000b2a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2a7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b2ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000b2b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2bd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000b2c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c8:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000b2d2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b2d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b2da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b2de:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000b2e4:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000b2ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b2ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b2f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b2f5:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000b2fb:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000b301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b305:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b309:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000b30f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b313:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000b31d:	90                   	nop
c000b31e:	83 c4 1c             	add    esp,0x1c
c000b321:	c3                   	ret    

c000b322 <LogicalDisk::assignDriveLetter()>:
c000b322:	55                   	push   ebp
c000b323:	57                   	push   edi
c000b324:	56                   	push   esi
c000b325:	53                   	push   ebx
c000b326:	83 ec 14             	sub    esp,0x14
c000b329:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b32d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000b333:	b0 41                	mov    al,0x41
c000b335:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000b33b:	84 d2                	test   dl,dl
c000b33d:	75 02                	jne    c000b341 <LogicalDisk::assignDriveLetter()+0x1f>
c000b33f:	b0 43                	mov    al,0x43
c000b341:	8b 3d c0 5a 03 c0    	mov    edi,DWORD PTR ds:0xc0035ac0
c000b347:	0f b6 ca             	movzx  ecx,dl
c000b34a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000b34e:	0f be e8             	movsx  ebp,al
c000b351:	8b 3d c4 5a 03 c0    	mov    edi,DWORD PTR ds:0xc0035ac4
c000b357:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b35b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000b35f:	3c 43                	cmp    al,0x43
c000b361:	75 10                	jne    c000b373 <LogicalDisk::assignDriveLetter()+0x51>
c000b363:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000b36a:	75 5a                	jne    c000b3c6 <LogicalDisk::assignDriveLetter()+0xa4>
c000b36c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b371:	75 53                	jne    c000b3c6 <LogicalDisk::assignDriveLetter()+0xa4>
c000b373:	8d 75 bf             	lea    esi,[ebp-0x41]
c000b376:	ba 01 00 00 00       	mov    edx,0x1
c000b37b:	89 34 24             	mov    DWORD PTR [esp],esi
c000b37e:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000b381:	d3 e2                	shl    edx,cl
c000b383:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b387:	89 d7                	mov    edi,edx
c000b389:	89 d6                	mov    esi,edx
c000b38b:	c1 ff 1f             	sar    edi,0x1f
c000b38e:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000b392:	21 f9                	and    ecx,edi
c000b394:	09 d1                	or     ecx,edx
c000b396:	75 2e                	jne    c000b3c6 <LogicalDisk::assignDriveLetter()+0xa4>
c000b398:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000b39c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b3a0:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000b3a6:	09 f2                	or     edx,esi
c000b3a8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000b3ab:	89 15 c0 5a 03 c0    	mov    DWORD PTR ds:0xc0035ac0,edx
c000b3b1:	89 1c b5 e0 5a 03 c0 	mov    DWORD PTR [esi*4-0x3ffca520],ebx
c000b3b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3bc:	09 fa                	or     edx,edi
c000b3be:	89 15 c4 5a 03 c0    	mov    DWORD PTR ds:0xc0035ac4,edx
c000b3c4:	eb 0d                	jmp    c000b3d3 <LogicalDisk::assignDriveLetter()+0xb1>
c000b3c6:	8d 50 01             	lea    edx,[eax+0x1]
c000b3c9:	45                   	inc    ebp
c000b3ca:	88 d0                	mov    al,dl
c000b3cc:	80 fa 5b             	cmp    dl,0x5b
c000b3cf:	75 8e                	jne    c000b35f <LogicalDisk::assignDriveLetter()+0x3d>
c000b3d1:	31 c0                	xor    eax,eax
c000b3d3:	83 c4 14             	add    esp,0x14
c000b3d6:	5b                   	pop    ebx
c000b3d7:	5e                   	pop    esi
c000b3d8:	5f                   	pop    edi
c000b3d9:	5d                   	pop    ebp
c000b3da:	c3                   	ret    
c000b3db:	90                   	nop

c000b3dc <LogicalDisk::mount()>:
c000b3dc:	56                   	push   esi
c000b3dd:	53                   	push   ebx
c000b3de:	53                   	push   ebx
c000b3df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b3e3:	8b 1d 04 53 03 c0    	mov    ebx,DWORD PTR ds:0xc0035304
c000b3e9:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000b3f3:	85 db                	test   ebx,ebx
c000b3f5:	74 27                	je     c000b41e <LogicalDisk::mount()+0x42>
c000b3f7:	51                   	push   ecx
c000b3f8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000b3ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b401:	83 e8 41             	sub    eax,0x41
c000b404:	50                   	push   eax
c000b405:	56                   	push   esi
c000b406:	53                   	push   ebx
c000b407:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000b40a:	83 c4 10             	add    esp,0x10
c000b40d:	84 c0                	test   al,al
c000b40f:	74 08                	je     c000b419 <LogicalDisk::mount()+0x3d>
c000b411:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000b417:	eb 07                	jmp    c000b420 <LogicalDisk::mount()+0x44>
c000b419:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000b41c:	eb d5                	jmp    c000b3f3 <LogicalDisk::mount()+0x17>
c000b41e:	31 c0                	xor    eax,eax
c000b420:	5a                   	pop    edx
c000b421:	5b                   	pop    ebx
c000b422:	5e                   	pop    esi
c000b423:	c3                   	ret    

c000b424 <LogicalDisk::unmount()>:
c000b424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b428:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000b432:	c3                   	ret    
c000b433:	90                   	nop

c000b434 <LogicalDisk::eject()>:
c000b434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b438:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000b43e:	8b 10                	mov    edx,DWORD PTR [eax]
c000b440:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b444:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000b447:	90                   	nop

c000b448 <LogicalDisk::unassignDriveLetter()>:
c000b448:	57                   	push   edi
c000b449:	56                   	push   esi
c000b44a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b44e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000b455:	85 c9                	test   ecx,ecx
c000b457:	75 0f                	jne    c000b468 <LogicalDisk::unassignDriveLetter()+0x20>
c000b459:	c7 44 24 0c 50 ae 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ae50
c000b461:	5e                   	pop    esi
c000b462:	5f                   	pop    edi
c000b463:	e9 e4 52 00 00       	jmp    c001074c <KePanic(char const*)>
c000b468:	83 e9 41             	sub    ecx,0x41
c000b46b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000b472:	b8 01 00 00 00       	mov    eax,0x1
c000b477:	c7 04 8d e0 5a 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffca520],0x0
c000b482:	d3 e0                	shl    eax,cl
c000b484:	89 c7                	mov    edi,eax
c000b486:	f7 d0                	not    eax
c000b488:	c1 ff 1f             	sar    edi,0x1f
c000b48b:	21 05 c0 5a 03 c0    	and    DWORD PTR ds:0xc0035ac0,eax
c000b491:	89 fe                	mov    esi,edi
c000b493:	f7 d6                	not    esi
c000b495:	21 35 c4 5a 03 c0    	and    DWORD PTR ds:0xc0035ac4,esi
c000b49b:	5e                   	pop    esi
c000b49c:	5f                   	pop    edi
c000b49d:	c3                   	ret    

c000b49e <LogicalDisk::read(unsigned long long, int, void*)>:
c000b49e:	57                   	push   edi
c000b49f:	56                   	push   esi
c000b4a0:	53                   	push   ebx
c000b4a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b4a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b4a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b4ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b4b7:	77 41                	ja     c000b4fa <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000b4b9:	99                   	cdq    
c000b4ba:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000b4c0:	01 c8                	add    eax,ecx
c000b4c2:	11 da                	adc    edx,ebx
c000b4c4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000b4ca:	19 d7                	sbb    edi,edx
c000b4cc:	72 33                	jb     c000b501 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000b4ce:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000b4d4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000b4da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b4de:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000b4e2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b4e8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b4ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4f2:	5b                   	pop    ebx
c000b4f3:	5e                   	pop    esi
c000b4f4:	5f                   	pop    edi
c000b4f5:	e9 ac 0b 00 00       	jmp    c000c0a6 <VCache::read(unsigned long long, int, void*)>
c000b4fa:	b8 05 00 00 00       	mov    eax,0x5
c000b4ff:	eb 05                	jmp    c000b506 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000b501:	b8 07 00 00 00       	mov    eax,0x7
c000b506:	5b                   	pop    ebx
c000b507:	5e                   	pop    esi
c000b508:	5f                   	pop    edi
c000b509:	c3                   	ret    

c000b50a <LogicalDisk::write(unsigned long long, int, void*)>:
c000b50a:	57                   	push   edi
c000b50b:	56                   	push   esi
c000b50c:	53                   	push   ebx
c000b50d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b511:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b515:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b519:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b51d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000b523:	77 41                	ja     c000b566 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000b525:	99                   	cdq    
c000b526:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000b52c:	01 c8                	add    eax,ecx
c000b52e:	11 da                	adc    edx,ebx
c000b530:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000b536:	19 d7                	sbb    edi,edx
c000b538:	72 33                	jb     c000b56d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000b53a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000b540:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000b546:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b54a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000b54e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000b554:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b55a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b55e:	5b                   	pop    ebx
c000b55f:	5e                   	pop    esi
c000b560:	5f                   	pop    edi
c000b561:	e9 72 09 00 00       	jmp    c000bed8 <VCache::write(unsigned long long, int, void*)>
c000b566:	b8 05 00 00 00       	mov    eax,0x5
c000b56b:	eb 05                	jmp    c000b572 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000b56d:	b8 07 00 00 00       	mov    eax,0x7
c000b572:	5b                   	pop    ebx
c000b573:	5e                   	pop    esi
c000b574:	5f                   	pop    edi
c000b575:	c3                   	ret    
c000b576:	66 90                	xchg   ax,ax

c000b578 <Mouse::Mouse(char const*)>:
c000b578:	83 ec 0c             	sub    esp,0xc
c000b57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b57f:	83 ec 08             	sub    esp,0x8
c000b582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b586:	50                   	push   eax
c000b587:	e8 56 f0 ff ff       	call   c000a5e2 <Device::Device(char const*)>
c000b58c:	83 c4 10             	add    esp,0x10
c000b58f:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c000b594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b598:	89 10                	mov    DWORD PTR [eax],edx
c000b59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b59e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000b5a8:	90                   	nop
c000b5a9:	83 c4 0c             	add    esp,0xc
c000b5ac:	c3                   	ret    
c000b5ad:	90                   	nop
c000b5ae:	66 90                	xchg   ax,ax

c000b5b0 <Mouse::~Mouse()>:
c000b5b0:	83 ec 0c             	sub    esp,0xc
c000b5b3:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c000b5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5bc:	89 10                	mov    DWORD PTR [eax],edx
c000b5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5c2:	83 ec 0c             	sub    esp,0xc
c000b5c5:	50                   	push   eax
c000b5c6:	e8 b7 ed ff ff       	call   c000a382 <Device::~Device()>
c000b5cb:	83 c4 10             	add    esp,0x10
c000b5ce:	90                   	nop
c000b5cf:	83 c4 0c             	add    esp,0xc
c000b5d2:	c3                   	ret    
c000b5d3:	90                   	nop

c000b5d4 <Mouse::~Mouse()>:
c000b5d4:	83 ec 0c             	sub    esp,0xc
c000b5d7:	83 ec 0c             	sub    esp,0xc
c000b5da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5de:	e8 cd ff ff ff       	call   c000b5b0 <Mouse::~Mouse()>
c000b5e3:	83 c4 10             	add    esp,0x10
c000b5e6:	83 ec 08             	sub    esp,0x8
c000b5e9:	68 58 01 00 00       	push   0x158
c000b5ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5f2:	e8 0d 28 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000b5f7:	83 c4 10             	add    esp,0x10
c000b5fa:	83 c4 0c             	add    esp,0xc
c000b5fd:	c3                   	ret    

c000b5fe <NIC::getMAC()>:
c000b5fe:	31 c0                	xor    eax,eax
c000b600:	31 d2                	xor    edx,edx
c000b602:	c3                   	ret    
c000b603:	90                   	nop

c000b604 <NIC::write(int, unsigned char*, int*)>:
c000b604:	b8 01 00 00 00       	mov    eax,0x1
c000b609:	c3                   	ret    

c000b60a <NIC::NIC(char const*)>:
c000b60a:	83 ec 0c             	sub    esp,0xc
c000b60d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b611:	83 ec 08             	sub    esp,0x8
c000b614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b618:	50                   	push   eax
c000b619:	e8 c4 ef ff ff       	call   c000a5e2 <Device::Device(char const*)>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	ba d0 ae 02 c0       	mov    edx,0xc002aed0
c000b626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b62a:	89 10                	mov    DWORD PTR [eax],edx
c000b62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b630:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000b63a:	90                   	nop
c000b63b:	83 c4 0c             	add    esp,0xc
c000b63e:	c3                   	ret    
c000b63f:	90                   	nop

c000b640 <NIC::~NIC()>:
c000b640:	83 ec 0c             	sub    esp,0xc
c000b643:	ba d0 ae 02 c0       	mov    edx,0xc002aed0
c000b648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b64c:	89 10                	mov    DWORD PTR [eax],edx
c000b64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b652:	83 ec 0c             	sub    esp,0xc
c000b655:	50                   	push   eax
c000b656:	e8 27 ed ff ff       	call   c000a382 <Device::~Device()>
c000b65b:	83 c4 10             	add    esp,0x10
c000b65e:	90                   	nop
c000b65f:	83 c4 0c             	add    esp,0xc
c000b662:	c3                   	ret    
c000b663:	90                   	nop

c000b664 <NIC::~NIC()>:
c000b664:	83 ec 0c             	sub    esp,0xc
c000b667:	83 ec 0c             	sub    esp,0xc
c000b66a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66e:	e8 cd ff ff ff       	call   c000b640 <NIC::~NIC()>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	83 ec 08             	sub    esp,0x8
c000b679:	68 58 01 00 00       	push   0x158
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	e8 7d 27 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	83 c4 0c             	add    esp,0xc
c000b68d:	c3                   	ret    

c000b68e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000b68e:	55                   	push   ebp
c000b68f:	57                   	push   edi
c000b690:	56                   	push   esi
c000b691:	53                   	push   ebx
c000b692:	81 ec 28 01 00 00    	sub    esp,0x128
c000b698:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000b69f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000b6a6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000b6ad:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000b6b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6b8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b6bc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b6c3:	e8 16 f0 ff ff       	call   c000a6de <Device::getName()>
c000b6c8:	5a                   	pop    edx
c000b6c9:	59                   	pop    ecx
c000b6ca:	50                   	push   eax
c000b6cb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b6cf:	55                   	push   ebp
c000b6d0:	e8 6b 4f ff ff       	call   c0000640 <strcpy>
c000b6d5:	5b                   	pop    ebx
c000b6d6:	58                   	pop    eax
c000b6d7:	68 fc ae 02 c0       	push   0xc002aefc
c000b6dc:	55                   	push   ebp
c000b6dd:	e8 5e 51 ff ff       	call   c0000840 <strcat>
c000b6e2:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000b6e9:	e8 09 4c 00 00       	call   c00102f7 <malloc>
c000b6ee:	83 c4 0c             	add    esp,0xc
c000b6f1:	89 c3                	mov    ebx,eax
c000b6f3:	57                   	push   edi
c000b6f4:	56                   	push   esi
c000b6f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6fd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000b704:	55                   	push   ebp
c000b705:	50                   	push   eax
c000b706:	e8 57 fb ff ff       	call   c000b262 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000b70b:	83 c4 14             	add    esp,0x14
c000b70e:	53                   	push   ebx
c000b70f:	e8 0e fc ff ff       	call   c000b322 <LogicalDisk::assignDriveLetter()>
c000b714:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b717:	e8 c0 fc ff ff       	call   c000b3dc <LogicalDisk::mount()>
c000b71c:	58                   	pop    eax
c000b71d:	5a                   	pop    edx
c000b71e:	53                   	push   ebx
c000b71f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000b726:	e8 55 ed ff ff       	call   c000a480 <Device::addChild(Device*)>
c000b72b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000b731:	5b                   	pop    ebx
c000b732:	5e                   	pop    esi
c000b733:	5f                   	pop    edi
c000b734:	5d                   	pop    ebp
c000b735:	c3                   	ret    

c000b736 <createPartitionsForDisk(PhysicalDisk*)>:
c000b736:	55                   	push   ebp
c000b737:	57                   	push   edi
c000b738:	56                   	push   esi
c000b739:	53                   	push   ebx
c000b73a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000b740:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000b747:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000b74d:	3d 00 02 00 00       	cmp    eax,0x200
c000b752:	74 27                	je     c000b77b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000b754:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000b75a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000b760:	83 ec 10             	sub    esp,0x10
c000b763:	0f a4 f7 0a          	shld   edi,esi,0xa
c000b767:	99                   	cdq    
c000b768:	c1 e6 0a             	shl    esi,0xa
c000b76b:	52                   	push   edx
c000b76c:	89 fd                	mov    ebp,edi
c000b76e:	50                   	push   eax
c000b76f:	55                   	push   ebp
c000b770:	56                   	push   esi
c000b771:	e8 1e 8d 01 00       	call   c0024494 <__udivdi3>
c000b776:	e9 b9 00 00 00       	jmp    c000b834 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000b77b:	83 ec 0c             	sub    esp,0xc
c000b77e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b780:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000b784:	56                   	push   esi
c000b785:	6a 01                	push   0x1
c000b787:	6a 00                	push   0x0
c000b789:	6a 00                	push   0x0
c000b78b:	53                   	push   ebx
c000b78c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b78f:	83 c4 20             	add    esp,0x20
c000b792:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000b79a:	75 0a                	jne    c000b7a6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000b79c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000b7a4:	74 2c                	je     c000b7d2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000b7a6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b7ac:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b7b2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b7b8:	83 ec 10             	sub    esp,0x10
c000b7bb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b7bf:	89 f7                	mov    edi,esi
c000b7c1:	c1 e0 0a             	shl    eax,0xa
c000b7c4:	c1 ff 1f             	sar    edi,0x1f
c000b7c7:	57                   	push   edi
c000b7c8:	56                   	push   esi
c000b7c9:	52                   	push   edx
c000b7ca:	50                   	push   eax
c000b7cb:	e8 c4 8c 01 00       	call   c0024494 <__udivdi3>
c000b7d0:	eb 62                	jmp    c000b834 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000b7d2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000b7d9:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000b7e0:	89 cf                	mov    edi,ecx
c000b7e2:	83 e2 7f             	and    edx,0x7f
c000b7e5:	83 e7 7f             	and    edi,0x7f
c000b7e8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000b7ef:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000b7f2:	83 e0 7f             	and    eax,0x7f
c000b7f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c000b7f8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000b7ff:	83 e0 7f             	and    eax,0x7f
c000b802:	01 d0                	add    eax,edx
c000b804:	89 c5                	mov    ebp,eax
c000b806:	84 c0                	test   al,al
c000b808:	74 41                	je     c000b84b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000b80a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b810:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b816:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b81c:	83 ec 10             	sub    esp,0x10
c000b81f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b823:	89 f7                	mov    edi,esi
c000b825:	c1 e0 0a             	shl    eax,0xa
c000b828:	c1 ff 1f             	sar    edi,0x1f
c000b82b:	57                   	push   edi
c000b82c:	56                   	push   esi
c000b82d:	52                   	push   edx
c000b82e:	50                   	push   eax
c000b82f:	e8 60 8c 01 00       	call   c0024494 <__udivdi3>
c000b834:	83 c4 14             	add    esp,0x14
c000b837:	52                   	push   edx
c000b838:	50                   	push   eax
c000b839:	6a 00                	push   0x0
c000b83b:	6a 00                	push   0x0
c000b83d:	53                   	push   ebx
c000b83e:	e8 4b fe ff ff       	call   c000b68e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000b843:	83 c4 20             	add    esp,0x20
c000b846:	e9 73 01 00 00       	jmp    c000b9be <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000b84b:	89 f0                	mov    eax,esi
c000b84d:	31 c9                	xor    ecx,ecx
c000b84f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000b856:	75 02                	jne    c000b85a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000b858:	89 cd                	mov    ebp,ecx
c000b85a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000b861:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000b868:	c1 e2 08             	shl    edx,0x8
c000b86b:	c1 e6 10             	shl    esi,0x10
c000b86e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000b876:	09 f2                	or     edx,esi
c000b878:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000b880:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000b887:	83 c0 10             	add    eax,0x10
c000b88a:	09 f2                	or     edx,esi
c000b88c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000b893:	c1 e6 18             	shl    esi,0x18
c000b896:	09 f2                	or     edx,esi
c000b898:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000b89f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000b8a3:	c1 e6 10             	shl    esi,0x10
c000b8a6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000b8ad:	c1 e2 08             	shl    edx,0x8
c000b8b0:	09 f2                	or     edx,esi
c000b8b2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000b8b9:	09 f2                	or     edx,esi
c000b8bb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000b8c2:	c1 e6 18             	shl    esi,0x18
c000b8c5:	09 f2                	or     edx,esi
c000b8c7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000b8cb:	41                   	inc    ecx
c000b8cc:	83 f9 04             	cmp    ecx,0x4
c000b8cf:	0f 85 7a ff ff ff    	jne    c000b84f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000b8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d9:	83 f0 01             	xor    eax,0x1
c000b8dc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000b8e0:	75 4f                	jne    c000b931 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000b8e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8e6:	83 f0 01             	xor    eax,0x1
c000b8e9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000b8ed:	75 42                	jne    c000b931 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000b8ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b8f7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b8ff:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b905:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000b90b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000b911:	0f a4 c2 0a          	shld   edx,eax,0xa
c000b915:	89 f7                	mov    edi,esi
c000b917:	c1 e0 0a             	shl    eax,0xa
c000b91a:	c1 ff 1f             	sar    edi,0x1f
c000b91d:	57                   	push   edi
c000b91e:	56                   	push   esi
c000b91f:	52                   	push   edx
c000b920:	50                   	push   eax
c000b921:	e8 6e 8b 01 00       	call   c0024494 <__udivdi3>
c000b926:	83 c4 10             	add    esp,0x10
c000b929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000b931:	89 e8                	mov    eax,ebp
c000b933:	0f b6 e8             	movzx  ebp,al
c000b936:	85 ed                	test   ebp,ebp
c000b938:	74 50                	je     c000b98a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000b93a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b93e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b942:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b946:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000b94a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b94e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b952:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000b956:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000b95a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b95e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b966:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000b96a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000b96e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000b972:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000b976:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b97a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000b97e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000b982:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000b986:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000b98a:	31 ed                	xor    ebp,ebp
c000b98c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000b990:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000b994:	89 f8                	mov    eax,edi
c000b996:	09 f0                	or     eax,esi
c000b998:	74 1e                	je     c000b9b8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000b99a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000b99e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000b9a2:	89 d1                	mov    ecx,edx
c000b9a4:	09 c1                	or     ecx,eax
c000b9a6:	74 10                	je     c000b9b8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000b9a8:	83 ec 0c             	sub    esp,0xc
c000b9ab:	57                   	push   edi
c000b9ac:	56                   	push   esi
c000b9ad:	52                   	push   edx
c000b9ae:	50                   	push   eax
c000b9af:	53                   	push   ebx
c000b9b0:	e8 d9 fc ff ff       	call   c000b68e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000b9b5:	83 c4 20             	add    esp,0x20
c000b9b8:	45                   	inc    ebp
c000b9b9:	83 fd 04             	cmp    ebp,0x4
c000b9bc:	75 ce                	jne    c000b98c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000b9be:	81 c4 5c 02 00 00    	add    esp,0x25c
c000b9c4:	5b                   	pop    ebx
c000b9c5:	5e                   	pop    esi
c000b9c6:	5f                   	pop    edi
c000b9c7:	5d                   	pop    ebp
c000b9c8:	c3                   	ret    
c000b9c9:	66 90                	xchg   ax,ax
c000b9cb:	90                   	nop

c000b9cc <Serial::Serial(char const*)>:
c000b9cc:	83 ec 0c             	sub    esp,0xc
c000b9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9d3:	83 ec 08             	sub    esp,0x8
c000b9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9da:	50                   	push   eax
c000b9db:	e8 02 ec ff ff       	call   c000a5e2 <Device::Device(char const*)>
c000b9e0:	83 c4 10             	add    esp,0x10
c000b9e3:	ba 10 af 02 c0       	mov    edx,0xc002af10
c000b9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ec:	89 10                	mov    DWORD PTR [eax],edx
c000b9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000b9fc:	90                   	nop
c000b9fd:	83 c4 0c             	add    esp,0xc
c000ba00:	c3                   	ret    
c000ba01:	90                   	nop
c000ba02:	66 90                	xchg   ax,ax

c000ba04 <Serial::~Serial()>:
c000ba04:	83 ec 0c             	sub    esp,0xc
c000ba07:	ba 10 af 02 c0       	mov    edx,0xc002af10
c000ba0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba10:	89 10                	mov    DWORD PTR [eax],edx
c000ba12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	50                   	push   eax
c000ba1a:	e8 63 e9 ff ff       	call   c000a382 <Device::~Device()>
c000ba1f:	83 c4 10             	add    esp,0x10
c000ba22:	90                   	nop
c000ba23:	83 c4 0c             	add    esp,0xc
c000ba26:	c3                   	ret    
c000ba27:	90                   	nop

c000ba28 <Serial::~Serial()>:
c000ba28:	83 ec 0c             	sub    esp,0xc
c000ba2b:	83 ec 0c             	sub    esp,0xc
c000ba2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba32:	e8 cd ff ff ff       	call   c000ba04 <Serial::~Serial()>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	83 ec 08             	sub    esp,0x8
c000ba3d:	68 58 01 00 00       	push   0x158
c000ba42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba46:	e8 b9 23 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000ba4b:	83 c4 10             	add    esp,0x10
c000ba4e:	83 c4 0c             	add    esp,0xc
c000ba51:	c3                   	ret    
c000ba52:	66 90                	xchg   ax,ax

c000ba54 <Timer::Timer(char const*)>:
c000ba54:	83 ec 0c             	sub    esp,0xc
c000ba57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba5b:	83 ec 08             	sub    esp,0x8
c000ba5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba62:	50                   	push   eax
c000ba63:	e8 7a eb ff ff       	call   c000a5e2 <Device::Device(char const*)>
c000ba68:	83 c4 10             	add    esp,0x10
c000ba6b:	ba d8 af 02 c0       	mov    edx,0xc002afd8
c000ba70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba74:	89 10                	mov    DWORD PTR [eax],edx
c000ba76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba7a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000ba84:	90                   	nop
c000ba85:	83 c4 0c             	add    esp,0xc
c000ba88:	c3                   	ret    
c000ba89:	90                   	nop
c000ba8a:	66 90                	xchg   ax,ax

c000ba8c <Timer::~Timer()>:
c000ba8c:	83 ec 0c             	sub    esp,0xc
c000ba8f:	ba d8 af 02 c0       	mov    edx,0xc002afd8
c000ba94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba98:	89 10                	mov    DWORD PTR [eax],edx
c000ba9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba9e:	83 ec 0c             	sub    esp,0xc
c000baa1:	50                   	push   eax
c000baa2:	e8 db e8 ff ff       	call   c000a382 <Device::~Device()>
c000baa7:	83 c4 10             	add    esp,0x10
c000baaa:	90                   	nop
c000baab:	83 c4 0c             	add    esp,0xc
c000baae:	c3                   	ret    
c000baaf:	90                   	nop

c000bab0 <Timer::~Timer()>:
c000bab0:	83 ec 0c             	sub    esp,0xc
c000bab3:	83 ec 0c             	sub    esp,0xc
c000bab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baba:	e8 cd ff ff ff       	call   c000ba8c <Timer::~Timer()>
c000babf:	83 c4 10             	add    esp,0x10
c000bac2:	83 ec 08             	sub    esp,0x8
c000bac5:	68 5c 01 00 00       	push   0x15c
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 31 23 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	83 c4 0c             	add    esp,0xc
c000bad9:	c3                   	ret    

c000bada <Timer::read()>:
c000bada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bade:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bae4:	c3                   	ret    

c000bae5 <setupTimer(int)>:
c000bae5:	53                   	push   ebx
c000bae6:	83 ec 14             	sub    esp,0x14
c000bae9:	68 5c 01 00 00       	push   0x15c
c000baee:	e8 04 48 00 00       	call   c00102f7 <malloc>
c000baf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000baf6:	89 c3                	mov    ebx,eax
c000baf8:	e8 4b 82 01 00       	call   c0023d48 <PIT::PIT()>
c000bafd:	58                   	pop    eax
c000bafe:	5a                   	pop    edx
c000baff:	53                   	push   ebx
c000bb00:	ff 35 08 61 03 c0    	push   DWORD PTR ds:0xc0036108
c000bb06:	e8 75 e9 ff ff       	call   c000a480 <Device::addChild(Device*)>
c000bb0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb0d:	6a 00                	push   0x0
c000bb0f:	6a 00                	push   0x0
c000bb11:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000bb15:	53                   	push   ebx
c000bb16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bb19:	89 d8                	mov    eax,ebx
c000bb1b:	83 c4 28             	add    esp,0x28
c000bb1e:	5b                   	pop    ebx
c000bb1f:	c3                   	ret    

c000bb20 <timerHandler(unsigned int)>:
c000bb20:	57                   	push   edi
c000bb21:	31 d2                	xor    edx,edx
c000bb23:	56                   	push   esi
c000bb24:	53                   	push   ebx
c000bb25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb29:	01 1d 50 5b 03 c0    	add    DWORD PTR ds:0xc0035b50,ebx
c000bb2f:	11 15 54 5b 03 c0    	adc    DWORD PTR ds:0xc0035b54,edx
c000bb35:	80 3d 0d 61 03 c0 00 	cmp    BYTE PTR ds:0xc003610d,0x0
c000bb3c:	0f 84 46 01 00 00    	je     c000bc88 <timerHandler(unsigned int)+0x168>
c000bb42:	fa                   	cli    
c000bb43:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c000bb49:	83 ec 0c             	sub    esp,0xc
c000bb4c:	68 40 63 03 c0       	push   0xc0036340
c000bb51:	e8 9a d4 01 00       	call   c0028ff0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000bb56:	83 c4 10             	add    esp,0x10
c000bb59:	84 c0                	test   al,al
c000bb5b:	0f 85 a7 00 00 00    	jne    c000bc08 <timerHandler(unsigned int)+0xe8>
c000bb61:	83 ec 0c             	sub    esp,0xc
c000bb64:	68 40 63 03 c0       	push   0xc0036340
c000bb69:	e8 9e d4 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000bb6e:	83 c4 10             	add    esp,0x10
c000bb71:	89 c6                	mov    esi,eax
c000bb73:	90                   	nop
c000bb74:	83 ec 0c             	sub    esp,0xc
c000bb77:	68 40 63 03 c0       	push   0xc0036340
c000bb7c:	e8 8b d4 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000bb81:	c7 04 24 40 63 03 c0 	mov    DWORD PTR [esp],0xc0036340
c000bb88:	89 c7                	mov    edi,eax
c000bb8a:	e8 85 d4 01 00       	call   c0029014 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000bb8f:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000bb98:	39 15 50 5b 03 c0    	cmp    DWORD PTR ds:0xc0035b50,edx
c000bb9e:	a1 54 5b 03 c0       	mov    eax,ds:0xc0035b54
c000bba3:	19 c8                	sbb    eax,ecx
c000bba5:	72 21                	jb     c000bbc8 <timerHandler(unsigned int)+0xa8>
c000bba7:	83 ec 0c             	sub    esp,0xc
c000bbaa:	57                   	push   edi
c000bbab:	e8 90 ba 00 00       	call   c0017640 <unblockTask(ThreadControlBlock*)>
c000bbb0:	83 c4 10             	add    esp,0x10
c000bbb3:	39 fe                	cmp    esi,edi
c000bbb5:	75 25                	jne    c000bbdc <timerHandler(unsigned int)+0xbc>
c000bbb7:	83 ec 0c             	sub    esp,0xc
c000bbba:	68 40 63 03 c0       	push   0xc0036340
c000bbbf:	e8 48 d4 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000bbc4:	89 c6                	mov    esi,eax
c000bbc6:	eb 10                	jmp    c000bbd8 <timerHandler(unsigned int)+0xb8>
c000bbc8:	51                   	push   ecx
c000bbc9:	51                   	push   ecx
c000bbca:	57                   	push   edi
c000bbcb:	68 40 63 03 c0       	push   0xc0036340
c000bbd0:	e8 fb d4 01 00       	call   c00290d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000bbd5:	8d 76 00             	lea    esi,[esi+0x0]
c000bbd8:	83 c4 10             	add    esp,0x10
c000bbdb:	90                   	nop
c000bbdc:	83 ec 0c             	sub    esp,0xc
c000bbdf:	68 40 63 03 c0       	push   0xc0036340
c000bbe4:	e8 07 d4 01 00       	call   c0028ff0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000bbe9:	83 c4 10             	add    esp,0x10
c000bbec:	84 c0                	test   al,al
c000bbee:	75 18                	jne    c000bc08 <timerHandler(unsigned int)+0xe8>
c000bbf0:	83 ec 0c             	sub    esp,0xc
c000bbf3:	68 40 63 03 c0       	push   0xc0036340
c000bbf8:	e8 0f d4 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000bbfd:	83 c4 10             	add    esp,0x10
c000bc00:	39 f0                	cmp    eax,esi
c000bc02:	0f 85 6c ff ff ff    	jne    c000bb74 <timerHandler(unsigned int)+0x54>
c000bc08:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000bc0e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000bc11:	85 c0                	test   eax,eax
c000bc13:	74 5f                	je     c000bc74 <timerHandler(unsigned int)+0x154>
c000bc15:	80 3d 0c 61 03 c0 00 	cmp    BYTE PTR ds:0xc003610c,0x0
c000bc1c:	74 56                	je     c000bc74 <timerHandler(unsigned int)+0x154>
c000bc1e:	3d e8 03 00 00       	cmp    eax,0x3e8
c000bc23:	76 23                	jbe    c000bc48 <timerHandler(unsigned int)+0x128>
c000bc25:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c000bc29:	75 11                	jne    c000bc3c <timerHandler(unsigned int)+0x11c>
c000bc2b:	52                   	push   edx
c000bc2c:	52                   	push   edx
c000bc2d:	50                   	push   eax
c000bc2e:	68 9f af 02 c0       	push   0xc002af9f
c000bc33:	e8 44 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc38:	83 c4 10             	add    esp,0x10
c000bc3b:	90                   	nop
c000bc3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000bc41:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000bc48:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000bc4e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000bc51:	39 d8                	cmp    eax,ebx
c000bc53:	73 0b                	jae    c000bc60 <timerHandler(unsigned int)+0x140>
c000bc55:	c7 42 38 00 00 00 00 	mov    DWORD PTR [edx+0x38],0x0
c000bc5c:	eb 0e                	jmp    c000bc6c <timerHandler(unsigned int)+0x14c>
c000bc5e:	66 90                	xchg   ax,ax
c000bc60:	89 c1                	mov    ecx,eax
c000bc62:	29 d9                	sub    ecx,ebx
c000bc64:	39 d8                	cmp    eax,ebx
c000bc66:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000bc69:	75 09                	jne    c000bc74 <timerHandler(unsigned int)+0x154>
c000bc6b:	90                   	nop
c000bc6c:	e8 73 b6 00 00       	call   c00172e4 <schedule()>
c000bc71:	8d 76 00             	lea    esi,[esi+0x0]
c000bc74:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c000bc7b:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c000bc82:	75 04                	jne    c000bc88 <timerHandler(unsigned int)+0x168>
c000bc84:	fb                   	sti    
c000bc85:	8d 76 00             	lea    esi,[esi+0x0]
c000bc88:	5b                   	pop    ebx
c000bc89:	5e                   	pop    esi
c000bc8a:	5f                   	pop    edi
c000bc8b:	c3                   	ret    

c000bc8c <VCache::VCache(PhysicalDisk*)>:
c000bc8c:	53                   	push   ebx
c000bc8d:	83 ec 18             	sub    esp,0x18
c000bc90:	ba 48 b0 02 c0       	mov    edx,0xc002b048
c000bc95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc99:	89 10                	mov    DWORD PTR [eax],edx
c000bc9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc9f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000bca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcaa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000bcb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcb5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000bcbc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000bcc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcc7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000bcce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000bcd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcd9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000bce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bce4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000bce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000bcf3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000bcfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcfe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000bd02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd06:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000bd0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd0e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000bd12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd16:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000bd1d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000bd25:	83 ec 0c             	sub    esp,0xc
c000bd28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd2c:	e8 c6 45 00 00       	call   c00102f7 <malloc>
c000bd31:	83 c4 10             	add    esp,0x10
c000bd34:	89 c3                	mov    ebx,eax
c000bd36:	83 ec 0c             	sub    esp,0xc
c000bd39:	53                   	push   ebx
c000bd3a:	e8 ed 49 00 00       	call   c001072c <Mutex::Mutex()>
c000bd3f:	83 c4 10             	add    esp,0x10
c000bd42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd46:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000bd49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd4d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bd51:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000bd54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd58:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000bd5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bd63:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000bd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd6d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000bd70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bd74:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000bd7a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bd80:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bd84:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000bd87:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000bd8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd8e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000bd92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bd96:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bd9c:	05 00 01 00 00       	add    eax,0x100
c000bda1:	c1 e0 04             	shl    eax,0x4
c000bda4:	83 ec 0c             	sub    esp,0xc
c000bda7:	50                   	push   eax
c000bda8:	e8 4a 45 00 00       	call   c00102f7 <malloc>
c000bdad:	83 c4 10             	add    esp,0x10
c000bdb0:	89 c2                	mov    edx,eax
c000bdb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdb6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000bdb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdbd:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000bdc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdc8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000bdcc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bdd0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000bdd6:	89 d0                	mov    eax,edx
c000bdd8:	c1 e0 02             	shl    eax,0x2
c000bddb:	01 d0                	add    eax,edx
c000bddd:	c1 e0 04             	shl    eax,0x4
c000bde0:	83 ec 0c             	sub    esp,0xc
c000bde3:	50                   	push   eax
c000bde4:	e8 0e 45 00 00       	call   c00102f7 <malloc>
c000bde9:	83 c4 10             	add    esp,0x10
c000bdec:	89 c2                	mov    edx,eax
c000bdee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdf2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000bdf5:	90                   	nop
c000bdf6:	83 c4 18             	add    esp,0x18
c000bdf9:	5b                   	pop    ebx
c000bdfa:	c3                   	ret    
c000bdfb:	90                   	nop

c000bdfc <VCache::invalidateReadBuffer()>:
c000bdfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be00:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000be06:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000be0a:	c3                   	ret    
c000be0b:	90                   	nop

c000be0c <VCache::writeWriteBuffer()>:
c000be0c:	53                   	push   ebx
c000be0d:	83 ec 08             	sub    esp,0x8
c000be10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be14:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000be18:	74 1e                	je     c000be38 <VCache::writeWriteBuffer()+0x2c>
c000be1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000be1d:	83 ec 0c             	sub    esp,0xc
c000be20:	8b 10                	mov    edx,DWORD PTR [eax]
c000be22:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000be25:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000be28:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000be2b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000be2e:	50                   	push   eax
c000be2f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000be32:	83 c4 20             	add    esp,0x20
c000be35:	8d 76 00             	lea    esi,[esi+0x0]
c000be38:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000be3f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000be46:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000be4a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000be51:	83 c4 08             	add    esp,0x8
c000be54:	5b                   	pop    ebx
c000be55:	c3                   	ret    
c000be56:	66 90                	xchg   ax,ax

c000be58 <VCache::~VCache()>:
c000be58:	83 ec 0c             	sub    esp,0xc
c000be5b:	ba 48 b0 02 c0       	mov    edx,0xc002b048
c000be60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be64:	89 10                	mov    DWORD PTR [eax],edx
c000be66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be6a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000be6d:	0f b6 c0             	movzx  eax,al
c000be70:	85 c0                	test   eax,eax
c000be72:	74 10                	je     c000be84 <VCache::~VCache()+0x2c>
c000be74:	83 ec 0c             	sub    esp,0xc
c000be77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be7b:	e8 8c ff ff ff       	call   c000be0c <VCache::writeWriteBuffer()>
c000be80:	83 c4 10             	add    esp,0x10
c000be83:	90                   	nop
c000be84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be88:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000be8b:	83 ec 0c             	sub    esp,0xc
c000be8e:	50                   	push   eax
c000be8f:	e8 73 44 00 00       	call   c0010307 <free>
c000be94:	83 c4 10             	add    esp,0x10
c000be97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be9b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000be9e:	83 ec 0c             	sub    esp,0xc
c000bea1:	50                   	push   eax
c000bea2:	e8 60 44 00 00       	call   c0010307 <free>
c000bea7:	83 c4 10             	add    esp,0x10
c000beaa:	90                   	nop
c000beab:	83 c4 0c             	add    esp,0xc
c000beae:	c3                   	ret    
c000beaf:	90                   	nop

c000beb0 <VCache::~VCache()>:
c000beb0:	83 ec 0c             	sub    esp,0xc
c000beb3:	83 ec 0c             	sub    esp,0xc
c000beb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beba:	e8 99 ff ff ff       	call   c000be58 <VCache::~VCache()>
c000bebf:	83 c4 10             	add    esp,0x10
c000bec2:	83 ec 08             	sub    esp,0x8
c000bec5:	6a 44                	push   0x44
c000bec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000becb:	e8 34 1f 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000bed0:	83 c4 10             	add    esp,0x10
c000bed3:	83 c4 0c             	add    esp,0xc
c000bed6:	c3                   	ret    
c000bed7:	90                   	nop

c000bed8 <VCache::write(unsigned long long, int, void*)>:
c000bed8:	55                   	push   ebp
c000bed9:	57                   	push   edi
c000beda:	56                   	push   esi
c000bedb:	53                   	push   ebx
c000bedc:	83 ec 1c             	sub    esp,0x1c
c000bedf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000bee3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000bee7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000beeb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000beef:	e8 dc b0 00 00       	call   c0016fd0 <KeDisablePreemption()>
c000bef4:	b9 00 10 00 00       	mov    ecx,0x1000
c000bef9:	50                   	push   eax
c000befa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000befd:	0f af c3             	imul   eax,ebx
c000bf00:	05 ff 0f 00 00       	add    eax,0xfff
c000bf05:	99                   	cdq    
c000bf06:	f7 f9                	idiv   ecx
c000bf08:	50                   	push   eax
c000bf09:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bf0d:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000bf13:	e8 20 8b 00 00       	call   c0014a38 <VAS::canLockPages(unsigned long, int)>
c000bf18:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000bf1c:	83 c4 10             	add    esp,0x10
c000bf1f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf24:	74 2a                	je     c000bf50 <VCache::write(unsigned long long, int, void*)+0x78>
c000bf26:	b9 00 10 00 00       	mov    ecx,0x1000
c000bf2b:	50                   	push   eax
c000bf2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000bf2f:	0f af c3             	imul   eax,ebx
c000bf32:	05 ff 0f 00 00       	add    eax,0xfff
c000bf37:	99                   	cdq    
c000bf38:	f7 f9                	idiv   ecx
c000bf3a:	50                   	push   eax
c000bf3b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000bf3f:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000bf45:	e8 52 8d 00 00       	call   c0014c9c <VAS::lockPages(unsigned long, int)>
c000bf4a:	83 c4 10             	add    esp,0x10
c000bf4d:	8d 76 00             	lea    esi,[esi+0x0]
c000bf50:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000bf54:	74 0e                	je     c000bf64 <VCache::write(unsigned long long, int, void*)+0x8c>
c000bf56:	83 ec 0c             	sub    esp,0xc
c000bf59:	55                   	push   ebp
c000bf5a:	e8 9d fe ff ff       	call   c000bdfc <VCache::invalidateReadBuffer()>
c000bf5f:	83 c4 10             	add    esp,0x10
c000bf62:	66 90                	xchg   ax,ax
c000bf64:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000bf68:	74 72                	je     c000bfdc <VCache::write(unsigned long long, int, void*)+0x104>
c000bf6a:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000bf6d:	89 c8                	mov    eax,ecx
c000bf6f:	99                   	cdq    
c000bf70:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000bf73:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000bf76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bf86:	31 f0                	xor    eax,esi
c000bf88:	31 fa                	xor    edx,edi
c000bf8a:	09 d0                	or     eax,edx
c000bf8c:	75 42                	jne    c000bfd0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000bf8e:	83 fb 01             	cmp    ebx,0x1
c000bf91:	75 3d                	jne    c000bfd0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000bf93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bf96:	89 cf                	mov    edi,ecx
c000bf98:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bf9e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bfa2:	0f af f8             	imul   edi,eax
c000bfa5:	89 c1                	mov    ecx,eax
c000bfa7:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000bfaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bfac:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000bfaf:	40                   	inc    eax
c000bfb0:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000bfb3:	83 f8 50             	cmp    eax,0x50
c000bfb6:	0f 85 a8 00 00 00    	jne    c000c064 <VCache::write(unsigned long long, int, void*)+0x18c>
c000bfbc:	83 ec 0c             	sub    esp,0xc
c000bfbf:	55                   	push   ebp
c000bfc0:	e8 47 fe ff ff       	call   c000be0c <VCache::writeWriteBuffer()>
c000bfc5:	83 c4 10             	add    esp,0x10
c000bfc8:	e9 97 00 00 00       	jmp    c000c064 <VCache::write(unsigned long long, int, void*)+0x18c>
c000bfcd:	8d 76 00             	lea    esi,[esi+0x0]
c000bfd0:	83 ec 0c             	sub    esp,0xc
c000bfd3:	55                   	push   ebp
c000bfd4:	e8 33 fe ff ff       	call   c000be0c <VCache::writeWriteBuffer()>
c000bfd9:	83 c4 10             	add    esp,0x10
c000bfdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000bfdf:	83 fb 4f             	cmp    ebx,0x4f
c000bfe2:	7f 20                	jg     c000c004 <VCache::write(unsigned long long, int, void*)+0x12c>
c000bfe4:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000bfe7:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000bfea:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000bfed:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000bff1:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000bff4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000bffa:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bffe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c000:	eb 62                	jmp    c000c064 <VCache::write(unsigned long long, int, void*)+0x18c>
c000c002:	66 90                	xchg   ax,ax
c000c004:	83 ec 0c             	sub    esp,0xc
c000c007:	8b 10                	mov    edx,DWORD PTR [eax]
c000c009:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00d:	53                   	push   ebx
c000c00e:	57                   	push   edi
c000c00f:	56                   	push   esi
c000c010:	50                   	push   eax
c000c011:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000c014:	83 c4 20             	add    esp,0x20
c000c017:	89 c6                	mov    esi,eax
c000c019:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c01e:	74 28                	je     c000c048 <VCache::write(unsigned long long, int, void*)+0x170>
c000c020:	b9 00 10 00 00       	mov    ecx,0x1000
c000c025:	52                   	push   edx
c000c026:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000c02a:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000c030:	99                   	cdq    
c000c031:	f7 f9                	idiv   ecx
c000c033:	50                   	push   eax
c000c034:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c038:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000c03e:	e8 31 8a 00 00       	call   c0014a74 <VAS::unlockPages(unsigned long, int)>
c000c043:	83 c4 10             	add    esp,0x10
c000c046:	66 90                	xchg   ax,ax
c000c048:	e8 ab af 00 00       	call   c0016ff8 <KeRestorePreemption()>
c000c04d:	85 f6                	test   esi,esi
c000c04f:	74 4b                	je     c000c09c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000c051:	83 ec 0c             	sub    esp,0xc
c000c054:	68 00 b0 02 c0       	push   0xc002b000
c000c059:	e8 1e af ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c05e:	83 c4 10             	add    esp,0x10
c000c061:	eb 39                	jmp    c000c09c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000c063:	90                   	nop
c000c064:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c069:	74 29                	je     c000c094 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000c06b:	b9 00 10 00 00       	mov    ecx,0x1000
c000c070:	50                   	push   eax
c000c071:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000c075:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000c07b:	99                   	cdq    
c000c07c:	f7 f9                	idiv   ecx
c000c07e:	50                   	push   eax
c000c07f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c083:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000c089:	e8 e6 89 00 00       	call   c0014a74 <VAS::unlockPages(unsigned long, int)>
c000c08e:	83 c4 10             	add    esp,0x10
c000c091:	8d 76 00             	lea    esi,[esi+0x0]
c000c094:	e8 5f af 00 00       	call   c0016ff8 <KeRestorePreemption()>
c000c099:	31 f6                	xor    esi,esi
c000c09b:	90                   	nop
c000c09c:	83 c4 1c             	add    esp,0x1c
c000c09f:	89 f0                	mov    eax,esi
c000c0a1:	5b                   	pop    ebx
c000c0a2:	5e                   	pop    esi
c000c0a3:	5f                   	pop    edi
c000c0a4:	5d                   	pop    ebp
c000c0a5:	c3                   	ret    

c000c0a6 <VCache::read(unsigned long long, int, void*)>:
c000c0a6:	55                   	push   ebp
c000c0a7:	57                   	push   edi
c000c0a8:	bf 00 10 00 00       	mov    edi,0x1000
c000c0ad:	56                   	push   esi
c000c0ae:	53                   	push   ebx
c000c0af:	83 ec 2c             	sub    esp,0x2c
c000c0b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c0b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000c0ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0be:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c0c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0c6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000c0ca:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c0ce:	e8 fd ae 00 00       	call   c0016fd0 <KeDisablePreemption()>
c000c0d3:	50                   	push   eax
c000c0d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c0d7:	0f af c6             	imul   eax,esi
c000c0da:	05 ff 0f 00 00       	add    eax,0xfff
c000c0df:	99                   	cdq    
c000c0e0:	f7 ff                	idiv   edi
c000c0e2:	50                   	push   eax
c000c0e3:	55                   	push   ebp
c000c0e4:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000c0ea:	e8 49 89 00 00       	call   c0014a38 <VAS::canLockPages(unsigned long, int)>
c000c0ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000c0f3:	83 c4 10             	add    esp,0x10
c000c0f6:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000c0fb:	74 1f                	je     c000c11c <VCache::read(unsigned long long, int, void*)+0x76>
c000c0fd:	50                   	push   eax
c000c0fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c101:	0f af c6             	imul   eax,esi
c000c104:	05 ff 0f 00 00       	add    eax,0xfff
c000c109:	99                   	cdq    
c000c10a:	f7 ff                	idiv   edi
c000c10c:	50                   	push   eax
c000c10d:	55                   	push   ebp
c000c10e:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000c114:	e8 83 8b 00 00       	call   c0014c9c <VAS::lockPages(unsigned long, int)>
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000c120:	74 0e                	je     c000c130 <VCache::read(unsigned long long, int, void*)+0x8a>
c000c122:	83 ec 0c             	sub    esp,0xc
c000c125:	53                   	push   ebx
c000c126:	e8 e1 fc ff ff       	call   c000be0c <VCache::writeWriteBuffer()>
c000c12b:	83 c4 10             	add    esp,0x10
c000c12e:	66 90                	xchg   ax,ax
c000c130:	83 fe 01             	cmp    esi,0x1
c000c133:	0f 85 ef 00 00 00    	jne    c000c228 <VCache::read(unsigned long long, int, void*)+0x182>
c000c139:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000c13c:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000c143:	0f 85 df 00 00 00    	jne    c000c228 <VCache::read(unsigned long long, int, void*)+0x182>
c000c149:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000c14c:	89 fe                	mov    esi,edi
c000c14e:	f7 de                	neg    esi
c000c150:	89 f0                	mov    eax,esi
c000c152:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000c156:	c1 f8 1f             	sar    eax,0x1f
c000c159:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000c15d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c161:	89 f0                	mov    eax,esi
c000c163:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c167:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000c16b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000c16f:	89 f2                	mov    edx,esi
c000c171:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000c176:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000c17a:	74 0c                	je     c000c188 <VCache::read(unsigned long long, int, void*)+0xe2>
c000c17c:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000c17f:	75 07                	jne    c000c188 <VCache::read(unsigned long long, int, void*)+0xe2>
c000c181:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000c184:	74 4e                	je     c000c1d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000c186:	66 90                	xchg   ax,ax
c000c188:	83 ec 0c             	sub    esp,0xc
c000c18b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000c18f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000c192:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c195:	8b 31                	mov    esi,DWORD PTR [ecx]
c000c197:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000c19a:	57                   	push   edi
c000c19b:	52                   	push   edx
c000c19c:	50                   	push   eax
c000c19d:	51                   	push   ecx
c000c19e:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000c1a1:	83 c4 20             	add    esp,0x20
c000c1a4:	89 c7                	mov    edi,eax
c000c1a6:	85 c0                	test   eax,eax
c000c1a8:	74 2a                	je     c000c1d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000c1aa:	83 ec 0c             	sub    esp,0xc
c000c1ad:	68 18 b0 02 c0       	push   0xc002b018
c000c1b2:	e8 c5 ad ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c1b7:	83 c4 10             	add    esp,0x10
c000c1ba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000c1bf:	0f 84 b3 00 00 00    	je     c000c278 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000c1c5:	51                   	push   ecx
c000c1c6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c1c9:	05 ff 0f 00 00       	add    eax,0xfff
c000c1ce:	e9 8d 00 00 00       	jmp    c000c260 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000c1d3:	90                   	nop
c000c1d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c1d7:	89 ef                	mov    edi,ebp
c000c1d9:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000c1df:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000c1e2:	8d 70 ff             	lea    esi,[eax-0x1]
c000c1e5:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000c1e9:	0f af f1             	imul   esi,ecx
c000c1ec:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000c1ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c1f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000c1f6:	74 24                	je     c000c21c <VCache::read(unsigned long long, int, void*)+0x176>
c000c1f8:	b9 00 10 00 00       	mov    ecx,0x1000
c000c1fd:	52                   	push   edx
c000c1fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c201:	05 ff 0f 00 00       	add    eax,0xfff
c000c206:	99                   	cdq    
c000c207:	f7 f9                	idiv   ecx
c000c209:	50                   	push   eax
c000c20a:	55                   	push   ebp
c000c20b:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000c211:	e8 5e 88 00 00       	call   c0014a74 <VAS::unlockPages(unsigned long, int)>
c000c216:	83 c4 10             	add    esp,0x10
c000c219:	8d 76 00             	lea    esi,[esi+0x0]
c000c21c:	e8 d7 ad 00 00       	call   c0016ff8 <KeRestorePreemption()>
c000c221:	31 ff                	xor    edi,edi
c000c223:	eb 5b                	jmp    c000c280 <VCache::read(unsigned long long, int, void*)+0x1da>
c000c225:	8d 76 00             	lea    esi,[esi+0x0]
c000c228:	83 ec 0c             	sub    esp,0xc
c000c22b:	53                   	push   ebx
c000c22c:	e8 cb fb ff ff       	call   c000bdfc <VCache::invalidateReadBuffer()>
c000c231:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c234:	8b 10                	mov    edx,DWORD PTR [eax]
c000c236:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c239:	56                   	push   esi
c000c23a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c23e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c242:	50                   	push   eax
c000c243:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c246:	83 c4 20             	add    esp,0x20
c000c249:	89 c7                	mov    edi,eax
c000c24b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000c250:	74 26                	je     c000c278 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000c252:	50                   	push   eax
c000c253:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000c257:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000c25d:	8d 76 00             	lea    esi,[esi+0x0]
c000c260:	b9 00 10 00 00       	mov    ecx,0x1000
c000c265:	99                   	cdq    
c000c266:	f7 f9                	idiv   ecx
c000c268:	50                   	push   eax
c000c269:	55                   	push   ebp
c000c26a:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000c270:	e8 ff 87 00 00       	call   c0014a74 <VAS::unlockPages(unsigned long, int)>
c000c275:	83 c4 10             	add    esp,0x10
c000c278:	e8 7b ad 00 00       	call   c0016ff8 <KeRestorePreemption()>
c000c27d:	8d 76 00             	lea    esi,[esi+0x0]
c000c280:	83 c4 2c             	add    esp,0x2c
c000c283:	89 f8                	mov    eax,edi
c000c285:	5b                   	pop    ebx
c000c286:	5e                   	pop    esi
c000c287:	5f                   	pop    edi
c000c288:	5d                   	pop    ebp
c000c289:	c3                   	ret    

c000c28a <Video::putrect(int, int, int, int, unsigned int)>:
c000c28a:	55                   	push   ebp
c000c28b:	57                   	push   edi
c000c28c:	56                   	push   esi
c000c28d:	53                   	push   ebx
c000c28e:	83 ec 1c             	sub    esp,0x1c
c000c291:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c295:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c299:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000c29d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000c2a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c2a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c2a9:	01 df                	add    edi,ebx
c000c2ab:	39 fb                	cmp    ebx,edi
c000c2ad:	7d 1f                	jge    c000c2ce <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000c2af:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c2b3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000c2b7:	7d 12                	jge    c000c2cb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000c2b9:	8b 16                	mov    edx,DWORD PTR [esi]
c000c2bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c2bf:	53                   	push   ebx
c000c2c0:	55                   	push   ebp
c000c2c1:	45                   	inc    ebp
c000c2c2:	56                   	push   esi
c000c2c3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c2c6:	83 c4 10             	add    esp,0x10
c000c2c9:	eb e8                	jmp    c000c2b3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000c2cb:	43                   	inc    ebx
c000c2cc:	eb dd                	jmp    c000c2ab <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000c2ce:	83 c4 1c             	add    esp,0x1c
c000c2d1:	5b                   	pop    ebx
c000c2d2:	5e                   	pop    esi
c000c2d3:	5f                   	pop    edi
c000c2d4:	5d                   	pop    ebp
c000c2d5:	c3                   	ret    

c000c2d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000c2d6:	55                   	push   ebp
c000c2d7:	57                   	push   edi
c000c2d8:	31 ff                	xor    edi,edi
c000c2da:	56                   	push   esi
c000c2db:	53                   	push   ebx
c000c2dc:	83 ec 1c             	sub    esp,0x1c
c000c2df:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000c2e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c2e7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000c2ee:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000c2f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2f7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000c2fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c2ff:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000c302:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c306:	01 f9                	add    ecx,edi
c000c308:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000c30c:	7d 2f                	jge    c000c33d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000c30e:	31 f6                	xor    esi,esi
c000c310:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c314:	01 f2                	add    edx,esi
c000c316:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000c31a:	7d 1a                	jge    c000c336 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000c31c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c31f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000c322:	46                   	inc    esi
c000c323:	51                   	push   ecx
c000c324:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c328:	52                   	push   edx
c000c329:	55                   	push   ebp
c000c32a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c32d:	83 c4 10             	add    esp,0x10
c000c330:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c334:	eb da                	jmp    c000c310 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000c336:	47                   	inc    edi
c000c337:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000c33b:	eb c5                	jmp    c000c302 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000c33d:	83 c4 1c             	add    esp,0x1c
c000c340:	5b                   	pop    ebx
c000c341:	5e                   	pop    esi
c000c342:	5f                   	pop    edi
c000c343:	5d                   	pop    ebp
c000c344:	c3                   	ret    
c000c345:	90                   	nop

c000c346 <Video::blit(unsigned int*, int, int, int, int)>:
c000c346:	55                   	push   ebp
c000c347:	57                   	push   edi
c000c348:	56                   	push   esi
c000c349:	53                   	push   ebx
c000c34a:	83 ec 1c             	sub    esp,0x1c
c000c34d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c351:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c355:	85 c0                	test   eax,eax
c000c357:	79 02                	jns    c000c35b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000c359:	31 c0                	xor    eax,eax
c000c35b:	c1 e0 02             	shl    eax,0x2
c000c35e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c362:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c366:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c36a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000c36e:	39 d8                	cmp    eax,ebx
c000c370:	7e 49                	jle    c000c3bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000c372:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000c378:	7c 41                	jl     c000c3bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000c37a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c37e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c382:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c386:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000c38a:	39 f9                	cmp    ecx,edi
c000c38c:	7e 22                	jle    c000c3b0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000c38e:	83 c5 04             	add    ebp,0x4
c000c391:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000c397:	7c 14                	jl     c000c3ad <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000c399:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000c39b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000c39e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c3a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c3a6:	56                   	push   esi
c000c3a7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000c3aa:	83 c4 10             	add    esp,0x10
c000c3ad:	47                   	inc    edi
c000c3ae:	eb d2                	jmp    c000c382 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000c3b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c3b4:	43                   	inc    ebx
c000c3b5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c3b9:	eb ab                	jmp    c000c366 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000c3bb:	83 c4 1c             	add    esp,0x1c
c000c3be:	5b                   	pop    ebx
c000c3bf:	5e                   	pop    esi
c000c3c0:	5f                   	pop    edi
c000c3c1:	5d                   	pop    ebp
c000c3c2:	c3                   	ret    
c000c3c3:	90                   	nop

c000c3c4 <Video::clearScreen(unsigned int)>:
c000c3c4:	83 ec 14             	sub    esp,0x14
c000c3c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3cb:	8b 10                	mov    edx,DWORD PTR [eax]
c000c3cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d1:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000c3d7:	ff b0 58 01 00 00    	push   DWORD PTR [eax+0x158]
c000c3dd:	6a 00                	push   0x0
c000c3df:	6a 00                	push   0x0
c000c3e1:	50                   	push   eax
c000c3e2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000c3e5:	83 c4 2c             	add    esp,0x2c
c000c3e8:	c3                   	ret    
c000c3e9:	90                   	nop

c000c3ea <Video::putpixel(int, int, unsigned int)>:
c000c3ea:	c7 44 24 04 50 b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b050
c000c3f2:	e9 55 43 00 00       	jmp    c001074c <KePanic(char const*)>
c000c3f7:	90                   	nop

c000c3f8 <Video::readPixelApprox(int, int)>:
c000c3f8:	83 ec 18             	sub    esp,0x18
c000c3fb:	68 71 b0 02 c0       	push   0xc002b071
c000c400:	e8 47 43 00 00       	call   c001074c <KePanic(char const*)>
c000c405:	31 c0                	xor    eax,eax
c000c407:	83 c4 1c             	add    esp,0x1c
c000c40a:	c3                   	ret    
c000c40b:	90                   	nop

c000c40c <Video::Video(char const*)>:
c000c40c:	83 ec 0c             	sub    esp,0xc
c000c40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c413:	83 ec 08             	sub    esp,0x8
c000c416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c41a:	50                   	push   eax
c000c41b:	e8 c2 e1 ff ff       	call   c000a5e2 <Device::Device(char const*)>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	ba 14 b1 02 c0       	mov    edx,0xc002b114
c000c428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c42c:	89 10                	mov    DWORD PTR [eax],edx
c000c42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c432:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000c43c:	90                   	nop
c000c43d:	83 c4 0c             	add    esp,0xc
c000c440:	c3                   	ret    
c000c441:	90                   	nop

c000c442 <Video::~Video()>:
c000c442:	83 ec 0c             	sub    esp,0xc
c000c445:	ba 14 b1 02 c0       	mov    edx,0xc002b114
c000c44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c44e:	89 10                	mov    DWORD PTR [eax],edx
c000c450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c454:	83 ec 0c             	sub    esp,0xc
c000c457:	50                   	push   eax
c000c458:	e8 25 df ff ff       	call   c000a382 <Device::~Device()>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	90                   	nop
c000c461:	83 c4 0c             	add    esp,0xc
c000c464:	c3                   	ret    
c000c465:	90                   	nop

c000c466 <Video::~Video()>:
c000c466:	83 ec 0c             	sub    esp,0xc
c000c469:	83 ec 0c             	sub    esp,0xc
c000c46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c470:	e8 cd ff ff ff       	call   c000c442 <Video::~Video()>
c000c475:	83 c4 10             	add    esp,0x10
c000c478:	83 ec 08             	sub    esp,0x8
c000c47b:	68 64 11 00 00       	push   0x1164
c000c480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c484:	e8 7b 19 00 00       	call   c000de04 <operator delete(void*, unsigned long)>
c000c489:	83 c4 10             	add    esp,0x10
c000c48c:	83 c4 0c             	add    esp,0xc
c000c48f:	c3                   	ret    

c000c490 <Video::isMonochrome()>:
c000c490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c494:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000c49a:	c3                   	ret    
c000c49b:	90                   	nop

c000c49c <Video::getWidth()>:
c000c49c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4a0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000c4a6:	c3                   	ret    
c000c4a7:	90                   	nop

c000c4a8 <Video::getHeight()>:
c000c4a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4ac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000c4b2:	c3                   	ret    
c000c4b3:	90                   	nop

c000c4b4 <Video::savePixelsInSquare(int, int)>:
c000c4b4:	55                   	push   ebp
c000c4b5:	57                   	push   edi
c000c4b6:	56                   	push   esi
c000c4b7:	53                   	push   ebx
c000c4b8:	83 ec 1c             	sub    esp,0x1c
c000c4bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c4bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c4c3:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c000c4c9:	89 de                	mov    esi,ebx
c000c4cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c4cf:	53                   	push   ebx
c000c4d0:	e8 d3 ff ff ff       	call   c000c4a8 <Video::getHeight()>
c000c4d5:	59                   	pop    ecx
c000c4d6:	39 c7                	cmp    edi,eax
c000c4d8:	7d 36                	jge    c000c510 <Video::savePixelsInSquare(int, int)+0x5c>
c000c4da:	31 ed                	xor    ebp,ebp
c000c4dc:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c4e0:	53                   	push   ebx
c000c4e1:	01 e9                	add    ecx,ebp
c000c4e3:	e8 b4 ff ff ff       	call   c000c49c <Video::getWidth()>
c000c4e8:	5a                   	pop    edx
c000c4e9:	39 c8                	cmp    eax,ecx
c000c4eb:	7e 19                	jle    c000c506 <Video::savePixelsInSquare(int, int)+0x52>
c000c4ed:	50                   	push   eax
c000c4ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4f0:	57                   	push   edi
c000c4f1:	51                   	push   ecx
c000c4f2:	53                   	push   ebx
c000c4f3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 84 ae 64 01 00 00 	mov    DWORD PTR [esi+ebp*4+0x164],eax
c000c500:	45                   	inc    ebp
c000c501:	83 fd 20             	cmp    ebp,0x20
c000c504:	75 d6                	jne    c000c4dc <Video::savePixelsInSquare(int, int)+0x28>
c000c506:	47                   	inc    edi
c000c507:	83 ee 80             	sub    esi,0xffffff80
c000c50a:	3b 74 24 0c          	cmp    esi,DWORD PTR [esp+0xc]
c000c50e:	75 bf                	jne    c000c4cf <Video::savePixelsInSquare(int, int)+0x1b>
c000c510:	83 c4 1c             	add    esp,0x1c
c000c513:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c000c519:	5b                   	pop    ebx
c000c51a:	5e                   	pop    esi
c000c51b:	5f                   	pop    edi
c000c51c:	5d                   	pop    ebp
c000c51d:	c3                   	ret    

c000c51e <Video::drawCursor(int, int, unsigned int*, int)>:
c000c51e:	55                   	push   ebp
c000c51f:	57                   	push   edi
c000c520:	56                   	push   esi
c000c521:	53                   	push   ebx
c000c522:	83 ec 2c             	sub    esp,0x2c
c000c525:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c529:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000c52d:	83 f8 01             	cmp    eax,0x1
c000c530:	19 c9                	sbb    ecx,ecx
c000c532:	31 db                	xor    ebx,ebx
c000c534:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c538:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c53c:	f7 54 24 14          	not    DWORD PTR [esp+0x14]
c000c540:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000c548:	81 64 24 14 ff ff ff 00 	and    DWORD PTR [esp+0x14],0xffffff
c000c550:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000c554:	01 d8                	add    eax,ebx
c000c556:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c55a:	56                   	push   esi
c000c55b:	e8 48 ff ff ff       	call   c000c4a8 <Video::getHeight()>
c000c560:	59                   	pop    ecx
c000c561:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c565:	0f 8e 81 00 00 00    	jle    c000c5ec <Video::drawCursor(int, int, unsigned int*, int)+0xce>
c000c56b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c56f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000c572:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c576:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c57a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000c57f:	8b ac 98 80 00 00 00 	mov    ebp,DWORD PTR [eax+ebx*4+0x80]
c000c586:	75 04                	jne    c000c58c <Video::drawCursor(int, int, unsigned int*, int)+0x6e>
c000c588:	85 ed                	test   ebp,ebp
c000c58a:	74 56                	je     c000c5e2 <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000c58c:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c590:	89 f8                	mov    eax,edi
c000c592:	83 c0 20             	add    eax,0x20
c000c595:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c599:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c59d:	09 e8                	or     eax,ebp
c000c59f:	74 41                	je     c000c5e2 <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000c5a1:	56                   	push   esi
c000c5a2:	e8 f5 fe ff ff       	call   c000c49c <Video::getWidth()>
c000c5a7:	5a                   	pop    edx
c000c5a8:	39 c7                	cmp    edi,eax
c000c5aa:	7d 36                	jge    c000c5e2 <Video::drawCursor(int, int, unsigned int*, int)+0xc4>
c000c5ac:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c5b2:	74 08                	je     c000c5bc <Video::drawCursor(int, int, unsigned int*, int)+0x9e>
c000c5b4:	8b 06                	mov    eax,DWORD PTR [esi]
c000c5b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5ba:	eb 0d                	jmp    c000c5c9 <Video::drawCursor(int, int, unsigned int*, int)+0xab>
c000c5bc:	f6 44 24 0c 01       	test   BYTE PTR [esp+0xc],0x1
c000c5c1:	74 12                	je     c000c5d5 <Video::drawCursor(int, int, unsigned int*, int)+0xb7>
c000c5c3:	8b 06                	mov    eax,DWORD PTR [esi]
c000c5c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c5c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5cd:	57                   	push   edi
c000c5ce:	56                   	push   esi
c000c5cf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000c5d2:	83 c4 10             	add    esp,0x10
c000c5d5:	d1 ed                	shr    ebp,1
c000c5d7:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c000c5db:	47                   	inc    edi
c000c5dc:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000c5e0:	75 b7                	jne    c000c599 <Video::drawCursor(int, int, unsigned int*, int)+0x7b>
c000c5e2:	43                   	inc    ebx
c000c5e3:	83 fb 20             	cmp    ebx,0x20
c000c5e6:	0f 85 64 ff ff ff    	jne    c000c550 <Video::drawCursor(int, int, unsigned int*, int)+0x32>
c000c5ec:	83 c4 2c             	add    esp,0x2c
c000c5ef:	5b                   	pop    ebx
c000c5f0:	5e                   	pop    esi
c000c5f1:	5f                   	pop    edi
c000c5f2:	5d                   	pop    ebp
c000c5f3:	c3                   	ret    

c000c5f4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000c5f4:	55                   	push   ebp
c000c5f5:	57                   	push   edi
c000c5f6:	56                   	push   esi
c000c5f7:	53                   	push   ebx
c000c5f8:	83 ec 48             	sub    esp,0x48
c000c5fb:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c5ff:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000c603:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000c607:	c1 e0 08             	shl    eax,0x8
c000c60a:	01 d0                	add    eax,edx
c000c60c:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000c610:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c614:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000c618:	c1 e0 08             	shl    eax,0x8
c000c61b:	01 d0                	add    eax,edx
c000c61d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c621:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c625:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000c62a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c62e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c632:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000c639:	50                   	push   eax
c000c63a:	e8 b8 3c 00 00       	call   c00102f7 <malloc>
c000c63f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c643:	83 c4 10             	add    esp,0x10
c000c646:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000c64b:	75 10                	jne    c000c65d <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000c64d:	83 ec 0c             	sub    esp,0xc
c000c650:	68 9c b0 02 c0       	push   0xc002b09c
c000c655:	e8 f2 40 00 00       	call   c001074c <KePanic(char const*)>
c000c65a:	83 c4 10             	add    esp,0x10
c000c65d:	51                   	push   ecx
c000c65e:	51                   	push   ecx
c000c65f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c663:	50                   	push   eax
c000c664:	68 ac b0 02 c0       	push   0xc002b0ac
c000c669:	e8 0e a9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c66e:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000c671:	83 e0 20             	and    eax,0x20
c000c674:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c678:	85 c0                	test   eax,eax
c000c67a:	5e                   	pop    esi
c000c67b:	0f 94 c0             	sete   al
c000c67e:	5f                   	pop    edi
c000c67f:	0f b6 c0             	movzx  eax,al
c000c682:	be 12 00 00 00       	mov    esi,0x12
c000c687:	50                   	push   eax
c000c688:	68 b6 b0 02 c0       	push   0xc002b0b6
c000c68d:	e8 ea a8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c692:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 d0                	mov    eax,edx
c000c69b:	85 d2                	test   edx,edx
c000c69d:	74 11                	je     c000c6b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000c69f:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000c6a3:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000c6a7:	c1 fe 03             	sar    esi,0x3
c000c6aa:	0f af f1             	imul   esi,ecx
c000c6ad:	83 c6 12             	add    esi,0x12
c000c6b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000c6b5:	74 07                	je     c000c6be <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000c6b7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000c6bc:	75 12                	jne    c000c6d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000c6be:	83 ec 0c             	sub    esp,0xc
c000c6c1:	68 c4 b0 02 c0       	push   0xc002b0c4
c000c6c6:	e8 b1 a8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c6cb:	e9 a0 02 00 00       	jmp    c000c970 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000c6d0:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000c6d4:	83 f9 02             	cmp    ecx,0x2
c000c6d7:	74 0e                	je     c000c6e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000c6d9:	83 f9 0a             	cmp    ecx,0xa
c000c6dc:	0f 84 c8 00 00 00    	je     c000c7aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000c6e2:	e9 72 02 00 00       	jmp    c000c959 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000c6e7:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c6ec:	75 0e                	jne    c000c6fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000c6ee:	84 c0                	test   al,al
c000c6f0:	75 0a                	jne    c000c6fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000c6f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c6f5:	83 e8 18             	sub    eax,0x18
c000c6f8:	a8 f7                	test   al,0xf7
c000c6fa:	74 0d                	je     c000c709 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000c6fc:	83 ec 0c             	sub    esp,0xc
c000c6ff:	68 d9 b0 02 c0       	push   0xc002b0d9
c000c704:	e9 58 02 00 00       	jmp    c000c961 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000c709:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000c70e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c716:	31 c0                	xor    eax,eax
c000c718:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c71c:	89 c7                	mov    edi,eax
c000c71e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c726:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c72b:	75 15                	jne    c000c742 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000c72d:	99                   	cdq    
c000c72e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000c732:	85 d2                	test   edx,edx
c000c734:	75 0c                	jne    c000c742 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000c736:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c73a:	29 c7                	sub    edi,eax
c000c73c:	4f                   	dec    edi
c000c73d:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000c742:	31 d2                	xor    edx,edx
c000c744:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c748:	75 08                	jne    c000c752 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000c74a:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000c74f:	c1 e2 18             	shl    edx,0x18
c000c752:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000c757:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000c75b:	c1 e1 10             	shl    ecx,0x10
c000c75e:	8d 47 01             	lea    eax,[edi+0x1]
c000c761:	89 cd                	mov    ebp,ecx
c000c763:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000c768:	c1 e1 08             	shl    ecx,0x8
c000c76b:	09 e9                	or     ecx,ebp
c000c76d:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000c771:	09 e9                	or     ecx,ebp
c000c773:	09 d1                	or     ecx,edx
c000c775:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c779:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000c77c:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000c780:	c1 fa 03             	sar    edx,0x3
c000c783:	01 d6                	add    esi,edx
c000c785:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c789:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000c78d:	7e 04                	jle    c000c793 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000c78f:	89 c7                	mov    edi,eax
c000c791:	eb 93                	jmp    c000c726 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000c793:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c797:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c79b:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c79f:	0f 8f 77 ff ff ff    	jg     c000c71c <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000c7a5:	e9 d3 01 00 00       	jmp    c000c97d <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000c7aa:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000c7af:	75 0e                	jne    c000c7bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000c7b1:	85 d2                	test   edx,edx
c000c7b3:	75 0a                	jne    c000c7bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000c7b5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000c7b8:	83 e8 18             	sub    eax,0x18
c000c7bb:	a8 f7                	test   al,0xf7
c000c7bd:	74 0d                	je     c000c7cc <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000c7bf:	83 ec 0c             	sub    esp,0xc
c000c7c2:	68 e7 b0 02 c0       	push   0xc002b0e7
c000c7c7:	e9 95 01 00 00       	jmp    c000c961 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000c7cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c7d4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c7dc:	31 c9                	xor    ecx,ecx
c000c7de:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c7e2:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000c7e6:	0f 8e 91 01 00 00    	jle    c000c97d <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000c7ec:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000c7f0:	0f 8d 87 01 00 00    	jge    c000c97d <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000c7f6:	8d 46 01             	lea    eax,[esi+0x1]
c000c7f9:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000c7fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c801:	83 fd 7f             	cmp    ebp,0x7f
c000c804:	89 e8                	mov    eax,ebp
c000c806:	0f 8e 9d 00 00 00    	jle    c000c8a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000c80c:	83 e0 7f             	and    eax,0x7f
c000c80f:	31 d2                	xor    edx,edx
c000c811:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c815:	40                   	inc    eax
c000c816:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c81a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c81e:	75 0a                	jne    c000c82a <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000c820:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000c825:	89 ea                	mov    edx,ebp
c000c827:	c1 e2 18             	shl    edx,0x18
c000c82a:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000c82f:	c1 e0 10             	shl    eax,0x10
c000c832:	89 c7                	mov    edi,eax
c000c834:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000c839:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c83d:	c1 e0 08             	shl    eax,0x8
c000c840:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000c844:	09 f8                	or     eax,edi
c000c846:	31 f6                	xor    esi,esi
c000c848:	09 c5                	or     ebp,eax
c000c84a:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000c84f:	09 d5                	or     ebp,edx
c000c851:	85 ff                	test   edi,edi
c000c853:	75 1d                	jne    c000c872 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000c855:	89 c8                	mov    eax,ecx
c000c857:	99                   	cdq    
c000c858:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000c85c:	85 d2                	test   edx,edx
c000c85e:	75 12                	jne    c000c872 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000c860:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c864:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000c868:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c86c:	49                   	dec    ecx
c000c86d:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000c872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c876:	8d 51 01             	lea    edx,[ecx+0x1]
c000c879:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000c87c:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000c880:	8d 46 01             	lea    eax,[esi+0x1]
c000c883:	7e 06                	jle    c000c88b <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000c885:	89 c6                	mov    esi,eax
c000c887:	89 d1                	mov    ecx,edx
c000c889:	eb c6                	jmp    c000c851 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000c88b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c88f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c893:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000c897:	c1 f8 03             	sar    eax,0x3
c000c89a:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000c89e:	89 d1                	mov    ecx,edx
c000c8a0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c8a4:	e9 35 ff ff ff       	jmp    c000c7de <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000c8a9:	8d 45 01             	lea    eax,[ebp+0x1]
c000c8ac:	31 f6                	xor    esi,esi
c000c8ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8b2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c8b7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c8bb:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c8c0:	75 1d                	jne    c000c8df <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000c8c2:	89 c8                	mov    eax,ecx
c000c8c4:	99                   	cdq    
c000c8c5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000c8c9:	85 d2                	test   edx,edx
c000c8cb:	75 12                	jne    c000c8df <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000c8cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c8d1:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000c8d5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c8d9:	49                   	dec    ecx
c000c8da:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000c8df:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000c8e7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000c8eb:	75 10                	jne    c000c8fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000c8ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8f1:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000c8f6:	c1 e7 18             	shl    edi,0x18
c000c8f9:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000c8fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c901:	8d 51 01             	lea    edx,[ecx+0x1]
c000c904:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000c909:	c1 e0 10             	shl    eax,0x10
c000c90c:	89 c7                	mov    edi,eax
c000c90e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c912:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000c917:	c1 e0 08             	shl    eax,0x8
c000c91a:	09 f8                	or     eax,edi
c000c91c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c920:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000c924:	09 f8                	or     eax,edi
c000c926:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c92a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000c92e:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000c931:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000c935:	c1 f8 03             	sar    eax,0x3
c000c938:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000c93c:	8d 46 01             	lea    eax,[esi+0x1]
c000c93f:	39 f5                	cmp    ebp,esi
c000c941:	7e 09                	jle    c000c94c <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000c943:	89 c6                	mov    esi,eax
c000c945:	89 d1                	mov    ecx,edx
c000c947:	e9 6f ff ff ff       	jmp    c000c8bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000c94c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c950:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000c954:	e9 45 ff ff ff       	jmp    c000c89e <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000c959:	52                   	push   edx
c000c95a:	52                   	push   edx
c000c95b:	51                   	push   ecx
c000c95c:	68 f6 b0 02 c0       	push   0xc002b0f6
c000c961:	e8 16 a6 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c966:	58                   	pop    eax
c000c967:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c96b:	e8 97 39 00 00       	call   c0010307 <free>
c000c970:	83 c4 10             	add    esp,0x10
c000c973:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000c97b:	eb 14                	jmp    c000c991 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000c97d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c981:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000c985:	89 18                	mov    DWORD PTR [eax],ebx
c000c987:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c98b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c98f:	89 18                	mov    DWORD PTR [eax],ebx
c000c991:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c995:	83 c4 3c             	add    esp,0x3c
c000c998:	5b                   	pop    ebx
c000c999:	5e                   	pop    esi
c000c99a:	5f                   	pop    edi
c000c99b:	5d                   	pop    ebp
c000c99c:	c3                   	ret    
c000c99d:	90                   	nop

c000c99e <Video::putTGA(int, int, unsigned char*, int)>:
c000c99e:	55                   	push   ebp
c000c99f:	57                   	push   edi
c000c9a0:	56                   	push   esi
c000c9a1:	53                   	push   ebx
c000c9a2:	83 ec 28             	sub    esp,0x28
c000c9a5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c9a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000c9ad:	50                   	push   eax
c000c9ae:	8d 44 24 18          	lea    eax,[esp+0x18]
c000c9b2:	50                   	push   eax
c000c9b3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c9b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000c9bb:	57                   	push   edi
c000c9bc:	e8 33 fc ff ff       	call   c000c5f4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000c9c1:	83 c4 20             	add    esp,0x20
c000c9c4:	85 c0                	test   eax,eax
c000c9c6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c9ca:	74 3a                	je     c000ca06 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000c9cc:	89 c6                	mov    esi,eax
c000c9ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9d2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c9d6:	39 d8                	cmp    eax,ebx
c000c9d8:	7e 2c                	jle    c000ca06 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000c9da:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c9de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9e2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9e6:	39 e8                	cmp    eax,ebp
c000c9e8:	7e 19                	jle    c000ca03 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000c9ea:	83 c6 04             	add    esi,0x4
c000c9ed:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000c9f0:	85 c0                	test   eax,eax
c000c9f2:	79 0c                	jns    c000ca00 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000c9f4:	8b 17                	mov    edx,DWORD PTR [edi]
c000c9f6:	50                   	push   eax
c000c9f7:	53                   	push   ebx
c000c9f8:	55                   	push   ebp
c000c9f9:	57                   	push   edi
c000c9fa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c9fd:	83 c4 10             	add    esp,0x10
c000ca00:	45                   	inc    ebp
c000ca01:	eb db                	jmp    c000c9de <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ca03:	43                   	inc    ebx
c000ca04:	eb c8                	jmp    c000c9ce <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ca06:	83 c4 1c             	add    esp,0x1c
c000ca09:	5b                   	pop    ebx
c000ca0a:	5e                   	pop    esi
c000ca0b:	5f                   	pop    edi
c000ca0c:	5d                   	pop    ebp
c000ca0d:	c3                   	ret    
c000ca0e:	66 90                	xchg   ax,ax

c000ca10 <ACPI::close(int, int, void*)>:
c000ca10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ca15:	c3                   	ret    
c000ca16:	66 90                	xchg   ax,ax

c000ca18 <loadACPITables(unsigned char*)>:
c000ca18:	57                   	push   edi
c000ca19:	56                   	push   esi
c000ca1a:	53                   	push   ebx
c000ca1b:	83 ec 60             	sub    esp,0x60
c000ca1e:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000ca23:	0f 84 43 02 00 00    	je     c000cc6c <loadACPITables(unsigned char*)+0x254>
c000ca29:	a0 80 5d 03 c0       	mov    al,ds:0xc0035d80
c000ca2e:	0f b6 c0             	movzx  eax,al
c000ca31:	85 c0                	test   eax,eax
c000ca33:	74 7b                	je     c000cab0 <loadACPITables(unsigned char*)+0x98>
c000ca35:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ca39:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca3d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ca41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca44:	83 e8 24             	sub    eax,0x24
c000ca47:	c1 e8 03             	shr    eax,0x3
c000ca4a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ca4e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ca56:	66 90                	xchg   ax,ax
c000ca58:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ca5c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ca60:	0f 8d ba 00 00 00    	jge    c000cb20 <loadACPITables(unsigned char*)+0x108>
c000ca66:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ca6a:	83 c0 24             	add    eax,0x24
c000ca6d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ca71:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ca75:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ca79:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ca7d:	c1 e0 03             	shl    eax,0x3
c000ca80:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ca84:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ca88:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ca8b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ca8d:	89 c1                	mov    ecx,eax
c000ca8f:	a1 60 5b 03 c0       	mov    eax,ds:0xc0035b60
c000ca94:	8d 50 01             	lea    edx,[eax+0x1]
c000ca97:	89 15 60 5b 03 c0    	mov    DWORD PTR ds:0xc0035b60,edx
c000ca9d:	89 ca                	mov    edx,ecx
c000ca9f:	89 14 c5 84 5b 03 c0 	mov    DWORD PTR [eax*8-0x3ffca47c],edx
c000caa6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000caab:	eb ab                	jmp    c000ca58 <loadACPITables(unsigned char*)+0x40>
c000caad:	8d 76 00             	lea    esi,[esi+0x0]
c000cab0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cab4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cab8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cabc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cabf:	83 e8 24             	sub    eax,0x24
c000cac2:	c1 e8 02             	shr    eax,0x2
c000cac5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000cac9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000cad1:	8d 76 00             	lea    esi,[esi+0x0]
c000cad4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cad8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000cadc:	7d 42                	jge    c000cb20 <loadACPITables(unsigned char*)+0x108>
c000cade:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000cae2:	83 c0 24             	add    eax,0x24
c000cae5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cae9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000caed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000caf1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000caf5:	c1 e0 02             	shl    eax,0x2
c000caf8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000cafc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb00:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cb02:	a1 60 5b 03 c0       	mov    eax,ds:0xc0035b60
c000cb07:	8d 50 01             	lea    edx,[eax+0x1]
c000cb0a:	89 15 60 5b 03 c0    	mov    DWORD PTR ds:0xc0035b60,edx
c000cb10:	89 ca                	mov    edx,ecx
c000cb12:	89 14 c5 84 5b 03 c0 	mov    DWORD PTR [eax*8-0x3ffca47c],edx
c000cb19:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000cb1e:	eb b4                	jmp    c000cad4 <loadACPITables(unsigned char*)+0xbc>
c000cb20:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000cb28:	a1 60 5b 03 c0       	mov    eax,ds:0xc0035b60
c000cb2d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000cb31:	0f 8d 39 01 00 00    	jge    c000cc70 <loadACPITables(unsigned char*)+0x258>
c000cb37:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cb3b:	8b 04 c5 84 5b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffca47c]
c000cb42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb4a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cb4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb52:	25 ff 0f 00 00       	and    eax,0xfff
c000cb57:	89 c6                	mov    esi,eax
c000cb59:	8b 1d 90 62 03 c0    	mov    ebx,DWORD PTR ds:0xc0036290
c000cb5f:	83 ec 0c             	sub    esp,0xc
c000cb62:	6a 01                	push   0x1
c000cb64:	e8 7a 71 00 00       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c000cb69:	83 c4 10             	add    esp,0x10
c000cb6c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb70:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000cb76:	83 ec 0c             	sub    esp,0xc
c000cb79:	6a 01                	push   0x1
c000cb7b:	6a 01                	push   0x1
c000cb7d:	50                   	push   eax
c000cb7e:	52                   	push   edx
c000cb7f:	53                   	push   ebx
c000cb80:	e8 2b 7a 00 00       	call   c00145b0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cb85:	83 c4 20             	add    esp,0x20
c000cb88:	09 f0                	or     eax,esi
c000cb8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb8e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cb92:	c1 e0 03             	shl    eax,0x3
c000cb95:	05 80 5b 03 c0       	add    eax,0xc0035b80
c000cb9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cb9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cba2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cba6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000cbae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cbb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cbba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cbbe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cbc2:	89 c6                	mov    esi,eax
c000cbc4:	89 d7                	mov    edi,edx
c000cbc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cbc8:	89 c8                	mov    eax,ecx
c000cbca:	89 fa                	mov    edx,edi
c000cbcc:	89 f3                	mov    ebx,esi
c000cbce:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cbd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000cbd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cbda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbe9:	05 00 10 00 00       	add    eax,0x1000
c000cbee:	c1 e8 0c             	shr    eax,0xc
c000cbf1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cbf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbf9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cbfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc01:	25 ff 0f 00 00       	and    eax,0xfff
c000cc06:	89 c6                	mov    esi,eax
c000cc08:	8b 1d 90 62 03 c0    	mov    ebx,DWORD PTR ds:0xc0036290
c000cc0e:	83 ec 0c             	sub    esp,0xc
c000cc11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000cc15:	e8 c9 70 00 00       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cc21:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000cc27:	83 ec 0c             	sub    esp,0xc
c000cc2a:	6a 01                	push   0x1
c000cc2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc30:	50                   	push   eax
c000cc31:	52                   	push   edx
c000cc32:	53                   	push   ebx
c000cc33:	e8 78 79 00 00       	call   c00145b0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cc38:	83 c4 20             	add    esp,0x20
c000cc3b:	09 f0                	or     eax,esi
c000cc3d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc45:	83 ec 0c             	sub    esp,0xc
c000cc48:	50                   	push   eax
c000cc49:	e8 9d 73 00 00       	call   c0013feb <Virt::freeKernelVirtualPages(unsigned long)>
c000cc4e:	83 c4 10             	add    esp,0x10
c000cc51:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cc55:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cc59:	89 14 c5 84 5b 03 c0 	mov    DWORD PTR [eax*8-0x3ffca47c],edx
c000cc60:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000cc65:	e9 be fe ff ff       	jmp    c000cb28 <loadACPITables(unsigned char*)+0x110>
c000cc6a:	66 90                	xchg   ax,ax
c000cc6c:	90                   	nop
c000cc6d:	8d 76 00             	lea    esi,[esi+0x0]
c000cc70:	83 c4 60             	add    esp,0x60
c000cc73:	5b                   	pop    ebx
c000cc74:	5e                   	pop    esi
c000cc75:	5f                   	pop    edi
c000cc76:	c3                   	ret    
c000cc77:	90                   	nop

c000cc78 <findRSDT(unsigned char*)>:
c000cc78:	57                   	push   edi
c000cc79:	56                   	push   esi
c000cc7a:	53                   	push   ebx
c000cc7b:	83 ec 50             	sub    esp,0x50
c000cc7e:	a1 88 5d 03 c0       	mov    eax,ds:0xc0035d88
c000cc83:	85 c0                	test   eax,eax
c000cc85:	75 0d                	jne    c000cc94 <findRSDT(unsigned char*)+0x1c>
c000cc87:	b8 00 00 00 00       	mov    eax,0x0
c000cc8c:	e9 2b 01 00 00       	jmp    c000cdbc <findRSDT(unsigned char*)+0x144>
c000cc91:	8d 76 00             	lea    esi,[esi+0x0]
c000cc94:	89 e0                	mov    eax,esp
c000cc96:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000cc9a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000cc9e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cca2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000ccaa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ccae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ccb2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ccb6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ccba:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ccbe:	89 c6                	mov    esi,eax
c000ccc0:	89 d7                	mov    edi,edx
c000ccc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ccc4:	89 c8                	mov    eax,ecx
c000ccc6:	89 fa                	mov    edx,edi
c000ccc8:	89 f3                	mov    ebx,esi
c000ccca:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ccce:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ccd2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ccd6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ccda:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000ccde:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000cce6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ccf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ccfa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ccfe:	25 ff 0f 00 00       	and    eax,0xfff
c000cd03:	89 c6                	mov    esi,eax
c000cd05:	8b 1d 90 62 03 c0    	mov    ebx,DWORD PTR ds:0xc0036290
c000cd0b:	83 ec 0c             	sub    esp,0xc
c000cd0e:	6a 02                	push   0x2
c000cd10:	e8 ce 6f 00 00       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c000cd15:	83 c4 10             	add    esp,0x10
c000cd18:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000cd1c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000cd22:	83 ec 0c             	sub    esp,0xc
c000cd25:	6a 01                	push   0x1
c000cd27:	6a 02                	push   0x2
c000cd29:	50                   	push   eax
c000cd2a:	52                   	push   edx
c000cd2b:	53                   	push   ebx
c000cd2c:	e8 7f 78 00 00       	call   c00145b0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cd31:	83 c4 20             	add    esp,0x20
c000cd34:	09 f0                	or     eax,esi
c000cd36:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000cd3a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd3e:	25 ff 0f 00 00       	and    eax,0xfff
c000cd43:	89 c6                	mov    esi,eax
c000cd45:	8b 1d 90 62 03 c0    	mov    ebx,DWORD PTR ds:0xc0036290
c000cd4b:	83 ec 0c             	sub    esp,0xc
c000cd4e:	6a 02                	push   0x2
c000cd50:	e8 8e 6f 00 00       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c000cd55:	83 c4 10             	add    esp,0x10
c000cd58:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cd5c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000cd62:	83 ec 0c             	sub    esp,0xc
c000cd65:	6a 01                	push   0x1
c000cd67:	6a 02                	push   0x2
c000cd69:	50                   	push   eax
c000cd6a:	52                   	push   edx
c000cd6b:	53                   	push   ebx
c000cd6c:	e8 3f 78 00 00       	call   c00145b0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cd71:	83 c4 20             	add    esp,0x20
c000cd74:	09 f0                	or     eax,esi
c000cd76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cd7a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000cd7f:	85 c0                	test   eax,eax
c000cd81:	75 11                	jne    c000cd94 <findRSDT(unsigned char*)+0x11c>
c000cd83:	c6 05 80 5d 03 c0 00 	mov    BYTE PTR ds:0xc0035d80,0x0
c000cd8a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd8e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd92:	eb 24                	jmp    c000cdb8 <findRSDT(unsigned char*)+0x140>
c000cd94:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000cd99:	83 f8 02             	cmp    eax,0x2
c000cd9c:	75 12                	jne    c000cdb0 <findRSDT(unsigned char*)+0x138>
c000cd9e:	c6 05 80 5d 03 c0 01 	mov    BYTE PTR ds:0xc0035d80,0x1
c000cda5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cda9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cdad:	eb 09                	jmp    c000cdb8 <findRSDT(unsigned char*)+0x140>
c000cdaf:	90                   	nop
c000cdb0:	b8 00 00 00 00       	mov    eax,0x0
c000cdb5:	eb 05                	jmp    c000cdbc <findRSDT(unsigned char*)+0x144>
c000cdb7:	90                   	nop
c000cdb8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000cdbc:	83 c4 50             	add    esp,0x50
c000cdbf:	5b                   	pop    ebx
c000cdc0:	5e                   	pop    esi
c000cdc1:	5f                   	pop    edi
c000cdc2:	c3                   	ret    
c000cdc3:	90                   	nop

c000cdc4 <findDataTable(unsigned char*, char*)>:
c000cdc4:	83 ec 1c             	sub    esp,0x1c
c000cdc7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000cdcc:	75 0a                	jne    c000cdd8 <findDataTable(unsigned char*, char*)+0x14>
c000cdce:	b8 00 00 00 00       	mov    eax,0x0
c000cdd3:	eb 5f                	jmp    c000ce34 <findDataTable(unsigned char*, char*)+0x70>
c000cdd5:	8d 76 00             	lea    esi,[esi+0x0]
c000cdd8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000cde0:	a1 60 5b 03 c0       	mov    eax,ds:0xc0035b60
c000cde5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000cde9:	7d 41                	jge    c000ce2c <findDataTable(unsigned char*, char*)+0x68>
c000cdeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cdef:	c1 e0 03             	shl    eax,0x3
c000cdf2:	05 80 5b 03 c0       	add    eax,0xc0035b80
c000cdf7:	83 ec 04             	sub    esp,0x4
c000cdfa:	6a 04                	push   0x4
c000cdfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce00:	50                   	push   eax
c000ce01:	e8 7a 35 ff ff       	call   c0000380 <memcmp>
c000ce06:	83 c4 10             	add    esp,0x10
c000ce09:	85 c0                	test   eax,eax
c000ce0b:	0f 94 c0             	sete   al
c000ce0e:	0f b6 c0             	movzx  eax,al
c000ce11:	85 c0                	test   eax,eax
c000ce13:	74 0f                	je     c000ce24 <findDataTable(unsigned char*, char*)+0x60>
c000ce15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce19:	8b 04 c5 84 5b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffca47c]
c000ce20:	eb 12                	jmp    c000ce34 <findDataTable(unsigned char*, char*)+0x70>
c000ce22:	66 90                	xchg   ax,ax
c000ce24:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000ce29:	eb b5                	jmp    c000cde0 <findDataTable(unsigned char*, char*)+0x1c>
c000ce2b:	90                   	nop
c000ce2c:	b8 00 00 00 00       	mov    eax,0x0
c000ce31:	8d 76 00             	lea    esi,[esi+0x0]
c000ce34:	83 c4 1c             	add    esp,0x1c
c000ce37:	c3                   	ret    

c000ce38 <scanMADT()>:
c000ce38:	53                   	push   ebx
c000ce39:	83 ec 38             	sub    esp,0x38
c000ce3c:	c7 05 88 5d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035d88,0x0
c000ce46:	c7 05 84 5d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035d84,0x0
c000ce50:	83 ec 0c             	sub    esp,0xc
c000ce53:	68 5c b1 02 c0       	push   0xc002b15c
c000ce58:	e8 1f a1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	e8 31 dd 00 00       	call   c001ab96 <HalFindRSDP()>
c000ce65:	a3 88 5d 03 c0       	mov    ds:0xc0035d88,eax
c000ce6a:	a1 88 5d 03 c0       	mov    eax,ds:0xc0035d88
c000ce6f:	85 c0                	test   eax,eax
c000ce71:	0f 84 59 04 00 00    	je     c000d2d0 <scanMADT()+0x498>
c000ce77:	83 ec 0c             	sub    esp,0xc
c000ce7a:	68 6a b1 02 c0       	push   0xc002b16a
c000ce7f:	e8 f8 a0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ce84:	83 c4 10             	add    esp,0x10
c000ce87:	a1 88 5d 03 c0       	mov    eax,ds:0xc0035d88
c000ce8c:	83 ec 0c             	sub    esp,0xc
c000ce8f:	50                   	push   eax
c000ce90:	e8 e3 fd ff ff       	call   c000cc78 <findRSDT(unsigned char*)>
c000ce95:	83 c4 10             	add    esp,0x10
c000ce98:	a3 84 5d 03 c0       	mov    ds:0xc0035d84,eax
c000ce9d:	a1 84 5d 03 c0       	mov    eax,ds:0xc0035d84
c000cea2:	85 c0                	test   eax,eax
c000cea4:	0f 84 2a 04 00 00    	je     c000d2d4 <scanMADT()+0x49c>
c000ceaa:	8b 15 84 5d 03 c0    	mov    edx,DWORD PTR ds:0xc0035d84
c000ceb0:	a1 88 5d 03 c0       	mov    eax,ds:0xc0035d88
c000ceb5:	83 ec 04             	sub    esp,0x4
c000ceb8:	52                   	push   edx
c000ceb9:	50                   	push   eax
c000ceba:	68 10 b3 02 c0       	push   0xc002b310
c000cebf:	e8 b8 a0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000cec4:	83 c4 10             	add    esp,0x10
c000cec7:	a1 84 5d 03 c0       	mov    eax,ds:0xc0035d84
c000cecc:	83 ec 0c             	sub    esp,0xc
c000cecf:	50                   	push   eax
c000ced0:	e8 43 fb ff ff       	call   c000ca18 <loadACPITables(unsigned char*)>
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	a1 84 5d 03 c0       	mov    eax,ds:0xc0035d84
c000cedd:	83 ec 08             	sub    esp,0x8
c000cee0:	68 79 b1 02 c0       	push   0xc002b179
c000cee5:	50                   	push   eax
c000cee6:	e8 d9 fe ff ff       	call   c000cdc4 <findDataTable(unsigned char*, char*)>
c000ceeb:	83 c4 10             	add    esp,0x10
c000ceee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef2:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cef7:	0f 84 db 03 00 00    	je     c000d2d8 <scanMADT()+0x4a0>
c000cefd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000cf05:	8d 76 00             	lea    esi,[esi+0x0]
c000cf08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf0f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000cf13:	0f 87 c7 03 00 00    	ja     c000d2e0 <scanMADT()+0x4a8>
c000cf19:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000cf21:	0f 87 b9 03 00 00    	ja     c000d2e0 <scanMADT()+0x4a8>
c000cf27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cf2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf33:	8d 50 01             	lea    edx,[eax+0x1]
c000cf36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cf3e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cf42:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000cf46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf4a:	8d 50 01             	lea    edx,[eax+0x1]
c000cf4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cf55:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000cf59:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000cf5d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000cf62:	83 f8 02             	cmp    eax,0x2
c000cf65:	0f 86 71 03 00 00    	jbe    c000d2dc <scanMADT()+0x4a4>
c000cf6b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cf70:	85 c0                	test   eax,eax
c000cf72:	75 58                	jne    c000cfcc <scanMADT()+0x194>
c000cf74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf78:	8d 50 01             	lea    edx,[eax+0x1]
c000cf7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf7f:	8a 15 80 5f 03 c0    	mov    dl,BYTE PTR ds:0xc0035f80
c000cf85:	0f b6 d2             	movzx  edx,dl
c000cf88:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000cf8c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000cf90:	88 82 c0 5f 03 c0    	mov    BYTE PTR [edx-0x3ffca040],al
c000cf96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf9a:	8d 50 01             	lea    edx,[eax+0x1]
c000cf9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cfa1:	8a 15 80 5f 03 c0    	mov    dl,BYTE PTR ds:0xc0035f80
c000cfa7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cfaa:	88 0d 80 5f 03 c0    	mov    BYTE PTR ds:0xc0035f80,cl
c000cfb0:	0f b6 d2             	movzx  edx,dl
c000cfb3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000cfb7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000cfbb:	88 82 a0 5f 03 c0    	mov    BYTE PTR [edx-0x3ffca060],al
c000cfc1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000cfc6:	e9 f1 02 00 00       	jmp    c000d2bc <scanMADT()+0x484>
c000cfcb:	90                   	nop
c000cfcc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000cfd1:	83 f8 01             	cmp    eax,0x1
c000cfd4:	0f 85 32 01 00 00    	jne    c000d10c <scanMADT()+0x2d4>
c000cfda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfde:	8d 50 01             	lea    edx,[eax+0x1]
c000cfe1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cfe5:	8a 15 40 5e 03 c0    	mov    dl,BYTE PTR ds:0xc0035e40
c000cfeb:	0f b6 d2             	movzx  edx,dl
c000cfee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000cff2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000cff6:	88 82 60 5e 03 c0    	mov    BYTE PTR [edx-0x3ffca1a0],al
c000cffc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000d001:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d005:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d009:	01 d0                	add    eax,edx
c000d00b:	83 c0 2c             	add    eax,0x2c
c000d00e:	8a 00                	mov    al,BYTE PTR [eax]
c000d010:	0f b6 d0             	movzx  edx,al
c000d013:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d017:	8d 48 01             	lea    ecx,[eax+0x1]
c000d01a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d01e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d022:	0f b6 c0             	movzx  eax,al
c000d025:	c1 e0 08             	shl    eax,0x8
c000d028:	89 d1                	mov    ecx,edx
c000d02a:	09 c1                	or     ecx,eax
c000d02c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d030:	8d 50 02             	lea    edx,[eax+0x2]
c000d033:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d037:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d03b:	0f b6 c0             	movzx  eax,al
c000d03e:	c1 e0 10             	shl    eax,0x10
c000d041:	09 c1                	or     ecx,eax
c000d043:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d047:	8d 50 03             	lea    edx,[eax+0x3]
c000d04a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d04e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d052:	0f b6 c0             	movzx  eax,al
c000d055:	c1 e0 18             	shl    eax,0x18
c000d058:	09 c1                	or     ecx,eax
c000d05a:	89 ca                	mov    edx,ecx
c000d05c:	a0 40 5e 03 c0       	mov    al,ds:0xc0035e40
c000d061:	0f b6 c0             	movzx  eax,al
c000d064:	89 14 85 80 5e 03 c0 	mov    DWORD PTR [eax*4-0x3ffca180],edx
c000d06b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d070:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d074:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d078:	01 d0                	add    eax,edx
c000d07a:	83 c0 2c             	add    eax,0x2c
c000d07d:	8a 00                	mov    al,BYTE PTR [eax]
c000d07f:	0f b6 d0             	movzx  edx,al
c000d082:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d086:	8d 48 01             	lea    ecx,[eax+0x1]
c000d089:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d08d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d091:	0f b6 c0             	movzx  eax,al
c000d094:	c1 e0 08             	shl    eax,0x8
c000d097:	89 d1                	mov    ecx,edx
c000d099:	09 c1                	or     ecx,eax
c000d09b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d09f:	8d 50 02             	lea    edx,[eax+0x2]
c000d0a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d0a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d0aa:	0f b6 c0             	movzx  eax,al
c000d0ad:	c1 e0 10             	shl    eax,0x10
c000d0b0:	09 c1                	or     ecx,eax
c000d0b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0b6:	8d 50 03             	lea    edx,[eax+0x3]
c000d0b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d0bd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d0c1:	0f b6 c0             	movzx  eax,al
c000d0c4:	c1 e0 18             	shl    eax,0x18
c000d0c7:	09 c1                	or     ecx,eax
c000d0c9:	89 ca                	mov    edx,ecx
c000d0cb:	a0 40 5e 03 c0       	mov    al,ds:0xc0035e40
c000d0d0:	0f b6 c0             	movzx  eax,al
c000d0d3:	89 14 85 00 5f 03 c0 	mov    DWORD PTR [eax*4-0x3ffca100],edx
c000d0da:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d0df:	a0 40 5e 03 c0       	mov    al,ds:0xc0035e40
c000d0e4:	83 c0 01             	add    eax,0x1
c000d0e7:	a2 40 5e 03 c0       	mov    ds:0xc0035e40,al
c000d0ec:	a0 40 5e 03 c0       	mov    al,ds:0xc0035e40
c000d0f1:	0f b6 c0             	movzx  eax,al
c000d0f4:	83 ec 08             	sub    esp,0x8
c000d0f7:	50                   	push   eax
c000d0f8:	68 7e b1 02 c0       	push   0xc002b17e
c000d0fd:	e8 7a 9e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d102:	83 c4 10             	add    esp,0x10
c000d105:	e9 b2 01 00 00       	jmp    c000d2bc <scanMADT()+0x484>
c000d10a:	66 90                	xchg   ax,ax
c000d10c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d111:	83 f8 02             	cmp    eax,0x2
c000d114:	0f 85 ea 00 00 00    	jne    c000d204 <scanMADT()+0x3cc>
c000d11a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d11e:	8d 50 01             	lea    edx,[eax+0x1]
c000d121:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d125:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d129:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d12d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000d131:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d135:	8d 50 01             	lea    edx,[eax+0x1]
c000d138:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d13c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d140:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d144:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000d148:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d14c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d150:	01 d0                	add    eax,edx
c000d152:	83 c0 2c             	add    eax,0x2c
c000d155:	8a 00                	mov    al,BYTE PTR [eax]
c000d157:	0f b6 d0             	movzx  edx,al
c000d15a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d15e:	8d 48 01             	lea    ecx,[eax+0x1]
c000d161:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d165:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d169:	0f b6 c0             	movzx  eax,al
c000d16c:	c1 e0 08             	shl    eax,0x8
c000d16f:	89 d1                	mov    ecx,edx
c000d171:	09 c1                	or     ecx,eax
c000d173:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d177:	8d 50 02             	lea    edx,[eax+0x2]
c000d17a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d17e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d182:	0f b6 c0             	movzx  eax,al
c000d185:	c1 e0 10             	shl    eax,0x10
c000d188:	09 c1                	or     ecx,eax
c000d18a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d18e:	8d 50 03             	lea    edx,[eax+0x3]
c000d191:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d195:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000d199:	0f b6 c0             	movzx  eax,al
c000d19c:	c1 e0 18             	shl    eax,0x18
c000d19f:	09 c8                	or     eax,ecx
c000d1a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d1a5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000d1aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d1ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1b2:	01 d0                	add    eax,edx
c000d1b4:	83 c0 2c             	add    eax,0x2c
c000d1b7:	8a 00                	mov    al,BYTE PTR [eax]
c000d1b9:	0f b6 c0             	movzx  eax,al
c000d1bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d1c0:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d1c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d1c7:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000d1cb:	0f b6 d2             	movzx  edx,dl
c000d1ce:	c1 e2 08             	shl    edx,0x8
c000d1d1:	09 d0                	or     eax,edx
c000d1d3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000d1d8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d1dd:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000d1e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1e6:	88 90 e8 f6 02 c0    	mov    BYTE PTR [eax-0x3ffd0918],dl
c000d1ec:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000d1f1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000d1f6:	66 89 84 12 20 5e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffca1e0],ax
c000d1fe:	e9 b9 00 00 00       	jmp    c000d2bc <scanMADT()+0x484>
c000d203:	90                   	nop
c000d204:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d209:	83 f8 04             	cmp    eax,0x4
c000d20c:	0f 85 9a 00 00 00    	jne    c000d2ac <scanMADT()+0x474>
c000d212:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d216:	8d 50 01             	lea    edx,[eax+0x1]
c000d219:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d21d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d221:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d225:	0f b6 c0             	movzx  eax,al
c000d228:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d22c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d230:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d234:	01 d0                	add    eax,edx
c000d236:	83 c0 2c             	add    eax,0x2c
c000d239:	8a 00                	mov    al,BYTE PTR [eax]
c000d23b:	0f b6 d0             	movzx  edx,al
c000d23e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d242:	8d 48 01             	lea    ecx,[eax+0x1]
c000d245:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d249:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000d24d:	0f b6 c0             	movzx  eax,al
c000d250:	c1 e0 08             	shl    eax,0x8
c000d253:	09 d0                	or     eax,edx
c000d255:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d259:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000d25e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d262:	8d 50 01             	lea    edx,[eax+0x1]
c000d265:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d269:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d26d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000d271:	0f b6 c0             	movzx  eax,al
c000d274:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d27c:	c1 e0 08             	shl    eax,0x8
c000d27f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d283:	89 c1                	mov    ecx,eax
c000d285:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d289:	c1 e0 18             	shl    eax,0x18
c000d28c:	89 c3                	mov    ebx,eax
c000d28e:	a1 8c 5d 03 c0       	mov    eax,ds:0xc0035d8c
c000d293:	8d 50 01             	lea    edx,[eax+0x1]
c000d296:	89 15 8c 5d 03 c0    	mov    DWORD PTR ds:0xc0035d8c,edx
c000d29c:	09 d9                	or     ecx,ebx
c000d29e:	89 ca                	mov    edx,ecx
c000d2a0:	89 14 85 a0 5d 03 c0 	mov    DWORD PTR [eax*4-0x3ffca260],edx
c000d2a7:	eb 13                	jmp    c000d2bc <scanMADT()+0x484>
c000d2a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d2ac:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000d2b1:	83 f8 05             	cmp    eax,0x5
c000d2b4:	75 06                	jne    c000d2bc <scanMADT()+0x484>
c000d2b6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000d2bb:	90                   	nop
c000d2bc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000d2c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d2c5:	01 d0                	add    eax,edx
c000d2c7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2cb:	e9 38 fc ff ff       	jmp    c000cf08 <scanMADT()+0xd0>
c000d2d0:	90                   	nop
c000d2d1:	eb 0d                	jmp    c000d2e0 <scanMADT()+0x4a8>
c000d2d3:	90                   	nop
c000d2d4:	90                   	nop
c000d2d5:	eb 09                	jmp    c000d2e0 <scanMADT()+0x4a8>
c000d2d7:	90                   	nop
c000d2d8:	90                   	nop
c000d2d9:	eb 05                	jmp    c000d2e0 <scanMADT()+0x4a8>
c000d2db:	90                   	nop
c000d2dc:	90                   	nop
c000d2dd:	8d 76 00             	lea    esi,[esi+0x0]
c000d2e0:	83 c4 38             	add    esp,0x38
c000d2e3:	5b                   	pop    ebx
c000d2e4:	c3                   	ret    
c000d2e5:	90                   	nop
c000d2e6:	66 90                	xchg   ax,ax

c000d2e8 <ACPI::ACPI()>:
c000d2e8:	83 ec 0c             	sub    esp,0xc
c000d2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ef:	83 ec 08             	sub    esp,0x8
c000d2f2:	68 67 a6 02 c0       	push   0xc002a667
c000d2f7:	50                   	push   eax
c000d2f8:	e8 e5 d2 ff ff       	call   c000a5e2 <Device::Device(char const*)>
c000d2fd:	83 c4 10             	add    esp,0x10
c000d300:	ba b4 b3 02 c0       	mov    edx,0xc002b3b4
c000d305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d309:	89 10                	mov    DWORD PTR [eax],edx
c000d30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d30f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000d316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000d324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d328:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000d332:	90                   	nop
c000d333:	83 c4 0c             	add    esp,0xc
c000d336:	c3                   	ret    
c000d337:	90                   	nop

c000d338 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000d338:	83 ec 2c             	sub    esp,0x2c
c000d33b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d33f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d343:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d347:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000d34b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000d350:	88 d0                	mov    al,dl
c000d352:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d356:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d35b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d363:	90                   	nop
c000d364:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d368:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d36e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000d372:	0f 8d b0 00 00 00    	jge    c000d428 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000d378:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d37c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d380:	83 c2 2a             	add    edx,0x2a
c000d383:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000d387:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000d38c:	0f b7 c0             	movzx  eax,ax
c000d38f:	39 c2                	cmp    edx,eax
c000d391:	0f 85 85 00 00 00    	jne    c000d41c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000d397:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d39b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d39f:	83 c2 2a             	add    edx,0x2a
c000d3a2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000d3a6:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000d3ab:	0f b6 c0             	movzx  eax,al
c000d3ae:	39 c2                	cmp    edx,eax
c000d3b0:	75 6a                	jne    c000d41c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000d3b2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d3b7:	85 c0                	test   eax,eax
c000d3b9:	74 3d                	je     c000d3f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000d3bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d3bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d3c3:	83 c2 2a             	add    edx,0x2a
c000d3c6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000d3ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d3ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d3d1:	39 c2                	cmp    edx,eax
c000d3d3:	74 13                	je     c000d3e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000d3d5:	83 ec 0c             	sub    esp,0xc
c000d3d8:	68 34 b3 02 c0       	push   0xc002b334
c000d3dd:	e8 6a 33 00 00       	call   c001074c <KePanic(char const*)>
c000d3e2:	83 c4 10             	add    esp,0x10
c000d3e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3e8:	83 ec 0c             	sub    esp,0xc
c000d3eb:	68 9a b1 02 c0       	push   0xc002b19a
c000d3f0:	e8 57 33 00 00       	call   c001074c <KePanic(char const*)>
c000d3f5:	83 c4 10             	add    esp,0x10
c000d3f8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d3fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d400:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d404:	83 c2 2a             	add    edx,0x2a
c000d407:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000d40b:	8b 02                	mov    eax,DWORD PTR [edx]
c000d40d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000d410:	89 01                	mov    DWORD PTR [ecx],eax
c000d412:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d415:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d41a:	66 90                	xchg   ax,ax
c000d41c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000d421:	e9 3e ff ff ff       	jmp    c000d364 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000d426:	66 90                	xchg   ax,ax
c000d428:	90                   	nop
c000d429:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d42d:	83 c4 2c             	add    esp,0x2c
c000d430:	c2 04 00             	ret    0x4
c000d433:	90                   	nop

c000d434 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000d434:	83 ec 1c             	sub    esp,0x1c
c000d437:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d43b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d43f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d443:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000d448:	88 c8                	mov    al,cl
c000d44a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000d44e:	88 d0                	mov    al,dl
c000d450:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000d454:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d458:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d45e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d462:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d465:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000d469:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000d46d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d471:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d477:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d47b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000d47e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d482:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000d487:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d491:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000d495:	83 c0 01             	add    eax,0x1
c000d498:	88 c1                	mov    cl,al
c000d49a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d49e:	83 c2 2a             	add    edx,0x2a
c000d4a1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000d4a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000d4af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4b3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000d4b6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d4ba:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000d4be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4c2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d4c8:	8d 50 01             	lea    edx,[eax+0x1]
c000d4cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4cf:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000d4d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000d4df:	3d 00 02 00 00       	cmp    eax,0x200
c000d4e4:	75 12                	jne    c000d4f8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000d4e6:	83 ec 0c             	sub    esp,0xc
c000d4e9:	68 a9 b1 02 c0       	push   0xc002b1a9
c000d4ee:	e8 59 32 00 00       	call   c001074c <KePanic(char const*)>
c000d4f3:	83 c4 10             	add    esp,0x10
c000d4f6:	66 90                	xchg   ax,ax
c000d4f8:	90                   	nop
c000d4f9:	83 c4 1c             	add    esp,0x1c
c000d4fc:	c3                   	ret    
c000d4fd:	90                   	nop
c000d4fe:	66 90                	xchg   ax,ax

c000d500 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000d500:	b8 00 00 00 00       	mov    eax,0x0
c000d505:	c3                   	ret    
c000d506:	66 90                	xchg   ax,ax

c000d508 <ACPI::detectPCI()>:
c000d508:	53                   	push   ebx
c000d509:	83 ec 28             	sub    esp,0x28
c000d50c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d511:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000d516:	a1 84 5d 03 c0       	mov    eax,ds:0xc0035d84
c000d51b:	83 ec 08             	sub    esp,0x8
c000d51e:	68 c6 b1 02 c0       	push   0xc002b1c6
c000d523:	50                   	push   eax
c000d524:	e8 9b f8 ff ff       	call   c000cdc4 <findDataTable(unsigned char*, char*)>
c000d529:	83 c4 10             	add    esp,0x10
c000d52c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d530:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000d535:	74 0d                	je     c000d544 <ACPI::detectPCI()+0x3c>
c000d537:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d53c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d541:	8d 76 00             	lea    esi,[esi+0x0]
c000d544:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000d54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d550:	8a 00                	mov    al,BYTE PTR [eax]
c000d552:	0f b6 c0             	movzx  eax,al
c000d555:	83 f8 01             	cmp    eax,0x1
c000d558:	75 0e                	jne    c000d568 <ACPI::detectPCI()+0x60>
c000d55a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d55f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d564:	eb 2e                	jmp    c000d594 <ACPI::detectPCI()+0x8c>
c000d566:	66 90                	xchg   ax,ax
c000d568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d56c:	8a 00                	mov    al,BYTE PTR [eax]
c000d56e:	0f b6 c0             	movzx  eax,al
c000d571:	83 f8 02             	cmp    eax,0x2
c000d574:	75 1e                	jne    c000d594 <ACPI::detectPCI()+0x8c>
c000d576:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d57b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d580:	85 c0                	test   eax,eax
c000d582:	74 10                	je     c000d594 <ACPI::detectPCI()+0x8c>
c000d584:	83 ec 0c             	sub    esp,0xc
c000d587:	68 64 b3 02 c0       	push   0xc002b364
c000d58c:	e8 bb 31 00 00       	call   c001074c <KePanic(char const*)>
c000d591:	83 c4 10             	add    esp,0x10
c000d594:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000d598:	83 f0 01             	xor    eax,0x1
c000d59b:	0f b6 c0             	movzx  eax,al
c000d59e:	85 c0                	test   eax,eax
c000d5a0:	74 46                	je     c000d5e8 <ACPI::detectPCI()+0xe0>
c000d5a2:	e8 89 2b ff ff       	call   c0000130 <manualPCIProbe>
c000d5a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5ab:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000d5b0:	75 0e                	jne    c000d5c0 <ACPI::detectPCI()+0xb8>
c000d5b2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d5b7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000d5bc:	eb 2a                	jmp    c000d5e8 <ACPI::detectPCI()+0xe0>
c000d5be:	66 90                	xchg   ax,ax
c000d5c0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000d5c5:	75 21                	jne    c000d5e8 <ACPI::detectPCI()+0xe0>
c000d5c7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000d5cc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000d5d1:	85 c0                	test   eax,eax
c000d5d3:	74 13                	je     c000d5e8 <ACPI::detectPCI()+0xe0>
c000d5d5:	83 ec 0c             	sub    esp,0xc
c000d5d8:	68 64 b3 02 c0       	push   0xc002b364
c000d5dd:	e8 6a 31 00 00       	call   c001074c <KePanic(char const*)>
c000d5e2:	83 c4 10             	add    esp,0x10
c000d5e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5e8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000d5ed:	85 c0                	test   eax,eax
c000d5ef:	0f 84 87 00 00 00    	je     c000d67c <ACPI::detectPCI()+0x174>
c000d5f5:	83 ec 0c             	sub    esp,0xc
c000d5f8:	68 cb b1 02 c0       	push   0xc002b1cb
c000d5fd:	e8 57 07 00 00       	call   c000dd59 <KeSetBootMessage(char const*)>
c000d602:	83 c4 10             	add    esp,0x10
c000d605:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d60d:	83 ec 0c             	sub    esp,0xc
c000d610:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d614:	e8 de 2c 00 00       	call   c00102f7 <malloc>
c000d619:	83 c4 10             	add    esp,0x10
c000d61c:	89 c3                	mov    ebx,eax
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	53                   	push   ebx
c000d622:	e8 89 2f 01 00       	call   c00205b0 <PCI::PCI()>
c000d627:	83 c4 10             	add    esp,0x10
c000d62a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000d62e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d632:	83 ec 08             	sub    esp,0x8
c000d635:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d639:	50                   	push   eax
c000d63a:	e8 41 ce ff ff       	call   c000a480 <Device::addChild(Device*)>
c000d63f:	83 c4 10             	add    esp,0x10
c000d642:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d646:	8b 00                	mov    eax,DWORD PTR [eax]
c000d648:	83 c0 08             	add    eax,0x8
c000d64b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d64d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000d652:	85 d2                	test   edx,edx
c000d654:	74 0a                	je     c000d660 <ACPI::detectPCI()+0x158>
c000d656:	ba 01 00 00 00       	mov    edx,0x1
c000d65b:	eb 0b                	jmp    c000d668 <ACPI::detectPCI()+0x160>
c000d65d:	8d 76 00             	lea    esi,[esi+0x0]
c000d660:	ba 02 00 00 00       	mov    edx,0x2
c000d665:	8d 76 00             	lea    esi,[esi+0x0]
c000d668:	6a 00                	push   0x0
c000d66a:	6a 00                	push   0x0
c000d66c:	52                   	push   edx
c000d66d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d671:	ff d0                	call   eax
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	e9 91 00 00 00       	jmp    c000d70c <ACPI::detectPCI()+0x204>
c000d67b:	90                   	nop
c000d67c:	83 ec 0c             	sub    esp,0xc
c000d67f:	68 e3 b1 02 c0       	push   0xc002b1e3
c000d684:	e8 d0 06 00 00       	call   c000dd59 <KeSetBootMessage(char const*)>
c000d689:	83 c4 10             	add    esp,0x10
c000d68c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000d693:	83 ec 0c             	sub    esp,0xc
c000d696:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d69a:	e8 58 2c 00 00       	call   c00102f7 <malloc>
c000d69f:	83 c4 10             	add    esp,0x10
c000d6a2:	89 c3                	mov    ebx,eax
c000d6a4:	83 ec 0c             	sub    esp,0xc
c000d6a7:	53                   	push   ebx
c000d6a8:	e8 09 3b 01 00       	call   c00211b6 <IDE::IDE()>
c000d6ad:	83 c4 10             	add    esp,0x10
c000d6b0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000d6b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d6b8:	83 ec 08             	sub    esp,0x8
c000d6bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d6bf:	50                   	push   eax
c000d6c0:	e8 bb cd ff ff       	call   c000a480 <Device::addChild(Device*)>
c000d6c5:	83 c4 10             	add    esp,0x10
c000d6c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6cc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000d6d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6da:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000d6e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6e7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000d6f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d6f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6f6:	83 c0 08             	add    eax,0x8
c000d6f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6fb:	6a 00                	push   0x0
c000d6fd:	6a 00                	push   0x0
c000d6ff:	6a 00                	push   0x0
c000d701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d705:	ff d0                	call   eax
c000d707:	83 c4 10             	add    esp,0x10
c000d70a:	66 90                	xchg   ax,ax
c000d70c:	90                   	nop
c000d70d:	83 c4 28             	add    esp,0x28
c000d710:	5b                   	pop    ebx
c000d711:	c3                   	ret    
c000d712:	66 90                	xchg   ax,ax

c000d714 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000d714:	83 ec 0c             	sub    esp,0xc
c000d717:	83 ec 0c             	sub    esp,0xc
c000d71a:	68 f8 b1 02 c0       	push   0xc002b1f8
c000d71f:	e8 28 30 00 00       	call   c001074c <KePanic(char const*)>
c000d724:	83 c4 10             	add    esp,0x10
c000d727:	90                   	nop
c000d728:	83 c4 0c             	add    esp,0xc
c000d72b:	c3                   	ret    

c000d72c <ACPI::open(int, int, void*)>:
c000d72c:	57                   	push   edi
c000d72d:	56                   	push   esi
c000d72e:	53                   	push   ebx
c000d72f:	81 ec 70 01 00 00    	sub    esp,0x170
c000d735:	83 ec 0c             	sub    esp,0xc
c000d738:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d73f:	e8 c4 fd ff ff       	call   c000d508 <ACPI::detectPCI()>
c000d744:	83 c4 10             	add    esp,0x10
c000d747:	83 ec 0c             	sub    esp,0xc
c000d74a:	68 8c b3 02 c0       	push   0xc002b38c
c000d74f:	e8 05 06 00 00       	call   c000dd59 <KeSetBootMessage(char const*)>
c000d754:	83 c4 10             	add    esp,0x10
c000d757:	b8 4c 05 00 00       	mov    eax,0x54c
c000d75c:	8a 00                	mov    al,BYTE PTR [eax]
c000d75e:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000d765:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000d76d:	83 f8 01             	cmp    eax,0x1
c000d770:	75 12                	jne    c000d784 <ACPI::open(int, int, void*)+0x58>
c000d772:	83 ec 0c             	sub    esp,0xc
c000d775:	68 09 b2 02 c0       	push   0xc002b209
c000d77a:	e8 16 8a 00 00       	call   c0016195 <Thr::loadKernelSymbolTable(char const*)>
c000d77f:	83 c4 10             	add    esp,0x10
c000d782:	eb 34                	jmp    c000d7b8 <ACPI::open(int, int, void*)+0x8c>
c000d784:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000d78c:	3d bb 00 00 00       	cmp    eax,0xbb
c000d791:	75 15                	jne    c000d7a8 <ACPI::open(int, int, void*)+0x7c>
c000d793:	83 ec 0c             	sub    esp,0xc
c000d796:	68 27 b2 02 c0       	push   0xc002b227
c000d79b:	e8 f5 89 00 00       	call   c0016195 <Thr::loadKernelSymbolTable(char const*)>
c000d7a0:	83 c4 10             	add    esp,0x10
c000d7a3:	eb 13                	jmp    c000d7b8 <ACPI::open(int, int, void*)+0x8c>
c000d7a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d7a8:	83 ec 0c             	sub    esp,0xc
c000d7ab:	68 45 b2 02 c0       	push   0xc002b245
c000d7b0:	e8 97 2f 00 00       	call   c001074c <KePanic(char const*)>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000d7c0:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000d7cb:	83 ec 0c             	sub    esp,0xc
c000d7ce:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d7d5:	e8 1d 2b 00 00       	call   c00102f7 <malloc>
c000d7da:	83 c4 10             	add    esp,0x10
c000d7dd:	89 c3                	mov    ebx,eax
c000d7df:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c000d7e4:	83 ec 04             	sub    esp,0x4
c000d7e7:	50                   	push   eax
c000d7e8:	68 5f b2 02 c0       	push   0xc002b25f
c000d7ed:	53                   	push   ebx
c000d7ee:	e8 c1 b3 ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c000d7f3:	83 c4 10             	add    esp,0x10
c000d7f6:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000d7fd:	83 ec 08             	sub    esp,0x8
c000d800:	6a 01                	push   0x1
c000d802:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000d809:	e8 c4 b3 ff ff       	call   c0008bd2 <File::open(FileOpenMode)>
c000d80e:	83 c4 10             	add    esp,0x10
c000d811:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000d818:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000d820:	75 16                	jne    c000d838 <ACPI::open(int, int, void*)+0x10c>
c000d822:	83 ec 0c             	sub    esp,0xc
c000d825:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000d82c:	e8 ff b3 ff ff       	call   c0008c30 <File::close()>
c000d831:	83 c4 10             	add    esp,0x10
c000d834:	eb 0a                	jmp    c000d840 <ACPI::open(int, int, void*)+0x114>
c000d836:	66 90                	xchg   ax,ax
c000d838:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000d840:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000d848:	74 1e                	je     c000d868 <ACPI::open(int, int, void*)+0x13c>
c000d84a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000d851:	8b 00                	mov    eax,DWORD PTR [eax]
c000d853:	83 c0 08             	add    eax,0x8
c000d856:	8b 00                	mov    eax,DWORD PTR [eax]
c000d858:	83 ec 0c             	sub    esp,0xc
c000d85b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000d862:	ff d0                	call   eax
c000d864:	83 c4 10             	add    esp,0x10
c000d867:	90                   	nop
c000d868:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000d86f:	83 f0 01             	xor    eax,0x1
c000d872:	0f b6 c0             	movzx  eax,al
c000d875:	85 c0                	test   eax,eax
c000d877:	74 2f                	je     c000d8a8 <ACPI::open(int, int, void*)+0x17c>
c000d879:	83 ec 0c             	sub    esp,0xc
c000d87c:	68 7d b2 02 c0       	push   0xc002b27d
c000d881:	e8 d3 04 00 00       	call   c000dd59 <KeSetBootMessage(char const*)>
c000d886:	83 c4 10             	add    esp,0x10
c000d889:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000d894:	83 ec 0c             	sub    esp,0xc
c000d897:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000d89e:	e8 6f 66 00 00       	call   c0013f12 <Virt::setupPageSwapping(int)>
c000d8a3:	83 c4 10             	add    esp,0x10
c000d8a6:	66 90                	xchg   ax,ax
c000d8a8:	83 ec 0c             	sub    esp,0xc
c000d8ab:	68 98 b2 02 c0       	push   0xc002b298
c000d8b0:	e8 a4 04 00 00       	call   c000dd59 <KeSetBootMessage(char const*)>
c000d8b5:	83 c4 10             	add    esp,0x10
c000d8b8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000d8bf:	83 ec 08             	sub    esp,0x8
c000d8c2:	6a 13                	push   0x13
c000d8c4:	50                   	push   eax
c000d8c5:	e8 e4 ce ff ff       	call   c000a7ae <getDevicesOfType(DeviceType)>
c000d8ca:	83 c4 0c             	add    esp,0xc
c000d8cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d8d0:	83 ec 0c             	sub    esp,0xc
c000d8d3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000d8da:	50                   	push   eax
c000d8db:	e8 20 b9 01 00       	call   c0029200 <LinkedList<Device>::isEmpty()>
c000d8e0:	83 c4 10             	add    esp,0x10
c000d8e3:	83 f0 01             	xor    eax,0x1
c000d8e6:	0f b6 c0             	movzx  eax,al
c000d8e9:	85 c0                	test   eax,eax
c000d8eb:	0f 84 3b 01 00 00    	je     c000da2c <ACPI::open(int, int, void*)+0x300>
c000d8f1:	83 ec 0c             	sub    esp,0xc
c000d8f4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000d8fb:	50                   	push   eax
c000d8fc:	e8 1b b9 01 00       	call   c002921c <LinkedList<Device>::getFirstElement()>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000d90b:	83 ec 0c             	sub    esp,0xc
c000d90e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000d915:	50                   	push   eax
c000d916:	e8 09 b9 01 00       	call   c0029224 <LinkedList<Device>::removeFirst()>
c000d91b:	83 c4 10             	add    esp,0x10
c000d91e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000d925:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000d92c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000d933:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000d937:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000d93d:	ba 09 00 00 00       	mov    edx,0x9
c000d942:	fc                   	cld    
c000d943:	89 c7                	mov    edi,eax
c000d945:	89 de                	mov    esi,ebx
c000d947:	89 d1                	mov    ecx,edx
c000d949:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d94b:	83 ec 08             	sub    esp,0x8
c000d94e:	8d 44 24 38          	lea    eax,[esp+0x38]
c000d952:	50                   	push   eax
c000d953:	83 ec 24             	sub    esp,0x24
c000d956:	89 e0                	mov    eax,esp
c000d958:	89 c3                	mov    ebx,eax
c000d95a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000d95e:	ba 09 00 00 00       	mov    edx,0x9
c000d963:	89 df                	mov    edi,ebx
c000d965:	89 c6                	mov    esi,eax
c000d967:	89 d1                	mov    ecx,edx
c000d969:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d96b:	e8 2a 31 01 00       	call   c0020a9a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000d970:	83 c4 30             	add    esp,0x30
c000d973:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000d97a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000d982:	0f 84 48 ff ff ff    	je     c000d8d0 <ACPI::open(int, int, void*)+0x1a4>
c000d988:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000d993:	83 ec 0c             	sub    esp,0xc
c000d996:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d99d:	e8 55 29 00 00       	call   c00102f7 <malloc>
c000d9a2:	83 c4 10             	add    esp,0x10
c000d9a5:	89 c3                	mov    ebx,eax
c000d9a7:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c000d9ac:	83 ec 04             	sub    esp,0x4
c000d9af:	50                   	push   eax
c000d9b0:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000d9b7:	53                   	push   ebx
c000d9b8:	e8 f7 b1 ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c000d9bd:	83 c4 10             	add    esp,0x10
c000d9c0:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000d9c7:	83 ec 0c             	sub    esp,0xc
c000d9ca:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000d9d1:	e8 c0 b4 ff ff       	call   c0008e96 <File::exists()>
c000d9d6:	83 c4 10             	add    esp,0x10
c000d9d9:	0f b6 c0             	movzx  eax,al
c000d9dc:	85 c0                	test   eax,eax
c000d9de:	74 1c                	je     c000d9fc <ACPI::open(int, int, void*)+0x2d0>
c000d9e0:	83 ec 04             	sub    esp,0x4
c000d9e3:	6a 00                	push   0x0
c000d9e5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000d9ec:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000d9f3:	e8 50 8f 00 00       	call   c0016948 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000d9f8:	83 c4 10             	add    esp,0x10
c000d9fb:	90                   	nop
c000d9fc:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000da04:	0f 84 c6 fe ff ff    	je     c000d8d0 <ACPI::open(int, int, void*)+0x1a4>
c000da0a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000da11:	8b 00                	mov    eax,DWORD PTR [eax]
c000da13:	83 c0 08             	add    eax,0x8
c000da16:	8b 00                	mov    eax,DWORD PTR [eax]
c000da18:	83 ec 0c             	sub    esp,0xc
c000da1b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000da22:	ff d0                	call   eax
c000da24:	83 c4 10             	add    esp,0x10
c000da27:	e9 a4 fe ff ff       	jmp    c000d8d0 <ACPI::open(int, int, void*)+0x1a4>
c000da2c:	83 ec 0c             	sub    esp,0xc
c000da2f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000da36:	50                   	push   eax
c000da37:	e8 c0 b7 01 00       	call   c00291fc <LinkedList<Device>::~LinkedList()>
c000da3c:	83 c4 10             	add    esp,0x10
c000da3f:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c000da44:	83 ec 04             	sub    esp,0x4
c000da47:	6a 00                	push   0x0
c000da49:	50                   	push   eax
c000da4a:	68 b2 b2 02 c0       	push   0xc002b2b2
c000da4f:	e8 f4 8e 00 00       	call   c0016948 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000da54:	83 c4 10             	add    esp,0x10
c000da57:	a1 84 5d 03 c0       	mov    eax,ds:0xc0035d84
c000da5c:	85 c0                	test   eax,eax
c000da5e:	0f 84 1c 01 00 00    	je     c000db80 <ACPI::open(int, int, void*)+0x454>
c000da64:	a1 88 5d 03 c0       	mov    eax,ds:0xc0035d88
c000da69:	85 c0                	test   eax,eax
c000da6b:	0f 84 0f 01 00 00    	je     c000db80 <ACPI::open(int, int, void*)+0x454>
c000da71:	83 ec 0c             	sub    esp,0xc
c000da74:	68 cf b2 02 c0       	push   0xc002b2cf
c000da79:	e8 db 02 00 00       	call   c000dd59 <KeSetBootMessage(char const*)>
c000da7e:	83 c4 10             	add    esp,0x10
c000da81:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000da8c:	83 ec 0c             	sub    esp,0xc
c000da8f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000da96:	e8 5c 28 00 00       	call   c00102f7 <malloc>
c000da9b:	83 c4 10             	add    esp,0x10
c000da9e:	89 c3                	mov    ebx,eax
c000daa0:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c000daa5:	83 ec 04             	sub    esp,0x4
c000daa8:	50                   	push   eax
c000daa9:	68 ec b2 02 c0       	push   0xc002b2ec
c000daae:	53                   	push   ebx
c000daaf:	e8 00 b1 ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c000dab4:	83 c4 10             	add    esp,0x10
c000dab7:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000dabe:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000dac6:	74 20                	je     c000dae8 <ACPI::open(int, int, void*)+0x3bc>
c000dac8:	83 ec 0c             	sub    esp,0xc
c000dacb:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000dad2:	e8 bf b3 ff ff       	call   c0008e96 <File::exists()>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	0f b6 c0             	movzx  eax,al
c000dadd:	85 c0                	test   eax,eax
c000dadf:	74 07                	je     c000dae8 <ACPI::open(int, int, void*)+0x3bc>
c000dae1:	b0 01                	mov    al,0x1
c000dae3:	eb 07                	jmp    c000daec <ACPI::open(int, int, void*)+0x3c0>
c000dae5:	8d 76 00             	lea    esi,[esi+0x0]
c000dae8:	b0 00                	mov    al,0x0
c000daea:	66 90                	xchg   ax,ax
c000daec:	0f b6 c0             	movzx  eax,al
c000daef:	85 c0                	test   eax,eax
c000daf1:	74 19                	je     c000db0c <ACPI::open(int, int, void*)+0x3e0>
c000daf3:	83 ec 04             	sub    esp,0x4
c000daf6:	6a 00                	push   0x0
c000daf8:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000daff:	68 ec b2 02 c0       	push   0xc002b2ec
c000db04:	e8 3f 8e 00 00       	call   c0016948 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000db09:	83 c4 10             	add    esp,0x10
c000db0c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000db14:	74 2a                	je     c000db40 <ACPI::open(int, int, void*)+0x414>
c000db16:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000db1e:	74 20                	je     c000db40 <ACPI::open(int, int, void*)+0x414>
c000db20:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000db27:	8b 00                	mov    eax,DWORD PTR [eax]
c000db29:	83 c0 08             	add    eax,0x8
c000db2c:	8b 00                	mov    eax,DWORD PTR [eax]
c000db2e:	83 ec 0c             	sub    esp,0xc
c000db31:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000db38:	ff d0                	call   eax
c000db3a:	83 c4 10             	add    esp,0x10
c000db3d:	8d 76 00             	lea    esi,[esi+0x0]
c000db40:	a1 84 5d 03 c0       	mov    eax,ds:0xc0035d84
c000db45:	83 ec 08             	sub    esp,0x8
c000db48:	68 09 b3 02 c0       	push   0xc002b309
c000db4d:	50                   	push   eax
c000db4e:	e8 71 f2 ff ff       	call   c000cdc4 <findDataTable(unsigned char*, char*)>
c000db53:	83 c4 10             	add    esp,0x10
c000db56:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000db5d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000db65:	74 19                	je     c000db80 <ACPI::open(int, int, void*)+0x454>
c000db67:	83 ec 08             	sub    esp,0x8
c000db6a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000db71:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000db78:	e8 97 fb ff ff       	call   c000d714 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000db7d:	83 c4 10             	add    esp,0x10
c000db80:	b8 00 00 00 00       	mov    eax,0x0
c000db85:	81 c4 70 01 00 00    	add    esp,0x170
c000db8b:	5b                   	pop    ebx
c000db8c:	5e                   	pop    esi
c000db8d:	5f                   	pop    edi
c000db8e:	c3                   	ret    
c000db8f:	90                   	nop

c000db90 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000db90:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000db96:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000db9d:	89 c2                	mov    edx,eax
c000db9f:	c1 fa 1f             	sar    edx,0x1f
c000dba2:	83 ec 04             	sub    esp,0x4
c000dba5:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000dba9:	51                   	push   ecx
c000dbaa:	52                   	push   edx
c000dbab:	50                   	push   eax
c000dbac:	e8 3b 25 00 00       	call   c00100ec <KeItoa(long long, char*)>
c000dbb1:	83 c4 10             	add    esp,0x10
c000dbb4:	83 ec 08             	sub    esp,0x8
c000dbb7:	68 d8 b3 02 c0       	push   0xc002b3d8
c000dbbc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dbc0:	50                   	push   eax
c000dbc1:	e8 7a 2a ff ff       	call   c0000640 <strcpy>
c000dbc6:	83 c4 10             	add    esp,0x10
c000dbc9:	83 ec 08             	sub    esp,0x8
c000dbcc:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000dbd3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dbd7:	50                   	push   eax
c000dbd8:	e8 63 2c ff ff       	call   c0000840 <strcat>
c000dbdd:	83 c4 10             	add    esp,0x10
c000dbe0:	83 ec 08             	sub    esp,0x8
c000dbe3:	68 e6 b3 02 c0       	push   0xc002b3e6
c000dbe8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dbec:	50                   	push   eax
c000dbed:	e8 4e 2c ff ff       	call   c0000840 <strcat>
c000dbf2:	83 c4 10             	add    esp,0x10
c000dbf5:	83 ec 08             	sub    esp,0x8
c000dbf8:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000dbff:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dc03:	50                   	push   eax
c000dc04:	e8 37 2c ff ff       	call   c0000840 <strcat>
c000dc09:	83 c4 10             	add    esp,0x10
c000dc0c:	83 ec 08             	sub    esp,0x8
c000dc0f:	68 e9 b3 02 c0       	push   0xc002b3e9
c000dc14:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dc18:	50                   	push   eax
c000dc19:	e8 22 2c ff ff       	call   c0000840 <strcat>
c000dc1e:	83 c4 10             	add    esp,0x10
c000dc21:	83 ec 08             	sub    esp,0x8
c000dc24:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000dc2b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dc2f:	50                   	push   eax
c000dc30:	e8 0b 2c ff ff       	call   c0000840 <strcat>
c000dc35:	83 c4 10             	add    esp,0x10
c000dc38:	83 ec 08             	sub    esp,0x8
c000dc3b:	68 e9 b3 02 c0       	push   0xc002b3e9
c000dc40:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dc44:	50                   	push   eax
c000dc45:	e8 f6 2b ff ff       	call   c0000840 <strcat>
c000dc4a:	83 c4 10             	add    esp,0x10
c000dc4d:	83 ec 08             	sub    esp,0x8
c000dc50:	8d 44 24 08          	lea    eax,[esp+0x8]
c000dc54:	50                   	push   eax
c000dc55:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dc59:	50                   	push   eax
c000dc5a:	e8 e1 2b ff ff       	call   c0000840 <strcat>
c000dc5f:	83 c4 10             	add    esp,0x10
c000dc62:	83 ec 0c             	sub    esp,0xc
c000dc65:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dc69:	50                   	push   eax
c000dc6a:	e8 dd 2a 00 00       	call   c001074c <KePanic(char const*)>
c000dc6f:	83 c4 10             	add    esp,0x10
c000dc72:	90                   	nop
c000dc73:	81 c4 2c 02 00 00    	add    esp,0x22c
c000dc79:	c3                   	ret    

c000dc7a <KeInitialiseAtexit()>:
c000dc7a:	83 ec 10             	sub    esp,0x10
c000dc7d:	c7 05 e0 5f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0035fe0,0x0
c000dc87:	68 80 00 00 00       	push   0x80
c000dc8c:	6a 00                	push   0x0
c000dc8e:	68 80 60 03 c0       	push   0xc0036080
c000dc93:	e8 58 28 ff ff       	call   c00004f0 <memset>
c000dc98:	83 c4 1c             	add    esp,0x1c
c000dc9b:	c3                   	ret    

c000dc9c <KeRegisterAtexit(void (*)(void*), void*)>:
c000dc9c:	a1 e0 5f 03 c0       	mov    eax,ds:0xc0035fe0
c000dca1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dca5:	89 14 85 80 60 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9f80],edx
c000dcac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcb0:	89 14 85 00 60 03 c0 	mov    DWORD PTR [eax*4-0x3ffca000],edx
c000dcb7:	40                   	inc    eax
c000dcb8:	a3 e0 5f 03 c0       	mov    ds:0xc0035fe0,eax
c000dcbd:	83 f8 1f             	cmp    eax,0x1f
c000dcc0:	7e 0d                	jle    c000dccf <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000dcc2:	c7 44 24 04 eb b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b3eb
c000dcca:	e9 7d 2a 00 00       	jmp    c001074c <KePanic(char const*)>
c000dccf:	c3                   	ret    

c000dcd0 <KeExecuteAtexit()>:
c000dcd0:	53                   	push   ebx
c000dcd1:	31 db                	xor    ebx,ebx
c000dcd3:	83 ec 08             	sub    esp,0x8
c000dcd6:	39 1d e0 5f 03 c0    	cmp    DWORD PTR ds:0xc0035fe0,ebx
c000dcdc:	7e 28                	jle    c000dd06 <KeExecuteAtexit()+0x36>
c000dcde:	8b 04 9d 80 60 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc9f80]
c000dce5:	85 c0                	test   eax,eax
c000dce7:	74 1a                	je     c000dd03 <KeExecuteAtexit()+0x33>
c000dce9:	83 ec 0c             	sub    esp,0xc
c000dcec:	ff 34 9d 00 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffca000]
c000dcf3:	ff d0                	call   eax
c000dcf5:	c7 04 9d 80 60 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc9f80],0x0
c000dd00:	83 c4 10             	add    esp,0x10
c000dd03:	43                   	inc    ebx
c000dd04:	eb d0                	jmp    c000dcd6 <KeExecuteAtexit()+0x6>
c000dd06:	83 c4 08             	add    esp,0x8
c000dd09:	5b                   	pop    ebx
c000dd0a:	c3                   	ret    
c000dd0b:	90                   	nop

c000dd0c <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000dd0c:	8b 15 00 61 03 c0    	mov    edx,DWORD PTR ds:0xc0036100
c000dd12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd16:	21 d0                	and    eax,edx
c000dd18:	0f 95 c0             	setne  al
c000dd1b:	c3                   	ret    

c000dd1c <KeInitialiseBootConfigurationFlags()>:
c000dd1c:	b8 00 05 00 00       	mov    eax,0x500
c000dd21:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd23:	a3 00 61 03 c0       	mov    ds:0xc0036100,eax
c000dd28:	90                   	nop
c000dd29:	c3                   	ret    

c000dd2a <KeDisplaySplashScreen()>:
c000dd2a:	53                   	push   ebx
c000dd2b:	bb 01 00 00 00       	mov    ebx,0x1
c000dd30:	83 ec 08             	sub    esp,0x8
c000dd33:	43                   	inc    ebx
c000dd34:	0f be 83 02 b4 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffd4bfe]
c000dd3b:	85 c0                	test   eax,eax
c000dd3d:	74 15                	je     c000dd54 <KeDisplaySplashScreen()+0x2a>
c000dd3f:	83 ec 0c             	sub    esp,0xc
c000dd42:	6a 01                	push   0x1
c000dd44:	53                   	push   ebx
c000dd45:	6a 00                	push   0x0
c000dd47:	6a 0f                	push   0xf
c000dd49:	50                   	push   eax
c000dd4a:	e8 f5 e8 00 00       	call   c001c644 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000dd4f:	83 c4 20             	add    esp,0x20
c000dd52:	eb df                	jmp    c000dd33 <KeDisplaySplashScreen()+0x9>
c000dd54:	83 c4 08             	add    esp,0x8
c000dd57:	5b                   	pop    ebx
c000dd58:	c3                   	ret    

c000dd59 <KeSetBootMessage(char const*)>:
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	31 db                	xor    ebx,ebx
c000dd5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd62:	83 ec 0c             	sub    esp,0xc
c000dd65:	6a 14                	push   0x14
c000dd67:	53                   	push   ebx
c000dd68:	43                   	inc    ebx
c000dd69:	6a 00                	push   0x0
c000dd6b:	6a 00                	push   0x0
c000dd6d:	6a 20                	push   0x20
c000dd6f:	e8 d0 e8 00 00       	call   c001c644 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000dd74:	83 c4 20             	add    esp,0x20
c000dd77:	83 fb 50             	cmp    ebx,0x50
c000dd7a:	75 e6                	jne    c000dd62 <KeSetBootMessage(char const*)+0x9>
c000dd7c:	83 ec 0c             	sub    esp,0xc
c000dd7f:	56                   	push   esi
c000dd80:	e8 eb 27 ff ff       	call   c0000570 <strlen>
c000dd85:	83 c4 10             	add    esp,0x10
c000dd88:	29 c3                	sub    ebx,eax
c000dd8a:	d1 eb                	shr    ebx,1
c000dd8c:	89 df                	mov    edi,ebx
c000dd8e:	89 f0                	mov    eax,esi
c000dd90:	29 d8                	sub    eax,ebx
c000dd92:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000dd96:	85 c0                	test   eax,eax
c000dd98:	74 16                	je     c000ddb0 <KeSetBootMessage(char const*)+0x57>
c000dd9a:	83 ec 0c             	sub    esp,0xc
c000dd9d:	6a 14                	push   0x14
c000dd9f:	57                   	push   edi
c000dda0:	47                   	inc    edi
c000dda1:	6a 00                	push   0x0
c000dda3:	6a 07                	push   0x7
c000dda5:	50                   	push   eax
c000dda6:	e8 99 e8 00 00       	call   c001c644 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000ddab:	83 c4 20             	add    esp,0x20
c000ddae:	eb de                	jmp    c000dd8e <KeSetBootMessage(char const*)+0x35>
c000ddb0:	5b                   	pop    ebx
c000ddb1:	5e                   	pop    esi
c000ddb2:	5f                   	pop    edi
c000ddb3:	c3                   	ret    

c000ddb4 <__cxa_atexit>:
c000ddb4:	31 c0                	xor    eax,eax
c000ddb6:	c3                   	ret    

c000ddb7 <__cxa_finalize>:
c000ddb7:	c3                   	ret    

c000ddb8 <__stack_chk_fail>:
c000ddb8:	55                   	push   ebp
c000ddb9:	89 e5                	mov    ebp,esp
c000ddbb:	83 ec 10             	sub    esp,0x10
c000ddbe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ddc1:	68 17 b4 02 c0       	push   0xc002b417
c000ddc6:	e8 b1 91 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ddcb:	58                   	pop    eax
c000ddcc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ddcf:	5a                   	pop    edx
c000ddd0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ddd3:	68 17 b4 02 c0       	push   0xc002b417
c000ddd8:	e8 9f 91 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000dddd:	c7 04 24 1f b4 02 c0 	mov    DWORD PTR [esp],0xc002b41f
c000dde4:	e8 63 29 00 00       	call   c001074c <KePanic(char const*)>
c000dde9:	83 c4 10             	add    esp,0x10
c000ddec:	c9                   	leave  
c000dded:	c3                   	ret    

c000ddee <__cxa_pure_virtual>:
c000ddee:	83 ec 18             	sub    esp,0x18
c000ddf1:	68 37 b4 02 c0       	push   0xc002b437
c000ddf6:	e8 51 29 00 00       	call   c001074c <KePanic(char const*)>
c000ddfb:	83 c4 1c             	add    esp,0x1c
c000ddfe:	c3                   	ret    

c000ddff <operator new[](unsigned long)>:
c000ddff:	e9 f3 24 00 00       	jmp    c00102f7 <malloc>

c000de04 <operator delete(void*, unsigned long)>:
c000de04:	e9 0e 25 00 00       	jmp    c0010317 <rfree>

c000de09 <operator delete[](void*)>:
c000de09:	e9 09 25 00 00       	jmp    c0010317 <rfree>

c000de0e <operator delete[](void*, unsigned long)>:
c000de0e:	e9 04 25 00 00       	jmp    c0010317 <rfree>
c000de13:	90                   	nop

c000de14 <CUnlockScheduler>:
c000de14:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c000de1c:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000de21:	85 c0                	test   eax,eax
c000de23:	75 03                	jne    c000de28 <CUnlockScheduler+0x14>
c000de25:	fb                   	sti    
c000de26:	66 90                	xchg   ax,ax
c000de28:	90                   	nop
c000de29:	c3                   	ret    
c000de2a:	66 90                	xchg   ax,ax

c000de2c <CLockScheduler>:
c000de2c:	fa                   	cli    
c000de2d:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c000de32:	83 c0 01             	add    eax,0x1
c000de35:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c000de3a:	90                   	nop
c000de3b:	c3                   	ret    

c000de3c <CPrintf>:
c000de3c:	83 ec 0c             	sub    esp,0xc
c000de3f:	83 ec 08             	sub    esp,0x8
c000de42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de46:	68 4a b4 02 c0       	push   0xc002b44a
c000de4b:	e8 2c 91 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	90                   	nop
c000de54:	83 c4 0c             	add    esp,0xc
c000de57:	c3                   	ret    

c000de58 <CmOpen(char const*)>:
c000de58:	57                   	push   edi
c000de59:	56                   	push   esi
c000de5a:	53                   	push   ebx
c000de5b:	83 ec 1c             	sub    esp,0x1c
c000de5e:	6a 30                	push   0x30
c000de60:	e8 92 24 00 00       	call   c00102f7 <malloc>
c000de65:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000de6c:	89 c3                	mov    ebx,eax
c000de6e:	e8 84 24 00 00       	call   c00102f7 <malloc>
c000de73:	83 c4 0c             	add    esp,0xc
c000de76:	89 c6                	mov    esi,eax
c000de78:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c000de7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000de82:	50                   	push   eax
c000de83:	e8 2c ad ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c000de88:	83 c4 0c             	add    esp,0xc
c000de8b:	89 33                	mov    DWORD PTR [ebx],esi
c000de8d:	8d 44 24 07          	lea    eax,[esp+0x7]
c000de91:	50                   	push   eax
c000de92:	8d 44 24 10          	lea    eax,[esp+0x10]
c000de96:	50                   	push   eax
c000de97:	56                   	push   esi
c000de98:	e8 37 b0 ff ff       	call   c0008ed4 <File::stat(unsigned long long*, bool*)>
c000de9d:	5a                   	pop    edx
c000de9e:	59                   	pop    ecx
c000de9f:	6a 01                	push   0x1
c000dea1:	ff 33                	push   DWORD PTR [ebx]
c000dea3:	e8 2a ad ff ff       	call   c0008bd2 <File::open(FileOpenMode)>
c000dea8:	5e                   	pop    esi
c000dea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dead:	e8 45 24 00 00       	call   c00102f7 <malloc>
c000deb2:	5a                   	pop    edx
c000deb3:	89 c7                	mov    edi,eax
c000deb5:	8d 74 24 10          	lea    esi,[esp+0x10]
c000deb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000debb:	8b 10                	mov    edx,DWORD PTR [eax]
c000debd:	56                   	push   esi
c000debe:	57                   	push   edi
c000debf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dec3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dec7:	50                   	push   eax
c000dec8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000decb:	83 c4 14             	add    esp,0x14
c000dece:	ff 33                	push   DWORD PTR [ebx]
c000ded0:	e8 5b ad ff ff       	call   c0008c30 <File::close()>
c000ded5:	59                   	pop    ecx
c000ded6:	58                   	pop    eax
c000ded7:	6a 13                	push   0x13
c000ded9:	ff 33                	push   DWORD PTR [ebx]
c000dedb:	e8 f2 ac ff ff       	call   c0008bd2 <File::open(FileOpenMode)>
c000dee0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dee2:	8b 10                	mov    edx,DWORD PTR [eax]
c000dee4:	89 34 24             	mov    DWORD PTR [esp],esi
c000dee7:	57                   	push   edi
c000dee8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000deec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000def0:	50                   	push   eax
c000def1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000def4:	83 c4 14             	add    esp,0x14
c000def7:	57                   	push   edi
c000def8:	e8 0a 24 00 00       	call   c0010307 <free>
c000defd:	83 c4 10             	add    esp,0x10
c000df00:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df03:	75 10                	jne    c000df15 <CmOpen(char const*)+0xbd>
c000df05:	83 ec 0c             	sub    esp,0xc
c000df08:	68 4d b4 02 c0       	push   0xc002b44d
c000df0d:	e8 3a 28 00 00       	call   c001074c <KePanic(char const*)>
c000df12:	83 c4 10             	add    esp,0x10
c000df15:	8d 7b 05             	lea    edi,[ebx+0x5]
c000df18:	50                   	push   eax
c000df19:	6a 00                	push   0x0
c000df1b:	6a 00                	push   0x0
c000df1d:	ff 33                	push   DWORD PTR [ebx]
c000df1f:	e8 6c ad ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c000df24:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df26:	8b 10                	mov    edx,DWORD PTR [eax]
c000df28:	89 34 24             	mov    DWORD PTR [esp],esi
c000df2b:	57                   	push   edi
c000df2c:	6a 00                	push   0x0
c000df2e:	6a 2b                	push   0x2b
c000df30:	50                   	push   eax
c000df31:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000df34:	83 c4 1c             	add    esp,0x1c
c000df37:	6a 00                	push   0x0
c000df39:	6a 00                	push   0x0
c000df3b:	ff 33                	push   DWORD PTR [ebx]
c000df3d:	e8 4e ad ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c000df42:	83 c4 0c             	add    esp,0xc
c000df45:	6a 08                	push   0x8
c000df47:	68 6f b4 02 c0       	push   0xc002b46f
c000df4c:	57                   	push   edi
c000df4d:	e8 2e 24 ff ff       	call   c0000380 <memcmp>
c000df52:	83 c4 10             	add    esp,0x10
c000df55:	85 c0                	test   eax,eax
c000df57:	74 10                	je     c000df69 <CmOpen(char const*)+0x111>
c000df59:	83 ec 0c             	sub    esp,0xc
c000df5c:	68 78 b4 02 c0       	push   0xc002b478
c000df61:	e8 e6 27 00 00       	call   c001074c <KePanic(char const*)>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000df6d:	89 d8                	mov    eax,ebx
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	5b                   	pop    ebx
c000df73:	5e                   	pop    esi
c000df74:	5f                   	pop    edi
c000df75:	c3                   	ret    

c000df76 <CmClose(Reghive_Tag*)>:
c000df76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df7a:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000df7e:	74 0b                	je     c000df8b <CmClose(Reghive_Tag*)+0x15>
c000df80:	8b 00                	mov    eax,DWORD PTR [eax]
c000df82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df86:	e9 a5 ac ff ff       	jmp    c0008c30 <File::close()>
c000df8b:	c3                   	ret    

c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000df8c:	53                   	push   ebx
c000df8d:	83 ec 18             	sub    esp,0x18
c000df90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000df94:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000df98:	74 29                	je     c000dfc3 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000df9a:	50                   	push   eax
c000df9b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000dfa0:	99                   	cdq    
c000dfa1:	52                   	push   edx
c000dfa2:	50                   	push   eax
c000dfa3:	ff 33                	push   DWORD PTR [ebx]
c000dfa5:	e8 e6 ac ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c000dfaa:	5a                   	pop    edx
c000dfab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfad:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000dfb1:	8b 10                	mov    edx,DWORD PTR [eax]
c000dfb3:	51                   	push   ecx
c000dfb4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000dfb8:	6a 00                	push   0x0
c000dfba:	6a 2b                	push   0x2b
c000dfbc:	50                   	push   eax
c000dfbd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dfc0:	83 c4 20             	add    esp,0x20
c000dfc3:	83 c4 18             	add    esp,0x18
c000dfc6:	5b                   	pop    ebx
c000dfc7:	c3                   	ret    

c000dfc8 <CmGetString(Reghive_Tag*, int, char*)>:
c000dfc8:	55                   	push   ebp
c000dfc9:	57                   	push   edi
c000dfca:	56                   	push   esi
c000dfcb:	53                   	push   ebx
c000dfcc:	31 db                	xor    ebx,ebx
c000dfce:	83 ec 70             	sub    esp,0x70
c000dfd1:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000dfd8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000dfdc:	50                   	push   eax
c000dfdd:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000dfe4:	55                   	push   ebp
c000dfe5:	e8 a2 ff ff ff       	call   c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000dff2:	c1 e0 08             	shl    eax,0x8
c000dff5:	89 c2                	mov    edx,eax
c000dff7:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000dffc:	09 d0                	or     eax,edx
c000dffe:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000e003:	c1 e0 08             	shl    eax,0x8
c000e006:	09 d0                	or     eax,edx
c000e008:	74 25                	je     c000e02f <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000e00a:	6b fb 0d             	imul   edi,ebx,0xd
c000e00d:	52                   	push   edx
c000e00e:	8d 54 24 39          	lea    edx,[esp+0x39]
c000e012:	52                   	push   edx
c000e013:	50                   	push   eax
c000e014:	55                   	push   ebp
c000e015:	e8 72 ff ff ff       	call   c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e01a:	8d 74 24 49          	lea    esi,[esp+0x49]
c000e01e:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000e025:	b9 27 00 00 00       	mov    ecx,0x27
c000e02a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e02c:	83 c4 10             	add    esp,0x10
c000e02f:	83 c3 03             	add    ebx,0x3
c000e032:	83 fb 15             	cmp    ebx,0x15
c000e035:	75 b6                	jne    c000dfed <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000e037:	83 c4 6c             	add    esp,0x6c
c000e03a:	5b                   	pop    ebx
c000e03b:	5e                   	pop    esi
c000e03c:	5f                   	pop    edi
c000e03d:	5d                   	pop    ebp
c000e03e:	c3                   	ret    

c000e03f <CmEnterDirectory(Reghive_Tag*, int)>:
c000e03f:	83 ec 40             	sub    esp,0x40
c000e042:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e046:	50                   	push   eax
c000e047:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e04b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e04f:	e8 38 ff ff ff       	call   c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e054:	83 c4 10             	add    esp,0x10
c000e057:	83 c8 ff             	or     eax,0xffffffff
c000e05a:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000e05f:	75 19                	jne    c000e07a <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000e061:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000e066:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000e06b:	c1 e0 08             	shl    eax,0x8
c000e06e:	09 c2                	or     edx,eax
c000e070:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000e075:	c1 e0 10             	shl    eax,0x10
c000e078:	09 d0                	or     eax,edx
c000e07a:	83 c4 3c             	add    esp,0x3c
c000e07d:	c3                   	ret    

c000e07e <CmGetNext(Reghive_Tag*, int)>:
c000e07e:	83 ec 40             	sub    esp,0x40
c000e081:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e085:	50                   	push   eax
c000e086:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e08a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e08e:	e8 f9 fe ff ff       	call   c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e093:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000e098:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000e09d:	c1 e0 08             	shl    eax,0x8
c000e0a0:	09 c2                	or     edx,eax
c000e0a2:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000e0a7:	83 c4 4c             	add    esp,0x4c
c000e0aa:	c1 e0 10             	shl    eax,0x10
c000e0ad:	09 d0                	or     eax,edx
c000e0af:	c3                   	ret    

c000e0b0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000e0b0:	53                   	push   ebx
c000e0b1:	83 ec 18             	sub    esp,0x18
c000e0b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e0b8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000e0bc:	74 29                	je     c000e0e7 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000e0be:	50                   	push   eax
c000e0bf:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000e0c4:	99                   	cdq    
c000e0c5:	52                   	push   edx
c000e0c6:	50                   	push   eax
c000e0c7:	ff 33                	push   DWORD PTR [ebx]
c000e0c9:	e8 c2 ab ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c000e0ce:	5a                   	pop    edx
c000e0cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0d1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000e0d5:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0d7:	51                   	push   ecx
c000e0d8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e0dc:	6a 00                	push   0x0
c000e0de:	6a 2b                	push   0x2b
c000e0e0:	50                   	push   eax
c000e0e1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000e0e4:	83 c4 20             	add    esp,0x20
c000e0e7:	83 c4 18             	add    esp,0x18
c000e0ea:	5b                   	pop    ebx
c000e0eb:	c3                   	ret    

c000e0ec <CmFreeExtent(Reghive_Tag*, int)>:
c000e0ec:	53                   	push   ebx
c000e0ed:	83 ec 3c             	sub    esp,0x3c
c000e0f0:	6a 2b                	push   0x2b
c000e0f2:	6a 00                	push   0x0
c000e0f4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e0f8:	53                   	push   ebx
c000e0f9:	e8 f2 23 ff ff       	call   c00004f0 <memset>
c000e0fe:	83 c4 0c             	add    esp,0xc
c000e101:	53                   	push   ebx
c000e102:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e106:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e10a:	e8 a1 ff ff ff       	call   c000e0b0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e10f:	83 c4 48             	add    esp,0x48
c000e112:	5b                   	pop    ebx
c000e113:	c3                   	ret    

c000e114 <CmUpdateHeader(Reghive_Tag*)>:
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e11b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000e11f:	74 10                	je     c000e131 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000e121:	52                   	push   edx
c000e122:	8d 50 05             	lea    edx,[eax+0x5]
c000e125:	52                   	push   edx
c000e126:	6a 00                	push   0x0
c000e128:	50                   	push   eax
c000e129:	e8 82 ff ff ff       	call   c000e0b0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e12e:	83 c4 10             	add    esp,0x10
c000e131:	83 c4 0c             	add    esp,0xc
c000e134:	c3                   	ret    

c000e135 <CmExpand(Reghive_Tag*, int)>:
c000e135:	57                   	push   edi
c000e136:	56                   	push   esi
c000e137:	83 ce ff             	or     esi,0xffffffff
c000e13a:	53                   	push   ebx
c000e13b:	83 ec 30             	sub    esp,0x30
c000e13e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e142:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000e146:	74 5f                	je     c000e1a7 <CmExpand(Reghive_Tag*, int)+0x72>
c000e148:	31 d2                	xor    edx,edx
c000e14a:	31 f6                	xor    esi,esi
c000e14c:	50                   	push   eax
c000e14d:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000e151:	52                   	push   edx
c000e152:	50                   	push   eax
c000e153:	ff 33                	push   DWORD PTR [ebx]
c000e155:	e8 36 ab ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c000e15a:	83 c4 0c             	add    esp,0xc
c000e15d:	6a 2b                	push   0x2b
c000e15f:	6a 00                	push   0x0
c000e161:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000e165:	57                   	push   edi
c000e166:	e8 85 23 ff ff       	call   c00004f0 <memset>
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e172:	7d 1b                	jge    c000e18f <CmExpand(Reghive_Tag*, int)+0x5a>
c000e174:	83 ec 0c             	sub    esp,0xc
c000e177:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e179:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000e17d:	8b 10                	mov    edx,DWORD PTR [eax]
c000e17f:	46                   	inc    esi
c000e180:	51                   	push   ecx
c000e181:	57                   	push   edi
c000e182:	6a 00                	push   0x0
c000e184:	6a 2b                	push   0x2b
c000e186:	50                   	push   eax
c000e187:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000e18a:	83 c4 20             	add    esp,0x20
c000e18d:	eb df                	jmp    c000e16e <CmExpand(Reghive_Tag*, int)+0x39>
c000e18f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e193:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000e196:	83 ec 0c             	sub    esp,0xc
c000e199:	01 f2                	add    edx,esi
c000e19b:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000e19e:	53                   	push   ebx
c000e19f:	e8 70 ff ff ff       	call   c000e114 <CmUpdateHeader(Reghive_Tag*)>
c000e1a4:	83 c4 10             	add    esp,0x10
c000e1a7:	83 c4 30             	add    esp,0x30
c000e1aa:	89 f0                	mov    eax,esi
c000e1ac:	5b                   	pop    ebx
c000e1ad:	5e                   	pop    esi
c000e1ae:	5f                   	pop    edi
c000e1af:	c3                   	ret    

c000e1b0 <CmFindUnusedExtent(Reghive_Tag*)>:
c000e1b0:	55                   	push   ebp
c000e1b1:	57                   	push   edi
c000e1b2:	56                   	push   esi
c000e1b3:	53                   	push   ebx
c000e1b4:	83 cb ff             	or     ebx,0xffffffff
c000e1b7:	83 ec 1c             	sub    esp,0x1c
c000e1ba:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e1be:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000e1c2:	74 68                	je     c000e22c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000e1c4:	be 2b 00 00 00       	mov    esi,0x2b
c000e1c9:	51                   	push   ecx
c000e1ca:	31 ff                	xor    edi,edi
c000e1cc:	6a 00                	push   0x0
c000e1ce:	31 db                	xor    ebx,ebx
c000e1d0:	6a 00                	push   0x0
c000e1d2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000e1d5:	e8 b6 aa ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c000e1da:	83 c4 10             	add    esp,0x10
c000e1dd:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000e1e0:	76 3b                	jbe    c000e21d <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000e1e2:	83 ec 0c             	sub    esp,0xc
c000e1e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e1e8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000e1ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000e1ee:	51                   	push   ecx
c000e1ef:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000e1f3:	51                   	push   ecx
c000e1f4:	6a 00                	push   0x0
c000e1f6:	6a 01                	push   0x1
c000e1f8:	50                   	push   eax
c000e1f9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000e1fc:	83 c4 20             	add    esp,0x20
c000e1ff:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e204:	74 26                	je     c000e22c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000e206:	43                   	inc    ebx
c000e207:	52                   	push   edx
c000e208:	57                   	push   edi
c000e209:	56                   	push   esi
c000e20a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000e20d:	e8 7e aa ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c000e212:	83 c6 2b             	add    esi,0x2b
c000e215:	83 d7 00             	adc    edi,0x0
c000e218:	83 c4 10             	add    esp,0x10
c000e21b:	eb c0                	jmp    c000e1dd <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000e21d:	50                   	push   eax
c000e21e:	50                   	push   eax
c000e21f:	6a 40                	push   0x40
c000e221:	55                   	push   ebp
c000e222:	e8 0e ff ff ff       	call   c000e135 <CmExpand(Reghive_Tag*, int)>
c000e227:	83 c4 10             	add    esp,0x10
c000e22a:	89 c3                	mov    ebx,eax
c000e22c:	83 c4 1c             	add    esp,0x1c
c000e22f:	89 d8                	mov    eax,ebx
c000e231:	5b                   	pop    ebx
c000e232:	5e                   	pop    esi
c000e233:	5f                   	pop    edi
c000e234:	5d                   	pop    ebp
c000e235:	c3                   	ret    

c000e236 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000e236:	55                   	push   ebp
c000e237:	57                   	push   edi
c000e238:	56                   	push   esi
c000e239:	53                   	push   ebx
c000e23a:	81 ec 88 00 00 00    	sub    esp,0x88
c000e240:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000e247:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e24e:	e8 5d ff ff ff       	call   c000e1b0 <CmFindUnusedExtent(Reghive_Tag*)>
c000e253:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e257:	83 c4 0c             	add    esp,0xc
c000e25a:	6a 2b                	push   0x2b
c000e25c:	6a 00                	push   0x0
c000e25e:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000e262:	55                   	push   ebp
c000e263:	e8 88 22 ff ff       	call   c00004f0 <memset>
c000e268:	83 c4 10             	add    esp,0x10
c000e26b:	85 db                	test   ebx,ebx
c000e26d:	74 12                	je     c000e281 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000e26f:	51                   	push   ecx
c000e270:	55                   	push   ebp
c000e271:	53                   	push   ebx
c000e272:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e279:	e8 0e fd ff ff       	call   c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e27e:	83 c4 10             	add    esp,0x10
c000e281:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000e285:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000e28c:	b9 2b 00 00 00       	mov    ecx,0x2b
c000e291:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e293:	85 db                	test   ebx,ebx
c000e295:	74 49                	je     c000e2e0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000e297:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000e29c:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000e2a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2a5:	c1 e0 08             	shl    eax,0x8
c000e2a8:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000e2ae:	09 c8                	or     eax,ecx
c000e2b0:	74 11                	je     c000e2c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000e2b2:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000e2b6:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000e2ba:	c1 e8 10             	shr    eax,0x10
c000e2bd:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000e2c1:	eb 0f                	jmp    c000e2d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000e2c3:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000e2c8:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000e2cd:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000e2d2:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000e2d6:	c1 ea 08             	shr    edx,0x8
c000e2d9:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000e2de:	eb 0f                	jmp    c000e2ef <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000e2e0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000e2e5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000e2ea:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000e2ef:	52                   	push   edx
c000e2f0:	8d 44 24 49          	lea    eax,[esp+0x49]
c000e2f4:	50                   	push   eax
c000e2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e2f9:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e300:	e8 ab fd ff ff       	call   c000e0b0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e305:	83 c4 10             	add    esp,0x10
c000e308:	85 db                	test   ebx,ebx
c000e30a:	74 12                	je     c000e31e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000e30c:	50                   	push   eax
c000e30d:	55                   	push   ebp
c000e30e:	53                   	push   ebx
c000e30f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e316:	e8 95 fd ff ff       	call   c000e0b0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e31b:	83 c4 10             	add    esp,0x10
c000e31e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e322:	83 c4 7c             	add    esp,0x7c
c000e325:	5b                   	pop    ebx
c000e326:	5e                   	pop    esi
c000e327:	5f                   	pop    edi
c000e328:	5d                   	pop    ebp
c000e329:	c3                   	ret    

c000e32a <CmSetString(Reghive_Tag*, int, char const*)>:
c000e32a:	55                   	push   ebp
c000e32b:	57                   	push   edi
c000e32c:	56                   	push   esi
c000e32d:	53                   	push   ebx
c000e32e:	bb 27 00 00 00       	mov    ebx,0x27
c000e333:	81 ec 88 00 00 00    	sub    esp,0x88
c000e339:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000e340:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000e347:	e8 24 22 ff ff       	call   c0000570 <strlen>
c000e34c:	8d 48 26             	lea    ecx,[eax+0x26]
c000e34f:	89 c8                	mov    eax,ecx
c000e351:	99                   	cdq    
c000e352:	f7 fb                	idiv   ebx
c000e354:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e358:	83 c4 10             	add    esp,0x10
c000e35b:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000e361:	7e 10                	jle    c000e373 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000e363:	83 ec 0c             	sub    esp,0xc
c000e366:	68 93 b4 02 c0       	push   0xc002b493
c000e36b:	e8 dc 23 00 00       	call   c001074c <KePanic(char const*)>
c000e370:	83 c4 10             	add    esp,0x10
c000e373:	31 ff                	xor    edi,edi
c000e375:	50                   	push   eax
c000e376:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000e37a:	53                   	push   ebx
c000e37b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e382:	56                   	push   esi
c000e383:	e8 04 fc ff ff       	call   c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e388:	83 c4 10             	add    esp,0x10
c000e38b:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000e38f:	89 d0                	mov    eax,edx
c000e391:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000e395:	c1 e0 08             	shl    eax,0x8
c000e398:	09 c2                	or     edx,eax
c000e39a:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000e39e:	c1 e2 08             	shl    edx,0x8
c000e3a1:	09 c2                	or     edx,eax
c000e3a3:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000e3a7:	7e 76                	jle    c000e41f <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000e3a9:	85 d2                	test   edx,edx
c000e3ab:	75 25                	jne    c000e3d2 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000e3ad:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000e3b2:	8d 44 24 45          	lea    eax,[esp+0x45]
c000e3b6:	50                   	push   eax
c000e3b7:	6a 00                	push   0x0
c000e3b9:	6a 00                	push   0x0
c000e3bb:	56                   	push   esi
c000e3bc:	e8 75 fe ff ff       	call   c000e236 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e3c1:	83 c4 10             	add    esp,0x10
c000e3c4:	89 c2                	mov    edx,eax
c000e3c6:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000e3c9:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000e3cc:	c1 f8 10             	sar    eax,0x10
c000e3cf:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000e3d2:	55                   	push   ebp
c000e3d3:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000e3d7:	55                   	push   ebp
c000e3d8:	52                   	push   edx
c000e3d9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e3dd:	56                   	push   esi
c000e3de:	e8 a9 fb ff ff       	call   c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e3e3:	83 c4 0c             	add    esp,0xc
c000e3e6:	6a 27                	push   0x27
c000e3e8:	6a 00                	push   0x0
c000e3ea:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000e3ee:	51                   	push   ecx
c000e3ef:	e8 fc 20 ff ff       	call   c00004f0 <memset>
c000e3f4:	83 c4 0c             	add    esp,0xc
c000e3f7:	6b c7 27             	imul   eax,edi,0x27
c000e3fa:	6a 27                	push   0x27
c000e3fc:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000e403:	50                   	push   eax
c000e404:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000e408:	51                   	push   ecx
c000e409:	e8 72 22 ff ff       	call   c0000680 <strncpy>
c000e40e:	83 c4 0c             	add    esp,0xc
c000e411:	55                   	push   ebp
c000e412:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e416:	52                   	push   edx
c000e417:	56                   	push   esi
c000e418:	e8 93 fc ff ff       	call   c000e0b0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e41d:	eb 19                	jmp    c000e438 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000e41f:	85 d2                	test   edx,edx
c000e421:	74 18                	je     c000e43b <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000e423:	51                   	push   ecx
c000e424:	51                   	push   ecx
c000e425:	52                   	push   edx
c000e426:	56                   	push   esi
c000e427:	e8 c0 fc ff ff       	call   c000e0ec <CmFreeExtent(Reghive_Tag*, int)>
c000e42c:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000e430:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000e434:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000e438:	83 c4 10             	add    esp,0x10
c000e43b:	47                   	inc    edi
c000e43c:	83 c3 03             	add    ebx,0x3
c000e43f:	83 ff 07             	cmp    edi,0x7
c000e442:	0f 85 43 ff ff ff    	jne    c000e38b <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000e448:	50                   	push   eax
c000e449:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000e44d:	50                   	push   eax
c000e44e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000e455:	56                   	push   esi
c000e456:	e8 55 fc ff ff       	call   c000e0b0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e45b:	81 c4 8c 00 00 00    	add    esp,0x8c
c000e461:	5b                   	pop    ebx
c000e462:	5e                   	pop    esi
c000e463:	5f                   	pop    edi
c000e464:	5d                   	pop    ebp
c000e465:	c3                   	ret    

c000e466 <CmGetMatch(char*, char*, bool, bool*)>:
c000e466:	56                   	push   esi
c000e467:	53                   	push   ebx
c000e468:	50                   	push   eax
c000e469:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e46d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e472:	74 25                	je     c000e499 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000e474:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000e477:	31 db                	xor    ebx,ebx
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8d 04 9d 00 f7 02 c0 	lea    eax,[ebx*4-0x3ffd0900]
c000e482:	50                   	push   eax
c000e483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e487:	e8 c4 22 ff ff       	call   c0000750 <strcmp>
c000e48c:	83 c4 10             	add    esp,0x10
c000e48f:	85 c0                	test   eax,eax
c000e491:	74 2e                	je     c000e4c1 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000e493:	43                   	inc    ebx
c000e494:	83 fb 3f             	cmp    ebx,0x3f
c000e497:	75 e0                	jne    c000e479 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000e499:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000e49c:	31 db                	xor    ebx,ebx
c000e49e:	8d 04 9d 00 f7 02 c0 	lea    eax,[ebx*4-0x3ffd0900]
c000e4a5:	51                   	push   ecx
c000e4a6:	51                   	push   ecx
c000e4a7:	50                   	push   eax
c000e4a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e4ac:	e8 9f 22 ff ff       	call   c0000750 <strcmp>
c000e4b1:	83 c4 10             	add    esp,0x10
c000e4b4:	85 c0                	test   eax,eax
c000e4b6:	74 09                	je     c000e4c1 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000e4b8:	43                   	inc    ebx
c000e4b9:	83 fb 3f             	cmp    ebx,0x3f
c000e4bc:	75 e0                	jne    c000e49e <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000e4be:	83 cb ff             	or     ebx,0xffffffff
c000e4c1:	89 d8                	mov    eax,ebx
c000e4c3:	5a                   	pop    edx
c000e4c4:	5b                   	pop    ebx
c000e4c5:	5e                   	pop    esi
c000e4c6:	c3                   	ret    

c000e4c7 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000e4c7:	55                   	push   ebp
c000e4c8:	31 c0                	xor    eax,eax
c000e4ca:	57                   	push   edi
c000e4cb:	56                   	push   esi
c000e4cc:	53                   	push   ebx
c000e4cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e4d1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e4d5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000e4d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e4db:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000e4de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4e2:	83 fd 1f             	cmp    ebp,0x1f
c000e4e5:	7f 0b                	jg     c000e4f2 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000e4e7:	0f b6 c2             	movzx  eax,dl
c000e4ea:	d3 e0                	shl    eax,cl
c000e4ec:	09 07                	or     DWORD PTR [edi],eax
c000e4ee:	b0 01                	mov    al,0x1
c000e4f0:	01 33                	add    DWORD PTR [ebx],esi
c000e4f2:	5b                   	pop    ebx
c000e4f3:	5e                   	pop    esi
c000e4f4:	5f                   	pop    edi
c000e4f5:	5d                   	pop    ebp
c000e4f6:	c3                   	ret    

c000e4f7 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000e4f7:	57                   	push   edi
c000e4f8:	56                   	push   esi
c000e4f9:	53                   	push   ebx
c000e4fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e4fe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e502:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000e506:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e50a:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000e50c:	7c 17                	jl     c000e525 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000e50e:	8b 17                	mov    edx,DWORD PTR [edi]
c000e510:	b8 01 00 00 00       	mov    eax,0x1
c000e515:	d3 e0                	shl    eax,cl
c000e517:	48                   	dec    eax
c000e518:	21 d0                	and    eax,edx
c000e51a:	d3 ea                	shr    edx,cl
c000e51c:	89 17                	mov    DWORD PTR [edi],edx
c000e51e:	29 0b                	sub    DWORD PTR [ebx],ecx
c000e520:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000e523:	eb 05                	jmp    c000e52a <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000e525:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000e528:	31 c0                	xor    eax,eax
c000e52a:	5b                   	pop    ebx
c000e52b:	5e                   	pop    esi
c000e52c:	5f                   	pop    edi
c000e52d:	c3                   	ret    

c000e52e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000e52e:	83 ec 40             	sub    esp,0x40
c000e531:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e535:	50                   	push   eax
c000e536:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e53a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e53e:	e8 49 fa ff ff       	call   c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e543:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e547:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000e54b:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000e54f:	89 10                	mov    DWORD PTR [eax],edx
c000e551:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000e554:	83 c4 4c             	add    esp,0x4c
c000e557:	c3                   	ret    

c000e558 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000e558:	55                   	push   ebp
c000e559:	57                   	push   edi
c000e55a:	56                   	push   esi
c000e55b:	53                   	push   ebx
c000e55c:	83 ec 40             	sub    esp,0x40
c000e55f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000e563:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000e567:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000e56b:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000e56f:	53                   	push   ebx
c000e570:	56                   	push   esi
c000e571:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e575:	e8 12 fa ff ff       	call   c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e57a:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000e57e:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000e582:	83 c4 0c             	add    esp,0xc
c000e585:	53                   	push   ebx
c000e586:	56                   	push   esi
c000e587:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e58b:	e8 20 fb ff ff       	call   c000e0b0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e590:	83 c4 4c             	add    esp,0x4c
c000e593:	5b                   	pop    ebx
c000e594:	5e                   	pop    esi
c000e595:	5f                   	pop    edi
c000e596:	5d                   	pop    ebp
c000e597:	c3                   	ret    

c000e598 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000e598:	55                   	push   ebp
c000e599:	57                   	push   edi
c000e59a:	56                   	push   esi
c000e59b:	31 f6                	xor    esi,esi
c000e59d:	53                   	push   ebx
c000e59e:	31 db                	xor    ebx,ebx
c000e5a0:	83 ec 40             	sub    esp,0x40
c000e5a3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e5ab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e5b3:	6a 12                	push   0x12
c000e5b5:	68 ee 00 00 00       	push   0xee
c000e5ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e5be:	e8 2d 1f ff ff       	call   c00004f0 <memset>
c000e5c3:	83 c4 10             	add    esp,0x10
c000e5c6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000e5ca:	6a 08                	push   0x8
c000e5cc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e5d0:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000e5d4:	50                   	push   eax
c000e5d5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e5d9:	55                   	push   ebp
c000e5da:	57                   	push   edi
c000e5db:	e8 e7 fe ff ff       	call   c000e4c7 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e5e0:	83 c4 10             	add    esp,0x10
c000e5e3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e5e7:	50                   	push   eax
c000e5e8:	6a 06                	push   0x6
c000e5ea:	55                   	push   ebp
c000e5eb:	57                   	push   edi
c000e5ec:	e8 06 ff ff ff       	call   c000e4f7 <CmGetShift(unsigned int*, int*, int, bool*)>
c000e5f1:	83 c4 10             	add    esp,0x10
c000e5f4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e5f9:	74 07                	je     c000e602 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000e5fb:	46                   	inc    esi
c000e5fc:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000e600:	eb e1                	jmp    c000e5e3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000e602:	43                   	inc    ebx
c000e603:	83 fb 12             	cmp    ebx,0x12
c000e606:	75 c2                	jne    c000e5ca <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000e608:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e60c:	31 db                	xor    ebx,ebx
c000e60e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000e611:	50                   	push   eax
c000e612:	50                   	push   eax
c000e613:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000e618:	43                   	inc    ebx
c000e619:	8d 04 85 00 f7 02 c0 	lea    eax,[eax*4-0x3ffd0900]
c000e620:	50                   	push   eax
c000e621:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000e625:	e8 16 22 ff ff       	call   c0000840 <strcat>
c000e62a:	83 c4 10             	add    esp,0x10
c000e62d:	83 fb 18             	cmp    ebx,0x18
c000e630:	75 df                	jne    c000e611 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000e632:	83 c4 3c             	add    esp,0x3c
c000e635:	31 c0                	xor    eax,eax
c000e637:	5b                   	pop    ebx
c000e638:	5e                   	pop    esi
c000e639:	5f                   	pop    edi
c000e63a:	5d                   	pop    ebp
c000e63b:	c3                   	ret    

c000e63c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000e63c:	83 ec 40             	sub    esp,0x40
c000e63f:	8d 44 24 09          	lea    eax,[esp+0x9]
c000e643:	50                   	push   eax
c000e644:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e648:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e64c:	e8 3b f9 ff ff       	call   c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e651:	58                   	pop    eax
c000e652:	5a                   	pop    edx
c000e653:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000e657:	8d 44 24 15          	lea    eax,[esp+0x15]
c000e65b:	50                   	push   eax
c000e65c:	e8 37 ff ff ff       	call   c000e598 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000e661:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000e666:	83 c4 4c             	add    esp,0x4c
c000e669:	c3                   	ret    

c000e66a <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000e66a:	55                   	push   ebp
c000e66b:	57                   	push   edi
c000e66c:	56                   	push   esi
c000e66d:	53                   	push   ebx
c000e66e:	31 db                	xor    ebx,ebx
c000e670:	83 ec 70             	sub    esp,0x70
c000e673:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000e67a:	6a 30                	push   0x30
c000e67c:	6a 00                	push   0x0
c000e67e:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000e682:	56                   	push   esi
c000e683:	e8 68 1e ff ff       	call   c00004f0 <memset>
c000e688:	83 c4 10             	add    esp,0x10
c000e68b:	83 ec 0c             	sub    esp,0xc
c000e68e:	57                   	push   edi
c000e68f:	e8 dc 1e ff ff       	call   c0000570 <strlen>
c000e694:	83 c4 10             	add    esp,0x10
c000e697:	39 d8                	cmp    eax,ebx
c000e699:	76 16                	jbe    c000e6b1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000e69b:	83 ec 0c             	sub    esp,0xc
c000e69e:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000e6a2:	50                   	push   eax
c000e6a3:	e8 88 22 ff ff       	call   c0000930 <toupper>
c000e6a8:	83 c4 10             	add    esp,0x10
c000e6ab:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000e6ae:	43                   	inc    ebx
c000e6af:	eb da                	jmp    c000e68b <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000e6b1:	31 f6                	xor    esi,esi
c000e6b3:	52                   	push   edx
c000e6b4:	31 ff                	xor    edi,edi
c000e6b6:	6a 18                	push   0x18
c000e6b8:	6a 3f                	push   0x3f
c000e6ba:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e6be:	50                   	push   eax
c000e6bf:	e8 2c 1e ff ff       	call   c00004f0 <memset>
c000e6c4:	83 c4 10             	add    esp,0x10
c000e6c7:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000e6cb:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000e6cf:	84 c0                	test   al,al
c000e6d1:	0f 84 b0 00 00 00    	je     c000e787 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000e6d7:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000e6db:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000e6e0:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000e6e4:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000e6e9:	8d 6e 01             	lea    ebp,[esi+0x1]
c000e6ec:	83 ec 0c             	sub    esp,0xc
c000e6ef:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000e6f3:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000e6f7:	53                   	push   ebx
c000e6f8:	e8 73 1e ff ff       	call   c0000570 <strlen>
c000e6fd:	83 c4 10             	add    esp,0x10
c000e700:	85 c0                	test   eax,eax
c000e702:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e706:	74 0b                	je     c000e713 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000e708:	50                   	push   eax
c000e709:	6a 01                	push   0x1
c000e70b:	53                   	push   ebx
c000e70c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000e710:	50                   	push   eax
c000e711:	eb 0a                	jmp    c000e71d <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000e713:	50                   	push   eax
c000e714:	6a 00                	push   0x0
c000e716:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000e71a:	50                   	push   eax
c000e71b:	6a 00                	push   0x0
c000e71d:	e8 44 fd ff ff       	call   c000e466 <CmGetMatch(char*, char*, bool, bool*)>
c000e722:	83 c4 10             	add    esp,0x10
c000e725:	83 f8 ff             	cmp    eax,0xffffffff
c000e728:	75 1a                	jne    c000e744 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	68 a8 b4 02 c0       	push   0xc002b4a8
c000e732:	e8 15 20 00 00       	call   c001074c <KePanic(char const*)>
c000e737:	83 c4 10             	add    esp,0x10
c000e73a:	b8 02 00 00 00       	mov    eax,0x2
c000e73f:	e9 bc 00 00 00       	jmp    c000e800 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000e744:	83 ff 18             	cmp    edi,0x18
c000e747:	75 1a                	jne    c000e763 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000e749:	83 ec 0c             	sub    esp,0xc
c000e74c:	68 bd b4 02 c0       	push   0xc002b4bd
c000e751:	e8 f6 1f 00 00       	call   c001074c <KePanic(char const*)>
c000e756:	83 c4 10             	add    esp,0x10
c000e759:	b8 01 00 00 00       	mov    eax,0x1
c000e75e:	e9 9d 00 00 00       	jmp    c000e800 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000e763:	47                   	inc    edi
c000e764:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e769:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000e76d:	74 02                	je     c000e771 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000e76f:	89 ee                	mov    esi,ebp
c000e771:	83 ec 0c             	sub    esp,0xc
c000e774:	53                   	push   ebx
c000e775:	e8 f6 1d ff ff       	call   c0000570 <strlen>
c000e77a:	83 c4 10             	add    esp,0x10
c000e77d:	85 c0                	test   eax,eax
c000e77f:	74 06                	je     c000e787 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000e781:	46                   	inc    esi
c000e782:	e9 40 ff ff ff       	jmp    c000e6c7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000e787:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e78f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e797:	31 f6                	xor    esi,esi
c000e799:	50                   	push   eax
c000e79a:	31 ff                	xor    edi,edi
c000e79c:	6a 12                	push   0x12
c000e79e:	68 ee 00 00 00       	push   0xee
c000e7a3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000e7aa:	e8 41 1d ff ff       	call   c00004f0 <memset>
c000e7af:	83 c4 10             	add    esp,0x10
c000e7b2:	83 fe 17             	cmp    esi,0x17
c000e7b5:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000e7b9:	7e 26                	jle    c000e7e1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000e7bb:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000e7bf:	50                   	push   eax
c000e7c0:	6a 08                	push   0x8
c000e7c2:	55                   	push   ebp
c000e7c3:	53                   	push   ebx
c000e7c4:	e8 2e fd ff ff       	call   c000e4f7 <CmGetShift(unsigned int*, int*, int, bool*)>
c000e7c9:	83 c4 10             	add    esp,0x10
c000e7cc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e7d1:	74 26                	je     c000e7f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000e7d3:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000e7da:	4e                   	dec    esi
c000e7db:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000e7de:	47                   	inc    edi
c000e7df:	eb 1c                	jmp    c000e7fd <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000e7e1:	6a 06                	push   0x6
c000e7e3:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000e7e8:	50                   	push   eax
c000e7e9:	55                   	push   ebp
c000e7ea:	53                   	push   ebx
c000e7eb:	e8 d7 fc ff ff       	call   c000e4c7 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000e7f0:	83 c4 10             	add    esp,0x10
c000e7f3:	84 c0                	test   al,al
c000e7f5:	75 06                	jne    c000e7fd <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000e7f7:	eb c2                	jmp    c000e7bb <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000e7f9:	31 c0                	xor    eax,eax
c000e7fb:	eb 03                	jmp    c000e800 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000e7fd:	46                   	inc    esi
c000e7fe:	eb b2                	jmp    c000e7b2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000e800:	83 c4 6c             	add    esp,0x6c
c000e803:	5b                   	pop    ebx
c000e804:	5e                   	pop    esi
c000e805:	5f                   	pop    edi
c000e806:	5d                   	pop    ebp
c000e807:	c3                   	ret    

c000e808 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000e808:	53                   	push   ebx
c000e809:	83 ec 3c             	sub    esp,0x3c
c000e80c:	6a 2b                	push   0x2b
c000e80e:	6a 00                	push   0x0
c000e810:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e814:	53                   	push   ebx
c000e815:	e8 d6 1c ff ff       	call   c00004f0 <memset>
c000e81a:	58                   	pop    eax
c000e81b:	5a                   	pop    edx
c000e81c:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e820:	50                   	push   eax
c000e821:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e825:	e8 40 fe ff ff       	call   c000e66a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e82a:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000e82f:	83 c4 0c             	add    esp,0xc
c000e832:	6a 15                	push   0x15
c000e834:	6a 00                	push   0x0
c000e836:	8d 44 24 27          	lea    eax,[esp+0x27]
c000e83a:	50                   	push   eax
c000e83b:	e8 b0 1c ff ff       	call   c00004f0 <memset>
c000e840:	53                   	push   ebx
c000e841:	6a 00                	push   0x0
c000e843:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e847:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e84b:	e8 e6 f9 ff ff       	call   c000e236 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e850:	83 c4 58             	add    esp,0x58
c000e853:	5b                   	pop    ebx
c000e854:	c3                   	ret    

c000e855 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000e855:	56                   	push   esi
c000e856:	53                   	push   ebx
c000e857:	83 ec 48             	sub    esp,0x48
c000e85a:	6a 12                	push   0x12
c000e85c:	68 ff 00 00 00       	push   0xff
c000e861:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000e865:	56                   	push   esi
c000e866:	e8 85 1c ff ff       	call   c00004f0 <memset>
c000e86b:	5a                   	pop    edx
c000e86c:	59                   	pop    ecx
c000e86d:	56                   	push   esi
c000e86e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000e872:	e8 f3 fd ff ff       	call   c000e66a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e877:	83 c4 10             	add    esp,0x10
c000e87a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000e87e:	85 db                	test   ebx,ebx
c000e880:	74 42                	je     c000e8c4 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000e882:	50                   	push   eax
c000e883:	8d 44 24 19          	lea    eax,[esp+0x19]
c000e887:	50                   	push   eax
c000e888:	53                   	push   ebx
c000e889:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e88d:	e8 fa f6 ff ff       	call   c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	6a 12                	push   0x12
c000e897:	8d 44 24 21          	lea    eax,[esp+0x21]
c000e89b:	50                   	push   eax
c000e89c:	56                   	push   esi
c000e89d:	e8 de 1a ff ff       	call   c0000380 <memcmp>
c000e8a2:	83 c4 10             	add    esp,0x10
c000e8a5:	85 c0                	test   eax,eax
c000e8a7:	74 1e                	je     c000e8c7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000e8a9:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000e8ae:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000e8b3:	c1 e3 08             	shl    ebx,0x8
c000e8b6:	09 d8                	or     eax,ebx
c000e8b8:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000e8bd:	c1 e3 10             	shl    ebx,0x10
c000e8c0:	09 c3                	or     ebx,eax
c000e8c2:	eb ba                	jmp    c000e87e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000e8c4:	83 cb ff             	or     ebx,0xffffffff
c000e8c7:	89 d8                	mov    eax,ebx
c000e8c9:	83 c4 44             	add    esp,0x44
c000e8cc:	5b                   	pop    ebx
c000e8cd:	5e                   	pop    esi
c000e8ce:	c3                   	ret    

c000e8cf <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000e8cf:	57                   	push   edi
c000e8d0:	56                   	push   esi
c000e8d1:	53                   	push   ebx
c000e8d2:	83 ec 34             	sub    esp,0x34
c000e8d5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000e8d9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000e8dd:	6a 2b                	push   0x2b
c000e8df:	6a 00                	push   0x0
c000e8e1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000e8e5:	53                   	push   ebx
c000e8e6:	e8 05 1c ff ff       	call   c00004f0 <memset>
c000e8eb:	58                   	pop    eax
c000e8ec:	5a                   	pop    edx
c000e8ed:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e8f1:	50                   	push   eax
c000e8f2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e8f6:	e8 6f fd ff ff       	call   c000e66a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e8fb:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e8ff:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000e903:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000e907:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000e90b:	53                   	push   ebx
c000e90c:	6a 00                	push   0x0
c000e90e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e912:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000e916:	e8 1b f9 ff ff       	call   c000e236 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e91b:	83 c4 50             	add    esp,0x50
c000e91e:	5b                   	pop    ebx
c000e91f:	5e                   	pop    esi
c000e920:	5f                   	pop    edi
c000e921:	c3                   	ret    

c000e922 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000e922:	55                   	push   ebp
c000e923:	57                   	push   edi
c000e924:	56                   	push   esi
c000e925:	53                   	push   ebx
c000e926:	83 ec 40             	sub    esp,0x40
c000e929:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000e92d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000e931:	6a 2b                	push   0x2b
c000e933:	6a 00                	push   0x0
c000e935:	8d 74 24 11          	lea    esi,[esp+0x11]
c000e939:	56                   	push   esi
c000e93a:	e8 b1 1b ff ff       	call   c00004f0 <memset>
c000e93f:	5f                   	pop    edi
c000e940:	89 ef                	mov    edi,ebp
c000e942:	58                   	pop    eax
c000e943:	8d 44 24 11          	lea    eax,[esp+0x11]
c000e947:	50                   	push   eax
c000e948:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000e94c:	e8 19 fd ff ff       	call   c000e66a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000e951:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000e956:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000e95b:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000e960:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000e965:	83 c4 10             	add    esp,0x10
c000e968:	85 ed                	test   ebp,ebp
c000e96a:	74 14                	je     c000e980 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000e96c:	51                   	push   ecx
c000e96d:	51                   	push   ecx
c000e96e:	57                   	push   edi
c000e96f:	53                   	push   ebx
c000e970:	e8 09 f7 ff ff       	call   c000e07e <CmGetNext(Reghive_Tag*, int)>
c000e975:	83 c4 10             	add    esp,0x10
c000e978:	85 c0                	test   eax,eax
c000e97a:	74 04                	je     c000e980 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000e97c:	89 c7                	mov    edi,eax
c000e97e:	eb e8                	jmp    c000e968 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000e980:	56                   	push   esi
c000e981:	6a 00                	push   0x0
c000e983:	57                   	push   edi
c000e984:	53                   	push   ebx
c000e985:	e8 ac f8 ff ff       	call   c000e236 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000e98a:	83 c4 0c             	add    esp,0xc
c000e98d:	89 c7                	mov    edi,eax
c000e98f:	56                   	push   esi
c000e990:	50                   	push   eax
c000e991:	53                   	push   ebx
c000e992:	e8 f5 f5 ff ff       	call   c000df8c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000e997:	58                   	pop    eax
c000e998:	5a                   	pop    edx
c000e999:	6a 6c                	push   0x6c
c000e99b:	6a 00                	push   0x0
c000e99d:	6a 00                	push   0x0
c000e99f:	68 ce b4 02 c0       	push   0xc002b4ce
c000e9a4:	57                   	push   edi
c000e9a5:	53                   	push   ebx
c000e9a6:	e8 24 ff ff ff       	call   c000e8cf <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000e9ab:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000e9af:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000e9b3:	c1 e8 10             	shr    eax,0x10
c000e9b6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000e9ba:	83 c4 1c             	add    esp,0x1c
c000e9bd:	56                   	push   esi
c000e9be:	57                   	push   edi
c000e9bf:	53                   	push   ebx
c000e9c0:	e8 eb f6 ff ff       	call   c000e0b0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000e9c5:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000e9ca:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000e9cf:	c1 e0 08             	shl    eax,0x8
c000e9d2:	09 c2                	or     edx,eax
c000e9d4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000e9d9:	83 c4 4c             	add    esp,0x4c
c000e9dc:	c1 e0 10             	shl    eax,0x10
c000e9df:	5b                   	pop    ebx
c000e9e0:	09 d0                	or     eax,edx
c000e9e2:	5e                   	pop    esi
c000e9e3:	5f                   	pop    edi
c000e9e4:	5d                   	pop    ebp
c000e9e5:	c3                   	ret    

c000e9e6 <zStrtok(char*, char const*)>:
c000e9e6:	55                   	push   ebp
c000e9e7:	57                   	push   edi
c000e9e8:	56                   	push   esi
c000e9e9:	53                   	push   ebx
c000e9ea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e9ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9f2:	85 db                	test   ebx,ebx
c000e9f4:	74 2f                	je     c000ea25 <zStrtok(char*, char const*)+0x3f>
c000e9f6:	85 c0                	test   eax,eax
c000e9f8:	75 09                	jne    c000ea03 <zStrtok(char*, char const*)+0x1d>
c000e9fa:	a1 04 61 03 c0       	mov    eax,ds:0xc0036104
c000e9ff:	85 c0                	test   eax,eax
c000ea01:	74 50                	je     c000ea53 <zStrtok(char*, char const*)+0x6d>
c000ea03:	31 c9                	xor    ecx,ecx
c000ea05:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000ea09:	74 03                	je     c000ea0e <zStrtok(char*, char const*)+0x28>
c000ea0b:	41                   	inc    ecx
c000ea0c:	eb f7                	jmp    c000ea05 <zStrtok(char*, char const*)+0x1f>
c000ea0e:	31 d2                	xor    edx,edx
c000ea10:	39 ca                	cmp    edx,ecx
c000ea12:	74 15                	je     c000ea29 <zStrtok(char*, char const*)+0x43>
c000ea14:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000ea18:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000ea1b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000ea1e:	39 ee                	cmp    esi,ebp
c000ea20:	74 13                	je     c000ea35 <zStrtok(char*, char const*)+0x4f>
c000ea22:	42                   	inc    edx
c000ea23:	eb eb                	jmp    c000ea10 <zStrtok(char*, char const*)+0x2a>
c000ea25:	31 c0                	xor    eax,eax
c000ea27:	eb 2a                	jmp    c000ea53 <zStrtok(char*, char const*)+0x6d>
c000ea29:	c7 05 04 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036104,0x0
c000ea33:	eb 1e                	jmp    c000ea53 <zStrtok(char*, char const*)+0x6d>
c000ea35:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000ea38:	39 ce                	cmp    esi,ecx
c000ea3a:	75 0a                	jne    c000ea46 <zStrtok(char*, char const*)+0x60>
c000ea3c:	40                   	inc    eax
c000ea3d:	a3 04 61 03 c0       	mov    ds:0xc0036104,eax
c000ea42:	89 d8                	mov    eax,ebx
c000ea44:	eb 0d                	jmp    c000ea53 <zStrtok(char*, char const*)+0x6d>
c000ea46:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000ea4a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000ea4d:	89 15 04 61 03 c0    	mov    DWORD PTR ds:0xc0036104,edx
c000ea53:	5b                   	pop    ebx
c000ea54:	5e                   	pop    esi
c000ea55:	5f                   	pop    edi
c000ea56:	5d                   	pop    ebp
c000ea57:	c3                   	ret    

c000ea58 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000ea58:	57                   	push   edi
c000ea59:	56                   	push   esi
c000ea5a:	53                   	push   ebx
c000ea5b:	81 ec 08 01 00 00    	sub    esp,0x108
c000ea61:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000ea68:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000ea6f:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ea73:	53                   	push   ebx
c000ea74:	e8 c7 1b ff ff       	call   c0000640 <strcpy>
c000ea79:	59                   	pop    ecx
c000ea7a:	5e                   	pop    esi
c000ea7b:	68 66 c3 02 c0       	push   0xc002c366
c000ea80:	53                   	push   ebx
c000ea81:	bb 01 00 00 00       	mov    ebx,0x1
c000ea86:	e8 5b ff ff ff       	call   c000e9e6 <zStrtok(char*, char const*)>
c000ea8b:	83 c4 10             	add    esp,0x10
c000ea8e:	85 c0                	test   eax,eax
c000ea90:	74 3b                	je     c000eacd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000ea92:	52                   	push   edx
c000ea93:	50                   	push   eax
c000ea94:	6a 01                	push   0x1
c000ea96:	57                   	push   edi
c000ea97:	e8 b9 fd ff ff       	call   c000e855 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000ea9c:	59                   	pop    ecx
c000ea9d:	89 c3                	mov    ebx,eax
c000ea9f:	5e                   	pop    esi
c000eaa0:	68 66 c3 02 c0       	push   0xc002c366
c000eaa5:	6a 00                	push   0x0
c000eaa7:	e8 3a ff ff ff       	call   c000e9e6 <zStrtok(char*, char const*)>
c000eaac:	83 c4 10             	add    esp,0x10
c000eaaf:	89 c6                	mov    esi,eax
c000eab1:	85 c0                	test   eax,eax
c000eab3:	74 18                	je     c000eacd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000eab5:	52                   	push   edx
c000eab6:	52                   	push   edx
c000eab7:	53                   	push   ebx
c000eab8:	57                   	push   edi
c000eab9:	e8 81 f5 ff ff       	call   c000e03f <CmEnterDirectory(Reghive_Tag*, int)>
c000eabe:	83 c4 10             	add    esp,0x10
c000eac1:	89 c3                	mov    ebx,eax
c000eac3:	83 f8 ff             	cmp    eax,0xffffffff
c000eac6:	74 05                	je     c000eacd <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000eac8:	50                   	push   eax
c000eac9:	56                   	push   esi
c000eaca:	53                   	push   ebx
c000eacb:	eb c9                	jmp    c000ea96 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000eacd:	81 c4 00 01 00 00    	add    esp,0x100
c000ead3:	89 d8                	mov    eax,ebx
c000ead5:	5b                   	pop    ebx
c000ead6:	5e                   	pop    esi
c000ead7:	5f                   	pop    edi
c000ead8:	c3                   	ret    
c000ead9:	90                   	nop

c000eada <Computer::close(int, int, void*)>:
c000eada:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eadf:	c3                   	ret    

c000eae0 <Computer::Computer()>:
c000eae0:	83 ec 0c             	sub    esp,0xc
c000eae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eae7:	83 ec 08             	sub    esp,0x8
c000eaea:	68 08 a8 02 c0       	push   0xc002a808
c000eaef:	50                   	push   eax
c000eaf0:	e8 ed ba ff ff       	call   c000a5e2 <Device::Device(char const*)>
c000eaf5:	83 c4 10             	add    esp,0x10
c000eaf8:	ba 20 b5 02 c0       	mov    edx,0xc002b520
c000eafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb01:	89 10                	mov    DWORD PTR [eax],edx
c000eb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb07:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000eb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb15:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000eb1f:	90                   	nop
c000eb20:	83 c4 0c             	add    esp,0xc
c000eb23:	c3                   	ret    

c000eb24 <Computer::open(int, int, void*)>:
c000eb24:	56                   	push   esi
c000eb25:	53                   	push   ebx
c000eb26:	83 ec 04             	sub    esp,0x4
c000eb29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb2d:	39 1d 08 61 03 c0    	cmp    DWORD PTR ds:0xc0036108,ebx
c000eb33:	74 10                	je     c000eb45 <Computer::open(int, int, void*)+0x21>
c000eb35:	83 ec 0c             	sub    esp,0xc
c000eb38:	68 ec b4 02 c0       	push   0xc002b4ec
c000eb3d:	e8 0a 1c 00 00       	call   c001074c <KePanic(char const*)>
c000eb42:	83 c4 10             	add    esp,0x10
c000eb45:	83 ec 0c             	sub    esp,0xc
c000eb48:	68 78 11 00 00       	push   0x1178
c000eb4d:	e8 a5 17 00 00       	call   c00102f7 <malloc>
c000eb52:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb55:	89 c6                	mov    esi,eax
c000eb57:	e8 e8 ca 00 00       	call   c001b644 <CPU::CPU()>
c000eb5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb60:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000eb66:	50                   	push   eax
c000eb67:	6a 00                	push   0x0
c000eb69:	6a 00                	push   0x0
c000eb6b:	56                   	push   esi
c000eb6c:	e8 b5 cc 00 00       	call   c001b826 <CPU::open(int, int, void*)>
c000eb71:	83 c4 14             	add    esp,0x14
c000eb74:	68 d4 b4 02 c0       	push   0xc002b4d4
c000eb79:	e8 db f1 ff ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c000eb7e:	e8 71 8c ff ff       	call   c00077f4 <KeSetupDeviceTree()>
c000eb83:	e8 99 8b ff ff       	call   c0007721 <KePrintDeviceTree()>
c000eb88:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000eb8f:	e8 63 17 00 00       	call   c00102f7 <malloc>
c000eb94:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb97:	89 c6                	mov    esi,eax
c000eb99:	e8 4a e7 ff ff       	call   c000d2e8 <ACPI::ACPI()>
c000eb9e:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000eba4:	5a                   	pop    edx
c000eba5:	59                   	pop    ecx
c000eba6:	56                   	push   esi
c000eba7:	53                   	push   ebx
c000eba8:	e8 d3 b8 ff ff       	call   c000a480 <Device::addChild(Device*)>
c000ebad:	5e                   	pop    esi
c000ebae:	58                   	pop    eax
c000ebaf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ebb5:	50                   	push   eax
c000ebb6:	53                   	push   ebx
c000ebb7:	e8 c4 b8 ff ff       	call   c000a480 <Device::addChild(Device*)>
c000ebbc:	83 c4 14             	add    esp,0x14
c000ebbf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebc4:	5b                   	pop    ebx
c000ebc5:	5e                   	pop    esi
c000ebc6:	c3                   	ret    

c000ebc7 <KeCalculateCRC32(unsigned char*, int)>:
c000ebc7:	53                   	push   ebx
c000ebc8:	83 c8 ff             	or     eax,0xffffffff
c000ebcb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ebcf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ebd3:	01 cb                	add    ebx,ecx
c000ebd5:	39 d9                	cmp    ecx,ebx
c000ebd7:	74 15                	je     c000ebee <KeCalculateCRC32(unsigned char*, int)+0x27>
c000ebd9:	41                   	inc    ecx
c000ebda:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000ebdd:	31 c2                	xor    edx,eax
c000ebdf:	c1 e8 08             	shr    eax,0x8
c000ebe2:	0f b6 d2             	movzx  edx,dl
c000ebe5:	33 04 95 00 f8 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd0800]
c000ebec:	eb e7                	jmp    c000ebd5 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000ebee:	f7 d0                	not    eax
c000ebf0:	5b                   	pop    ebx
c000ebf1:	c3                   	ret    

c000ebf2 <EnvVarContainer::getEnv(char const*)>:
c000ebf2:	57                   	push   edi
c000ebf3:	56                   	push   esi
c000ebf4:	53                   	push   ebx
c000ebf5:	31 db                	xor    ebx,ebx
c000ebf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ebfb:	39 1e                	cmp    DWORD PTR [esi],ebx
c000ebfd:	7e 2b                	jle    c000ec2a <EnvVarContainer::getEnv(char const*)+0x38>
c000ebff:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000ec06:	50                   	push   eax
c000ec07:	50                   	push   eax
c000ec08:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ec0b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ec0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec12:	e8 39 1b ff ff       	call   c0000750 <strcmp>
c000ec17:	83 c4 10             	add    esp,0x10
c000ec1a:	85 c0                	test   eax,eax
c000ec1c:	75 09                	jne    c000ec27 <EnvVarContainer::getEnv(char const*)+0x35>
c000ec1e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ec21:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000ec25:	eb 05                	jmp    c000ec2c <EnvVarContainer::getEnv(char const*)+0x3a>
c000ec27:	43                   	inc    ebx
c000ec28:	eb d1                	jmp    c000ebfb <EnvVarContainer::getEnv(char const*)+0x9>
c000ec2a:	31 c0                	xor    eax,eax
c000ec2c:	5b                   	pop    ebx
c000ec2d:	5e                   	pop    esi
c000ec2e:	5f                   	pop    edi
c000ec2f:	c3                   	ret    

c000ec30 <EnvVarContainer::setEnv(char const*, char const*)>:
c000ec30:	55                   	push   ebp
c000ec31:	57                   	push   edi
c000ec32:	56                   	push   esi
c000ec33:	53                   	push   ebx
c000ec34:	83 ec 28             	sub    esp,0x28
c000ec37:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ec3b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ec3f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ec43:	56                   	push   esi
c000ec44:	e8 27 19 ff ff       	call   c0000570 <strlen>
c000ec49:	40                   	inc    eax
c000ec4a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec4d:	e8 a5 16 00 00       	call   c00102f7 <malloc>
c000ec52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec59:	e8 12 19 ff ff       	call   c0000570 <strlen>
c000ec5e:	40                   	inc    eax
c000ec5f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec62:	e8 90 16 00 00       	call   c00102f7 <malloc>
c000ec67:	89 34 24             	mov    DWORD PTR [esp],esi
c000ec6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec6e:	e8 fd 18 ff ff       	call   c0000570 <strlen>
c000ec73:	83 c4 0c             	add    esp,0xc
c000ec76:	40                   	inc    eax
c000ec77:	50                   	push   eax
c000ec78:	6a 00                	push   0x0
c000ec7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ec7e:	e8 6d 18 ff ff       	call   c00004f0 <memset>
c000ec83:	89 34 24             	mov    DWORD PTR [esp],esi
c000ec86:	e8 e5 18 ff ff       	call   c0000570 <strlen>
c000ec8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ec8f:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ec94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec97:	89 de                	mov    esi,ebx
c000ec99:	e8 d2 18 ff ff       	call   c0000570 <strlen>
c000ec9e:	83 c4 0c             	add    esp,0xc
c000eca1:	40                   	inc    eax
c000eca2:	50                   	push   eax
c000eca3:	6a 00                	push   0x0
c000eca5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eca9:	e8 42 18 ff ff       	call   c00004f0 <memset>
c000ecae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecb1:	e8 ba 18 ff ff       	call   c0000570 <strlen>
c000ecb6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ecba:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ecbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ecc2:	40                   	inc    eax
c000ecc3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ecc6:	c1 e0 03             	shl    eax,0x3
c000ecc9:	5a                   	pop    edx
c000ecca:	59                   	pop    ecx
c000eccb:	50                   	push   eax
c000eccc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000eccf:	e8 0f 16 00 00       	call   c00102e3 <realloc>
c000ecd4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ecd8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ecdb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ecde:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ece2:	b9 08 00 00 00       	mov    ecx,0x8
c000ece7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ece9:	83 c4 2c             	add    esp,0x2c
c000ecec:	5b                   	pop    ebx
c000eced:	5e                   	pop    esi
c000ecee:	5f                   	pop    edi
c000ecef:	5d                   	pop    ebp
c000ecf0:	c3                   	ret    
c000ecf1:	90                   	nop

c000ecf2 <EnvVarContainer::deleteEnv(char const*)>:
c000ecf2:	c3                   	ret    
c000ecf3:	90                   	nop

c000ecf4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000ecf4:	55                   	push   ebp
c000ecf5:	57                   	push   edi
c000ecf6:	56                   	push   esi
c000ecf7:	53                   	push   ebx
c000ecf8:	81 ec 38 01 00 00    	sub    esp,0x138
c000ecfe:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000ed05:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000ed0c:	68 14 01 00 00       	push   0x114
c000ed11:	e8 e1 15 00 00       	call   c00102f7 <malloc>
c000ed16:	83 c4 0c             	add    esp,0xc
c000ed19:	89 c3                	mov    ebx,eax
c000ed1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ed1e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ed25:	50                   	push   eax
c000ed26:	e8 89 9e ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c000ed2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ed2e:	e8 63 a1 ff ff       	call   c0008e96 <File::exists()>
c000ed33:	83 c4 10             	add    esp,0x10
c000ed36:	84 c0                	test   al,al
c000ed38:	75 31                	jne    c000ed6b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000ed3a:	50                   	push   eax
c000ed3b:	50                   	push   eax
c000ed3c:	6a 12                	push   0x12
c000ed3e:	53                   	push   ebx
c000ed3f:	e8 8e 9e ff ff       	call   c0008bd2 <File::open(FileOpenMode)>
c000ed44:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed46:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000ed49:	89 34 24             	mov    DWORD PTR [esp],esi
c000ed4c:	e8 1f 18 ff ff       	call   c0000570 <strlen>
c000ed51:	5a                   	pop    edx
c000ed52:	31 d2                	xor    edx,edx
c000ed54:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ed58:	51                   	push   ecx
c000ed59:	56                   	push   esi
c000ed5a:	52                   	push   edx
c000ed5b:	50                   	push   eax
c000ed5c:	53                   	push   ebx
c000ed5d:	ff d7                	call   edi
c000ed5f:	83 c4 14             	add    esp,0x14
c000ed62:	53                   	push   ebx
c000ed63:	e8 c8 9e ff ff       	call   c0008c30 <File::close()>
c000ed68:	83 c4 10             	add    esp,0x10
c000ed6b:	56                   	push   esi
c000ed6c:	31 f6                	xor    esi,esi
c000ed6e:	68 00 01 00 00       	push   0x100
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ed79:	50                   	push   eax
c000ed7a:	e8 71 17 ff ff       	call   c00004f0 <memset>
c000ed7f:	5f                   	pop    edi
c000ed80:	58                   	pop    eax
c000ed81:	6a 01                	push   0x1
c000ed83:	53                   	push   ebx
c000ed84:	e8 49 9e ff ff       	call   c0008bd2 <File::open(FileOpenMode)>
c000ed89:	83 c4 10             	add    esp,0x10
c000ed8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ed94:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000eda1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000eda5:	51                   	push   ecx
c000eda6:	8d 54 24 23          	lea    edx,[esp+0x23]
c000edaa:	52                   	push   edx
c000edab:	6a 00                	push   0x0
c000edad:	6a 01                	push   0x1
c000edaf:	53                   	push   ebx
c000edb0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000edb3:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	89 c2                	mov    edx,eax
c000edbd:	85 c0                	test   eax,eax
c000edbf:	0f 84 36 01 00 00    	je     c000eefb <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000edc5:	83 f8 0d             	cmp    eax,0xd
c000edc8:	0f 84 22 01 00 00    	je     c000eef0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000edce:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000edd3:	0f 84 f0 00 00 00    	je     c000eec9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000edd9:	83 f8 0a             	cmp    eax,0xa
c000eddc:	74 13                	je     c000edf1 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000edde:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ede3:	74 0c                	je     c000edf1 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000ede5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000edeb:	0f 8e f6 00 00 00    	jle    c000eee7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000edf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edf5:	83 ec 0c             	sub    esp,0xc
c000edf8:	8d 78 01             	lea    edi,[eax+0x1]
c000edfb:	57                   	push   edi
c000edfc:	e8 f6 14 00 00       	call   c00102f7 <malloc>
c000ee01:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ee05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ee09:	8d 56 04             	lea    edx,[esi+0x4]
c000ee0c:	89 14 24             	mov    DWORD PTR [esp],edx
c000ee0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ee13:	e8 df 14 00 00       	call   c00102f7 <malloc>
c000ee18:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ee1c:	83 c4 0c             	add    esp,0xc
c000ee1f:	57                   	push   edi
c000ee20:	6a 00                	push   0x0
c000ee22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ee26:	e8 c5 16 ff ff       	call   c00004f0 <memset>
c000ee2b:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ee2f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ee33:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ee37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ee39:	83 c4 0c             	add    esp,0xc
c000ee3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ee40:	52                   	push   edx
c000ee41:	6a 00                	push   0x0
c000ee43:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee47:	e8 a4 16 ff ff       	call   c00004f0 <memset>
c000ee4c:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ee50:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ee54:	89 34 24             	mov    DWORD PTR [esp],esi
c000ee57:	e8 14 17 ff ff       	call   c0000570 <strlen>
c000ee5c:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000ee60:	89 c1                	mov    ecx,eax
c000ee62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ee64:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ee67:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ee6a:	40                   	inc    eax
c000ee6b:	83 c4 10             	add    esp,0x10
c000ee6e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ee71:	85 d2                	test   edx,edx
c000ee73:	75 0c                	jne    c000ee81 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000ee75:	83 ec 0c             	sub    esp,0xc
c000ee78:	6a 08                	push   0x8
c000ee7a:	e8 78 14 00 00       	call   c00102f7 <malloc>
c000ee7f:	eb 0c                	jmp    c000ee8d <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000ee81:	c1 e0 03             	shl    eax,0x3
c000ee84:	51                   	push   ecx
c000ee85:	51                   	push   ecx
c000ee86:	50                   	push   eax
c000ee87:	52                   	push   edx
c000ee88:	e8 56 14 00 00       	call   c00102e3 <realloc>
c000ee8d:	83 c4 10             	add    esp,0x10
c000ee90:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ee93:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ee96:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ee99:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ee9d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000eea1:	b9 08 00 00 00       	mov    ecx,0x8
c000eea6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eea8:	31 f6                	xor    esi,esi
c000eeaa:	50                   	push   eax
c000eeab:	68 00 01 00 00       	push   0x100
c000eeb0:	6a 00                	push   0x0
c000eeb2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000eeb6:	50                   	push   eax
c000eeb7:	e8 34 16 ff ff       	call   c00004f0 <memset>
c000eebc:	83 c4 10             	add    esp,0x10
c000eebf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eec7:	eb 27                	jmp    c000eef0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000eec9:	83 f8 3d             	cmp    eax,0x3d
c000eecc:	74 1e                	je     c000eeec <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000eece:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000eed4:	7f 07                	jg     c000eedd <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000eed6:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000eeda:	46                   	inc    esi
c000eedb:	eb 13                	jmp    c000eef0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000eedd:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000eee5:	eb 09                	jmp    c000eef0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000eee7:	83 f8 3d             	cmp    eax,0x3d
c000eeea:	75 ea                	jne    c000eed6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000eeec:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000eef0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000eef5:	0f 85 99 fe ff ff    	jne    c000ed94 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000eefb:	83 ec 0c             	sub    esp,0xc
c000eefe:	53                   	push   ebx
c000eeff:	e8 2c 9d ff ff       	call   c0008c30 <File::close()>
c000ef04:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ef06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef09:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ef0c:	81 c4 3c 01 00 00    	add    esp,0x13c
c000ef12:	5b                   	pop    ebx
c000ef13:	5e                   	pop    esi
c000ef14:	5f                   	pop    edi
c000ef15:	5d                   	pop    ebp
c000ef16:	c3                   	ret    
c000ef17:	90                   	nop

c000ef18 <EnvVarContainer::__loadSystem()>:
c000ef18:	83 ec 10             	sub    esp,0x10
c000ef1b:	68 00 fc 02 c0       	push   0xc002fc00
c000ef20:	68 44 b5 02 c0       	push   0xc002b544
c000ef25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ef29:	e8 c6 fd ff ff       	call   c000ecf4 <EnvVarContainer::loadFrom(char const*, char const*)>
c000ef2e:	83 c4 1c             	add    esp,0x1c
c000ef31:	c3                   	ret    

c000ef32 <EnvVarContainer::__loadUser()>:
c000ef32:	c3                   	ret    
c000ef33:	90                   	nop

c000ef34 <EnvVarContainer::EnvVarContainer(Process*)>:
c000ef34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ef3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ef49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef4d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ef54:	90                   	nop
c000ef55:	c3                   	ret    

c000ef56 <EnvVarContainer::~EnvVarContainer()>:
c000ef56:	83 ec 0c             	sub    esp,0xc
c000ef59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef60:	85 c0                	test   eax,eax
c000ef62:	74 1d                	je     c000ef81 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ef64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef68:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef6a:	85 c0                	test   eax,eax
c000ef6c:	74 13                	je     c000ef81 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ef6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef75:	83 ec 0c             	sub    esp,0xc
c000ef78:	50                   	push   eax
c000ef79:	e8 89 13 00 00       	call   c0010307 <free>
c000ef7e:	83 c4 10             	add    esp,0x10
c000ef81:	90                   	nop
c000ef82:	83 c4 0c             	add    esp,0xc
c000ef85:	c3                   	ret    

c000ef86 <KeGetEnv(Process*, char const*)>:
c000ef86:	53                   	push   ebx
c000ef87:	83 ec 08             	sub    esp,0x8
c000ef8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef8e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ef92:	39 05 58 63 03 c0    	cmp    DWORD PTR ds:0xc0036358,eax
c000ef98:	74 04                	je     c000ef9e <KeGetEnv(Process*, char const*)+0x18>
c000ef9a:	85 c0                	test   eax,eax
c000ef9c:	75 0b                	jne    c000efa9 <KeGetEnv(Process*, char const*)+0x23>
c000ef9e:	a1 10 61 03 c0       	mov    eax,ds:0xc0036110
c000efa3:	85 c0                	test   eax,eax
c000efa5:	75 19                	jne    c000efc0 <KeGetEnv(Process*, char const*)+0x3a>
c000efa7:	eb 27                	jmp    c000efd0 <KeGetEnv(Process*, char const*)+0x4a>
c000efa9:	52                   	push   edx
c000efaa:	52                   	push   edx
c000efab:	53                   	push   ebx
c000efac:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000efb2:	e8 3b fc ff ff       	call   c000ebf2 <EnvVarContainer::getEnv(char const*)>
c000efb7:	83 c4 10             	add    esp,0x10
c000efba:	85 c0                	test   eax,eax
c000efbc:	75 28                	jne    c000efe6 <KeGetEnv(Process*, char const*)+0x60>
c000efbe:	eb de                	jmp    c000ef9e <KeGetEnv(Process*, char const*)+0x18>
c000efc0:	52                   	push   edx
c000efc1:	52                   	push   edx
c000efc2:	53                   	push   ebx
c000efc3:	50                   	push   eax
c000efc4:	e8 29 fc ff ff       	call   c000ebf2 <EnvVarContainer::getEnv(char const*)>
c000efc9:	83 c4 10             	add    esp,0x10
c000efcc:	85 c0                	test   eax,eax
c000efce:	75 16                	jne    c000efe6 <KeGetEnv(Process*, char const*)+0x60>
c000efd0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000efd4:	a1 14 61 03 c0       	mov    eax,ds:0xc0036114
c000efd9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efdd:	83 c4 08             	add    esp,0x8
c000efe0:	5b                   	pop    ebx
c000efe1:	e9 0c fc ff ff       	jmp    c000ebf2 <EnvVarContainer::getEnv(char const*)>
c000efe6:	83 c4 08             	add    esp,0x8
c000efe9:	5b                   	pop    ebx
c000efea:	c3                   	ret    

c000efeb <KeSetEnvSystem(char const*, char const*)>:
c000efeb:	83 ec 10             	sub    esp,0x10
c000efee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eff2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eff6:	ff 35 14 61 03 c0    	push   DWORD PTR ds:0xc0036114
c000effc:	e8 2f fc ff ff       	call   c000ec30 <EnvVarContainer::setEnv(char const*, char const*)>
c000f001:	83 c4 1c             	add    esp,0x1c
c000f004:	c3                   	ret    

c000f005 <KeSetEnvUser(char const*, char const*)>:
c000f005:	a1 10 61 03 c0       	mov    eax,ds:0xc0036110
c000f00a:	85 c0                	test   eax,eax
c000f00c:	74 15                	je     c000f023 <KeSetEnvUser(char const*, char const*)+0x1e>
c000f00e:	83 ec 10             	sub    esp,0x10
c000f011:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f015:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f019:	50                   	push   eax
c000f01a:	e8 11 fc ff ff       	call   c000ec30 <EnvVarContainer::setEnv(char const*, char const*)>
c000f01f:	83 c4 1c             	add    esp,0x1c
c000f022:	c3                   	ret    
c000f023:	c3                   	ret    

c000f024 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000f024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f028:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000f02e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f032:	e9 f9 fb ff ff       	jmp    c000ec30 <EnvVarContainer::setEnv(char const*, char const*)>

c000f037 <KeDeleteEnvSystem(char const*)>:
c000f037:	c3                   	ret    

c000f038 <KeDeleteEnvUser(char const*)>:
c000f038:	c3                   	ret    

c000f039 <KeDeleteEnvProcess(Process*, char const*)>:
c000f039:	c3                   	ret    

c000f03a <KeNewProcessEnv(Process*)>:
c000f03a:	83 ec 28             	sub    esp,0x28
c000f03d:	6a 0c                	push   0xc
c000f03f:	e8 b3 12 00 00       	call   c00102f7 <malloc>
c000f044:	5a                   	pop    edx
c000f045:	59                   	pop    ecx
c000f046:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f04a:	50                   	push   eax
c000f04b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f04f:	e8 e0 fe ff ff       	call   c000ef34 <EnvVarContainer::EnvVarContainer(Process*)>
c000f054:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f058:	83 c4 2c             	add    esp,0x2c
c000f05b:	c3                   	ret    

c000f05c <KeCopyProcessEnv(Process*, Process*)>:
c000f05c:	57                   	push   edi
c000f05d:	56                   	push   esi
c000f05e:	53                   	push   ebx
c000f05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f063:	83 ec 0c             	sub    esp,0xc
c000f066:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000f06c:	6a 0c                	push   0xc
c000f06e:	e8 84 12 00 00       	call   c00102f7 <malloc>
c000f073:	89 c3                	mov    ebx,eax
c000f075:	58                   	pop    eax
c000f076:	5a                   	pop    edx
c000f077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f07b:	53                   	push   ebx
c000f07c:	e8 b3 fe ff ff       	call   c000ef34 <EnvVarContainer::EnvVarContainer(Process*)>
c000f081:	8b 07                	mov    eax,DWORD PTR [edi]
c000f083:	89 03                	mov    DWORD PTR [ebx],eax
c000f085:	c1 e0 03             	shl    eax,0x3
c000f088:	89 04 24             	mov    DWORD PTR [esp],eax
c000f08b:	e8 67 12 00 00       	call   c00102f7 <malloc>
c000f090:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000f093:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000f095:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000f098:	c1 e1 03             	shl    ecx,0x3
c000f09b:	89 c7                	mov    edi,eax
c000f09d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f09f:	83 c4 10             	add    esp,0x10
c000f0a2:	89 d8                	mov    eax,ebx
c000f0a4:	5b                   	pop    ebx
c000f0a5:	5e                   	pop    esi
c000f0a6:	5f                   	pop    edi
c000f0a7:	c3                   	ret    

c000f0a8 <KeLoadSystemEnv()>:
c000f0a8:	53                   	push   ebx
c000f0a9:	83 ec 14             	sub    esp,0x14
c000f0ac:	6a 0c                	push   0xc
c000f0ae:	e8 44 12 00 00       	call   c00102f7 <malloc>
c000f0b3:	89 c3                	mov    ebx,eax
c000f0b5:	58                   	pop    eax
c000f0b6:	5a                   	pop    edx
c000f0b7:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c000f0bd:	53                   	push   ebx
c000f0be:	e8 71 fe ff ff       	call   c000ef34 <EnvVarContainer::EnvVarContainer(Process*)>
c000f0c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f0c6:	89 1d 14 61 03 c0    	mov    DWORD PTR ds:0xc0036114,ebx
c000f0cc:	e8 47 fe ff ff       	call   c000ef18 <EnvVarContainer::__loadSystem()>
c000f0d1:	83 c4 18             	add    esp,0x18
c000f0d4:	5b                   	pop    ebx
c000f0d5:	c3                   	ret    

c000f0d6 <KeLoadUserEnv()>:
c000f0d6:	53                   	push   ebx
c000f0d7:	83 ec 14             	sub    esp,0x14
c000f0da:	6a 0c                	push   0xc
c000f0dc:	e8 16 12 00 00       	call   c00102f7 <malloc>
c000f0e1:	89 c3                	mov    ebx,eax
c000f0e3:	58                   	pop    eax
c000f0e4:	5a                   	pop    edx
c000f0e5:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c000f0eb:	53                   	push   ebx
c000f0ec:	e8 43 fe ff ff       	call   c000ef34 <EnvVarContainer::EnvVarContainer(Process*)>
c000f0f1:	89 1d 10 61 03 c0    	mov    DWORD PTR ds:0xc0036110,ebx
c000f0f7:	83 c4 18             	add    esp,0x18
c000f0fa:	5b                   	pop    ebx
c000f0fb:	c3                   	ret    

c000f0fc <KeFlushEnv()>:
c000f0fc:	c3                   	ret    

c000f0fd <KeGetProcessTotalEnvCount(Process*)>:
c000f0fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f101:	8b 15 10 61 03 c0    	mov    edx,DWORD PTR ds:0xc0036110
c000f107:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000f10d:	a1 14 61 03 c0       	mov    eax,ds:0xc0036114
c000f112:	8b 00                	mov    eax,DWORD PTR [eax]
c000f114:	03 01                	add    eax,DWORD PTR [ecx]
c000f116:	85 d2                	test   edx,edx
c000f118:	74 02                	je     c000f11c <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000f11a:	03 02                	add    eax,DWORD PTR [edx]
c000f11c:	c3                   	ret    

c000f11d <KeGetProcessEnvPair(Process*, int)>:
c000f11d:	57                   	push   edi
c000f11e:	56                   	push   esi
c000f11f:	8b 35 10 61 03 c0    	mov    esi,DWORD PTR ds:0xc0036110
c000f125:	53                   	push   ebx
c000f126:	85 f6                	test   esi,esi
c000f128:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f12c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f130:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000f136:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f13a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f13c:	75 16                	jne    c000f154 <KeGetProcessEnvPair(Process*, int)+0x37>
c000f13e:	39 c2                	cmp    edx,eax
c000f140:	7c 16                	jl     c000f158 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000f142:	8b 0d 14 61 03 c0    	mov    ecx,DWORD PTR ds:0xc0036114
c000f148:	8b 31                	mov    esi,DWORD PTR [ecx]
c000f14a:	01 c6                	add    esi,eax
c000f14c:	39 d6                	cmp    esi,edx
c000f14e:	7e 3c                	jle    c000f18c <KeGetProcessEnvPair(Process*, int)+0x6f>
c000f150:	29 c2                	sub    edx,eax
c000f152:	eb 04                	jmp    c000f158 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000f154:	39 c2                	cmp    edx,eax
c000f156:	7d 05                	jge    c000f15d <KeGetProcessEnvPair(Process*, int)+0x40>
c000f158:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000f15b:	eb 20                	jmp    c000f17d <KeGetProcessEnvPair(Process*, int)+0x60>
c000f15d:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f15f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000f162:	39 d1                	cmp    ecx,edx
c000f164:	7e 04                	jle    c000f16a <KeGetProcessEnvPair(Process*, int)+0x4d>
c000f166:	29 c2                	sub    edx,eax
c000f168:	eb 10                	jmp    c000f17a <KeGetProcessEnvPair(Process*, int)+0x5d>
c000f16a:	8b 35 14 61 03 c0    	mov    esi,DWORD PTR ds:0xc0036114
c000f170:	03 0e                	add    ecx,DWORD PTR [esi]
c000f172:	39 d1                	cmp    ecx,edx
c000f174:	7e 16                	jle    c000f18c <KeGetProcessEnvPair(Process*, int)+0x6f>
c000f176:	29 c2                	sub    edx,eax
c000f178:	29 fa                	sub    edx,edi
c000f17a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000f17d:	8d 14 d0             	lea    edx,[eax+edx*8]
c000f180:	8b 02                	mov    eax,DWORD PTR [edx]
c000f182:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f185:	89 03                	mov    DWORD PTR [ebx],eax
c000f187:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000f18a:	eb 1d                	jmp    c000f1a9 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000f18c:	83 ec 0c             	sub    esp,0xc
c000f18f:	68 66 b5 02 c0       	push   0xc002b566
c000f194:	e8 b3 15 00 00       	call   c001074c <KePanic(char const*)>
c000f199:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000f19f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000f1a6:	83 c4 10             	add    esp,0x10
c000f1a9:	89 d8                	mov    eax,ebx
c000f1ab:	5b                   	pop    ebx
c000f1ac:	5e                   	pop    esi
c000f1ad:	5f                   	pop    edi
c000f1ae:	c2 04 00             	ret    0x4
c000f1b1:	66 90                	xchg   ax,ax
c000f1b3:	90                   	nop

c000f1b4 <KeDisplayProgramFault(char const*)>:
c000f1b4:	83 ec 0c             	sub    esp,0xc
c000f1b7:	83 ec 0c             	sub    esp,0xc
c000f1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1be:	e8 b9 7d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000f1c3:	83 c4 10             	add    esp,0x10
c000f1c6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000f1cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f1d0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000f1d6:	85 c0                	test   eax,eax
c000f1d8:	74 22                	je     c000f1fc <KeDisplayProgramFault(char const*)+0x48>
c000f1da:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000f1df:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f1e4:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000f1ea:	6a 04                	push   0x4
c000f1ec:	6a 0f                	push   0xf
c000f1ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f1f2:	50                   	push   eax
c000f1f3:	e8 32 3f 00 00       	call   c001312a <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f1f8:	83 c4 10             	add    esp,0x10
c000f1fb:	90                   	nop
c000f1fc:	90                   	nop
c000f1fd:	83 c4 0c             	add    esp,0xc
c000f200:	c3                   	ret    
c000f201:	8d 76 00             	lea    esi,[esi+0x0]

c000f204 <KeGeneralProtectionFault(void*, void*)>:
c000f204:	83 ec 0c             	sub    esp,0xc
c000f207:	83 ec 08             	sub    esp,0x8
c000f20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f212:	e8 54 b9 00 00       	call   c001ab6b <HalHandleGeneralProtectionFault(void*, void*)>
c000f217:	83 c4 10             	add    esp,0x10
c000f21a:	0f b6 c0             	movzx  eax,al
c000f21d:	85 c0                	test   eax,eax
c000f21f:	75 2f                	jne    c000f250 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000f221:	83 ec 0c             	sub    esp,0xc
c000f224:	68 80 b5 02 c0       	push   0xc002b580
c000f229:	e8 86 ff ff ff       	call   c000f1b4 <KeDisplayProgramFault(char const*)>
c000f22e:	83 c4 10             	add    esp,0x10
c000f231:	83 ec 0c             	sub    esp,0xc
c000f234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f238:	e8 a7 ba 00 00       	call   c001ace4 <HalDisplayDebugInfo(void*)>
c000f23d:	83 c4 10             	add    esp,0x10
c000f240:	83 ec 0c             	sub    esp,0xc
c000f243:	6a 7e                	push   0x7e
c000f245:	e8 9a 88 00 00       	call   c0017ae4 <KeTerminateCurrentThread(int)>
c000f24a:	83 c4 10             	add    esp,0x10
c000f24d:	eb 05                	jmp    c000f254 <KeGeneralProtectionFault(void*, void*)+0x50>
c000f24f:	90                   	nop
c000f250:	90                   	nop
c000f251:	8d 76 00             	lea    esi,[esi+0x0]
c000f254:	83 c4 0c             	add    esp,0xc
c000f257:	c3                   	ret    

c000f258 <KePageFault(void*, void*)>:
c000f258:	83 ec 0c             	sub    esp,0xc
c000f25b:	83 ec 08             	sub    esp,0x8
c000f25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f266:	e8 08 ba 00 00       	call   c001ac73 <HalHandlePageFault(void*, void*)>
c000f26b:	83 c4 10             	add    esp,0x10
c000f26e:	0f b6 c0             	movzx  eax,al
c000f271:	85 c0                	test   eax,eax
c000f273:	75 2f                	jne    c000f2a4 <KePageFault(void*, void*)+0x4c>
c000f275:	83 ec 0c             	sub    esp,0xc
c000f278:	68 99 b5 02 c0       	push   0xc002b599
c000f27d:	e8 32 ff ff ff       	call   c000f1b4 <KeDisplayProgramFault(char const*)>
c000f282:	83 c4 10             	add    esp,0x10
c000f285:	83 ec 0c             	sub    esp,0xc
c000f288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f28c:	e8 53 ba 00 00       	call   c001ace4 <HalDisplayDebugInfo(void*)>
c000f291:	83 c4 10             	add    esp,0x10
c000f294:	83 ec 0c             	sub    esp,0xc
c000f297:	6a 7f                	push   0x7f
c000f299:	e8 46 88 00 00       	call   c0017ae4 <KeTerminateCurrentThread(int)>
c000f29e:	83 c4 10             	add    esp,0x10
c000f2a1:	eb 05                	jmp    c000f2a8 <KePageFault(void*, void*)+0x50>
c000f2a3:	90                   	nop
c000f2a4:	90                   	nop
c000f2a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2a8:	83 c4 0c             	add    esp,0xc
c000f2ab:	c3                   	ret    

c000f2ac <KeOpcodeFault(void*, void*)>:
c000f2ac:	83 ec 0c             	sub    esp,0xc
c000f2af:	83 ec 08             	sub    esp,0x8
c000f2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2ba:	e8 e3 b9 00 00       	call   c001aca2 <HalHandleOpcodeFault(void*, void*)>
c000f2bf:	83 c4 10             	add    esp,0x10
c000f2c2:	0f b6 c0             	movzx  eax,al
c000f2c5:	85 c0                	test   eax,eax
c000f2c7:	75 2f                	jne    c000f2f8 <KeOpcodeFault(void*, void*)+0x4c>
c000f2c9:	83 ec 0c             	sub    esp,0xc
c000f2cc:	68 a4 b5 02 c0       	push   0xc002b5a4
c000f2d1:	e8 de fe ff ff       	call   c000f1b4 <KeDisplayProgramFault(char const*)>
c000f2d6:	83 c4 10             	add    esp,0x10
c000f2d9:	83 ec 0c             	sub    esp,0xc
c000f2dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2e0:	e8 ff b9 00 00       	call   c001ace4 <HalDisplayDebugInfo(void*)>
c000f2e5:	83 c4 10             	add    esp,0x10
c000f2e8:	83 ec 0c             	sub    esp,0xc
c000f2eb:	6a 7c                	push   0x7c
c000f2ed:	e8 f2 87 00 00       	call   c0017ae4 <KeTerminateCurrentThread(int)>
c000f2f2:	83 c4 10             	add    esp,0x10
c000f2f5:	eb 05                	jmp    c000f2fc <KeOpcodeFault(void*, void*)+0x50>
c000f2f7:	90                   	nop
c000f2f8:	90                   	nop
c000f2f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f2fc:	83 c4 0c             	add    esp,0xc
c000f2ff:	c3                   	ret    

c000f300 <KeOtherFault(void*, void*)>:
c000f300:	83 ec 0c             	sub    esp,0xc
c000f303:	83 ec 0c             	sub    esp,0xc
c000f306:	68 c0 b5 02 c0       	push   0xc002b5c0
c000f30b:	e8 a4 fe ff ff       	call   c000f1b4 <KeDisplayProgramFault(char const*)>
c000f310:	83 c4 10             	add    esp,0x10
c000f313:	83 ec 0c             	sub    esp,0xc
c000f316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f31a:	e8 c5 b9 00 00       	call   c001ace4 <HalDisplayDebugInfo(void*)>
c000f31f:	83 c4 10             	add    esp,0x10
c000f322:	83 ec 0c             	sub    esp,0xc
c000f325:	6a 7d                	push   0x7d
c000f327:	e8 b8 87 00 00       	call   c0017ae4 <KeTerminateCurrentThread(int)>
c000f32c:	83 c4 10             	add    esp,0x10
c000f32f:	90                   	nop
c000f330:	83 c4 0c             	add    esp,0xc
c000f333:	c3                   	ret    

c000f334 <KeNonMaskableInterrupt(void*, void*)>:
c000f334:	83 ec 0c             	sub    esp,0xc
c000f337:	e8 36 bd 00 00       	call   c001b072 <HalReceivedNMI()>
c000f33c:	90                   	nop
c000f33d:	83 c4 0c             	add    esp,0xc
c000f340:	c3                   	ret    
c000f341:	8d 76 00             	lea    esi,[esi+0x0]

c000f344 <KeDoubleFault(void*, void*)>:
c000f344:	83 ec 0c             	sub    esp,0xc
c000f347:	83 ec 0c             	sub    esp,0xc
c000f34a:	68 b1 b5 02 c0       	push   0xc002b5b1
c000f34f:	e8 f8 13 00 00       	call   c001074c <KePanic(char const*)>
c000f354:	83 c4 10             	add    esp,0x10
c000f357:	90                   	nop
c000f358:	83 c4 0c             	add    esp,0xc
c000f35b:	c3                   	ret    

c000f35c <GDTEntry::setBase(unsigned int)>:
c000f35c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f360:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f364:	89 c1                	mov    ecx,eax
c000f366:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f36a:	c1 e9 10             	shr    ecx,0x10
c000f36d:	c1 e8 18             	shr    eax,0x18
c000f370:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f373:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f376:	c3                   	ret    
c000f377:	90                   	nop

c000f378 <GDTEntry::setLimit(unsigned int)>:
c000f378:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f37c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f380:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f383:	66 89 01             	mov    WORD PTR [ecx],ax
c000f386:	83 e2 f0             	and    edx,0xfffffff0
c000f389:	c1 e8 10             	shr    eax,0x10
c000f38c:	83 e0 0f             	and    eax,0xf
c000f38f:	09 d0                	or     eax,edx
c000f391:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f394:	c3                   	ret    
c000f395:	90                   	nop

c000f396 <GDT::GDT()>:
c000f396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f39a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f3aa:	90                   	nop
c000f3ab:	c3                   	ret    

c000f3ac <GDT::addEntry(GDTEntry)>:
c000f3ac:	53                   	push   ebx
c000f3ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f3b5:	8b 02                	mov    eax,DWORD PTR [edx]
c000f3b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f3bb:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000f3bf:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000f3c3:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3c6:	c1 e0 03             	shl    eax,0x3
c000f3c9:	89 0a                	mov    DWORD PTR [edx],ecx
c000f3cb:	5b                   	pop    ebx
c000f3cc:	c3                   	ret    
c000f3cd:	90                   	nop

c000f3ce <GDT::getNumberOfEntries()>:
c000f3ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3d4:	c3                   	ret    
c000f3d5:	90                   	nop

c000f3d6 <GDT::flush()>:
c000f3d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3da:	8b 10                	mov    edx,DWORD PTR [eax]
c000f3dc:	83 c0 04             	add    eax,0x4
c000f3df:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f3e6:	a3 1a 61 03 c0       	mov    ds:0xc003611a,eax
c000f3eb:	66 89 15 18 61 03 c0 	mov    WORD PTR ds:0xc0036118,dx
c000f3f2:	e9 63 0f ff ff       	jmp    c000035a <loadGDT>
c000f3f7:	90                   	nop

c000f3f8 <GDT::setup()>:
c000f3f8:	57                   	push   edi
c000f3f9:	56                   	push   esi
c000f3fa:	53                   	push   ebx
c000f3fb:	83 ec 30             	sub    esp,0x30
c000f3fe:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000f402:	6a 00                	push   0x0
c000f404:	8d 74 24 14          	lea    esi,[esp+0x14]
c000f408:	56                   	push   esi
c000f409:	e8 4e ff ff ff       	call   c000f35c <GDTEntry::setBase(unsigned int)>
c000f40e:	6a 00                	push   0x0
c000f410:	56                   	push   esi
c000f411:	e8 62 ff ff ff       	call   c000f378 <GDTEntry::setLimit(unsigned int)>
c000f416:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000f41e:	6a 00                	push   0x0
c000f420:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f424:	56                   	push   esi
c000f425:	e8 32 ff ff ff       	call   c000f35c <GDTEntry::setBase(unsigned int)>
c000f42a:	68 ff ff ff 00       	push   0xffffff
c000f42f:	56                   	push   esi
c000f430:	e8 43 ff ff ff       	call   c000f378 <GDTEntry::setLimit(unsigned int)>
c000f435:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f439:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f43d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f441:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000f445:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f44a:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f44f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f453:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f457:	89 f8                	mov    eax,edi
c000f459:	89 fa                	mov    edx,edi
c000f45b:	80 e4 f7             	and    ah,0xf7
c000f45e:	80 ce 60             	or     dh,0x60
c000f461:	89 c7                	mov    edi,eax
c000f463:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000f467:	80 cc 60             	or     ah,0x60
c000f46a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f46e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f472:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f476:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f47a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f47e:	83 c4 20             	add    esp,0x20
c000f481:	6a 00                	push   0x0
c000f483:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f487:	50                   	push   eax
c000f488:	e8 cf fe ff ff       	call   c000f35c <GDTEntry::setBase(unsigned int)>
c000f48d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000f491:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000f495:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000f499:	83 e0 3f             	and    eax,0x3f
c000f49c:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000f4a0:	6a 00                	push   0x0
c000f4a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c000f4a6:	50                   	push   eax
c000f4a7:	e8 b0 fe ff ff       	call   c000f35c <GDTEntry::setBase(unsigned int)>
c000f4ac:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000f4b0:	83 e0 3f             	and    eax,0x3f
c000f4b3:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000f4b7:	83 c4 0c             	add    esp,0xc
c000f4ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4c2:	53                   	push   ebx
c000f4c3:	e8 e4 fe ff ff       	call   c000f3ac <GDT::addEntry(GDTEntry)>
c000f4c8:	83 c4 0c             	add    esp,0xc
c000f4cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f4cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f4d3:	53                   	push   ebx
c000f4d4:	e8 d3 fe ff ff       	call   c000f3ac <GDT::addEntry(GDTEntry)>
c000f4d9:	83 c4 0c             	add    esp,0xc
c000f4dc:	57                   	push   edi
c000f4dd:	56                   	push   esi
c000f4de:	53                   	push   ebx
c000f4df:	e8 c8 fe ff ff       	call   c000f3ac <GDT::addEntry(GDTEntry)>
c000f4e4:	83 c4 0c             	add    esp,0xc
c000f4e7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f4eb:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f4ef:	53                   	push   ebx
c000f4f0:	e8 b7 fe ff ff       	call   c000f3ac <GDT::addEntry(GDTEntry)>
c000f4f5:	83 c4 0c             	add    esp,0xc
c000f4f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f4fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f500:	53                   	push   ebx
c000f501:	e8 a6 fe ff ff       	call   c000f3ac <GDT::addEntry(GDTEntry)>
c000f506:	83 c4 0c             	add    esp,0xc
c000f509:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f50d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f511:	53                   	push   ebx
c000f512:	e8 95 fe ff ff       	call   c000f3ac <GDT::addEntry(GDTEntry)>
c000f517:	83 c4 0c             	add    esp,0xc
c000f51a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f51e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f522:	53                   	push   ebx
c000f523:	e8 84 fe ff ff       	call   c000f3ac <GDT::addEntry(GDTEntry)>
c000f528:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f52b:	e8 a6 fe ff ff       	call   c000f3d6 <GDT::flush()>
c000f530:	83 c4 40             	add    esp,0x40
c000f533:	5b                   	pop    ebx
c000f534:	5e                   	pop    esi
c000f535:	5f                   	pop    edi
c000f536:	c3                   	ret    

c000f537 <idleFunction(void*)>:
c000f537:	83 ec 0c             	sub    esp,0xc
c000f53a:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c000f541:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c000f548:	75 01                	jne    c000f54b <idleFunction(void*)+0x14>
c000f54a:	fb                   	sti    
c000f54b:	e8 bd bb 00 00       	call   c001b10d <HalSystemIdle()>
c000f550:	e8 d5 9d 01 00       	call   c002932a <idleCommon()>
c000f555:	eb f4                	jmp    c000f54b <idleFunction(void*)+0x14>
c000f557:	90                   	nop

c000f558 <IDTEntry::IDTEntry(bool)>:
c000f558:	53                   	push   ebx
c000f559:	83 ec 04             	sub    esp,0x4
c000f55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f560:	88 04 24             	mov    BYTE PTR [esp],al
c000f563:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f567:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f56d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f571:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f575:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f579:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f57c:	83 e2 f0             	and    edx,0xfffffff0
c000f57f:	83 ca 0e             	or     edx,0xe
c000f582:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f585:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f589:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f58c:	83 e2 ef             	and    edx,0xffffffef
c000f58f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f592:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000f596:	85 c0                	test   eax,eax
c000f598:	74 06                	je     c000f5a0 <IDTEntry::IDTEntry(bool)+0x48>
c000f59a:	b2 03                	mov    dl,0x3
c000f59c:	eb 06                	jmp    c000f5a4 <IDTEntry::IDTEntry(bool)+0x4c>
c000f59e:	66 90                	xchg   ax,ax
c000f5a0:	b2 00                	mov    dl,0x0
c000f5a2:	66 90                	xchg   ax,ax
c000f5a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5a8:	83 e2 03             	and    edx,0x3
c000f5ab:	89 d3                	mov    ebx,edx
c000f5ad:	c1 e3 05             	shl    ebx,0x5
c000f5b0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f5b3:	83 e2 9f             	and    edx,0xffffff9f
c000f5b6:	88 d1                	mov    cl,dl
c000f5b8:	88 da                	mov    dl,bl
c000f5ba:	09 ca                	or     edx,ecx
c000f5bc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f5bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5c3:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f5c6:	83 ca 80             	or     edx,0xffffff80
c000f5c9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f5cc:	90                   	nop
c000f5cd:	83 c4 04             	add    esp,0x4
c000f5d0:	5b                   	pop    ebx
c000f5d1:	c3                   	ret    

c000f5d2 <IDTEntry::setOffset(unsigned int)>:
c000f5d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f5d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5da:	66 89 02             	mov    WORD PTR [edx],ax
c000f5dd:	c1 e8 10             	shr    eax,0x10
c000f5e0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f5e4:	c3                   	ret    
c000f5e5:	90                   	nop
c000f5e6:	66 90                	xchg   ax,ax

c000f5e8 <IDT::IDT()>:
c000f5e8:	90                   	nop
c000f5e9:	c3                   	ret    

c000f5ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f5ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5ee:	83 c0 30             	add    eax,0x30
c000f5f1:	c3                   	ret    

c000f5f2 <IDT::addEntry(IDTEntry, int)>:
c000f5f2:	53                   	push   ebx
c000f5f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f5fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f5ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f603:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f606:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f60a:	5b                   	pop    ebx
c000f60b:	c3                   	ret    

c000f60c <IDT::addEntry(int, void (*)(), bool)>:
c000f60c:	53                   	push   ebx
c000f60d:	83 ec 10             	sub    esp,0x10
c000f610:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f615:	50                   	push   eax
c000f616:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f61a:	53                   	push   ebx
c000f61b:	e8 38 ff ff ff       	call   c000f558 <IDTEntry::IDTEntry(bool)>
c000f620:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f624:	53                   	push   ebx
c000f625:	e8 a8 ff ff ff       	call   c000f5d2 <IDTEntry::setOffset(unsigned int)>
c000f62a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f62e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f632:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f636:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f63a:	e8 b3 ff ff ff       	call   c000f5f2 <IDT::addEntry(IDTEntry, int)>
c000f63f:	83 c4 30             	add    esp,0x30
c000f642:	5b                   	pop    ebx
c000f643:	c3                   	ret    

c000f644 <IDT::flush()>:
c000f644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f648:	66 c7 05 20 61 03 c0 ff 07 	mov    WORD PTR ds:0xc0036120,0x7ff
c000f651:	a3 22 61 03 c0       	mov    ds:0xc0036122,eax
c000f656:	0f 01 1d 20 61 03 c0 	lidtd  ds:0xc0036120
c000f65d:	c3                   	ret    

c000f65e <IDT::setup()>:
c000f65e:	57                   	push   edi
c000f65f:	56                   	push   esi
c000f660:	53                   	push   ebx
c000f661:	83 ec 10             	sub    esp,0x10
c000f664:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f668:	6a 00                	push   0x0
c000f66a:	68 40 3e 02 c0       	push   0xc0023e40
c000f66f:	6a 00                	push   0x0
c000f671:	53                   	push   ebx
c000f672:	e8 95 ff ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f677:	6a 00                	push   0x0
c000f679:	68 50 3e 02 c0       	push   0xc0023e50
c000f67e:	6a 01                	push   0x1
c000f680:	53                   	push   ebx
c000f681:	e8 86 ff ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f686:	83 c4 20             	add    esp,0x20
c000f689:	6a 00                	push   0x0
c000f68b:	68 5a 3e 02 c0       	push   0xc0023e5a
c000f690:	6a 02                	push   0x2
c000f692:	53                   	push   ebx
c000f693:	e8 74 ff ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f698:	6a 00                	push   0x0
c000f69a:	68 64 3e 02 c0       	push   0xc0023e64
c000f69f:	6a 03                	push   0x3
c000f6a1:	53                   	push   ebx
c000f6a2:	e8 65 ff ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f6a7:	83 c4 20             	add    esp,0x20
c000f6aa:	6a 00                	push   0x0
c000f6ac:	68 6e 3e 02 c0       	push   0xc0023e6e
c000f6b1:	6a 04                	push   0x4
c000f6b3:	53                   	push   ebx
c000f6b4:	e8 53 ff ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f6b9:	6a 00                	push   0x0
c000f6bb:	68 78 3e 02 c0       	push   0xc0023e78
c000f6c0:	6a 05                	push   0x5
c000f6c2:	53                   	push   ebx
c000f6c3:	e8 44 ff ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f6c8:	83 c4 20             	add    esp,0x20
c000f6cb:	6a 00                	push   0x0
c000f6cd:	68 82 3e 02 c0       	push   0xc0023e82
c000f6d2:	6a 06                	push   0x6
c000f6d4:	53                   	push   ebx
c000f6d5:	e8 32 ff ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f6da:	6a 00                	push   0x0
c000f6dc:	68 8c 3e 02 c0       	push   0xc0023e8c
c000f6e1:	6a 07                	push   0x7
c000f6e3:	53                   	push   ebx
c000f6e4:	e8 23 ff ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f6e9:	83 c4 20             	add    esp,0x20
c000f6ec:	6a 00                	push   0x0
c000f6ee:	68 96 3e 02 c0       	push   0xc0023e96
c000f6f3:	6a 08                	push   0x8
c000f6f5:	53                   	push   ebx
c000f6f6:	e8 11 ff ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f6fb:	6a 00                	push   0x0
c000f6fd:	68 9e 3e 02 c0       	push   0xc0023e9e
c000f702:	6a 09                	push   0x9
c000f704:	53                   	push   ebx
c000f705:	e8 02 ff ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f70a:	83 c4 20             	add    esp,0x20
c000f70d:	6a 00                	push   0x0
c000f70f:	68 a8 3e 02 c0       	push   0xc0023ea8
c000f714:	6a 0a                	push   0xa
c000f716:	53                   	push   ebx
c000f717:	e8 f0 fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f71c:	6a 00                	push   0x0
c000f71e:	68 b0 3e 02 c0       	push   0xc0023eb0
c000f723:	6a 0b                	push   0xb
c000f725:	53                   	push   ebx
c000f726:	e8 e1 fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f72b:	83 c4 20             	add    esp,0x20
c000f72e:	6a 00                	push   0x0
c000f730:	68 b8 3e 02 c0       	push   0xc0023eb8
c000f735:	6a 0c                	push   0xc
c000f737:	53                   	push   ebx
c000f738:	e8 cf fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f73d:	6a 00                	push   0x0
c000f73f:	68 c0 3e 02 c0       	push   0xc0023ec0
c000f744:	6a 0d                	push   0xd
c000f746:	53                   	push   ebx
c000f747:	e8 c0 fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f74c:	83 c4 20             	add    esp,0x20
c000f74f:	6a 00                	push   0x0
c000f751:	68 da 3e 02 c0       	push   0xc0023eda
c000f756:	6a 0e                	push   0xe
c000f758:	53                   	push   ebx
c000f759:	e8 ae fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f75e:	6a 00                	push   0x0
c000f760:	68 e2 3e 02 c0       	push   0xc0023ee2
c000f765:	6a 0f                	push   0xf
c000f767:	53                   	push   ebx
c000f768:	e8 9f fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f76d:	83 c4 20             	add    esp,0x20
c000f770:	6a 00                	push   0x0
c000f772:	68 ec 3e 02 c0       	push   0xc0023eec
c000f777:	6a 10                	push   0x10
c000f779:	53                   	push   ebx
c000f77a:	e8 8d fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f77f:	6a 00                	push   0x0
c000f781:	68 f6 3e 02 c0       	push   0xc0023ef6
c000f786:	6a 11                	push   0x11
c000f788:	53                   	push   ebx
c000f789:	e8 7e fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f78e:	83 c4 20             	add    esp,0x20
c000f791:	6a 00                	push   0x0
c000f793:	68 00 3f 02 c0       	push   0xc0023f00
c000f798:	6a 12                	push   0x12
c000f79a:	53                   	push   ebx
c000f79b:	e8 6c fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f7a0:	6a 01                	push   0x1
c000f7a2:	68 9a 3f 02 c0       	push   0xc0023f9a
c000f7a7:	6a 60                	push   0x60
c000f7a9:	53                   	push   ebx
c000f7aa:	e8 5d fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f7af:	83 c4 20             	add    esp,0x20
c000f7b2:	6a 00                	push   0x0
c000f7b4:	68 a1 3f 02 c0       	push   0xc0023fa1
c000f7b9:	6a 20                	push   0x20
c000f7bb:	53                   	push   ebx
c000f7bc:	e8 4b fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f7c1:	6a 00                	push   0x0
c000f7c3:	68 8c 3f 02 c0       	push   0xc0023f8c
c000f7c8:	6a 21                	push   0x21
c000f7ca:	53                   	push   ebx
c000f7cb:	e8 3c fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f7d0:	83 c4 20             	add    esp,0x20
c000f7d3:	6a 00                	push   0x0
c000f7d5:	68 93 3f 02 c0       	push   0xc0023f93
c000f7da:	6a 22                	push   0x22
c000f7dc:	53                   	push   ebx
c000f7dd:	e8 2a fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f7e2:	6a 00                	push   0x0
c000f7e4:	68 0a 3f 02 c0       	push   0xc0023f0a
c000f7e9:	6a 23                	push   0x23
c000f7eb:	53                   	push   ebx
c000f7ec:	e8 1b fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f7f1:	83 c4 20             	add    esp,0x20
c000f7f4:	6a 00                	push   0x0
c000f7f6:	68 14 3f 02 c0       	push   0xc0023f14
c000f7fb:	6a 24                	push   0x24
c000f7fd:	53                   	push   ebx
c000f7fe:	e8 09 fe ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f803:	6a 00                	push   0x0
c000f805:	68 1e 3f 02 c0       	push   0xc0023f1e
c000f80a:	6a 25                	push   0x25
c000f80c:	53                   	push   ebx
c000f80d:	e8 fa fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f812:	83 c4 20             	add    esp,0x20
c000f815:	6a 00                	push   0x0
c000f817:	68 28 3f 02 c0       	push   0xc0023f28
c000f81c:	6a 26                	push   0x26
c000f81e:	53                   	push   ebx
c000f81f:	e8 e8 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f824:	6a 00                	push   0x0
c000f826:	68 32 3f 02 c0       	push   0xc0023f32
c000f82b:	6a 27                	push   0x27
c000f82d:	53                   	push   ebx
c000f82e:	e8 d9 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f833:	83 c4 20             	add    esp,0x20
c000f836:	6a 00                	push   0x0
c000f838:	68 3c 3f 02 c0       	push   0xc0023f3c
c000f83d:	6a 28                	push   0x28
c000f83f:	53                   	push   ebx
c000f840:	e8 c7 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f845:	6a 00                	push   0x0
c000f847:	68 46 3f 02 c0       	push   0xc0023f46
c000f84c:	6a 29                	push   0x29
c000f84e:	53                   	push   ebx
c000f84f:	e8 b8 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f854:	83 c4 20             	add    esp,0x20
c000f857:	6a 00                	push   0x0
c000f859:	68 50 3f 02 c0       	push   0xc0023f50
c000f85e:	6a 2a                	push   0x2a
c000f860:	53                   	push   ebx
c000f861:	e8 a6 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f866:	6a 00                	push   0x0
c000f868:	68 5a 3f 02 c0       	push   0xc0023f5a
c000f86d:	6a 2b                	push   0x2b
c000f86f:	53                   	push   ebx
c000f870:	e8 97 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f875:	83 c4 20             	add    esp,0x20
c000f878:	6a 00                	push   0x0
c000f87a:	68 64 3f 02 c0       	push   0xc0023f64
c000f87f:	6a 2c                	push   0x2c
c000f881:	53                   	push   ebx
c000f882:	e8 85 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f887:	6a 00                	push   0x0
c000f889:	68 6e 3f 02 c0       	push   0xc0023f6e
c000f88e:	6a 2d                	push   0x2d
c000f890:	53                   	push   ebx
c000f891:	e8 76 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f896:	83 c4 20             	add    esp,0x20
c000f899:	6a 00                	push   0x0
c000f89b:	68 78 3f 02 c0       	push   0xc0023f78
c000f8a0:	6a 2e                	push   0x2e
c000f8a2:	53                   	push   ebx
c000f8a3:	e8 64 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f8a8:	6a 00                	push   0x0
c000f8aa:	68 82 3f 02 c0       	push   0xc0023f82
c000f8af:	6a 2f                	push   0x2f
c000f8b1:	53                   	push   ebx
c000f8b2:	e8 55 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f8b7:	83 c4 20             	add    esp,0x20
c000f8ba:	6a 00                	push   0x0
c000f8bc:	68 a8 40 02 c0       	push   0xc00240a8
c000f8c1:	6a 30                	push   0x30
c000f8c3:	53                   	push   ebx
c000f8c4:	e8 43 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f8c9:	6a 00                	push   0x0
c000f8cb:	68 b2 40 02 c0       	push   0xc00240b2
c000f8d0:	6a 31                	push   0x31
c000f8d2:	53                   	push   ebx
c000f8d3:	e8 34 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f8d8:	83 c4 20             	add    esp,0x20
c000f8db:	6a 00                	push   0x0
c000f8dd:	68 bc 40 02 c0       	push   0xc00240bc
c000f8e2:	6a 32                	push   0x32
c000f8e4:	53                   	push   ebx
c000f8e5:	e8 22 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f8ea:	6a 00                	push   0x0
c000f8ec:	68 c6 40 02 c0       	push   0xc00240c6
c000f8f1:	6a 33                	push   0x33
c000f8f3:	53                   	push   ebx
c000f8f4:	e8 13 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f8f9:	83 c4 20             	add    esp,0x20
c000f8fc:	6a 00                	push   0x0
c000f8fe:	68 d0 40 02 c0       	push   0xc00240d0
c000f903:	6a 34                	push   0x34
c000f905:	53                   	push   ebx
c000f906:	e8 01 fd ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f90b:	6a 00                	push   0x0
c000f90d:	68 da 40 02 c0       	push   0xc00240da
c000f912:	6a 35                	push   0x35
c000f914:	53                   	push   ebx
c000f915:	e8 f2 fc ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f91a:	83 c4 20             	add    esp,0x20
c000f91d:	6a 00                	push   0x0
c000f91f:	68 e4 40 02 c0       	push   0xc00240e4
c000f924:	6a 36                	push   0x36
c000f926:	53                   	push   ebx
c000f927:	e8 e0 fc ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f92c:	6a 00                	push   0x0
c000f92e:	68 ee 40 02 c0       	push   0xc00240ee
c000f933:	6a 37                	push   0x37
c000f935:	53                   	push   ebx
c000f936:	e8 d1 fc ff ff       	call   c000f60c <IDT::addEntry(int, void (*)(), bool)>
c000f93b:	83 c4 1c             	add    esp,0x1c
c000f93e:	6a 03                	push   0x3
c000f940:	6a 02                	push   0x2
c000f942:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c000f948:	e8 7d 4b 00 00       	call   c00144ca <VAS::allocatePages(int, int)>
c000f94d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f954:	89 c6                	mov    esi,eax
c000f956:	e8 9c 09 00 00       	call   c00102f7 <malloc>
c000f95b:	81 c6 00 20 00 00    	add    esi,0x2000
c000f961:	89 04 24             	mov    DWORD PTR [esp],eax
c000f964:	89 c7                	mov    edi,eax
c000f966:	e8 29 3c 00 00       	call   c0013594 <TSS::TSS()>
c000f96b:	83 c4 0c             	add    esp,0xc
c000f96e:	68 96 3e 02 c0       	push   0xc0023e96
c000f973:	56                   	push   esi
c000f974:	57                   	push   edi
c000f975:	e8 5e 3c 00 00       	call   c00135d8 <TSS::setup(unsigned long, unsigned long)>
c000f97a:	89 c6                	mov    esi,eax
c000f97c:	58                   	pop    eax
c000f97d:	5a                   	pop    edx
c000f97e:	6a 00                	push   0x0
c000f980:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f984:	50                   	push   eax
c000f985:	e8 ce fb ff ff       	call   c000f558 <IDTEntry::IDTEntry(bool)>
c000f98a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f98e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f993:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f99a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f9a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f9a4:	80 ce 05             	or     dh,0x5
c000f9a7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f9aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f9b2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f9b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9b8:	e8 87 fc ff ff       	call   c000f644 <IDT::flush()>
c000f9bd:	83 c4 20             	add    esp,0x20
c000f9c0:	5b                   	pop    ebx
c000f9c1:	5e                   	pop    esi
c000f9c2:	5f                   	pop    edi
c000f9c3:	c3                   	ret    

c000f9c4 <CPU::current()>:
c000f9c4:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c000f9c9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000f9cf:	c3                   	ret    

c000f9d0 <operator new(unsigned long)>:
c000f9d0:	e9 22 09 00 00       	jmp    c00102f7 <malloc>

c000f9d5 <operator delete(void*)>:
c000f9d5:	e9 3d 09 00 00       	jmp    c0010317 <rfree>

c000f9da <disableIRQs()>:
c000f9da:	fa                   	cli    
c000f9db:	c3                   	ret    

c000f9dc <enableIRQs()>:
c000f9dc:	fb                   	sti    
c000f9dd:	c3                   	ret    

c000f9de <lockScheduler()>:
c000f9de:	fa                   	cli    
c000f9df:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c000f9e5:	c3                   	ret    

c000f9e6 <unlockScheduler()>:
c000f9e6:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c000f9ed:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c000f9f4:	75 01                	jne    c000f9f7 <unlockScheduler()+0x11>
c000f9f6:	fb                   	sti    
c000f9f7:	c3                   	ret    

c000f9f8 <lockStuff()>:
c000f9f8:	fa                   	cli    
c000f9f9:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c000f9ff:	ff 05 2c 63 03 c0    	inc    DWORD PTR ds:0xc003632c
c000fa05:	c3                   	ret    

c000fa06 <unlockStuff()>:
c000fa06:	83 ec 0c             	sub    esp,0xc
c000fa09:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c000fa0e:	48                   	dec    eax
c000fa0f:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c000fa14:	75 18                	jne    c000fa2e <unlockStuff()+0x28>
c000fa16:	83 3d 28 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036328,0x0
c000fa1d:	74 0f                	je     c000fa2e <unlockStuff()+0x28>
c000fa1f:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c000fa29:	e8 b6 78 00 00       	call   c00172e4 <schedule()>
c000fa2e:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c000fa35:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c000fa3c:	75 01                	jne    c000fa3f <unlockStuff()+0x39>
c000fa3e:	fb                   	sti    
c000fa3f:	83 c4 0c             	add    esp,0xc
c000fa42:	c3                   	ret    

c000fa43 <Virt::getAKernelVAS()>:
c000fa43:	a1 90 62 03 c0       	mov    eax,ds:0xc0036290
c000fa48:	c3                   	ret    

c000fa49 <__not_memcpy>:
c000fa49:	57                   	push   edi
c000fa4a:	56                   	push   esi
c000fa4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa53:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fa57:	89 c7                	mov    edi,eax
c000fa59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa5b:	5e                   	pop    esi
c000fa5c:	5f                   	pop    edi
c000fa5d:	c3                   	ret    

c000fa5e <KeFormatDate(char*, int, int, int, int, bool)>:
c000fa5e:	55                   	push   ebp
c000fa5f:	b9 0a 00 00 00       	mov    ecx,0xa
c000fa64:	57                   	push   edi
c000fa65:	56                   	push   esi
c000fa66:	53                   	push   ebx
c000fa67:	bb e8 03 00 00       	mov    ebx,0x3e8
c000fa6c:	81 ec ac 00 00 00    	sub    esp,0xac
c000fa72:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000fa79:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000fa7e:	99                   	cdq    
c000fa7f:	f7 f9                	idiv   ecx
c000fa81:	89 d5                	mov    ebp,edx
c000fa83:	99                   	cdq    
c000fa84:	f7 f9                	idiv   ecx
c000fa86:	8d 42 30             	lea    eax,[edx+0x30]
c000fa89:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa8d:	8d 45 30             	lea    eax,[ebp+0x30]
c000fa90:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000fa94:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000fa9b:	99                   	cdq    
c000fa9c:	f7 fb                	idiv   ebx
c000fa9e:	bb 64 00 00 00       	mov    ebx,0x64
c000faa3:	99                   	cdq    
c000faa4:	f7 f9                	idiv   ecx
c000faa6:	8d 42 30             	lea    eax,[edx+0x30]
c000faa9:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000faad:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000fab4:	99                   	cdq    
c000fab5:	f7 fb                	idiv   ebx
c000fab7:	31 db                	xor    ebx,ebx
c000fab9:	99                   	cdq    
c000faba:	f7 f9                	idiv   ecx
c000fabc:	8d 42 30             	lea    eax,[edx+0x30]
c000fabf:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000fac3:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000facb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000facf:	0f be 8b 44 61 03 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffc9ebc]
c000fad6:	83 f9 59             	cmp    ecx,0x59
c000fad9:	74 1c                	je     c000faf7 <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000fadb:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000fae2:	83 f9 4d             	cmp    ecx,0x4d
c000fae5:	0f 84 e3 00 00 00    	je     c000fbce <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000faeb:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000faf2:	e9 d7 00 00 00       	jmp    c000fbce <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000faf7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fafc:	74 27                	je     c000fb25 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000fafe:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000fb02:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fb07:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000fb0b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000fb0f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000fb13:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fb17:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000fb1b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000fb1f:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000fb23:	eb 15                	jmp    c000fb3a <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000fb25:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fb29:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000fb2d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000fb31:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000fb35:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000fb3a:	50                   	push   eax
c000fb3b:	50                   	push   eax
c000fb3c:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000fb40:	57                   	push   edi
c000fb41:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000fb45:	56                   	push   esi
c000fb46:	e8 f5 0c ff ff       	call   c0000840 <strcat>
c000fb4b:	83 c4 10             	add    esp,0x10
c000fb4e:	83 fb 02             	cmp    ebx,0x2
c000fb51:	74 1a                	je     c000fb6d <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000fb53:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000fb58:	a1 48 61 03 c0       	mov    eax,ds:0xc0036148
c000fb5d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000fb61:	55                   	push   ebp
c000fb62:	55                   	push   ebp
c000fb63:	57                   	push   edi
c000fb64:	56                   	push   esi
c000fb65:	e8 d6 0c ff ff       	call   c0000840 <strcat>
c000fb6a:	83 c4 10             	add    esp,0x10
c000fb6d:	43                   	inc    ebx
c000fb6e:	83 fb 03             	cmp    ebx,0x3
c000fb71:	0f 85 58 ff ff ff    	jne    c000facf <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000fb77:	51                   	push   ecx
c000fb78:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000fb7f:	6a 00                	push   0x0
c000fb81:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000fb88:	e8 63 09 ff ff       	call   c00004f0 <memset>
c000fb8d:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb90:	e8 db 09 ff ff       	call   c0000570 <strlen>
c000fb95:	83 c4 10             	add    esp,0x10
c000fb98:	40                   	inc    eax
c000fb99:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000fba0:	72 17                	jb     c000fbb9 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000fba2:	52                   	push   edx
c000fba3:	52                   	push   edx
c000fba4:	56                   	push   esi
c000fba5:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000fbac:	e8 8f 0a ff ff       	call   c0000640 <strcpy>
c000fbb1:	83 c4 10             	add    esp,0x10
c000fbb4:	e9 8a 00 00 00       	jmp    c000fc43 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000fbb9:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000fbc0:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000fbc7:	8d 48 ff             	lea    ecx,[eax-0x1]
c000fbca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbcc:	eb 75                	jmp    c000fc43 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000fbce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fbd2:	89 ef                	mov    edi,ebp
c000fbd4:	50                   	push   eax
c000fbd5:	c1 ff 1f             	sar    edi,0x1f
c000fbd8:	50                   	push   eax
c000fbd9:	57                   	push   edi
c000fbda:	55                   	push   ebp
c000fbdb:	e8 70 04 00 00       	call   c0010050 <KeGetDigitsInNumber(long long)>
c000fbe0:	83 c4 10             	add    esp,0x10
c000fbe3:	48                   	dec    eax
c000fbe4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbe8:	75 1c                	jne    c000fc06 <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000fbea:	83 f9 44             	cmp    ecx,0x44
c000fbed:	75 09                	jne    c000fbf8 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000fbef:	80 3d 60 61 03 c0 00 	cmp    BYTE PTR ds:0xc0036160,0x0
c000fbf6:	eb 0c                	jmp    c000fc04 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000fbf8:	83 f9 4d             	cmp    ecx,0x4d
c000fbfb:	75 2b                	jne    c000fc28 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000fbfd:	80 3d 61 61 03 c0 00 	cmp    BYTE PTR ds:0xc0036161,0x0
c000fc04:	74 22                	je     c000fc28 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000fc06:	89 e8                	mov    eax,ebp
c000fc08:	b9 0a 00 00 00       	mov    ecx,0xa
c000fc0d:	99                   	cdq    
c000fc0e:	f7 f9                	idiv   ecx
c000fc10:	89 d5                	mov    ebp,edx
c000fc12:	99                   	cdq    
c000fc13:	f7 f9                	idiv   ecx
c000fc15:	83 c2 30             	add    edx,0x30
c000fc18:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000fc1c:	8d 55 30             	lea    edx,[ebp+0x30]
c000fc1f:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000fc23:	e9 0d ff ff ff       	jmp    c000fb35 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000fc28:	89 e8                	mov    eax,ebp
c000fc2a:	b9 0a 00 00 00       	mov    ecx,0xa
c000fc2f:	99                   	cdq    
c000fc30:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000fc35:	f7 f9                	idiv   ecx
c000fc37:	83 c2 30             	add    edx,0x30
c000fc3a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000fc3e:	e9 f7 fe ff ff       	jmp    c000fb3a <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000fc43:	81 c4 ac 00 00 00    	add    esp,0xac
c000fc49:	5b                   	pop    ebx
c000fc4a:	5e                   	pop    esi
c000fc4b:	5f                   	pop    edi
c000fc4c:	5d                   	pop    ebp
c000fc4d:	c3                   	ret    

c000fc4e <KeFormatShortDate(char*, int, int, int, int)>:
c000fc4e:	83 ec 14             	sub    esp,0x14
c000fc51:	6a 00                	push   0x0
c000fc53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc67:	e8 f2 fd ff ff       	call   c000fa5e <KeFormatDate(char*, int, int, int, int, bool)>
c000fc6c:	83 c4 2c             	add    esp,0x2c
c000fc6f:	c3                   	ret    

c000fc70 <KeFormatLongDate(char*, int, int, int, int)>:
c000fc70:	83 ec 14             	sub    esp,0x14
c000fc73:	6a 01                	push   0x1
c000fc75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc89:	e8 d0 fd ff ff       	call   c000fa5e <KeFormatDate(char*, int, int, int, int, bool)>
c000fc8e:	83 c4 2c             	add    esp,0x2c
c000fc91:	c3                   	ret    

c000fc92 <KeSetLocale(klocale_t)>:
c000fc92:	57                   	push   edi
c000fc93:	b9 09 00 00 00       	mov    ecx,0x9
c000fc98:	56                   	push   esi
c000fc99:	bf 40 61 03 c0       	mov    edi,0xc0036140
c000fc9e:	fc                   	cld    
c000fc9f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000fca3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fca5:	5e                   	pop    esi
c000fca6:	5f                   	pop    edi
c000fca7:	c3                   	ret    

c000fca8 <KeInitialiseLocale()>:
c000fca8:	57                   	push   edi
c000fca9:	56                   	push   esi
c000fcaa:	83 ec 3c             	sub    esp,0x3c
c000fcad:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000fcb5:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000fcbd:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000fcc5:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000fccd:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000fcd4:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000fcdc:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000fce4:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000fceb:	68 e8 b5 02 c0       	push   0xc002b5e8
c000fcf0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fcf4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fcf8:	50                   	push   eax
c000fcf9:	e8 42 09 ff ff       	call   c0000640 <strcpy>
c000fcfe:	83 ec 20             	sub    esp,0x20
c000fd01:	b9 09 00 00 00       	mov    ecx,0x9
c000fd06:	fc                   	cld    
c000fd07:	89 e7                	mov    edi,esp
c000fd09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd0b:	e8 82 ff ff ff       	call   c000fc92 <KeSetLocale(klocale_t)>
c000fd10:	83 c4 64             	add    esp,0x64
c000fd13:	5e                   	pop    esi
c000fd14:	5f                   	pop    edi
c000fd15:	c3                   	ret    

c000fd16 <KeFormatCurrency(char*, int, long long, long long)>:
c000fd16:	c3                   	ret    

c000fd17 <KeFormatCurrency(char*, int, double)>:
c000fd17:	c3                   	ret    

c000fd18 <KeFormatNumber(char*, long long, long long)>:
c000fd18:	c3                   	ret    

c000fd19 <KeFormatNumber(char*, double)>:
c000fd19:	c3                   	ret    
c000fd1a:	66 90                	xchg   ax,ax

c000fd1c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000fd1c:	55                   	push   ebp
c000fd1d:	57                   	push   edi
c000fd1e:	56                   	push   esi
c000fd1f:	53                   	push   ebx
c000fd20:	83 ec 5c             	sub    esp,0x5c
c000fd23:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000fd27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd2b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000fd2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fd33:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000fd37:	bb ef a1 02 c0       	mov    ebx,0xc002a1ef
c000fd3c:	bd 11 00 00 00       	mov    ebp,0x11
c000fd41:	89 d0                	mov    eax,edx
c000fd43:	83 e0 01             	and    eax,0x1
c000fd46:	74 10                	je     c000fd58 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000fd48:	8a 03                	mov    al,BYTE PTR [ebx]
c000fd4a:	88 02                	mov    BYTE PTR [edx],al
c000fd4c:	8d 52 01             	lea    edx,[edx+0x1]
c000fd4f:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000fd52:	83 ed 01             	sub    ebp,0x1
c000fd55:	8d 76 00             	lea    esi,[esi+0x0]
c000fd58:	89 d0                	mov    eax,edx
c000fd5a:	83 e0 02             	and    eax,0x2
c000fd5d:	74 11                	je     c000fd70 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000fd5f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000fd62:	66 89 02             	mov    WORD PTR [edx],ax
c000fd65:	8d 52 02             	lea    edx,[edx+0x2]
c000fd68:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000fd6b:	83 ed 02             	sub    ebp,0x2
c000fd6e:	66 90                	xchg   ax,ax
c000fd70:	89 e8                	mov    eax,ebp
c000fd72:	c1 e8 02             	shr    eax,0x2
c000fd75:	fc                   	cld    
c000fd76:	89 d7                	mov    edi,edx
c000fd78:	89 de                	mov    esi,ebx
c000fd7a:	89 c1                	mov    ecx,eax
c000fd7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd7e:	89 f3                	mov    ebx,esi
c000fd80:	89 fa                	mov    edx,edi
c000fd82:	b9 00 00 00 00       	mov    ecx,0x0
c000fd87:	89 e8                	mov    eax,ebp
c000fd89:	83 e0 02             	and    eax,0x2
c000fd8c:	74 0e                	je     c000fd9c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000fd8e:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000fd92:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000fd96:	8d 41 02             	lea    eax,[ecx+0x2]
c000fd99:	89 c1                	mov    ecx,eax
c000fd9b:	90                   	nop
c000fd9c:	89 e8                	mov    eax,ebp
c000fd9e:	83 e0 01             	and    eax,0x1
c000fda1:	74 09                	je     c000fdac <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000fda3:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000fda6:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000fda9:	8d 76 00             	lea    esi,[esi+0x0]
c000fdac:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000fdb0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000fdb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fdb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fdbc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000fdc0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000fdc4:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000fdc9:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fdcd:	89 c2                	mov    edx,eax
c000fdcf:	c1 fa 1f             	sar    edx,0x1f
c000fdd2:	52                   	push   edx
c000fdd3:	50                   	push   eax
c000fdd4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000fdd8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000fddc:	e8 b3 46 01 00       	call   c0024494 <__udivdi3>
c000fde1:	83 c4 10             	add    esp,0x10
c000fde4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000fde8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000fdec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fdf0:	80 f4 00             	xor    ah,0x0
c000fdf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fdf7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000fdfb:	80 f4 00             	xor    ah,0x0
c000fdfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe02:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fe06:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fe0a:	89 f8                	mov    eax,edi
c000fe0c:	09 f0                	or     eax,esi
c000fe0e:	74 04                	je     c000fe14 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000fe10:	eb b2                	jmp    c000fdc4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000fe12:	66 90                	xchg   ax,ax
c000fe14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fe18:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe1b:	90                   	nop
c000fe1c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fe20:	89 c1                	mov    ecx,eax
c000fe22:	89 c3                	mov    ebx,eax
c000fe24:	c1 fb 1f             	sar    ebx,0x1f
c000fe27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fe2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fe2f:	53                   	push   ebx
c000fe30:	51                   	push   ecx
c000fe31:	52                   	push   edx
c000fe32:	50                   	push   eax
c000fe33:	e8 5c 47 01 00       	call   c0024594 <__umoddi3>
c000fe38:	83 c4 10             	add    esp,0x10
c000fe3b:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000fe40:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000fe44:	01 c8                	add    eax,ecx
c000fe46:	8a 10                	mov    dl,BYTE PTR [eax]
c000fe48:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fe4c:	88 10                	mov    BYTE PTR [eax],dl
c000fe4e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fe52:	89 c2                	mov    edx,eax
c000fe54:	c1 fa 1f             	sar    edx,0x1f
c000fe57:	52                   	push   edx
c000fe58:	50                   	push   eax
c000fe59:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe5d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe61:	e8 2e 46 01 00       	call   c0024494 <__udivdi3>
c000fe66:	83 c4 10             	add    esp,0x10
c000fe69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fe75:	80 f4 00             	xor    ah,0x0
c000fe78:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe80:	80 f4 00             	xor    ah,0x0
c000fe83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fe87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fe8b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fe8f:	89 f8                	mov    eax,edi
c000fe91:	09 f0                	or     eax,esi
c000fe93:	74 03                	je     c000fe98 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000fe95:	eb 85                	jmp    c000fe1c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000fe97:	90                   	nop
c000fe98:	90                   	nop
c000fe99:	83 c4 5c             	add    esp,0x5c
c000fe9c:	5b                   	pop    ebx
c000fe9d:	5e                   	pop    esi
c000fe9e:	5f                   	pop    edi
c000fe9f:	5d                   	pop    ebp
c000fea0:	c3                   	ret    
c000fea1:	8d 76 00             	lea    esi,[esi+0x0]

c000fea4 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000fea4:	55                   	push   ebp
c000fea5:	57                   	push   edi
c000fea6:	56                   	push   esi
c000fea7:	53                   	push   ebx
c000fea8:	83 ec 5c             	sub    esp,0x5c
c000feab:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000feaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000feb3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000feb7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000febb:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000febf:	bb ef a1 02 c0       	mov    ebx,0xc002a1ef
c000fec4:	bd 11 00 00 00       	mov    ebp,0x11
c000fec9:	89 d0                	mov    eax,edx
c000fecb:	83 e0 01             	and    eax,0x1
c000fece:	74 10                	je     c000fee0 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000fed0:	8a 03                	mov    al,BYTE PTR [ebx]
c000fed2:	88 02                	mov    BYTE PTR [edx],al
c000fed4:	8d 52 01             	lea    edx,[edx+0x1]
c000fed7:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000feda:	83 ed 01             	sub    ebp,0x1
c000fedd:	8d 76 00             	lea    esi,[esi+0x0]
c000fee0:	89 d0                	mov    eax,edx
c000fee2:	83 e0 02             	and    eax,0x2
c000fee5:	74 11                	je     c000fef8 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000fee7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000feea:	66 89 02             	mov    WORD PTR [edx],ax
c000feed:	8d 52 02             	lea    edx,[edx+0x2]
c000fef0:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000fef3:	83 ed 02             	sub    ebp,0x2
c000fef6:	66 90                	xchg   ax,ax
c000fef8:	89 e8                	mov    eax,ebp
c000fefa:	c1 e8 02             	shr    eax,0x2
c000fefd:	fc                   	cld    
c000fefe:	89 d7                	mov    edi,edx
c000ff00:	89 de                	mov    esi,ebx
c000ff02:	89 c1                	mov    ecx,eax
c000ff04:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ff06:	89 f3                	mov    ebx,esi
c000ff08:	89 fa                	mov    edx,edi
c000ff0a:	b9 00 00 00 00       	mov    ecx,0x0
c000ff0f:	89 e8                	mov    eax,ebp
c000ff11:	83 e0 02             	and    eax,0x2
c000ff14:	74 0e                	je     c000ff24 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000ff16:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000ff1a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000ff1e:	8d 41 02             	lea    eax,[ecx+0x2]
c000ff21:	89 c1                	mov    ecx,eax
c000ff23:	90                   	nop
c000ff24:	89 e8                	mov    eax,ebp
c000ff26:	83 e0 01             	and    eax,0x1
c000ff29:	74 09                	je     c000ff34 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000ff2b:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000ff2e:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000ff31:	8d 76 00             	lea    esi,[esi+0x0]
c000ff34:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000ff38:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ff3c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ff41:	79 1d                	jns    c000ff60 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000ff43:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000ff47:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000ff4c:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000ff50:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ff54:	8d 50 01             	lea    edx,[eax+0x1]
c000ff57:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000ff5b:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000ff5e:	66 90                	xchg   ax,ax
c000ff60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ff68:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ff6c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ff70:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000ff75:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000ff79:	89 c2                	mov    edx,eax
c000ff7b:	c1 fa 1f             	sar    edx,0x1f
c000ff7e:	52                   	push   edx
c000ff7f:	50                   	push   eax
c000ff80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ff84:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ff88:	e8 07 45 01 00       	call   c0024494 <__udivdi3>
c000ff8d:	83 c4 10             	add    esp,0x10
c000ff90:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ff94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ff98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff9c:	80 f4 00             	xor    ah,0x0
c000ff9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ffa3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ffa7:	80 f4 00             	xor    ah,0x0
c000ffaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffae:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000ffb2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ffb6:	89 f8                	mov    eax,edi
c000ffb8:	09 f0                	or     eax,esi
c000ffba:	74 04                	je     c000ffc0 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000ffbc:	eb b2                	jmp    c000ff70 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000ffbe:	66 90                	xchg   ax,ax
c000ffc0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ffc4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ffc7:	90                   	nop
c000ffc8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000ffcc:	89 c1                	mov    ecx,eax
c000ffce:	89 c3                	mov    ebx,eax
c000ffd0:	c1 fb 1f             	sar    ebx,0x1f
c000ffd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffd7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ffdb:	53                   	push   ebx
c000ffdc:	51                   	push   ecx
c000ffdd:	52                   	push   edx
c000ffde:	50                   	push   eax
c000ffdf:	e8 30 43 01 00       	call   c0024314 <__moddi3>
c000ffe4:	83 c4 10             	add    esp,0x10
c000ffe7:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000ffec:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000fff0:	01 c8                	add    eax,ecx
c000fff2:	8a 10                	mov    dl,BYTE PTR [eax]
c000fff4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000fff8:	88 10                	mov    BYTE PTR [eax],dl
c000fffa:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000fffe:	89 c2                	mov    edx,eax
c0010000:	c1 fa 1f             	sar    edx,0x1f
c0010003:	52                   	push   edx
c0010004:	50                   	push   eax
c0010005:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010009:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001000d:	e8 b6 41 01 00       	call   c00241c8 <__divdi3>
c0010012:	83 c4 10             	add    esp,0x10
c0010015:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010019:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001001d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010021:	80 f4 00             	xor    ah,0x0
c0010024:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010028:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001002c:	80 f4 00             	xor    ah,0x0
c001002f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010033:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010037:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001003b:	89 f8                	mov    eax,edi
c001003d:	09 f0                	or     eax,esi
c001003f:	74 03                	je     c0010044 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c0010041:	eb 85                	jmp    c000ffc8 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c0010043:	90                   	nop
c0010044:	90                   	nop
c0010045:	83 c4 5c             	add    esp,0x5c
c0010048:	5b                   	pop    ebx
c0010049:	5e                   	pop    esi
c001004a:	5f                   	pop    edi
c001004b:	5d                   	pop    ebp
c001004c:	c3                   	ret    
c001004d:	8d 76 00             	lea    esi,[esi+0x0]

c0010050 <KeGetDigitsInNumber(long long)>:
c0010050:	56                   	push   esi
c0010051:	53                   	push   ebx
c0010052:	83 ec 24             	sub    esp,0x24
c0010055:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010059:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001005d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010065:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001006d:	8d 76 00             	lea    esi,[esi+0x0]
c0010070:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010074:	80 f4 00             	xor    ah,0x0
c0010077:	89 c3                	mov    ebx,eax
c0010079:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001007d:	80 f4 00             	xor    ah,0x0
c0010080:	89 c6                	mov    esi,eax
c0010082:	89 f0                	mov    eax,esi
c0010084:	09 d8                	or     eax,ebx
c0010086:	74 28                	je     c00100b0 <KeGetDigitsInNumber(long long)+0x60>
c0010088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001008c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010090:	6a 00                	push   0x0
c0010092:	6a 0a                	push   0xa
c0010094:	52                   	push   edx
c0010095:	50                   	push   eax
c0010096:	e8 2d 41 01 00       	call   c00241c8 <__divdi3>
c001009b:	83 c4 10             	add    esp,0x10
c001009e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00100a6:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00100ab:	eb c3                	jmp    c0010070 <KeGetDigitsInNumber(long long)+0x20>
c00100ad:	8d 76 00             	lea    esi,[esi+0x0]
c00100b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100b4:	83 c4 24             	add    esp,0x24
c00100b7:	5b                   	pop    ebx
c00100b8:	5e                   	pop    esi
c00100b9:	c3                   	ret    
c00100ba:	66 90                	xchg   ax,ax

c00100bc <KeItoa(unsigned long long, char*)>:
c00100bc:	83 ec 1c             	sub    esp,0x1c
c00100bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100cf:	6a 0a                	push   0xa
c00100d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00100d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00100d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00100dd:	e8 3a fc ff ff       	call   c000fd1c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c00100e2:	83 c4 10             	add    esp,0x10
c00100e5:	90                   	nop
c00100e6:	83 c4 1c             	add    esp,0x1c
c00100e9:	c3                   	ret    
c00100ea:	66 90                	xchg   ax,ax

c00100ec <KeItoa(long long, char*)>:
c00100ec:	83 ec 1c             	sub    esp,0x1c
c00100ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100ff:	6a 0a                	push   0xa
c0010101:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010105:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010109:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001010d:	e8 92 fd ff ff       	call   c000fea4 <KeBasedSignedIntegerToString(long long, char*, int)>
c0010112:	83 c4 10             	add    esp,0x10
c0010115:	90                   	nop
c0010116:	83 c4 1c             	add    esp,0x1c
c0010119:	c3                   	ret    
c001011a:	66 90                	xchg   ax,ax

c001011c <KeXtoa(unsigned long long, char*)>:
c001011c:	83 ec 1c             	sub    esp,0x1c
c001011f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010123:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010127:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001012b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001012f:	6a 10                	push   0x10
c0010131:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010135:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010139:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001013d:	e8 da fb ff ff       	call   c000fd1c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c0010142:	83 c4 10             	add    esp,0x10
c0010145:	90                   	nop
c0010146:	83 c4 1c             	add    esp,0x1c
c0010149:	c3                   	ret    

c001014a <sbrk>:
c001014a:	55                   	push   ebp
c001014b:	57                   	push   edi
c001014c:	56                   	push   esi
c001014d:	53                   	push   ebx
c001014e:	83 ec 1c             	sub    esp,0x1c
c0010151:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010155:	85 c0                	test   eax,eax
c0010157:	74 61                	je     c00101ba <sbrk+0x70>
c0010159:	78 66                	js     c00101c1 <sbrk+0x77>
c001015b:	8b 15 50 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fc50
c0010161:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010165:	05 ff 0f 00 00       	add    eax,0xfff
c001016a:	89 c5                	mov    ebp,eax
c001016c:	78 6b                	js     c00101d9 <sbrk+0x8f>
c001016e:	c1 fd 0c             	sar    ebp,0xc
c0010171:	bb 00 00 00 00       	mov    ebx,0x0
c0010176:	8b 35 90 62 03 c0    	mov    esi,DWORD PTR ds:0xc0036290
c001017c:	8b 3d 50 fc 02 c0    	mov    edi,DWORD PTR ds:0xc002fc50
c0010182:	e8 b9 07 00 00       	call   c0010940 <Phys::allocatePage()>
c0010187:	68 01 04 00 00       	push   0x401
c001018c:	57                   	push   edi
c001018d:	50                   	push   eax
c001018e:	56                   	push   esi
c001018f:	e8 32 42 00 00       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010194:	81 05 50 fc 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002fc50,0x1000
c001019e:	83 c3 01             	add    ebx,0x1
c00101a1:	83 c4 10             	add    esp,0x10
c00101a4:	39 dd                	cmp    ebp,ebx
c00101a6:	75 ce                	jne    c0010176 <sbrk+0x2c>
c00101a8:	0f 20 d8             	mov    eax,cr3
c00101ab:	0f 22 d8             	mov    cr3,eax
c00101ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101b2:	83 c4 1c             	add    esp,0x1c
c00101b5:	5b                   	pop    ebx
c00101b6:	5e                   	pop    esi
c00101b7:	5f                   	pop    edi
c00101b8:	5d                   	pop    ebp
c00101b9:	c3                   	ret    
c00101ba:	a1 50 fc 02 c0       	mov    eax,ds:0xc002fc50
c00101bf:	eb f1                	jmp    c00101b2 <sbrk+0x68>
c00101c1:	83 ec 08             	sub    esp,0x8
c00101c4:	50                   	push   eax
c00101c5:	68 ec b5 02 c0       	push   0xc002b5ec
c00101ca:	e8 ad 6d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00101cf:	83 c4 10             	add    esp,0x10
c00101d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00101d7:	eb d9                	jmp    c00101b2 <sbrk+0x68>
c00101d9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00101df:	eb 8d                	jmp    c001016e <sbrk+0x24>

c00101e1 <sbrk_thunk>:
c00101e1:	83 ec 0c             	sub    esp,0xc
c00101e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e8:	3d ff bf 00 00       	cmp    eax,0xbfff
c00101ed:	7f 10                	jg     c00101ff <sbrk_thunk+0x1e>
c00101ef:	83 ec 0c             	sub    esp,0xc
c00101f2:	50                   	push   eax
c00101f3:	e8 52 ff ff ff       	call   c001014a <sbrk>
c00101f8:	83 c4 10             	add    esp,0x10
c00101fb:	83 c4 0c             	add    esp,0xc
c00101fe:	c3                   	ret    
c00101ff:	83 ec 08             	sub    esp,0x8
c0010202:	50                   	push   eax
c0010203:	68 1c b6 02 c0       	push   0xc002b61c
c0010208:	e8 6f 6d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001020d:	83 c4 10             	add    esp,0x10
c0010210:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010215:	eb e4                	jmp    c00101fb <sbrk_thunk+0x1a>

c0010217 <mmap>:
c0010217:	55                   	push   ebp
c0010218:	57                   	push   edi
c0010219:	56                   	push   esi
c001021a:	53                   	push   ebx
c001021b:	83 ec 18             	sub    esp,0x18
c001021e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010222:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0010228:	89 fb                	mov    ebx,edi
c001022a:	c1 eb 0c             	shr    ebx,0xc
c001022d:	53                   	push   ebx
c001022e:	e8 b0 3a 00 00       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c0010233:	89 c5                	mov    ebp,eax
c0010235:	83 c4 10             	add    esp,0x10
c0010238:	85 db                	test   ebx,ebx
c001023a:	7e 2f                	jle    c001026b <mmap+0x54>
c001023c:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0010242:	01 c7                	add    edi,eax
c0010244:	89 c3                	mov    ebx,eax
c0010246:	8b 35 90 62 03 c0    	mov    esi,DWORD PTR ds:0xc0036290
c001024c:	e8 ef 06 00 00       	call   c0010940 <Phys::allocatePage()>
c0010251:	68 01 04 00 00       	push   0x401
c0010256:	53                   	push   ebx
c0010257:	50                   	push   eax
c0010258:	56                   	push   esi
c0010259:	e8 68 41 00 00       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001025e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0010264:	83 c4 10             	add    esp,0x10
c0010267:	39 fb                	cmp    ebx,edi
c0010269:	75 db                	jne    c0010246 <mmap+0x2f>
c001026b:	89 e8                	mov    eax,ebp
c001026d:	83 c4 0c             	add    esp,0xc
c0010270:	5b                   	pop    ebx
c0010271:	5e                   	pop    esi
c0010272:	5f                   	pop    edi
c0010273:	5d                   	pop    ebp
c0010274:	c3                   	ret    

c0010275 <munmap>:
c0010275:	83 ec 18             	sub    esp,0x18
c0010278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001027c:	e8 6a 3d 00 00       	call   c0013feb <Virt::freeKernelVirtualPages(unsigned long)>
c0010281:	b8 00 00 00 00       	mov    eax,0x0
c0010286:	83 c4 1c             	add    esp,0x1c
c0010289:	c3                   	ret    

c001028a <liballoc_lock()>:
c001028a:	fa                   	cli    
c001028b:	83 05 30 63 03 c0 01 	add    DWORD PTR ds:0xc0036330,0x1
c0010292:	b8 00 00 00 00       	mov    eax,0x0
c0010297:	c3                   	ret    

c0010298 <liballoc_unlock()>:
c0010298:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00102a0:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c00102a7:	75 01                	jne    c00102aa <liballoc_unlock()+0x12>
c00102a9:	fb                   	sti    
c00102aa:	b8 00 00 00 00       	mov    eax,0x0
c00102af:	c3                   	ret    

c00102b0 <liballoc_alloc(int)>:
c00102b0:	83 ec 10             	sub    esp,0x10
c00102b3:	6a 01                	push   0x1
c00102b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102b9:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c00102bf:	e8 06 42 00 00       	call   c00144ca <VAS::allocatePages(int, int)>
c00102c4:	83 c4 1c             	add    esp,0x1c
c00102c7:	c3                   	ret    

c00102c8 <liballoc_free(void*, int)>:
c00102c8:	83 ec 14             	sub    esp,0x14
c00102cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102cf:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c00102d5:	e8 4e 3e 00 00       	call   c0014128 <VAS::freeAllocatedPages(unsigned long)>
c00102da:	b8 00 00 00 00       	mov    eax,0x0
c00102df:	83 c4 1c             	add    esp,0x1c
c00102e2:	c3                   	ret    

c00102e3 <realloc>:
c00102e3:	83 ec 14             	sub    esp,0x14
c00102e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ee:	e8 64 14 ff ff       	call   c0001757 <dlrealloc>
c00102f3:	83 c4 1c             	add    esp,0x1c
c00102f6:	c3                   	ret    

c00102f7 <malloc>:
c00102f7:	83 ec 18             	sub    esp,0x18
c00102fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102fe:	e8 17 0f ff ff       	call   c000121a <dlmalloc>
c0010303:	83 c4 1c             	add    esp,0x1c
c0010306:	c3                   	ret    

c0010307 <free>:
c0010307:	83 ec 18             	sub    esp,0x18
c001030a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001030e:	e8 40 0a ff ff       	call   c0000d53 <dlfree>
c0010313:	83 c4 1c             	add    esp,0x1c
c0010316:	c3                   	ret    

c0010317 <rfree>:
c0010317:	83 ec 18             	sub    esp,0x18
c001031a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031e:	e8 30 0a ff ff       	call   c0000d53 <dlfree>
c0010323:	83 c4 1c             	add    esp,0x1c
c0010326:	c3                   	ret    

c0010327 <calloc>:
c0010327:	56                   	push   esi
c0010328:	53                   	push   ebx
c0010329:	83 ec 10             	sub    esp,0x10
c001032c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010330:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0010335:	53                   	push   ebx
c0010336:	e8 bc ff ff ff       	call   c00102f7 <malloc>
c001033b:	89 c6                	mov    esi,eax
c001033d:	83 c4 0c             	add    esp,0xc
c0010340:	53                   	push   ebx
c0010341:	6a 00                	push   0x0
c0010343:	50                   	push   eax
c0010344:	e8 a7 01 ff ff       	call   c00004f0 <memset>
c0010349:	89 f0                	mov    eax,esi
c001034b:	83 c4 14             	add    esp,0x14
c001034e:	5b                   	pop    ebx
c001034f:	5e                   	pop    esi
c0010350:	c3                   	ret    
c0010351:	66 90                	xchg   ax,ax
c0010353:	90                   	nop

c0010354 <KeMailboxTryPost(Mailbox*, void*)>:
c0010354:	83 ec 10             	sub    esp,0x10
c0010357:	fa                   	cli    
c0010358:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001035d:	83 c0 01             	add    eax,0x1
c0010360:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0010365:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001036a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001036e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010371:	85 c0                	test   eax,eax
c0010373:	75 23                	jne    c0010398 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c0010375:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010379:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001037d:	89 10                	mov    DWORD PTR [eax],edx
c001037f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010383:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010386:	8d 50 01             	lea    edx,[eax+0x1]
c0010389:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001038d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010390:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0010395:	8d 76 00             	lea    esi,[esi+0x0]
c0010398:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00103a0:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00103a5:	85 c0                	test   eax,eax
c00103a7:	75 03                	jne    c00103ac <KeMailboxTryPost(Mailbox*, void*)+0x58>
c00103a9:	fb                   	sti    
c00103aa:	66 90                	xchg   ax,ax
c00103ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00103b0:	83 c4 10             	add    esp,0x10
c00103b3:	c3                   	ret    

c00103b4 <KeMailboxTryGet(Mailbox*, void**)>:
c00103b4:	83 ec 10             	sub    esp,0x10
c00103b7:	fa                   	cli    
c00103b8:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00103bd:	83 c0 01             	add    eax,0x1
c00103c0:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00103c5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00103ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103d1:	83 f8 01             	cmp    eax,0x1
c00103d4:	75 22                	jne    c00103f8 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c00103d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103da:	8b 10                	mov    edx,DWORD PTR [eax]
c00103dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103e0:	89 10                	mov    DWORD PTR [eax],edx
c00103e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103e9:	8d 50 ff             	lea    edx,[eax-0x1]
c00103ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00103f3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00103f8:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0010400:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0010405:	85 c0                	test   eax,eax
c0010407:	75 03                	jne    c001040c <KeMailboxTryGet(Mailbox*, void**)+0x58>
c0010409:	fb                   	sti    
c001040a:	66 90                	xchg   ax,ax
c001040c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010410:	83 c4 10             	add    esp,0x10
c0010413:	c3                   	ret    

c0010414 <KeMailboxCreate()>:
c0010414:	83 ec 1c             	sub    esp,0x1c
c0010417:	83 ec 0c             	sub    esp,0xc
c001041a:	6a 08                	push   0x8
c001041c:	e8 d6 fe ff ff       	call   c00102f7 <malloc>
c0010421:	83 c4 10             	add    esp,0x10
c0010424:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001042c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010436:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001043d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010441:	83 c4 1c             	add    esp,0x1c
c0010444:	c3                   	ret    
c0010445:	8d 76 00             	lea    esi,[esi+0x0]

c0010448 <KeMailboxPost(Mailbox*, void*)>:
c0010448:	83 ec 1c             	sub    esp,0x1c
c001044b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0010450:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010454:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010458:	e8 f7 fe ff ff       	call   c0010354 <KeMailboxTryPost(Mailbox*, void*)>
c001045d:	83 c4 08             	add    esp,0x8
c0010460:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010464:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010468:	83 f0 01             	xor    eax,0x1
c001046b:	0f b6 c0             	movzx  eax,al
c001046e:	85 c0                	test   eax,eax
c0010470:	74 26                	je     c0010498 <KeMailboxPost(Mailbox*, void*)+0x50>
c0010472:	fa                   	cli    
c0010473:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0010478:	83 c0 01             	add    eax,0x1
c001047b:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0010480:	e8 5f 6e 00 00       	call   c00172e4 <schedule()>
c0010485:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c001048d:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0010492:	85 c0                	test   eax,eax
c0010494:	75 02                	jne    c0010498 <KeMailboxPost(Mailbox*, void*)+0x50>
c0010496:	fb                   	sti    
c0010497:	90                   	nop
c0010498:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001049d:	85 c0                	test   eax,eax
c001049f:	75 03                	jne    c00104a4 <KeMailboxPost(Mailbox*, void*)+0x5c>
c00104a1:	eb ad                	jmp    c0010450 <KeMailboxPost(Mailbox*, void*)+0x8>
c00104a3:	90                   	nop
c00104a4:	90                   	nop
c00104a5:	83 c4 1c             	add    esp,0x1c
c00104a8:	c3                   	ret    
c00104a9:	8d 76 00             	lea    esi,[esi+0x0]

c00104ac <KeMailboxGet(Mailbox*, void**)>:
c00104ac:	83 ec 1c             	sub    esp,0x1c
c00104af:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00104b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00104b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00104bc:	e8 f3 fe ff ff       	call   c00103b4 <KeMailboxTryGet(Mailbox*, void**)>
c00104c1:	83 c4 08             	add    esp,0x8
c00104c4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00104c8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00104cc:	83 f0 01             	xor    eax,0x1
c00104cf:	0f b6 c0             	movzx  eax,al
c00104d2:	85 c0                	test   eax,eax
c00104d4:	74 26                	je     c00104fc <KeMailboxGet(Mailbox*, void**)+0x50>
c00104d6:	fa                   	cli    
c00104d7:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00104dc:	83 c0 01             	add    eax,0x1
c00104df:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00104e4:	e8 fb 6d 00 00       	call   c00172e4 <schedule()>
c00104e9:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00104f1:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00104f6:	85 c0                	test   eax,eax
c00104f8:	75 02                	jne    c00104fc <KeMailboxGet(Mailbox*, void**)+0x50>
c00104fa:	fb                   	sti    
c00104fb:	90                   	nop
c00104fc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0010501:	85 c0                	test   eax,eax
c0010503:	75 03                	jne    c0010508 <KeMailboxGet(Mailbox*, void**)+0x5c>
c0010505:	eb ad                	jmp    c00104b4 <KeMailboxGet(Mailbox*, void**)+0x8>
c0010507:	90                   	nop
c0010508:	90                   	nop
c0010509:	83 c4 1c             	add    esp,0x1c
c001050c:	c3                   	ret    
c001050d:	8d 76 00             	lea    esi,[esi+0x0]

c0010510 <KeMailboxDestroy(Mailbox*)>:
c0010510:	83 ec 0c             	sub    esp,0xc
c0010513:	83 ec 0c             	sub    esp,0xc
c0010516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001051a:	e8 e8 fd ff ff       	call   c0010307 <free>
c001051f:	83 c4 10             	add    esp,0x10
c0010522:	90                   	nop
c0010523:	83 c4 0c             	add    esp,0xc
c0010526:	c3                   	ret    

c0010527 <KeFirstTask()>:
c0010527:	53                   	push   ebx
c0010528:	83 ec 08             	sub    esp,0x8
c001052b:	fb                   	sti    
c001052c:	e8 7a a5 00 00       	call   c001aaab <HalEnableNMI()>
c0010531:	83 ec 0c             	sub    esp,0xc
c0010534:	68 2b b6 02 c0       	push   0xc002b62b
c0010539:	e8 1b d8 ff ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c001053e:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c0010545:	e8 ad fd ff ff       	call   c00102f7 <malloc>
c001054a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0010551:	89 c3                	mov    ebx,eax
c0010553:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c0010558:	50                   	push   eax
c0010559:	68 44 b6 02 c0       	push   0xc002b644
c001055e:	6a 01                	push   0x1
c0010560:	53                   	push   ebx
c0010561:	e8 72 68 00 00       	call   c0016dd8 <Process::Process(bool, char const*, Process*, char**)>
c0010566:	83 c4 20             	add    esp,0x20
c0010569:	68 ff 00 00 00       	push   0xff
c001056e:	6a 00                	push   0x0
c0010570:	68 37 f5 00 c0       	push   0xc000f537
c0010575:	53                   	push   ebx
c0010576:	e8 9d 6a 00 00       	call   c0017018 <Process::createThread(void (*)(void*), void*, int)>
c001057b:	8b 15 58 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036358
c0010581:	6a 7a                	push   0x7a
c0010583:	6a 00                	push   0x0
c0010585:	68 cc 79 01 c0       	push   0xc00179cc
c001058a:	52                   	push   edx
c001058b:	e8 88 6a 00 00       	call   c0017018 <Process::createThread(void (*)(void*), void*, int)>
c0010590:	83 c4 14             	add    esp,0x14
c0010593:	a3 10 63 03 c0       	mov    ds:0xc0036310,eax
c0010598:	68 cc b6 02 c0       	push   0xc002b6cc
c001059d:	e8 b7 d7 ff ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c00105a2:	c6 05 0d 61 03 c0 01 	mov    BYTE PTR ds:0xc003610d,0x1
c00105a9:	e8 e9 0b 00 00       	call   c0011197 <KeInitRand()>
c00105ae:	e8 9f 78 00 00       	call   c0017e52 <Vm::initialise8086()>
c00105b3:	e8 ba 82 ff ff       	call   c0008872 <Fs::initVFS()>
c00105b8:	c7 04 24 98 b2 02 c0 	mov    DWORD PTR [esp],0xc002b298
c00105bf:	e8 95 d7 ff ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c00105c4:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c00105c9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00105cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00105d1:	6a 00                	push   0x0
c00105d3:	6a 00                	push   0x0
c00105d5:	6a 00                	push   0x0
c00105d7:	50                   	push   eax
c00105d8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00105db:	83 c4 14             	add    esp,0x14
c00105de:	68 cc b6 02 c0       	push   0xc002b6cc
c00105e3:	e8 71 d7 ff ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c00105e8:	e8 69 7a ff ff       	call   c0008056 <KeInitialiseSymlinks()>
c00105ed:	e8 b6 ea ff ff       	call   c000f0a8 <KeLoadSystemEnv()>
c00105f2:	e8 e5 09 00 00       	call   c0010fdc <KeSetupPowerManager()>
c00105f7:	c7 04 24 51 b6 02 c0 	mov    DWORD PTR [esp],0xc002b651
c00105fe:	e8 56 d7 ff ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0010603:	83 c4 0c             	add    esp,0xc
c0010606:	8b 0d 08 61 03 c0    	mov    ecx,DWORD PTR ds:0xc0036108
c001060c:	6a 00                	push   0x0
c001060e:	51                   	push   ecx
c001060f:	68 62 b6 02 c0       	push   0xc002b662
c0010614:	e8 2f 63 00 00       	call   c0016948 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0010619:	83 c4 10             	add    esp,0x10
c001061c:	83 ec 0c             	sub    esp,0xc
c001061f:	6a 02                	push   0x2
c0010621:	e8 7e 6d 00 00       	call   c00173a4 <blockTask(TaskState)>
c0010626:	83 c4 10             	add    esp,0x10
c0010629:	eb f1                	jmp    c001061c <KeFirstTask()+0xf5>

c001062b <KeEntryPoint>:
c001062b:	57                   	push   edi
c001062c:	bf f9 03 00 00       	mov    edi,0x3f9
c0010631:	56                   	push   esi
c0010632:	31 f6                	xor    esi,esi
c0010634:	53                   	push   ebx
c0010635:	83 ec 20             	sub    esp,0x20
c0010638:	e8 df d6 ff ff       	call   c000dd1c <KeInitialiseBootConfigurationFlags()>
c001063d:	89 f0                	mov    eax,esi
c001063f:	89 fa                	mov    edx,edi
c0010641:	ee                   	out    dx,al
c0010642:	bb fb 03 00 00       	mov    ebx,0x3fb
c0010647:	b0 80                	mov    al,0x80
c0010649:	89 da                	mov    edx,ebx
c001064b:	ee                   	out    dx,al
c001064c:	b1 03                	mov    cl,0x3
c001064e:	ba f8 03 00 00       	mov    edx,0x3f8
c0010653:	88 c8                	mov    al,cl
c0010655:	ee                   	out    dx,al
c0010656:	89 f0                	mov    eax,esi
c0010658:	89 fa                	mov    edx,edi
c001065a:	ee                   	out    dx,al
c001065b:	88 c8                	mov    al,cl
c001065d:	89 da                	mov    edx,ebx
c001065f:	ee                   	out    dx,al
c0010660:	b0 c7                	mov    al,0xc7
c0010662:	ba fa 03 00 00       	mov    edx,0x3fa
c0010667:	ee                   	out    dx,al
c0010668:	b0 0b                	mov    al,0xb
c001066a:	ba fc 03 00 00       	mov    edx,0x3fc
c001066f:	ee                   	out    dx,al
c0010670:	83 ec 0c             	sub    esp,0xc
c0010673:	68 7e b6 02 c0       	push   0xc002b67e
c0010678:	e8 ff 68 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001067d:	e8 a8 d6 ff ff       	call   c000dd2a <KeDisplaySplashScreen()>
c0010682:	a1 24 05 00 00       	mov    eax,ds:0x524
c0010687:	05 ff 0f 00 00       	add    eax,0xfff
c001068c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010691:	89 04 24             	mov    DWORD PTR [esp],eax
c0010694:	e8 41 04 00 00       	call   c0010ada <Phys::physicalMemorySetup(unsigned int)>
c0010699:	e8 23 38 00 00       	call   c0013ec1 <Virt::virtualMemorySetup()>
c001069e:	e8 d7 d5 ff ff       	call   c000dc7a <KeInitialiseAtexit()>
c00106a3:	58                   	pop    eax
c00106a4:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00106a8:	53                   	push   ebx
c00106a9:	e8 fa 3a 00 00       	call   c00141a8 <VAS::VAS()>
c00106ae:	89 1d 90 62 03 c0    	mov    DWORD PTR ds:0xc0036290,ebx
c00106b4:	e8 cf 78 01 00       	call   c0027f88 <_init>
c00106b9:	c7 04 24 95 b6 02 c0 	mov    DWORD PTR [esp],0xc002b695
c00106c0:	e8 94 d6 ff ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c00106c5:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c00106cc:	e8 26 fc ff ff       	call   c00102f7 <malloc>
c00106d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00106d4:	89 c6                	mov    esi,eax
c00106d6:	e8 05 e4 ff ff       	call   c000eae0 <Computer::Computer()>
c00106db:	8b 15 90 62 03 c0    	mov    edx,DWORD PTR ds:0xc0036290
c00106e1:	89 35 08 61 03 c0    	mov    DWORD PTR ds:0xc0036108,esi
c00106e7:	52                   	push   edx
c00106e8:	6a 00                	push   0x0
c00106ea:	6a 00                	push   0x0
c00106ec:	56                   	push   esi
c00106ed:	e8 32 e4 ff ff       	call   c000eb24 <Computer::open(int, int, void*)>
c00106f2:	83 c4 14             	add    esp,0x14
c00106f5:	68 f0 b6 02 c0       	push   0xc002b6f0
c00106fa:	e8 5a d6 ff ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c00106ff:	e8 2d ab 00 00       	call   c001b231 <HalInitialiseCoprocessor()>
c0010704:	c7 04 24 af b6 02 c0 	mov    DWORD PTR [esp],0xc002b6af
c001070b:	e8 49 d6 ff ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0010710:	c7 04 24 27 05 01 c0 	mov    DWORD PTR [esp],0xc0010527
c0010717:	e8 80 6a 00 00       	call   c001719c <setupMultitasking(void (*)())>
c001071c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001071f:	e8 3a 3b 00 00       	call   c001425e <VAS::~VAS()>
c0010724:	83 c4 30             	add    esp,0x30
c0010727:	5b                   	pop    ebx
c0010728:	5e                   	pop    esi
c0010729:	5f                   	pop    edi
c001072a:	c3                   	ret    
c001072b:	90                   	nop

c001072c <Mutex::Mutex()>:
c001072c:	83 ec 0c             	sub    esp,0xc
c001072f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010733:	83 ec 08             	sub    esp,0x8
c0010736:	6a 01                	push   0x1
c0010738:	50                   	push   eax
c0010739:	e8 fa 0c 00 00       	call   c0011438 <Semaphore::Semaphore(int)>
c001073e:	83 c4 10             	add    esp,0x10
c0010741:	90                   	nop
c0010742:	83 c4 0c             	add    esp,0xc
c0010745:	c3                   	ret    

c0010746 <KeIsKernelInPanic()>:
c0010746:	a0 64 61 03 c0       	mov    al,ds:0xc0036164
c001074b:	c3                   	ret    

c001074c <KePanic(char const*)>:
c001074c:	c6 05 64 61 03 c0 01 	mov    BYTE PTR ds:0xc0036164,0x1
c0010753:	e9 77 ab 00 00       	jmp    c001b2cf <HalPanic(char const*)>

c0010758 <Phys::allocateDMA(unsigned long)>:
c0010758:	55                   	push   ebp
c0010759:	31 ed                	xor    ebp,ebp
c001075b:	57                   	push   edi
c001075c:	56                   	push   esi
c001075d:	53                   	push   ebx
c001075e:	31 db                	xor    ebx,ebx
c0010760:	83 ec 1c             	sub    esp,0x1c
c0010763:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010767:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001076f:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0010775:	31 c0                	xor    eax,eax
c0010777:	c1 ef 0c             	shr    edi,0xc
c001077a:	eb 1b                	jmp    c0010797 <Phys::allocateDMA(unsigned long)+0x3f>
c001077c:	85 c0                	test   eax,eax
c001077e:	75 06                	jne    c0010786 <Phys::allocateDMA(unsigned long)+0x2e>
c0010780:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010784:	89 dd                	mov    ebp,ebx
c0010786:	8d 70 01             	lea    esi,[eax+0x1]
c0010789:	39 f7                	cmp    edi,esi
c001078b:	74 37                	je     c00107c4 <Phys::allocateDMA(unsigned long)+0x6c>
c001078d:	89 f0                	mov    eax,esi
c001078f:	83 c3 01             	add    ebx,0x1
c0010792:	83 fb 0f             	cmp    ebx,0xf
c0010795:	7f 13                	jg     c00107aa <Phys::allocateDMA(unsigned long)+0x52>
c0010797:	80 bb 80 61 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc9e80],0x0
c001079e:	74 dc                	je     c001077c <Phys::allocateDMA(unsigned long)+0x24>
c00107a0:	31 c0                	xor    eax,eax
c00107a2:	83 c3 01             	add    ebx,0x1
c00107a5:	83 fb 0f             	cmp    ebx,0xf
c00107a8:	7e ed                	jle    c0010797 <Phys::allocateDMA(unsigned long)+0x3f>
c00107aa:	83 ec 0c             	sub    esp,0xc
c00107ad:	68 14 b7 02 c0       	push   0xc002b714
c00107b2:	e8 95 ff ff ff       	call   c001074c <KePanic(char const*)>
c00107b7:	83 c4 10             	add    esp,0x10
c00107ba:	31 c0                	xor    eax,eax
c00107bc:	83 c4 1c             	add    esp,0x1c
c00107bf:	5b                   	pop    ebx
c00107c0:	5e                   	pop    esi
c00107c1:	5f                   	pop    edi
c00107c2:	5d                   	pop    ebp
c00107c3:	c3                   	ret    
c00107c4:	89 e9                	mov    ecx,ebp
c00107c6:	c1 f9 04             	sar    ecx,0x4
c00107c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00107cd:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00107d1:	89 ca                	mov    edx,ecx
c00107d3:	83 ea 01             	sub    edx,0x1
c00107d6:	79 03                	jns    c00107db <Phys::allocateDMA(unsigned long)+0x83>
c00107d8:	8d 51 0e             	lea    edx,[ecx+0xe]
c00107db:	c1 fa 04             	sar    edx,0x4
c00107de:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00107e2:	74 08                	je     c00107ec <Phys::allocateDMA(unsigned long)+0x94>
c00107e4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00107e8:	31 c0                	xor    eax,eax
c00107ea:	eb b6                	jmp    c00107a2 <Phys::allocateDMA(unsigned long)+0x4a>
c00107ec:	85 f6                	test   esi,esi
c00107ee:	74 17                	je     c0010807 <Phys::allocateDMA(unsigned long)+0xaf>
c00107f0:	8d 95 80 61 03 c0    	lea    edx,[ebp-0x3ffc9e80]
c00107f6:	8d 84 05 81 61 03 c0 	lea    eax,[ebp+eax*1-0x3ffc9e7f]
c00107fd:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0010800:	83 c2 01             	add    edx,0x1
c0010803:	39 d0                	cmp    eax,edx
c0010805:	75 f6                	jne    c00107fd <Phys::allocateDMA(unsigned long)+0xa5>
c0010807:	a1 78 61 03 c0       	mov    eax,ds:0xc0036178
c001080c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010810:	01 f8                	add    eax,edi
c0010812:	85 d2                	test   edx,edx
c0010814:	a3 78 61 03 c0       	mov    ds:0xc0036178,eax
c0010819:	74 17                	je     c0010832 <Phys::allocateDMA(unsigned long)+0xda>
c001081b:	83 ec 0c             	sub    esp,0xc
c001081e:	68 14 b7 02 c0       	push   0xc002b714
c0010823:	e8 24 ff ff ff       	call   c001074c <KePanic(char const*)>
c0010828:	83 c4 10             	add    esp,0x10
c001082b:	89 f0                	mov    eax,esi
c001082d:	e9 5d ff ff ff       	jmp    c001078f <Phys::allocateDMA(unsigned long)+0x37>
c0010832:	c1 e5 0c             	shl    ebp,0xc
c0010835:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c001083b:	e9 7c ff ff ff       	jmp    c00107bc <Phys::allocateDMA(unsigned long)+0x64>

c0010840 <Phys::freeDMA(unsigned long, unsigned long)>:
c0010840:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010844:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c001084a:	a1 78 61 03 c0       	mov    eax,ds:0xc0036178
c001084f:	c1 ea 0c             	shr    edx,0xc
c0010852:	29 d0                	sub    eax,edx
c0010854:	a3 78 61 03 c0       	mov    ds:0xc0036178,eax
c0010859:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001085d:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0010862:	c1 e8 0c             	shr    eax,0xc
c0010865:	85 d2                	test   edx,edx
c0010867:	74 11                	je     c001087a <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0010869:	05 80 61 03 c0       	add    eax,0xc0036180
c001086e:	01 c2                	add    edx,eax
c0010870:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010873:	83 c0 01             	add    eax,0x1
c0010876:	39 d0                	cmp    eax,edx
c0010878:	75 f6                	jne    c0010870 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c001087a:	c3                   	ret    

c001087b <Phys::setPageState(unsigned long, bool)>:
c001087b:	57                   	push   edi
c001087c:	56                   	push   esi
c001087d:	8b 35 b8 fc 02 c0    	mov    esi,DWORD PTR ds:0xc002fcb8
c0010883:	53                   	push   ebx
c0010884:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0010889:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001088d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010891:	0f b6 c0             	movzx  eax,al
c0010894:	89 ca                	mov    edx,ecx
c0010896:	83 e1 07             	and    ecx,0x7
c0010899:	c1 ea 03             	shr    edx,0x3
c001089c:	d3 c3                	rol    ebx,cl
c001089e:	01 d6                	add    esi,edx
c00108a0:	d3 e0                	shl    eax,cl
c00108a2:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c00108a5:	21 fb                	and    ebx,edi
c00108a7:	88 1e                	mov    BYTE PTR [esi],bl
c00108a9:	8b 1d b8 fc 02 c0    	mov    ebx,DWORD PTR ds:0xc002fcb8
c00108af:	01 da                	add    edx,ebx
c00108b1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00108b3:	09 c8                	or     eax,ecx
c00108b5:	88 02                	mov    BYTE PTR [edx],al
c00108b7:	5b                   	pop    ebx
c00108b8:	5e                   	pop    esi
c00108b9:	5f                   	pop    edi
c00108ba:	c3                   	ret    

c00108bb <Phys::getPageState(unsigned long)>:
c00108bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00108bf:	8b 15 b8 fc 02 c0    	mov    edx,DWORD PTR ds:0xc002fcb8
c00108c5:	89 c8                	mov    eax,ecx
c00108c7:	83 e1 07             	and    ecx,0x7
c00108ca:	c1 e8 03             	shr    eax,0x3
c00108cd:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c00108d1:	d3 f8                	sar    eax,cl
c00108d3:	83 e0 01             	and    eax,0x1
c00108d6:	c3                   	ret    

c00108d7 <Phys::freePage(unsigned long)>:
c00108d7:	53                   	push   ebx
c00108d8:	83 ec 08             	sub    esp,0x8
c00108db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108df:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00108e5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00108eb:	76 41                	jbe    c001092e <Phys::freePage(unsigned long)+0x57>
c00108ed:	c1 e8 0c             	shr    eax,0xc
c00108f0:	50                   	push   eax
c00108f1:	89 c3                	mov    ebx,eax
c00108f3:	e8 c3 ff ff ff       	call   c00108bb <Phys::getPageState(unsigned long)>
c00108f8:	5a                   	pop    edx
c00108f9:	84 c0                	test   al,al
c00108fb:	74 20                	je     c001091d <Phys::freePage(unsigned long)+0x46>
c00108fd:	83 ec 08             	sub    esp,0x8
c0010900:	a1 78 61 03 c0       	mov    eax,ds:0xc0036178
c0010905:	6a 00                	push   0x0
c0010907:	83 e8 01             	sub    eax,0x1
c001090a:	53                   	push   ebx
c001090b:	a3 78 61 03 c0       	mov    ds:0xc0036178,eax
c0010910:	e8 66 ff ff ff       	call   c001087b <Phys::setPageState(unsigned long, bool)>
c0010915:	83 c4 10             	add    esp,0x10
c0010918:	83 c4 08             	add    esp,0x8
c001091b:	5b                   	pop    ebx
c001091c:	c3                   	ret    
c001091d:	c7 44 24 10 26 b7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b726
c0010925:	83 c4 08             	add    esp,0x8
c0010928:	5b                   	pop    ebx
c0010929:	e9 1e fe ff ff       	jmp    c001074c <KePanic(char const*)>
c001092e:	68 00 10 00 00       	push   0x1000
c0010933:	50                   	push   eax
c0010934:	e8 07 ff ff ff       	call   c0010840 <Phys::freeDMA(unsigned long, unsigned long)>
c0010939:	59                   	pop    ecx
c001093a:	5b                   	pop    ebx
c001093b:	83 c4 08             	add    esp,0x8
c001093e:	5b                   	pop    ebx
c001093f:	c3                   	ret    

c0010940 <Phys::allocatePage()>:
c0010940:	56                   	push   esi
c0010941:	53                   	push   ebx
c0010942:	83 ec 14             	sub    esp,0x14
c0010945:	8b 35 6c 61 03 c0    	mov    esi,DWORD PTR ds:0xc003616c
c001094b:	89 f3                	mov    ebx,esi
c001094d:	eb 18                	jmp    c0010967 <Phys::allocatePage()+0x27>
c001094f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010955:	75 0c                	jne    c0010963 <Phys::allocatePage()+0x23>
c0010957:	c7 05 6c 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003616c,0x0
c0010961:	31 db                	xor    ebx,ebx
c0010963:	39 de                	cmp    esi,ebx
c0010965:	74 5b                	je     c00109c2 <Phys::allocatePage()+0x82>
c0010967:	53                   	push   ebx
c0010968:	e8 4e ff ff ff       	call   c00108bb <Phys::getPageState(unsigned long)>
c001096d:	59                   	pop    ecx
c001096e:	84 c0                	test   al,al
c0010970:	74 29                	je     c001099b <Phys::allocatePage()+0x5b>
c0010972:	83 c3 01             	add    ebx,0x1
c0010975:	89 1d 6c 61 03 c0    	mov    DWORD PTR ds:0xc003616c,ebx
c001097b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010981:	76 cc                	jbe    c001094f <Phys::allocatePage()+0xf>
c0010983:	83 ec 0c             	sub    esp,0xc
c0010986:	68 3c b7 02 c0       	push   0xc002b73c
c001098b:	e8 bc fd ff ff       	call   c001074c <KePanic(char const*)>
c0010990:	8b 1d 6c 61 03 c0    	mov    ebx,DWORD PTR ds:0xc003616c
c0010996:	83 c4 10             	add    esp,0x10
c0010999:	eb b4                	jmp    c001094f <Phys::allocatePage()+0xf>
c001099b:	6a 01                	push   0x1
c001099d:	53                   	push   ebx
c001099e:	e8 d8 fe ff ff       	call   c001087b <Phys::setPageState(unsigned long, bool)>
c00109a3:	8b 1d 78 61 03 c0    	mov    ebx,DWORD PTR ds:0xc0036178
c00109a9:	a1 6c 61 03 c0       	mov    eax,ds:0xc003616c
c00109ae:	83 c3 01             	add    ebx,0x1
c00109b1:	5e                   	pop    esi
c00109b2:	89 1d 78 61 03 c0    	mov    DWORD PTR ds:0xc0036178,ebx
c00109b8:	c1 e0 0c             	shl    eax,0xc
c00109bb:	5a                   	pop    edx
c00109bc:	83 c4 14             	add    esp,0x14
c00109bf:	5b                   	pop    ebx
c00109c0:	5e                   	pop    esi
c00109c1:	c3                   	ret    
c00109c2:	83 ec 0c             	sub    esp,0xc
c00109c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00109cd:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c00109d3:	51                   	push   ecx
c00109d4:	e8 9f 43 00 00       	call   c0014d78 <VAS::scanForEviction()>
c00109d9:	83 c4 10             	add    esp,0x10
c00109dc:	85 c0                	test   eax,eax
c00109de:	75 1b                	jne    c00109fb <Phys::allocatePage()+0xbb>
c00109e0:	83 ec 0c             	sub    esp,0xc
c00109e3:	68 84 b7 02 c0       	push   0xc002b784
c00109e8:	e8 5f fd ff ff       	call   c001074c <KePanic(char const*)>
c00109ed:	8b 1d 6c 61 03 c0    	mov    ebx,DWORD PTR ds:0xc003616c
c00109f3:	83 c4 10             	add    esp,0x10
c00109f6:	e9 6c ff ff ff       	jmp    c0010967 <Phys::allocatePage()+0x27>
c00109fb:	83 ec 08             	sub    esp,0x8
c00109fe:	8b 15 78 61 03 c0    	mov    edx,DWORD PTR ds:0xc0036178
c0010a04:	6a 01                	push   0x1
c0010a06:	83 c2 01             	add    edx,0x1
c0010a09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010a0d:	89 15 78 61 03 c0    	mov    DWORD PTR ds:0xc0036178,edx
c0010a13:	89 c2                	mov    edx,eax
c0010a15:	c1 ea 0c             	shr    edx,0xc
c0010a18:	52                   	push   edx
c0010a19:	e8 5d fe ff ff       	call   c001087b <Phys::setPageState(unsigned long, bool)>
c0010a1e:	83 c4 10             	add    esp,0x10
c0010a21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a25:	eb 95                	jmp    c00109bc <Phys::allocatePage()+0x7c>

c0010a27 <Phys::allocateContiguousPages(int)>:
c0010a27:	57                   	push   edi
c0010a28:	56                   	push   esi
c0010a29:	53                   	push   ebx
c0010a2a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010a2e:	fa                   	cli    
c0010a2f:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c0010a35:	83 ec 0c             	sub    esp,0xc
c0010a38:	83 c2 01             	add    edx,0x1
c0010a3b:	68 b4 b7 02 c0       	push   0xc002b7b4
c0010a40:	89 15 30 63 03 c0    	mov    DWORD PTR ds:0xc0036330,edx
c0010a46:	31 db                	xor    ebx,ebx
c0010a48:	e8 2f 65 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010a4d:	83 c4 10             	add    esp,0x10
c0010a50:	85 db                	test   ebx,ebx
c0010a52:	75 11                	jne    c0010a65 <Phys::allocateContiguousPages(int)+0x3e>
c0010a54:	e8 e7 fe ff ff       	call   c0010940 <Phys::allocatePage()>
c0010a59:	83 ff 01             	cmp    edi,0x1
c0010a5c:	89 c6                	mov    esi,eax
c0010a5e:	74 21                	je     c0010a81 <Phys::allocateContiguousPages(int)+0x5a>
c0010a60:	bb 01 00 00 00       	mov    ebx,0x1
c0010a65:	e8 d6 fe ff ff       	call   c0010940 <Phys::allocatePage()>
c0010a6a:	89 da                	mov    edx,ebx
c0010a6c:	c1 e2 0c             	shl    edx,0xc
c0010a6f:	01 f2                	add    edx,esi
c0010a71:	39 c2                	cmp    edx,eax
c0010a73:	74 24                	je     c0010a99 <Phys::allocateContiguousPages(int)+0x72>
c0010a75:	bb 01 00 00 00       	mov    ebx,0x1
c0010a7a:	89 c6                	mov    esi,eax
c0010a7c:	83 ff 01             	cmp    edi,0x1
c0010a7f:	75 e4                	jne    c0010a65 <Phys::allocateContiguousPages(int)+0x3e>
c0010a81:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0010a89:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0010a8e:	85 c0                	test   eax,eax
c0010a90:	75 01                	jne    c0010a93 <Phys::allocateContiguousPages(int)+0x6c>
c0010a92:	fb                   	sti    
c0010a93:	89 f0                	mov    eax,esi
c0010a95:	5b                   	pop    ebx
c0010a96:	5e                   	pop    esi
c0010a97:	5f                   	pop    edi
c0010a98:	c3                   	ret    
c0010a99:	83 c3 01             	add    ebx,0x1
c0010a9c:	39 fb                	cmp    ebx,edi
c0010a9e:	75 b0                	jne    c0010a50 <Phys::allocateContiguousPages(int)+0x29>
c0010aa0:	eb df                	jmp    c0010a81 <Phys::allocateContiguousPages(int)+0x5a>

c0010aa2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010aa2:	56                   	push   esi
c0010aa3:	53                   	push   ebx
c0010aa4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010aa8:	39 1d 70 61 03 c0    	cmp    DWORD PTR ds:0xc0036170,ebx
c0010aae:	73 06                	jae    c0010ab6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010ab0:	89 1d 70 61 03 c0    	mov    DWORD PTR ds:0xc0036170,ebx
c0010ab6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010aba:	c1 eb 0c             	shr    ebx,0xc
c0010abd:	c1 e8 0c             	shr    eax,0xc
c0010ac0:	39 d8                	cmp    eax,ebx
c0010ac2:	73 13                	jae    c0010ad7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010ac4:	6a 00                	push   0x0
c0010ac6:	8d 70 01             	lea    esi,[eax+0x1]
c0010ac9:	50                   	push   eax
c0010aca:	e8 ac fd ff ff       	call   c001087b <Phys::setPageState(unsigned long, bool)>
c0010acf:	5a                   	pop    edx
c0010ad0:	89 f0                	mov    eax,esi
c0010ad2:	59                   	pop    ecx
c0010ad3:	39 f3                	cmp    ebx,esi
c0010ad5:	75 ed                	jne    c0010ac4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010ad7:	5b                   	pop    ebx
c0010ad8:	5e                   	pop    esi
c0010ad9:	c3                   	ret    

c0010ada <Phys::physicalMemorySetup(unsigned int)>:
c0010ada:	55                   	push   ebp
c0010adb:	57                   	push   edi
c0010adc:	56                   	push   esi
c0010add:	53                   	push   ebx
c0010ade:	83 ec 40             	sub    esp,0x40
c0010ae1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0010ae5:	6a 10                	push   0x10
c0010ae7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0010aed:	6a 00                	push   0x0
c0010aef:	68 80 61 03 c0       	push   0xc0036180
c0010af4:	e8 f7 f9 fe ff       	call   c00004f0 <memset>
c0010af9:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c0010aff:	31 db                	xor    ebx,ebx
c0010b01:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010b05:	5a                   	pop    edx
c0010b06:	59                   	pop    ecx
c0010b07:	50                   	push   eax
c0010b08:	68 41 b7 02 c0       	push   0xc002b741
c0010b0d:	e8 6a 64 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010b12:	83 c4 10             	add    esp,0x10
c0010b15:	83 ec 08             	sub    esp,0x8
c0010b18:	6a 01                	push   0x1
c0010b1a:	53                   	push   ebx
c0010b1b:	83 c3 01             	add    ebx,0x1
c0010b1e:	e8 58 fd ff ff       	call   c001087b <Phys::setPageState(unsigned long, bool)>
c0010b23:	83 c4 10             	add    esp,0x10
c0010b26:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010b2c:	75 e7                	jne    c0010b15 <Phys::physicalMemorySetup(unsigned int)+0x3b>
c0010b2e:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0010b35:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010b3c:	c1 e0 08             	shl    eax,0x8
c0010b3f:	09 c2                	or     edx,eax
c0010b41:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0010b45:	0f 84 b5 01 00 00    	je     c0010d00 <Phys::physicalMemorySetup(unsigned int)+0x226>
c0010b4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b4f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010b57:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010b5c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010b60:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010b68:	eb 1c                	jmp    c0010b86 <Phys::physicalMemorySetup(unsigned int)+0xac>
c0010b6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b6e:	83 c3 18             	add    ebx,0x18
c0010b71:	83 c0 01             	add    eax,0x1
c0010b74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010b78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b7c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010b80:	0f 84 5d 01 00 00    	je     c0010ce3 <Phys::physicalMemorySetup(unsigned int)+0x209>
c0010b86:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010b89:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010b8c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010b93:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010b97:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010b99:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010b9c:	01 f0                	add    eax,esi
c0010b9e:	55                   	push   ebp
c0010b9f:	11 fa                	adc    edx,edi
c0010ba1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ba5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010ba9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bad:	50                   	push   eax
c0010bae:	56                   	push   esi
c0010baf:	68 14 b8 02 c0       	push   0xc002b814
c0010bb4:	e8 c3 63 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010bb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010bbd:	83 c4 10             	add    esp,0x10
c0010bc0:	09 f8                	or     eax,edi
c0010bc2:	0f 85 1b 01 00 00    	jne    c0010ce3 <Phys::physicalMemorySetup(unsigned int)+0x209>
c0010bc8:	83 fd 01             	cmp    ebp,0x1
c0010bcb:	75 9d                	jne    c0010b6a <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010bcd:	ba 00 00 08 00       	mov    edx,0x80000
c0010bd2:	89 c1                	mov    ecx,eax
c0010bd4:	39 f2                	cmp    edx,esi
c0010bd6:	19 f9                	sbb    ecx,edi
c0010bd8:	0f 82 ab 00 00 00    	jb     c0010c89 <Phys::physicalMemorySetup(unsigned int)+0x1af>
c0010bde:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010be2:	89 c1                	mov    ecx,eax
c0010be4:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010be8:	0f 83 9b 00 00 00    	jae    c0010c89 <Phys::physicalMemorySetup(unsigned int)+0x1af>
c0010bee:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010bf3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010bf7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010bfb:	39 fa                	cmp    edx,edi
c0010bfd:	19 e8                	sbb    eax,ebp
c0010bff:	0f 82 e6 00 00 00    	jb     c0010ceb <Phys::physicalMemorySetup(unsigned int)+0x211>
c0010c05:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010c09:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010c0d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010c13:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010c18:	83 d5 ff             	adc    ebp,0xffffffff
c0010c1b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010c1f:	31 c0                	xor    eax,eax
c0010c21:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010c25:	39 fa                	cmp    edx,edi
c0010c27:	89 c1                	mov    ecx,eax
c0010c29:	19 e9                	sbb    ecx,ebp
c0010c2b:	0f 83 39 ff ff ff    	jae    c0010b6a <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010c31:	be 00 00 08 00       	mov    esi,0x80000
c0010c36:	83 ec 04             	sub    esp,0x4
c0010c39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010c3d:	57                   	push   edi
c0010c3e:	56                   	push   esi
c0010c3f:	68 38 b8 02 c0       	push   0xc002b838
c0010c44:	e8 33 63 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010c49:	5a                   	pop    edx
c0010c4a:	59                   	pop    ecx
c0010c4b:	57                   	push   edi
c0010c4c:	56                   	push   esi
c0010c4d:	e8 50 fe ff ff       	call   c0010aa2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010c52:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010c56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010c5a:	8b 35 7c 61 03 c0    	mov    esi,DWORD PTR ds:0xc003617c
c0010c60:	83 c4 0c             	add    esp,0xc
c0010c63:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010c67:	01 f0                	add    eax,esi
c0010c69:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010c70:	a3 7c 61 03 c0       	mov    ds:0xc003617c,eax
c0010c75:	52                   	push   edx
c0010c76:	50                   	push   eax
c0010c77:	68 67 b7 02 c0       	push   0xc002b767
c0010c7c:	e8 fb 62 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010c81:	83 c4 10             	add    esp,0x10
c0010c84:	e9 e1 fe ff ff       	jmp    c0010b6a <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010c89:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010c8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c95:	39 ea                	cmp    edx,ebp
c0010c97:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010c9b:	0f 82 c9 fe ff ff    	jb     c0010b6a <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010ca1:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010ca6:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010caa:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010cae:	0f 83 b6 fe ff ff    	jae    c0010b6a <Phys::physicalMemorySetup(unsigned int)+0x90>
c0010cb4:	39 ee                	cmp    esi,ebp
c0010cb6:	89 f8                	mov    eax,edi
c0010cb8:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010cbc:	0f 83 74 ff ff ff    	jae    c0010c36 <Phys::physicalMemorySetup(unsigned int)+0x15c>
c0010cc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010cca:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010cce:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010cd2:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010cd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010cda:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010cde:	e9 53 ff ff ff       	jmp    c0010c36 <Phys::physicalMemorySetup(unsigned int)+0x15c>
c0010ce3:	83 c4 3c             	add    esp,0x3c
c0010ce6:	5b                   	pop    ebx
c0010ce7:	5e                   	pop    esi
c0010ce8:	5f                   	pop    edi
c0010ce9:	5d                   	pop    ebp
c0010cea:	c3                   	ret    
c0010ceb:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010cf3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010cfb:	e9 05 ff ff ff       	jmp    c0010c05 <Phys::physicalMemorySetup(unsigned int)+0x12b>
c0010d00:	c7 44 24 50 59 b7 02 c0 	mov    DWORD PTR [esp+0x50],0xc002b759
c0010d08:	83 c4 3c             	add    esp,0x3c
c0010d0b:	5b                   	pop    ebx
c0010d0c:	5e                   	pop    esi
c0010d0d:	5f                   	pop    edi
c0010d0e:	5d                   	pop    ebp
c0010d0f:	e9 38 fa ff ff       	jmp    c001074c <KePanic(char const*)>

c0010d14 <Pipe::isAtty()>:
c0010d14:	31 c0                	xor    eax,eax
c0010d16:	c3                   	ret    
c0010d17:	90                   	nop

c0010d18 <Pipe::~Pipe()>:
c0010d18:	83 ec 0c             	sub    esp,0xc
c0010d1b:	ba a4 b8 02 c0       	mov    edx,0xc002b8a4
c0010d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d24:	89 10                	mov    DWORD PTR [eax],edx
c0010d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d2a:	83 ec 0c             	sub    esp,0xc
c0010d2d:	50                   	push   eax
c0010d2e:	e8 43 2d 00 00       	call   c0013a76 <UnixFile::~UnixFile()>
c0010d33:	83 c4 10             	add    esp,0x10
c0010d36:	90                   	nop
c0010d37:	83 c4 0c             	add    esp,0xc
c0010d3a:	c3                   	ret    
c0010d3b:	90                   	nop

c0010d3c <Pipe::~Pipe()>:
c0010d3c:	83 ec 0c             	sub    esp,0xc
c0010d3f:	83 ec 0c             	sub    esp,0xc
c0010d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d46:	e8 cd ff ff ff       	call   c0010d18 <Pipe::~Pipe()>
c0010d4b:	83 c4 10             	add    esp,0x10
c0010d4e:	83 ec 08             	sub    esp,0x8
c0010d51:	6a 20                	push   0x20
c0010d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d57:	e8 a8 d0 ff ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0010d5c:	83 c4 10             	add    esp,0x10
c0010d5f:	83 c4 0c             	add    esp,0xc
c0010d62:	c3                   	ret    
c0010d63:	90                   	nop

c0010d64 <Pipe::write(unsigned long long, void*, int*)>:
c0010d64:	55                   	push   ebp
c0010d65:	57                   	push   edi
c0010d66:	56                   	push   esi
c0010d67:	53                   	push   ebx
c0010d68:	83 ec 1c             	sub    esp,0x1c
c0010d6b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010d6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010d73:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010d76:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010d7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d7d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010d81:	89 d8                	mov    eax,ebx
c0010d83:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010d86:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010d8a:	89 d6                	mov    esi,edx
c0010d8c:	89 d7                	mov    edi,edx
c0010d8e:	c1 ff 1f             	sar    edi,0x1f
c0010d91:	03 34 24             	add    esi,DWORD PTR [esp]
c0010d94:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010d98:	c1 f8 1f             	sar    eax,0x1f
c0010d9b:	39 f3                	cmp    ebx,esi
c0010d9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010da1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010da5:	19 f8                	sbb    eax,edi
c0010da7:	b8 01 00 00 00       	mov    eax,0x1
c0010dac:	72 6e                	jb     c0010e1c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010dae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010db1:	01 d0                	add    eax,edx
c0010db3:	99                   	cdq    
c0010db4:	f7 fb                	idiv   ebx
c0010db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dba:	29 d3                	sub    ebx,edx
c0010dbc:	89 d7                	mov    edi,edx
c0010dbe:	89 de                	mov    esi,ebx
c0010dc0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010dc3:	c1 fb 1f             	sar    ebx,0x1f
c0010dc6:	39 f2                	cmp    edx,esi
c0010dc8:	19 d8                	sbb    eax,ebx
c0010dca:	b8 00 00 00 00       	mov    eax,0x0
c0010dcf:	72 04                	jb     c0010dd5 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010dd1:	89 d0                	mov    eax,edx
c0010dd3:	29 f0                	sub    eax,esi
c0010dd5:	89 d3                	mov    ebx,edx
c0010dd7:	29 c3                	sub    ebx,eax
c0010dd9:	74 0b                	je     c0010de6 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010ddb:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010dde:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010de2:	89 d9                	mov    ecx,ebx
c0010de4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010de6:	85 c0                	test   eax,eax
c0010de8:	74 0d                	je     c0010df7 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010dea:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010dee:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010df1:	89 de                	mov    esi,ebx
c0010df3:	89 c1                	mov    ecx,eax
c0010df5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010df7:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010dfa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010dff:	75 10                	jne    c0010e11 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010e01:	83 ec 0c             	sub    esp,0xc
c0010e04:	68 61 b8 02 c0       	push   0xc002b861
c0010e09:	e8 3e f9 ff ff       	call   c001074c <KePanic(char const*)>
c0010e0e:	83 c4 10             	add    esp,0x10
c0010e11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010e15:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010e18:	89 08                	mov    DWORD PTR [eax],ecx
c0010e1a:	31 c0                	xor    eax,eax
c0010e1c:	83 c4 1c             	add    esp,0x1c
c0010e1f:	5b                   	pop    ebx
c0010e20:	5e                   	pop    esi
c0010e21:	5f                   	pop    edi
c0010e22:	5d                   	pop    ebp
c0010e23:	c3                   	ret    

c0010e24 <Pipe::read(unsigned long long, void*, int*)>:
c0010e24:	55                   	push   ebp
c0010e25:	57                   	push   edi
c0010e26:	56                   	push   esi
c0010e27:	53                   	push   ebx
c0010e28:	83 ec 1c             	sub    esp,0x1c
c0010e2b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010e2f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010e33:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010e37:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010e3a:	89 c8                	mov    eax,ecx
c0010e3c:	99                   	cdq    
c0010e3d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010e41:	74 27                	je     c0010e6a <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010e43:	39 f9                	cmp    ecx,edi
c0010e45:	89 d1                	mov    ecx,edx
c0010e47:	19 f1                	sbb    ecx,esi
c0010e49:	73 1f                	jae    c0010e6a <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010e4b:	fa                   	cli    
c0010e4c:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0010e52:	e8 8d 64 00 00       	call   c00172e4 <schedule()>
c0010e57:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0010e5e:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0010e65:	75 d0                	jne    c0010e37 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010e67:	fb                   	sti    
c0010e68:	eb cd                	jmp    c0010e37 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010e6a:	39 f8                	cmp    eax,edi
c0010e6c:	89 d1                	mov    ecx,edx
c0010e6e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e71:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010e75:	19 f1                	sbb    ecx,esi
c0010e77:	73 07                	jae    c0010e80 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c0010e79:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010e80:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010e83:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010e86:	29 f7                	sub    edi,esi
c0010e88:	89 f8                	mov    eax,edi
c0010e8a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010e8e:	99                   	cdq    
c0010e8f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010e92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e96:	19 d0                	sbb    eax,edx
c0010e98:	73 07                	jae    c0010ea1 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c0010e9a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010e9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ea1:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010ea4:	89 ea                	mov    edx,ebp
c0010ea6:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010eaa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010eaf:	74 0d                	je     c0010ebe <Pipe::read(unsigned long long, void*, int*)+0x9a>
c0010eb1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010eb4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010eb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ebc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ebe:	85 d2                	test   edx,edx
c0010ec0:	74 11                	je     c0010ed3 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010ec2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ec6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010ec9:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010ecd:	89 d1                	mov    ecx,edx
c0010ecf:	89 c7                	mov    edi,eax
c0010ed1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ed3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010ed6:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010ed9:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010edc:	99                   	cdq    
c0010edd:	89 f7                	mov    edi,esi
c0010edf:	03 04 24             	add    eax,DWORD PTR [esp]
c0010ee2:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010ee6:	c1 ff 1f             	sar    edi,0x1f
c0010ee9:	57                   	push   edi
c0010eea:	56                   	push   esi
c0010eeb:	52                   	push   edx
c0010eec:	50                   	push   eax
c0010eed:	e8 a2 36 01 00       	call   c0024594 <__umoddi3>
c0010ef2:	83 c4 10             	add    esp,0x10
c0010ef5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010ef8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010efd:	75 10                	jne    c0010f0f <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010eff:	83 ec 0c             	sub    esp,0xc
c0010f02:	68 7e b8 02 c0       	push   0xc002b87e
c0010f07:	e8 40 f8 ff ff       	call   c001074c <KePanic(char const*)>
c0010f0c:	83 c4 10             	add    esp,0x10
c0010f0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f13:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010f16:	89 10                	mov    DWORD PTR [eax],edx
c0010f18:	83 c4 1c             	add    esp,0x1c
c0010f1b:	31 c0                	xor    eax,eax
c0010f1d:	5b                   	pop    ebx
c0010f1e:	5e                   	pop    esi
c0010f1f:	5f                   	pop    edi
c0010f20:	5d                   	pop    ebp
c0010f21:	c3                   	ret    

c0010f22 <Pipe::Pipe(int)>:
c0010f22:	83 ec 0c             	sub    esp,0xc
c0010f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f29:	83 ec 08             	sub    esp,0x8
c0010f2c:	6a 00                	push   0x0
c0010f2e:	50                   	push   eax
c0010f2f:	e8 5c 29 00 00       	call   c0013890 <UnixFile::UnixFile(int)>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	ba a4 b8 02 c0       	mov    edx,0xc002b8a4
c0010f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f40:	89 10                	mov    DWORD PTR [eax],edx
c0010f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f4a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f51:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010f63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f67:	83 ec 0c             	sub    esp,0xc
c0010f6a:	50                   	push   eax
c0010f6b:	e8 87 f3 ff ff       	call   c00102f7 <malloc>
c0010f70:	83 c4 10             	add    esp,0x10
c0010f73:	89 c2                	mov    edx,eax
c0010f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f79:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f80:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010f84:	90                   	nop
c0010f85:	83 c4 0c             	add    esp,0xc
c0010f88:	c3                   	ret    

c0010f89 <KePowerThread(void*)>:
c0010f89:	83 ec 0c             	sub    esp,0xc
c0010f8c:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0010f93:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0010f9a:	75 01                	jne    c0010f9d <KePowerThread(void*)+0x14>
c0010f9c:	fb                   	sti    
c0010f9d:	c6 05 ac 61 03 c0 00 	mov    BYTE PTR ds:0xc00361ac,0x0
c0010fa4:	50                   	push   eax
c0010fa5:	50                   	push   eax
c0010fa6:	6a 00                	push   0x0
c0010fa8:	6a 0a                	push   0xa
c0010faa:	e8 41 65 00 00       	call   c00174f0 <sleep(unsigned long long)>
c0010faf:	83 05 e4 61 03 c0 0a 	add    DWORD PTR ds:0xc00361e4,0xa
c0010fb6:	83 c4 10             	add    esp,0x10
c0010fb9:	eb e2                	jmp    c0010f9d <KePowerThread(void*)+0x14>

c0010fbb <KeChangePowerSettings(PowerSettings)>:
c0010fbb:	57                   	push   edi
c0010fbc:	b9 09 00 00 00       	mov    ecx,0x9
c0010fc1:	56                   	push   esi
c0010fc2:	bf c0 61 03 c0       	mov    edi,0xc00361c0
c0010fc7:	fc                   	cld    
c0010fc8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010fcc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010fce:	5e                   	pop    esi
c0010fcf:	5f                   	pop    edi
c0010fd0:	c3                   	ret    

c0010fd1 <KeUserIOReceived()>:
c0010fd1:	c7 05 e4 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361e4,0x0
c0010fdb:	c3                   	ret    

c0010fdc <KeSetupPowerManager()>:
c0010fdc:	83 ec 0c             	sub    esp,0xc
c0010fdf:	c7 05 e4 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361e4,0x0
c0010fe9:	68 f0 00 00 00       	push   0xf0
c0010fee:	c6 05 ac 61 03 c0 00 	mov    BYTE PTR ds:0xc00361ac,0x0
c0010ff5:	6a 00                	push   0x0
c0010ff7:	68 89 0f 01 c0       	push   0xc0010f89
c0010ffc:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c0011002:	e8 11 60 00 00       	call   c0017018 <Process::createThread(void (*)(void*), void*, int)>
c0011007:	c7 05 c0 61 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00361c0,0x2
c0011011:	c7 05 c4 61 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00361c4,0x1
c001101b:	c7 05 c8 61 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00361c8,0x3
c0011025:	c7 05 cc 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361cc,0x0
c001102f:	c7 05 d8 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361d8,0x0
c0011039:	c7 05 d0 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361d0,0x0
c0011043:	c7 05 dc 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361dc,0x0
c001104d:	c7 05 d4 61 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00361d4,0x3c
c0011057:	c7 05 e0 61 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00361e0,0x3c
c0011061:	83 c4 1c             	add    esp,0x1c
c0011064:	c3                   	ret    

c0011065 <KePrepareShutdown()>:
c0011065:	83 ec 0c             	sub    esp,0xc
c0011068:	e8 63 cc ff ff       	call   c000dcd0 <KeExecuteAtexit()>
c001106d:	83 ec 0c             	sub    esp,0xc
c0011070:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c0011075:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c001107b:	e8 68 96 ff ff       	call   c000a6e8 <Device::closeAll()>
c0011080:	83 c4 1c             	add    esp,0x1c
c0011083:	c3                   	ret    

c0011084 <KeRegisterShutdownHandler(void (*)())>:
c0011084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011088:	a3 a8 61 03 c0       	mov    ds:0xc00361a8,eax
c001108d:	c3                   	ret    

c001108e <KeRegisterRestartHandler(void (*)())>:
c001108e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011092:	a3 a4 61 03 c0       	mov    ds:0xc00361a4,eax
c0011097:	c3                   	ret    

c0011098 <KeRegisterSleepHandler(void (*)())>:
c0011098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001109c:	a3 a0 61 03 c0       	mov    ds:0xc00361a0,eax
c00110a1:	c3                   	ret    

c00110a2 <KeShutdown()>:
c00110a2:	83 ec 0c             	sub    esp,0xc
c00110a5:	e8 bb ff ff ff       	call   c0011065 <KePrepareShutdown()>
c00110aa:	a1 a8 61 03 c0       	mov    eax,ds:0xc00361a8
c00110af:	85 c0                	test   eax,eax
c00110b1:	74 04                	je     c00110b7 <KeShutdown()+0x15>
c00110b3:	ff d0                	call   eax
c00110b5:	eb 10                	jmp    c00110c7 <KeShutdown()+0x25>
c00110b7:	83 ec 0c             	sub    esp,0xc
c00110ba:	68 b8 b8 02 c0       	push   0xc002b8b8
c00110bf:	e8 88 f6 ff ff       	call   c001074c <KePanic(char const*)>
c00110c4:	83 c4 10             	add    esp,0x10
c00110c7:	83 ec 0c             	sub    esp,0xc
c00110ca:	68 d9 b8 02 c0       	push   0xc002b8d9
c00110cf:	e8 78 f6 ff ff       	call   c001074c <KePanic(char const*)>
c00110d4:	83 c4 1c             	add    esp,0x1c
c00110d7:	c3                   	ret    

c00110d8 <KeSleep()>:
c00110d8:	a1 a0 61 03 c0       	mov    eax,ds:0xc00361a0
c00110dd:	85 c0                	test   eax,eax
c00110df:	74 02                	je     c00110e3 <KeSleep()+0xb>
c00110e1:	ff e0                	jmp    eax
c00110e3:	c3                   	ret    

c00110e4 <KeHandlePowerButton()>:
c00110e4:	a1 c0 61 03 c0       	mov    eax,ds:0xc00361c0
c00110e9:	83 f8 02             	cmp    eax,0x2
c00110ec:	75 02                	jne    c00110f0 <KeHandlePowerButton()+0xc>
c00110ee:	eb b2                	jmp    c00110a2 <KeShutdown()>
c00110f0:	48                   	dec    eax
c00110f1:	75 02                	jne    c00110f5 <KeHandlePowerButton()+0x11>
c00110f3:	eb e3                	jmp    c00110d8 <KeSleep()>
c00110f5:	c3                   	ret    

c00110f6 <KeHandleSleepButton()>:
c00110f6:	a1 c4 61 03 c0       	mov    eax,ds:0xc00361c4
c00110fb:	83 f8 02             	cmp    eax,0x2
c00110fe:	75 02                	jne    c0011102 <KeHandleSleepButton()+0xc>
c0011100:	eb a0                	jmp    c00110a2 <KeShutdown()>
c0011102:	48                   	dec    eax
c0011103:	75 02                	jne    c0011107 <KeHandleSleepButton()+0x11>
c0011105:	eb d1                	jmp    c00110d8 <KeSleep()>
c0011107:	c3                   	ret    

c0011108 <KeRestart()>:
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	e8 55 ff ff ff       	call   c0011065 <KePrepareShutdown()>
c0011110:	a1 a4 61 03 c0       	mov    eax,ds:0xc00361a4
c0011115:	85 c0                	test   eax,eax
c0011117:	74 02                	je     c001111b <KeRestart()+0x13>
c0011119:	ff d0                	call   eax
c001111b:	83 ec 0c             	sub    esp,0xc
c001111e:	68 fd b8 02 c0       	push   0xc002b8fd
c0011123:	e8 24 f6 ff ff       	call   c001074c <KePanic(char const*)>
c0011128:	83 c4 1c             	add    esp,0x1c
c001112b:	c3                   	ret    

c001112c <KeRand()>:
c001112c:	69 05 e8 61 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00361e8,0x2875
c0011136:	69 0d ec 61 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00361ec,0xa2e7b175
c0011140:	53                   	push   ebx
c0011141:	01 c1                	add    ecx,eax
c0011143:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011148:	f7 25 e8 61 03 c0    	mul    DWORD PTR ds:0xc00361e8
c001114e:	01 ca                	add    edx,ecx
c0011150:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011155:	83 d2 00             	adc    edx,0x0
c0011158:	a3 e8 61 03 c0       	mov    ds:0xc00361e8,eax
c001115d:	0f b7 da             	movzx  ebx,dx
c0011160:	89 da                	mov    edx,ebx
c0011162:	89 1d ec 61 03 c0    	mov    DWORD PTR ds:0xc00361ec,ebx
c0011168:	0f ac d0 0e          	shrd   eax,edx,0xe
c001116c:	5b                   	pop    ebx
c001116d:	c3                   	ret    

c001116e <KeSeedRand(unsigned int)>:
c001116e:	53                   	push   ebx
c001116f:	83 ec 08             	sub    esp,0x8
c0011172:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011176:	e8 9a a4 00 00       	call   c001b615 <HalGetRand()>
c001117b:	c7 05 ec 61 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00361ec,0x0
c0011185:	31 d8                	xor    eax,ebx
c0011187:	a3 e8 61 03 c0       	mov    ds:0xc00361e8,eax
c001118c:	e8 9b ff ff ff       	call   c001112c <KeRand()>
c0011191:	83 c4 08             	add    esp,0x8
c0011194:	5b                   	pop    ebx
c0011195:	eb 95                	jmp    c001112c <KeRand()>

c0011197 <KeInitRand()>:
c0011197:	83 ec 0c             	sub    esp,0xc
c001119a:	e8 44 a2 00 00       	call   c001b3e3 <HalQueryPerformanceCounter()>
c001119f:	0f 20 da             	mov    edx,cr3
c00111a2:	0f 22 da             	mov    cr3,edx
c00111a5:	0f 20 da             	mov    edx,cr3
c00111a8:	0f 22 da             	mov    cr3,edx
c00111ab:	0f 20 da             	mov    edx,cr3
c00111ae:	0f 22 da             	mov    cr3,edx
c00111b1:	0f 20 da             	mov    edx,cr3
c00111b4:	0f 22 da             	mov    cr3,edx
c00111b7:	83 ec 0c             	sub    esp,0xc
c00111ba:	35 03 8a 95 38       	xor    eax,0x38958a03
c00111bf:	50                   	push   eax
c00111c0:	e8 a9 ff ff ff       	call   c001116e <KeSeedRand(unsigned int)>
c00111c5:	83 c4 1c             	add    esp,0x1c
c00111c8:	c3                   	ret    
c00111c9:	66 90                	xchg   ax,ax
c00111cb:	90                   	nop

c00111cc <KeResolveCompatibilitySymbol(char*)>:
c00111cc:	83 ec 0c             	sub    esp,0xc
c00111cf:	83 ec 08             	sub    esp,0x8
c00111d2:	68 0c b9 02 c0       	push   0xc002b90c
c00111d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111db:	e8 70 f5 fe ff       	call   c0000750 <strcmp>
c00111e0:	83 c4 10             	add    esp,0x10
c00111e3:	85 c0                	test   eax,eax
c00111e5:	0f 94 c0             	sete   al
c00111e8:	0f b6 c0             	movzx  eax,al
c00111eb:	85 c0                	test   eax,eax
c00111ed:	74 0d                	je     c00111fc <KeResolveCompatibilitySymbol(char*)+0x30>
c00111ef:	b8 08 61 03 c0       	mov    eax,0xc0036108
c00111f4:	e9 3b 02 00 00       	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c00111f9:	8d 76 00             	lea    esi,[esi+0x0]
c00111fc:	83 ec 08             	sub    esp,0x8
c00111ff:	68 15 b9 02 c0       	push   0xc002b915
c0011204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011208:	e8 43 f5 fe ff       	call   c0000750 <strcmp>
c001120d:	83 c4 10             	add    esp,0x10
c0011210:	85 c0                	test   eax,eax
c0011212:	0f 94 c0             	sete   al
c0011215:	0f b6 c0             	movzx  eax,al
c0011218:	85 c0                	test   eax,eax
c001121a:	74 0c                	je     c0011228 <KeResolveCompatibilitySymbol(char*)+0x5c>
c001121c:	b8 94 44 02 c0       	mov    eax,0xc0024494
c0011221:	e9 0e 02 00 00       	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011226:	66 90                	xchg   ax,ax
c0011228:	83 ec 08             	sub    esp,0x8
c001122b:	68 1f b9 02 c0       	push   0xc002b91f
c0011230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011234:	e8 17 f5 fe ff       	call   c0000750 <strcmp>
c0011239:	83 c4 10             	add    esp,0x10
c001123c:	85 c0                	test   eax,eax
c001123e:	0f 94 c0             	sete   al
c0011241:	0f b6 c0             	movzx  eax,al
c0011244:	85 c0                	test   eax,eax
c0011246:	74 0c                	je     c0011254 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011248:	b8 08 61 03 c0       	mov    eax,0xc0036108
c001124d:	e9 e2 01 00 00       	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011252:	66 90                	xchg   ax,ax
c0011254:	83 ec 08             	sub    esp,0x8
c0011257:	68 32 b9 02 c0       	push   0xc002b932
c001125c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011260:	e8 eb f4 fe ff       	call   c0000750 <strcmp>
c0011265:	83 c4 10             	add    esp,0x10
c0011268:	85 c0                	test   eax,eax
c001126a:	0f 94 c0             	sete   al
c001126d:	0f b6 c0             	movzx  eax,al
c0011270:	85 c0                	test   eax,eax
c0011272:	74 0c                	je     c0011280 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011274:	b8 c8 41 02 c0       	mov    eax,0xc00241c8
c0011279:	e9 b6 01 00 00       	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c001127e:	66 90                	xchg   ax,ax
c0011280:	83 ec 08             	sub    esp,0x8
c0011283:	68 3b b9 02 c0       	push   0xc002b93b
c0011288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128c:	e8 bf f4 fe ff       	call   c0000750 <strcmp>
c0011291:	83 c4 10             	add    esp,0x10
c0011294:	85 c0                	test   eax,eax
c0011296:	0f 94 c0             	sete   al
c0011299:	0f b6 c0             	movzx  eax,al
c001129c:	85 c0                	test   eax,eax
c001129e:	74 0c                	je     c00112ac <KeResolveCompatibilitySymbol(char*)+0xe0>
c00112a0:	b8 4c 07 01 c0       	mov    eax,0xc001074c
c00112a5:	e9 8a 01 00 00       	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c00112aa:	66 90                	xchg   ax,ax
c00112ac:	83 ec 08             	sub    esp,0x8
c00112af:	68 4e b9 02 c0       	push   0xc002b94e
c00112b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b8:	e8 93 f4 fe ff       	call   c0000750 <strcmp>
c00112bd:	83 c4 10             	add    esp,0x10
c00112c0:	85 c0                	test   eax,eax
c00112c2:	0f 94 c0             	sete   al
c00112c5:	0f b6 c0             	movzx  eax,al
c00112c8:	85 c0                	test   eax,eax
c00112ca:	74 0c                	je     c00112d8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00112cc:	b8 59 dd 00 c0       	mov    eax,0xc000dd59
c00112d1:	e9 5e 01 00 00       	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c00112d6:	66 90                	xchg   ax,ax
c00112d8:	83 ec 08             	sub    esp,0x8
c00112db:	68 6b b9 02 c0       	push   0xc002b96b
c00112e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e4:	e8 67 f4 fe ff       	call   c0000750 <strcmp>
c00112e9:	83 c4 10             	add    esp,0x10
c00112ec:	85 c0                	test   eax,eax
c00112ee:	0f 94 c0             	sete   al
c00112f1:	0f b6 c0             	movzx  eax,al
c00112f4:	85 c0                	test   eax,eax
c00112f6:	74 0c                	je     c0011304 <KeResolveCompatibilitySymbol(char*)+0x138>
c00112f8:	b8 94 45 02 c0       	mov    eax,0xc0024594
c00112fd:	e9 32 01 00 00       	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011302:	66 90                	xchg   ax,ax
c0011304:	83 ec 08             	sub    esp,0x8
c0011307:	68 75 b9 02 c0       	push   0xc002b975
c001130c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011310:	e8 3b f4 fe ff       	call   c0000750 <strcmp>
c0011315:	83 c4 10             	add    esp,0x10
c0011318:	85 c0                	test   eax,eax
c001131a:	0f 94 c0             	sete   al
c001131d:	0f b6 c0             	movzx  eax,al
c0011320:	85 c0                	test   eax,eax
c0011322:	74 0c                	je     c0011330 <KeResolveCompatibilitySymbol(char*)+0x164>
c0011324:	b8 14 43 02 c0       	mov    eax,0xc0024314
c0011329:	e9 06 01 00 00       	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c001132e:	66 90                	xchg   ax,ax
c0011330:	83 ec 08             	sub    esp,0x8
c0011333:	68 7e b9 02 c0       	push   0xc002b97e
c0011338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001133c:	e8 0f f4 fe ff       	call   c0000750 <strcmp>
c0011341:	83 c4 10             	add    esp,0x10
c0011344:	85 c0                	test   eax,eax
c0011346:	0f 94 c0             	sete   al
c0011349:	0f b6 c0             	movzx  eax,al
c001134c:	85 c0                	test   eax,eax
c001134e:	74 0c                	je     c001135c <KeResolveCompatibilitySymbol(char*)+0x190>
c0011350:	b8 0c 61 03 c0       	mov    eax,0xc003610c
c0011355:	e9 da 00 00 00       	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c001135a:	66 90                	xchg   ax,ax
c001135c:	83 ec 08             	sub    esp,0x8
c001135f:	68 96 b9 02 c0       	push   0xc002b996
c0011364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011368:	e8 e3 f3 fe ff       	call   c0000750 <strcmp>
c001136d:	83 c4 10             	add    esp,0x10
c0011370:	85 c0                	test   eax,eax
c0011372:	0f 94 c0             	sete   al
c0011375:	0f b6 c0             	movzx  eax,al
c0011378:	85 c0                	test   eax,eax
c001137a:	74 0c                	je     c0011388 <KeResolveCompatibilitySymbol(char*)+0x1bc>
c001137c:	b8 0c 61 03 c0       	mov    eax,0xc003610c
c0011381:	e9 ae 00 00 00       	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011386:	66 90                	xchg   ax,ax
c0011388:	83 ec 08             	sub    esp,0x8
c001138b:	68 a3 b9 02 c0       	push   0xc002b9a3
c0011390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011394:	e8 b7 f3 fe ff       	call   c0000750 <strcmp>
c0011399:	83 c4 10             	add    esp,0x10
c001139c:	85 c0                	test   eax,eax
c001139e:	0f 94 c0             	sete   al
c00113a1:	0f b6 c0             	movzx  eax,al
c00113a4:	85 c0                	test   eax,eax
c00113a6:	74 0c                	je     c00113b4 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c00113a8:	b8 0d 61 03 c0       	mov    eax,0xc003610d
c00113ad:	e9 82 00 00 00       	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c00113b2:	66 90                	xchg   ax,ax
c00113b4:	83 ec 08             	sub    esp,0x8
c00113b7:	68 b0 b9 02 c0       	push   0xc002b9b0
c00113bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113c0:	e8 8b f3 fe ff       	call   c0000750 <strcmp>
c00113c5:	83 c4 10             	add    esp,0x10
c00113c8:	85 c0                	test   eax,eax
c00113ca:	0f 94 c0             	sete   al
c00113cd:	0f b6 c0             	movzx  eax,al
c00113d0:	85 c0                	test   eax,eax
c00113d2:	74 08                	je     c00113dc <KeResolveCompatibilitySymbol(char*)+0x210>
c00113d4:	b8 0c 61 03 c0       	mov    eax,0xc003610c
c00113d9:	eb 59                	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c00113db:	90                   	nop
c00113dc:	83 ec 08             	sub    esp,0x8
c00113df:	68 c1 b9 02 c0       	push   0xc002b9c1
c00113e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113e8:	e8 63 f3 fe ff       	call   c0000750 <strcmp>
c00113ed:	83 c4 10             	add    esp,0x10
c00113f0:	85 c0                	test   eax,eax
c00113f2:	0f 94 c0             	sete   al
c00113f5:	0f b6 c0             	movzx  eax,al
c00113f8:	85 c0                	test   eax,eax
c00113fa:	74 08                	je     c0011404 <KeResolveCompatibilitySymbol(char*)+0x238>
c00113fc:	b8 0d 61 03 c0       	mov    eax,0xc003610d
c0011401:	eb 31                	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c0011403:	90                   	nop
c0011404:	83 ec 08             	sub    esp,0x8
c0011407:	68 d2 b9 02 c0       	push   0xc002b9d2
c001140c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011410:	e8 3b f3 fe ff       	call   c0000750 <strcmp>
c0011415:	83 c4 10             	add    esp,0x10
c0011418:	85 c0                	test   eax,eax
c001141a:	0f 94 c0             	sete   al
c001141d:	0f b6 c0             	movzx  eax,al
c0011420:	85 c0                	test   eax,eax
c0011422:	74 08                	je     c001142c <KeResolveCompatibilitySymbol(char*)+0x260>
c0011424:	b8 e4 7a 01 c0       	mov    eax,0xc0017ae4
c0011429:	eb 09                	jmp    c0011434 <KeResolveCompatibilitySymbol(char*)+0x268>
c001142b:	90                   	nop
c001142c:	b8 00 00 00 00       	mov    eax,0x0
c0011431:	8d 76 00             	lea    esi,[esi+0x0]
c0011434:	83 c4 0c             	add    esp,0xc
c0011437:	c3                   	ret    

c0011438 <Semaphore::Semaphore(int)>:
c0011438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001143c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011440:	89 10                	mov    DWORD PTR [eax],edx
c0011442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011446:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001144d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011451:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001145c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011463:	90                   	nop
c0011464:	c3                   	ret    
c0011465:	90                   	nop
c0011466:	66 90                	xchg   ax,ax

c0011468 <Semaphore::tryAcquire()>:
c0011468:	83 ec 0c             	sub    esp,0xc
c001146b:	fa                   	cli    
c001146c:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0011471:	83 c0 01             	add    eax,0x1
c0011474:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0011479:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c001147e:	83 c0 01             	add    eax,0x1
c0011481:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0011486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001148a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001148d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011491:	8b 00                	mov    eax,DWORD PTR [eax]
c0011493:	39 c2                	cmp    edx,eax
c0011495:	7d 59                	jge    c00114f0 <Semaphore::tryAcquire()+0x88>
c0011497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001149b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001149e:	8d 50 01             	lea    edx,[eax+0x1]
c00114a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114a5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00114a8:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c00114ad:	83 e8 01             	sub    eax,0x1
c00114b0:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c00114b5:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c00114ba:	85 c0                	test   eax,eax
c00114bc:	75 1a                	jne    c00114d8 <Semaphore::tryAcquire()+0x70>
c00114be:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c00114c3:	85 c0                	test   eax,eax
c00114c5:	74 11                	je     c00114d8 <Semaphore::tryAcquire()+0x70>
c00114c7:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c00114d1:	e8 0e 5e 00 00       	call   c00172e4 <schedule()>
c00114d6:	66 90                	xchg   ax,ax
c00114d8:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00114e0:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00114e5:	85 c0                	test   eax,eax
c00114e7:	75 03                	jne    c00114ec <Semaphore::tryAcquire()+0x84>
c00114e9:	fb                   	sti    
c00114ea:	66 90                	xchg   ax,ax
c00114ec:	b0 01                	mov    al,0x1
c00114ee:	eb 48                	jmp    c0011538 <Semaphore::tryAcquire()+0xd0>
c00114f0:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c00114f5:	83 e8 01             	sub    eax,0x1
c00114f8:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c00114fd:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0011502:	85 c0                	test   eax,eax
c0011504:	75 1a                	jne    c0011520 <Semaphore::tryAcquire()+0xb8>
c0011506:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c001150b:	85 c0                	test   eax,eax
c001150d:	74 11                	je     c0011520 <Semaphore::tryAcquire()+0xb8>
c001150f:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c0011519:	e8 c6 5d 00 00       	call   c00172e4 <schedule()>
c001151e:	66 90                	xchg   ax,ax
c0011520:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0011528:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001152d:	85 c0                	test   eax,eax
c001152f:	75 03                	jne    c0011534 <Semaphore::tryAcquire()+0xcc>
c0011531:	fb                   	sti    
c0011532:	66 90                	xchg   ax,ax
c0011534:	b0 00                	mov    al,0x0
c0011536:	66 90                	xchg   ax,ax
c0011538:	83 c4 0c             	add    esp,0xc
c001153b:	c3                   	ret    

c001153c <Semaphore::assertLocked(char const*)>:
c001153c:	83 ec 0c             	sub    esp,0xc
c001153f:	fa                   	cli    
c0011540:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0011545:	83 c0 01             	add    eax,0x1
c0011548:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c001154d:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0011552:	83 c0 01             	add    eax,0x1
c0011555:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c001155a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001155e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011565:	8b 00                	mov    eax,DWORD PTR [eax]
c0011567:	39 c2                	cmp    edx,eax
c0011569:	7d 11                	jge    c001157c <Semaphore::assertLocked(char const*)+0x40>
c001156b:	83 ec 0c             	sub    esp,0xc
c001156e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011572:	e8 d5 f1 ff ff       	call   c001074c <KePanic(char const*)>
c0011577:	83 c4 10             	add    esp,0x10
c001157a:	66 90                	xchg   ax,ax
c001157c:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0011581:	83 e8 01             	sub    eax,0x1
c0011584:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0011589:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c001158e:	85 c0                	test   eax,eax
c0011590:	75 1a                	jne    c00115ac <Semaphore::assertLocked(char const*)+0x70>
c0011592:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c0011597:	85 c0                	test   eax,eax
c0011599:	74 11                	je     c00115ac <Semaphore::assertLocked(char const*)+0x70>
c001159b:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c00115a5:	e8 3a 5d 00 00       	call   c00172e4 <schedule()>
c00115aa:	66 90                	xchg   ax,ax
c00115ac:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00115b4:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00115b9:	85 c0                	test   eax,eax
c00115bb:	75 03                	jne    c00115c0 <Semaphore::assertLocked(char const*)+0x84>
c00115bd:	fb                   	sti    
c00115be:	66 90                	xchg   ax,ax
c00115c0:	90                   	nop
c00115c1:	83 c4 0c             	add    esp,0xc
c00115c4:	c3                   	ret    
c00115c5:	90                   	nop
c00115c6:	66 90                	xchg   ax,ax

c00115c8 <Semaphore::acquire(int)>:
c00115c8:	83 ec 1c             	sub    esp,0x1c
c00115cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00115d0:	0f 84 ae 00 00 00    	je     c0011684 <Semaphore::acquire(int)+0xbc>
c00115d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00115de:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00115e3:	90                   	nop
c00115e4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00115e9:	85 c0                	test   eax,eax
c00115eb:	0f 84 87 00 00 00    	je     c0011678 <Semaphore::acquire(int)+0xb0>
c00115f1:	83 ec 0c             	sub    esp,0xc
c00115f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00115f8:	e8 6b fe ff ff       	call   c0011468 <Semaphore::tryAcquire()>
c00115fd:	83 c4 10             	add    esp,0x10
c0011600:	83 f0 01             	xor    eax,0x1
c0011603:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011607:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001160b:	83 f0 01             	xor    eax,0x1
c001160e:	0f b6 c0             	movzx  eax,al
c0011611:	85 c0                	test   eax,eax
c0011613:	75 5f                	jne    c0011674 <Semaphore::acquire(int)+0xac>
c0011615:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c001161a:	7f 34                	jg     c0011650 <Semaphore::acquire(int)+0x88>
c001161c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011620:	89 d0                	mov    eax,edx
c0011622:	c1 e0 02             	shl    eax,0x2
c0011625:	01 d0                	add    eax,edx
c0011627:	01 c0                	add    eax,eax
c0011629:	89 c2                	mov    edx,eax
c001162b:	c1 fa 1f             	sar    edx,0x1f
c001162e:	83 ec 08             	sub    esp,0x8
c0011631:	52                   	push   edx
c0011632:	50                   	push   eax
c0011633:	e8 a0 5e 00 00       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c0011638:	83 c4 10             	add    esp,0x10
c001163b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001163f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0011643:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001164b:	eb 97                	jmp    c00115e4 <Semaphore::acquire(int)+0x1c>
c001164d:	8d 76 00             	lea    esi,[esi+0x0]
c0011650:	83 ec 08             	sub    esp,0x8
c0011653:	6a 00                	push   0x0
c0011655:	68 90 01 00 00       	push   0x190
c001165a:	e8 79 5e 00 00       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c001165f:	83 c4 10             	add    esp,0x10
c0011662:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0011667:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c001166c:	e9 73 ff ff ff       	jmp    c00115e4 <Semaphore::acquire(int)+0x1c>
c0011671:	8d 76 00             	lea    esi,[esi+0x0]
c0011674:	90                   	nop
c0011675:	8d 76 00             	lea    esi,[esi+0x0]
c0011678:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001167c:	e9 fb 00 00 00       	jmp    c001177c <Semaphore::acquire(int)+0x1b4>
c0011681:	8d 76 00             	lea    esi,[esi+0x0]
c0011684:	fa                   	cli    
c0011685:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001168a:	83 c0 01             	add    eax,0x1
c001168d:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0011692:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0011697:	83 c0 01             	add    eax,0x1
c001169a:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c001169f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116a3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00116a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00116ac:	39 c2                	cmp    edx,eax
c00116ae:	7d 14                	jge    c00116c4 <Semaphore::acquire(int)+0xfc>
c00116b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00116b7:	8d 50 01             	lea    edx,[eax+0x1]
c00116ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00116c1:	eb 6d                	jmp    c0011730 <Semaphore::acquire(int)+0x168>
c00116c3:	90                   	nop
c00116c4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00116c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00116cb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00116d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116d9:	85 c0                	test   eax,eax
c00116db:	75 13                	jne    c00116f0 <Semaphore::acquire(int)+0x128>
c00116dd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00116e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00116e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00116eb:	eb 17                	jmp    c0011704 <Semaphore::acquire(int)+0x13c>
c00116ed:	8d 76 00             	lea    esi,[esi+0x0]
c00116f0:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00116f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00116fc:	8b 12                	mov    edx,DWORD PTR [edx]
c00116fe:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011701:	8d 76 00             	lea    esi,[esi+0x0]
c0011704:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011709:	8b 10                	mov    edx,DWORD PTR [eax]
c001170b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001170f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011712:	83 ec 0c             	sub    esp,0xc
c0011715:	68 e8 b9 02 c0       	push   0xc002b9e8
c001171a:	e8 5d 58 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	83 ec 0c             	sub    esp,0xc
c0011725:	6a 05                	push   0x5
c0011727:	e8 78 5c 00 00       	call   c00173a4 <blockTask(TaskState)>
c001172c:	83 c4 10             	add    esp,0x10
c001172f:	90                   	nop
c0011730:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0011735:	83 e8 01             	sub    eax,0x1
c0011738:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c001173d:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0011742:	85 c0                	test   eax,eax
c0011744:	75 1a                	jne    c0011760 <Semaphore::acquire(int)+0x198>
c0011746:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c001174b:	85 c0                	test   eax,eax
c001174d:	74 11                	je     c0011760 <Semaphore::acquire(int)+0x198>
c001174f:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c0011759:	e8 86 5b 00 00       	call   c00172e4 <schedule()>
c001175e:	66 90                	xchg   ax,ax
c0011760:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0011768:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001176d:	85 c0                	test   eax,eax
c001176f:	75 03                	jne    c0011774 <Semaphore::acquire(int)+0x1ac>
c0011771:	fb                   	sti    
c0011772:	66 90                	xchg   ax,ax
c0011774:	b8 00 00 00 00       	mov    eax,0x0
c0011779:	8d 76 00             	lea    esi,[esi+0x0]
c001177c:	83 c4 1c             	add    esp,0x1c
c001177f:	c3                   	ret    

c0011780 <Semaphore::acquire()>:
c0011780:	83 ec 0c             	sub    esp,0xc
c0011783:	83 ec 08             	sub    esp,0x8
c0011786:	6a 00                	push   0x0
c0011788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001178c:	e8 37 fe ff ff       	call   c00115c8 <Semaphore::acquire(int)>
c0011791:	83 c4 10             	add    esp,0x10
c0011794:	90                   	nop
c0011795:	83 c4 0c             	add    esp,0xc
c0011798:	c3                   	ret    
c0011799:	90                   	nop
c001179a:	66 90                	xchg   ax,ax

c001179c <Semaphore::release()>:
c001179c:	83 ec 1c             	sub    esp,0x1c
c001179f:	fa                   	cli    
c00117a0:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00117a5:	83 c0 01             	add    eax,0x1
c00117a8:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00117ad:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c00117b2:	83 c0 01             	add    eax,0x1
c00117b5:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c00117ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117c1:	85 c0                	test   eax,eax
c00117c3:	74 2b                	je     c00117f0 <Semaphore::release()+0x54>
c00117c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117d4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00117d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00117de:	83 ec 0c             	sub    esp,0xc
c00117e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117e5:	e8 56 5e 00 00       	call   c0017640 <unblockTask(ThreadControlBlock*)>
c00117ea:	83 c4 10             	add    esp,0x10
c00117ed:	eb 15                	jmp    c0011804 <Semaphore::release()+0x68>
c00117ef:	90                   	nop
c00117f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117f7:	8d 50 ff             	lea    edx,[eax-0x1]
c00117fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117fe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011801:	8d 76 00             	lea    esi,[esi+0x0]
c0011804:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0011809:	83 e8 01             	sub    eax,0x1
c001180c:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0011811:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0011816:	85 c0                	test   eax,eax
c0011818:	75 1a                	jne    c0011834 <Semaphore::release()+0x98>
c001181a:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c001181f:	85 c0                	test   eax,eax
c0011821:	74 11                	je     c0011834 <Semaphore::release()+0x98>
c0011823:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c001182d:	e8 b2 5a 00 00       	call   c00172e4 <schedule()>
c0011832:	66 90                	xchg   ax,ax
c0011834:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c001183c:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0011841:	85 c0                	test   eax,eax
c0011843:	75 03                	jne    c0011848 <Semaphore::release()+0xac>
c0011845:	fb                   	sti    
c0011846:	66 90                	xchg   ax,ax
c0011848:	90                   	nop
c0011849:	83 c4 1c             	add    esp,0x1c
c001184c:	c3                   	ret    

c001184d <KiSigKill(int)>:
c001184d:	83 ec 0c             	sub    esp,0xc
c0011850:	6a 00                	push   0x0
c0011852:	6a 00                	push   0x0
c0011854:	6a ff                	push   0xffffffff
c0011856:	6a 01                	push   0x1
c0011858:	e8 f5 f7 01 00       	call   c0031052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001185d:	83 c4 1c             	add    esp,0x1c
c0011860:	c3                   	ret    

c0011861 <KiDefaultSignalHandlerIgnore(int)>:
c0011861:	c3                   	ret    

c0011862 <KiDefaultSignalHandlerPause(int)>:
c0011862:	57                   	push   edi
c0011863:	b9 07 00 00 00       	mov    ecx,0x7
c0011868:	56                   	push   esi
c0011869:	be 43 ba 02 c0       	mov    esi,0xc002ba43
c001186e:	83 ec 24             	sub    esp,0x24
c0011871:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011875:	fc                   	cld    
c0011876:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011878:	8d 44 24 04          	lea    eax,[esp+0x4]
c001187c:	50                   	push   eax
c001187d:	6a 00                	push   0x0
c001187f:	6a 00                	push   0x0
c0011881:	6a 27                	push   0x27
c0011883:	e8 ca f7 01 00       	call   c0031052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011888:	83 c4 34             	add    esp,0x34
c001188b:	5e                   	pop    esi
c001188c:	5f                   	pop    edi
c001188d:	c3                   	ret    

c001188e <KiDefaultSignalHandlerResume(int)>:
c001188e:	57                   	push   edi
c001188f:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011894:	56                   	push   esi
c0011895:	be 5f ba 02 c0       	mov    esi,0xc002ba5f
c001189a:	83 ec 24             	sub    esp,0x24
c001189d:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00118a1:	fc                   	cld    
c00118a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00118a4:	8d 44 24 03          	lea    eax,[esp+0x3]
c00118a8:	50                   	push   eax
c00118a9:	6a 00                	push   0x0
c00118ab:	6a 00                	push   0x0
c00118ad:	6a 27                	push   0x27
c00118af:	e8 9e f7 01 00       	call   c0031052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00118b4:	83 c4 34             	add    esp,0x34
c00118b7:	5e                   	pop    esi
c00118b8:	5f                   	pop    edi
c00118b9:	c3                   	ret    

c00118ba <KeDeinitSignals(SigHandlerBlock*)>:
c00118ba:	e9 48 ea ff ff       	jmp    c0010307 <free>

c00118bf <KeInitSignals()>:
c00118bf:	53                   	push   ebx
c00118c0:	83 ec 14             	sub    esp,0x14
c00118c3:	68 c8 00 00 00       	push   0xc8
c00118c8:	e8 2a ea ff ff       	call   c00102f7 <malloc>
c00118cd:	83 c4 0c             	add    esp,0xc
c00118d0:	89 c3                	mov    ebx,eax
c00118d2:	6a 04                	push   0x4
c00118d4:	6a 00                	push   0x0
c00118d6:	50                   	push   eax
c00118d7:	e8 14 ec fe ff       	call   c00004f0 <memset>
c00118dc:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c00118e6:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c00118f0:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00118f7:	83 c4 0c             	add    esp,0xc
c00118fa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0011900:	6a 20                	push   0x20
c0011902:	6a 00                	push   0x0
c0011904:	50                   	push   eax
c0011905:	e8 e6 eb fe ff       	call   c00004f0 <memset>
c001190a:	83 c4 0c             	add    esp,0xc
c001190d:	6a 44                	push   0x44
c001190f:	6a 00                	push   0x0
c0011911:	53                   	push   ebx
c0011912:	e8 d9 eb fe ff       	call   c00004f0 <memset>
c0011917:	83 c4 0c             	add    esp,0xc
c001191a:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0011920:	6a 11                	push   0x11
c0011922:	6a 00                	push   0x0
c0011924:	50                   	push   eax
c0011925:	e8 c6 eb fe ff       	call   c00004f0 <memset>
c001192a:	89 d8                	mov    eax,ebx
c001192c:	83 c4 18             	add    esp,0x18
c001192f:	5b                   	pop    ebx
c0011930:	c3                   	ret    

c0011931 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011931:	53                   	push   ebx
c0011932:	b8 01 00 00 00       	mov    eax,0x1
c0011937:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001193b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001193f:	83 f9 10             	cmp    ecx,0x10
c0011942:	7f 21                	jg     c0011965 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011944:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001194b:	89 03                	mov    DWORD PTR [ebx],eax
c001194d:	b8 01 00 00 00       	mov    eax,0x1
c0011952:	d3 e0                	shl    eax,cl
c0011954:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011958:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001195b:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011963:	31 c0                	xor    eax,eax
c0011965:	5b                   	pop    ebx
c0011966:	c3                   	ret    

c0011967 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011967:	55                   	push   ebp
c0011968:	57                   	push   edi
c0011969:	bf 08 00 00 00       	mov    edi,0x8
c001196e:	56                   	push   esi
c001196f:	53                   	push   ebx
c0011970:	83 ec 14             	sub    esp,0x14
c0011973:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001197b:	68 7c ba 02 c0       	push   0xc002ba7c
c0011980:	e8 f7 55 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011985:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001198c:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011992:	83 c4 10             	add    esp,0x10
c0011995:	31 c9                	xor    ecx,ecx
c0011997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001199b:	99                   	cdq    
c001199c:	f7 ff                	idiv   edi
c001199e:	8d 42 24             	lea    eax,[edx+0x24]
c00119a1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00119a5:	85 f6                	test   esi,esi
c00119a7:	75 1a                	jne    c00119c3 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c00119a9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00119ad:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c00119b1:	50                   	push   eax
c00119b2:	50                   	push   eax
c00119b3:	52                   	push   edx
c00119b4:	68 92 ba 02 c0       	push   0xc002ba92
c00119b9:	e8 be 55 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00119be:	83 c4 10             	add    esp,0x10
c00119c1:	eb 1b                	jmp    c00119de <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c00119c3:	41                   	inc    ecx
c00119c4:	83 f9 08             	cmp    ecx,0x8
c00119c7:	75 ce                	jne    c0011997 <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c00119c9:	83 ec 0c             	sub    esp,0xc
c00119cc:	be 01 00 00 00       	mov    esi,0x1
c00119d1:	68 b3 ba 02 c0       	push   0xc002bab3
c00119d6:	e8 a1 55 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00119db:	83 c4 10             	add    esp,0x10
c00119de:	83 c4 0c             	add    esp,0xc
c00119e1:	89 f0                	mov    eax,esi
c00119e3:	5b                   	pop    ebx
c00119e4:	5e                   	pop    esi
c00119e5:	5f                   	pop    edi
c00119e6:	5d                   	pop    ebp
c00119e7:	c3                   	ret    

c00119e8 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00119e8:	55                   	push   ebp
c00119e9:	57                   	push   edi
c00119ea:	56                   	push   esi
c00119eb:	53                   	push   ebx
c00119ec:	83 ec 1c             	sub    esp,0x1c
c00119ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00119f3:	85 db                	test   ebx,ebx
c00119f5:	0f 84 e0 00 00 00    	je     c0011adb <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00119fb:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011a02:	0f 84 d3 00 00 00    	je     c0011adb <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011a08:	31 c9                	xor    ecx,ecx
c0011a0a:	bf 08 00 00 00       	mov    edi,0x8
c0011a0f:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011a15:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011a18:	99                   	cdq    
c0011a19:	f7 ff                	idiv   edi
c0011a1b:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011a22:	85 ed                	test   ebp,ebp
c0011a24:	0f 84 d2 00 00 00    	je     c0011afc <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0011a2a:	89 e9                	mov    ecx,ebp
c0011a2c:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011a32:	bf 01 00 00 00       	mov    edi,0x1
c0011a37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a3b:	d3 e7                	shl    edi,cl
c0011a3d:	31 c9                	xor    ecx,ecx
c0011a3f:	b8 01 00 00 00       	mov    eax,0x1
c0011a44:	d3 e0                	shl    eax,cl
c0011a46:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c0011a4a:	74 0a                	je     c0011a56 <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0011a4c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011a50:	0f 85 85 00 00 00    	jne    c0011adb <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011a56:	41                   	inc    ecx
c0011a57:	83 f9 11             	cmp    ecx,0x11
c0011a5a:	75 e3                	jne    c0011a3f <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0011a5c:	46                   	inc    esi
c0011a5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a61:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011a67:	09 f8                	or     eax,edi
c0011a69:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011a74:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011a7a:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011a81:	31 c0                	xor    eax,eax
c0011a83:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011a8b:	74 09                	je     c0011a96 <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0011a8d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011a94:	eb 06                	jmp    c0011a9c <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c0011a96:	40                   	inc    eax
c0011a97:	83 f8 08             	cmp    eax,0x8
c0011a9a:	75 e7                	jne    c0011a83 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0011a9c:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011a9f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011aa3:	83 fd 09             	cmp    ebp,0x9
c0011aa6:	89 2a                	mov    DWORD PTR [edx],ebp
c0011aa8:	75 14                	jne    c0011abe <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0011aaa:	83 ec 0c             	sub    esp,0xc
c0011aad:	68 c4 ba 02 c0       	push   0xc002bac4
c0011ab2:	e8 c5 54 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011ab7:	b8 4d 18 01 c0       	mov    eax,0xc001184d
c0011abc:	eb 39                	jmp    c0011af7 <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011abe:	83 f8 01             	cmp    eax,0x1
c0011ac1:	75 1c                	jne    c0011adf <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011ac3:	83 ec 0c             	sub    esp,0xc
c0011ac6:	f7 d7                	not    edi
c0011ac8:	68 ce ba 02 c0       	push   0xc002bace
c0011acd:	e8 aa 54 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011ad2:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011ad8:	83 c4 10             	add    esp,0x10
c0011adb:	31 c0                	xor    eax,eax
c0011add:	eb 30                	jmp    c0011b0f <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011adf:	85 c0                	test   eax,eax
c0011ae1:	75 2c                	jne    c0011b0f <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011ae3:	83 ec 0c             	sub    esp,0xc
c0011ae6:	68 db ba 02 c0       	push   0xc002badb
c0011aeb:	e8 8c 54 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011af0:	8b 04 ad c0 fc 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd0340]
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	eb 13                	jmp    c0011b0f <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011afc:	46                   	inc    esi
c0011afd:	41                   	inc    ecx
c0011afe:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b04:	83 f9 08             	cmp    ecx,0x8
c0011b07:	0f 85 02 ff ff ff    	jne    c0011a0f <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011b0d:	eb cc                	jmp    c0011adb <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011b0f:	83 c4 1c             	add    esp,0x1c
c0011b12:	5b                   	pop    ebx
c0011b13:	5e                   	pop    esi
c0011b14:	5f                   	pop    edi
c0011b15:	5d                   	pop    ebp
c0011b16:	c3                   	ret    

c0011b17 <KiCheckSignalZ>:
c0011b17:	80 3d 0c 61 03 c0 00 	cmp    BYTE PTR ds:0xc003610c,0x0
c0011b1e:	74 43                	je     c0011b63 <KiCheckSignalZ+0x4c>
c0011b20:	83 ec 24             	sub    esp,0x24
c0011b23:	8d 44 24 14          	lea    eax,[esp+0x14]
c0011b27:	50                   	push   eax
c0011b28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b30:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011b36:	e8 ad fe ff ff       	call   c00119e8 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011b3b:	83 c4 10             	add    esp,0x10
c0011b3e:	31 d2                	xor    edx,edx
c0011b40:	85 c0                	test   eax,eax
c0011b42:	74 19                	je     c0011b5d <KiCheckSignalZ+0x46>
c0011b44:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b4a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011b4d:	89 02                	mov    DWORD PTR [edx],eax
c0011b4f:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011b56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b5a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011b5d:	89 d0                	mov    eax,edx
c0011b5f:	83 c4 1c             	add    esp,0x1c
c0011b62:	c3                   	ret    
c0011b63:	31 d2                	xor    edx,edx
c0011b65:	89 d0                	mov    eax,edx
c0011b67:	c3                   	ret    

c0011b68 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011b68:	56                   	push   esi
c0011b69:	53                   	push   ebx
c0011b6a:	bb 01 00 00 00       	mov    ebx,0x1
c0011b6f:	52                   	push   edx
c0011b70:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011b74:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b78:	d3 e3                	shl    ebx,cl
c0011b7a:	83 f9 10             	cmp    ecx,0x10
c0011b7d:	7f 08                	jg     c0011b87 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011b7f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011b85:	75 10                	jne    c0011b97 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011b87:	83 ec 0c             	sub    esp,0xc
c0011b8a:	68 fe ba 02 c0       	push   0xc002bafe
c0011b8f:	e8 b8 eb ff ff       	call   c001074c <KePanic(char const*)>
c0011b94:	83 c4 10             	add    esp,0x10
c0011b97:	f7 d3                	not    ebx
c0011b99:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011b9f:	58                   	pop    eax
c0011ba0:	5b                   	pop    ebx
c0011ba1:	5e                   	pop    esi
c0011ba2:	c3                   	ret    

c0011ba3 <KiFinishSignalZ>:
c0011ba3:	53                   	push   ebx
c0011ba4:	83 ec 08             	sub    esp,0x8
c0011ba7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011bb0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0011bb3:	83 fa 08             	cmp    edx,0x8
c0011bb6:	75 0c                	jne    c0011bc4 <KiFinishSignalZ+0x21>
c0011bb8:	83 ec 0c             	sub    esp,0xc
c0011bbb:	50                   	push   eax
c0011bbc:	e8 7f 5a 00 00       	call   c0017640 <unblockTask(ThreadControlBlock*)>
c0011bc1:	83 c4 10             	add    esp,0x10
c0011bc4:	50                   	push   eax
c0011bc5:	50                   	push   eax
c0011bc6:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011bc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bd1:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0011bd7:	e8 8c ff ff ff       	call   c0011b68 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011bdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011be2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011bf0:	83 c4 18             	add    esp,0x18
c0011bf3:	5b                   	pop    ebx
c0011bf4:	c3                   	ret    

c0011bf5 <SysSeekDir(regs*)>:
c0011bf5:	31 c0                	xor    eax,eax
c0011bf7:	31 d2                	xor    edx,edx
c0011bf9:	c3                   	ret    

c0011bfa <SysTellDir(regs*)>:
c0011bfa:	31 c0                	xor    eax,eax
c0011bfc:	31 d2                	xor    edx,edx
c0011bfe:	c3                   	ret    

c0011bff <SysVerify(regs*)>:
c0011bff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c03:	31 d2                	xor    edx,edx
c0011c05:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c08:	c3                   	ret    

c0011c09 <SysGetArgc(regs*)>:
c0011c09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c11:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c0011c17:	89 c2                	mov    edx,eax
c0011c19:	c1 fa 1f             	sar    edx,0x1f
c0011c1c:	c3                   	ret    

c0011c1d <SysTTYName(regs*)>:
c0011c1d:	b8 01 00 00 00       	mov    eax,0x1
c0011c22:	31 d2                	xor    edx,edx
c0011c24:	c3                   	ret    

c0011c25 <SysFormatDisk(regs*)>:
c0011c25:	56                   	push   esi
c0011c26:	53                   	push   ebx
c0011c27:	83 ec 04             	sub    esp,0x4
c0011c2a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c2e:	8b 1d 04 53 03 c0    	mov    ebx,DWORD PTR ds:0xc0035304
c0011c34:	eb 28                	jmp    c0011c5e <SysFormatDisk(regs*)+0x39>
c0011c36:	83 ec 0c             	sub    esp,0xc
c0011c39:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011c3c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011c3f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c41:	51                   	push   ecx
c0011c42:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011c45:	51                   	push   ecx
c0011c46:	50                   	push   eax
c0011c47:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c0011c4e:	50                   	push   eax
c0011c4f:	53                   	push   ebx
c0011c50:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011c53:	83 c4 20             	add    esp,0x20
c0011c56:	83 f8 08             	cmp    eax,0x8
c0011c59:	75 14                	jne    c0011c6f <SysFormatDisk(regs*)+0x4a>
c0011c5b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011c5e:	85 db                	test   ebx,ebx
c0011c60:	75 d4                	jne    c0011c36 <SysFormatDisk(regs*)+0x11>
c0011c62:	83 c4 04             	add    esp,0x4
c0011c65:	b8 03 00 00 00       	mov    eax,0x3
c0011c6a:	31 d2                	xor    edx,edx
c0011c6c:	5b                   	pop    ebx
c0011c6d:	5e                   	pop    esi
c0011c6e:	c3                   	ret    
c0011c6f:	85 c0                	test   eax,eax
c0011c71:	74 1f                	je     c0011c92 <SysFormatDisk(regs*)+0x6d>
c0011c73:	83 f8 09             	cmp    eax,0x9
c0011c76:	74 0d                	je     c0011c85 <SysFormatDisk(regs*)+0x60>
c0011c78:	83 c4 04             	add    esp,0x4
c0011c7b:	b8 02 00 00 00       	mov    eax,0x2
c0011c80:	31 d2                	xor    edx,edx
c0011c82:	5b                   	pop    ebx
c0011c83:	5e                   	pop    esi
c0011c84:	c3                   	ret    
c0011c85:	83 c4 04             	add    esp,0x4
c0011c88:	b8 01 00 00 00       	mov    eax,0x1
c0011c8d:	31 d2                	xor    edx,edx
c0011c8f:	5b                   	pop    ebx
c0011c90:	5e                   	pop    esi
c0011c91:	c3                   	ret    
c0011c92:	83 c4 04             	add    esp,0x4
c0011c95:	31 c0                	xor    eax,eax
c0011c97:	31 d2                	xor    edx,edx
c0011c99:	5b                   	pop    ebx
c0011c9a:	5e                   	pop    esi
c0011c9b:	c3                   	ret    

c0011c9c <SysSetDiskVolumeLabel(regs*)>:
c0011c9c:	56                   	push   esi
c0011c9d:	53                   	push   ebx
c0011c9e:	83 ec 04             	sub    esp,0x4
c0011ca1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011ca5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011ca8:	83 f8 19             	cmp    eax,0x19
c0011cab:	77 33                	ja     c0011ce0 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011cad:	8b 0c 85 e0 5a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffca520]
c0011cb4:	85 c9                	test   ecx,ecx
c0011cb6:	74 28                	je     c0011ce0 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011cb8:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011cbb:	85 db                	test   ebx,ebx
c0011cbd:	74 21                	je     c0011ce0 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011cbf:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011cc5:	85 d2                	test   edx,edx
c0011cc7:	74 17                	je     c0011ce0 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011cc9:	8b 32                	mov    esi,DWORD PTR [edx]
c0011ccb:	53                   	push   ebx
c0011ccc:	50                   	push   eax
c0011ccd:	51                   	push   ecx
c0011cce:	52                   	push   edx
c0011ccf:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011cd2:	83 c4 10             	add    esp,0x10
c0011cd5:	89 c2                	mov    edx,eax
c0011cd7:	83 c4 04             	add    esp,0x4
c0011cda:	c1 fa 1f             	sar    edx,0x1f
c0011cdd:	5b                   	pop    ebx
c0011cde:	5e                   	pop    esi
c0011cdf:	c3                   	ret    
c0011ce0:	83 c4 04             	add    esp,0x4
c0011ce3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ce8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ced:	5b                   	pop    ebx
c0011cee:	5e                   	pop    esi
c0011cef:	c3                   	ret    

c0011cf0 <SysGetDiskVolumeLabel(regs*)>:
c0011cf0:	57                   	push   edi
c0011cf1:	56                   	push   esi
c0011cf2:	53                   	push   ebx
c0011cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cf7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011cfa:	83 fa 19             	cmp    edx,0x19
c0011cfd:	77 3c                	ja     c0011d3b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011cff:	8b 0c 95 e0 5a 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffca520]
c0011d06:	85 c9                	test   ecx,ecx
c0011d08:	74 31                	je     c0011d3b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d0a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011d0d:	85 db                	test   ebx,ebx
c0011d0f:	74 2a                	je     c0011d3b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d11:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011d14:	85 f6                	test   esi,esi
c0011d16:	74 23                	je     c0011d3b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d18:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011d1e:	85 c0                	test   eax,eax
c0011d20:	74 19                	je     c0011d3b <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011d22:	83 ec 0c             	sub    esp,0xc
c0011d25:	8b 38                	mov    edi,DWORD PTR [eax]
c0011d27:	56                   	push   esi
c0011d28:	53                   	push   ebx
c0011d29:	52                   	push   edx
c0011d2a:	51                   	push   ecx
c0011d2b:	50                   	push   eax
c0011d2c:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011d2f:	83 c4 20             	add    esp,0x20
c0011d32:	89 c2                	mov    edx,eax
c0011d34:	5b                   	pop    ebx
c0011d35:	c1 fa 1f             	sar    edx,0x1f
c0011d38:	5e                   	pop    esi
c0011d39:	5f                   	pop    edi
c0011d3a:	c3                   	ret    
c0011d3b:	5b                   	pop    ebx
c0011d3c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d41:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d46:	5e                   	pop    esi
c0011d47:	5f                   	pop    edi
c0011d48:	c3                   	ret    

c0011d49 <SysRealpath(regs*)>:
c0011d49:	83 ec 0c             	sub    esp,0xc
c0011d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d50:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011d53:	85 d2                	test   edx,edx
c0011d55:	74 07                	je     c0011d5e <SysRealpath(regs*)+0x15>
c0011d57:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011d5a:	85 c0                	test   eax,eax
c0011d5c:	75 0b                	jne    c0011d69 <SysRealpath(regs*)+0x20>
c0011d5e:	b8 01 00 00 00       	mov    eax,0x1
c0011d63:	31 d2                	xor    edx,edx
c0011d65:	83 c4 0c             	add    esp,0xc
c0011d68:	c3                   	ret    
c0011d69:	6a 00                	push   0x0
c0011d6b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011d71:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011d74:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011d7a:	51                   	push   ecx
c0011d7b:	52                   	push   edx
c0011d7c:	50                   	push   eax
c0011d7d:	e8 1a 6b ff ff       	call   c000889c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	31 c0                	xor    eax,eax
c0011d87:	31 d2                	xor    edx,edx
c0011d89:	83 c4 0c             	add    esp,0xc
c0011d8c:	c3                   	ret    

c0011d8d <SysReadDir(regs*)>:
c0011d8d:	53                   	push   ebx
c0011d8e:	83 ec 18             	sub    esp,0x18
c0011d91:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d95:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d98:	83 f8 02             	cmp    eax,0x2
c0011d9b:	76 61                	jbe    c0011dfe <SysReadDir(regs*)+0x71>
c0011d9d:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011da4:	77 49                	ja     c0011def <SysReadDir(regs*)+0x62>
c0011da6:	83 ec 0c             	sub    esp,0xc
c0011da9:	50                   	push   eax
c0011daa:	e8 d6 1d 00 00       	call   c0013b85 <KeGetFileFromDescriptor(int)>
c0011daf:	83 c4 10             	add    esp,0x10
c0011db2:	85 c0                	test   eax,eax
c0011db4:	74 39                	je     c0011def <SysReadDir(regs*)+0x62>
c0011db6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011dbe:	83 ec 0c             	sub    esp,0xc
c0011dc1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dc3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011dc7:	51                   	push   ecx
c0011dc8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011dcb:	51                   	push   ecx
c0011dcc:	6a 00                	push   0x0
c0011dce:	68 10 01 00 00       	push   0x110
c0011dd3:	50                   	push   eax
c0011dd4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011dd7:	83 c4 20             	add    esp,0x20
c0011dda:	85 c0                	test   eax,eax
c0011ddc:	74 29                	je     c0011e07 <SysReadDir(regs*)+0x7a>
c0011dde:	83 f8 07             	cmp    eax,0x7
c0011de1:	74 1b                	je     c0011dfe <SysReadDir(regs*)+0x71>
c0011de3:	b8 02 00 00 00       	mov    eax,0x2
c0011de8:	31 d2                	xor    edx,edx
c0011dea:	83 c4 18             	add    esp,0x18
c0011ded:	5b                   	pop    ebx
c0011dee:	c3                   	ret    
c0011def:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011df4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011df9:	83 c4 18             	add    esp,0x18
c0011dfc:	5b                   	pop    ebx
c0011dfd:	c3                   	ret    
c0011dfe:	b8 01 00 00 00       	mov    eax,0x1
c0011e03:	31 d2                	xor    edx,edx
c0011e05:	eb e3                	jmp    c0011dea <SysReadDir(regs*)+0x5d>
c0011e07:	31 c0                	xor    eax,eax
c0011e09:	31 d2                	xor    edx,edx
c0011e0b:	eb dd                	jmp    c0011dea <SysReadDir(regs*)+0x5d>

c0011e0d <SysIsATTY(regs*)>:
c0011e0d:	83 ec 0c             	sub    esp,0xc
c0011e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e14:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e17:	83 f8 02             	cmp    eax,0x2
c0011e1a:	76 07                	jbe    c0011e23 <SysIsATTY(regs*)+0x16>
c0011e1c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011e21:	75 26                	jne    c0011e49 <SysIsATTY(regs*)+0x3c>
c0011e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e2b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011e31:	85 c0                	test   eax,eax
c0011e33:	74 24                	je     c0011e59 <SysIsATTY(regs*)+0x4c>
c0011e35:	83 ec 0c             	sub    esp,0xc
c0011e38:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e3a:	50                   	push   eax
c0011e3b:	ff 12                	call   DWORD PTR [edx]
c0011e3d:	31 d2                	xor    edx,edx
c0011e3f:	0f b6 c0             	movzx  eax,al
c0011e42:	83 c4 10             	add    esp,0x10
c0011e45:	83 c4 0c             	add    esp,0xc
c0011e48:	c3                   	ret    
c0011e49:	83 ec 0c             	sub    esp,0xc
c0011e4c:	50                   	push   eax
c0011e4d:	e8 33 1d 00 00       	call   c0013b85 <KeGetFileFromDescriptor(int)>
c0011e52:	83 c4 10             	add    esp,0x10
c0011e55:	85 c0                	test   eax,eax
c0011e57:	75 dc                	jne    c0011e35 <SysIsATTY(regs*)+0x28>
c0011e59:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e5e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e63:	83 c4 0c             	add    esp,0xc
c0011e66:	c3                   	ret    

c0011e67 <SysSeek(regs*)>:
c0011e67:	53                   	push   ebx
c0011e68:	83 ec 08             	sub    esp,0x8
c0011e6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e72:	8d 50 fd             	lea    edx,[eax-0x3]
c0011e75:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011e7b:	77 39                	ja     c0011eb6 <SysSeek(regs*)+0x4f>
c0011e7d:	83 ec 0c             	sub    esp,0xc
c0011e80:	50                   	push   eax
c0011e81:	e8 ff 1c 00 00       	call   c0013b85 <KeGetFileFromDescriptor(int)>
c0011e86:	83 c4 10             	add    esp,0x10
c0011e89:	85 c0                	test   eax,eax
c0011e8b:	74 29                	je     c0011eb6 <SysSeek(regs*)+0x4f>
c0011e8d:	83 ec 04             	sub    esp,0x4
c0011e90:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011e93:	31 db                	xor    ebx,ebx
c0011e95:	53                   	push   ebx
c0011e96:	51                   	push   ecx
c0011e97:	50                   	push   eax
c0011e98:	e8 f3 6d ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	85 c0                	test   eax,eax
c0011ea2:	0f 95 c0             	setne  al
c0011ea5:	31 d2                	xor    edx,edx
c0011ea7:	0f b6 c0             	movzx  eax,al
c0011eaa:	f7 d8                	neg    eax
c0011eac:	83 d2 00             	adc    edx,0x0
c0011eaf:	83 c4 08             	add    esp,0x8
c0011eb2:	f7 da                	neg    edx
c0011eb4:	5b                   	pop    ebx
c0011eb5:	c3                   	ret    
c0011eb6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ebb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ec0:	83 c4 08             	add    esp,0x8
c0011ec3:	5b                   	pop    ebx
c0011ec4:	c3                   	ret    

c0011ec5 <SysTell(regs*)>:
c0011ec5:	53                   	push   ebx
c0011ec6:	83 ec 08             	sub    esp,0x8
c0011ec9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ecd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ed0:	83 f8 02             	cmp    eax,0x2
c0011ed3:	76 56                	jbe    c0011f2b <SysTell(regs*)+0x66>
c0011ed5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011eda:	76 19                	jbe    c0011ef5 <SysTell(regs*)+0x30>
c0011edc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011edf:	31 d2                	xor    edx,edx
c0011ee1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011ee7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011eee:	31 c0                	xor    eax,eax
c0011ef0:	83 c4 08             	add    esp,0x8
c0011ef3:	5b                   	pop    ebx
c0011ef4:	c3                   	ret    
c0011ef5:	83 ec 0c             	sub    esp,0xc
c0011ef8:	50                   	push   eax
c0011ef9:	e8 87 1c 00 00       	call   c0013b85 <KeGetFileFromDescriptor(int)>
c0011efe:	83 c4 10             	add    esp,0x10
c0011f01:	85 c0                	test   eax,eax
c0011f03:	74 26                	je     c0011f2b <SysTell(regs*)+0x66>
c0011f05:	83 ec 08             	sub    esp,0x8
c0011f08:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011f0b:	52                   	push   edx
c0011f0c:	50                   	push   eax
c0011f0d:	e8 2a 6e ff ff       	call   c0008d3c <File::tell(unsigned long long*)>
c0011f12:	83 c4 10             	add    esp,0x10
c0011f15:	85 c0                	test   eax,eax
c0011f17:	0f 95 c0             	setne  al
c0011f1a:	31 d2                	xor    edx,edx
c0011f1c:	0f b6 c0             	movzx  eax,al
c0011f1f:	f7 d8                	neg    eax
c0011f21:	83 d2 00             	adc    edx,0x0
c0011f24:	83 c4 08             	add    esp,0x8
c0011f27:	f7 da                	neg    edx
c0011f29:	5b                   	pop    ebx
c0011f2a:	c3                   	ret    
c0011f2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f30:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f35:	83 c4 08             	add    esp,0x8
c0011f38:	5b                   	pop    ebx
c0011f39:	c3                   	ret    

c0011f3a <SysSize(regs*)>:
c0011f3a:	53                   	push   ebx
c0011f3b:	83 ec 18             	sub    esp,0x18
c0011f3e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f42:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f45:	83 f8 02             	cmp    eax,0x2
c0011f48:	76 5b                	jbe    c0011fa5 <SysSize(regs*)+0x6b>
c0011f4a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f4f:	76 19                	jbe    c0011f6a <SysSize(regs*)+0x30>
c0011f51:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f54:	31 d2                	xor    edx,edx
c0011f56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f63:	31 c0                	xor    eax,eax
c0011f65:	83 c4 18             	add    esp,0x18
c0011f68:	5b                   	pop    ebx
c0011f69:	c3                   	ret    
c0011f6a:	83 ec 0c             	sub    esp,0xc
c0011f6d:	50                   	push   eax
c0011f6e:	e8 12 1c 00 00       	call   c0013b85 <KeGetFileFromDescriptor(int)>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	85 c0                	test   eax,eax
c0011f78:	74 2b                	je     c0011fa5 <SysSize(regs*)+0x6b>
c0011f7a:	83 ec 04             	sub    esp,0x4
c0011f7d:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011f81:	52                   	push   edx
c0011f82:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011f85:	52                   	push   edx
c0011f86:	50                   	push   eax
c0011f87:	e8 48 6f ff ff       	call   c0008ed4 <File::stat(unsigned long long*, bool*)>
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	85 c0                	test   eax,eax
c0011f91:	0f 95 c0             	setne  al
c0011f94:	31 d2                	xor    edx,edx
c0011f96:	0f b6 c0             	movzx  eax,al
c0011f99:	f7 d8                	neg    eax
c0011f9b:	83 d2 00             	adc    edx,0x0
c0011f9e:	83 c4 18             	add    esp,0x18
c0011fa1:	f7 da                	neg    edx
c0011fa3:	5b                   	pop    ebx
c0011fa4:	c3                   	ret    
c0011fa5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011faa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011faf:	83 c4 18             	add    esp,0x18
c0011fb2:	5b                   	pop    ebx
c0011fb3:	c3                   	ret    

c0011fb4 <SysSizeFromFilename(regs*)>:
c0011fb4:	55                   	push   ebp
c0011fb5:	57                   	push   edi
c0011fb6:	56                   	push   esi
c0011fb7:	53                   	push   ebx
c0011fb8:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011fbe:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011fc5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011fc8:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011fcb:	85 f6                	test   esi,esi
c0011fcd:	74 34                	je     c0012003 <SysSizeFromFilename(regs*)+0x4f>
c0011fcf:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011fd5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fd8:	83 f8 02             	cmp    eax,0x2
c0011fdb:	76 2d                	jbe    c001200a <SysSizeFromFilename(regs*)+0x56>
c0011fdd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011fe2:	76 3b                	jbe    c001201f <SysSizeFromFilename(regs*)+0x6b>
c0011fe4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011fe7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011fed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ff4:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011ffa:	31 c0                	xor    eax,eax
c0011ffc:	5b                   	pop    ebx
c0011ffd:	31 d2                	xor    edx,edx
c0011fff:	5e                   	pop    esi
c0012000:	5f                   	pop    edi
c0012001:	5d                   	pop    ebp
c0012002:	c3                   	ret    
c0012003:	89 f8                	mov    eax,edi
c0012005:	83 f8 02             	cmp    eax,0x2
c0012008:	77 d3                	ja     c0011fdd <SysSizeFromFilename(regs*)+0x29>
c001200a:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012010:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012015:	5b                   	pop    ebx
c0012016:	ba ff ff ff ff       	mov    edx,0xffffffff
c001201b:	5e                   	pop    esi
c001201c:	5f                   	pop    edi
c001201d:	5d                   	pop    ebp
c001201e:	c3                   	ret    
c001201f:	83 ec 0c             	sub    esp,0xc
c0012022:	68 14 01 00 00       	push   0x114
c0012027:	e8 cb e2 ff ff       	call   c00102f7 <malloc>
c001202c:	6a 01                	push   0x1
c001202e:	89 c5                	mov    ebp,eax
c0012030:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012035:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012038:	50                   	push   eax
c0012039:	57                   	push   edi
c001203a:	55                   	push   ebp
c001203b:	e8 76 6a ff ff       	call   c0008ab6 <File::File(char const*, Process*, bool)>
c0012040:	83 c4 20             	add    esp,0x20
c0012043:	85 ed                	test   ebp,ebp
c0012045:	74 c3                	je     c001200a <SysSizeFromFilename(regs*)+0x56>
c0012047:	83 ec 04             	sub    esp,0x4
c001204a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001204e:	50                   	push   eax
c001204f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012052:	51                   	push   ecx
c0012053:	55                   	push   ebp
c0012054:	e8 7b 6e ff ff       	call   c0008ed4 <File::stat(unsigned long long*, bool*)>
c0012059:	89 c3                	mov    ebx,eax
c001205b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001205e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012061:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012064:	83 c4 10             	add    esp,0x10
c0012067:	85 db                	test   ebx,ebx
c0012069:	75 9f                	jne    c001200a <SysSizeFromFilename(regs*)+0x56>
c001206b:	6a 00                	push   0x0
c001206d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012072:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012075:	05 0c 01 00 00       	add    eax,0x10c
c001207a:	50                   	push   eax
c001207b:	57                   	push   edi
c001207c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0012083:	53                   	push   ebx
c0012084:	e8 13 68 ff ff       	call   c000889c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012089:	58                   	pop    eax
c001208a:	5a                   	pop    edx
c001208b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001208f:	50                   	push   eax
c0012090:	53                   	push   ebx
c0012091:	e8 8c 62 ff ff       	call   c0008322 <KeDereferenceSymlink(char const*, char*)>
c0012096:	83 c4 10             	add    esp,0x10
c0012099:	83 f8 01             	cmp    eax,0x1
c001209c:	74 1a                	je     c00120b8 <SysSizeFromFilename(regs*)+0x104>
c001209e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00120a3:	74 26                	je     c00120cb <SysSizeFromFilename(regs*)+0x117>
c00120a5:	85 f6                	test   esi,esi
c00120a7:	0f 84 47 ff ff ff    	je     c0011ff4 <SysSizeFromFilename(regs*)+0x40>
c00120ad:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00120b3:	e9 3c ff ff ff       	jmp    c0011ff4 <SysSizeFromFilename(regs*)+0x40>
c00120b8:	85 f6                	test   esi,esi
c00120ba:	0f 84 34 ff ff ff    	je     c0011ff4 <SysSizeFromFilename(regs*)+0x40>
c00120c0:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00120c6:	e9 29 ff ff ff       	jmp    c0011ff4 <SysSizeFromFilename(regs*)+0x40>
c00120cb:	85 f6                	test   esi,esi
c00120cd:	0f 84 21 ff ff ff    	je     c0011ff4 <SysSizeFromFilename(regs*)+0x40>
c00120d3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00120d9:	e9 16 ff ff ff       	jmp    c0011ff4 <SysSizeFromFilename(regs*)+0x40>

c00120de <SysSizeFromFilenameNoSymlink(regs*)>:
c00120de:	55                   	push   ebp
c00120df:	57                   	push   edi
c00120e0:	56                   	push   esi
c00120e1:	53                   	push   ebx
c00120e2:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00120e8:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00120ef:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120f2:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00120f5:	85 f6                	test   esi,esi
c00120f7:	74 34                	je     c001212d <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00120f9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00120ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012102:	83 f8 02             	cmp    eax,0x2
c0012105:	76 2d                	jbe    c0012134 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012107:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001210c:	76 3b                	jbe    c0012149 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c001210e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012111:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012117:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001211e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012124:	31 c0                	xor    eax,eax
c0012126:	5b                   	pop    ebx
c0012127:	31 d2                	xor    edx,edx
c0012129:	5e                   	pop    esi
c001212a:	5f                   	pop    edi
c001212b:	5d                   	pop    ebp
c001212c:	c3                   	ret    
c001212d:	89 f8                	mov    eax,edi
c001212f:	83 f8 02             	cmp    eax,0x2
c0012132:	77 d3                	ja     c0012107 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0012134:	81 c4 4c 02 00 00    	add    esp,0x24c
c001213a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001213f:	5b                   	pop    ebx
c0012140:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012145:	5e                   	pop    esi
c0012146:	5f                   	pop    edi
c0012147:	5d                   	pop    ebp
c0012148:	c3                   	ret    
c0012149:	83 ec 0c             	sub    esp,0xc
c001214c:	68 14 01 00 00       	push   0x114
c0012151:	e8 a1 e1 ff ff       	call   c00102f7 <malloc>
c0012156:	6a 00                	push   0x0
c0012158:	89 c5                	mov    ebp,eax
c001215a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001215f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012162:	50                   	push   eax
c0012163:	57                   	push   edi
c0012164:	55                   	push   ebp
c0012165:	e8 4c 69 ff ff       	call   c0008ab6 <File::File(char const*, Process*, bool)>
c001216a:	83 c4 20             	add    esp,0x20
c001216d:	85 ed                	test   ebp,ebp
c001216f:	74 c3                	je     c0012134 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012171:	83 ec 04             	sub    esp,0x4
c0012174:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012178:	50                   	push   eax
c0012179:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001217c:	51                   	push   ecx
c001217d:	55                   	push   ebp
c001217e:	e8 51 6d ff ff       	call   c0008ed4 <File::stat(unsigned long long*, bool*)>
c0012183:	89 c3                	mov    ebx,eax
c0012185:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012188:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001218b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001218e:	83 c4 10             	add    esp,0x10
c0012191:	85 db                	test   ebx,ebx
c0012193:	75 9f                	jne    c0012134 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012195:	6a 00                	push   0x0
c0012197:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001219c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001219f:	05 0c 01 00 00       	add    eax,0x10c
c00121a4:	50                   	push   eax
c00121a5:	57                   	push   edi
c00121a6:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00121ad:	53                   	push   ebx
c00121ae:	e8 e9 66 ff ff       	call   c000889c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00121b3:	58                   	pop    eax
c00121b4:	5a                   	pop    edx
c00121b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00121b9:	50                   	push   eax
c00121ba:	53                   	push   ebx
c00121bb:	e8 62 61 ff ff       	call   c0008322 <KeDereferenceSymlink(char const*, char*)>
c00121c0:	83 c4 10             	add    esp,0x10
c00121c3:	83 f8 01             	cmp    eax,0x1
c00121c6:	74 1a                	je     c00121e2 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c00121c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00121cd:	74 26                	je     c00121f5 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c00121cf:	85 f6                	test   esi,esi
c00121d1:	0f 84 47 ff ff ff    	je     c001211e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00121d7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121dd:	e9 3c ff ff ff       	jmp    c001211e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00121e2:	85 f6                	test   esi,esi
c00121e4:	0f 84 34 ff ff ff    	je     c001211e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00121ea:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00121f0:	e9 29 ff ff ff       	jmp    c001211e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00121f5:	85 f6                	test   esi,esi
c00121f7:	0f 84 21 ff ff ff    	je     c001211e <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00121fd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012203:	e9 16 ff ff ff       	jmp    c001211e <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0012208 <SysClose(regs*)>:
c0012208:	53                   	push   ebx
c0012209:	83 ec 08             	sub    esp,0x8
c001220c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012210:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012213:	83 f8 02             	cmp    eax,0x2
c0012216:	76 41                	jbe    c0012259 <SysClose(regs*)+0x51>
c0012218:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001221e:	83 fa 01             	cmp    edx,0x1
c0012221:	76 2d                	jbe    c0012250 <SysClose(regs*)+0x48>
c0012223:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012228:	77 2f                	ja     c0012259 <SysClose(regs*)+0x51>
c001222a:	83 ec 0c             	sub    esp,0xc
c001222d:	50                   	push   eax
c001222e:	e8 52 19 00 00       	call   c0013b85 <KeGetFileFromDescriptor(int)>
c0012233:	83 c4 10             	add    esp,0x10
c0012236:	89 c3                	mov    ebx,eax
c0012238:	85 c0                	test   eax,eax
c001223a:	74 1d                	je     c0012259 <SysClose(regs*)+0x51>
c001223c:	83 ec 0c             	sub    esp,0xc
c001223f:	50                   	push   eax
c0012240:	e8 eb 69 ff ff       	call   c0008c30 <File::close()>
c0012245:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001224a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001224d:	83 c4 10             	add    esp,0x10
c0012250:	31 c0                	xor    eax,eax
c0012252:	31 d2                	xor    edx,edx
c0012254:	83 c4 08             	add    esp,0x8
c0012257:	5b                   	pop    ebx
c0012258:	c3                   	ret    
c0012259:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001225e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012263:	83 c4 08             	add    esp,0x8
c0012266:	5b                   	pop    ebx
c0012267:	c3                   	ret    

c0012268 <SysOpenDir(regs*)>:
c0012268:	56                   	push   esi
c0012269:	53                   	push   ebx
c001226a:	83 ec 04             	sub    esp,0x4
c001226d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012271:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012274:	85 c9                	test   ecx,ecx
c0012276:	74 5d                	je     c00122d5 <SysOpenDir(regs*)+0x6d>
c0012278:	83 ec 0c             	sub    esp,0xc
c001227b:	68 14 01 00 00       	push   0x114
c0012280:	e8 72 e0 ff ff       	call   c00102f7 <malloc>
c0012285:	83 c4 0c             	add    esp,0xc
c0012288:	89 c6                	mov    esi,eax
c001228a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001228f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012292:	50                   	push   eax
c0012293:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012296:	52                   	push   edx
c0012297:	56                   	push   esi
c0012298:	e8 f7 6d ff ff       	call   c0009094 <Directory::Directory(char const*, Process*)>
c001229d:	83 c4 10             	add    esp,0x10
c00122a0:	85 f6                	test   esi,esi
c00122a2:	74 31                	je     c00122d5 <SysOpenDir(regs*)+0x6d>
c00122a4:	83 ec 0c             	sub    esp,0xc
c00122a7:	56                   	push   esi
c00122a8:	e8 af 6e ff ff       	call   c000915c <Directory::open()>
c00122ad:	83 c4 10             	add    esp,0x10
c00122b0:	85 c0                	test   eax,eax
c00122b2:	75 21                	jne    c00122d5 <SysOpenDir(regs*)+0x6d>
c00122b4:	83 ec 0c             	sub    esp,0xc
c00122b7:	56                   	push   esi
c00122b8:	e8 cb 15 00 00       	call   c0013888 <UnixFile::getFileDescriptor()>
c00122bd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00122c0:	83 c4 10             	add    esp,0x10
c00122c3:	89 02                	mov    DWORD PTR [edx],eax
c00122c5:	c1 f8 1f             	sar    eax,0x1f
c00122c8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00122cb:	83 c4 04             	add    esp,0x4
c00122ce:	31 c0                	xor    eax,eax
c00122d0:	31 d2                	xor    edx,edx
c00122d2:	5b                   	pop    ebx
c00122d3:	5e                   	pop    esi
c00122d4:	c3                   	ret    
c00122d5:	83 c4 04             	add    esp,0x4
c00122d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122e2:	5b                   	pop    ebx
c00122e3:	5e                   	pop    esi
c00122e4:	c3                   	ret    

c00122e5 <SysMakeDir(regs*)>:
c00122e5:	56                   	push   esi
c00122e6:	53                   	push   ebx
c00122e7:	83 ec 10             	sub    esp,0x10
c00122ea:	68 14 01 00 00       	push   0x114
c00122ef:	e8 03 e0 ff ff       	call   c00102f7 <malloc>
c00122f4:	83 c4 0c             	add    esp,0xc
c00122f7:	89 c3                	mov    ebx,eax
c00122f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012301:	50                   	push   eax
c0012302:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012306:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012309:	52                   	push   edx
c001230a:	53                   	push   ebx
c001230b:	e8 84 6d ff ff       	call   c0009094 <Directory::Directory(char const*, Process*)>
c0012310:	83 c4 10             	add    esp,0x10
c0012313:	85 db                	test   ebx,ebx
c0012315:	74 2c                	je     c0012343 <SysMakeDir(regs*)+0x5e>
c0012317:	83 ec 0c             	sub    esp,0xc
c001231a:	53                   	push   ebx
c001231b:	e8 1c 70 ff ff       	call   c000933c <Directory::create()>
c0012320:	89 c6                	mov    esi,eax
c0012322:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012327:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001232a:	83 c4 10             	add    esp,0x10
c001232d:	31 c0                	xor    eax,eax
c001232f:	85 f6                	test   esi,esi
c0012331:	0f 95 c0             	setne  al
c0012334:	31 d2                	xor    edx,edx
c0012336:	f7 d8                	neg    eax
c0012338:	83 d2 00             	adc    edx,0x0
c001233b:	83 c4 04             	add    esp,0x4
c001233e:	f7 da                	neg    edx
c0012340:	5b                   	pop    ebx
c0012341:	5e                   	pop    esi
c0012342:	c3                   	ret    
c0012343:	83 c4 04             	add    esp,0x4
c0012346:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001234b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012350:	5b                   	pop    ebx
c0012351:	5e                   	pop    esi
c0012352:	c3                   	ret    

c0012353 <SysCloseDir(regs*)>:
c0012353:	53                   	push   ebx
c0012354:	83 ec 08             	sub    esp,0x8
c0012357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001235b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001235e:	8d 50 fd             	lea    edx,[eax-0x3]
c0012361:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012367:	77 2f                	ja     c0012398 <SysCloseDir(regs*)+0x45>
c0012369:	83 ec 0c             	sub    esp,0xc
c001236c:	50                   	push   eax
c001236d:	e8 13 18 00 00       	call   c0013b85 <KeGetFileFromDescriptor(int)>
c0012372:	83 c4 10             	add    esp,0x10
c0012375:	89 c3                	mov    ebx,eax
c0012377:	85 c0                	test   eax,eax
c0012379:	74 1d                	je     c0012398 <SysCloseDir(regs*)+0x45>
c001237b:	83 ec 0c             	sub    esp,0xc
c001237e:	50                   	push   eax
c001237f:	e8 34 6e ff ff       	call   c00091b8 <Directory::close()>
c0012384:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012386:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012389:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001238c:	83 c4 10             	add    esp,0x10
c001238f:	31 c0                	xor    eax,eax
c0012391:	31 d2                	xor    edx,edx
c0012393:	83 c4 08             	add    esp,0x8
c0012396:	5b                   	pop    ebx
c0012397:	c3                   	ret    
c0012398:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001239d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123a2:	83 c4 08             	add    esp,0x8
c00123a5:	5b                   	pop    ebx
c00123a6:	c3                   	ret    

c00123a7 <SysWait(regs*)>:
c00123a7:	83 ec 10             	sub    esp,0x10
c00123aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123ae:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00123b1:	52                   	push   edx
c00123b2:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00123b5:	51                   	push   ecx
c00123b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00123b9:	50                   	push   eax
c00123ba:	e8 21 50 00 00       	call   c00173e0 <waitTask(int, int*, int)>
c00123bf:	83 c4 1c             	add    esp,0x1c
c00123c2:	89 c2                	mov    edx,eax
c00123c4:	c1 fa 1f             	sar    edx,0x1f
c00123c7:	c3                   	ret    

c00123c8 <SysNotImpl(regs*)>:
c00123c8:	83 ec 18             	sub    esp,0x18
c00123cb:	68 0f bb 02 c0       	push   0xc002bb0f
c00123d0:	e8 77 e3 ff ff       	call   c001074c <KePanic(char const*)>
c00123d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123da:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123df:	83 c4 1c             	add    esp,0x1c
c00123e2:	c3                   	ret    

c00123e3 <SysPanic(regs*)>:
c00123e3:	83 ec 18             	sub    esp,0x18
c00123e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00123ea:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00123ed:	50                   	push   eax
c00123ee:	e8 59 e3 ff ff       	call   c001074c <KePanic(char const*)>
c00123f3:	b8 01 00 00 00       	mov    eax,0x1
c00123f8:	31 d2                	xor    edx,edx
c00123fa:	83 c4 1c             	add    esp,0x1c
c00123fd:	c3                   	ret    

c00123fe <SysRmdir(regs*)>:
c00123fe:	56                   	push   esi
c00123ff:	53                   	push   ebx
c0012400:	83 ec 20             	sub    esp,0x20
c0012403:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012407:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001240a:	68 14 01 00 00       	push   0x114
c001240f:	e8 e3 de ff ff       	call   c00102f7 <malloc>
c0012414:	6a 00                	push   0x0
c0012416:	89 c3                	mov    ebx,eax
c0012418:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001241d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012420:	50                   	push   eax
c0012421:	56                   	push   esi
c0012422:	53                   	push   ebx
c0012423:	e8 8e 66 ff ff       	call   c0008ab6 <File::File(char const*, Process*, bool)>
c0012428:	83 c4 14             	add    esp,0x14
c001242b:	53                   	push   ebx
c001242c:	e8 6f 69 ff ff       	call   c0008da0 <File::unlink()>
c0012431:	83 c4 10             	add    esp,0x10
c0012434:	85 db                	test   ebx,ebx
c0012436:	74 14                	je     c001244c <SysRmdir(regs*)+0x4e>
c0012438:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001243c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001243e:	83 ec 0c             	sub    esp,0xc
c0012441:	53                   	push   ebx
c0012442:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012445:	83 c4 10             	add    esp,0x10
c0012448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001244c:	85 c0                	test   eax,eax
c001244e:	0f 95 c0             	setne  al
c0012451:	31 d2                	xor    edx,edx
c0012453:	0f b6 c0             	movzx  eax,al
c0012456:	f7 d8                	neg    eax
c0012458:	83 d2 00             	adc    edx,0x0
c001245b:	83 c4 14             	add    esp,0x14
c001245e:	f7 da                	neg    edx
c0012460:	5b                   	pop    ebx
c0012461:	5e                   	pop    esi
c0012462:	c3                   	ret    

c0012463 <SysUnlink(regs*)>:
c0012463:	56                   	push   esi
c0012464:	53                   	push   ebx
c0012465:	83 ec 20             	sub    esp,0x20
c0012468:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001246c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001246f:	68 14 01 00 00       	push   0x114
c0012474:	e8 7e de ff ff       	call   c00102f7 <malloc>
c0012479:	6a 00                	push   0x0
c001247b:	89 c3                	mov    ebx,eax
c001247d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012482:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012485:	50                   	push   eax
c0012486:	56                   	push   esi
c0012487:	53                   	push   ebx
c0012488:	e8 29 66 ff ff       	call   c0008ab6 <File::File(char const*, Process*, bool)>
c001248d:	83 c4 14             	add    esp,0x14
c0012490:	53                   	push   ebx
c0012491:	e8 0a 69 ff ff       	call   c0008da0 <File::unlink()>
c0012496:	83 c4 10             	add    esp,0x10
c0012499:	85 db                	test   ebx,ebx
c001249b:	74 14                	je     c00124b1 <SysUnlink(regs*)+0x4e>
c001249d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124a1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00124a3:	83 ec 0c             	sub    esp,0xc
c00124a6:	53                   	push   ebx
c00124a7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00124aa:	83 c4 10             	add    esp,0x10
c00124ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124b1:	85 c0                	test   eax,eax
c00124b3:	0f 95 c0             	setne  al
c00124b6:	31 d2                	xor    edx,edx
c00124b8:	0f b6 c0             	movzx  eax,al
c00124bb:	f7 d8                	neg    eax
c00124bd:	83 d2 00             	adc    edx,0x0
c00124c0:	83 c4 14             	add    esp,0x14
c00124c3:	f7 da                	neg    edx
c00124c5:	5b                   	pop    ebx
c00124c6:	5e                   	pop    esi
c00124c7:	c3                   	ret    

c00124c8 <SysGetArgv(regs*)>:
c00124c8:	83 ec 0c             	sub    esp,0xc
c00124cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00124cf:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00124d2:	85 c0                	test   eax,eax
c00124d4:	78 2c                	js     c0012502 <SysGetArgv(regs*)+0x3a>
c00124d6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00124dc:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00124df:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c00124e5:	7d 1b                	jge    c0012502 <SysGetArgv(regs*)+0x3a>
c00124e7:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c00124ee:	85 c0                	test   eax,eax
c00124f0:	74 18                	je     c001250a <SysGetArgv(regs*)+0x42>
c00124f2:	83 ec 08             	sub    esp,0x8
c00124f5:	50                   	push   eax
c00124f6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00124f9:	50                   	push   eax
c00124fa:	e8 41 e1 fe ff       	call   c0000640 <strcpy>
c00124ff:	83 c4 10             	add    esp,0x10
c0012502:	31 c0                	xor    eax,eax
c0012504:	31 d2                	xor    edx,edx
c0012506:	83 c4 0c             	add    esp,0xc
c0012509:	c3                   	ret    
c001250a:	b8 01 00 00 00       	mov    eax,0x1
c001250f:	31 d2                	xor    edx,edx
c0012511:	83 c4 0c             	add    esp,0xc
c0012514:	c3                   	ret    

c0012515 <SysUSleep(regs*)>:
c0012515:	83 ec 1c             	sub    esp,0x1c
c0012518:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001251c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001251f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012522:	6a 00                	push   0x0
c0012524:	6a 64                	push   0x64
c0012526:	52                   	push   edx
c0012527:	50                   	push   eax
c0012528:	e8 67 1f 01 00       	call   c0024494 <__udivdi3>
c001252d:	83 c4 18             	add    esp,0x18
c0012530:	52                   	push   edx
c0012531:	50                   	push   eax
c0012532:	e8 a1 4f 00 00       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c0012537:	31 c0                	xor    eax,eax
c0012539:	31 d2                	xor    edx,edx
c001253b:	83 c4 1c             	add    esp,0x1c
c001253e:	c3                   	ret    

c001253f <SysSpawn(regs*)>:
c001253f:	56                   	push   esi
c0012540:	53                   	push   ebx
c0012541:	83 ec 04             	sub    esp,0x4
c0012544:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012548:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001254b:	85 f6                	test   esi,esi
c001254d:	75 0a                	jne    c0012559 <SysSpawn(regs*)+0x1a>
c001254f:	83 c4 04             	add    esp,0x4
c0012552:	31 c0                	xor    eax,eax
c0012554:	31 d2                	xor    edx,edx
c0012556:	5b                   	pop    ebx
c0012557:	5e                   	pop    esi
c0012558:	c3                   	ret    
c0012559:	83 ec 0c             	sub    esp,0xc
c001255c:	68 c4 07 00 00       	push   0x7c4
c0012561:	e8 91 dd ff ff       	call   c00102f7 <malloc>
c0012566:	83 c4 10             	add    esp,0x10
c0012569:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001256c:	89 c6                	mov    esi,eax
c001256e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012571:	85 c9                	test   ecx,ecx
c0012573:	74 39                	je     c00125ae <SysSpawn(regs*)+0x6f>
c0012575:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001257a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001257d:	52                   	push   edx
c001257e:	50                   	push   eax
c001257f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012582:	50                   	push   eax
c0012583:	56                   	push   esi
c0012584:	e8 17 46 00 00       	call   c0016ba0 <Process::Process(char const*, Process*, char**)>
c0012589:	83 c4 10             	add    esp,0x10
c001258c:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0012593:	75 ba                	jne    c001254f <SysSpawn(regs*)+0x10>
c0012595:	83 ec 0c             	sub    esp,0xc
c0012598:	56                   	push   esi
c0012599:	e8 de 4b 00 00       	call   c001717c <Process::createUserThread()>
c001259e:	8b 06                	mov    eax,DWORD PTR [esi]
c00125a0:	83 c4 10             	add    esp,0x10
c00125a3:	89 c2                	mov    edx,eax
c00125a5:	83 c4 04             	add    esp,0x4
c00125a8:	c1 fa 1f             	sar    edx,0x1f
c00125ab:	5b                   	pop    ebx
c00125ac:	5e                   	pop    esi
c00125ad:	c3                   	ret    
c00125ae:	31 c0                	xor    eax,eax
c00125b0:	eb cb                	jmp    c001257d <SysSpawn(regs*)+0x3e>

c00125b2 <SysGetEnv(regs*)>:
c00125b2:	57                   	push   edi
c00125b3:	56                   	push   esi
c00125b4:	53                   	push   ebx
c00125b5:	83 ec 1c             	sub    esp,0x1c
c00125b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00125bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125c1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00125c4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00125c7:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c00125ca:	51                   	push   ecx
c00125cb:	e8 2d cb ff ff       	call   c000f0fd <KeGetProcessTotalEnvCount(Process*)>
c00125d0:	83 c4 10             	add    esp,0x10
c00125d3:	39 c7                	cmp    edi,eax
c00125d5:	7c 14                	jl     c00125eb <SysGetEnv(regs*)+0x39>
c00125d7:	85 f6                	test   esi,esi
c00125d9:	75 0b                	jne    c00125e6 <SysGetEnv(regs*)+0x34>
c00125db:	83 c4 10             	add    esp,0x10
c00125de:	31 c0                	xor    eax,eax
c00125e0:	5b                   	pop    ebx
c00125e1:	31 d2                	xor    edx,edx
c00125e3:	5e                   	pop    esi
c00125e4:	5f                   	pop    edi
c00125e5:	c3                   	ret    
c00125e6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125e9:	eb f0                	jmp    c00125db <SysGetEnv(regs*)+0x29>
c00125eb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00125ef:	83 ec 04             	sub    esp,0x4
c00125f2:	57                   	push   edi
c00125f3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00125f9:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c00125fc:	57                   	push   edi
c00125fd:	50                   	push   eax
c00125fe:	e8 1a cb ff ff       	call   c000f11d <KeGetProcessEnvPair(Process*, int)>
c0012603:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012606:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001260a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001260e:	83 c4 0c             	add    esp,0xc
c0012611:	85 d2                	test   edx,edx
c0012613:	75 23                	jne    c0012638 <SysGetEnv(regs*)+0x86>
c0012615:	83 ec 0c             	sub    esp,0xc
c0012618:	50                   	push   eax
c0012619:	e8 52 df fe ff       	call   c0000570 <strlen>
c001261e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012621:	89 c3                	mov    ebx,eax
c0012623:	e8 48 df fe ff       	call   c0000570 <strlen>
c0012628:	83 c4 10             	add    esp,0x10
c001262b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001262f:	83 c4 10             	add    esp,0x10
c0012632:	31 d2                	xor    edx,edx
c0012634:	5b                   	pop    ebx
c0012635:	5e                   	pop    esi
c0012636:	5f                   	pop    edi
c0012637:	c3                   	ret    
c0012638:	83 ec 08             	sub    esp,0x8
c001263b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001263e:	50                   	push   eax
c001263f:	56                   	push   esi
c0012640:	e8 fb df fe ff       	call   c0000640 <strcpy>
c0012645:	58                   	pop    eax
c0012646:	5a                   	pop    edx
c0012647:	68 29 bb 02 c0       	push   0xc002bb29
c001264c:	56                   	push   esi
c001264d:	e8 ee e1 fe ff       	call   c0000840 <strcat>
c0012652:	59                   	pop    ecx
c0012653:	5b                   	pop    ebx
c0012654:	57                   	push   edi
c0012655:	56                   	push   esi
c0012656:	e8 e5 e1 fe ff       	call   c0000840 <strcat>
c001265b:	83 c4 10             	add    esp,0x10
c001265e:	e9 78 ff ff ff       	jmp    c00125db <SysGetEnv(regs*)+0x29>

c0012663 <SysSetFatAttrib(regs*)>:
c0012663:	57                   	push   edi
c0012664:	56                   	push   esi
c0012665:	53                   	push   ebx
c0012666:	83 ec 1c             	sub    esp,0x1c
c0012669:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001266d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012670:	68 14 01 00 00       	push   0x114
c0012675:	e8 7d dc ff ff       	call   c00102f7 <malloc>
c001267a:	83 c4 0c             	add    esp,0xc
c001267d:	89 c3                	mov    ebx,eax
c001267f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012684:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012687:	50                   	push   eax
c0012688:	57                   	push   edi
c0012689:	53                   	push   ebx
c001268a:	e8 25 65 ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c001268f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012692:	83 c4 0c             	add    esp,0xc
c0012695:	0f b6 d4             	movzx  edx,ah
c0012698:	0f b6 c0             	movzx  eax,al
c001269b:	52                   	push   edx
c001269c:	50                   	push   eax
c001269d:	53                   	push   ebx
c001269e:	e8 97 67 ff ff       	call   c0008e3a <File::chfatattr(unsigned char, unsigned char)>
c00126a3:	83 c4 10             	add    esp,0x10
c00126a6:	85 db                	test   ebx,ebx
c00126a8:	74 14                	je     c00126be <SysSetFatAttrib(regs*)+0x5b>
c00126aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126ae:	8b 13                	mov    edx,DWORD PTR [ebx]
c00126b0:	83 ec 0c             	sub    esp,0xc
c00126b3:	53                   	push   ebx
c00126b4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00126b7:	83 c4 10             	add    esp,0x10
c00126ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00126be:	85 c0                	test   eax,eax
c00126c0:	0f 95 c0             	setne  al
c00126c3:	31 d2                	xor    edx,edx
c00126c5:	0f b6 c0             	movzx  eax,al
c00126c8:	f7 d8                	neg    eax
c00126ca:	83 d2 00             	adc    edx,0x0
c00126cd:	83 c4 10             	add    esp,0x10
c00126d0:	f7 da                	neg    edx
c00126d2:	5b                   	pop    ebx
c00126d3:	5e                   	pop    esi
c00126d4:	5f                   	pop    edi
c00126d5:	c3                   	ret    

c00126d6 <SysShutdown(regs*)>:
c00126d6:	83 ec 1c             	sub    esp,0x1c
c00126d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126dd:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00126e0:	85 c9                	test   ecx,ecx
c00126e2:	74 18                	je     c00126fc <SysShutdown(regs*)+0x26>
c00126e4:	83 f9 01             	cmp    ecx,0x1
c00126e7:	74 26                	je     c001270f <SysShutdown(regs*)+0x39>
c00126e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00126ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c00126f3:	83 f9 02             	cmp    ecx,0x2
c00126f6:	74 24                	je     c001271c <SysShutdown(regs*)+0x46>
c00126f8:	83 c4 1c             	add    esp,0x1c
c00126fb:	c3                   	ret    
c00126fc:	e8 a1 e9 ff ff       	call   c00110a2 <KeShutdown()>
c0012701:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012706:	ba ff ff ff ff       	mov    edx,0xffffffff
c001270b:	83 c4 1c             	add    esp,0x1c
c001270e:	c3                   	ret    
c001270f:	e8 c4 e9 ff ff       	call   c00110d8 <KeSleep()>
c0012714:	31 c0                	xor    eax,eax
c0012716:	31 d2                	xor    edx,edx
c0012718:	83 c4 1c             	add    esp,0x1c
c001271b:	c3                   	ret    
c001271c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012724:	e8 df e9 ff ff       	call   c0011108 <KeRestart()>
c0012729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012731:	eb c5                	jmp    c00126f8 <SysShutdown(regs*)+0x22>

c0012733 <SysPipe(regs*)>:
c0012733:	57                   	push   edi
c0012734:	56                   	push   esi
c0012735:	53                   	push   ebx
c0012736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001273a:	83 ec 0c             	sub    esp,0xc
c001273d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012740:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012743:	6a 20                	push   0x20
c0012745:	e8 ad db ff ff       	call   c00102f7 <malloc>
c001274a:	89 c3                	mov    ebx,eax
c001274c:	58                   	pop    eax
c001274d:	5a                   	pop    edx
c001274e:	68 00 50 00 00       	push   0x5000
c0012753:	53                   	push   ebx
c0012754:	e8 c9 e7 ff ff       	call   c0010f22 <Pipe::Pipe(int)>
c0012759:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001275c:	e8 27 11 00 00       	call   c0013888 <UnixFile::getFileDescriptor()>
c0012761:	89 07                	mov    DWORD PTR [edi],eax
c0012763:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012766:	e8 1d 11 00 00       	call   c0013888 <UnixFile::getFileDescriptor()>
c001276b:	83 c4 10             	add    esp,0x10
c001276e:	89 06                	mov    DWORD PTR [esi],eax
c0012770:	31 d2                	xor    edx,edx
c0012772:	5b                   	pop    ebx
c0012773:	31 c0                	xor    eax,eax
c0012775:	5e                   	pop    esi
c0012776:	5f                   	pop    edi
c0012777:	c3                   	ret    

c0012778 <SysGetUnixTime(regs*)>:
c0012778:	57                   	push   edi
c0012779:	56                   	push   esi
c001277a:	53                   	push   ebx
c001277b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001277f:	83 ec 08             	sub    esp,0x8
c0012782:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012785:	52                   	push   edx
c0012786:	68 2b bb 02 c0       	push   0xc002bb2b
c001278b:	e8 ec 47 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012790:	83 c4 10             	add    esp,0x10
c0012793:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0012797:	74 3d                	je     c00127d6 <SysGetUnixTime(regs*)+0x5e>
c0012799:	83 ec 0c             	sub    esp,0xc
c001279c:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c00127a1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00127a7:	50                   	push   eax
c00127a8:	e8 b9 73 ff ff       	call   c0009b66 <Clock::timeInSecondsLocal()>
c00127ad:	83 c4 0c             	add    esp,0xc
c00127b0:	52                   	push   edx
c00127b1:	50                   	push   eax
c00127b2:	68 3f bb 02 c0       	push   0xc002bb3f
c00127b7:	e8 c0 47 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00127bc:	83 c4 10             	add    esp,0x10
c00127bf:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c00127c4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00127ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127ce:	5b                   	pop    ebx
c00127cf:	5e                   	pop    esi
c00127d0:	5f                   	pop    edi
c00127d1:	e9 90 73 ff ff       	jmp    c0009b66 <Clock::timeInSecondsLocal()>
c00127d6:	8b 35 50 5b 03 c0    	mov    esi,DWORD PTR ds:0xc0035b50
c00127dc:	8b 3d 54 5b 03 c0    	mov    edi,DWORD PTR ds:0xc0035b54
c00127e2:	89 f0                	mov    eax,esi
c00127e4:	89 fa                	mov    edx,edi
c00127e6:	01 f0                	add    eax,esi
c00127e8:	11 fa                	adc    edx,edi
c00127ea:	01 f0                	add    eax,esi
c00127ec:	11 fa                	adc    edx,edi
c00127ee:	89 c1                	mov    ecx,eax
c00127f0:	89 d3                	mov    ebx,edx
c00127f2:	0f a4 cb 05          	shld   ebx,ecx,0x5
c00127f6:	c1 e1 05             	shl    ecx,0x5
c00127f9:	01 c8                	add    eax,ecx
c00127fb:	11 da                	adc    edx,ebx
c00127fd:	01 f0                	add    eax,esi
c00127ff:	5b                   	pop    ebx
c0012800:	11 fa                	adc    edx,edi
c0012802:	5e                   	pop    esi
c0012803:	5f                   	pop    edi
c0012804:	c3                   	ret    

c0012805 <string_ends_with(char const*, char const*)>:
c0012805:	57                   	push   edi
c0012806:	56                   	push   esi
c0012807:	53                   	push   ebx
c0012808:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001280c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012810:	83 ec 0c             	sub    esp,0xc
c0012813:	53                   	push   ebx
c0012814:	e8 57 dd fe ff       	call   c0000570 <strlen>
c0012819:	89 3c 24             	mov    DWORD PTR [esp],edi
c001281c:	89 c6                	mov    esi,eax
c001281e:	e8 4d dd fe ff       	call   c0000570 <strlen>
c0012823:	83 c4 10             	add    esp,0x10
c0012826:	39 c6                	cmp    esi,eax
c0012828:	7d 06                	jge    c0012830 <string_ends_with(char const*, char const*)+0x2b>
c001282a:	5b                   	pop    ebx
c001282b:	31 c0                	xor    eax,eax
c001282d:	5e                   	pop    esi
c001282e:	5f                   	pop    edi
c001282f:	c3                   	ret    
c0012830:	83 ec 08             	sub    esp,0x8
c0012833:	29 c6                	sub    esi,eax
c0012835:	57                   	push   edi
c0012836:	01 f3                	add    ebx,esi
c0012838:	53                   	push   ebx
c0012839:	e8 12 df fe ff       	call   c0000750 <strcmp>
c001283e:	83 c4 10             	add    esp,0x10
c0012841:	85 c0                	test   eax,eax
c0012843:	5b                   	pop    ebx
c0012844:	0f 94 c0             	sete   al
c0012847:	5e                   	pop    esi
c0012848:	0f b6 c0             	movzx  eax,al
c001284b:	5f                   	pop    edi
c001284c:	c3                   	ret    

c001284d <SysOpen(regs*)>:
c001284d:	56                   	push   esi
c001284e:	53                   	push   ebx
c001284f:	81 ec 04 01 00 00    	sub    esp,0x104
c0012855:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001285c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001285f:	85 c0                	test   eax,eax
c0012861:	0f 84 bc 01 00 00    	je     c0012a23 <SysOpen(regs*)+0x1d6>
c0012867:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001286a:	85 c0                	test   eax,eax
c001286c:	0f 84 b1 01 00 00    	je     c0012a23 <SysOpen(regs*)+0x1d6>
c0012872:	6a 00                	push   0x0
c0012874:	68 46 bb 02 c0       	push   0xc002bb46
c0012879:	50                   	push   eax
c001287a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001287e:	56                   	push   esi
c001287f:	e8 18 60 ff ff       	call   c000889c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012884:	89 34 24             	mov    DWORD PTR [esp],esi
c0012887:	e8 e4 dc fe ff       	call   c0000570 <strlen>
c001288c:	83 c4 10             	add    esp,0x10
c001288f:	83 e8 01             	sub    eax,0x1
c0012892:	74 21                	je     c00128b5 <SysOpen(regs*)+0x68>
c0012894:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012898:	eb 12                	jmp    c00128ac <SysOpen(regs*)+0x5f>
c001289a:	83 fa 3a             	cmp    edx,0x3a
c001289d:	74 12                	je     c00128b1 <SysOpen(regs*)+0x64>
c001289f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00128a3:	83 e8 01             	sub    eax,0x1
c00128a6:	74 0d                	je     c00128b5 <SysOpen(regs*)+0x68>
c00128a8:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00128ac:	83 fa 2e             	cmp    edx,0x2e
c00128af:	75 e9                	jne    c001289a <SysOpen(regs*)+0x4d>
c00128b1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00128b5:	83 ec 08             	sub    esp,0x8
c00128b8:	68 4a bb 02 c0       	push   0xc002bb4a
c00128bd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128c0:	50                   	push   eax
c00128c1:	e8 3f ff ff ff       	call   c0012805 <string_ends_with(char const*, char const*)>
c00128c6:	83 c4 10             	add    esp,0x10
c00128c9:	85 c0                	test   eax,eax
c00128cb:	74 1d                	je     c00128ea <SysOpen(regs*)+0x9d>
c00128cd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128d0:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00128d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00128dd:	81 c4 04 01 00 00    	add    esp,0x104
c00128e3:	31 c0                	xor    eax,eax
c00128e5:	31 d2                	xor    edx,edx
c00128e7:	5b                   	pop    ebx
c00128e8:	5e                   	pop    esi
c00128e9:	c3                   	ret    
c00128ea:	83 ec 08             	sub    esp,0x8
c00128ed:	68 4f bb 02 c0       	push   0xc002bb4f
c00128f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128f5:	50                   	push   eax
c00128f6:	e8 0a ff ff ff       	call   c0012805 <string_ends_with(char const*, char const*)>
c00128fb:	83 c4 10             	add    esp,0x10
c00128fe:	85 c0                	test   eax,eax
c0012900:	75 cb                	jne    c00128cd <SysOpen(regs*)+0x80>
c0012902:	83 ec 08             	sub    esp,0x8
c0012905:	68 4b bb 02 c0       	push   0xc002bb4b
c001290a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001290d:	50                   	push   eax
c001290e:	e8 3d de fe ff       	call   c0000750 <strcmp>
c0012913:	83 c4 10             	add    esp,0x10
c0012916:	85 c0                	test   eax,eax
c0012918:	74 b3                	je     c00128cd <SysOpen(regs*)+0x80>
c001291a:	83 ec 08             	sub    esp,0x8
c001291d:	68 4a bb 02 c0       	push   0xc002bb4a
c0012922:	56                   	push   esi
c0012923:	e8 dd fe ff ff       	call   c0012805 <string_ends_with(char const*, char const*)>
c0012928:	83 c4 10             	add    esp,0x10
c001292b:	85 c0                	test   eax,eax
c001292d:	75 9e                	jne    c00128cd <SysOpen(regs*)+0x80>
c001292f:	83 ec 08             	sub    esp,0x8
c0012932:	68 54 bb 02 c0       	push   0xc002bb54
c0012937:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001293a:	50                   	push   eax
c001293b:	e8 c5 fe ff ff       	call   c0012805 <string_ends_with(char const*, char const*)>
c0012940:	83 c4 10             	add    esp,0x10
c0012943:	85 c0                	test   eax,eax
c0012945:	0f 85 eb 00 00 00    	jne    c0012a36 <SysOpen(regs*)+0x1e9>
c001294b:	83 ec 08             	sub    esp,0x8
c001294e:	68 59 bb 02 c0       	push   0xc002bb59
c0012953:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012956:	50                   	push   eax
c0012957:	e8 a9 fe ff ff       	call   c0012805 <string_ends_with(char const*, char const*)>
c001295c:	83 c4 10             	add    esp,0x10
c001295f:	85 c0                	test   eax,eax
c0012961:	0f 85 cf 00 00 00    	jne    c0012a36 <SysOpen(regs*)+0x1e9>
c0012967:	83 ec 08             	sub    esp,0x8
c001296a:	68 55 bb 02 c0       	push   0xc002bb55
c001296f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012972:	51                   	push   ecx
c0012973:	e8 d8 dd fe ff       	call   c0000750 <strcmp>
c0012978:	83 c4 10             	add    esp,0x10
c001297b:	85 c0                	test   eax,eax
c001297d:	0f 84 b3 00 00 00    	je     c0012a36 <SysOpen(regs*)+0x1e9>
c0012983:	83 ec 08             	sub    esp,0x8
c0012986:	68 54 bb 02 c0       	push   0xc002bb54
c001298b:	56                   	push   esi
c001298c:	e8 74 fe ff ff       	call   c0012805 <string_ends_with(char const*, char const*)>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	85 c0                	test   eax,eax
c0012996:	0f 85 9a 00 00 00    	jne    c0012a36 <SysOpen(regs*)+0x1e9>
c001299c:	83 ec 0c             	sub    esp,0xc
c001299f:	68 14 01 00 00       	push   0x114
c00129a4:	e8 4e d9 ff ff       	call   c00102f7 <malloc>
c00129a9:	83 c4 0c             	add    esp,0xc
c00129ac:	89 c6                	mov    esi,eax
c00129ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00129b6:	50                   	push   eax
c00129b7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00129ba:	52                   	push   edx
c00129bb:	56                   	push   esi
c00129bc:	e8 f3 61 ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c00129c1:	83 c4 10             	add    esp,0x10
c00129c4:	85 f6                	test   esi,esi
c00129c6:	74 5b                	je     c0012a23 <SysOpen(regs*)+0x1d6>
c00129c8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00129cb:	0f b6 c2             	movzx  eax,dl
c00129ce:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00129d1:	89 d0                	mov    eax,edx
c00129d3:	83 e0 01             	and    eax,0x1
c00129d6:	f6 c2 02             	test   dl,0x2
c00129d9:	74 03                	je     c00129de <SysOpen(regs*)+0x191>
c00129db:	83 c8 02             	or     eax,0x2
c00129de:	f6 c2 04             	test   dl,0x4
c00129e1:	74 03                	je     c00129e6 <SysOpen(regs*)+0x199>
c00129e3:	83 c8 04             	or     eax,0x4
c00129e6:	f6 c2 08             	test   dl,0x8
c00129e9:	74 03                	je     c00129ee <SysOpen(regs*)+0x1a1>
c00129eb:	83 c8 0a             	or     eax,0xa
c00129ee:	80 e2 10             	and    dl,0x10
c00129f1:	74 03                	je     c00129f6 <SysOpen(regs*)+0x1a9>
c00129f3:	83 c8 12             	or     eax,0x12
c00129f6:	83 ec 08             	sub    esp,0x8
c00129f9:	50                   	push   eax
c00129fa:	56                   	push   esi
c00129fb:	e8 d2 61 ff ff       	call   c0008bd2 <File::open(FileOpenMode)>
c0012a00:	83 c4 10             	add    esp,0x10
c0012a03:	85 c0                	test   eax,eax
c0012a05:	75 1c                	jne    c0012a23 <SysOpen(regs*)+0x1d6>
c0012a07:	83 ec 0c             	sub    esp,0xc
c0012a0a:	56                   	push   esi
c0012a0b:	e8 78 0e 00 00       	call   c0013888 <UnixFile::getFileDescriptor()>
c0012a10:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a13:	83 c4 10             	add    esp,0x10
c0012a16:	89 02                	mov    DWORD PTR [edx],eax
c0012a18:	c1 f8 1f             	sar    eax,0x1f
c0012a1b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a1e:	e9 ba fe ff ff       	jmp    c00128dd <SysOpen(regs*)+0x90>
c0012a23:	81 c4 04 01 00 00    	add    esp,0x104
c0012a29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012a33:	5b                   	pop    ebx
c0012a34:	5e                   	pop    esi
c0012a35:	c3                   	ret    
c0012a36:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a39:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012a3f:	e9 92 fe ff ff       	jmp    c00128d6 <SysOpen(regs*)+0x89>

c0012a44 <KeSystemCall(regs*, void*)>:
c0012a44:	53                   	push   ebx
c0012a45:	83 ec 08             	sub    esp,0x8
c0012a48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a4c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012a4f:	83 f8 48             	cmp    eax,0x48
c0012a52:	77 16                	ja     c0012a6a <KeSystemCall(regs*, void*)+0x26>
c0012a54:	8b 14 85 20 fd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd02e0]
c0012a5b:	85 d2                	test   edx,edx
c0012a5d:	74 0b                	je     c0012a6a <KeSystemCall(regs*, void*)+0x26>
c0012a5f:	83 ec 0c             	sub    esp,0xc
c0012a62:	53                   	push   ebx
c0012a63:	ff d2                	call   edx
c0012a65:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012a68:	eb 0d                	jmp    c0012a77 <KeSystemCall(regs*, void*)+0x33>
c0012a6a:	52                   	push   edx
c0012a6b:	52                   	push   edx
c0012a6c:	50                   	push   eax
c0012a6d:	68 5e bb 02 c0       	push   0xc002bb5e
c0012a72:	e8 05 45 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012a77:	83 c4 10             	add    esp,0x10
c0012a7a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012a7f:	31 d2                	xor    edx,edx
c0012a81:	83 c4 08             	add    esp,0x8
c0012a84:	5b                   	pop    ebx
c0012a85:	c3                   	ret    

c0012a86 <VgaText::isAtty()>:
c0012a86:	b0 01                	mov    al,0x1
c0012a88:	c3                   	ret    
c0012a89:	90                   	nop

c0012a8a <VgaText::~VgaText()>:
c0012a8a:	83 ec 0c             	sub    esp,0xc
c0012a8d:	ba c8 bb 02 c0       	mov    edx,0xc002bbc8
c0012a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a96:	89 10                	mov    DWORD PTR [eax],edx
c0012a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a9c:	83 ec 0c             	sub    esp,0xc
c0012a9f:	50                   	push   eax
c0012aa0:	e8 d1 0f 00 00       	call   c0013a76 <UnixFile::~UnixFile()>
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	90                   	nop
c0012aa9:	83 c4 0c             	add    esp,0xc
c0012aac:	c3                   	ret    
c0012aad:	90                   	nop

c0012aae <VgaText::~VgaText()>:
c0012aae:	83 ec 0c             	sub    esp,0xc
c0012ab1:	83 ec 0c             	sub    esp,0xc
c0012ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ab8:	e8 cd ff ff ff       	call   c0012a8a <VgaText::~VgaText()>
c0012abd:	83 c4 10             	add    esp,0x10
c0012ac0:	83 ec 08             	sub    esp,0x8
c0012ac3:	68 84 01 00 00       	push   0x184
c0012ac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012acc:	e8 33 b3 ff ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0012ad1:	83 c4 10             	add    esp,0x10
c0012ad4:	83 c4 0c             	add    esp,0xc
c0012ad7:	c3                   	ret    

c0012ad8 <VgaText::read(unsigned long long, void*, int*)>:
c0012ad8:	83 ec 10             	sub    esp,0x10
c0012adb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012adf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012ae3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae7:	e8 af 84 ff ff       	call   c000af9b <readKeyboard(VgaText*, char*, unsigned long)>
c0012aec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012af0:	89 02                	mov    DWORD PTR [edx],eax
c0012af2:	31 c0                	xor    eax,eax
c0012af4:	83 c4 1c             	add    esp,0x1c
c0012af7:	c3                   	ret    

c0012af8 <setTerminalScrollLock(bool)>:
c0012af8:	c3                   	ret    

c0012af9 <doTerminalCycle()>:
c0012af9:	c3                   	ret    

c0012afa <addToTerminalCycle(VgaText*)>:
c0012afa:	c3                   	ret    

c0012afb <scrollTerminalScrollLock(int)>:
c0012afb:	c3                   	ret    

c0012afc <VgaText::updateTitle()>:
c0012afc:	c3                   	ret    
c0012afd:	90                   	nop

c0012afe <VgaText::load()>:
c0012afe:	c3                   	ret    
c0012aff:	90                   	nop

c0012b00 <VgaText::updateCursor()>:
c0012b00:	83 ec 14             	sub    esp,0x14
c0012b03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b07:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012b0a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012b0d:	e8 96 9b 00 00       	call   c001c6a8 <HalConsoleCursorUpdate(int, int)>
c0012b12:	83 c4 1c             	add    esp,0x1c
c0012b15:	c3                   	ret    

c0012b16 <VgaText::doANSI_SGR(int)>:
c0012b16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b1e:	85 d2                	test   edx,edx
c0012b20:	75 0b                	jne    c0012b2d <VgaText::doANSI_SGR(int)+0x17>
c0012b22:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012b25:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012b28:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012b2b:	eb 59                	jmp    c0012b86 <VgaText::doANSI_SGR(int)+0x70>
c0012b2d:	83 fa 07             	cmp    edx,0x7
c0012b30:	75 0b                	jne    c0012b3d <VgaText::doANSI_SGR(int)+0x27>
c0012b32:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012b35:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0012b38:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0012b3b:	eb 49                	jmp    c0012b86 <VgaText::doANSI_SGR(int)+0x70>
c0012b3d:	83 fa 1b             	cmp    edx,0x1b
c0012b40:	74 e0                	je     c0012b22 <VgaText::doANSI_SGR(int)+0xc>
c0012b42:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012b45:	83 f9 07             	cmp    ecx,0x7
c0012b48:	77 09                	ja     c0012b53 <VgaText::doANSI_SGR(int)+0x3d>
c0012b4a:	8b 14 8d 80 fe 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd0180]
c0012b51:	eb 20                	jmp    c0012b73 <VgaText::doANSI_SGR(int)+0x5d>
c0012b53:	8d 4a d8             	lea    ecx,[edx-0x28]
c0012b56:	83 f9 07             	cmp    ecx,0x7
c0012b59:	77 09                	ja     c0012b64 <VgaText::doANSI_SGR(int)+0x4e>
c0012b5b:	8b 14 8d 80 fe 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd0180]
c0012b62:	eb 22                	jmp    c0012b86 <VgaText::doANSI_SGR(int)+0x70>
c0012b64:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0012b67:	83 f9 07             	cmp    ecx,0x7
c0012b6a:	77 0b                	ja     c0012b77 <VgaText::doANSI_SGR(int)+0x61>
c0012b6c:	8b 14 95 38 fd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd02c8]
c0012b73:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012b76:	c3                   	ret    
c0012b77:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0012b7a:	83 f9 07             	cmp    ecx,0x7
c0012b7d:	77 0a                	ja     c0012b89 <VgaText::doANSI_SGR(int)+0x73>
c0012b7f:	8b 14 95 10 fd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd02f0]
c0012b86:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012b89:	c3                   	ret    

c0012b8a <VgaText::setDefaultBgColour(VgaColour)>:
c0012b8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b92:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012b95:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012b98:	c3                   	ret    
c0012b99:	90                   	nop

c0012b9a <VgaText::setDefaultFgColour(VgaColour)>:
c0012b9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ba2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012ba5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012ba8:	c3                   	ret    
c0012ba9:	90                   	nop

c0012baa <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0012baa:	53                   	push   ebx
c0012bab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012baf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012bb3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012bb7:	51                   	push   ecx
c0012bb8:	e8 cd ff ff ff       	call   c0012b8a <VgaText::setDefaultBgColour(VgaColour)>
c0012bbd:	58                   	pop    eax
c0012bbe:	5a                   	pop    edx
c0012bbf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012bc3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0012bc7:	5b                   	pop    ebx
c0012bc8:	eb d0                	jmp    c0012b9a <VgaText::setDefaultFgColour(VgaColour)>

c0012bca <VgaText::setTitleTextColour(VgaColour)>:
c0012bca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bd2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012bd5:	c3                   	ret    

c0012bd6 <VgaText::setTitleColour(VgaColour)>:
c0012bd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bde:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012be1:	c3                   	ret    

c0012be2 <VgaText::setTitle(char*)>:
c0012be2:	c3                   	ret    
c0012be3:	90                   	nop

c0012be4 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012bed:	83 e0 0f             	and    eax,0xf
c0012bf0:	c1 e2 04             	shl    edx,0x4
c0012bf3:	09 d0                	or     eax,edx
c0012bf5:	c3                   	ret    

c0012bf6 <VgaText::scrollScreen()>:
c0012bf6:	55                   	push   ebp
c0012bf7:	57                   	push   edi
c0012bf8:	56                   	push   esi
c0012bf9:	be 01 00 00 00       	mov    esi,0x1
c0012bfe:	53                   	push   ebx
c0012bff:	83 ec 0c             	sub    esp,0xc
c0012c02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012c06:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012c09:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012c0f:	31 ff                	xor    edi,edi
c0012c11:	01 e9                	add    ecx,ebp
c0012c13:	8a 01                	mov    al,BYTE PTR [ecx]
c0012c15:	83 fe 18             	cmp    esi,0x18
c0012c18:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012c1e:	75 20                	jne    c0012c40 <VgaText::scrollScreen()+0x4a>
c0012c20:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c26:	74 15                	je     c0012c3d <VgaText::scrollScreen()+0x47>
c0012c28:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012c2c:	50                   	push   eax
c0012c2d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012c31:	50                   	push   eax
c0012c32:	e8 ad ff ff ff       	call   c0012be4 <VgaText::combineColours(unsigned char, unsigned char)>
c0012c37:	5a                   	pop    edx
c0012c38:	5a                   	pop    edx
c0012c39:	88 01                	mov    BYTE PTR [ecx],al
c0012c3b:	eb 03                	jmp    c0012c40 <VgaText::scrollScreen()+0x4a>
c0012c3d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012c40:	47                   	inc    edi
c0012c41:	41                   	inc    ecx
c0012c42:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012c48:	75 c9                	jne    c0012c13 <VgaText::scrollScreen()+0x1d>
c0012c4a:	46                   	inc    esi
c0012c4b:	83 fe 19             	cmp    esi,0x19
c0012c4e:	75 b9                	jne    c0012c09 <VgaText::scrollScreen()+0x13>
c0012c50:	39 1d f4 61 03 c0    	cmp    DWORD PTR ds:0xc00361f4,ebx
c0012c56:	75 1f                	jne    c0012c77 <VgaText::scrollScreen()+0x81>
c0012c58:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0012c5c:	74 05                	je     c0012c63 <VgaText::scrollScreen()+0x6d>
c0012c5e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0012c61:	eb 14                	jmp    c0012c77 <VgaText::scrollScreen()+0x81>
c0012c63:	50                   	push   eax
c0012c64:	50                   	push   eax
c0012c65:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012c69:	50                   	push   eax
c0012c6a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012c6e:	50                   	push   eax
c0012c6f:	e8 c8 98 00 00       	call   c001c53c <HalConsoleScroll(int, int)>
c0012c74:	83 c4 10             	add    esp,0x10
c0012c77:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012c7b:	83 c4 0c             	add    esp,0xc
c0012c7e:	5b                   	pop    ebx
c0012c7f:	5e                   	pop    esi
c0012c80:	5f                   	pop    edi
c0012c81:	5d                   	pop    ebp
c0012c82:	e9 79 fe ff ff       	jmp    c0012b00 <VgaText::updateCursor()>
c0012c87:	90                   	nop

c0012c88 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012c88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012c8d:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0012c92:	c1 e0 08             	shl    eax,0x8
c0012c95:	09 d0                	or     eax,edx
c0012c97:	c3                   	ret    

c0012c98 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012c98:	55                   	push   ebp
c0012c99:	57                   	push   edi
c0012c9a:	56                   	push   esi
c0012c9b:	53                   	push   ebx
c0012c9c:	83 ec 1c             	sub    esp,0x1c
c0012c9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012ca3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012ca7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012cab:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012cae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012cb2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012cb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012cba:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012cbe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012cc2:	85 ed                	test   ebp,ebp
c0012cc4:	75 14                	jne    c0012cda <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0012cc6:	c7 44 24 30 72 bb 02 c0 	mov    DWORD PTR [esp+0x30],0xc002bb72
c0012cce:	83 c4 1c             	add    esp,0x1c
c0012cd1:	5b                   	pop    ebx
c0012cd2:	5e                   	pop    esi
c0012cd3:	5f                   	pop    edi
c0012cd4:	5d                   	pop    ebp
c0012cd5:	e9 72 da ff ff       	jmp    c001074c <KePanic(char const*)>
c0012cda:	50                   	push   eax
c0012cdb:	50                   	push   eax
c0012cdc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012ce1:	50                   	push   eax
c0012ce2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012ce7:	50                   	push   eax
c0012ce8:	e8 f7 fe ff ff       	call   c0012be4 <VgaText::combineColours(unsigned char, unsigned char)>
c0012ced:	5a                   	pop    edx
c0012cee:	0f be c9             	movsx  ecx,cl
c0012cf1:	5a                   	pop    edx
c0012cf2:	0f b6 c0             	movzx  eax,al
c0012cf5:	50                   	push   eax
c0012cf6:	51                   	push   ecx
c0012cf7:	e8 8c ff ff ff       	call   c0012c88 <VgaText::combineCharAndColour(char, unsigned char)>
c0012cfc:	6b d6 50             	imul   edx,esi,0x50
c0012cff:	83 c4 10             	add    esp,0x10
c0012d02:	01 da                	add    edx,ebx
c0012d04:	0f b7 d2             	movzx  edx,dx
c0012d07:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012d0c:	39 3d f4 61 03 c0    	cmp    DWORD PTR ds:0xc00361f4,edi
c0012d12:	75 28                	jne    c0012d3c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012d14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d18:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012d1c:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012d20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012d24:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012d28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012d2c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012d30:	83 c4 1c             	add    esp,0x1c
c0012d33:	5b                   	pop    ebx
c0012d34:	5e                   	pop    esi
c0012d35:	5f                   	pop    edi
c0012d36:	5d                   	pop    ebp
c0012d37:	e9 08 99 00 00       	jmp    c001c644 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012d3c:	83 c4 1c             	add    esp,0x1c
c0012d3f:	5b                   	pop    ebx
c0012d40:	5e                   	pop    esi
c0012d41:	5f                   	pop    edi
c0012d42:	5d                   	pop    ebp
c0012d43:	c3                   	ret    

c0012d44 <VgaText::getCursorX()>:
c0012d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d48:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0012d4b:	c3                   	ret    

c0012d4c <VgaText::getCursorY()>:
c0012d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d50:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012d53:	c3                   	ret    

c0012d54 <VgaText::setCursor(int, int)>:
c0012d54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d5c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0012d5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012d63:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012d66:	e9 95 fd ff ff       	jmp    c0012b00 <VgaText::updateCursor()>

c0012d6b <setActiveTerminal(VgaText*)>:
c0012d6b:	53                   	push   ebx
c0012d6c:	83 ec 08             	sub    esp,0x8
c0012d6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d73:	85 db                	test   ebx,ebx
c0012d75:	75 11                	jne    c0012d88 <setActiveTerminal(VgaText*)+0x1d>
c0012d77:	c7 44 24 10 82 bb 02 c0 	mov    DWORD PTR [esp+0x10],0xc002bb82
c0012d7f:	83 c4 08             	add    esp,0x8
c0012d82:	5b                   	pop    ebx
c0012d83:	e9 c4 d9 ff ff       	jmp    c001074c <KePanic(char const*)>
c0012d88:	a1 f4 61 03 c0       	mov    eax,ds:0xc00361f4
c0012d8d:	85 c0                	test   eax,eax
c0012d8f:	74 0c                	je     c0012d9d <setActiveTerminal(VgaText*)+0x32>
c0012d91:	83 ec 0c             	sub    esp,0xc
c0012d94:	50                   	push   eax
c0012d95:	e8 66 fd ff ff       	call   c0012b00 <VgaText::updateCursor()>
c0012d9a:	83 c4 10             	add    esp,0x10
c0012d9d:	89 1d f4 61 03 c0    	mov    DWORD PTR ds:0xc00361f4,ebx
c0012da3:	50                   	push   eax
c0012da4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012da7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012daa:	53                   	push   ebx
c0012dab:	e8 a4 ff ff ff       	call   c0012d54 <VgaText::setCursor(int, int)>
c0012db0:	83 c4 18             	add    esp,0x18
c0012db3:	5b                   	pop    ebx
c0012db4:	c3                   	ret    
c0012db5:	90                   	nop

c0012db6 <VgaText::clearScreen()>:
c0012db6:	57                   	push   edi
c0012db7:	56                   	push   esi
c0012db8:	31 f6                	xor    esi,esi
c0012dba:	53                   	push   ebx
c0012dbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012dbf:	52                   	push   edx
c0012dc0:	6a 00                	push   0x0
c0012dc2:	6a 00                	push   0x0
c0012dc4:	53                   	push   ebx
c0012dc5:	e8 8a ff ff ff       	call   c0012d54 <VgaText::setCursor(int, int)>
c0012dca:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012dd1:	83 c4 10             	add    esp,0x10
c0012dd4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0012dd7:	7e 20                	jle    c0012df9 <VgaText::clearScreen()+0x43>
c0012dd9:	31 ff                	xor    edi,edi
c0012ddb:	50                   	push   eax
c0012ddc:	50                   	push   eax
c0012ddd:	56                   	push   esi
c0012dde:	57                   	push   edi
c0012ddf:	47                   	inc    edi
c0012de0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012de3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012de6:	6a 20                	push   0x20
c0012de8:	53                   	push   ebx
c0012de9:	e8 aa fe ff ff       	call   c0012c98 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012dee:	83 c4 20             	add    esp,0x20
c0012df1:	83 ff 50             	cmp    edi,0x50
c0012df4:	75 e5                	jne    c0012ddb <VgaText::clearScreen()+0x25>
c0012df6:	46                   	inc    esi
c0012df7:	eb db                	jmp    c0012dd4 <VgaText::clearScreen()+0x1e>
c0012df9:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012e00:	5b                   	pop    ebx
c0012e01:	5e                   	pop    esi
c0012e02:	5f                   	pop    edi
c0012e03:	c3                   	ret    

c0012e04 <VgaText::setCursorX(int)>:
c0012e04:	83 ec 10             	sub    esp,0x10
c0012e07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e0b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e12:	50                   	push   eax
c0012e13:	e8 3c ff ff ff       	call   c0012d54 <VgaText::setCursor(int, int)>
c0012e18:	83 c4 1c             	add    esp,0x1c
c0012e1b:	c3                   	ret    

c0012e1c <VgaText::setCursorY(int)>:
c0012e1c:	83 ec 10             	sub    esp,0x10
c0012e1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e27:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012e2a:	50                   	push   eax
c0012e2b:	e8 24 ff ff ff       	call   c0012d54 <VgaText::setCursor(int, int)>
c0012e30:	83 c4 1c             	add    esp,0x1c
c0012e33:	c3                   	ret    

c0012e34 <VgaText::incrementCursor(bool)>:
c0012e34:	56                   	push   esi
c0012e35:	53                   	push   ebx
c0012e36:	51                   	push   ecx
c0012e37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e3b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012e3f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012e42:	40                   	inc    eax
c0012e43:	83 f8 50             	cmp    eax,0x50
c0012e46:	74 05                	je     c0012e4d <VgaText::incrementCursor(bool)+0x19>
c0012e48:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0012e4b:	eb 24                	jmp    c0012e71 <VgaText::incrementCursor(bool)+0x3d>
c0012e4d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012e50:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012e57:	8d 50 01             	lea    edx,[eax+0x1]
c0012e5a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012e5d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012e60:	75 0f                	jne    c0012e71 <VgaText::incrementCursor(bool)+0x3d>
c0012e62:	83 ec 0c             	sub    esp,0xc
c0012e65:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012e68:	53                   	push   ebx
c0012e69:	e8 88 fd ff ff       	call   c0012bf6 <VgaText::scrollScreen()>
c0012e6e:	83 c4 10             	add    esp,0x10
c0012e71:	89 f0                	mov    eax,esi
c0012e73:	84 c0                	test   al,al
c0012e75:	74 0c                	je     c0012e83 <VgaText::incrementCursor(bool)+0x4f>
c0012e77:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012e7b:	5a                   	pop    edx
c0012e7c:	5b                   	pop    ebx
c0012e7d:	5e                   	pop    esi
c0012e7e:	e9 7d fc ff ff       	jmp    c0012b00 <VgaText::updateCursor()>
c0012e83:	58                   	pop    eax
c0012e84:	5b                   	pop    ebx
c0012e85:	5e                   	pop    esi
c0012e86:	c3                   	ret    
c0012e87:	90                   	nop

c0012e88 <VgaText::decrementCursor(bool)>:
c0012e88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012e90:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0012e93:	85 c0                	test   eax,eax
c0012e95:	74 04                	je     c0012e9b <VgaText::decrementCursor(bool)+0x13>
c0012e97:	48                   	dec    eax
c0012e98:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012e9b:	84 c9                	test   cl,cl
c0012e9d:	74 09                	je     c0012ea8 <VgaText::decrementCursor(bool)+0x20>
c0012e9f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ea3:	e9 58 fc ff ff       	jmp    c0012b00 <VgaText::updateCursor()>
c0012ea8:	c3                   	ret    
c0012ea9:	90                   	nop

c0012eaa <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012eaa:	53                   	push   ebx
c0012eab:	83 ec 08             	sub    esp,0x8
c0012eae:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012eb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012eb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012ebb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012ebf:	83 f8 07             	cmp    eax,0x7
c0012ec2:	75 21                	jne    c0012ee5 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012ec4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012ecc:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012ed4:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012edc:	83 c4 08             	add    esp,0x8
c0012edf:	5b                   	pop    ebx
c0012ee0:	e9 72 65 ff ff       	jmp    c0009457 <KeBeep(int, int, bool)>
c0012ee5:	83 f8 0d             	cmp    eax,0xd
c0012ee8:	75 09                	jne    c0012ef3 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0012eea:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012ef1:	eb 2d                	jmp    c0012f20 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012ef3:	83 f8 0a             	cmp    eax,0xa
c0012ef6:	75 31                	jne    c0012f29 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012ef8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012efb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012f02:	8d 50 01             	lea    edx,[eax+0x1]
c0012f05:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012f08:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012f0b:	75 0f                	jne    c0012f1c <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012f0d:	83 ec 0c             	sub    esp,0xc
c0012f10:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012f13:	53                   	push   ebx
c0012f14:	e8 dd fc ff ff       	call   c0012bf6 <VgaText::scrollScreen()>
c0012f19:	83 c4 10             	add    esp,0x10
c0012f1c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f20:	83 c4 08             	add    esp,0x8
c0012f23:	5b                   	pop    ebx
c0012f24:	e9 d7 fb ff ff       	jmp    c0012b00 <VgaText::updateCursor()>
c0012f29:	83 f8 08             	cmp    eax,0x8
c0012f2c:	75 25                	jne    c0012f53 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012f2e:	50                   	push   eax
c0012f2f:	50                   	push   eax
c0012f30:	6a 01                	push   0x1
c0012f32:	53                   	push   ebx
c0012f33:	e8 50 ff ff ff       	call   c0012e88 <VgaText::decrementCursor(bool)>
c0012f38:	5a                   	pop    edx
c0012f39:	59                   	pop    ecx
c0012f3a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012f3d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012f40:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012f43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012f46:	6a 20                	push   0x20
c0012f48:	53                   	push   ebx
c0012f49:	e8 4a fd ff ff       	call   c0012c98 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012f4e:	83 c4 28             	add    esp,0x28
c0012f51:	5b                   	pop    ebx
c0012f52:	c3                   	ret    
c0012f53:	83 ec 08             	sub    esp,0x8
c0012f56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012f59:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012f5c:	51                   	push   ecx
c0012f5d:	52                   	push   edx
c0012f5e:	50                   	push   eax
c0012f5f:	53                   	push   ebx
c0012f60:	e8 33 fd ff ff       	call   c0012c98 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012f65:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0012f69:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012f71:	83 c4 28             	add    esp,0x28
c0012f74:	5b                   	pop    ebx
c0012f75:	e9 ba fe ff ff       	jmp    c0012e34 <VgaText::incrementCursor(bool)>

c0012f7a <VgaText::putchar(char)>:
c0012f7a:	57                   	push   edi
c0012f7b:	56                   	push   esi
c0012f7c:	53                   	push   ebx
c0012f7d:	83 ec 10             	sub    esp,0x10
c0012f80:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012f84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f88:	89 f8                	mov    eax,edi
c0012f8a:	0f be c0             	movsx  eax,al
c0012f8d:	83 f8 5b             	cmp    eax,0x5b
c0012f90:	75 18                	jne    c0012faa <VgaText::putchar(char)+0x30>
c0012f92:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0012f96:	74 20                	je     c0012fb8 <VgaText::putchar(char)+0x3e>
c0012f98:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0012f9e:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0012fa5:	e9 c1 00 00 00       	jmp    c001306b <VgaText::putchar(char)+0xf1>
c0012faa:	83 f8 1b             	cmp    eax,0x1b
c0012fad:	75 09                	jne    c0012fb8 <VgaText::putchar(char)+0x3e>
c0012faf:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0012fb3:	e9 b3 00 00 00       	jmp    c001306b <VgaText::putchar(char)+0xf1>
c0012fb8:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0012fbb:	84 c9                	test   cl,cl
c0012fbd:	0f 84 98 00 00 00    	je     c001305b <VgaText::putchar(char)+0xe1>
c0012fc3:	8d 77 c0             	lea    esi,[edi-0x40]
c0012fc6:	89 f2                	mov    edx,esi
c0012fc8:	80 fa 3e             	cmp    dl,0x3e
c0012fcb:	77 78                	ja     c0013045 <VgaText::putchar(char)+0xcb>
c0012fcd:	83 f8 6d             	cmp    eax,0x6d
c0012fd0:	75 47                	jne    c0013019 <VgaText::putchar(char)+0x9f>
c0012fd2:	31 f6                	xor    esi,esi
c0012fd4:	31 d2                	xor    edx,edx
c0012fd6:	31 c0                	xor    eax,eax
c0012fd8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0012fdb:	7e 2d                	jle    c001300a <VgaText::putchar(char)+0x90>
c0012fdd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012fe2:	83 fa 3b             	cmp    edx,0x3b
c0012fe5:	75 17                	jne    c0012ffe <VgaText::putchar(char)+0x84>
c0012fe7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0012feb:	50                   	push   eax
c0012fec:	53                   	push   ebx
c0012fed:	e8 24 fb ff ff       	call   c0012b16 <VgaText::doANSI_SGR(int)>
c0012ff2:	59                   	pop    ecx
c0012ff3:	31 d2                	xor    edx,edx
c0012ff5:	5f                   	pop    edi
c0012ff6:	31 c0                	xor    eax,eax
c0012ff8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012ffc:	eb 09                	jmp    c0013007 <VgaText::putchar(char)+0x8d>
c0012ffe:	6b c0 0a             	imul   eax,eax,0xa
c0013001:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0013005:	88 ca                	mov    dl,cl
c0013007:	46                   	inc    esi
c0013008:	eb ce                	jmp    c0012fd8 <VgaText::putchar(char)+0x5e>
c001300a:	84 d2                	test   dl,dl
c001300c:	74 2f                	je     c001303d <VgaText::putchar(char)+0xc3>
c001300e:	50                   	push   eax
c001300f:	53                   	push   ebx
c0013010:	e8 01 fb ff ff       	call   c0012b16 <VgaText::doANSI_SGR(int)>
c0013015:	58                   	pop    eax
c0013016:	5a                   	pop    edx
c0013017:	eb 24                	jmp    c001303d <VgaText::putchar(char)+0xc3>
c0013019:	83 f8 4a             	cmp    eax,0x4a
c001301c:	75 1f                	jne    c001303d <VgaText::putchar(char)+0xc3>
c001301e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0013022:	75 19                	jne    c001303d <VgaText::putchar(char)+0xc3>
c0013024:	83 ec 0c             	sub    esp,0xc
c0013027:	53                   	push   ebx
c0013028:	e8 89 fd ff ff       	call   c0012db6 <VgaText::clearScreen()>
c001302d:	83 c4 0c             	add    esp,0xc
c0013030:	6a 00                	push   0x0
c0013032:	6a 00                	push   0x0
c0013034:	53                   	push   ebx
c0013035:	e8 1a fd ff ff       	call   c0012d54 <VgaText::setCursor(int, int)>
c001303a:	83 c4 10             	add    esp,0x10
c001303d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0013043:	eb 26                	jmp    c001306b <VgaText::putchar(char)+0xf1>
c0013045:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0013048:	83 f8 0e             	cmp    eax,0xe
c001304b:	7f 1e                	jg     c001306b <VgaText::putchar(char)+0xf1>
c001304d:	8d 48 01             	lea    ecx,[eax+0x1]
c0013050:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0013053:	89 f9                	mov    ecx,edi
c0013055:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0013059:	eb 10                	jmp    c001306b <VgaText::putchar(char)+0xf1>
c001305b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001305e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0013061:	50                   	push   eax
c0013062:	53                   	push   ebx
c0013063:	e8 42 fe ff ff       	call   c0012eaa <VgaText::putchar(char, VgaColour, VgaColour)>
c0013068:	83 c4 10             	add    esp,0x10
c001306b:	83 c4 10             	add    esp,0x10
c001306e:	5b                   	pop    ebx
c001306f:	5e                   	pop    esi
c0013070:	5f                   	pop    edi
c0013071:	c3                   	ret    

c0013072 <VgaText::putx(unsigned int)>:
c0013072:	57                   	push   edi
c0013073:	b9 11 00 00 00       	mov    ecx,0x11
c0013078:	56                   	push   esi
c0013079:	be ef a1 02 c0       	mov    esi,0xc002a1ef
c001307e:	53                   	push   ebx
c001307f:	83 ec 20             	sub    esp,0x20
c0013082:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013086:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001308a:	fc                   	cld    
c001308b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001308d:	be 08 00 00 00       	mov    esi,0x8
c0013092:	50                   	push   eax
c0013093:	50                   	push   eax
c0013094:	89 d8                	mov    eax,ebx
c0013096:	c1 e3 04             	shl    ebx,0x4
c0013099:	c1 e8 1c             	shr    eax,0x1c
c001309c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00130a1:	50                   	push   eax
c00130a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00130a6:	e8 cf fe ff ff       	call   c0012f7a <VgaText::putchar(char)>
c00130ab:	83 c4 10             	add    esp,0x10
c00130ae:	4e                   	dec    esi
c00130af:	75 e1                	jne    c0013092 <VgaText::putx(unsigned int)+0x20>
c00130b1:	83 c4 20             	add    esp,0x20
c00130b4:	5b                   	pop    ebx
c00130b5:	5e                   	pop    esi
c00130b6:	5f                   	pop    edi
c00130b7:	c3                   	ret    

c00130b8 <VgaText::puts(char const*)>:
c00130b8:	53                   	push   ebx
c00130b9:	83 ec 08             	sub    esp,0x8
c00130bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130c0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00130c3:	85 c0                	test   eax,eax
c00130c5:	74 12                	je     c00130d9 <VgaText::puts(char const*)+0x21>
c00130c7:	43                   	inc    ebx
c00130c8:	51                   	push   ecx
c00130c9:	51                   	push   ecx
c00130ca:	50                   	push   eax
c00130cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130cf:	e8 a6 fe ff ff       	call   c0012f7a <VgaText::putchar(char)>
c00130d4:	83 c4 10             	add    esp,0x10
c00130d7:	eb e7                	jmp    c00130c0 <VgaText::puts(char const*)+0x8>
c00130d9:	83 c4 08             	add    esp,0x8
c00130dc:	5b                   	pop    ebx
c00130dd:	c3                   	ret    

c00130de <VgaText::write(unsigned long long, void*, int*)>:
c00130de:	55                   	push   ebp
c00130df:	57                   	push   edi
c00130e0:	56                   	push   esi
c00130e1:	53                   	push   ebx
c00130e2:	83 ec 0c             	sub    esp,0xc
c00130e5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00130e9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00130ed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00130f1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00130f8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00130fb:	39 eb                	cmp    ebx,ebp
c00130fd:	74 13                	je     c0013112 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00130ff:	43                   	inc    ebx
c0013100:	50                   	push   eax
c0013101:	50                   	push   eax
c0013102:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0013106:	50                   	push   eax
c0013107:	56                   	push   esi
c0013108:	e8 6d fe ff ff       	call   c0012f7a <VgaText::putchar(char)>
c001310d:	83 c4 10             	add    esp,0x10
c0013110:	eb e9                	jmp    c00130fb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0013112:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0013119:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001311d:	89 38                	mov    DWORD PTR [eax],edi
c001311f:	83 c4 0c             	add    esp,0xc
c0013122:	31 c0                	xor    eax,eax
c0013124:	5b                   	pop    ebx
c0013125:	5e                   	pop    esi
c0013126:	5f                   	pop    edi
c0013127:	5d                   	pop    ebp
c0013128:	c3                   	ret    
c0013129:	90                   	nop

c001312a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001312a:	55                   	push   ebp
c001312b:	57                   	push   edi
c001312c:	56                   	push   esi
c001312d:	53                   	push   ebx
c001312e:	83 ec 1c             	sub    esp,0x1c
c0013131:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013135:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013139:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001313d:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0013140:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013144:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013148:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001314c:	85 db                	test   ebx,ebx
c001314e:	75 14                	jne    c0013164 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c0013150:	c7 44 24 30 90 bb 02 c0 	mov    DWORD PTR [esp+0x30],0xc002bb90
c0013158:	83 c4 1c             	add    esp,0x1c
c001315b:	5b                   	pop    ebx
c001315c:	5e                   	pop    esi
c001315d:	5f                   	pop    edi
c001315e:	5d                   	pop    ebp
c001315f:	e9 e8 d5 ff ff       	jmp    c001074c <KePanic(char const*)>
c0013164:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c001316b:	50                   	push   eax
c001316c:	50                   	push   eax
c001316d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0013172:	50                   	push   eax
c0013173:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0013178:	50                   	push   eax
c0013179:	e8 66 fa ff ff       	call   c0012be4 <VgaText::combineColours(unsigned char, unsigned char)>
c001317e:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0013182:	83 c4 10             	add    esp,0x10
c0013185:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0013188:	0f b6 e8             	movzx  ebp,al
c001318b:	0f b7 c9             	movzx  ecx,cx
c001318e:	01 c9                	add    ecx,ecx
c0013190:	01 cb                	add    ebx,ecx
c0013192:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0013195:	85 c0                	test   eax,eax
c0013197:	0f 84 ef 00 00 00    	je     c001328c <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c001319d:	83 f8 0d             	cmp    eax,0xd
c00131a0:	75 0c                	jne    c00131ae <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00131a2:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00131a9:	e9 d8 00 00 00       	jmp    c0013286 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00131ae:	83 f8 0a             	cmp    eax,0xa
c00131b1:	75 44                	jne    c00131f7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c00131b3:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00131b6:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00131bd:	8d 48 01             	lea    ecx,[eax+0x1]
c00131c0:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c00131c3:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00131c6:	75 0f                	jne    c00131d7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c00131c8:	83 ec 0c             	sub    esp,0xc
c00131cb:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c00131ce:	57                   	push   edi
c00131cf:	e8 22 fa ff ff       	call   c0012bf6 <VgaText::scrollScreen()>
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	83 ec 0c             	sub    esp,0xc
c00131da:	57                   	push   edi
c00131db:	e8 20 f9 ff ff       	call   c0012b00 <VgaText::updateCursor()>
c00131e0:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00131e4:	83 c4 10             	add    esp,0x10
c00131e7:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00131ea:	0f b7 db             	movzx  ebx,bx
c00131ed:	01 db                	add    ebx,ebx
c00131ef:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00131f2:	e9 8f 00 00 00       	jmp    c0013286 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00131f7:	83 f8 08             	cmp    eax,0x8
c00131fa:	75 34                	jne    c0013230 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c00131fc:	51                   	push   ecx
c00131fd:	51                   	push   ecx
c00131fe:	6a 01                	push   0x1
c0013200:	57                   	push   edi
c0013201:	e8 82 fc ff ff       	call   c0012e88 <VgaText::decrementCursor(bool)>
c0013206:	5b                   	pop    ebx
c0013207:	58                   	pop    eax
c0013208:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001320b:	ff 77 14             	push   DWORD PTR [edi+0x14]
c001320e:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0013211:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0013214:	6a 20                	push   0x20
c0013216:	57                   	push   edi
c0013217:	e8 7c fa ff ff       	call   c0012c98 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001321c:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0013220:	83 c4 20             	add    esp,0x20
c0013223:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0013226:	0f b7 db             	movzx  ebx,bx
c0013229:	01 db                	add    ebx,ebx
c001322b:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001322e:	eb 56                	jmp    c0013286 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0013230:	52                   	push   edx
c0013231:	52                   	push   edx
c0013232:	55                   	push   ebp
c0013233:	50                   	push   eax
c0013234:	e8 4f fa ff ff       	call   c0012c88 <VgaText::combineCharAndColour(char, unsigned char)>
c0013239:	83 c4 10             	add    esp,0x10
c001323c:	66 89 03             	mov    WORD PTR [ebx],ax
c001323f:	39 3d f4 61 03 c0    	cmp    DWORD PTR ds:0xc00361f4,edi
c0013245:	75 1d                	jne    c0013264 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0013247:	83 ec 0c             	sub    esp,0xc
c001324a:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001324d:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0013250:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013254:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013258:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001325b:	50                   	push   eax
c001325c:	e8 e3 93 00 00       	call   c001c644 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0013261:	83 c4 20             	add    esp,0x20
c0013264:	83 c3 02             	add    ebx,0x2
c0013267:	50                   	push   eax
c0013268:	50                   	push   eax
c0013269:	6a 00                	push   0x0
c001326b:	57                   	push   edi
c001326c:	e8 c3 fb ff ff       	call   c0012e34 <VgaText::incrementCursor(bool)>
c0013271:	83 c4 10             	add    esp,0x10
c0013274:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0013278:	75 0c                	jne    c0013286 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001327a:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001327e:	0f b7 db             	movzx  ebx,bx
c0013281:	01 db                	add    ebx,ebx
c0013283:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0013286:	46                   	inc    esi
c0013287:	e9 06 ff ff ff       	jmp    c0013192 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c001328c:	83 ec 0c             	sub    esp,0xc
c001328f:	57                   	push   edi
c0013290:	e8 6b f8 ff ff       	call   c0012b00 <VgaText::updateCursor()>
c0013295:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c001329c:	83 c4 2c             	add    esp,0x2c
c001329f:	5b                   	pop    ebx
c00132a0:	5e                   	pop    esi
c00132a1:	5f                   	pop    edi
c00132a2:	5d                   	pop    ebp
c00132a3:	c3                   	ret    

c00132a4 <VgaText::VgaText(char const*)>:
c00132a4:	56                   	push   esi
c00132a5:	53                   	push   ebx
c00132a6:	83 ec 04             	sub    esp,0x4
c00132a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ad:	83 ec 08             	sub    esp,0x8
c00132b0:	6a 00                	push   0x0
c00132b2:	50                   	push   eax
c00132b3:	e8 d8 05 00 00       	call   c0013890 <UnixFile::UnixFile(int)>
c00132b8:	83 c4 10             	add    esp,0x10
c00132bb:	ba c8 bb 02 c0       	mov    edx,0xc002bbc8
c00132c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c4:	89 10                	mov    DWORD PTR [eax],edx
c00132c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ca:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00132d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132d5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00132dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00132e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00132ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00132f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0013302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013306:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001330d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013311:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0013318:	83 ec 0c             	sub    esp,0xc
c001331b:	68 a0 bb 02 c0       	push   0xc002bba0
c0013320:	e8 57 3c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013325:	83 c4 10             	add    esp,0x10
c0013328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332c:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0013333:	83 ec 0c             	sub    esp,0xc
c0013336:	6a 01                	push   0x1
c0013338:	e8 a6 09 00 00       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c001333d:	83 c4 10             	add    esp,0x10
c0013340:	89 c2                	mov    edx,eax
c0013342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013346:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013349:	8b 1d 90 62 03 c0    	mov    ebx,DWORD PTR ds:0xc0036290
c001334f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013353:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013356:	89 c6                	mov    esi,eax
c0013358:	e8 e3 d5 ff ff       	call   c0010940 <Phys::allocatePage()>
c001335d:	68 05 0c 00 00       	push   0xc05
c0013362:	56                   	push   esi
c0013363:	50                   	push   eax
c0013364:	53                   	push   ebx
c0013365:	e8 5c 10 00 00       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001336a:	83 c4 10             	add    esp,0x10
c001336d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013371:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013374:	83 ec 04             	sub    esp,0x4
c0013377:	68 a0 0f 00 00       	push   0xfa0
c001337c:	6a 00                	push   0x0
c001337e:	50                   	push   eax
c001337f:	e8 6c d1 fe ff       	call   c00004f0 <memset>
c0013384:	83 c4 10             	add    esp,0x10
c0013387:	83 ec 04             	sub    esp,0x4
c001338a:	6a 00                	push   0x0
c001338c:	6a 07                	push   0x7
c001338e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013392:	e8 13 f8 ff ff       	call   c0012baa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0013397:	83 c4 10             	add    esp,0x10
c001339a:	83 ec 04             	sub    esp,0x4
c001339d:	6a 00                	push   0x0
c001339f:	6a 00                	push   0x0
c00133a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133a5:	e8 aa f9 ff ff       	call   c0012d54 <VgaText::setCursor(int, int)>
c00133aa:	83 c4 10             	add    esp,0x10
c00133ad:	83 ec 0c             	sub    esp,0xc
c00133b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133b4:	e8 fd f9 ff ff       	call   c0012db6 <VgaText::clearScreen()>
c00133b9:	83 c4 10             	add    esp,0x10
c00133bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c0:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00133c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c8:	05 82 00 00 00       	add    eax,0x82
c00133cd:	83 ec 04             	sub    esp,0x4
c00133d0:	68 80 00 00 00       	push   0x80
c00133d5:	6a 00                	push   0x0
c00133d7:	50                   	push   eax
c00133d8:	e8 13 d1 fe ff       	call   c00004f0 <memset>
c00133dd:	83 c4 10             	add    esp,0x10
c00133e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e4:	05 02 01 00 00       	add    eax,0x102
c00133e9:	83 ec 04             	sub    esp,0x4
c00133ec:	68 80 00 00 00       	push   0x80
c00133f1:	6a 00                	push   0x0
c00133f3:	50                   	push   eax
c00133f4:	e8 f7 d0 fe ff       	call   c00004f0 <memset>
c00133f9:	83 c4 10             	add    esp,0x10
c00133fc:	90                   	nop
c00133fd:	83 c4 04             	add    esp,0x4
c0013400:	5b                   	pop    ebx
c0013401:	5e                   	pop    esi
c0013402:	c3                   	ret    
c0013403:	90                   	nop

c0013404 <VgaText::receiveKey(unsigned char)>:
c0013404:	55                   	push   ebp
c0013405:	57                   	push   edi
c0013406:	56                   	push   esi
c0013407:	53                   	push   ebx
c0013408:	83 ec 2c             	sub    esp,0x2c
c001340b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001340f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013413:	89 ef                	mov    edi,ebp
c0013415:	81 e7 ff 00 00 00    	and    edi,0xff
c001341b:	0f 84 66 01 00 00    	je     c0013587 <VgaText::receiveKey(unsigned char)+0x183>
c0013421:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0013427:	83 ff 08             	cmp    edi,0x8
c001342a:	75 73                	jne    c001349f <VgaText::receiveKey(unsigned char)+0x9b>
c001342c:	83 ec 0c             	sub    esp,0xc
c001342f:	56                   	push   esi
c0013430:	e8 3b d1 fe ff       	call   c0000570 <strlen>
c0013435:	83 c4 10             	add    esp,0x10
c0013438:	85 c0                	test   eax,eax
c001343a:	0f 84 02 01 00 00    	je     c0013542 <VgaText::receiveKey(unsigned char)+0x13e>
c0013440:	50                   	push   eax
c0013441:	50                   	push   eax
c0013442:	6a 08                	push   0x8
c0013444:	53                   	push   ebx
c0013445:	e8 30 fb ff ff       	call   c0012f7a <VgaText::putchar(char)>
c001344a:	89 34 24             	mov    DWORD PTR [esp],esi
c001344d:	e8 1e d1 fe ff       	call   c0000570 <strlen>
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001345d:	83 fa 0d             	cmp    edx,0xd
c0013460:	89 d0                	mov    eax,edx
c0013462:	0f 95 c1             	setne  cl
c0013465:	83 fa 1f             	cmp    edx,0x1f
c0013468:	0f 9e c2             	setle  dl
c001346b:	0f b6 d2             	movzx  edx,dl
c001346e:	85 ca                	test   edx,ecx
c0013470:	74 17                	je     c0013489 <VgaText::receiveKey(unsigned char)+0x85>
c0013472:	83 e8 08             	sub    eax,0x8
c0013475:	3c 02                	cmp    al,0x2
c0013477:	76 10                	jbe    c0013489 <VgaText::receiveKey(unsigned char)+0x85>
c0013479:	55                   	push   ebp
c001347a:	55                   	push   ebp
c001347b:	68 b3 bb 02 c0       	push   0xc002bbb3
c0013480:	53                   	push   ebx
c0013481:	e8 32 fc ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c0013486:	83 c4 10             	add    esp,0x10
c0013489:	83 ec 0c             	sub    esp,0xc
c001348c:	56                   	push   esi
c001348d:	e8 de d0 fe ff       	call   c0000570 <strlen>
c0013492:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001349a:	e9 a0 00 00 00       	jmp    c001353f <VgaText::receiveKey(unsigned char)+0x13b>
c001349f:	83 ec 0c             	sub    esp,0xc
c00134a2:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00134a8:	50                   	push   eax
c00134a9:	e8 c2 d0 fe ff       	call   c0000570 <strlen>
c00134ae:	89 34 24             	mov    DWORD PTR [esp],esi
c00134b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134b5:	e8 b6 d0 fe ff       	call   c0000570 <strlen>
c00134ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00134be:	83 c4 10             	add    esp,0x10
c00134c1:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c00134c5:	3d 80 00 00 00       	cmp    eax,0x80
c00134ca:	0f 87 b7 00 00 00    	ja     c0013587 <VgaText::receiveKey(unsigned char)+0x183>
c00134d0:	8d 45 ff             	lea    eax,[ebp-0x1]
c00134d3:	8d 55 f7             	lea    edx,[ebp-0x9]
c00134d6:	3c 1e                	cmp    al,0x1e
c00134d8:	0f 96 c0             	setbe  al
c00134db:	80 fa 01             	cmp    dl,0x1
c00134de:	0f 97 c2             	seta   dl
c00134e1:	0f b6 d2             	movzx  edx,dl
c00134e4:	85 c2                	test   edx,eax
c00134e6:	74 2e                	je     c0013516 <VgaText::receiveKey(unsigned char)+0x112>
c00134e8:	83 ff 0d             	cmp    edi,0xd
c00134eb:	74 29                	je     c0013516 <VgaText::receiveKey(unsigned char)+0x112>
c00134ed:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00134f0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00134f3:	68 b9 bb 02 c0       	push   0xc002bbb9
c00134f8:	53                   	push   ebx
c00134f9:	e8 2c fc ff ff       	call   c001312a <VgaText::puts(char const*, VgaColour, VgaColour)>
c00134fe:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0013501:	8d 45 40             	lea    eax,[ebp+0x40]
c0013504:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0013507:	0f b6 c0             	movzx  eax,al
c001350a:	50                   	push   eax
c001350b:	53                   	push   ebx
c001350c:	e8 99 f9 ff ff       	call   c0012eaa <VgaText::putchar(char, VgaColour, VgaColour)>
c0013511:	83 c4 20             	add    esp,0x20
c0013514:	eb 11                	jmp    c0013527 <VgaText::receiveKey(unsigned char)+0x123>
c0013516:	89 e8                	mov    eax,ebp
c0013518:	51                   	push   ecx
c0013519:	0f be c0             	movsx  eax,al
c001351c:	51                   	push   ecx
c001351d:	50                   	push   eax
c001351e:	53                   	push   ebx
c001351f:	e8 56 fa ff ff       	call   c0012f7a <VgaText::putchar(char)>
c0013524:	83 c4 10             	add    esp,0x10
c0013527:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001352c:	89 e8                	mov    eax,ebp
c001352e:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0013532:	52                   	push   edx
c0013533:	52                   	push   edx
c0013534:	8d 44 24 26          	lea    eax,[esp+0x26]
c0013538:	50                   	push   eax
c0013539:	56                   	push   esi
c001353a:	e8 01 d3 fe ff       	call   c0000840 <strcat>
c001353f:	83 c4 10             	add    esp,0x10
c0013542:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0013548:	b0 01                	mov    al,0x1
c001354a:	83 ff 1c             	cmp    edi,0x1c
c001354d:	77 0e                	ja     c001355d <VgaText::receiveKey(unsigned char)+0x159>
c001354f:	b8 08 04 00 10       	mov    eax,0x10000408
c0013554:	89 f9                	mov    ecx,edi
c0013556:	d3 e8                	shr    eax,cl
c0013558:	f7 d0                	not    eax
c001355a:	83 e0 01             	and    eax,0x1
c001355d:	84 c0                	test   al,al
c001355f:	74 04                	je     c0013565 <VgaText::receiveKey(unsigned char)+0x161>
c0013561:	84 d2                	test   dl,dl
c0013563:	74 22                	je     c0013587 <VgaText::receiveKey(unsigned char)+0x183>
c0013565:	81 c3 02 01 00 00    	add    ebx,0x102
c001356b:	50                   	push   eax
c001356c:	50                   	push   eax
c001356d:	56                   	push   esi
c001356e:	53                   	push   ebx
c001356f:	e8 cc d2 fe ff       	call   c0000840 <strcat>
c0013574:	83 c4 0c             	add    esp,0xc
c0013577:	68 80 00 00 00       	push   0x80
c001357c:	6a 00                	push   0x0
c001357e:	56                   	push   esi
c001357f:	e8 6c cf fe ff       	call   c00004f0 <memset>
c0013584:	83 c4 10             	add    esp,0x10
c0013587:	83 c4 2c             	add    esp,0x2c
c001358a:	5b                   	pop    ebx
c001358b:	5e                   	pop    esi
c001358c:	5f                   	pop    edi
c001358d:	5d                   	pop    ebp
c001358e:	c3                   	ret    
c001358f:	90                   	nop

c0013590 <VgaText::doUpdate()>:
c0013590:	c3                   	ret    
c0013591:	66 90                	xchg   ax,ax
c0013593:	90                   	nop

c0013594 <TSS::TSS()>:
c0013594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013598:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001359f:	90                   	nop
c00135a0:	c3                   	ret    
c00135a1:	90                   	nop
c00135a2:	66 90                	xchg   ax,ax

c00135a4 <TSS::setESP(unsigned long)>:
c00135a4:	55                   	push   ebp
c00135a5:	89 e5                	mov    ebp,esp
c00135a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00135aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135ad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00135b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00135b3:	90                   	nop
c00135b4:	5d                   	pop    ebp
c00135b5:	c3                   	ret    
c00135b6:	66 90                	xchg   ax,ax

c00135b8 <TSS::flush()>:
c00135b8:	55                   	push   ebp
c00135b9:	89 e5                	mov    ebp,esp
c00135bb:	83 ec 10             	sub    esp,0x10
c00135be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00135c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00135c3:	83 c8 03             	or     eax,0x3
c00135c6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00135ca:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00135ce:	66 89 d0             	mov    ax,dx
c00135d1:	0f 00 d8             	ltr    ax
c00135d4:	90                   	nop
c00135d5:	c9                   	leave  
c00135d6:	c3                   	ret    
c00135d7:	90                   	nop

c00135d8 <TSS::setup(unsigned long, unsigned long)>:
c00135d8:	55                   	push   ebp
c00135d9:	89 e5                	mov    ebp,esp
c00135db:	83 ec 18             	sub    esp,0x18
c00135de:	83 ec 0c             	sub    esp,0xc
c00135e1:	6a 68                	push   0x68
c00135e3:	e8 0f cd ff ff       	call   c00102f7 <malloc>
c00135e8:	83 c4 10             	add    esp,0x10
c00135eb:	89 c2                	mov    edx,eax
c00135ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00135f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00135f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00135f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135f9:	83 ec 08             	sub    esp,0x8
c00135fc:	50                   	push   eax
c00135fd:	68 dc bb 02 c0       	push   0xc002bbdc
c0013602:	e8 75 39 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013607:	83 c4 10             	add    esp,0x10
c001360a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001360d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013610:	83 ec 04             	sub    esp,0x4
c0013613:	6a 68                	push   0x68
c0013615:	6a 00                	push   0x0
c0013617:	50                   	push   eax
c0013618:	e8 d3 ce fe ff       	call   c00004f0 <memset>
c001361d:	83 c4 10             	add    esp,0x10
c0013620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013623:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013626:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001362c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001362f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013632:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0013638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001363b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001363e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0013641:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013647:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001364a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0013650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013653:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013656:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001365c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001365f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013662:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0013668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001366b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001366e:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0013674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013677:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001367a:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0013680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013683:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013686:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001368c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001368f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013692:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0013695:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0013698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001369b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001369e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00136a1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00136a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00136a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136aa:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00136b1:	83 ec 0c             	sub    esp,0xc
c00136b4:	68 f3 bb 02 c0       	push   0xc002bbf3
c00136b9:	e8 be 38 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00136be:	83 c4 10             	add    esp,0x10
c00136c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00136c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136c7:	0f 20 da             	mov    edx,cr3
c00136ca:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00136cd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00136d0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00136d3:	83 ec 0c             	sub    esp,0xc
c00136d6:	68 f6 bb 02 c0       	push   0xc002bbf6
c00136db:	e8 9c 38 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00136e0:	83 c4 10             	add    esp,0x10
c00136e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00136e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136e9:	83 ec 08             	sub    esp,0x8
c00136ec:	50                   	push   eax
c00136ed:	8d 45 ec             	lea    eax,[ebp-0x14]
c00136f0:	50                   	push   eax
c00136f1:	e8 66 bc ff ff       	call   c000f35c <GDTEntry::setBase(unsigned int)>
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	83 ec 08             	sub    esp,0x8
c00136fc:	6a 68                	push   0x68
c00136fe:	8d 45 ec             	lea    eax,[ebp-0x14]
c0013701:	50                   	push   eax
c0013702:	e8 71 bc ff ff       	call   c000f378 <GDTEntry::setLimit(unsigned int)>
c0013707:	83 c4 10             	add    esp,0x10
c001370a:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001370e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0013711:	83 e0 0f             	and    eax,0xf
c0013714:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0013717:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001371a:	83 c8 40             	or     eax,0x40
c001371d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0013720:	83 ec 0c             	sub    esp,0xc
c0013723:	68 f9 bb 02 c0       	push   0xc002bbf9
c0013728:	e8 4f 38 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001372d:	83 c4 10             	add    esp,0x10
c0013730:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c0013735:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001373b:	83 ec 08             	sub    esp,0x8
c001373e:	50                   	push   eax
c001373f:	68 fc bb 02 c0       	push   0xc002bbfc
c0013744:	e8 33 38 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013749:	83 c4 10             	add    esp,0x10
c001374c:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c0013751:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013757:	05 64 01 00 00       	add    eax,0x164
c001375c:	83 ec 04             	sub    esp,0x4
c001375f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0013762:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0013765:	50                   	push   eax
c0013766:	e8 41 bc ff ff       	call   c000f3ac <GDT::addEntry(GDTEntry)>
c001376b:	83 c4 10             	add    esp,0x10
c001376e:	89 c2                	mov    edx,eax
c0013770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013773:	89 10                	mov    DWORD PTR [eax],edx
c0013775:	83 ec 0c             	sub    esp,0xc
c0013778:	68 11 bc 02 c0       	push   0xc002bc11
c001377d:	e8 fa 37 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013782:	83 c4 10             	add    esp,0x10
c0013785:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001378a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013790:	05 64 01 00 00       	add    eax,0x164
c0013795:	83 ec 0c             	sub    esp,0xc
c0013798:	50                   	push   eax
c0013799:	e8 38 bc ff ff       	call   c000f3d6 <GDT::flush()>
c001379e:	83 c4 10             	add    esp,0x10
c00137a1:	83 ec 0c             	sub    esp,0xc
c00137a4:	68 14 bc 02 c0       	push   0xc002bc14
c00137a9:	e8 ce 37 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00137ae:	83 c4 10             	add    esp,0x10
c00137b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00137b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00137b6:	c9                   	leave  
c00137b7:	c3                   	ret    

c00137b8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00137b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00137c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137c3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00137c8:	75 08                	jne    c00137d2 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00137ca:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00137d0:	eb 38                	jmp    c001380a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00137d2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00137d7:	75 17                	jne    c00137f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00137d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00137e1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00137e7:	8b 10                	mov    edx,DWORD PTR [eax]
c00137e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00137ed:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00137f0:	89 c1                	mov    ecx,eax
c00137f2:	83 e1 fd             	and    ecx,0xfffffffd
c00137f5:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00137fb:	74 cd                	je     c00137ca <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00137fd:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013802:	83 e0 ef             	and    eax,0xffffffef
c0013805:	83 f8 08             	cmp    eax,0x8
c0013808:	76 c0                	jbe    c00137ca <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001380a:	31 c0                	xor    eax,eax
c001380c:	c3                   	ret    
c001380d:	90                   	nop

c001380e <ReservedFilename::isAtty()>:
c001380e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013812:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013815:	31 c0                	xor    eax,eax
c0013817:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001381d:	74 09                	je     c0013828 <ReservedFilename::isAtty()+0x1a>
c001381f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0013825:	0f 94 c0             	sete   al
c0013828:	c3                   	ret    
c0013829:	90                   	nop

c001382a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001382a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001382e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013832:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013835:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013839:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001383e:	75 08                	jne    c0013848 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0013840:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0013846:	eb 3d                	jmp    c0013885 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013848:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001384d:	75 17                	jne    c0013866 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001384f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013854:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013857:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001385d:	8b 10                	mov    edx,DWORD PTR [eax]
c001385f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013863:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0013866:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001386b:	75 04                	jne    c0013871 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001386d:	89 0a                	mov    DWORD PTR [edx],ecx
c001386f:	eb 14                	jmp    c0013885 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013871:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0013876:	74 c8                	je     c0013840 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013878:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001387d:	83 e0 ef             	and    eax,0xffffffef
c0013880:	83 f8 08             	cmp    eax,0x8
c0013883:	76 bb                	jbe    c0013840 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013885:	31 c0                	xor    eax,eax
c0013887:	c3                   	ret    

c0013888 <UnixFile::getFileDescriptor()>:
c0013888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001388c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001388f:	c3                   	ret    

c0013890 <UnixFile::UnixFile(int)>:
c0013890:	53                   	push   ebx
c0013891:	83 ec 28             	sub    esp,0x28
c0013894:	ba 40 bc 02 c0       	mov    edx,0xc002bc40
c0013899:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001389d:	89 10                	mov    DWORD PTR [eax],edx
c001389f:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00138a7:	0f 8f 90 01 00 00    	jg     c0013a3d <UnixFile::UnixFile(int)+0x1ad>
c00138ad:	a1 c0 fe 02 c0       	mov    eax,ds:0xc002fec0
c00138b2:	8d 50 01             	lea    edx,[eax+0x1]
c00138b5:	89 15 c0 fe 02 c0    	mov    DWORD PTR ds:0xc002fec0,edx
c00138bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00138bf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00138c2:	83 ec 08             	sub    esp,0x8
c00138c5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00138c9:	68 78 62 03 c0       	push   0xc0036278
c00138ce:	e8 bf 5a 01 00       	call   c0029392 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00138d3:	83 c4 10             	add    esp,0x10
c00138d6:	a0 74 62 03 c0       	mov    al,ds:0xc0036274
c00138db:	83 f0 01             	xor    eax,0x1
c00138de:	0f b6 c0             	movzx  eax,al
c00138e1:	85 c0                	test   eax,eax
c00138e3:	0f 84 55 01 00 00    	je     c0013a3e <UnixFile::UnixFile(int)+0x1ae>
c00138e9:	c6 05 74 62 03 c0 01 	mov    BYTE PTR ds:0xc0036274,0x1
c00138f0:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00138f8:	83 ec 0c             	sub    esp,0xc
c00138fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138ff:	e8 f3 c9 ff ff       	call   c00102f7 <malloc>
c0013904:	83 c4 10             	add    esp,0x10
c0013907:	89 c3                	mov    ebx,eax
c0013909:	83 ec 08             	sub    esp,0x8
c001390c:	68 03 ff ff 0f       	push   0xfffff03
c0013911:	53                   	push   ebx
c0013912:	e8 2d 01 00 00       	call   c0013a44 <ReservedFilename::ReservedFilename(int)>
c0013917:	83 c4 10             	add    esp,0x10
c001391a:	89 1d 6c 62 03 c0    	mov    DWORD PTR ds:0xc003626c,ebx
c0013920:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0013928:	83 ec 0c             	sub    esp,0xc
c001392b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001392f:	e8 c3 c9 ff ff       	call   c00102f7 <malloc>
c0013934:	83 c4 10             	add    esp,0x10
c0013937:	89 c3                	mov    ebx,eax
c0013939:	83 ec 08             	sub    esp,0x8
c001393c:	68 01 ff ff 0f       	push   0xfffff01
c0013941:	53                   	push   ebx
c0013942:	e8 fd 00 00 00       	call   c0013a44 <ReservedFilename::ReservedFilename(int)>
c0013947:	83 c4 10             	add    esp,0x10
c001394a:	89 1d 70 62 03 c0    	mov    DWORD PTR ds:0xc0036270,ebx
c0013950:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0013958:	83 ec 0c             	sub    esp,0xc
c001395b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001395f:	e8 93 c9 ff ff       	call   c00102f7 <malloc>
c0013964:	83 c4 10             	add    esp,0x10
c0013967:	89 c3                	mov    ebx,eax
c0013969:	83 ec 08             	sub    esp,0x8
c001396c:	68 00 ff ff 0f       	push   0xfffff00
c0013971:	53                   	push   ebx
c0013972:	e8 cd 00 00 00       	call   c0013a44 <ReservedFilename::ReservedFilename(int)>
c0013977:	83 c4 10             	add    esp,0x10
c001397a:	89 1d 64 62 03 c0    	mov    DWORD PTR ds:0xc0036264,ebx
c0013980:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0013988:	83 ec 0c             	sub    esp,0xc
c001398b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001398f:	e8 63 c9 ff ff       	call   c00102f7 <malloc>
c0013994:	83 c4 10             	add    esp,0x10
c0013997:	89 c3                	mov    ebx,eax
c0013999:	83 ec 08             	sub    esp,0x8
c001399c:	68 02 ff ff 0f       	push   0xfffff02
c00139a1:	53                   	push   ebx
c00139a2:	e8 9d 00 00 00       	call   c0013a44 <ReservedFilename::ReservedFilename(int)>
c00139a7:	83 c4 10             	add    esp,0x10
c00139aa:	89 1d 68 62 03 c0    	mov    DWORD PTR ds:0xc0036268,ebx
c00139b0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00139b8:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00139bd:	7f 7f                	jg     c0013a3e <UnixFile::UnixFile(int)+0x1ae>
c00139bf:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00139c7:	83 ec 0c             	sub    esp,0xc
c00139ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139ce:	e8 24 c9 ff ff       	call   c00102f7 <malloc>
c00139d3:	83 c4 10             	add    esp,0x10
c00139d6:	89 c3                	mov    ebx,eax
c00139d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00139dc:	05 10 ff ff 0f       	add    eax,0xfffff10
c00139e1:	83 ec 08             	sub    esp,0x8
c00139e4:	50                   	push   eax
c00139e5:	53                   	push   ebx
c00139e6:	e8 59 00 00 00       	call   c0013a44 <ReservedFilename::ReservedFilename(int)>
c00139eb:	83 c4 10             	add    esp,0x10
c00139ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00139f2:	89 1c 85 40 62 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9dc0],ebx
c00139f9:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0013a01:	83 ec 0c             	sub    esp,0xc
c0013a04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013a08:	e8 ea c8 ff ff       	call   c00102f7 <malloc>
c0013a0d:	83 c4 10             	add    esp,0x10
c0013a10:	89 c3                	mov    ebx,eax
c0013a12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a16:	05 20 ff ff 0f       	add    eax,0xfffff20
c0013a1b:	83 ec 08             	sub    esp,0x8
c0013a1e:	50                   	push   eax
c0013a1f:	53                   	push   ebx
c0013a20:	e8 1f 00 00 00       	call   c0013a44 <ReservedFilename::ReservedFilename(int)>
c0013a25:	83 c4 10             	add    esp,0x10
c0013a28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a2c:	89 1c 85 00 62 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9e00],ebx
c0013a33:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013a38:	e9 7b ff ff ff       	jmp    c00139b8 <UnixFile::UnixFile(int)+0x128>
c0013a3d:	90                   	nop
c0013a3e:	83 c4 28             	add    esp,0x28
c0013a41:	5b                   	pop    ebx
c0013a42:	c3                   	ret    
c0013a43:	90                   	nop

c0013a44 <ReservedFilename::ReservedFilename(int)>:
c0013a44:	83 ec 0c             	sub    esp,0xc
c0013a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4b:	83 ec 08             	sub    esp,0x8
c0013a4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a52:	50                   	push   eax
c0013a53:	e8 38 fe ff ff       	call   c0013890 <UnixFile::UnixFile(int)>
c0013a58:	83 c4 10             	add    esp,0x10
c0013a5b:	ba 5c bc 02 c0       	mov    edx,0xc002bc5c
c0013a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a64:	89 10                	mov    DWORD PTR [eax],edx
c0013a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013a6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013a71:	90                   	nop
c0013a72:	83 c4 0c             	add    esp,0xc
c0013a75:	c3                   	ret    

c0013a76 <UnixFile::~UnixFile()>:
c0013a76:	83 ec 1c             	sub    esp,0x1c
c0013a79:	ba 40 bc 02 c0       	mov    edx,0xc002bc40
c0013a7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a82:	89 10                	mov    DWORD PTR [eax],edx
c0013a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a8b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0013a90:	7f 76                	jg     c0013b08 <UnixFile::~UnixFile()+0x92>
c0013a92:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013a9a:	83 ec 0c             	sub    esp,0xc
c0013a9d:	68 78 62 03 c0       	push   0xc0036278
c0013aa2:	e8 bf 59 01 00       	call   c0029466 <LinkedList<UnixFile>::getFirstElement()>
c0013aa7:	83 c4 10             	add    esp,0x10
c0013aaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013aae:	83 ec 0c             	sub    esp,0xc
c0013ab1:	68 78 62 03 c0       	push   0xc0036278
c0013ab6:	e8 b3 59 01 00       	call   c002946e <LinkedList<UnixFile>::removeFirst()>
c0013abb:	83 c4 10             	add    esp,0x10
c0013abe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ac2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0013ac6:	74 43                	je     c0013b0b <UnixFile::~UnixFile()+0x95>
c0013ac8:	83 ec 08             	sub    esp,0x8
c0013acb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013acf:	68 78 62 03 c0       	push   0xc0036278
c0013ad4:	e8 b9 58 01 00       	call   c0029392 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0013ad9:	83 c4 10             	add    esp,0x10
c0013adc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ae0:	8d 50 01             	lea    edx,[eax+0x1]
c0013ae3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ae7:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013aec:	0f 94 c0             	sete   al
c0013aef:	0f b6 c0             	movzx  eax,al
c0013af2:	85 c0                	test   eax,eax
c0013af4:	74 a4                	je     c0013a9a <UnixFile::~UnixFile()+0x24>
c0013af6:	83 ec 0c             	sub    esp,0xc
c0013af9:	68 18 bc 02 c0       	push   0xc002bc18
c0013afe:	e8 49 cc ff ff       	call   c001074c <KePanic(char const*)>
c0013b03:	83 c4 10             	add    esp,0x10
c0013b06:	eb 92                	jmp    c0013a9a <UnixFile::~UnixFile()+0x24>
c0013b08:	90                   	nop
c0013b09:	eb 01                	jmp    c0013b0c <UnixFile::~UnixFile()+0x96>
c0013b0b:	90                   	nop
c0013b0c:	90                   	nop
c0013b0d:	83 c4 1c             	add    esp,0x1c
c0013b10:	c3                   	ret    
c0013b11:	90                   	nop

c0013b12 <UnixFile::~UnixFile()>:
c0013b12:	83 ec 0c             	sub    esp,0xc
c0013b15:	83 ec 0c             	sub    esp,0xc
c0013b18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b1c:	e8 55 ff ff ff       	call   c0013a76 <UnixFile::~UnixFile()>
c0013b21:	83 c4 10             	add    esp,0x10
c0013b24:	83 ec 08             	sub    esp,0x8
c0013b27:	6a 0c                	push   0xc
c0013b29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b2d:	e8 d2 a2 ff ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0013b32:	83 c4 10             	add    esp,0x10
c0013b35:	83 c4 0c             	add    esp,0xc
c0013b38:	c3                   	ret    
c0013b39:	90                   	nop

c0013b3a <ReservedFilename::~ReservedFilename()>:
c0013b3a:	83 ec 0c             	sub    esp,0xc
c0013b3d:	ba 5c bc 02 c0       	mov    edx,0xc002bc5c
c0013b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b46:	89 10                	mov    DWORD PTR [eax],edx
c0013b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b4c:	83 ec 0c             	sub    esp,0xc
c0013b4f:	50                   	push   eax
c0013b50:	e8 21 ff ff ff       	call   c0013a76 <UnixFile::~UnixFile()>
c0013b55:	83 c4 10             	add    esp,0x10
c0013b58:	90                   	nop
c0013b59:	83 c4 0c             	add    esp,0xc
c0013b5c:	c3                   	ret    
c0013b5d:	90                   	nop

c0013b5e <ReservedFilename::~ReservedFilename()>:
c0013b5e:	83 ec 0c             	sub    esp,0xc
c0013b61:	83 ec 0c             	sub    esp,0xc
c0013b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b68:	e8 cd ff ff ff       	call   c0013b3a <ReservedFilename::~ReservedFilename()>
c0013b6d:	83 c4 10             	add    esp,0x10
c0013b70:	83 ec 08             	sub    esp,0x8
c0013b73:	6a 0c                	push   0xc
c0013b75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b79:	e8 86 a2 ff ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0013b7e:	83 c4 10             	add    esp,0x10
c0013b81:	83 c4 0c             	add    esp,0xc
c0013b84:	c3                   	ret    

c0013b85 <KeGetFileFromDescriptor(int)>:
c0013b85:	53                   	push   ebx
c0013b86:	83 ec 08             	sub    esp,0x8
c0013b89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b8d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0013b93:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0013b99:	7f 30                	jg     c0013bcb <KeGetFileFromDescriptor(int)+0x46>
c0013b9b:	83 ec 0c             	sub    esp,0xc
c0013b9e:	68 78 62 03 c0       	push   0xc0036278
c0013ba3:	e8 be 58 01 00       	call   c0029466 <LinkedList<UnixFile>::getFirstElement()>
c0013ba8:	83 c4 10             	add    esp,0x10
c0013bab:	8d 50 ff             	lea    edx,[eax-0x1]
c0013bae:	83 fa fd             	cmp    edx,0xfffffffd
c0013bb1:	76 04                	jbe    c0013bb7 <KeGetFileFromDescriptor(int)+0x32>
c0013bb3:	31 c0                	xor    eax,eax
c0013bb5:	eb 6e                	jmp    c0013c25 <KeGetFileFromDescriptor(int)+0xa0>
c0013bb7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0013bba:	74 69                	je     c0013c25 <KeGetFileFromDescriptor(int)+0xa0>
c0013bbc:	52                   	push   edx
c0013bbd:	52                   	push   edx
c0013bbe:	50                   	push   eax
c0013bbf:	68 78 62 03 c0       	push   0xc0036278
c0013bc4:	e8 47 59 01 00       	call   c0029510 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0013bc9:	eb dd                	jmp    c0013ba8 <KeGetFileFromDescriptor(int)+0x23>
c0013bcb:	a1 6c 62 03 c0       	mov    eax,ds:0xc003626c
c0013bd0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0013bd6:	74 4d                	je     c0013c25 <KeGetFileFromDescriptor(int)+0xa0>
c0013bd8:	a1 70 62 03 c0       	mov    eax,ds:0xc0036270
c0013bdd:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0013be3:	74 40                	je     c0013c25 <KeGetFileFromDescriptor(int)+0xa0>
c0013be5:	a1 68 62 03 c0       	mov    eax,ds:0xc0036268
c0013bea:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0013bf0:	74 33                	je     c0013c25 <KeGetFileFromDescriptor(int)+0xa0>
c0013bf2:	a1 64 62 03 c0       	mov    eax,ds:0xc0036264
c0013bf7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013bfd:	74 26                	je     c0013c25 <KeGetFileFromDescriptor(int)+0xa0>
c0013bff:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013c05:	83 f8 08             	cmp    eax,0x8
c0013c08:	77 09                	ja     c0013c13 <KeGetFileFromDescriptor(int)+0x8e>
c0013c0a:	8b 04 85 40 62 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9dc0]
c0013c11:	eb 12                	jmp    c0013c25 <KeGetFileFromDescriptor(int)+0xa0>
c0013c13:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0013c19:	83 fb 08             	cmp    ebx,0x8
c0013c1c:	77 95                	ja     c0013bb3 <KeGetFileFromDescriptor(int)+0x2e>
c0013c1e:	8b 04 9d 00 62 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc9e00]
c0013c25:	83 c4 08             	add    esp,0x8
c0013c28:	5b                   	pop    ebx
c0013c29:	c3                   	ret    

c0013c2a <__static_initialization_and_destruction_0(int, int)>:
c0013c2a:	83 ec 0c             	sub    esp,0xc
c0013c2d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013c32:	75 34                	jne    c0013c68 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013c34:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013c3c:	75 2a                	jne    c0013c68 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013c3e:	83 ec 0c             	sub    esp,0xc
c0013c41:	68 78 62 03 c0       	push   0xc0036278
c0013c46:	e8 05 57 01 00       	call   c0029350 <LinkedList<UnixFile>::LinkedList()>
c0013c4b:	83 c4 10             	add    esp,0x10
c0013c4e:	83 ec 04             	sub    esp,0x4
c0013c51:	68 a0 f6 02 c0       	push   0xc002f6a0
c0013c56:	68 78 62 03 c0       	push   0xc0036278
c0013c5b:	68 4e 93 02 c0       	push   0xc002934e
c0013c60:	e8 4f a1 ff ff       	call   c000ddb4 <__cxa_atexit>
c0013c65:	83 c4 10             	add    esp,0x10
c0013c68:	90                   	nop
c0013c69:	83 c4 0c             	add    esp,0xc
c0013c6c:	c3                   	ret    

c0013c6d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013c6d:	83 ec 0c             	sub    esp,0xc
c0013c70:	83 ec 08             	sub    esp,0x8
c0013c73:	68 ff ff 00 00       	push   0xffff
c0013c78:	6a 01                	push   0x1
c0013c7a:	e8 ab ff ff ff       	call   c0013c2a <__static_initialization_and_destruction_0(int, int)>
c0013c7f:	83 c4 10             	add    esp,0x10
c0013c82:	83 c4 0c             	add    esp,0xc
c0013c85:	c3                   	ret    

c0013c86 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013c86:	53                   	push   ebx
c0013c87:	8b 15 c8 fe 02 c0    	mov    edx,DWORD PTR ds:0xc002fec8
c0013c8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c95:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0013c9b:	89 d8                	mov    eax,ebx
c0013c9d:	d1 e8                	shr    eax,1
c0013c9f:	01 d0                	add    eax,edx
c0013ca1:	80 e3 01             	and    bl,0x1
c0013ca4:	8a 10                	mov    dl,BYTE PTR [eax]
c0013ca6:	75 09                	jne    c0013cb1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0013ca8:	83 e2 f0             	and    edx,0xfffffff0
c0013cab:	09 ca                	or     edx,ecx
c0013cad:	88 10                	mov    BYTE PTR [eax],dl
c0013caf:	5b                   	pop    ebx
c0013cb0:	c3                   	ret    
c0013cb1:	83 e2 0f             	and    edx,0xf
c0013cb4:	0f b6 c9             	movzx  ecx,cl
c0013cb7:	c1 e1 04             	shl    ecx,0x4
c0013cba:	09 ca                	or     edx,ecx
c0013cbc:	88 10                	mov    BYTE PTR [eax],dl
c0013cbe:	5b                   	pop    ebx
c0013cbf:	c3                   	ret    

c0013cc0 <Virt::getPageState(unsigned long)>:
c0013cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cc4:	8b 0d c8 fe 02 c0    	mov    ecx,DWORD PTR ds:0xc002fec8
c0013cca:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013cd0:	89 d0                	mov    eax,edx
c0013cd2:	d1 e8                	shr    eax,1
c0013cd4:	80 e2 01             	and    dl,0x1
c0013cd7:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0013cda:	74 03                	je     c0013cdf <Virt::getPageState(unsigned long)+0x1f>
c0013cdc:	c1 e8 04             	shr    eax,0x4
c0013cdf:	83 e0 0f             	and    eax,0xf
c0013ce2:	c3                   	ret    

c0013ce3 <Virt::allocateKernelVirtualPages(int)>:
c0013ce3:	55                   	push   ebp
c0013ce4:	31 ed                	xor    ebp,ebp
c0013ce6:	57                   	push   edi
c0013ce7:	31 ff                	xor    edi,edi
c0013ce9:	56                   	push   esi
c0013cea:	53                   	push   ebx
c0013ceb:	31 db                	xor    ebx,ebx
c0013ced:	83 ec 0c             	sub    esp,0xc
c0013cf0:	8b 35 c4 fe 02 c0    	mov    esi,DWORD PTR ds:0xc002fec4
c0013cf6:	56                   	push   esi
c0013cf7:	e8 c4 ff ff ff       	call   c0013cc0 <Virt::getPageState(unsigned long)>
c0013cfc:	5a                   	pop    edx
c0013cfd:	84 c0                	test   al,al
c0013cff:	75 41                	jne    c0013d42 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0013d01:	85 db                	test   ebx,ebx
c0013d03:	75 02                	jne    c0013d07 <Virt::allocateKernelVirtualPages(int)+0x24>
c0013d05:	89 f5                	mov    ebp,esi
c0013d07:	83 c3 01             	add    ebx,0x1
c0013d0a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013d0e:	74 5f                	je     c0013d6f <Virt::allocateKernelVirtualPages(int)+0x8c>
c0013d10:	83 c6 01             	add    esi,0x1
c0013d13:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013d19:	76 34                	jbe    c0013d4f <Virt::allocateKernelVirtualPages(int)+0x6c>
c0013d1b:	c7 05 c4 fe 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002fec4,0xc8000
c0013d25:	f7 c7 01 00 00 00    	test   edi,0x1
c0013d2b:	75 2a                	jne    c0013d57 <Virt::allocateKernelVirtualPages(int)+0x74>
c0013d2d:	be 00 80 0c 00       	mov    esi,0xc8000
c0013d32:	bf 01 00 00 00       	mov    edi,0x1
c0013d37:	56                   	push   esi
c0013d38:	e8 83 ff ff ff       	call   c0013cc0 <Virt::getPageState(unsigned long)>
c0013d3d:	5a                   	pop    edx
c0013d3e:	84 c0                	test   al,al
c0013d40:	74 bf                	je     c0013d01 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0013d42:	31 db                	xor    ebx,ebx
c0013d44:	83 c6 01             	add    esi,0x1
c0013d47:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013d4d:	77 cc                	ja     c0013d1b <Virt::allocateKernelVirtualPages(int)+0x38>
c0013d4f:	89 35 c4 fe 02 c0    	mov    DWORD PTR ds:0xc002fec4,esi
c0013d55:	eb 9f                	jmp    c0013cf6 <Virt::allocateKernelVirtualPages(int)+0x13>
c0013d57:	83 ec 0c             	sub    esp,0xc
c0013d5a:	68 70 bc 02 c0       	push   0xc002bc70
c0013d5f:	e8 e8 c9 ff ff       	call   c001074c <KePanic(char const*)>
c0013d64:	8b 35 c4 fe 02 c0    	mov    esi,DWORD PTR ds:0xc002fec4
c0013d6a:	83 c4 10             	add    esp,0x10
c0013d6d:	eb 87                	jmp    c0013cf6 <Virt::allocateKernelVirtualPages(int)+0x13>
c0013d6f:	89 2d c4 fe 02 c0    	mov    DWORD PTR ds:0xc002fec4,ebp
c0013d75:	83 fb 01             	cmp    ebx,0x1
c0013d78:	74 6f                	je     c0013de9 <Virt::allocateKernelVirtualPages(int)+0x106>
c0013d7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013d7e:	85 c9                	test   ecx,ecx
c0013d80:	74 49                	je     c0013dcb <Virt::allocateKernelVirtualPages(int)+0xe8>
c0013d82:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013d86:	89 e8                	mov    eax,ebp
c0013d88:	31 db                	xor    ebx,ebx
c0013d8a:	8d 79 ff             	lea    edi,[ecx-0x1]
c0013d8d:	eb 18                	jmp    c0013da7 <Virt::allocateKernelVirtualPages(int)+0xc4>
c0013d8f:	6a 01                	push   0x1
c0013d91:	83 c3 01             	add    ebx,0x1
c0013d94:	50                   	push   eax
c0013d95:	e8 ec fe ff ff       	call   c0013c86 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013d9a:	58                   	pop    eax
c0013d9b:	5a                   	pop    edx
c0013d9c:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013da0:	74 29                	je     c0013dcb <Virt::allocateKernelVirtualPages(int)+0xe8>
c0013da2:	a1 c4 fe 02 c0       	mov    eax,ds:0xc002fec4
c0013da7:	8d 50 01             	lea    edx,[eax+0x1]
c0013daa:	85 db                	test   ebx,ebx
c0013dac:	89 15 c4 fe 02 c0    	mov    DWORD PTR ds:0xc002fec4,edx
c0013db2:	74 24                	je     c0013dd8 <Virt::allocateKernelVirtualPages(int)+0xf5>
c0013db4:	39 df                	cmp    edi,ebx
c0013db6:	75 d7                	jne    c0013d8f <Virt::allocateKernelVirtualPages(int)+0xac>
c0013db8:	6a 03                	push   0x3
c0013dba:	83 c3 01             	add    ebx,0x1
c0013dbd:	50                   	push   eax
c0013dbe:	e8 c3 fe ff ff       	call   c0013c86 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013dc3:	59                   	pop    ecx
c0013dc4:	5e                   	pop    esi
c0013dc5:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013dc9:	75 d7                	jne    c0013da2 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0013dcb:	83 c4 0c             	add    esp,0xc
c0013dce:	89 e8                	mov    eax,ebp
c0013dd0:	5b                   	pop    ebx
c0013dd1:	c1 e0 0c             	shl    eax,0xc
c0013dd4:	5e                   	pop    esi
c0013dd5:	5f                   	pop    edi
c0013dd6:	5d                   	pop    ebp
c0013dd7:	c3                   	ret    
c0013dd8:	6a 02                	push   0x2
c0013dda:	bb 01 00 00 00       	mov    ebx,0x1
c0013ddf:	50                   	push   eax
c0013de0:	e8 a1 fe ff ff       	call   c0013c86 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013de5:	58                   	pop    eax
c0013de6:	5a                   	pop    edx
c0013de7:	eb b9                	jmp    c0013da2 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0013de9:	6a 04                	push   0x4
c0013deb:	8d 45 01             	lea    eax,[ebp+0x1]
c0013dee:	55                   	push   ebp
c0013def:	a3 c4 fe 02 c0       	mov    ds:0xc002fec4,eax
c0013df4:	e8 8d fe ff ff       	call   c0013c86 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013df9:	5b                   	pop    ebx
c0013dfa:	89 e8                	mov    eax,ebp
c0013dfc:	5e                   	pop    esi
c0013dfd:	c1 e0 0c             	shl    eax,0xc
c0013e00:	83 c4 0c             	add    esp,0xc
c0013e03:	5b                   	pop    ebx
c0013e04:	5e                   	pop    esi
c0013e05:	5f                   	pop    edi
c0013e06:	5d                   	pop    ebp
c0013e07:	c3                   	ret    

c0013e08 <Virt::freeSwapfilePage(unsigned long)>:
c0013e08:	53                   	push   ebx
c0013e09:	8b 15 8c 62 03 c0    	mov    edx,DWORD PTR ds:0xc003628c
c0013e0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013e13:	b8 01 00 00 00       	mov    eax,0x1
c0013e18:	89 cb                	mov    ebx,ecx
c0013e1a:	d3 e0                	shl    eax,cl
c0013e1c:	c1 eb 05             	shr    ebx,0x5
c0013e1f:	f7 d0                	not    eax
c0013e21:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013e24:	21 c1                	and    ecx,eax
c0013e26:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013e29:	5b                   	pop    ebx
c0013e2a:	c3                   	ret    

c0013e2b <Virt::swapIDToSector(unsigned long)>:
c0013e2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e2f:	8b 15 cc fe 02 c0    	mov    edx,DWORD PTR ds:0xc002fecc
c0013e35:	8b 0d d4 fe 02 c0    	mov    ecx,DWORD PTR ds:0xc002fed4
c0013e3b:	0f af c2             	imul   eax,edx
c0013e3e:	01 c8                	add    eax,ecx
c0013e40:	c3                   	ret    

c0013e41 <Virt::allocateSwapfilePage()>:
c0013e41:	55                   	push   ebp
c0013e42:	31 d2                	xor    edx,edx
c0013e44:	57                   	push   edi
c0013e45:	56                   	push   esi
c0013e46:	53                   	push   ebx
c0013e47:	83 ec 0c             	sub    esp,0xc
c0013e4a:	8b 0d cc fe 02 c0    	mov    ecx,DWORD PTR ds:0xc002fecc
c0013e50:	a1 d0 fe 02 c0       	mov    eax,ds:0xc002fed0
c0013e55:	f7 f1                	div    ecx
c0013e57:	39 0d d0 fe 02 c0    	cmp    DWORD PTR ds:0xc002fed0,ecx
c0013e5d:	72 2f                	jb     c0013e8e <Virt::allocateSwapfilePage()+0x4d>
c0013e5f:	8b 35 8c 62 03 c0    	mov    esi,DWORD PTR ds:0xc003628c
c0013e65:	8b 16                	mov    edx,DWORD PTR [esi]
c0013e67:	f6 c2 01             	test   dl,0x1
c0013e6a:	74 3e                	je     c0013eaa <Virt::allocateSwapfilePage()+0x69>
c0013e6c:	31 c9                	xor    ecx,ecx
c0013e6e:	bf 01 00 00 00       	mov    edi,0x1
c0013e73:	eb 12                	jmp    c0013e87 <Virt::allocateSwapfilePage()+0x46>
c0013e75:	89 fd                	mov    ebp,edi
c0013e77:	89 ca                	mov    edx,ecx
c0013e79:	d3 e5                	shl    ebp,cl
c0013e7b:	c1 ea 05             	shr    edx,0x5
c0013e7e:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013e81:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013e83:	85 ea                	test   edx,ebp
c0013e85:	74 2c                	je     c0013eb3 <Virt::allocateSwapfilePage()+0x72>
c0013e87:	83 c1 01             	add    ecx,0x1
c0013e8a:	39 c8                	cmp    eax,ecx
c0013e8c:	77 e7                	ja     c0013e75 <Virt::allocateSwapfilePage()+0x34>
c0013e8e:	83 ec 0c             	sub    esp,0xc
c0013e91:	68 83 bf 02 c0       	push   0xc002bf83
c0013e96:	e8 b1 c8 ff ff       	call   c001074c <KePanic(char const*)>
c0013e9b:	83 c4 10             	add    esp,0x10
c0013e9e:	31 c9                	xor    ecx,ecx
c0013ea0:	83 c4 0c             	add    esp,0xc
c0013ea3:	89 c8                	mov    eax,ecx
c0013ea5:	5b                   	pop    ebx
c0013ea6:	5e                   	pop    esi
c0013ea7:	5f                   	pop    edi
c0013ea8:	5d                   	pop    ebp
c0013ea9:	c3                   	ret    
c0013eaa:	89 f3                	mov    ebx,esi
c0013eac:	bd 01 00 00 00       	mov    ebp,0x1
c0013eb1:	31 c9                	xor    ecx,ecx
c0013eb3:	09 ea                	or     edx,ebp
c0013eb5:	89 c8                	mov    eax,ecx
c0013eb7:	89 13                	mov    DWORD PTR [ebx],edx
c0013eb9:	83 c4 0c             	add    esp,0xc
c0013ebc:	5b                   	pop    ebx
c0013ebd:	5e                   	pop    esi
c0013ebe:	5f                   	pop    edi
c0013ebf:	5d                   	pop    ebp
c0013ec0:	c3                   	ret    

c0013ec1 <Virt::virtualMemorySetup()>:
c0013ec1:	53                   	push   ebx
c0013ec2:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013ec7:	6a 0f                	push   0xf
c0013ec9:	53                   	push   ebx
c0013eca:	83 c3 01             	add    ebx,0x1
c0013ecd:	e8 b4 fd ff ff       	call   c0013c86 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013ed2:	58                   	pop    eax
c0013ed3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013ed9:	5a                   	pop    edx
c0013eda:	75 eb                	jne    c0013ec7 <Virt::virtualMemorySetup()+0x6>
c0013edc:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013ee1:	6a 00                	push   0x0
c0013ee3:	53                   	push   ebx
c0013ee4:	83 c3 01             	add    ebx,0x1
c0013ee7:	e8 9a fd ff ff       	call   c0013c86 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013eec:	59                   	pop    ecx
c0013eed:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013ef3:	58                   	pop    eax
c0013ef4:	75 eb                	jne    c0013ee1 <Virt::virtualMemorySetup()+0x20>
c0013ef6:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013efb:	6a 0f                	push   0xf
c0013efd:	53                   	push   ebx
c0013efe:	83 c3 01             	add    ebx,0x1
c0013f01:	e8 80 fd ff ff       	call   c0013c86 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013f06:	58                   	pop    eax
c0013f07:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013f0d:	5a                   	pop    edx
c0013f0e:	75 eb                	jne    c0013efb <Virt::virtualMemorySetup()+0x3a>
c0013f10:	5b                   	pop    ebx
c0013f11:	c3                   	ret    

c0013f12 <Virt::setupPageSwapping(int)>:
c0013f12:	53                   	push   ebx
c0013f13:	83 ec 0c             	sub    esp,0xc
c0013f16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013f1a:	a1 e8 5a 03 c0       	mov    eax,ds:0xc0035ae8
c0013f1f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013f25:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f27:	53                   	push   ebx
c0013f28:	c1 e3 0b             	shl    ebx,0xb
c0013f2b:	68 9a bf 02 c0       	push   0xc002bf9a
c0013f30:	50                   	push   eax
c0013f31:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013f34:	89 1d d0 fe 02 c0    	mov    DWORD PTR ds:0xc002fed0,ebx
c0013f3a:	c6 05 d8 fe 02 c0 43 	mov    BYTE PTR ds:0xc002fed8,0x43
c0013f41:	c1 eb 08             	shr    ebx,0x8
c0013f44:	a3 d4 fe 02 c0       	mov    ds:0xc002fed4,eax
c0013f49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f4c:	c7 05 cc fe 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002fecc,0x8
c0013f56:	e8 9c c3 ff ff       	call   c00102f7 <malloc>
c0013f5b:	83 c4 0c             	add    esp,0xc
c0013f5e:	89 c1                	mov    ecx,eax
c0013f60:	a3 8c 62 03 c0       	mov    ds:0xc003628c,eax
c0013f65:	31 d2                	xor    edx,edx
c0013f67:	a1 d0 fe 02 c0       	mov    eax,ds:0xc002fed0
c0013f6c:	f7 35 cc fe 02 c0    	div    DWORD PTR ds:0xc002fecc
c0013f72:	c1 e8 05             	shr    eax,0x5
c0013f75:	50                   	push   eax
c0013f76:	6a 00                	push   0x0
c0013f78:	51                   	push   ecx
c0013f79:	e8 72 c5 fe ff       	call   c00004f0 <memset>
c0013f7e:	83 c4 18             	add    esp,0x18
c0013f81:	5b                   	pop    ebx
c0013f82:	c3                   	ret    
c0013f83:	90                   	nop

c0013f84 <VAS::setCPUSpecific(unsigned long)>:
c0013f84:	c3                   	ret    
c0013f85:	90                   	nop

c0013f86 <VAS::VAS(VAS*)>:
c0013f86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f95:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013f9c:	90                   	nop
c0013f9d:	c3                   	ret    

c0013f9e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013f9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fa2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0013fa7:	89 c2                	mov    edx,eax
c0013fa9:	c1 e8 0a             	shr    eax,0xa
c0013fac:	c1 ea 16             	shr    edx,0x16
c0013faf:	83 f9 01             	cmp    ecx,0x1
c0013fb2:	19 c9                	sbb    ecx,ecx
c0013fb4:	c1 e2 0c             	shl    edx,0xc
c0013fb7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013fbd:	25 fc 0f 00 00       	and    eax,0xffc
c0013fc2:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0013fc9:	01 d0                	add    eax,edx
c0013fcb:	c3                   	ret    

c0013fcc <VAS::getPageTableEntry(unsigned long)>:
c0013fcc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013fd0:	89 ca                	mov    edx,ecx
c0013fd2:	c1 e9 0a             	shr    ecx,0xa
c0013fd5:	c1 ea 16             	shr    edx,0x16
c0013fd8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013fde:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013fe4:	c1 e0 0c             	shl    eax,0xc
c0013fe7:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013fea:	c3                   	ret    

c0013feb <Virt::freeKernelVirtualPages(unsigned long)>:
c0013feb:	55                   	push   ebp
c0013fec:	57                   	push   edi
c0013fed:	bf 01 00 00 00       	mov    edi,0x1
c0013ff2:	56                   	push   esi
c0013ff3:	53                   	push   ebx
c0013ff4:	83 ec 1c             	sub    esp,0x1c
c0013ff7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013ffb:	c1 ee 0c             	shr    esi,0xc
c0013ffe:	eb 48                	jmp    c0014048 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0014000:	83 ec 08             	sub    esp,0x8
c0014003:	a1 90 62 03 c0       	mov    eax,ds:0xc0036290
c0014008:	55                   	push   ebp
c0014009:	50                   	push   eax
c001400a:	e8 bd ff ff ff       	call   c0013fcc <VAS::getPageTableEntry(unsigned long)>
c001400f:	83 c4 10             	add    esp,0x10
c0014012:	8b 10                	mov    edx,DWORD PTR [eax]
c0014014:	f6 c6 04             	test   dh,0x4
c0014017:	75 70                	jne    c0014089 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0014019:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001401f:	83 fb 04             	cmp    ebx,0x4
c0014022:	0f 84 8a 00 00 00    	je     c00140b2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0014028:	83 fb 02             	cmp    ebx,0x2
c001402b:	0f 84 9a 00 00 00    	je     c00140cb <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0014031:	83 fb 03             	cmp    ebx,0x3
c0014034:	0f 84 be 00 00 00    	je     c00140f8 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001403a:	83 fb 01             	cmp    ebx,0x1
c001403d:	0f 84 a2 00 00 00    	je     c00140e5 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0014043:	83 c6 01             	add    esi,0x1
c0014046:	31 ff                	xor    edi,edi
c0014048:	56                   	push   esi
c0014049:	89 f5                	mov    ebp,esi
c001404b:	e8 70 fc ff ff       	call   c0013cc0 <Virt::getPageState(unsigned long)>
c0014050:	c1 e5 0c             	shl    ebp,0xc
c0014053:	0f b6 d8             	movzx  ebx,al
c0014056:	5a                   	pop    edx
c0014057:	85 db                	test   ebx,ebx
c0014059:	75 a5                	jne    c0014000 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c001405b:	83 ec 0c             	sub    esp,0xc
c001405e:	68 b1 bf 02 c0       	push   0xc002bfb1
c0014063:	e8 e4 c6 ff ff       	call   c001074c <KePanic(char const*)>
c0014068:	5a                   	pop    edx
c0014069:	59                   	pop    ecx
c001406a:	55                   	push   ebp
c001406b:	8b 2d 90 62 03 c0    	mov    ebp,DWORD PTR ds:0xc0036290
c0014071:	55                   	push   ebp
c0014072:	e8 55 ff ff ff       	call   c0013fcc <VAS::getPageTableEntry(unsigned long)>
c0014077:	83 c4 10             	add    esp,0x10
c001407a:	8b 10                	mov    edx,DWORD PTR [eax]
c001407c:	f6 c6 04             	test   dh,0x4
c001407f:	75 08                	jne    c0014089 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0014081:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014087:	eb ba                	jmp    c0014043 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0014089:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001408d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0014093:	83 ec 0c             	sub    esp,0xc
c0014096:	52                   	push   edx
c0014097:	e8 3b c8 ff ff       	call   c00108d7 <Phys::freePage(unsigned long)>
c001409c:	83 c4 10             	add    esp,0x10
c001409f:	83 fb 04             	cmp    ebx,0x4
c00140a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00140a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00140ac:	0f 85 76 ff ff ff    	jne    c0014028 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00140b2:	83 e7 01             	and    edi,0x1
c00140b5:	75 46                	jne    c00140fd <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00140b7:	c7 44 24 30 90 bc 02 c0 	mov    DWORD PTR [esp+0x30],0xc002bc90
c00140bf:	83 c4 1c             	add    esp,0x1c
c00140c2:	5b                   	pop    ebx
c00140c3:	5e                   	pop    esi
c00140c4:	5f                   	pop    edi
c00140c5:	5d                   	pop    ebp
c00140c6:	e9 81 c6 ff ff       	jmp    c001074c <KePanic(char const*)>
c00140cb:	83 e7 01             	and    edi,0x1
c00140ce:	75 15                	jne    c00140e5 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00140d0:	83 ec 0c             	sub    esp,0xc
c00140d3:	68 cd bf 02 c0       	push   0xc002bfcd
c00140d8:	e8 6f c6 ff ff       	call   c001074c <KePanic(char const*)>
c00140dd:	83 c4 10             	add    esp,0x10
c00140e0:	e9 5e ff ff ff       	jmp    c0014043 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00140e5:	83 ec 08             	sub    esp,0x8
c00140e8:	6a 00                	push   0x0
c00140ea:	56                   	push   esi
c00140eb:	e8 96 fb ff ff       	call   c0013c86 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	e9 4b ff ff ff       	jmp    c0014043 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00140f8:	83 e7 01             	and    edi,0x1
c00140fb:	75 16                	jne    c0014113 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00140fd:	83 ec 08             	sub    esp,0x8
c0014100:	6a 00                	push   0x0
c0014102:	56                   	push   esi
c0014103:	e8 7e fb ff ff       	call   c0013c86 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0014108:	83 c4 10             	add    esp,0x10
c001410b:	83 c4 1c             	add    esp,0x1c
c001410e:	5b                   	pop    ebx
c001410f:	5e                   	pop    esi
c0014110:	5f                   	pop    edi
c0014111:	5d                   	pop    ebp
c0014112:	c3                   	ret    
c0014113:	c7 44 24 30 e9 bf 02 c0 	mov    DWORD PTR [esp+0x30],0xc002bfe9
c001411b:	83 c4 1c             	add    esp,0x1c
c001411e:	5b                   	pop    ebx
c001411f:	5e                   	pop    esi
c0014120:	5f                   	pop    edi
c0014121:	5d                   	pop    ebp
c0014122:	e9 25 c6 ff ff       	jmp    c001074c <KePanic(char const*)>
c0014127:	90                   	nop

c0014128 <VAS::freeAllocatedPages(unsigned long)>:
c0014128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001412c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014130:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0014134:	74 09                	je     c001413f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0014136:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001413a:	e9 ac fe ff ff       	jmp    c0013feb <Virt::freeKernelVirtualPages(unsigned long)>
c001413f:	c7 44 24 04 b4 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bcb4
c0014147:	e9 30 2e ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c001414c <VAS::virtualToPhysical(unsigned long)>:
c001414c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014150:	50                   	push   eax
c0014151:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014155:	52                   	push   edx
c0014156:	e8 71 fe ff ff       	call   c0013fcc <VAS::getPageTableEntry(unsigned long)>
c001415b:	59                   	pop    ecx
c001415c:	8b 00                	mov    eax,DWORD PTR [eax]
c001415e:	5a                   	pop    edx
c001415f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014164:	c3                   	ret    
c0014165:	90                   	nop

c0014166 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0014166:	55                   	push   ebp
c0014167:	57                   	push   edi
c0014168:	56                   	push   esi
c0014169:	53                   	push   ebx
c001416a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001416e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014172:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014176:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001417a:	85 db                	test   ebx,ebx
c001417c:	7e 24                	jle    c00141a2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c001417e:	c1 e3 0c             	shl    ebx,0xc
c0014181:	01 f3                	add    ebx,esi
c0014183:	56                   	push   esi
c0014184:	81 c6 00 10 00 00    	add    esi,0x1000
c001418a:	55                   	push   ebp
c001418b:	e8 3c fe ff ff       	call   c0013fcc <VAS::getPageTableEntry(unsigned long)>
c0014190:	5a                   	pop    edx
c0014191:	59                   	pop    ecx
c0014192:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014194:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014198:	21 f9                	and    ecx,edi
c001419a:	09 d1                	or     ecx,edx
c001419c:	39 f3                	cmp    ebx,esi
c001419e:	89 08                	mov    DWORD PTR [eax],ecx
c00141a0:	75 e1                	jne    c0014183 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00141a2:	5b                   	pop    ebx
c00141a3:	5e                   	pop    esi
c00141a4:	5f                   	pop    edi
c00141a5:	5d                   	pop    ebp
c00141a6:	c3                   	ret    
c00141a7:	90                   	nop

c00141a8 <VAS::VAS()>:
c00141a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00141be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141c2:	a3 90 62 03 c0       	mov    ds:0xc0036290,eax
c00141c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141cb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00141cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141d3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00141d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141da:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00141e1:	ba 7d 10 03 c0       	mov    edx,0xc003107d
c00141e6:	b8 00 10 03 c0       	mov    eax,0xc0031000
c00141eb:	29 c2                	sub    edx,eax
c00141ed:	89 d0                	mov    eax,edx
c00141ef:	05 ff 0f 00 00       	add    eax,0xfff
c00141f4:	c1 e8 0c             	shr    eax,0xc
c00141f7:	89 c2                	mov    edx,eax
c00141f9:	b8 00 10 03 c0       	mov    eax,0xc0031000
c00141fe:	6a 04                	push   0x4
c0014200:	6a ff                	push   0xffffffff
c0014202:	52                   	push   edx
c0014203:	50                   	push   eax
c0014204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014208:	e8 59 ff ff ff       	call   c0014166 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001420d:	83 c4 14             	add    esp,0x14
c0014210:	90                   	nop
c0014211:	c3                   	ret    

c0014212 <VAS::setToWriteCombining(unsigned long, int)>:
c0014212:	a1 24 64 03 c0       	mov    eax,ds:0xc0036424
c0014217:	50                   	push   eax
c0014218:	6a ff                	push   0xffffffff
c001421a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001421e:	52                   	push   edx
c001421f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0014223:	51                   	push   ecx
c0014224:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014228:	50                   	push   eax
c0014229:	e8 38 ff ff ff       	call   c0014166 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001422e:	83 c4 14             	add    esp,0x14
c0014231:	c3                   	ret    

c0014232 <VAS::mapOtherVASIn(bool, VAS*)>:
c0014232:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014236:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014239:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001423d:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0014240:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0014245:	83 f8 01             	cmp    eax,0x1
c0014248:	19 c0                	sbb    eax,eax
c001424a:	83 ca 03             	or     edx,0x3
c001424d:	83 e0 fc             	and    eax,0xfffffffc
c0014250:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0014257:	0f 20 d8             	mov    eax,cr3
c001425a:	0f 22 d8             	mov    cr3,eax
c001425d:	c3                   	ret    

c001425e <VAS::~VAS()>:
c001425e:	83 ec 2c             	sub    esp,0x2c
c0014261:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014269:	fa                   	cli    
c001426a:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001426f:	83 c0 01             	add    eax,0x1
c0014272:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0014277:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001427c:	8b 00                	mov    eax,DWORD PTR [eax]
c001427e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014281:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0014287:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001428b:	6a 01                	push   0x1
c001428d:	50                   	push   eax
c001428e:	e8 9f ff ff ff       	call   c0014232 <VAS::mapOtherVASIn(bool, VAS*)>
c0014293:	83 c4 0c             	add    esp,0xc
c0014296:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001429e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00142a6:	0f 8f d8 00 00 00    	jg     c0014384 <VAS::~VAS()+0x126>
c00142ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00142b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142b7:	c1 e2 02             	shl    edx,0x2
c00142ba:	01 d0                	add    eax,edx
c00142bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00142be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00142c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142c6:	83 e0 01             	and    eax,0x1
c00142c9:	0f 84 ab 00 00 00    	je     c001437a <VAS::~VAS()+0x11c>
c00142cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00142d7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00142df:	7f 74                	jg     c0014355 <VAS::~VAS()+0xf7>
c00142e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142e5:	c1 e0 0a             	shl    eax,0xa
c00142e8:	89 c2                	mov    edx,eax
c00142ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142ee:	01 d0                	add    eax,edx
c00142f0:	c1 e0 0c             	shl    eax,0xc
c00142f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00142f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00142fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00142fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014301:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0014307:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001430b:	6a 01                	push   0x1
c001430d:	50                   	push   eax
c001430e:	e8 8b fc ff ff       	call   c0013f9e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0014313:	83 c4 0c             	add    esp,0xc
c0014316:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001431a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001431e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014320:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014328:	25 01 04 00 00       	and    eax,0x401
c001432d:	3d 01 04 00 00       	cmp    eax,0x401
c0014332:	75 1a                	jne    c001434e <VAS::~VAS()+0xf0>
c0014334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014338:	25 00 f0 ff ff       	and    eax,0xfffff000
c001433d:	83 ec 0c             	sub    esp,0xc
c0014340:	50                   	push   eax
c0014341:	e8 91 c5 ff ff       	call   c00108d7 <Phys::freePage(unsigned long)>
c0014346:	83 c4 10             	add    esp,0x10
c0014349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001434e:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0014353:	eb 82                	jmp    c00142d7 <VAS::~VAS()+0x79>
c0014355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014359:	25 00 04 00 00       	and    eax,0x400
c001435e:	74 1a                	je     c001437a <VAS::~VAS()+0x11c>
c0014360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014364:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014369:	83 ec 0c             	sub    esp,0xc
c001436c:	50                   	push   eax
c001436d:	e8 65 c5 ff ff       	call   c00108d7 <Phys::freePage(unsigned long)>
c0014372:	83 c4 10             	add    esp,0x10
c0014375:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001437a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001437f:	e9 1a ff ff ff       	jmp    c001429e <VAS::~VAS()+0x40>
c0014384:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014388:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001438b:	83 ec 0c             	sub    esp,0xc
c001438e:	50                   	push   eax
c001438f:	e8 57 fc ff ff       	call   c0013feb <Virt::freeKernelVirtualPages(unsigned long)>
c0014394:	83 c4 10             	add    esp,0x10
c0014397:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001439b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001439e:	83 ec 0c             	sub    esp,0xc
c00143a1:	50                   	push   eax
c00143a2:	e8 30 c5 ff ff       	call   c00108d7 <Phys::freePage(unsigned long)>
c00143a7:	83 c4 10             	add    esp,0x10
c00143aa:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00143af:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00143b7:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00143bc:	85 c0                	test   eax,eax
c00143be:	75 01                	jne    c00143c1 <VAS::~VAS()+0x163>
c00143c0:	fb                   	sti    
c00143c1:	90                   	nop
c00143c2:	83 c4 2c             	add    esp,0x2c
c00143c5:	c3                   	ret    

c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00143c6:	55                   	push   ebp
c00143c7:	57                   	push   edi
c00143c8:	56                   	push   esi
c00143c9:	53                   	push   ebx
c00143ca:	83 ec 1c             	sub    esp,0x1c
c00143cd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00143d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00143d5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00143db:	77 08                	ja     c00143e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00143dd:	0f 20 d8             	mov    eax,cr3
c00143e0:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00143e3:	75 49                	jne    c001442e <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c00143e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00143e9:	09 d8                	or     eax,ebx
c00143eb:	a9 ff 0f 00 00       	test   eax,0xfff
c00143f0:	75 59                	jne    c001444b <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c00143f2:	89 de                	mov    esi,ebx
c00143f4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00143f7:	c1 ee 16             	shr    esi,0x16
c00143fa:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0014401:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0014405:	74 56                	je     c001445d <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0014407:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001440b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001440f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0014415:	c1 eb 0a             	shr    ebx,0xa
c0014418:	c1 e6 0c             	shl    esi,0xc
c001441b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0014421:	09 d0                	or     eax,edx
c0014423:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0014426:	83 c4 1c             	add    esp,0x1c
c0014429:	5b                   	pop    ebx
c001442a:	5e                   	pop    esi
c001442b:	5f                   	pop    edi
c001442c:	5d                   	pop    ebp
c001442d:	c3                   	ret    
c001442e:	83 ec 0c             	sub    esp,0xc
c0014431:	68 d8 bc 02 c0       	push   0xc002bcd8
c0014436:	e8 41 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001443b:	83 c4 10             	add    esp,0x10
c001443e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014442:	09 d8                	or     eax,ebx
c0014444:	a9 ff 0f 00 00       	test   eax,0xfff
c0014449:	74 a7                	je     c00143f2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001444b:	83 ec 0c             	sub    esp,0xc
c001444e:	68 40 bd 02 c0       	push   0xc002bd40
c0014453:	e8 f4 c2 ff ff       	call   c001074c <KePanic(char const*)>
c0014458:	83 c4 10             	add    esp,0x10
c001445b:	eb 95                	jmp    c00143f2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001445d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014461:	e8 da c4 ff ff       	call   c0010940 <Phys::allocatePage()>
c0014466:	83 ec 0c             	sub    esp,0xc
c0014469:	89 c5                	mov    ebp,eax
c001446b:	8b 0d 90 62 03 c0    	mov    ecx,DWORD PTR ds:0xc0036290
c0014471:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0014475:	6a 01                	push   0x1
c0014477:	e8 67 f8 ff ff       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c001447c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014483:	6a 01                	push   0x1
c0014485:	50                   	push   eax
c0014486:	55                   	push   ebp
c0014487:	81 cd 07 04 00 00    	or     ebp,0x407
c001448d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014491:	51                   	push   ecx
c0014492:	e8 19 01 00 00       	call   c00145b0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014497:	83 c4 1c             	add    esp,0x1c
c001449a:	68 00 10 00 00       	push   0x1000
c001449f:	6a 00                	push   0x0
c00144a1:	50                   	push   eax
c00144a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144a6:	e8 45 c0 fe ff       	call   c00004f0 <memset>
c00144ab:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00144af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00144b2:	e8 34 fb ff ff       	call   c0013feb <Virt::freeKernelVirtualPages(unsigned long)>
c00144b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00144bb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00144be:	83 c4 10             	add    esp,0x10
c00144c1:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00144c4:	e9 3e ff ff ff       	jmp    c0014407 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c00144c9:	90                   	nop

c00144ca <VAS::allocatePages(int, int)>:
c00144ca:	55                   	push   ebp
c00144cb:	57                   	push   edi
c00144cc:	56                   	push   esi
c00144cd:	53                   	push   ebx
c00144ce:	83 ec 1c             	sub    esp,0x1c
c00144d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00144d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00144d9:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00144dd:	75 71                	jne    c0014550 <VAS::allocatePages(int, int)+0x86>
c00144df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00144e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00144e6:	85 c0                	test   eax,eax
c00144e8:	74 4d                	je     c0014537 <VAS::allocatePages(int, int)+0x6d>
c00144ea:	89 dd                	mov    ebp,ebx
c00144ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00144f0:	c1 e5 0c             	shl    ebp,0xc
c00144f3:	01 c5                	add    ebp,eax
c00144f5:	85 db                	test   ebx,ebx
c00144f7:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00144fa:	7e 29                	jle    c0014525 <VAS::allocatePages(int, int)+0x5b>
c00144fc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0014500:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0014504:	81 cf 00 04 00 00    	or     edi,0x400
c001450a:	e8 31 c4 ff ff       	call   c0010940 <Phys::allocatePage()>
c001450f:	57                   	push   edi
c0014510:	53                   	push   ebx
c0014511:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014517:	50                   	push   eax
c0014518:	56                   	push   esi
c0014519:	e8 a8 fe ff ff       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001451e:	83 c4 10             	add    esp,0x10
c0014521:	39 dd                	cmp    ebp,ebx
c0014523:	75 e5                	jne    c001450a <VAS::allocatePages(int, int)+0x40>
c0014525:	0f 20 d8             	mov    eax,cr3
c0014528:	0f 22 d8             	mov    cr3,eax
c001452b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001452f:	83 c4 1c             	add    esp,0x1c
c0014532:	5b                   	pop    ebx
c0014533:	5e                   	pop    esi
c0014534:	5f                   	pop    edi
c0014535:	5d                   	pop    ebp
c0014536:	c3                   	ret    
c0014537:	83 ec 0c             	sub    esp,0xc
c001453a:	68 64 bd 02 c0       	push   0xc002bd64
c001453f:	e8 08 c2 ff ff       	call   c001074c <KePanic(char const*)>
c0014544:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014547:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001454b:	83 c4 10             	add    esp,0x10
c001454e:	eb 9a                	jmp    c00144ea <VAS::allocatePages(int, int)+0x20>
c0014550:	83 ec 0c             	sub    esp,0xc
c0014553:	53                   	push   ebx
c0014554:	e8 8a f7 ff ff       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c0014559:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001455d:	83 c4 10             	add    esp,0x10
c0014560:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0014565:	77 37                	ja     c001459e <VAS::allocatePages(int, int)+0xd4>
c0014567:	85 db                	test   ebx,ebx
c0014569:	7e ba                	jle    c0014525 <VAS::allocatePages(int, int)+0x5b>
c001456b:	c1 e3 0c             	shl    ebx,0xc
c001456e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014572:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0014576:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0014579:	81 cf 00 04 00 00    	or     edi,0x400
c001457f:	89 c3                	mov    ebx,eax
c0014581:	e8 ba c3 ff ff       	call   c0010940 <Phys::allocatePage()>
c0014586:	57                   	push   edi
c0014587:	53                   	push   ebx
c0014588:	81 c3 00 10 00 00    	add    ebx,0x1000
c001458e:	50                   	push   eax
c001458f:	56                   	push   esi
c0014590:	e8 31 fe ff ff       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014595:	83 c4 10             	add    esp,0x10
c0014598:	39 dd                	cmp    ebp,ebx
c001459a:	75 e5                	jne    c0014581 <VAS::allocatePages(int, int)+0xb7>
c001459c:	eb 87                	jmp    c0014525 <VAS::allocatePages(int, int)+0x5b>
c001459e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00145a2:	a1 28 64 03 c0       	mov    eax,ds:0xc0036428
c00145a7:	09 c2                	or     edx,eax
c00145a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00145ad:	eb b8                	jmp    c0014567 <VAS::allocatePages(int, int)+0x9d>
c00145af:	90                   	nop

c00145b0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00145b0:	55                   	push   ebp
c00145b1:	57                   	push   edi
c00145b2:	56                   	push   esi
c00145b3:	53                   	push   ebx
c00145b4:	83 ec 0c             	sub    esp,0xc
c00145b7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00145bb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00145bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00145c3:	85 db                	test   ebx,ebx
c00145c5:	7e 2f                	jle    c00145f6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c00145c7:	c1 e3 0c             	shl    ebx,0xc
c00145ca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00145ce:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00145d2:	01 d3                	add    ebx,edx
c00145d4:	55                   	push   ebp
c00145d5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00145d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00145dd:	29 c2                	sub    edx,eax
c00145df:	01 f2                	add    edx,esi
c00145e1:	52                   	push   edx
c00145e2:	56                   	push   esi
c00145e3:	81 c6 00 10 00 00    	add    esi,0x1000
c00145e9:	57                   	push   edi
c00145ea:	e8 d7 fd ff ff       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00145ef:	83 c4 10             	add    esp,0x10
c00145f2:	39 de                	cmp    esi,ebx
c00145f4:	75 de                	jne    c00145d4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c00145f6:	0f 20 d8             	mov    eax,cr3
c00145f9:	0f 22 d8             	mov    cr3,eax
c00145fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014600:	83 c4 0c             	add    esp,0xc
c0014603:	5b                   	pop    ebx
c0014604:	5e                   	pop    esi
c0014605:	5f                   	pop    edi
c0014606:	5d                   	pop    ebp
c0014607:	c3                   	ret    

c0014608 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0014608:	55                   	push   ebp
c0014609:	57                   	push   edi
c001460a:	56                   	push   esi
c001460b:	53                   	push   ebx
c001460c:	83 ec 1c             	sub    esp,0x1c
c001460f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014613:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0014617:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001461b:	09 f8                	or     eax,edi
c001461d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014621:	a9 ff 0f 00 00       	test   eax,0xfff
c0014626:	75 4f                	jne    c0014677 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0014628:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001462c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001462f:	c1 eb 16             	shr    ebx,0x16
c0014632:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0014639:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c001463d:	74 52                	je     c0014691 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c001463f:	0f b6 f2             	movzx  esi,dl
c0014642:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014646:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001464a:	c1 e8 0a             	shr    eax,0xa
c001464d:	83 fe 01             	cmp    esi,0x1
c0014650:	19 d2                	sbb    edx,edx
c0014652:	c1 e3 0c             	shl    ebx,0xc
c0014655:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001465b:	25 fc 0f 00 00       	and    eax,0xffc
c0014660:	01 d8                	add    eax,ebx
c0014662:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014666:	09 d9                	or     ecx,ebx
c0014668:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001466f:	83 c4 1c             	add    esp,0x1c
c0014672:	5b                   	pop    ebx
c0014673:	5e                   	pop    esi
c0014674:	5f                   	pop    edi
c0014675:	5d                   	pop    ebp
c0014676:	c3                   	ret    
c0014677:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001467b:	83 ec 0c             	sub    esp,0xc
c001467e:	68 90 bd 02 c0       	push   0xc002bd90
c0014683:	e8 c4 c0 ff ff       	call   c001074c <KePanic(char const*)>
c0014688:	83 c4 10             	add    esp,0x10
c001468b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001468f:	eb 97                	jmp    c0014628 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0014691:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014695:	e8 a6 c2 ff ff       	call   c0010940 <Phys::allocatePage()>
c001469a:	83 ec 0c             	sub    esp,0xc
c001469d:	89 c5                	mov    ebp,eax
c001469f:	8b 0d 90 62 03 c0    	mov    ecx,DWORD PTR ds:0xc0036290
c00146a5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00146a9:	6a 01                	push   0x1
c00146ab:	e8 33 f6 ff ff       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c00146b0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00146b7:	6a 01                	push   0x1
c00146b9:	50                   	push   eax
c00146ba:	55                   	push   ebp
c00146bb:	81 cd 07 04 00 00    	or     ebp,0x407
c00146c1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00146c5:	51                   	push   ecx
c00146c6:	e8 e5 fe ff ff       	call   c00145b0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00146cb:	83 c4 1c             	add    esp,0x1c
c00146ce:	68 00 10 00 00       	push   0x1000
c00146d3:	6a 00                	push   0x0
c00146d5:	50                   	push   eax
c00146d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146da:	e8 11 be fe ff       	call   c00004f0 <memset>
c00146df:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00146e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00146e6:	e8 00 f9 ff ff       	call   c0013feb <Virt::freeKernelVirtualPages(unsigned long)>
c00146eb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00146ee:	83 c4 10             	add    esp,0x10
c00146f1:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c00146f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146f8:	e9 42 ff ff ff       	jmp    c001463f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c00146fd:	90                   	nop

c00146fe <VAS::VAS(bool)>:
c00146fe:	53                   	push   ebx
c00146ff:	83 ec 28             	sub    esp,0x28
c0014702:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014706:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001470a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001470e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014715:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014719:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014720:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014724:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0014728:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001472b:	e8 10 c2 ff ff       	call   c0010940 <Phys::allocatePage()>
c0014730:	89 c2                	mov    edx,eax
c0014732:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014736:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014739:	8b 1d 90 62 03 c0    	mov    ebx,DWORD PTR ds:0xc0036290
c001473f:	83 ec 0c             	sub    esp,0xc
c0014742:	6a 01                	push   0x1
c0014744:	e8 9a f5 ff ff       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c0014749:	83 c4 10             	add    esp,0x10
c001474c:	89 c2                	mov    edx,eax
c001474e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014752:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014755:	83 ec 0c             	sub    esp,0xc
c0014758:	6a 03                	push   0x3
c001475a:	6a 01                	push   0x1
c001475c:	52                   	push   edx
c001475d:	50                   	push   eax
c001475e:	53                   	push   ebx
c001475f:	e8 4c fe ff ff       	call   c00145b0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014764:	83 c4 20             	add    esp,0x20
c0014767:	89 c2                	mov    edx,eax
c0014769:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001476d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0014770:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014778:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0014780:	7f 1d                	jg     c001479f <VAS::VAS(bool)+0xa1>
c0014782:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014786:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014789:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001478d:	c1 e2 02             	shl    edx,0x2
c0014790:	01 d0                	add    eax,edx
c0014792:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014798:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001479d:	eb d9                	jmp    c0014778 <VAS::VAS(bool)+0x7a>
c001479f:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00147a7:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00147af:	7f 59                	jg     c001480a <VAS::VAS(bool)+0x10c>
c00147b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147b5:	2d 00 02 00 00       	sub    eax,0x200
c00147ba:	c1 e0 0c             	shl    eax,0xc
c00147bd:	89 c2                	mov    edx,eax
c00147bf:	a1 28 64 03 c0       	mov    eax,ds:0xc0036428
c00147c4:	89 d1                	mov    ecx,edx
c00147c6:	09 c1                	or     ecx,eax
c00147c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00147cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147d3:	c1 e2 02             	shl    edx,0x2
c00147d6:	01 d0                	add    eax,edx
c00147d8:	83 c9 05             	or     ecx,0x5
c00147db:	89 ca                	mov    edx,ecx
c00147dd:	89 10                	mov    DWORD PTR [eax],edx
c00147df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147e3:	2d 40 03 00 00       	sub    eax,0x340
c00147e8:	83 f8 7f             	cmp    eax,0x7f
c00147eb:	77 16                	ja     c0014803 <VAS::VAS(bool)+0x105>
c00147ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00147f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147f8:	c1 e2 02             	shl    edx,0x2
c00147fb:	01 d0                	add    eax,edx
c00147fd:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0014803:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014808:	eb 9d                	jmp    c00147a7 <VAS::VAS(bool)+0xa9>
c001480a:	8b 15 28 64 03 c0    	mov    edx,DWORD PTR ds:0xc0036428
c0014810:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014814:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014817:	05 20 0c 00 00       	add    eax,0xc20
c001481c:	81 ca 03 40 00 00    	or     edx,0x4003
c0014822:	89 10                	mov    DWORD PTR [eax],edx
c0014824:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014828:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001482b:	a1 28 64 03 c0       	mov    eax,ds:0xc0036428
c0014830:	09 c2                	or     edx,eax
c0014832:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014836:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014839:	05 fc 0f 00 00       	add    eax,0xffc
c001483e:	83 ca 03             	or     edx,0x3
c0014841:	89 10                	mov    DWORD PTR [eax],edx
c0014843:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c0014848:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001484e:	83 ec 0c             	sub    esp,0xc
c0014851:	50                   	push   eax
c0014852:	e8 87 5e ff ff       	call   c000a6de <Device::getName()>
c0014857:	83 c4 10             	add    esp,0x10
c001485a:	83 ec 08             	sub    esp,0x8
c001485d:	68 03 c0 02 c0       	push   0xc002c003
c0014862:	50                   	push   eax
c0014863:	e8 e8 be fe ff       	call   c0000750 <strcmp>
c0014868:	83 c4 10             	add    esp,0x10
c001486b:	85 c0                	test   eax,eax
c001486d:	0f 94 c0             	sete   al
c0014870:	0f b6 c0             	movzx  eax,al
c0014873:	85 c0                	test   eax,eax
c0014875:	74 68                	je     c00148df <VAS::VAS(bool)+0x1e1>
c0014877:	fa                   	cli    
c0014878:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001487d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014883:	05 68 09 00 00       	add    eax,0x968
c0014888:	83 ec 0c             	sub    esp,0xc
c001488b:	50                   	push   eax
c001488c:	e8 59 ad ff ff       	call   c000f5ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0014891:	83 c4 10             	add    esp,0x10
c0014894:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014899:	89 c3                	mov    ebx,eax
c001489b:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c00148a0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00148a6:	05 68 09 00 00       	add    eax,0x968
c00148ab:	83 ec 0c             	sub    esp,0xc
c00148ae:	50                   	push   eax
c00148af:	e8 36 ad ff ff       	call   c000f5ea <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00148b4:	83 c4 10             	add    esp,0x10
c00148b7:	83 ec 08             	sub    esp,0x8
c00148ba:	50                   	push   eax
c00148bb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00148bf:	e8 08 f7 ff ff       	call   c0013fcc <VAS::getPageTableEntry(unsigned long)>
c00148c4:	83 c4 10             	add    esp,0x10
c00148c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00148c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00148ce:	6a 11                	push   0x11
c00148d0:	53                   	push   ebx
c00148d1:	50                   	push   eax
c00148d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00148d6:	e8 eb fa ff ff       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148db:	83 c4 10             	add    esp,0x10
c00148de:	fb                   	sti    
c00148df:	90                   	nop
c00148e0:	83 c4 28             	add    esp,0x28
c00148e3:	5b                   	pop    ebx
c00148e4:	c3                   	ret    
c00148e5:	90                   	nop

c00148e6 <VAS::evict(unsigned long)>:
c00148e6:	55                   	push   ebp
c00148e7:	57                   	push   edi
c00148e8:	56                   	push   esi
c00148e9:	53                   	push   ebx
c00148ea:	83 ec 24             	sub    esp,0x24
c00148ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00148f1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00148f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148f9:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00148fe:	50                   	push   eax
c00148ff:	68 11 c0 02 c0       	push   0xc002c011
c0014904:	e8 73 26 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014909:	e8 33 f5 ff ff       	call   c0013e41 <Virt::allocateSwapfilePage()>
c001490e:	83 c4 10             	add    esp,0x10
c0014911:	89 c7                	mov    edi,eax
c0014913:	a1 cc fe 02 c0       	mov    eax,ds:0xc002fecc
c0014918:	85 c0                	test   eax,eax
c001491a:	7e 40                	jle    c001495c <VAS::evict(unsigned long)+0x76>
c001491c:	89 ee                	mov    esi,ebp
c001491e:	31 db                	xor    ebx,ebx
c0014920:	83 ec 0c             	sub    esp,0xc
c0014923:	57                   	push   edi
c0014924:	e8 02 f5 ff ff       	call   c0013e2b <Virt::swapIDToSector(unsigned long)>
c0014929:	89 34 24             	mov    DWORD PTR [esp],esi
c001492c:	01 d8                	add    eax,ebx
c001492e:	6a 01                	push   0x1
c0014930:	31 d2                	xor    edx,edx
c0014932:	83 c3 01             	add    ebx,0x1
c0014935:	52                   	push   edx
c0014936:	81 c6 00 02 00 00    	add    esi,0x200
c001493c:	50                   	push   eax
c001493d:	0f be 05 d8 fe 02 c0 	movsx  eax,BYTE PTR ds:0xc002fed8
c0014944:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c001494b:	50                   	push   eax
c001494c:	e8 b9 6b ff ff       	call   c000b50a <LogicalDisk::write(unsigned long long, int, void*)>
c0014951:	83 c4 20             	add    esp,0x20
c0014954:	39 1d cc fe 02 c0    	cmp    DWORD PTR ds:0xc002fecc,ebx
c001495a:	7f c4                	jg     c0014920 <VAS::evict(unsigned long)+0x3a>
c001495c:	83 ec 08             	sub    esp,0x8
c001495f:	c1 e7 0c             	shl    edi,0xc
c0014962:	55                   	push   ebp
c0014963:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014967:	50                   	push   eax
c0014968:	e8 5f f6 ff ff       	call   c0013fcc <VAS::getPageTableEntry(unsigned long)>
c001496d:	8b 10                	mov    edx,DWORD PTR [eax]
c001496f:	89 d3                	mov    ebx,edx
c0014971:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0014977:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001497d:	09 d7                	or     edi,edx
c001497f:	89 38                	mov    DWORD PTR [eax],edi
c0014981:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014984:	8b 15 88 62 03 c0    	mov    edx,DWORD PTR ds:0xc0036288
c001498a:	83 c2 01             	add    edx,0x1
c001498d:	89 15 88 62 03 c0    	mov    DWORD PTR ds:0xc0036288,edx
c0014993:	e8 3f bf ff ff       	call   c00108d7 <Phys::freePage(unsigned long)>
c0014998:	0f 20 d8             	mov    eax,cr3
c001499b:	0f 22 d8             	mov    cr3,eax
c001499e:	8b 0d 88 62 03 c0    	mov    ecx,DWORD PTR ds:0xc0036288
c00149a4:	51                   	push   ecx
c00149a5:	55                   	push   ebp
c00149a6:	53                   	push   ebx
c00149a7:	68 b4 bd 02 c0       	push   0xc002bdb4
c00149ac:	e8 cb 25 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00149b1:	83 c4 18             	add    esp,0x18
c00149b4:	a1 84 62 03 c0       	mov    eax,ds:0xc0036284
c00149b9:	50                   	push   eax
c00149ba:	8d 50 01             	lea    edx,[eax+0x1]
c00149bd:	68 26 c0 02 c0       	push   0xc002c026
c00149c2:	89 15 84 62 03 c0    	mov    DWORD PTR ds:0xc0036284,edx
c00149c8:	e8 af 25 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00149cd:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00149d2:	c7 44 24 40 38 c0 02 c0 	mov    DWORD PTR [esp+0x40],0xc002c038
c00149da:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00149de:	83 c4 2c             	add    esp,0x2c
c00149e1:	5b                   	pop    ebx
c00149e2:	5e                   	pop    esi
c00149e3:	5f                   	pop    edi
c00149e4:	5d                   	pop    ebp
c00149e5:	e9 92 25 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c00149ea <VAS::canLockPage(unsigned long)>:
c00149ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00149ee:	50                   	push   eax
c00149ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00149f3:	52                   	push   edx
c00149f4:	e8 d3 f5 ff ff       	call   c0013fcc <VAS::getPageTableEntry(unsigned long)>
c00149f9:	59                   	pop    ecx
c00149fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00149fc:	5a                   	pop    edx
c00149fd:	c1 e8 0b             	shr    eax,0xb
c0014a00:	83 e0 01             	and    eax,0x1
c0014a03:	c3                   	ret    

c0014a04 <VAS::unlockPage(unsigned long)>:
c0014a04:	83 ec 0c             	sub    esp,0xc
c0014a07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a0b:	50                   	push   eax
c0014a0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014a10:	52                   	push   edx
c0014a11:	e8 b6 f5 ff ff       	call   c0013fcc <VAS::getPageTableEntry(unsigned long)>
c0014a16:	59                   	pop    ecx
c0014a17:	5a                   	pop    edx
c0014a18:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a1a:	f6 c6 08             	test   dh,0x8
c0014a1d:	75 09                	jne    c0014a28 <VAS::unlockPage(unsigned long)+0x24>
c0014a1f:	80 ce 08             	or     dh,0x8
c0014a22:	89 10                	mov    DWORD PTR [eax],edx
c0014a24:	83 c4 0c             	add    esp,0xc
c0014a27:	c3                   	ret    
c0014a28:	c7 44 24 10 e8 bd 02 c0 	mov    DWORD PTR [esp+0x10],0xc002bde8
c0014a30:	83 c4 0c             	add    esp,0xc
c0014a33:	e9 14 bd ff ff       	jmp    c001074c <KePanic(char const*)>

c0014a38 <VAS::canLockPages(unsigned long, int)>:
c0014a38:	55                   	push   ebp
c0014a39:	57                   	push   edi
c0014a3a:	56                   	push   esi
c0014a3b:	53                   	push   ebx
c0014a3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a40:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014a44:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a48:	85 ff                	test   edi,edi
c0014a4a:	7e 23                	jle    c0014a6f <VAS::canLockPages(unsigned long, int)+0x37>
c0014a4c:	31 f6                	xor    esi,esi
c0014a4e:	eb 0d                	jmp    c0014a5d <VAS::canLockPages(unsigned long, int)+0x25>
c0014a50:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014a56:	83 c6 01             	add    esi,0x1
c0014a59:	39 f7                	cmp    edi,esi
c0014a5b:	74 0d                	je     c0014a6a <VAS::canLockPages(unsigned long, int)+0x32>
c0014a5d:	53                   	push   ebx
c0014a5e:	55                   	push   ebp
c0014a5f:	e8 86 ff ff ff       	call   c00149ea <VAS::canLockPage(unsigned long)>
c0014a64:	5a                   	pop    edx
c0014a65:	84 c0                	test   al,al
c0014a67:	59                   	pop    ecx
c0014a68:	75 e6                	jne    c0014a50 <VAS::canLockPages(unsigned long, int)+0x18>
c0014a6a:	5b                   	pop    ebx
c0014a6b:	5e                   	pop    esi
c0014a6c:	5f                   	pop    edi
c0014a6d:	5d                   	pop    ebp
c0014a6e:	c3                   	ret    
c0014a6f:	b0 01                	mov    al,0x1
c0014a71:	eb f7                	jmp    c0014a6a <VAS::canLockPages(unsigned long, int)+0x32>
c0014a73:	90                   	nop

c0014a74 <VAS::unlockPages(unsigned long, int)>:
c0014a74:	55                   	push   ebp
c0014a75:	57                   	push   edi
c0014a76:	56                   	push   esi
c0014a77:	53                   	push   ebx
c0014a78:	83 ec 0c             	sub    esp,0xc
c0014a7b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014a7f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014a83:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014a87:	85 ff                	test   edi,edi
c0014a89:	7e 1c                	jle    c0014aa7 <VAS::unlockPages(unsigned long, int)+0x33>
c0014a8b:	31 f6                	xor    esi,esi
c0014a8d:	83 ec 08             	sub    esp,0x8
c0014a90:	83 c6 01             	add    esi,0x1
c0014a93:	53                   	push   ebx
c0014a94:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014a9a:	55                   	push   ebp
c0014a9b:	e8 64 ff ff ff       	call   c0014a04 <VAS::unlockPage(unsigned long)>
c0014aa0:	83 c4 10             	add    esp,0x10
c0014aa3:	39 f7                	cmp    edi,esi
c0014aa5:	75 e6                	jne    c0014a8d <VAS::unlockPages(unsigned long, int)+0x19>
c0014aa7:	83 c4 0c             	add    esp,0xc
c0014aaa:	5b                   	pop    ebx
c0014aab:	5e                   	pop    esi
c0014aac:	5f                   	pop    edi
c0014aad:	5d                   	pop    ebp
c0014aae:	c3                   	ret    
c0014aaf:	90                   	nop

c0014ab0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0014ab0:	55                   	push   ebp
c0014ab1:	57                   	push   edi
c0014ab2:	56                   	push   esi
c0014ab3:	53                   	push   ebx
c0014ab4:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0014aba:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0014ac1:	89 c5                	mov    ebp,eax
c0014ac3:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c0014ac9:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0014ace:	77 11                	ja     c0014ae1 <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0014ad0:	85 ed                	test   ebp,ebp
c0014ad2:	75 1d                	jne    c0014af1 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0014ad4:	31 c0                	xor    eax,eax
c0014ad6:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014adc:	5b                   	pop    ebx
c0014add:	5e                   	pop    esi
c0014ade:	5f                   	pop    edi
c0014adf:	5d                   	pop    ebp
c0014ae0:	c3                   	ret    
c0014ae1:	83 ec 0c             	sub    esp,0xc
c0014ae4:	68 4d c0 02 c0       	push   0xc002c04d
c0014ae9:	e8 5e bc ff ff       	call   c001074c <KePanic(char const*)>
c0014aee:	83 c4 10             	add    esp,0x10
c0014af1:	83 ec 08             	sub    esp,0x8
c0014af4:	55                   	push   ebp
c0014af5:	8b 9c 24 2c 10 00 00 	mov    ebx,DWORD PTR [esp+0x102c]
c0014afc:	53                   	push   ebx
c0014afd:	e8 ca f4 ff ff       	call   c0013fcc <VAS::getPageTableEntry(unsigned long)>
c0014b02:	83 c4 10             	add    esp,0x10
c0014b05:	89 c3                	mov    ebx,eax
c0014b07:	85 c0                	test   eax,eax
c0014b09:	74 c9                	je     c0014ad4 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c0014b0b:	8b 38                	mov    edi,DWORD PTR [eax]
c0014b0d:	f7 c7 00 02 00 00    	test   edi,0x200
c0014b13:	0f 85 b3 00 00 00    	jne    c0014bcc <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c0014b19:	89 f8                	mov    eax,edi
c0014b1b:	25 01 04 00 00       	and    eax,0x401
c0014b20:	3d 00 04 00 00       	cmp    eax,0x400
c0014b25:	75 ad                	jne    c0014ad4 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c0014b27:	e8 14 be ff ff       	call   c0010940 <Phys::allocatePage()>
c0014b2c:	c1 ef 0c             	shr    edi,0xc
c0014b2f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014b31:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0014b37:	09 c2                	or     edx,eax
c0014b39:	81 ca 01 08 00 00    	or     edx,0x801
c0014b3f:	89 13                	mov    DWORD PTR [ebx],edx
c0014b41:	8b 15 cc fe 02 c0    	mov    edx,DWORD PTR ds:0xc002fecc
c0014b47:	85 d2                	test   edx,edx
c0014b49:	7e 4d                	jle    c0014b98 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0014b4b:	89 ee                	mov    esi,ebp
c0014b4d:	31 db                	xor    ebx,ebx
c0014b4f:	83 ec 08             	sub    esp,0x8
c0014b52:	56                   	push   esi
c0014b53:	68 74 c0 02 c0       	push   0xc002c074
c0014b58:	e8 1f 24 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014b5d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b60:	e8 c6 f2 ff ff       	call   c0013e2b <Virt::swapIDToSector(unsigned long)>
c0014b65:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b68:	01 d8                	add    eax,ebx
c0014b6a:	6a 01                	push   0x1
c0014b6c:	31 d2                	xor    edx,edx
c0014b6e:	83 c3 01             	add    ebx,0x1
c0014b71:	52                   	push   edx
c0014b72:	81 c6 00 02 00 00    	add    esi,0x200
c0014b78:	50                   	push   eax
c0014b79:	0f be 05 d8 fe 02 c0 	movsx  eax,BYTE PTR ds:0xc002fed8
c0014b80:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c0014b87:	50                   	push   eax
c0014b88:	e8 11 69 ff ff       	call   c000b49e <LogicalDisk::read(unsigned long long, int, void*)>
c0014b8d:	83 c4 20             	add    esp,0x20
c0014b90:	39 1d cc fe 02 c0    	cmp    DWORD PTR ds:0xc002fecc,ebx
c0014b96:	7f b7                	jg     c0014b4f <VAS::tryLoadBackOffDisk(unsigned long)+0x9f>
c0014b98:	83 ec 04             	sub    esp,0x4
c0014b9b:	a1 88 62 03 c0       	mov    eax,ds:0xc0036288
c0014ba0:	83 e8 01             	sub    eax,0x1
c0014ba3:	50                   	push   eax
c0014ba4:	a3 88 62 03 c0       	mov    ds:0xc0036288,eax
c0014ba9:	55                   	push   ebp
c0014baa:	68 5f c0 02 c0       	push   0xc002c05f
c0014baf:	e8 c8 23 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014bb4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014bb7:	e8 4c f2 ff ff       	call   c0013e08 <Virt::freeSwapfilePage(unsigned long)>
c0014bbc:	0f 20 d8             	mov    eax,cr3
c0014bbf:	0f 22 d8             	mov    cr3,eax
c0014bc2:	b0 01                	mov    al,0x1
c0014bc4:	83 c4 10             	add    esp,0x10
c0014bc7:	e9 0a ff ff ff       	jmp    c0014ad6 <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c0014bcc:	83 ec 0c             	sub    esp,0xc
c0014bcf:	68 18 be 02 c0       	push   0xc002be18
c0014bd4:	e8 a3 23 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014bd9:	8b 33                	mov    esi,DWORD PTR [ebx]
c0014bdb:	e8 60 bd ff ff       	call   c0010940 <Phys::allocatePage()>
c0014be0:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0014be6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014be8:	83 c9 01             	or     ecx,0x1
c0014beb:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014bed:	0f 20 da             	mov    edx,cr3
c0014bf0:	0f 22 da             	mov    cr3,edx
c0014bf3:	ba 00 10 00 00       	mov    edx,0x1000
c0014bf8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014bfc:	89 d1                	mov    ecx,edx
c0014bfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c00:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c02:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0014c08:	09 c8                	or     eax,ecx
c0014c0a:	83 c8 02             	or     eax,0x2
c0014c0d:	89 03                	mov    DWORD PTR [ebx],eax
c0014c0f:	0f 20 d8             	mov    eax,cr3
c0014c12:	0f 22 d8             	mov    cr3,eax
c0014c15:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014c19:	89 ef                	mov    edi,ebp
c0014c1b:	89 d1                	mov    ecx,edx
c0014c1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c1f:	b0 01                	mov    al,0x1
c0014c21:	83 c4 10             	add    esp,0x10
c0014c24:	e9 ad fe ff ff       	jmp    c0014ad6 <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c0014c29:	90                   	nop

c0014c2a <VAS::lockPage(unsigned long)>:
c0014c2a:	56                   	push   esi
c0014c2b:	53                   	push   ebx
c0014c2c:	83 ec 04             	sub    esp,0x4
c0014c2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c37:	50                   	push   eax
c0014c38:	56                   	push   esi
c0014c39:	e8 8e f3 ff ff       	call   c0013fcc <VAS::getPageTableEntry(unsigned long)>
c0014c3e:	5a                   	pop    edx
c0014c3f:	89 c3                	mov    ebx,eax
c0014c41:	59                   	pop    ecx
c0014c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c44:	a8 01                	test   al,0x1
c0014c46:	74 10                	je     c0014c58 <VAS::lockPage(unsigned long)+0x2e>
c0014c48:	f6 c4 08             	test   ah,0x8
c0014c4b:	74 28                	je     c0014c75 <VAS::lockPage(unsigned long)+0x4b>
c0014c4d:	80 e4 f7             	and    ah,0xf7
c0014c50:	89 03                	mov    DWORD PTR [ebx],eax
c0014c52:	83 c4 04             	add    esp,0x4
c0014c55:	5b                   	pop    ebx
c0014c56:	5e                   	pop    esi
c0014c57:	c3                   	ret    
c0014c58:	83 ec 08             	sub    esp,0x8
c0014c5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c60:	50                   	push   eax
c0014c61:	56                   	push   esi
c0014c62:	e8 49 fe ff ff       	call   c0014ab0 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014c67:	83 c4 10             	add    esp,0x10
c0014c6a:	84 c0                	test   al,al
c0014c6c:	74 19                	je     c0014c87 <VAS::lockPage(unsigned long)+0x5d>
c0014c6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c70:	f6 c4 08             	test   ah,0x8
c0014c73:	75 d8                	jne    c0014c4d <VAS::lockPage(unsigned long)+0x23>
c0014c75:	c7 44 24 10 e8 bd 02 c0 	mov    DWORD PTR [esp+0x10],0xc002bde8
c0014c7d:	83 c4 04             	add    esp,0x4
c0014c80:	5b                   	pop    ebx
c0014c81:	5e                   	pop    esi
c0014c82:	e9 c5 ba ff ff       	jmp    c001074c <KePanic(char const*)>
c0014c87:	83 ec 0c             	sub    esp,0xc
c0014c8a:	68 38 be 02 c0       	push   0xc002be38
c0014c8f:	e8 b8 ba ff ff       	call   c001074c <KePanic(char const*)>
c0014c94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c96:	83 c4 10             	add    esp,0x10
c0014c99:	eb ad                	jmp    c0014c48 <VAS::lockPage(unsigned long)+0x1e>
c0014c9b:	90                   	nop

c0014c9c <VAS::lockPages(unsigned long, int)>:
c0014c9c:	55                   	push   ebp
c0014c9d:	57                   	push   edi
c0014c9e:	56                   	push   esi
c0014c9f:	53                   	push   ebx
c0014ca0:	83 ec 0c             	sub    esp,0xc
c0014ca3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014ca7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014cab:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014caf:	85 ff                	test   edi,edi
c0014cb1:	7e 1c                	jle    c0014ccf <VAS::lockPages(unsigned long, int)+0x33>
c0014cb3:	31 f6                	xor    esi,esi
c0014cb5:	83 ec 08             	sub    esp,0x8
c0014cb8:	83 c6 01             	add    esi,0x1
c0014cbb:	53                   	push   ebx
c0014cbc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014cc2:	55                   	push   ebp
c0014cc3:	e8 62 ff ff ff       	call   c0014c2a <VAS::lockPage(unsigned long)>
c0014cc8:	83 c4 10             	add    esp,0x10
c0014ccb:	39 f7                	cmp    edi,esi
c0014ccd:	75 e6                	jne    c0014cb5 <VAS::lockPages(unsigned long, int)+0x19>
c0014ccf:	83 c4 0c             	add    esp,0xc
c0014cd2:	5b                   	pop    ebx
c0014cd3:	5e                   	pop    esi
c0014cd4:	5f                   	pop    edi
c0014cd5:	5d                   	pop    ebp
c0014cd6:	c3                   	ret    
c0014cd7:	90                   	nop

c0014cd8 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014cd8:	55                   	push   ebp
c0014cd9:	57                   	push   edi
c0014cda:	56                   	push   esi
c0014cdb:	53                   	push   ebx
c0014cdc:	83 ec 28             	sub    esp,0x28
c0014cdf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0014ce3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ce7:	50                   	push   eax
c0014ce8:	e8 f6 ef ff ff       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c0014ced:	83 c4 0c             	add    esp,0xc
c0014cf0:	89 c5                	mov    ebp,eax
c0014cf2:	6a 07                	push   0x7
c0014cf4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014cf8:	52                   	push   edx
c0014cf9:	56                   	push   esi
c0014cfa:	e8 cb f7 ff ff       	call   c00144ca <VAS::allocatePages(int, int)>
c0014cff:	83 c4 10             	add    esp,0x10
c0014d02:	89 c7                	mov    edi,eax
c0014d04:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014d08:	85 c9                	test   ecx,ecx
c0014d0a:	74 2f                	je     c0014d3b <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014d0c:	31 db                	xor    ebx,ebx
c0014d0e:	e8 2d bc ff ff       	call   c0010940 <Phys::allocatePage()>
c0014d13:	83 c3 01             	add    ebx,0x1
c0014d16:	6a 03                	push   0x3
c0014d18:	55                   	push   ebp
c0014d19:	50                   	push   eax
c0014d1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d1e:	56                   	push   esi
c0014d1f:	e8 a2 f6 ff ff       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014d24:	6a 07                	push   0x7
c0014d26:	57                   	push   edi
c0014d27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d2b:	50                   	push   eax
c0014d2c:	56                   	push   esi
c0014d2d:	e8 94 f6 ff ff       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014d32:	83 c4 20             	add    esp,0x20
c0014d35:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0014d39:	75 d3                	jne    c0014d0e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014d3b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014d3f:	89 28                	mov    DWORD PTR [eax],ebp
c0014d41:	83 c4 1c             	add    esp,0x1c
c0014d44:	89 f8                	mov    eax,edi
c0014d46:	5b                   	pop    ebx
c0014d47:	5e                   	pop    esi
c0014d48:	5f                   	pop    edi
c0014d49:	5d                   	pop    ebp
c0014d4a:	c3                   	ret    
c0014d4b:	90                   	nop

c0014d4c <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014d4c:	53                   	push   ebx
c0014d4d:	83 ec 14             	sub    esp,0x14
c0014d50:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014d54:	68 68 be 02 c0       	push   0xc002be68
c0014d59:	e8 1e 22 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014d5e:	c7 04 24 c8 be 02 c0 	mov    DWORD PTR [esp],0xc002bec8
c0014d65:	e8 12 22 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014d6a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014d6e:	83 c4 18             	add    esp,0x18
c0014d71:	5b                   	pop    ebx
c0014d72:	e9 74 f2 ff ff       	jmp    c0013feb <Virt::freeKernelVirtualPages(unsigned long)>
c0014d77:	90                   	nop

c0014d78 <VAS::scanForEviction()>:
c0014d78:	57                   	push   edi
c0014d79:	56                   	push   esi
c0014d7a:	31 f6                	xor    esi,esi
c0014d7c:	53                   	push   ebx
c0014d7d:	83 ec 18             	sub    esp,0x18
c0014d80:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014d84:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0014d89:	50                   	push   eax
c0014d8a:	68 44 bf 02 c0       	push   0xc002bf44
c0014d8f:	e8 e8 21 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014d94:	c7 04 24 8d c0 02 c0 	mov    DWORD PTR [esp],0xc002c08d
c0014d9b:	e8 dc 21 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014da0:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014da3:	83 c4 10             	add    esp,0x10
c0014da6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014dac:	75 0e                	jne    c0014dbc <VAS::scanForEviction()+0x44>
c0014dae:	89 da                	mov    edx,ebx
c0014db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014db3:	c1 ea 16             	shr    edx,0x16
c0014db6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014dba:	74 5b                	je     c0014e17 <VAS::scanForEviction()+0x9f>
c0014dbc:	83 ec 08             	sub    esp,0x8
c0014dbf:	53                   	push   ebx
c0014dc0:	57                   	push   edi
c0014dc1:	e8 06 f2 ff ff       	call   c0013fcc <VAS::getPageTableEntry(unsigned long)>
c0014dc6:	83 c4 10             	add    esp,0x10
c0014dc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0014dcb:	89 d1                	mov    ecx,edx
c0014dcd:	c1 e9 0c             	shr    ecx,0xc
c0014dd0:	74 10                	je     c0014de2 <VAS::scanForEviction()+0x6a>
c0014dd2:	89 d1                	mov    ecx,edx
c0014dd4:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0014dda:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0014de0:	74 40                	je     c0014e22 <VAS::scanForEviction()+0xaa>
c0014de2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014de8:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014dee:	76 2d                	jbe    c0014e1d <VAS::scanForEviction()+0xa5>
c0014df0:	83 c6 01             	add    esi,0x1
c0014df3:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014dfa:	83 fe 03             	cmp    esi,0x3
c0014dfd:	74 37                	je     c0014e36 <VAS::scanForEviction()+0xbe>
c0014dff:	31 db                	xor    ebx,ebx
c0014e01:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014e07:	75 b3                	jne    c0014dbc <VAS::scanForEviction()+0x44>
c0014e09:	89 da                	mov    edx,ebx
c0014e0b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014e0e:	c1 ea 16             	shr    edx,0x16
c0014e11:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014e15:	75 a5                	jne    c0014dbc <VAS::scanForEviction()+0x44>
c0014e17:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014e1d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014e20:	eb 84                	jmp    c0014da6 <VAS::scanForEviction()+0x2e>
c0014e22:	f6 c2 01             	test   dl,0x1
c0014e25:	74 bb                	je     c0014de2 <VAS::scanForEviction()+0x6a>
c0014e27:	f6 c2 20             	test   dl,0x20
c0014e2a:	74 13                	je     c0014e3f <VAS::scanForEviction()+0xc7>
c0014e2c:	83 e2 df             	and    edx,0xffffffdf
c0014e2f:	89 10                	mov    DWORD PTR [eax],edx
c0014e31:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014e34:	eb ac                	jmp    c0014de2 <VAS::scanForEviction()+0x6a>
c0014e36:	83 c4 10             	add    esp,0x10
c0014e39:	31 c0                	xor    eax,eax
c0014e3b:	5b                   	pop    ebx
c0014e3c:	5e                   	pop    esi
c0014e3d:	5f                   	pop    edi
c0014e3e:	c3                   	ret    
c0014e3f:	83 ec 08             	sub    esp,0x8
c0014e42:	89 d0                	mov    eax,edx
c0014e44:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014e49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e4d:	53                   	push   ebx
c0014e4e:	68 a9 c0 02 c0       	push   0xc002c0a9
c0014e53:	e8 24 21 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014e58:	58                   	pop    eax
c0014e59:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014e5c:	5a                   	pop    edx
c0014e5d:	51                   	push   ecx
c0014e5e:	57                   	push   edi
c0014e5f:	e8 82 fa ff ff       	call   c00148e6 <VAS::evict(unsigned long)>
c0014e64:	5b                   	pop    ebx
c0014e65:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014e68:	5e                   	pop    esi
c0014e69:	50                   	push   eax
c0014e6a:	68 bd c0 02 c0       	push   0xc002c0bd
c0014e6f:	e8 08 21 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014e74:	58                   	pop    eax
c0014e75:	5a                   	pop    edx
c0014e76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e7a:	50                   	push   eax
c0014e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e7f:	68 d0 c0 02 c0       	push   0xc002c0d0
c0014e84:	e8 f3 20 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014e89:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014e8c:	81 c1 00 10 00 00    	add    ecx,0x1000
c0014e92:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0014e95:	8b 3d 30 63 03 c0    	mov    edi,DWORD PTR ds:0xc0036330
c0014e9b:	5b                   	pop    ebx
c0014e9c:	5e                   	pop    esi
c0014e9d:	57                   	push   edi
c0014e9e:	68 64 bf 02 c0       	push   0xc002bf64
c0014ea3:	e8 d4 20 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014ea8:	83 c4 10             	add    esp,0x10
c0014eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014eaf:	83 c4 10             	add    esp,0x10
c0014eb2:	5b                   	pop    ebx
c0014eb3:	5e                   	pop    esi
c0014eb4:	5f                   	pop    edi
c0014eb5:	c3                   	ret    

c0014eb6 <mapVASFirstTime>:
c0014eb6:	55                   	push   ebp
c0014eb7:	57                   	push   edi
c0014eb8:	56                   	push   esi
c0014eb9:	53                   	push   ebx
c0014eba:	83 ec 0c             	sub    esp,0xc
c0014ebd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ec2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014ec5:	83 fa 01             	cmp    edx,0x1
c0014ec8:	0f 84 cb 00 00 00    	je     c0014f99 <mapVASFirstTime+0xe3>
c0014ece:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014ed1:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014ed4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014ed9:	c1 e5 15             	shl    ebp,0x15
c0014edc:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014ee1:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014ee7:	29 eb                	sub    ebx,ebp
c0014ee9:	29 ef                	sub    edi,ebp
c0014eeb:	e8 50 ba ff ff       	call   c0010940 <Phys::allocatePage()>
c0014ef0:	83 ec 0c             	sub    esp,0xc
c0014ef3:	68 03 04 00 00       	push   0x403
c0014ef8:	6a 01                	push   0x1
c0014efa:	53                   	push   ebx
c0014efb:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014f01:	50                   	push   eax
c0014f02:	56                   	push   esi
c0014f03:	e8 a8 f6 ff ff       	call   c00145b0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014f08:	83 c4 20             	add    esp,0x20
c0014f0b:	39 fb                	cmp    ebx,edi
c0014f0d:	75 dc                	jne    c0014eeb <mapVASFirstTime+0x35>
c0014f0f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014f14:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0014f19:	29 eb                	sub    ebx,ebp
c0014f1b:	29 ef                	sub    edi,ebp
c0014f1d:	e8 1e ba ff ff       	call   c0010940 <Phys::allocatePage()>
c0014f22:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014f26:	83 fa 01             	cmp    edx,0x1
c0014f29:	19 d2                	sbb    edx,edx
c0014f2b:	83 ec 0c             	sub    esp,0xc
c0014f2e:	83 e2 04             	and    edx,0x4
c0014f31:	81 c2 03 04 00 00    	add    edx,0x403
c0014f37:	52                   	push   edx
c0014f38:	6a 01                	push   0x1
c0014f3a:	53                   	push   ebx
c0014f3b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014f41:	50                   	push   eax
c0014f42:	56                   	push   esi
c0014f43:	e8 68 f6 ff ff       	call   c00145b0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014f48:	83 c4 20             	add    esp,0x20
c0014f4b:	39 df                	cmp    edi,ebx
c0014f4d:	75 ce                	jne    c0014f1d <mapVASFirstTime+0x67>
c0014f4f:	83 ec 0c             	sub    esp,0xc
c0014f52:	bb 7c 20 03 c0       	mov    ebx,0xc003207c
c0014f57:	6a 04                	push   0x4
c0014f59:	81 eb 00 10 03 c0    	sub    ebx,0xc0031000
c0014f5f:	6a ff                	push   0xffffffff
c0014f61:	c1 eb 0c             	shr    ebx,0xc
c0014f64:	53                   	push   ebx
c0014f65:	68 00 10 03 c0       	push   0xc0031000
c0014f6a:	56                   	push   esi
c0014f6b:	e8 f6 f1 ff ff       	call   c0014166 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014f70:	83 c4 14             	add    esp,0x14
c0014f73:	a1 90 62 03 c0       	mov    eax,ds:0xc0036290
c0014f78:	6a 04                	push   0x4
c0014f7a:	6a ff                	push   0xffffffff
c0014f7c:	53                   	push   ebx
c0014f7d:	68 00 10 03 c0       	push   0xc0031000
c0014f82:	50                   	push   eax
c0014f83:	e8 de f1 ff ff       	call   c0014166 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014f88:	0f 20 d8             	mov    eax,cr3
c0014f8b:	0f 22 d8             	mov    cr3,eax
c0014f8e:	83 c4 20             	add    esp,0x20
c0014f91:	83 c4 0c             	add    esp,0xc
c0014f94:	5b                   	pop    ebx
c0014f95:	5e                   	pop    esi
c0014f96:	5f                   	pop    edi
c0014f97:	5d                   	pop    ebp
c0014f98:	c3                   	ret    
c0014f99:	83 ec 0c             	sub    esp,0xc
c0014f9c:	68 dd c0 02 c0       	push   0xc002c0dd
c0014fa1:	e8 d6 1f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014fa6:	83 c4 10             	add    esp,0x10
c0014fa9:	83 c4 0c             	add    esp,0xc
c0014fac:	5b                   	pop    ebx
c0014fad:	5e                   	pop    esi
c0014fae:	5f                   	pop    edi
c0014faf:	5d                   	pop    ebp
c0014fb0:	c3                   	ret    

c0014fb1 <SysAlarm(regs*)>:
c0014fb1:	53                   	push   ebx
c0014fb2:	83 ec 10             	sub    esp,0x10
c0014fb5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014fb9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014fbc:	68 f6 c0 02 c0       	push   0xc002c0f6
c0014fc1:	e8 b6 1f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014fc6:	83 c4 0c             	add    esp,0xc
c0014fc9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014fcc:	31 d2                	xor    edx,edx
c0014fce:	52                   	push   edx
c0014fcf:	50                   	push   eax
c0014fd0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014fd6:	e8 ad 09 00 00       	call   c0015988 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014fdb:	83 c4 18             	add    esp,0x18
c0014fde:	5b                   	pop    ebx
c0014fdf:	c3                   	ret    

c0014fe0 <SysEject(regs*)>:
c0014fe0:	83 ec 0c             	sub    esp,0xc
c0014fe3:	83 ca ff             	or     edx,0xffffffff
c0014fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fea:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014fed:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014ff2:	83 e9 41             	sub    ecx,0x41
c0014ff5:	83 f9 19             	cmp    ecx,0x19
c0014ff8:	77 18                	ja     c0015012 <SysEject(regs*)+0x32>
c0014ffa:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c0015001:	85 c9                	test   ecx,ecx
c0015003:	74 0d                	je     c0015012 <SysEject(regs*)+0x32>
c0015005:	83 ec 0c             	sub    esp,0xc
c0015008:	51                   	push   ecx
c0015009:	e8 26 64 ff ff       	call   c000b434 <LogicalDisk::eject()>
c001500e:	83 c4 10             	add    esp,0x10
c0015011:	99                   	cdq    
c0015012:	83 c4 0c             	add    esp,0xc
c0015015:	c3                   	ret    

c0015016 <SysExit(regs*)>:
c0015016:	83 ec 18             	sub    esp,0x18
c0015019:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001501d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015020:	e8 bf 2a 00 00       	call   c0017ae4 <KeTerminateCurrentThread(int)>
c0015025:	83 c8 ff             	or     eax,0xffffffff
c0015028:	83 c4 1c             	add    esp,0x1c
c001502b:	89 c2                	mov    edx,eax
c001502d:	c3                   	ret    

c001502e <SysGetCwd(regs*)>:
c001502e:	83 ec 10             	sub    esp,0x10
c0015031:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015035:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015038:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001503b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015040:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015043:	e8 00 38 ff ff       	call   c0008848 <Fs::getcwd(Process*, char*, int)>
c0015048:	83 c4 1c             	add    esp,0x1c
c001504b:	99                   	cdq    
c001504c:	c3                   	ret    

c001504d <SysGetPID(regs*)>:
c001504d:	83 ec 14             	sub    esp,0x14
c0015050:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015055:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015058:	ff 30                	push   DWORD PTR [eax]
c001505a:	68 0b c1 02 c0       	push   0xc002c10b
c001505f:	e8 18 1f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015064:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015069:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001506c:	8b 00                	mov    eax,DWORD PTR [eax]
c001506e:	83 c4 1c             	add    esp,0x1c
c0015071:	99                   	cdq    
c0015072:	c3                   	ret    

c0015073 <SysGetRAMData(regs*)>:
c0015073:	8b 0d 7c 61 03 c0    	mov    ecx,DWORD PTR ds:0xc003617c
c0015079:	a1 88 62 03 c0       	mov    eax,ds:0xc0036288
c001507e:	03 05 78 61 03 c0    	add    eax,DWORD PTR ds:0xc0036178
c0015084:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c001508a:	99                   	cdq    
c001508b:	f7 f9                	idiv   ecx
c001508d:	c1 e0 18             	shl    eax,0x18
c0015090:	09 c8                	or     eax,ecx
c0015092:	99                   	cdq    
c0015093:	c3                   	ret    

c0015094 <SysGetVGAPtr(regs*)>:
c0015094:	55                   	push   ebp
c0015095:	57                   	push   edi
c0015096:	56                   	push   esi
c0015097:	53                   	push   ebx
c0015098:	83 ec 1c             	sub    esp,0x1c
c001509b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001509f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00150a2:	83 f8 ff             	cmp    eax,0xffffffff
c00150a5:	74 23                	je     c00150ca <SysGetVGAPtr(regs*)+0x36>
c00150a7:	83 ec 0c             	sub    esp,0xc
c00150aa:	50                   	push   eax
c00150ab:	e8 e0 24 00 00       	call   c0017590 <KeProcessFromPID(int)>
c00150b0:	31 d2                	xor    edx,edx
c00150b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00150b6:	83 c4 10             	add    esp,0x10
c00150b9:	b8 01 00 00 00       	mov    eax,0x1
c00150be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00150c3:	75 11                	jne    c00150d6 <SysGetVGAPtr(regs*)+0x42>
c00150c5:	e9 80 00 00 00       	jmp    c001514a <SysGetVGAPtr(regs*)+0xb6>
c00150ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00150da:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00150de:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c00150e4:	74 0c                	je     c00150f2 <SysGetVGAPtr(regs*)+0x5e>
c00150e6:	83 ec 0c             	sub    esp,0xc
c00150e9:	55                   	push   ebp
c00150ea:	e8 7c dc ff ff       	call   c0012d6b <setActiveTerminal(VgaText*)>
c00150ef:	83 c4 10             	add    esp,0x10
c00150f2:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00150f5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00150f8:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00150fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00150ff:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0015102:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015105:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c001510b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001510e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015111:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c0015117:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001511b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001511e:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0015125:	c1 e8 07             	shr    eax,0x7
c0015128:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c001512e:	50                   	push   eax
c001512f:	50                   	push   eax
c0015130:	68 1a c1 02 c0       	push   0xc002c11a
c0015135:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015138:	05 ac 0f 00 00       	add    eax,0xfac
c001513d:	50                   	push   eax
c001513e:	e8 fd b4 fe ff       	call   c0000640 <strcpy>
c0015143:	83 c4 10             	add    esp,0x10
c0015146:	31 c0                	xor    eax,eax
c0015148:	31 d2                	xor    edx,edx
c001514a:	83 c4 1c             	add    esp,0x1c
c001514d:	5b                   	pop    ebx
c001514e:	5e                   	pop    esi
c001514f:	5f                   	pop    edi
c0015150:	5d                   	pop    ebp
c0015151:	c3                   	ret    
c0015152:	66 90                	xchg   ax,ax

c0015154 <SysKill(regs*)>:
c0015154:	53                   	push   ebx
c0015155:	83 ec 08             	sub    esp,0x8
c0015158:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001515c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0015160:	75 16                	jne    c0015178 <SysKill(regs*)+0x24>
c0015162:	83 ec 0c             	sub    esp,0xc
c0015165:	68 24 c1 02 c0       	push   0xc002c124
c001516a:	e8 dd b5 ff ff       	call   c001074c <KePanic(char const*)>
c001516f:	83 c4 10             	add    esp,0x10
c0015172:	e9 89 00 00 00       	jmp    c0015200 <SysKill(regs*)+0xac>
c0015177:	90                   	nop
c0015178:	83 ec 0c             	sub    esp,0xc
c001517b:	68 4c 63 03 c0       	push   0xc003634c
c0015180:	e8 87 3e 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015185:	8d 76 00             	lea    esi,[esi+0x0]
c0015188:	83 c4 10             	add    esp,0x10
c001518b:	85 c0                	test   eax,eax
c001518d:	74 19                	je     c00151a8 <SysKill(regs*)+0x54>
c001518f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0015192:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015195:	39 0a                	cmp    DWORD PTR [edx],ecx
c0015197:	74 33                	je     c00151cc <SysKill(regs*)+0x78>
c0015199:	52                   	push   edx
c001519a:	52                   	push   edx
c001519b:	50                   	push   eax
c001519c:	68 4c 63 03 c0       	push   0xc003634c
c00151a1:	e8 72 43 01 00       	call   c0029518 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00151a6:	eb e0                	jmp    c0015188 <SysKill(regs*)+0x34>
c00151a8:	83 ec 0c             	sub    esp,0xc
c00151ab:	68 40 63 03 c0       	push   0xc0036340
c00151b0:	e8 57 3e 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00151b5:	8d 76 00             	lea    esi,[esi+0x0]
c00151b8:	83 c4 10             	add    esp,0x10
c00151bb:	85 c0                	test   eax,eax
c00151bd:	74 41                	je     c0015200 <SysKill(regs*)+0xac>
c00151bf:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00151c2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00151c5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00151c7:	75 27                	jne    c00151f0 <SysKill(regs*)+0x9c>
c00151c9:	8d 76 00             	lea    esi,[esi+0x0]
c00151cc:	51                   	push   ecx
c00151cd:	51                   	push   ecx
c00151ce:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00151d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151d9:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00151df:	e8 83 c7 ff ff       	call   c0011967 <KeRaiseSignal(SigHandlerBlock*, int)>
c00151e4:	83 c4 10             	add    esp,0x10
c00151e7:	31 c0                	xor    eax,eax
c00151e9:	31 d2                	xor    edx,edx
c00151eb:	eb 1b                	jmp    c0015208 <SysKill(regs*)+0xb4>
c00151ed:	8d 76 00             	lea    esi,[esi+0x0]
c00151f0:	52                   	push   edx
c00151f1:	52                   	push   edx
c00151f2:	50                   	push   eax
c00151f3:	68 40 63 03 c0       	push   0xc0036340
c00151f8:	e8 1b 43 01 00       	call   c0029518 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00151fd:	eb b9                	jmp    c00151b8 <SysKill(regs*)+0x64>
c00151ff:	90                   	nop
c0015200:	83 c8 ff             	or     eax,0xffffffff
c0015203:	89 c2                	mov    edx,eax
c0015205:	8d 76 00             	lea    esi,[esi+0x0]
c0015208:	83 c4 08             	add    esp,0x8
c001520b:	5b                   	pop    ebx
c001520c:	c3                   	ret    

c001520d <SysLoadDLL(regs*)>:
c001520d:	56                   	push   esi
c001520e:	31 d2                	xor    edx,edx
c0015210:	53                   	push   ebx
c0015211:	b8 01 00 00 00       	mov    eax,0x1
c0015216:	53                   	push   ebx
c0015217:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001521b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001521f:	0f 84 82 00 00 00    	je     c00152a7 <SysLoadDLL(regs*)+0x9a>
c0015225:	83 ec 0c             	sub    esp,0xc
c0015228:	68 14 01 00 00       	push   0x114
c001522d:	e8 c5 b0 ff ff       	call   c00102f7 <malloc>
c0015232:	83 c4 0c             	add    esp,0xc
c0015235:	89 c3                	mov    ebx,eax
c0015237:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001523c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001523f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015242:	53                   	push   ebx
c0015243:	e8 6c 39 ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c0015248:	83 c4 10             	add    esp,0x10
c001524b:	31 d2                	xor    edx,edx
c001524d:	b8 02 00 00 00       	mov    eax,0x2
c0015252:	85 db                	test   ebx,ebx
c0015254:	74 51                	je     c00152a7 <SysLoadDLL(regs*)+0x9a>
c0015256:	83 ec 0c             	sub    esp,0xc
c0015259:	53                   	push   ebx
c001525a:	e8 37 3c ff ff       	call   c0008e96 <File::exists()>
c001525f:	83 c4 10             	add    esp,0x10
c0015262:	84 c0                	test   al,al
c0015264:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015266:	75 11                	jne    c0015279 <SysLoadDLL(regs*)+0x6c>
c0015268:	83 ec 0c             	sub    esp,0xc
c001526b:	53                   	push   ebx
c001526c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001526f:	83 c4 10             	add    esp,0x10
c0015272:	b8 03 00 00 00       	mov    eax,0x3
c0015277:	eb 2c                	jmp    c00152a5 <SysLoadDLL(regs*)+0x98>
c0015279:	83 ec 0c             	sub    esp,0xc
c001527c:	53                   	push   ebx
c001527d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015280:	83 c4 0c             	add    esp,0xc
c0015283:	6a 00                	push   0x0
c0015285:	ff 35 08 61 03 c0    	push   DWORD PTR ds:0xc0036108
c001528b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001528e:	e8 b5 16 00 00       	call   c0016948 <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0015293:	83 c4 10             	add    esp,0x10
c0015296:	88 c1                	mov    cl,al
c0015298:	31 d2                	xor    edx,edx
c001529a:	31 c0                	xor    eax,eax
c001529c:	84 c9                	test   cl,cl
c001529e:	75 07                	jne    c00152a7 <SysLoadDLL(regs*)+0x9a>
c00152a0:	b8 04 00 00 00       	mov    eax,0x4
c00152a5:	31 d2                	xor    edx,edx
c00152a7:	59                   	pop    ecx
c00152a8:	5b                   	pop    ebx
c00152a9:	5e                   	pop    esi
c00152aa:	c3                   	ret    

c00152ab <SysPause(regs*)>:
c00152ab:	83 ec 18             	sub    esp,0x18
c00152ae:	6a 08                	push   0x8
c00152b0:	e8 ef 20 00 00       	call   c00173a4 <blockTask(TaskState)>
c00152b5:	31 c0                	xor    eax,eax
c00152b7:	31 d2                	xor    edx,edx
c00152b9:	83 c4 1c             	add    esp,0x1c
c00152bc:	c3                   	ret    

c00152bd <SysPthreadCreate(regs*)>:
c00152bd:	83 ec 18             	sub    esp,0x18
c00152c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00152c8:	e8 af 1e 00 00       	call   c001717c <Process::createUserThread()>
c00152cd:	31 c0                	xor    eax,eax
c00152cf:	31 d2                	xor    edx,edx
c00152d1:	83 c4 1c             	add    esp,0x1c
c00152d4:	c3                   	ret    

c00152d5 <SysPthreadGetTID(regs*)>:
c00152d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152dd:	99                   	cdq    
c00152de:	c3                   	ret    

c00152df <SysInternalPthreadGetContext(regs*)>:
c00152df:	31 c0                	xor    eax,eax
c00152e1:	31 d2                	xor    edx,edx
c00152e3:	c3                   	ret    

c00152e4 <SysInternalPthreadGetStartLocation(regs*)>:
c00152e4:	31 c0                	xor    eax,eax
c00152e6:	31 d2                	xor    edx,edx
c00152e8:	c3                   	ret    

c00152e9 <SysPthreadJoin(regs*)>:
c00152e9:	31 c0                	xor    eax,eax
c00152eb:	31 d2                	xor    edx,edx
c00152ed:	c3                   	ret    

c00152ee <SysPthreadExit(regs*)>:
c00152ee:	83 ec 18             	sub    esp,0x18
c00152f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152f5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00152f8:	e8 e7 27 00 00       	call   c0017ae4 <KeTerminateCurrentThread(int)>
c00152fd:	83 c8 ff             	or     eax,0xffffffff
c0015300:	83 c4 1c             	add    esp,0x1c
c0015303:	89 c2                	mov    edx,eax
c0015305:	c3                   	ret    

c0015306 <SysRead(regs*)>:
c0015306:	57                   	push   edi
c0015307:	56                   	push   esi
c0015308:	53                   	push   ebx
c0015309:	83 ec 10             	sub    esp,0x10
c001530c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015310:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015313:	83 f8 02             	cmp    eax,0x2
c0015316:	77 10                	ja     c0015328 <SysRead(regs*)+0x22>
c0015318:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001531d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015320:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0015326:	eb 0e                	jmp    c0015336 <SysRead(regs*)+0x30>
c0015328:	83 ec 0c             	sub    esp,0xc
c001532b:	50                   	push   eax
c001532c:	e8 54 e8 ff ff       	call   c0013b85 <KeGetFileFromDescriptor(int)>
c0015331:	83 c4 10             	add    esp,0x10
c0015334:	89 c1                	mov    ecx,eax
c0015336:	83 c8 ff             	or     eax,0xffffffff
c0015339:	85 c9                	test   ecx,ecx
c001533b:	89 c2                	mov    edx,eax
c001533d:	74 28                	je     c0015367 <SysRead(regs*)+0x61>
c001533f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015347:	31 ff                	xor    edi,edi
c0015349:	83 ec 0c             	sub    esp,0xc
c001534c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001534e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015352:	52                   	push   edx
c0015353:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015356:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015359:	57                   	push   edi
c001535a:	56                   	push   esi
c001535b:	51                   	push   ecx
c001535c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001535f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015363:	83 c4 20             	add    esp,0x20
c0015366:	99                   	cdq    
c0015367:	83 c4 10             	add    esp,0x10
c001536a:	5b                   	pop    ebx
c001536b:	5e                   	pop    esi
c001536c:	5f                   	pop    edi
c001536d:	c3                   	ret    

c001536e <SysRegisterSignal(regs*)>:
c001536e:	83 ec 18             	sub    esp,0x18
c0015371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015375:	6a 00                	push   0x0
c0015377:	6a 00                	push   0x0
c0015379:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001537c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001537f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015384:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015387:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001538d:	e8 9f c5 ff ff       	call   c0011931 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0015392:	83 c4 2c             	add    esp,0x2c
c0015395:	99                   	cdq    
c0015396:	c3                   	ret    

c0015397 <SysRegistryGetTypeFromPath(regs*)>:
c0015397:	53                   	push   ebx
c0015398:	81 ec 40 01 00 00    	sub    esp,0x140
c001539e:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00153a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00153a8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00153ab:	e8 a8 96 ff ff       	call   c000ea58 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00153b0:	83 c4 10             	add    esp,0x10
c00153b3:	89 c1                	mov    ecx,eax
c00153b5:	85 c0                	test   eax,eax
c00153b7:	74 15                	je     c00153ce <SysRegistryGetTypeFromPath(regs*)+0x37>
c00153b9:	50                   	push   eax
c00153ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c00153be:	50                   	push   eax
c00153bf:	51                   	push   ecx
c00153c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00153c3:	e8 74 92 ff ff       	call   c000e63c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00153c8:	83 c4 10             	add    esp,0x10
c00153cb:	99                   	cdq    
c00153cc:	eb 05                	jmp    c00153d3 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c00153ce:	83 c8 ff             	or     eax,0xffffffff
c00153d1:	89 c2                	mov    edx,eax
c00153d3:	81 c4 38 01 00 00    	add    esp,0x138
c00153d9:	5b                   	pop    ebx
c00153da:	c3                   	ret    

c00153db <SysRegistryReadExtent(regs*)>:
c00153db:	83 ec 1c             	sub    esp,0x1c
c00153de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00153e2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00153e5:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00153e8:	85 c0                	test   eax,eax
c00153ea:	79 1f                	jns    c001540b <SysRegistryReadExtent(regs*)+0x30>
c00153ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00153f1:	52                   	push   edx
c00153f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00153f6:	52                   	push   edx
c00153f7:	50                   	push   eax
c00153f8:	51                   	push   ecx
c00153f9:	e8 30 91 ff ff       	call   c000e52e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00153fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015402:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015406:	83 c4 10             	add    esp,0x10
c0015409:	eb 14                	jmp    c001541f <SysRegistryReadExtent(regs*)+0x44>
c001540b:	83 ec 04             	sub    esp,0x4
c001540e:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015411:	50                   	push   eax
c0015412:	51                   	push   ecx
c0015413:	e8 b0 8b ff ff       	call   c000dfc8 <CmGetString(Reghive_Tag*, int, char*)>
c0015418:	83 c4 10             	add    esp,0x10
c001541b:	31 c0                	xor    eax,eax
c001541d:	31 d2                	xor    edx,edx
c001541f:	83 c4 1c             	add    esp,0x1c
c0015422:	c3                   	ret    

c0015423 <SysRegistryPathToExtentLookup(regs*)>:
c0015423:	83 ec 14             	sub    esp,0x14
c0015426:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001542a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001542d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015430:	e8 23 96 ff ff       	call   c000ea58 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0015435:	83 c4 1c             	add    esp,0x1c
c0015438:	99                   	cdq    
c0015439:	c3                   	ret    

c001543a <SysRegistryEnterDirectory(regs*)>:
c001543a:	83 ec 14             	sub    esp,0x14
c001543d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015441:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015444:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015447:	e8 f3 8b ff ff       	call   c000e03f <CmEnterDirectory(Reghive_Tag*, int)>
c001544c:	83 c4 1c             	add    esp,0x1c
c001544f:	99                   	cdq    
c0015450:	c3                   	ret    

c0015451 <SysRegistryGetNext(regs*)>:
c0015451:	83 ec 14             	sub    esp,0x14
c0015454:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015458:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001545b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001545e:	e8 1b 8c ff ff       	call   c000e07e <CmGetNext(Reghive_Tag*, int)>
c0015463:	83 c4 1c             	add    esp,0x1c
c0015466:	99                   	cdq    
c0015467:	c3                   	ret    

c0015468 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0015468:	57                   	push   edi
c0015469:	56                   	push   esi
c001546a:	53                   	push   ebx
c001546b:	81 ec 34 01 00 00    	sub    esp,0x134
c0015471:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015478:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001547c:	57                   	push   edi
c001547d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015480:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015483:	e8 b4 91 ff ff       	call   c000e63c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0015488:	89 c3                	mov    ebx,eax
c001548a:	58                   	pop    eax
c001548b:	5a                   	pop    edx
c001548c:	57                   	push   edi
c001548d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015490:	e8 ab b1 fe ff       	call   c0000640 <strcpy>
c0015495:	89 d8                	mov    eax,ebx
c0015497:	81 c4 40 01 00 00    	add    esp,0x140
c001549d:	99                   	cdq    
c001549e:	5b                   	pop    ebx
c001549f:	5e                   	pop    esi
c00154a0:	5f                   	pop    edi
c00154a1:	c3                   	ret    

c00154a2 <SysRegistryOpen(regs*)>:
c00154a2:	83 ec 18             	sub    esp,0x18
c00154a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00154a9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00154ac:	e8 a7 89 ff ff       	call   c000de58 <CmOpen(char const*)>
c00154b1:	83 c4 1c             	add    esp,0x1c
c00154b4:	99                   	cdq    
c00154b5:	c3                   	ret    

c00154b6 <SysRegistryClose(regs*)>:
c00154b6:	83 ec 18             	sub    esp,0x18
c00154b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00154bd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00154c0:	e8 b1 8a ff ff       	call   c000df76 <CmClose(Reghive_Tag*)>
c00154c5:	31 c0                	xor    eax,eax
c00154c7:	31 d2                	xor    edx,edx
c00154c9:	83 c4 1c             	add    esp,0x1c
c00154cc:	c3                   	ret    

c00154cd <SysRegistryEasyReadString(regs*)>:
c00154cd:	57                   	push   edi
c00154ce:	56                   	push   esi
c00154cf:	53                   	push   ebx
c00154d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00154d4:	83 ec 0c             	sub    esp,0xc
c00154d7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00154da:	e8 79 89 ff ff       	call   c000de58 <CmOpen(char const*)>
c00154df:	5a                   	pop    edx
c00154e0:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00154e3:	59                   	pop    ecx
c00154e4:	89 c3                	mov    ebx,eax
c00154e6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00154e9:	50                   	push   eax
c00154ea:	e8 69 95 ff ff       	call   c000ea58 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00154ef:	83 c4 10             	add    esp,0x10
c00154f2:	89 c1                	mov    ecx,eax
c00154f4:	b8 01 00 00 00       	mov    eax,0x1
c00154f9:	85 c9                	test   ecx,ecx
c00154fb:	7e 16                	jle    c0015513 <SysRegistryEasyReadString(regs*)+0x46>
c00154fd:	50                   	push   eax
c00154fe:	57                   	push   edi
c00154ff:	51                   	push   ecx
c0015500:	53                   	push   ebx
c0015501:	e8 c2 8a ff ff       	call   c000dfc8 <CmGetString(Reghive_Tag*, int, char*)>
c0015506:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015509:	e8 68 8a ff ff       	call   c000df76 <CmClose(Reghive_Tag*)>
c001550e:	83 c4 10             	add    esp,0x10
c0015511:	31 c0                	xor    eax,eax
c0015513:	5b                   	pop    ebx
c0015514:	31 d2                	xor    edx,edx
c0015516:	5e                   	pop    esi
c0015517:	5f                   	pop    edi
c0015518:	c3                   	ret    

c0015519 <SysRegistryEasyReadInteger(regs*)>:
c0015519:	56                   	push   esi
c001551a:	53                   	push   ebx
c001551b:	83 ec 10             	sub    esp,0x10
c001551e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015522:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015525:	e8 2e 89 ff ff       	call   c000de58 <CmOpen(char const*)>
c001552a:	5a                   	pop    edx
c001552b:	89 c3                	mov    ebx,eax
c001552d:	59                   	pop    ecx
c001552e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015531:	50                   	push   eax
c0015532:	e8 21 95 ff ff       	call   c000ea58 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0015537:	83 c4 10             	add    esp,0x10
c001553a:	89 c1                	mov    ecx,eax
c001553c:	b8 01 00 00 00       	mov    eax,0x1
c0015541:	85 c9                	test   ecx,ecx
c0015543:	7e 18                	jle    c001555d <SysRegistryEasyReadInteger(regs*)+0x44>
c0015545:	50                   	push   eax
c0015546:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015549:	51                   	push   ecx
c001554a:	53                   	push   ebx
c001554b:	e8 de 8f ff ff       	call   c000e52e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0015550:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015553:	e8 1e 8a ff ff       	call   c000df76 <CmClose(Reghive_Tag*)>
c0015558:	83 c4 10             	add    esp,0x10
c001555b:	31 c0                	xor    eax,eax
c001555d:	59                   	pop    ecx
c001555e:	31 d2                	xor    edx,edx
c0015560:	5b                   	pop    ebx
c0015561:	5e                   	pop    esi
c0015562:	c3                   	ret    

c0015563 <SysSbrk(regs*)>:
c0015563:	56                   	push   esi
c0015564:	53                   	push   ebx
c0015565:	50                   	push   eax
c0015566:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001556b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001556f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015572:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015575:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c001557b:	85 db                	test   ebx,ebx
c001557d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015580:	74 02                	je     c0015584 <SysSbrk(regs*)+0x21>
c0015582:	79 06                	jns    c001558a <SysSbrk(regs*)+0x27>
c0015584:	89 f0                	mov    eax,esi
c0015586:	31 d2                	xor    edx,edx
c0015588:	eb 2a                	jmp    c00155b4 <SysSbrk(regs*)+0x51>
c001558a:	83 c8 ff             	or     eax,0xffffffff
c001558d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015593:	89 c2                	mov    edx,eax
c0015595:	77 1d                	ja     c00155b4 <SysSbrk(regs*)+0x51>
c0015597:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001559d:	50                   	push   eax
c001559e:	c1 ea 0c             	shr    edx,0xc
c00155a1:	68 07 0c 00 00       	push   0xc07
c00155a6:	52                   	push   edx
c00155a7:	51                   	push   ecx
c00155a8:	e8 1d ef ff ff       	call   c00144ca <VAS::allocatePages(int, int)>
c00155ad:	89 f0                	mov    eax,esi
c00155af:	31 d2                	xor    edx,edx
c00155b1:	83 c4 10             	add    esp,0x10
c00155b4:	59                   	pop    ecx
c00155b5:	5b                   	pop    ebx
c00155b6:	5e                   	pop    esi
c00155b7:	c3                   	ret    

c00155b8 <SysSetCwd(regs*)>:
c00155b8:	83 ec 14             	sub    esp,0x14
c00155bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155bf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00155c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155c7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00155ca:	e8 66 39 ff ff       	call   c0008f35 <Fs::setcwd(Process*, char*)>
c00155cf:	83 c4 1c             	add    esp,0x1c
c00155d2:	99                   	cdq    
c00155d3:	c3                   	ret    

c00155d4 <SysSetTime(regs*)>:
c00155d4:	55                   	push   ebp
c00155d5:	31 d2                	xor    edx,edx
c00155d7:	57                   	push   edi
c00155d8:	56                   	push   esi
c00155d9:	be 18 00 00 00       	mov    esi,0x18
c00155de:	53                   	push   ebx
c00155df:	bb 3c 00 00 00       	mov    ebx,0x3c
c00155e4:	83 ec 20             	sub    esp,0x20
c00155e7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00155eb:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00155ee:	f7 f3                	div    ebx
c00155f0:	89 d7                	mov    edi,edx
c00155f2:	31 d2                	xor    edx,edx
c00155f4:	f7 f3                	div    ebx
c00155f6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00155f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00155fd:	bb 10 0e 00 00       	mov    ebx,0xe10
c0015602:	31 d2                	xor    edx,edx
c0015604:	f7 f3                	div    ebx
c0015606:	31 d2                	xor    edx,edx
c0015608:	f7 f6                	div    esi
c001560a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001560d:	89 d5                	mov    ebp,edx
c001560f:	89 c3                	mov    ebx,eax
c0015611:	be 0c 00 00 00       	mov    esi,0xc
c0015616:	83 e3 1f             	and    ebx,0x1f
c0015619:	c1 e8 05             	shr    eax,0x5
c001561c:	43                   	inc    ebx
c001561d:	31 d2                	xor    edx,edx
c001561f:	f7 f6                	div    esi
c0015621:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015625:	57                   	push   edi
c0015626:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001562a:	55                   	push   ebp
c001562b:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c001562f:	56                   	push   esi
c0015630:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015634:	53                   	push   ebx
c0015635:	68 45 c1 02 c0       	push   0xc002c145
c001563a:	e8 3d 19 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001563f:	83 c4 1c             	add    esp,0x1c
c0015642:	57                   	push   edi
c0015643:	c1 e7 10             	shl    edi,0x10
c0015646:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001564a:	55                   	push   ebp
c001564b:	56                   	push   esi
c001564c:	c1 e6 10             	shl    esi,0x10
c001564f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015653:	53                   	push   ebx
c0015654:	68 67 c1 02 c0       	push   0xc002c167
c0015659:	e8 1e 19 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001565e:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c0015663:	31 d2                	xor    edx,edx
c0015665:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
c001566b:	31 c0                	xor    eax,eax
c001566d:	88 d8                	mov    al,bl
c001566f:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c0015673:	0f b7 d8             	movzx  ebx,ax
c0015676:	09 f3                	or     ebx,esi
c0015678:	89 d8                	mov    eax,ebx
c001567a:	89 eb                	mov    ebx,ebp
c001567c:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0015680:	88 da                	mov    dl,bl
c0015682:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c0015686:	83 c4 1c             	add    esp,0x1c
c0015689:	89 d6                	mov    esi,edx
c001568b:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0015691:	09 fe                	or     esi,edi
c0015693:	56                   	push   esi
c0015694:	50                   	push   eax
c0015695:	51                   	push   ecx
c0015696:	e8 0d 49 ff ff       	call   c0009fa8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001569b:	83 c4 2c             	add    esp,0x2c
c001569e:	83 f0 01             	xor    eax,0x1
c00156a1:	5b                   	pop    ebx
c00156a2:	0f b6 c0             	movzx  eax,al
c00156a5:	5e                   	pop    esi
c00156a6:	31 d2                	xor    edx,edx
c00156a8:	5f                   	pop    edi
c00156a9:	5d                   	pop    ebp
c00156aa:	c3                   	ret    

c00156ab <SysSymlink(regs*)>:
c00156ab:	56                   	push   esi
c00156ac:	83 c8 ff             	or     eax,0xffffffff
c00156af:	53                   	push   ebx
c00156b0:	89 c2                	mov    edx,eax
c00156b2:	81 ec 34 02 00 00    	sub    esp,0x234
c00156b8:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00156bf:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00156c3:	74 50                	je     c0015715 <SysSymlink(regs*)+0x6a>
c00156c5:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00156c8:	85 c9                	test   ecx,ecx
c00156ca:	74 49                	je     c0015715 <SysSymlink(regs*)+0x6a>
c00156cc:	6a 01                	push   0x1
c00156ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156d6:	05 0c 01 00 00       	add    eax,0x10c
c00156db:	50                   	push   eax
c00156dc:	51                   	push   ecx
c00156dd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00156e1:	56                   	push   esi
c00156e2:	e8 b5 31 ff ff       	call   c000889c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00156e7:	6a 01                	push   0x1
c00156e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156f1:	05 0c 01 00 00       	add    eax,0x10c
c00156f6:	50                   	push   eax
c00156f7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00156fa:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0015701:	53                   	push   ebx
c0015702:	e8 95 31 ff ff       	call   c000889c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0015707:	83 c4 18             	add    esp,0x18
c001570a:	56                   	push   esi
c001570b:	53                   	push   ebx
c001570c:	e8 b8 2d ff ff       	call   c00084c9 <KeCreateSymlink(char const*, char const*)>
c0015711:	83 c4 10             	add    esp,0x10
c0015714:	99                   	cdq    
c0015715:	81 c4 34 02 00 00    	add    esp,0x234
c001571b:	5b                   	pop    ebx
c001571c:	5e                   	pop    esi
c001571d:	c3                   	ret    

c001571e <SysTimezone(regs*)>:
c001571e:	83 ec 0c             	sub    esp,0xc
c0015721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015725:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0015729:	75 17                	jne    c0015742 <SysTimezone(regs*)+0x24>
c001572b:	83 ec 0c             	sub    esp,0xc
c001572e:	68 89 c1 02 c0       	push   0xc002c189
c0015733:	e8 44 18 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015738:	83 c8 ff             	or     eax,0xffffffff
c001573b:	83 c4 10             	add    esp,0x10
c001573e:	89 c2                	mov    edx,eax
c0015740:	eb 16                	jmp    c0015758 <SysTimezone(regs*)+0x3a>
c0015742:	83 ec 0c             	sub    esp,0xc
c0015745:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015748:	e8 e8 42 ff ff       	call   c0009a35 <KeSetTimezone(int)>
c001574d:	31 d2                	xor    edx,edx
c001574f:	83 f0 01             	xor    eax,0x1
c0015752:	83 c4 10             	add    esp,0x10
c0015755:	0f b6 c0             	movzx  eax,al
c0015758:	83 c4 0c             	add    esp,0xc
c001575b:	c3                   	ret    

c001575c <SysTruncate(regs*)>:
c001575c:	55                   	push   ebp
c001575d:	57                   	push   edi
c001575e:	31 ff                	xor    edi,edi
c0015760:	56                   	push   esi
c0015761:	53                   	push   ebx
c0015762:	83 ec 0c             	sub    esp,0xc
c0015765:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015769:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001576c:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001576f:	89 ce                	mov    esi,ecx
c0015771:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0015775:	0f 84 9a 00 00 00    	je     c0015815 <SysTruncate(regs*)+0xb9>
c001577b:	83 ec 0c             	sub    esp,0xc
c001577e:	68 14 01 00 00       	push   0x114
c0015783:	e8 6f ab ff ff       	call   c00102f7 <malloc>
c0015788:	83 c4 0c             	add    esp,0xc
c001578b:	89 c3                	mov    ebx,eax
c001578d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015792:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015795:	55                   	push   ebp
c0015796:	53                   	push   ebx
c0015797:	e8 18 34 ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c001579c:	83 c4 10             	add    esp,0x10
c001579f:	31 d2                	xor    edx,edx
c00157a1:	b8 03 00 00 00       	mov    eax,0x3
c00157a6:	85 db                	test   ebx,ebx
c00157a8:	0f 84 a2 00 00 00    	je     c0015850 <SysTruncate(regs*)+0xf4>
c00157ae:	51                   	push   ecx
c00157af:	51                   	push   ecx
c00157b0:	6a 02                	push   0x2
c00157b2:	53                   	push   ebx
c00157b3:	e8 1a 34 ff ff       	call   c0008bd2 <File::open(FileOpenMode)>
c00157b8:	83 c4 10             	add    esp,0x10
c00157bb:	85 c0                	test   eax,eax
c00157bd:	74 13                	je     c00157d2 <SysTruncate(regs*)+0x76>
c00157bf:	83 ec 0c             	sub    esp,0xc
c00157c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157c4:	53                   	push   ebx
c00157c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157c8:	83 c4 10             	add    esp,0x10
c00157cb:	b8 04 00 00 00       	mov    eax,0x4
c00157d0:	eb 7c                	jmp    c001584e <SysTruncate(regs*)+0xf2>
c00157d2:	52                   	push   edx
c00157d3:	57                   	push   edi
c00157d4:	56                   	push   esi
c00157d5:	53                   	push   ebx
c00157d6:	e8 0b 35 ff ff       	call   c0008ce6 <File::truncate(unsigned long long)>
c00157db:	83 c4 10             	add    esp,0x10
c00157de:	85 c0                	test   eax,eax
c00157e0:	74 1b                	je     c00157fd <SysTruncate(regs*)+0xa1>
c00157e2:	83 ec 0c             	sub    esp,0xc
c00157e5:	53                   	push   ebx
c00157e6:	e8 45 34 ff ff       	call   c0008c30 <File::close()>
c00157eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157f3:	83 c4 10             	add    esp,0x10
c00157f6:	b8 05 00 00 00       	mov    eax,0x5
c00157fb:	eb 51                	jmp    c001584e <SysTruncate(regs*)+0xf2>
c00157fd:	83 ec 0c             	sub    esp,0xc
c0015800:	53                   	push   ebx
c0015801:	e8 2a 34 ff ff       	call   c0008c30 <File::close()>
c0015806:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015808:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001580b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001580e:	83 c4 10             	add    esp,0x10
c0015811:	31 c0                	xor    eax,eax
c0015813:	eb 39                	jmp    c001584e <SysTruncate(regs*)+0xf2>
c0015815:	31 d2                	xor    edx,edx
c0015817:	b8 01 00 00 00       	mov    eax,0x1
c001581c:	83 fd 02             	cmp    ebp,0x2
c001581f:	7e 2f                	jle    c0015850 <SysTruncate(regs*)+0xf4>
c0015821:	83 ec 0c             	sub    esp,0xc
c0015824:	51                   	push   ecx
c0015825:	e8 5b e3 ff ff       	call   c0013b85 <KeGetFileFromDescriptor(int)>
c001582a:	83 c4 10             	add    esp,0x10
c001582d:	89 c1                	mov    ecx,eax
c001582f:	31 d2                	xor    edx,edx
c0015831:	b8 02 00 00 00       	mov    eax,0x2
c0015836:	85 c9                	test   ecx,ecx
c0015838:	74 16                	je     c0015850 <SysTruncate(regs*)+0xf4>
c001583a:	50                   	push   eax
c001583b:	57                   	push   edi
c001583c:	56                   	push   esi
c001583d:	51                   	push   ecx
c001583e:	e8 a3 34 ff ff       	call   c0008ce6 <File::truncate(unsigned long long)>
c0015843:	83 c4 10             	add    esp,0x10
c0015846:	85 c0                	test   eax,eax
c0015848:	0f 95 c0             	setne  al
c001584b:	0f b6 c0             	movzx  eax,al
c001584e:	31 d2                	xor    edx,edx
c0015850:	83 c4 0c             	add    esp,0xc
c0015853:	5b                   	pop    ebx
c0015854:	5e                   	pop    esi
c0015855:	5f                   	pop    edi
c0015856:	5d                   	pop    ebp
c0015857:	c3                   	ret    

c0015858 <SysWrite(regs*)>:
c0015858:	57                   	push   edi
c0015859:	56                   	push   esi
c001585a:	53                   	push   ebx
c001585b:	83 ec 10             	sub    esp,0x10
c001585e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015862:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015865:	83 f8 02             	cmp    eax,0x2
c0015868:	77 10                	ja     c001587a <SysWrite(regs*)+0x22>
c001586a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001586f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015872:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0015878:	eb 0e                	jmp    c0015888 <SysWrite(regs*)+0x30>
c001587a:	83 ec 0c             	sub    esp,0xc
c001587d:	50                   	push   eax
c001587e:	e8 02 e3 ff ff       	call   c0013b85 <KeGetFileFromDescriptor(int)>
c0015883:	83 c4 10             	add    esp,0x10
c0015886:	89 c1                	mov    ecx,eax
c0015888:	83 c8 ff             	or     eax,0xffffffff
c001588b:	85 c9                	test   ecx,ecx
c001588d:	89 c2                	mov    edx,eax
c001588f:	74 28                	je     c00158b9 <SysWrite(regs*)+0x61>
c0015891:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015899:	31 ff                	xor    edi,edi
c001589b:	83 ec 0c             	sub    esp,0xc
c001589e:	8b 01                	mov    eax,DWORD PTR [ecx]
c00158a0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00158a4:	52                   	push   edx
c00158a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00158a8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00158ab:	57                   	push   edi
c00158ac:	56                   	push   esi
c00158ad:	51                   	push   ecx
c00158ae:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00158b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00158b5:	83 c4 20             	add    esp,0x20
c00158b8:	99                   	cdq    
c00158b9:	83 c4 10             	add    esp,0x10
c00158bc:	5b                   	pop    ebx
c00158bd:	5e                   	pop    esi
c00158be:	5f                   	pop    edi
c00158bf:	c3                   	ret    

c00158c0 <SysWsbe(regs*)>:
c00158c0:	55                   	push   ebp
c00158c1:	57                   	push   edi
c00158c2:	56                   	push   esi
c00158c3:	53                   	push   ebx
c00158c4:	83 ec 3c             	sub    esp,0x3c
c00158c7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00158cb:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c00158d2:	75 2d                	jne    c0015901 <SysWsbe(regs*)+0x41>
c00158d4:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c00158db:	75 24                	jne    c0015901 <SysWsbe(regs*)+0x41>
c00158dd:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c00158e4:	75 1b                	jne    c0015901 <SysWsbe(regs*)+0x41>
c00158e6:	6a 01                	push   0x1
c00158e8:	6a 00                	push   0x0
c00158ea:	68 8a a9 00 c0       	push   0xc000a98a
c00158ef:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c00158f5:	e8 1e 17 00 00       	call   c0017018 <Process::createThread(void (*)(void*), void*, int)>
c00158fa:	83 c4 10             	add    esp,0x10
c00158fd:	31 c0                	xor    eax,eax
c00158ff:	eb 52                	jmp    c0015953 <SysWsbe(regs*)+0x93>
c0015901:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015905:	be 9e c1 02 c0       	mov    esi,0xc002c19e
c001590a:	b9 0b 00 00 00       	mov    ecx,0xb
c001590f:	fc                   	cld    
c0015910:	83 ec 0c             	sub    esp,0xc
c0015913:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015915:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015919:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001591e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015921:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0015927:	8b 06                	mov    eax,DWORD PTR [esi]
c0015929:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c001592c:	57                   	push   edi
c001592d:	e8 3e ac fe ff       	call   c0000570 <strlen>
c0015932:	5a                   	pop    edx
c0015933:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015937:	52                   	push   edx
c0015938:	31 d2                	xor    edx,edx
c001593a:	57                   	push   edi
c001593b:	52                   	push   edx
c001593c:	50                   	push   eax
c001593d:	56                   	push   esi
c001593e:	ff d5                	call   ebp
c0015940:	83 c4 14             	add    esp,0x14
c0015943:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015946:	e8 99 21 00 00       	call   c0017ae4 <KeTerminateCurrentThread(int)>
c001594b:	83 c4 10             	add    esp,0x10
c001594e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015953:	83 c4 3c             	add    esp,0x3c
c0015956:	31 d2                	xor    edx,edx
c0015958:	5b                   	pop    ebx
c0015959:	5e                   	pop    esi
c001595a:	5f                   	pop    edi
c001595b:	5d                   	pop    ebp
c001595c:	c3                   	ret    

c001595d <SysYield(regs*)>:
c001595d:	83 ec 0c             	sub    esp,0xc
c0015960:	fa                   	cli    
c0015961:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0015967:	e8 78 19 00 00       	call   c00172e4 <schedule()>
c001596c:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0015973:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c001597a:	75 01                	jne    c001597d <SysYield(regs*)+0x20>
c001597c:	fb                   	sti    
c001597d:	31 c0                	xor    eax,eax
c001597f:	31 d2                	xor    edx,edx
c0015981:	83 c4 0c             	add    esp,0xc
c0015984:	c3                   	ret    
c0015985:	66 90                	xchg   ax,ax
c0015987:	90                   	nop

c0015988 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0015988:	55                   	push   ebp
c0015989:	57                   	push   edi
c001598a:	56                   	push   esi
c001598b:	53                   	push   ebx
c001598c:	83 ec 2c             	sub    esp,0x2c
c001598f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015993:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015997:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001599b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001599f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00159a3:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c00159a6:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c00159aa:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c00159ae:	c1 e0 08             	shl    eax,0x8
c00159b1:	09 c1                	or     ecx,eax
c00159b3:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c00159b7:	c1 e0 10             	shl    eax,0x10
c00159ba:	09 c1                	or     ecx,eax
c00159bc:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c00159c0:	83 e0 7f             	and    eax,0x7f
c00159c3:	c1 e0 18             	shl    eax,0x18
c00159c6:	09 c8                	or     eax,ecx
c00159c8:	89 c5                	mov    ebp,eax
c00159ca:	89 f8                	mov    eax,edi
c00159cc:	80 f4 00             	xor    ah,0x0
c00159cf:	89 c3                	mov    ebx,eax
c00159d1:	89 e8                	mov    eax,ebp
c00159d3:	80 f4 00             	xor    ah,0x0
c00159d6:	89 c6                	mov    esi,eax
c00159d8:	89 f0                	mov    eax,esi
c00159da:	09 d8                	or     eax,ebx
c00159dc:	74 42                	je     c0015a20 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c00159de:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00159e2:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c00159e5:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c00159e9:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c00159ed:	c1 e0 08             	shl    eax,0x8
c00159f0:	09 c6                	or     esi,eax
c00159f2:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c00159f6:	c1 e0 10             	shl    eax,0x10
c00159f9:	09 c6                	or     esi,eax
c00159fb:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c00159ff:	83 e0 7f             	and    eax,0x7f
c0015a02:	c1 e0 18             	shl    eax,0x18
c0015a05:	09 f0                	or     eax,esi
c0015a07:	89 c3                	mov    ebx,eax
c0015a09:	a1 50 5b 03 c0       	mov    eax,ds:0xc0035b50
c0015a0e:	8b 15 54 5b 03 c0    	mov    edx,DWORD PTR ds:0xc0035b54
c0015a14:	29 c1                	sub    ecx,eax
c0015a16:	19 d3                	sbb    ebx,edx
c0015a18:	89 c8                	mov    eax,ecx
c0015a1a:	89 da                	mov    edx,ebx
c0015a1c:	eb 0e                	jmp    c0015a2c <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0015a1e:	66 90                	xchg   ax,ax
c0015a20:	b8 00 00 00 00       	mov    eax,0x0
c0015a25:	ba 00 00 00 00       	mov    edx,0x0
c0015a2a:	66 90                	xchg   ax,ax
c0015a2c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015a30:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a38:	80 f4 00             	xor    ah,0x0
c0015a3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a43:	80 f4 00             	xor    ah,0x0
c0015a46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a4a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015a4e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0015a52:	89 e8                	mov    eax,ebp
c0015a54:	09 f8                	or     eax,edi
c0015a56:	74 30                	je     c0015a88 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0015a58:	8b 0d 50 5b 03 c0    	mov    ecx,DWORD PTR ds:0xc0035b50
c0015a5e:	8b 1d 54 5b 03 c0    	mov    ebx,DWORD PTR ds:0xc0035b54
c0015a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a6c:	01 c8                	add    eax,ecx
c0015a6e:	11 da                	adc    edx,ebx
c0015a70:	89 c6                	mov    esi,eax
c0015a72:	83 e6 ff             	and    esi,0xffffffff
c0015a75:	89 34 24             	mov    DWORD PTR [esp],esi
c0015a78:	89 d0                	mov    eax,edx
c0015a7a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0015a7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a83:	eb 13                	jmp    c0015a98 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c0015a85:	8d 76 00             	lea    esi,[esi+0x0]
c0015a88:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015a8f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015a97:	90                   	nop
c0015a98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015a9c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015a9f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0015aa3:	89 cf                	mov    edi,ecx
c0015aa5:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0015aa8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015aab:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0015aaf:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0015ab4:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c0015ab7:	83 e1 00             	and    ecx,0x0
c0015aba:	09 ca                	or     edx,ecx
c0015abc:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015abf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ac3:	c1 ea 08             	shr    edx,0x8
c0015ac6:	0f b6 d2             	movzx  edx,dl
c0015ac9:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c0015acc:	83 e1 00             	and    ecx,0x0
c0015acf:	09 ca                	or     edx,ecx
c0015ad1:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015ad4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ad8:	c1 ea 10             	shr    edx,0x10
c0015adb:	0f b6 d2             	movzx  edx,dl
c0015ade:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c0015ae1:	83 e1 00             	and    ecx,0x0
c0015ae4:	09 ca                	or     edx,ecx
c0015ae6:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015ae9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015aed:	c1 ea 18             	shr    edx,0x18
c0015af0:	83 e2 7f             	and    edx,0x7f
c0015af3:	89 d3                	mov    ebx,edx
c0015af5:	83 e3 7f             	and    ebx,0x7f
c0015af8:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015afb:	83 e2 80             	and    edx,0xffffff80
c0015afe:	88 d1                	mov    cl,dl
c0015b00:	88 da                	mov    dl,bl
c0015b02:	09 ca                	or     edx,ecx
c0015b04:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015b07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b0b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b0f:	83 c4 2c             	add    esp,0x2c
c0015b12:	5b                   	pop    ebx
c0015b13:	5e                   	pop    esi
c0015b14:	5f                   	pop    edi
c0015b15:	5d                   	pop    ebp
c0015b16:	c3                   	ret    
c0015b17:	90                   	nop

c0015b18 <KeCheckAlarm(ThreadControlBlock*)>:
c0015b18:	55                   	push   ebp
c0015b19:	57                   	push   edi
c0015b1a:	56                   	push   esi
c0015b1b:	53                   	push   ebx
c0015b1c:	83 ec 0c             	sub    esp,0xc
c0015b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b23:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015b26:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0015b2a:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c0015b2e:	c1 e5 08             	shl    ebp,0x8
c0015b31:	09 fd                	or     ebp,edi
c0015b33:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0015b37:	c1 e7 10             	shl    edi,0x10
c0015b3a:	09 ef                	or     edi,ebp
c0015b3c:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0015b40:	83 e0 7f             	and    eax,0x7f
c0015b43:	c1 e0 18             	shl    eax,0x18
c0015b46:	09 f8                	or     eax,edi
c0015b48:	89 c1                	mov    ecx,eax
c0015b4a:	89 d0                	mov    eax,edx
c0015b4c:	80 f4 00             	xor    ah,0x0
c0015b4f:	89 c3                	mov    ebx,eax
c0015b51:	89 c8                	mov    eax,ecx
c0015b53:	80 f4 00             	xor    ah,0x0
c0015b56:	89 c6                	mov    esi,eax
c0015b58:	89 f0                	mov    eax,esi
c0015b5a:	09 d8                	or     eax,ebx
c0015b5c:	0f 84 9e 00 00 00    	je     c0015c00 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015b62:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015b66:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c0015b69:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c0015b6d:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c0015b71:	c1 e6 08             	shl    esi,0x8
c0015b74:	09 de                	or     esi,ebx
c0015b76:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c0015b7a:	c1 e3 10             	shl    ebx,0x10
c0015b7d:	09 f3                	or     ebx,esi
c0015b7f:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c0015b83:	83 e1 7f             	and    ecx,0x7f
c0015b86:	c1 e1 18             	shl    ecx,0x18
c0015b89:	09 d9                	or     ecx,ebx
c0015b8b:	89 ca                	mov    edx,ecx
c0015b8d:	89 c1                	mov    ecx,eax
c0015b8f:	89 d3                	mov    ebx,edx
c0015b91:	a1 50 5b 03 c0       	mov    eax,ds:0xc0035b50
c0015b96:	8b 15 54 5b 03 c0    	mov    edx,DWORD PTR ds:0xc0035b54
c0015b9c:	39 c8                	cmp    eax,ecx
c0015b9e:	89 d0                	mov    eax,edx
c0015ba0:	19 d8                	sbb    eax,ebx
c0015ba2:	72 5c                	jb     c0015c00 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015ba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba8:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c0015baf:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0015bb2:	83 e2 00             	and    edx,0x0
c0015bb5:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015bb8:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015bbb:	83 e2 00             	and    edx,0x0
c0015bbe:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015bc1:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015bc4:	83 e2 00             	and    edx,0x0
c0015bc7:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015bca:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015bcd:	83 e2 80             	and    edx,0xffffff80
c0015bd0:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015bd3:	83 ec 0c             	sub    esp,0xc
c0015bd6:	68 ca c1 02 c0       	push   0xc002c1ca
c0015bdb:	e8 9c 13 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015be0:	83 c4 10             	add    esp,0x10
c0015be3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015bea:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0015bf0:	83 ec 08             	sub    esp,0x8
c0015bf3:	6a 0e                	push   0xe
c0015bf5:	50                   	push   eax
c0015bf6:	e8 6c bd ff ff       	call   c0011967 <KeRaiseSignal(SigHandlerBlock*, int)>
c0015bfb:	83 c4 10             	add    esp,0x10
c0015bfe:	66 90                	xchg   ax,ax
c0015c00:	90                   	nop
c0015c01:	83 c4 0c             	add    esp,0xc
c0015c04:	5b                   	pop    ebx
c0015c05:	5e                   	pop    esi
c0015c06:	5f                   	pop    edi
c0015c07:	5d                   	pop    ebp
c0015c08:	c3                   	ret    

c0015c09 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015c09:	55                   	push   ebp
c0015c0a:	57                   	push   edi
c0015c0b:	56                   	push   esi
c0015c0c:	53                   	push   ebx
c0015c0d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015c13:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015c1b:	0f 95 c0             	setne  al
c0015c1e:	31 d2                	xor    edx,edx
c0015c20:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015c28:	0f 94 c2             	sete   dl
c0015c2b:	85 c2                	test   edx,eax
c0015c2d:	74 34                	je     c0015c63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015c2f:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015c3a:	74 27                	je     c0015c63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015c3c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0015c43:	05 00 10 00 00       	add    eax,0x1000
c0015c48:	89 c1                	mov    ecx,eax
c0015c4a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015c4f:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0015c55:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0015c5c:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0015c63:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0015c6a:	83 ec 0c             	sub    esp,0xc
c0015c6d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015c73:	6a 01                	push   0x1
c0015c75:	e8 69 e0 ff ff       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c0015c7a:	83 c4 10             	add    esp,0x10
c0015c7d:	89 c3                	mov    ebx,eax
c0015c7f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015c85:	0f 86 26 01 00 00    	jbe    c0015db1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0015c8b:	c1 ee 0c             	shr    esi,0xc
c0015c8e:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015c95:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015c99:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015ca1:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015ca8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cac:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0015cb3:	29 ef                	sub    edi,ebp
c0015cb5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0015cb9:	0f 83 f9 00 00 00    	jae    c0015db8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0015cbf:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015cc5:	76 05                	jbe    c0015ccc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0015cc7:	bf 00 10 00 00       	mov    edi,0x1000
c0015ccc:	83 ec 0c             	sub    esp,0xc
c0015ccf:	31 d2                	xor    edx,edx
c0015cd1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015cd8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015cda:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015cde:	50                   	push   eax
c0015cdf:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015ce3:	56                   	push   esi
c0015ce4:	52                   	push   edx
c0015ce5:	57                   	push   edi
c0015ce6:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015ced:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015cf0:	83 c4 20             	add    esp,0x20
c0015cf3:	85 c0                	test   eax,eax
c0015cf5:	75 06                	jne    c0015cfd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0015cf7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015cfb:	74 13                	je     c0015d10 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015cfd:	83 ec 0c             	sub    esp,0xc
c0015d00:	53                   	push   ebx
c0015d01:	e8 e5 e2 ff ff       	call   c0013feb <Virt::freeKernelVirtualPages(unsigned long)>
c0015d06:	83 c4 10             	add    esp,0x10
c0015d09:	31 c0                	xor    eax,eax
c0015d0b:	e9 80 01 00 00       	jmp    c0015e90 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0015d10:	fa                   	cli    
c0015d11:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0015d17:	e8 24 ac ff ff       	call   c0010940 <Phys::allocatePage()>
c0015d1c:	6a 07                	push   0x7
c0015d1e:	89 c7                	mov    edi,eax
c0015d20:	53                   	push   ebx
c0015d21:	50                   	push   eax
c0015d22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d27:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d2a:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015d30:	e8 91 e6 ff ff       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015d35:	83 c4 0c             	add    esp,0xc
c0015d38:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015d3f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015d45:	6a 00                	push   0x0
c0015d47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d4f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015d55:	e8 d8 e4 ff ff       	call   c0014232 <VAS::mapOtherVASIn(bool, VAS*)>
c0015d5a:	58                   	pop    eax
c0015d5b:	5a                   	pop    edx
c0015d5c:	68 07 0c 00 00       	push   0xc07
c0015d61:	55                   	push   ebp
c0015d62:	57                   	push   edi
c0015d63:	89 df                	mov    edi,ebx
c0015d65:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015d6c:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015d72:	6a 00                	push   0x0
c0015d74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d79:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d7c:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015d82:	e8 81 e8 ff ff       	call   c0014608 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015d87:	b9 00 10 00 00       	mov    ecx,0x1000
c0015d8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d8e:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0015d95:	83 c4 20             	add    esp,0x20
c0015d98:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0015d9f:	75 01                	jne    c0015da2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c0015da1:	fb                   	sti    
c0015da2:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015da8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015dac:	e9 f0 fe ff ff       	jmp    c0015ca1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0015db1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015db8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015dbf:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015dc5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015dcb:	0f 86 b1 00 00 00    	jbe    c0015e82 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015dd1:	fa                   	cli    
c0015dd2:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0015dd8:	c1 ee 0c             	shr    esi,0xc
c0015ddb:	51                   	push   ecx
c0015ddc:	31 ff                	xor    edi,edi
c0015dde:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015de5:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015deb:	6a 00                	push   0x0
c0015ded:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015df2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015df5:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015dfb:	e8 32 e4 ff ff       	call   c0014232 <VAS::mapOtherVASIn(bool, VAS*)>
c0015e00:	83 c4 10             	add    esp,0x10
c0015e03:	e8 38 ab ff ff       	call   c0010940 <Phys::allocatePage()>
c0015e08:	47                   	inc    edi
c0015e09:	6a 07                	push   0x7
c0015e0b:	53                   	push   ebx
c0015e0c:	50                   	push   eax
c0015e0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e11:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e17:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015e1a:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c0015e20:	e8 a1 e5 ff ff       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015e25:	58                   	pop    eax
c0015e26:	5a                   	pop    edx
c0015e27:	68 07 0c 00 00       	push   0xc07
c0015e2c:	55                   	push   ebp
c0015e2d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015e33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e37:	50                   	push   eax
c0015e38:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015e3f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015e45:	6a 00                	push   0x0
c0015e47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e4f:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015e55:	e8 ae e7 ff ff       	call   c0014608 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015e5a:	83 c4 1c             	add    esp,0x1c
c0015e5d:	68 00 10 00 00       	push   0x1000
c0015e62:	6a 00                	push   0x0
c0015e64:	53                   	push   ebx
c0015e65:	e8 86 a6 fe ff       	call   c00004f0 <memset>
c0015e6a:	83 c4 10             	add    esp,0x10
c0015e6d:	39 fe                	cmp    esi,edi
c0015e6f:	77 92                	ja     c0015e03 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0015e71:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0015e78:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0015e7f:	75 01                	jne    c0015e82 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015e81:	fb                   	sti    
c0015e82:	83 ec 0c             	sub    esp,0xc
c0015e85:	53                   	push   ebx
c0015e86:	e8 60 e1 ff ff       	call   c0013feb <Virt::freeKernelVirtualPages(unsigned long)>
c0015e8b:	83 c4 10             	add    esp,0x10
c0015e8e:	b0 01                	mov    al,0x1
c0015e90:	81 c4 2c 10 00 00    	add    esp,0x102c
c0015e96:	5b                   	pop    ebx
c0015e97:	5e                   	pop    esi
c0015e98:	5f                   	pop    edi
c0015e99:	5d                   	pop    ebp
c0015e9a:	c3                   	ret    

c0015e9b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015e9b:	55                   	push   ebp
c0015e9c:	57                   	push   edi
c0015e9d:	56                   	push   esi
c0015e9e:	53                   	push   ebx
c0015e9f:	83 ec 68             	sub    esp,0x68
c0015ea2:	68 14 01 00 00       	push   0x114
c0015ea7:	e8 4b a4 ff ff       	call   c00102f7 <malloc>
c0015eac:	83 c4 0c             	add    esp,0xc
c0015eaf:	89 c6                	mov    esi,eax
c0015eb1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015eb5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015eb9:	50                   	push   eax
c0015eba:	e8 f5 2c ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c0015ebf:	5b                   	pop    ebx
c0015ec0:	5f                   	pop    edi
c0015ec1:	6a 01                	push   0x1
c0015ec3:	56                   	push   esi
c0015ec4:	e8 09 2d ff ff       	call   c0008bd2 <File::open(FileOpenMode)>
c0015ec9:	83 c4 10             	add    esp,0x10
c0015ecc:	85 c0                	test   eax,eax
c0015ece:	0f 85 c6 01 00 00    	jne    c001609a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015ed4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015edc:	83 ec 0c             	sub    esp,0xc
c0015edf:	6a 34                	push   0x34
c0015ee1:	e8 11 a4 ff ff       	call   c00102f7 <malloc>
c0015ee6:	59                   	pop    ecx
c0015ee7:	89 c3                	mov    ebx,eax
c0015ee9:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0015eed:	8b 06                	mov    eax,DWORD PTR [esi]
c0015eef:	57                   	push   edi
c0015ef0:	53                   	push   ebx
c0015ef1:	6a 00                	push   0x0
c0015ef3:	6a 34                	push   0x34
c0015ef5:	56                   	push   esi
c0015ef6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ef9:	83 c4 20             	add    esp,0x20
c0015efc:	85 c0                	test   eax,eax
c0015efe:	0f 85 96 01 00 00    	jne    c001609a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015f04:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015f0a:	0f 85 8a 01 00 00    	jne    c001609a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015f10:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015f13:	85 c0                	test   eax,eax
c0015f15:	0f 84 7f 01 00 00    	je     c001609a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015f1b:	52                   	push   edx
c0015f1c:	31 d2                	xor    edx,edx
c0015f1e:	52                   	push   edx
c0015f1f:	50                   	push   eax
c0015f20:	56                   	push   esi
c0015f21:	e8 6a 2d ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c0015f26:	83 c4 10             	add    esp,0x10
c0015f29:	85 c0                	test   eax,eax
c0015f2b:	0f 85 69 01 00 00    	jne    c001609a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015f31:	83 ec 0c             	sub    esp,0xc
c0015f34:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015f37:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015f3b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015f3f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015f43:	0f af c2             	imul   eax,edx
c0015f46:	50                   	push   eax
c0015f47:	e8 ab a3 ff ff       	call   c00102f7 <malloc>
c0015f4c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015f4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015f52:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f59:	31 ff                	xor    edi,edi
c0015f5b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015f5f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015f63:	0f af c2             	imul   eax,edx
c0015f66:	99                   	cdq    
c0015f67:	52                   	push   edx
c0015f68:	50                   	push   eax
c0015f69:	56                   	push   esi
c0015f6a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015f6d:	83 c4 20             	add    esp,0x20
c0015f70:	0f b7 c7             	movzx  eax,di
c0015f73:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c0015f77:	73 71                	jae    c0015fea <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c0015f79:	6b c0 28             	imul   eax,eax,0x28
c0015f7c:	55                   	push   ebp
c0015f7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f81:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c0015f85:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c0015f88:	6b d2 28             	imul   edx,edx,0x28
c0015f8b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015f8f:	31 d2                	xor    edx,edx
c0015f91:	52                   	push   edx
c0015f92:	50                   	push   eax
c0015f93:	56                   	push   esi
c0015f94:	e8 f7 2c ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c0015f99:	83 c4 0c             	add    esp,0xc
c0015f9c:	6a 20                	push   0x20
c0015f9e:	6a 00                	push   0x0
c0015fa0:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c0015fa4:	55                   	push   ebp
c0015fa5:	e8 46 a5 fe ff       	call   c00004f0 <memset>
c0015faa:	58                   	pop    eax
c0015fab:	8b 06                	mov    eax,DWORD PTR [esi]
c0015fad:	8d 54 24 38          	lea    edx,[esp+0x38]
c0015fb1:	52                   	push   edx
c0015fb2:	55                   	push   ebp
c0015fb3:	6a 00                	push   0x0
c0015fb5:	6a 1f                	push   0x1f
c0015fb7:	56                   	push   esi
c0015fb8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fbb:	83 c4 18             	add    esp,0x18
c0015fbe:	55                   	push   ebp
c0015fbf:	68 db c1 02 c0       	push   0xc002c1db
c0015fc4:	e8 87 a7 fe ff       	call   c0000750 <strcmp>
c0015fc9:	83 c4 10             	add    esp,0x10
c0015fcc:	85 c0                	test   eax,eax
c0015fce:	75 17                	jne    c0015fe7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015fd0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015fd4:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015fd8:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c0015fde:	83 c8 80             	or     eax,0xffffff80
c0015fe1:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c0015fe7:	47                   	inc    edi
c0015fe8:	eb 86                	jmp    c0015f70 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015fea:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015fed:	85 c0                	test   eax,eax
c0015fef:	0f 84 a5 00 00 00    	je     c001609a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015ff5:	31 d2                	xor    edx,edx
c0015ff7:	57                   	push   edi
c0015ff8:	52                   	push   edx
c0015ff9:	50                   	push   eax
c0015ffa:	56                   	push   esi
c0015ffb:	e8 90 2c ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c0016000:	83 c4 10             	add    esp,0x10
c0016003:	85 c0                	test   eax,eax
c0016005:	0f 85 8f 00 00 00    	jne    c001609a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001600b:	83 ec 0c             	sub    esp,0xc
c001600e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016012:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016016:	31 ed                	xor    ebp,ebp
c0016018:	0f af c2             	imul   eax,edx
c001601b:	50                   	push   eax
c001601c:	e8 d6 a2 ff ff       	call   c00102f7 <malloc>
c0016021:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016025:	59                   	pop    ecx
c0016026:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016028:	8d 44 24 34          	lea    eax,[esp+0x34]
c001602c:	50                   	push   eax
c001602d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016031:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016035:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016039:	0f af c2             	imul   eax,edx
c001603c:	99                   	cdq    
c001603d:	52                   	push   edx
c001603e:	50                   	push   eax
c001603f:	56                   	push   esi
c0016040:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016043:	83 c4 20             	add    esp,0x20
c0016046:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001604e:	0f b7 fd             	movzx  edi,bp
c0016051:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0016055:	0f 83 80 00 00 00    	jae    c00160db <Thr::loadProgramIntoMemory(Process*, char const*)+0x240>
c001605b:	c1 e7 05             	shl    edi,0x5
c001605e:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c0016062:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016065:	75 6e                	jne    c00160d5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c0016067:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001606a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001606e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016071:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016075:	52                   	push   edx
c0016076:	31 d2                	xor    edx,edx
c0016078:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001607b:	52                   	push   edx
c001607c:	50                   	push   eax
c001607d:	56                   	push   esi
c001607e:	e8 0d 2c ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c0016083:	83 c4 10             	add    esp,0x10
c0016086:	85 c0                	test   eax,eax
c0016088:	74 17                	je     c00160a1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x206>
c001608a:	83 ec 0c             	sub    esp,0xc
c001608d:	68 ea c1 02 c0       	push   0xc002c1ea
c0016092:	e8 e5 0e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016097:	83 c4 10             	add    esp,0x10
c001609a:	31 c0                	xor    eax,eax
c001609c:	e9 8a 00 00 00       	jmp    c001612b <Thr::loadProgramIntoMemory(Process*, char const*)+0x290>
c00160a1:	83 ec 0c             	sub    esp,0xc
c00160a4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00160a7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00160aa:	50                   	push   eax
c00160ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00160af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160b3:	56                   	push   esi
c00160b4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00160bb:	e8 49 fb ff ff       	call   c0015c09 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00160c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00160c4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00160c8:	83 c4 20             	add    esp,0x20
c00160cb:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00160cf:	73 04                	jae    c00160d5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c00160d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160d5:	45                   	inc    ebp
c00160d6:	e9 73 ff ff ff       	jmp    c001604e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c00160db:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c00160df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00160e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160e7:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c00160ed:	83 ec 0c             	sub    esp,0xc
c00160f0:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c00160f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00160fb:	05 00 10 00 00       	add    eax,0x1000
c0016100:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016103:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016107:	e8 fb a1 ff ff       	call   c0010307 <free>
c001610c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001610f:	e8 f3 a1 ff ff       	call   c0010307 <free>
c0016114:	58                   	pop    eax
c0016115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016119:	e8 e9 a1 ff ff       	call   c0010307 <free>
c001611e:	89 34 24             	mov    DWORD PTR [esp],esi
c0016121:	e8 0a 2b ff ff       	call   c0008c30 <File::close()>
c0016126:	83 c4 10             	add    esp,0x10
c0016129:	b0 01                	mov    al,0x1
c001612b:	83 c4 5c             	add    esp,0x5c
c001612e:	5b                   	pop    ebx
c001612f:	5e                   	pop    esi
c0016130:	5f                   	pop    edi
c0016131:	5d                   	pop    ebp
c0016132:	c3                   	ret    

c0016133 <Thr::runtimeReferenceHelper()>:
c0016133:	83 ec 18             	sub    esp,0x18
c0016136:	68 f2 c1 02 c0       	push   0xc002c1f2
c001613b:	e8 3c 0e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016140:	fa                   	cli    
c0016141:	83 c4 10             	add    esp,0x10
c0016144:	eb fe                	jmp    c0016144 <Thr::runtimeReferenceHelper()+0x11>

c0016146 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016146:	57                   	push   edi
c0016147:	56                   	push   esi
c0016148:	53                   	push   ebx
c0016149:	31 db                	xor    ebx,ebx
c001614b:	39 1d 00 63 03 c0    	cmp    DWORD PTR ds:0xc0036300,ebx
c0016151:	7e 3c                	jle    c001618f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016153:	8b 34 9d e0 62 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffc9d20]
c001615a:	31 ff                	xor    edi,edi
c001615c:	39 3c 9d a0 62 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffc9d60],edi
c0016163:	7e 27                	jle    c001618c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016165:	50                   	push   eax
c0016166:	50                   	push   eax
c0016167:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001616b:	8b 06                	mov    eax,DWORD PTR [esi]
c001616d:	03 04 9d c0 62 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffc9d40]
c0016174:	50                   	push   eax
c0016175:	e8 d6 a5 fe ff       	call   c0000750 <strcmp>
c001617a:	83 c4 10             	add    esp,0x10
c001617d:	85 c0                	test   eax,eax
c001617f:	75 05                	jne    c0016186 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016181:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016184:	eb 0b                	jmp    c0016191 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016186:	83 c6 10             	add    esi,0x10
c0016189:	47                   	inc    edi
c001618a:	eb d0                	jmp    c001615c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001618c:	43                   	inc    ebx
c001618d:	eb bc                	jmp    c001614b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001618f:	31 c0                	xor    eax,eax
c0016191:	5b                   	pop    ebx
c0016192:	5e                   	pop    esi
c0016193:	5f                   	pop    edi
c0016194:	c3                   	ret    

c0016195 <Thr::loadKernelSymbolTable(char const*)>:
c0016195:	55                   	push   ebp
c0016196:	57                   	push   edi
c0016197:	56                   	push   esi
c0016198:	53                   	push   ebx
c0016199:	83 ec 68             	sub    esp,0x68
c001619c:	8b 35 58 63 03 c0    	mov    esi,DWORD PTR ds:0xc0036358
c00161a2:	68 14 01 00 00       	push   0x114
c00161a7:	e8 4b a1 ff ff       	call   c00102f7 <malloc>
c00161ac:	83 c4 0c             	add    esp,0xc
c00161af:	89 c3                	mov    ebx,eax
c00161b1:	56                   	push   esi
c00161b2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00161b6:	50                   	push   eax
c00161b7:	e8 f8 29 ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c00161bc:	5e                   	pop    esi
c00161bd:	5f                   	pop    edi
c00161be:	6a 01                	push   0x1
c00161c0:	53                   	push   ebx
c00161c1:	e8 0c 2a ff ff       	call   c0008bd2 <File::open(FileOpenMode)>
c00161c6:	83 c4 10             	add    esp,0x10
c00161c9:	85 c0                	test   eax,eax
c00161cb:	74 0a                	je     c00161d7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00161cd:	83 ec 0c             	sub    esp,0xc
c00161d0:	68 14 c2 02 c0       	push   0xc002c214
c00161d5:	eb 34                	jmp    c001620b <Thr::loadKernelSymbolTable(char const*)+0x76>
c00161d7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00161df:	83 ec 0c             	sub    esp,0xc
c00161e2:	6a 34                	push   0x34
c00161e4:	e8 0e a1 ff ff       	call   c00102f7 <malloc>
c00161e9:	59                   	pop    ecx
c00161ea:	89 c7                	mov    edi,eax
c00161ec:	8d 74 24 34          	lea    esi,[esp+0x34]
c00161f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161f2:	56                   	push   esi
c00161f3:	57                   	push   edi
c00161f4:	6a 00                	push   0x0
c00161f6:	6a 34                	push   0x34
c00161f8:	53                   	push   ebx
c00161f9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00161fc:	83 c4 20             	add    esp,0x20
c00161ff:	85 c0                	test   eax,eax
c0016201:	74 17                	je     c001621a <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016203:	83 ec 0c             	sub    esp,0xc
c0016206:	68 2b c2 02 c0       	push   0xc002c22b
c001620b:	e8 3c a5 ff ff       	call   c001074c <KePanic(char const*)>
c0016210:	83 c4 10             	add    esp,0x10
c0016213:	31 c0                	xor    eax,eax
c0016215:	e9 31 02 00 00       	jmp    c001644b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001621a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016220:	75 e1                	jne    c0016203 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016222:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016225:	85 c0                	test   eax,eax
c0016227:	74 da                	je     c0016203 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016229:	52                   	push   edx
c001622a:	31 d2                	xor    edx,edx
c001622c:	52                   	push   edx
c001622d:	50                   	push   eax
c001622e:	53                   	push   ebx
c001622f:	e8 5c 2a ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c0016234:	83 c4 10             	add    esp,0x10
c0016237:	85 c0                	test   eax,eax
c0016239:	75 c8                	jne    c0016203 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001623b:	83 ec 0c             	sub    esp,0xc
c001623e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016242:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016246:	31 ed                	xor    ebp,ebp
c0016248:	0f af c2             	imul   eax,edx
c001624b:	50                   	push   eax
c001624c:	e8 a6 a0 ff ff       	call   c00102f7 <malloc>
c0016251:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016253:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016257:	89 34 24             	mov    DWORD PTR [esp],esi
c001625a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001625e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016262:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016266:	0f af c2             	imul   eax,edx
c0016269:	99                   	cdq    
c001626a:	52                   	push   edx
c001626b:	50                   	push   eax
c001626c:	53                   	push   ebx
c001626d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016270:	83 c4 20             	add    esp,0x20
c0016273:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001627b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016283:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001628b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016293:	0f b7 f5             	movzx  esi,bp
c0016296:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c001629a:	0f 83 a7 00 00 00    	jae    c0016347 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00162a0:	6b f6 28             	imul   esi,esi,0x28
c00162a3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00162a7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00162aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00162ae:	50                   	push   eax
c00162af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162b3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00162b7:	8b 16                	mov    edx,DWORD PTR [esi]
c00162b9:	6b c0 28             	imul   eax,eax,0x28
c00162bc:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00162c0:	89 d0                	mov    eax,edx
c00162c2:	31 d2                	xor    edx,edx
c00162c4:	52                   	push   edx
c00162c5:	50                   	push   eax
c00162c6:	53                   	push   ebx
c00162c7:	e8 c4 29 ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c00162cc:	83 c4 0c             	add    esp,0xc
c00162cf:	6a 20                	push   0x20
c00162d1:	6a 00                	push   0x0
c00162d3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00162d7:	52                   	push   edx
c00162d8:	e8 13 a2 fe ff       	call   c00004f0 <memset>
c00162dd:	58                   	pop    eax
c00162de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162e0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00162e4:	51                   	push   ecx
c00162e5:	8d 54 24 40          	lea    edx,[esp+0x40]
c00162e9:	52                   	push   edx
c00162ea:	6a 00                	push   0x0
c00162ec:	6a 1f                	push   0x1f
c00162ee:	53                   	push   ebx
c00162ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00162f2:	83 c4 18             	add    esp,0x18
c00162f5:	68 42 c2 02 c0       	push   0xc002c242
c00162fa:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00162fe:	52                   	push   edx
c00162ff:	e8 4c a4 fe ff       	call   c0000750 <strcmp>
c0016304:	83 c4 10             	add    esp,0x10
c0016307:	85 c0                	test   eax,eax
c0016309:	75 0f                	jne    c001631a <Thr::loadKernelSymbolTable(char const*)+0x185>
c001630b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001630e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016312:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016316:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001631a:	50                   	push   eax
c001631b:	50                   	push   eax
c001631c:	68 4a c2 02 c0       	push   0xc002c24a
c0016321:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016325:	50                   	push   eax
c0016326:	e8 25 a4 fe ff       	call   c0000750 <strcmp>
c001632b:	83 c4 10             	add    esp,0x10
c001632e:	85 c0                	test   eax,eax
c0016330:	75 0f                	jne    c0016341 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016332:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016335:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016339:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001633d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016341:	45                   	inc    ebp
c0016342:	e9 4c ff ff ff       	jmp    c0016293 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016347:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001634c:	75 10                	jne    c001635e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001634e:	83 ec 0c             	sub    esp,0xc
c0016351:	68 52 c2 02 c0       	push   0xc002c252
c0016356:	e8 f1 a3 ff ff       	call   c001074c <KePanic(char const*)>
c001635b:	83 c4 10             	add    esp,0x10
c001635e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016363:	75 10                	jne    c0016375 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016365:	83 ec 0c             	sub    esp,0xc
c0016368:	68 52 c2 02 c0       	push   0xc002c252
c001636d:	e8 da a3 ff ff       	call   c001074c <KePanic(char const*)>
c0016372:	83 c4 10             	add    esp,0x10
c0016375:	31 d2                	xor    edx,edx
c0016377:	50                   	push   eax
c0016378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001637c:	52                   	push   edx
c001637d:	50                   	push   eax
c001637e:	53                   	push   ebx
c001637f:	e8 0c 29 ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c0016384:	5a                   	pop    edx
c0016385:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016389:	e8 69 9f ff ff       	call   c00102f7 <malloc>
c001638e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016392:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016396:	31 c9                	xor    ecx,ecx
c0016398:	5e                   	pop    esi
c0016399:	8b 03                	mov    eax,DWORD PTR [ebx]
c001639b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001639f:	55                   	push   ebp
c00163a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a4:	51                   	push   ecx
c00163a5:	52                   	push   edx
c00163a6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00163aa:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00163ae:	53                   	push   ebx
c00163af:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163b2:	83 c4 14             	add    esp,0x14
c00163b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00163b9:	e8 39 9f ff ff       	call   c00102f7 <malloc>
c00163be:	89 c6                	mov    esi,eax
c00163c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00163c5:	56                   	push   esi
c00163c6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00163ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00163ce:	51                   	push   ecx
c00163cf:	52                   	push   edx
c00163d0:	53                   	push   ebx
c00163d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163d8:	8b 15 00 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036300
c00163de:	83 c4 1c             	add    esp,0x1c
c00163e1:	c1 e8 04             	shr    eax,0x4
c00163e4:	89 04 95 a0 62 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9d60],eax
c00163eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00163ef:	31 d2                	xor    edx,edx
c00163f1:	52                   	push   edx
c00163f2:	50                   	push   eax
c00163f3:	53                   	push   ebx
c00163f4:	e8 97 28 ff ff       	call   c0008c90 <File::seek(unsigned long long)>
c00163f9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00163fb:	31 d2                	xor    edx,edx
c00163fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016400:	56                   	push   esi
c0016401:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016405:	52                   	push   edx
c0016406:	50                   	push   eax
c0016407:	53                   	push   ebx
c0016408:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001640b:	83 c4 14             	add    esp,0x14
c001640e:	53                   	push   ebx
c001640f:	e8 1c 28 ff ff       	call   c0008c30 <File::close()>
c0016414:	5d                   	pop    ebp
c0016415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016419:	e8 e9 9e ff ff       	call   c0010307 <free>
c001641e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016421:	e8 e1 9e ff ff       	call   c0010307 <free>
c0016426:	a1 00 63 03 c0       	mov    eax,ds:0xc0036300
c001642b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001642f:	8d 50 01             	lea    edx,[eax+0x1]
c0016432:	89 0c 85 e0 62 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9d20],ecx
c0016439:	89 34 85 c0 62 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9d40],esi
c0016440:	89 15 00 63 03 c0    	mov    DWORD PTR ds:0xc0036300,edx
c0016446:	83 c4 10             	add    esp,0x10
c0016449:	b0 01                	mov    al,0x1
c001644b:	83 c4 5c             	add    esp,0x5c
c001644e:	5b                   	pop    ebx
c001644f:	5e                   	pop    esi
c0016450:	5f                   	pop    edi
c0016451:	5d                   	pop    ebp
c0016452:	c3                   	ret    

c0016453 <KeIsELFValid(Elf32_Ehdr*)>:
c0016453:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016457:	31 c0                	xor    eax,eax
c0016459:	80 3a 7f             	cmp    BYTE PTR [edx],0x7f
c001645c:	75 13                	jne    c0016471 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c001645e:	80 7a 01 45          	cmp    BYTE PTR [edx+0x1],0x45
c0016462:	75 0d                	jne    c0016471 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0016464:	80 7a 02 4c          	cmp    BYTE PTR [edx+0x2],0x4c
c0016468:	75 07                	jne    c0016471 <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c001646a:	80 7a 03 46          	cmp    BYTE PTR [edx+0x3],0x46
c001646e:	0f 94 c0             	sete   al
c0016471:	c3                   	ret    

c0016472 <KeGetELFSectionHeader(unsigned char*, int)>:
c0016472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016476:	6b 54 24 08 28       	imul   edx,DWORD PTR [esp+0x8],0x28
c001647b:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
c001647e:	01 d0                	add    eax,edx
c0016480:	c3                   	ret    

c0016481 <KeGetELFProgramHeader(unsigned char*, int)>:
c0016481:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016485:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016489:	c1 e0 05             	shl    eax,0x5
c001648c:	03 42 1c             	add    eax,DWORD PTR [edx+0x1c]
c001648f:	01 d0                	add    eax,edx
c0016491:	c3                   	ret    

c0016492 <KeLookupELFString(unsigned char*, int)>:
c0016492:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016496:	31 c0                	xor    eax,eax
c0016498:	0f b7 51 32          	movzx  edx,WORD PTR [ecx+0x32]
c001649c:	85 d2                	test   edx,edx
c001649e:	74 14                	je     c00164b4 <KeLookupELFString(unsigned char*, int)+0x22>
c00164a0:	52                   	push   edx
c00164a1:	51                   	push   ecx
c00164a2:	e8 cb ff ff ff       	call   c0016472 <KeGetELFSectionHeader(unsigned char*, int)>
c00164a7:	5a                   	pop    edx
c00164a8:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c00164ab:	5a                   	pop    edx
c00164ac:	89 c8                	mov    eax,ecx
c00164ae:	74 04                	je     c00164b4 <KeLookupELFString(unsigned char*, int)+0x22>
c00164b0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00164b4:	c3                   	ret    

c00164b5 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>:
c00164b5:	55                   	push   ebp
c00164b6:	57                   	push   edi
c00164b7:	56                   	push   esi
c00164b8:	53                   	push   ebx
c00164b9:	31 db                	xor    ebx,ebx
c00164bb:	83 ec 1c             	sub    esp,0x1c
c00164be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164c2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00164c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164c9:	89 c5                	mov    ebp,eax
c00164cb:	0f b6 44 24 34       	movzx  eax,BYTE PTR [esp+0x34]
c00164d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164d8:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c00164dc:	39 d8                	cmp    eax,ebx
c00164de:	0f 8e 81 00 00 00    	jle    c0016565 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xb0>
c00164e4:	53                   	push   ebx
c00164e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00164e9:	e8 93 ff ff ff       	call   c0016481 <KeGetELFProgramHeader(unsigned char*, int)>
c00164ee:	5a                   	pop    edx
c00164ef:	83 38 01             	cmp    DWORD PTR [eax],0x1
c00164f2:	59                   	pop    ecx
c00164f3:	75 6a                	jne    c001655f <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c00164f5:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00164f8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c00164fb:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
c00164fe:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0016501:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016505:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001650a:	75 22                	jne    c001652e <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x79>
c001650c:	83 ec 0c             	sub    esp,0xc
c001650f:	68 6c c2 02 c0       	push   0xc002c26c
c0016514:	e8 33 a2 ff ff       	call   c001074c <KePanic(char const*)>
c0016519:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001651d:	01 f2                	add    edx,esi
c001651f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0016523:	83 c4 10             	add    esp,0x10
c0016526:	39 d5                	cmp    ebp,edx
c0016528:	73 35                	jae    c001655f <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c001652a:	89 d5                	mov    ebp,edx
c001652c:	eb 31                	jmp    c001655f <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xaa>
c001652e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016532:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016535:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0016539:	01 f2                	add    edx,esi
c001653b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001653f:	89 d7                	mov    edi,edx
c0016541:	03 70 04             	add    esi,DWORD PTR [eax+0x4]
c0016544:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016546:	50                   	push   eax
c0016547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001654b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001654f:	50                   	push   eax
c0016550:	6a 00                	push   0x0
c0016552:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0016556:	52                   	push   edx
c0016557:	e8 94 9f fe ff       	call   c00004f0 <memset>
c001655c:	83 c4 10             	add    esp,0x10
c001655f:	43                   	inc    ebx
c0016560:	e9 6f ff ff ff       	jmp    c00164d4 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x1f>
c0016565:	83 c4 1c             	add    esp,0x1c
c0016568:	89 e8                	mov    eax,ebp
c001656a:	5b                   	pop    ebx
c001656b:	5e                   	pop    esi
c001656c:	5f                   	pop    edi
c001656d:	5d                   	pop    ebp
c001656e:	c3                   	ret    

c001656f <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>:
c001656f:	57                   	push   edi
c0016570:	56                   	push   esi
c0016571:	53                   	push   ebx
c0016572:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016576:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001657a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001657e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016582:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016585:	85 db                	test   ebx,ebx
c0016587:	74 04                	je     c001658d <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0016589:	85 c0                	test   eax,eax
c001658b:	75 05                	jne    c0016592 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x23>
c001658d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0016590:	eb 5c                	jmp    c00165ee <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x7f>
c0016592:	50                   	push   eax
c0016593:	51                   	push   ecx
c0016594:	e8 d9 fe ff ff       	call   c0016472 <KeGetELFSectionHeader(unsigned char*, int)>
c0016599:	5f                   	pop    edi
c001659a:	89 c7                	mov    edi,eax
c001659c:	5a                   	pop    edx
c001659d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00165a0:	31 d2                	xor    edx,edx
c00165a2:	f7 77 24             	div    DWORD PTR [edi+0x24]
c00165a5:	39 c3                	cmp    ebx,eax
c00165a7:	73 e4                	jae    c001658d <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c00165a9:	c1 e3 04             	shl    ebx,0x4
c00165ac:	03 5f 10             	add    ebx,DWORD PTR [edi+0x10]
c00165af:	01 cb                	add    ebx,ecx
c00165b1:	0f b7 53 0e          	movzx  edx,WORD PTR [ebx+0xe]
c00165b5:	85 d2                	test   edx,edx
c00165b7:	75 39                	jne    c00165f2 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x83>
c00165b9:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00165bc:	51                   	push   ecx
c00165bd:	e8 b0 fe ff ff       	call   c0016472 <KeGetELFSectionHeader(unsigned char*, int)>
c00165c2:	52                   	push   edx
c00165c3:	03 0b                	add    ecx,DWORD PTR [ebx]
c00165c5:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c00165c8:	51                   	push   ecx
c00165c9:	e8 78 fb ff ff       	call   c0016146 <Thr::getAddressOfKernelSymbol(char const*)>
c00165ce:	83 c4 10             	add    esp,0x10
c00165d1:	85 c0                	test   eax,eax
c00165d3:	75 32                	jne    c0016607 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c00165d5:	f6 43 0c 20          	test   BYTE PTR [ebx+0xc],0x20
c00165d9:	75 03                	jne    c00165de <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x6f>
c00165db:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00165de:	83 ec 0c             	sub    esp,0xc
c00165e1:	68 95 c2 02 c0       	push   0xc002c295
c00165e6:	e8 91 09 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	31 c0                	xor    eax,eax
c00165f0:	eb 15                	jmp    c0016607 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c00165f2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00165f5:	81 fa f1 ff 00 00    	cmp    edx,0xfff1
c00165fb:	74 0a                	je     c0016607 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c00165fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016601:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0016605:	01 d0                	add    eax,edx
c0016607:	5b                   	pop    ebx
c0016608:	5e                   	pop    esi
c0016609:	5f                   	pop    edi
c001660a:	c3                   	ret    

c001660b <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>:
c001660b:	55                   	push   ebp
c001660c:	57                   	push   edi
c001660d:	56                   	push   esi
c001660e:	53                   	push   ebx
c001660f:	83 ec 1c             	sub    esp,0x1c
c0016612:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016616:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001661a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001661e:	8b 69 18             	mov    ebp,DWORD PTR [ecx+0x18]
c0016621:	8b 1e                	mov    ebx,DWORD PTR [esi]
c0016623:	29 ef                	sub    edi,ebp
c0016625:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0016628:	01 fb                	add    ebx,edi
c001662a:	c1 ea 08             	shr    edx,0x8
c001662d:	74 2d                	je     c001665c <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x51>
c001662f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016634:	50                   	push   eax
c0016635:	50                   	push   eax
c0016636:	55                   	push   ebp
c0016637:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001663b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001663f:	50                   	push   eax
c0016640:	52                   	push   edx
c0016641:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016645:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016648:	51                   	push   ecx
c0016649:	e8 21 ff ff ff       	call   c001656f <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>
c001664e:	83 c4 20             	add    esp,0x20
c0016651:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016656:	74 06                	je     c001665e <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x53>
c0016658:	31 c0                	xor    eax,eax
c001665a:	eb 27                	jmp    c0016683 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c001665c:	31 c0                	xor    eax,eax
c001665e:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c0016662:	83 fa 01             	cmp    edx,0x1
c0016665:	75 04                	jne    c001666b <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x60>
c0016667:	01 03                	add    DWORD PTR [ebx],eax
c0016669:	eb 16                	jmp    c0016681 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c001666b:	83 fa 02             	cmp    edx,0x2
c001666e:	75 08                	jne    c0016678 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x6d>
c0016670:	03 03                	add    eax,DWORD PTR [ebx]
c0016672:	29 d8                	sub    eax,ebx
c0016674:	89 03                	mov    DWORD PTR [ebx],eax
c0016676:	eb 09                	jmp    c0016681 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c0016678:	31 c0                	xor    eax,eax
c001667a:	83 fa 08             	cmp    edx,0x8
c001667d:	75 04                	jne    c0016683 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c001667f:	01 3b                	add    DWORD PTR [ebx],edi
c0016681:	b0 01                	mov    al,0x1
c0016683:	83 c4 1c             	add    esp,0x1c
c0016686:	5b                   	pop    ebx
c0016687:	5e                   	pop    esi
c0016688:	5f                   	pop    edi
c0016689:	5d                   	pop    ebp
c001668a:	c3                   	ret    

c001668b <KePerformRelocations(unsigned char*, unsigned long)>:
c001668b:	55                   	push   ebp
c001668c:	31 ed                	xor    ebp,ebp
c001668e:	57                   	push   edi
c001668f:	56                   	push   esi
c0016690:	53                   	push   ebx
c0016691:	83 ec 1c             	sub    esp,0x1c
c0016694:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016698:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c001669c:	39 e8                	cmp    eax,ebp
c001669e:	0f 8e 92 00 00 00    	jle    c0016736 <KePerformRelocations(unsigned char*, unsigned long)+0xab>
c00166a4:	55                   	push   ebp
c00166a5:	56                   	push   esi
c00166a6:	e8 c7 fd ff ff       	call   c0016472 <KeGetELFSectionHeader(unsigned char*, int)>
c00166ab:	5a                   	pop    edx
c00166ac:	89 c3                	mov    ebx,eax
c00166ae:	59                   	pop    ecx
c00166af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00166b2:	83 f8 09             	cmp    eax,0x9
c00166b5:	75 64                	jne    c001671b <KePerformRelocations(unsigned char*, unsigned long)+0x90>
c00166b7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00166ba:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00166bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00166c1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00166c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166c8:	ff 33                	push   DWORD PTR [ebx]
c00166ca:	56                   	push   esi
c00166cb:	e8 c2 fd ff ff       	call   c0016492 <KeLookupELFString(unsigned char*, int)>
c00166d0:	68 b6 c2 02 c0       	push   0xc002c2b6
c00166d5:	50                   	push   eax
c00166d6:	e8 75 a0 fe ff       	call   c0000750 <strcmp>
c00166db:	83 c4 10             	add    esp,0x10
c00166de:	89 c1                	mov    ecx,eax
c00166e0:	85 c0                	test   eax,eax
c00166e2:	75 4c                	jne    c0016730 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c00166e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00166e8:	31 d2                	xor    edx,edx
c00166ea:	01 f7                	add    edi,esi
c00166ec:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00166f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00166f4:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c00166f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00166fc:	7d 32                	jge    c0016730 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c00166fe:	57                   	push   edi
c00166ff:	83 c7 08             	add    edi,0x8
c0016702:	53                   	push   ebx
c0016703:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016707:	56                   	push   esi
c0016708:	e8 fe fe ff ff       	call   c001660b <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>
c001670d:	83 c4 10             	add    esp,0x10
c0016710:	84 c0                	test   al,al
c0016712:	74 24                	je     c0016738 <KePerformRelocations(unsigned char*, unsigned long)+0xad>
c0016714:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016718:	41                   	inc    ecx
c0016719:	eb d9                	jmp    c00166f4 <KePerformRelocations(unsigned char*, unsigned long)+0x69>
c001671b:	83 f8 04             	cmp    eax,0x4
c001671e:	75 10                	jne    c0016730 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0016720:	83 ec 0c             	sub    esp,0xc
c0016723:	68 bf c2 02 c0       	push   0xc002c2bf
c0016728:	e8 1f a0 ff ff       	call   c001074c <KePanic(char const*)>
c001672d:	83 c4 10             	add    esp,0x10
c0016730:	45                   	inc    ebp
c0016731:	e9 62 ff ff ff       	jmp    c0016698 <KePerformRelocations(unsigned char*, unsigned long)+0xd>
c0016736:	b0 01                	mov    al,0x1
c0016738:	83 c4 1c             	add    esp,0x1c
c001673b:	5b                   	pop    ebx
c001673c:	5e                   	pop    esi
c001673d:	5f                   	pop    edi
c001673e:	5d                   	pop    ebp
c001673f:	c3                   	ret    

c0016740 <KeLoadELF(unsigned char*, bool, unsigned long)>:
c0016740:	57                   	push   edi
c0016741:	56                   	push   esi
c0016742:	53                   	push   ebx
c0016743:	83 ec 10             	sub    esp,0x10
c0016746:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001674a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001674e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016752:	53                   	push   ebx
c0016753:	e8 fb fc ff ff       	call   c0016453 <KeIsELFValid(Elf32_Ehdr*)>
c0016758:	59                   	pop    ecx
c0016759:	84 c0                	test   al,al
c001675b:	75 04                	jne    c0016761 <KeLoadELF(unsigned char*, bool, unsigned long)+0x21>
c001675d:	31 c0                	xor    eax,eax
c001675f:	eb 4d                	jmp    c00167ae <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0016761:	81 e6 ff 00 00 00    	and    esi,0xff
c0016767:	74 07                	je     c0016770 <KeLoadELF(unsigned char*, bool, unsigned long)+0x30>
c0016769:	66 83 7b 30 00       	cmp    WORD PTR [ebx+0x30],0x0
c001676e:	74 ed                	je     c001675d <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0016770:	66 83 7b 2c 00       	cmp    WORD PTR [ebx+0x2c],0x0
c0016775:	74 e6                	je     c001675d <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0016777:	52                   	push   edx
c0016778:	57                   	push   edi
c0016779:	56                   	push   esi
c001677a:	53                   	push   ebx
c001677b:	e8 35 fd ff ff       	call   c00164b5 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>
c0016780:	59                   	pop    ecx
c0016781:	5a                   	pop    edx
c0016782:	50                   	push   eax
c0016783:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016787:	68 e0 c2 02 c0       	push   0xc002c2e0
c001678c:	e8 eb 07 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016791:	83 c4 10             	add    esp,0x10
c0016794:	85 f6                	test   esi,esi
c0016796:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001679a:	74 12                	je     c00167ae <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c001679c:	50                   	push   eax
c001679d:	50                   	push   eax
c001679e:	57                   	push   edi
c001679f:	53                   	push   ebx
c00167a0:	e8 e6 fe ff ff       	call   c001668b <KePerformRelocations(unsigned char*, unsigned long)>
c00167a5:	83 c4 10             	add    esp,0x10
c00167a8:	84 c0                	test   al,al
c00167aa:	74 b1                	je     c001675d <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c00167ac:	89 f8                	mov    eax,edi
c00167ae:	83 c4 10             	add    esp,0x10
c00167b1:	5b                   	pop    ebx
c00167b2:	5e                   	pop    esi
c00167b3:	5f                   	pop    edi
c00167b4:	c3                   	ret    

c00167b5 <KeLoadDriver(char const*)>:
c00167b5:	57                   	push   edi
c00167b6:	56                   	push   esi
c00167b7:	53                   	push   ebx
c00167b8:	83 ec 28             	sub    esp,0x28
c00167bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00167bf:	57                   	push   edi
c00167c0:	68 04 c3 02 c0       	push   0xc002c304
c00167c5:	e8 b2 07 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00167ca:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00167d1:	e8 21 9b ff ff       	call   c00102f7 <malloc>
c00167d6:	83 c4 0c             	add    esp,0xc
c00167d9:	89 c3                	mov    ebx,eax
c00167db:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c00167e1:	57                   	push   edi
c00167e2:	50                   	push   eax
c00167e3:	e8 cc 23 ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c00167e8:	83 c4 10             	add    esp,0x10
c00167eb:	85 db                	test   ebx,ebx
c00167ed:	0f 84 20 01 00 00    	je     c0016913 <KeLoadDriver(char const*)+0x15e>
c00167f3:	50                   	push   eax
c00167f4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00167f8:	50                   	push   eax
c00167f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00167fd:	50                   	push   eax
c00167fe:	53                   	push   ebx
c00167ff:	e8 d0 26 ff ff       	call   c0008ed4 <File::stat(unsigned long long*, bool*)>
c0016804:	83 c4 10             	add    esp,0x10
c0016807:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001680c:	0f 85 01 01 00 00    	jne    c0016913 <KeLoadDriver(char const*)+0x15e>
c0016812:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016816:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001681a:	89 d1                	mov    ecx,edx
c001681c:	09 c1                	or     ecx,eax
c001681e:	0f 84 ef 00 00 00    	je     c0016913 <KeLoadDriver(char const*)+0x15e>
c0016824:	05 ff 0f 00 00       	add    eax,0xfff
c0016829:	83 d2 00             	adc    edx,0x0
c001682c:	51                   	push   ecx
c001682d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016831:	6a 03                	push   0x3
c0016833:	50                   	push   eax
c0016834:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c001683a:	e8 8b dc ff ff       	call   c00144ca <VAS::allocatePages(int, int)>
c001683f:	83 c4 0c             	add    esp,0xc
c0016842:	89 c6                	mov    esi,eax
c0016844:	50                   	push   eax
c0016845:	57                   	push   edi
c0016846:	68 1a c3 02 c0       	push   0xc002c31a
c001684b:	e8 2c 07 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016850:	5f                   	pop    edi
c0016851:	58                   	pop    eax
c0016852:	6a 01                	push   0x1
c0016854:	53                   	push   ebx
c0016855:	e8 78 23 ff ff       	call   c0008bd2 <File::open(FileOpenMode)>
c001685a:	83 c4 10             	add    esp,0x10
c001685d:	85 c0                	test   eax,eax
c001685f:	74 11                	je     c0016872 <KeLoadDriver(char const*)+0xbd>
c0016861:	83 ec 0c             	sub    esp,0xc
c0016864:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016866:	53                   	push   ebx
c0016867:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001686a:	83 c4 10             	add    esp,0x10
c001686d:	e9 a1 00 00 00       	jmp    c0016913 <KeLoadDriver(char const*)+0x15e>
c0016872:	83 ec 0c             	sub    esp,0xc
c0016875:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016879:	e8 79 9a ff ff       	call   c00102f7 <malloc>
c001687e:	5a                   	pop    edx
c001687f:	89 c7                	mov    edi,eax
c0016881:	8d 54 24 20          	lea    edx,[esp+0x20]
c0016885:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016887:	52                   	push   edx
c0016888:	57                   	push   edi
c0016889:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001688d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016891:	53                   	push   ebx
c0016892:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016895:	83 c4 14             	add    esp,0x14
c0016898:	53                   	push   ebx
c0016899:	31 db                	xor    ebx,ebx
c001689b:	e8 90 23 ff ff       	call   c0008c30 <File::close()>
c00168a0:	83 c4 0c             	add    esp,0xc
c00168a3:	56                   	push   esi
c00168a4:	6a 01                	push   0x1
c00168a6:	57                   	push   edi
c00168a7:	e8 94 fe ff ff       	call   c0016740 <KeLoadELF(unsigned char*, bool, unsigned long)>
c00168ac:	83 c4 10             	add    esp,0x10
c00168af:	89 c7                	mov    edi,eax
c00168b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00168b5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00168b9:	05 ff 0f 00 00       	add    eax,0xfff
c00168be:	83 d2 00             	adc    edx,0x0
c00168c1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00168c5:	c1 ea 0c             	shr    edx,0xc
c00168c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00168cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00168d0:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c00168d4:	ba 00 00 00 00       	mov    edx,0x0
c00168d9:	89 d0                	mov    eax,edx
c00168db:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00168df:	73 34                	jae    c0016915 <KeLoadDriver(char const*)+0x160>
c00168e1:	50                   	push   eax
c00168e2:	50                   	push   eax
c00168e3:	89 d8                	mov    eax,ebx
c00168e5:	c1 e0 0c             	shl    eax,0xc
c00168e8:	01 f0                	add    eax,esi
c00168ea:	50                   	push   eax
c00168eb:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c00168f1:	e8 d6 d6 ff ff       	call   c0013fcc <VAS::getPageTableEntry(unsigned long)>
c00168f6:	83 c4 10             	add    esp,0x10
c00168f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00168fb:	a8 60                	test   al,0x60
c00168fd:	75 11                	jne    c0016910 <KeLoadDriver(char const*)+0x15b>
c00168ff:	83 ec 0c             	sub    esp,0xc
c0016902:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016907:	50                   	push   eax
c0016908:	e8 ca 9f ff ff       	call   c00108d7 <Phys::freePage(unsigned long)>
c001690d:	83 c4 10             	add    esp,0x10
c0016910:	43                   	inc    ebx
c0016911:	eb 9e                	jmp    c00168b1 <KeLoadDriver(char const*)+0xfc>
c0016913:	31 ff                	xor    edi,edi
c0016915:	83 c4 20             	add    esp,0x20
c0016918:	89 f8                	mov    eax,edi
c001691a:	5b                   	pop    ebx
c001691b:	5e                   	pop    esi
c001691c:	5f                   	pop    edi
c001691d:	c3                   	ret    

c001691e <KeExecuteDriver(unsigned long, void*)>:
c001691e:	56                   	push   esi
c001691f:	53                   	push   ebx
c0016920:	51                   	push   ecx
c0016921:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016925:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016929:	85 db                	test   ebx,ebx
c001692b:	75 10                	jne    c001693d <KeExecuteDriver(unsigned long, void*)+0x1f>
c001692d:	83 ec 0c             	sub    esp,0xc
c0016930:	68 26 c3 02 c0       	push   0xc002c326
c0016935:	e8 12 9e ff ff       	call   c001074c <KePanic(char const*)>
c001693a:	83 c4 10             	add    esp,0x10
c001693d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0016941:	89 d8                	mov    eax,ebx
c0016943:	5a                   	pop    edx
c0016944:	5b                   	pop    ebx
c0016945:	5e                   	pop    esi
c0016946:	ff e0                	jmp    eax

c0016948 <KeLoadAndExecuteDriver(char const*, void*, bool)>:
c0016948:	57                   	push   edi
c0016949:	56                   	push   esi
c001694a:	53                   	push   ebx
c001694b:	81 ec 0c 01 00 00    	sub    esp,0x10c
c0016951:	8b b4 24 1c 01 00 00 	mov    esi,DWORD PTR [esp+0x11c]
c0016958:	8b bc 24 24 01 00 00 	mov    edi,DWORD PTR [esp+0x124]
c001695f:	56                   	push   esi
c0016960:	e8 50 fe ff ff       	call   c00167b5 <KeLoadDriver(char const*)>
c0016965:	83 c4 10             	add    esp,0x10
c0016968:	85 c0                	test   eax,eax
c001696a:	74 16                	je     c0016982 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x3a>
c001696c:	53                   	push   ebx
c001696d:	53                   	push   ebx
c001696e:	b3 01                	mov    bl,0x1
c0016970:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0016977:	50                   	push   eax
c0016978:	e8 a1 ff ff ff       	call   c001691e <KeExecuteDriver(unsigned long, void*)>
c001697d:	83 c4 10             	add    esp,0x10
c0016980:	eb 2d                	jmp    c00169af <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0016982:	89 fb                	mov    ebx,edi
c0016984:	84 db                	test   bl,bl
c0016986:	74 27                	je     c00169af <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0016988:	50                   	push   eax
c0016989:	50                   	push   eax
c001698a:	68 50 c3 02 c0       	push   0xc002c350
c001698f:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0016993:	53                   	push   ebx
c0016994:	e8 a7 9c fe ff       	call   c0000640 <strcpy>
c0016999:	5a                   	pop    edx
c001699a:	59                   	pop    ecx
c001699b:	56                   	push   esi
c001699c:	53                   	push   ebx
c001699d:	e8 9e 9e fe ff       	call   c0000840 <strcat>
c00169a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169a5:	e8 a2 9d ff ff       	call   c001074c <KePanic(char const*)>
c00169aa:	31 db                	xor    ebx,ebx
c00169ac:	83 c4 10             	add    esp,0x10
c00169af:	81 c4 00 01 00 00    	add    esp,0x100
c00169b5:	88 d8                	mov    al,bl
c00169b7:	5b                   	pop    ebx
c00169b8:	5e                   	pop    esi
c00169b9:	5f                   	pop    edi
c00169ba:	c3                   	ret    

c00169bb <KeProcessExec(Process*, char const*)>:
c00169bb:	56                   	push   esi
c00169bc:	53                   	push   ebx
c00169bd:	83 ec 04             	sub    esp,0x4
c00169c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169c4:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c00169ca:	85 f6                	test   esi,esi
c00169cc:	74 16                	je     c00169e4 <KeProcessExec(Process*, char const*)+0x29>
c00169ce:	83 ec 0c             	sub    esp,0xc
c00169d1:	56                   	push   esi
c00169d2:	e8 87 d8 ff ff       	call   c001425e <VAS::~VAS()>
c00169d7:	58                   	pop    eax
c00169d8:	5a                   	pop    edx
c00169d9:	6a 14                	push   0x14
c00169db:	56                   	push   esi
c00169dc:	e8 23 74 ff ff       	call   c000de04 <operator delete(void*, unsigned long)>
c00169e1:	83 c4 10             	add    esp,0x10
c00169e4:	83 ec 0c             	sub    esp,0xc
c00169e7:	6a 14                	push   0x14
c00169e9:	e8 09 99 ff ff       	call   c00102f7 <malloc>
c00169ee:	89 c6                	mov    esi,eax
c00169f0:	58                   	pop    eax
c00169f1:	5a                   	pop    edx
c00169f2:	6a 00                	push   0x0
c00169f4:	56                   	push   esi
c00169f5:	e8 04 dd ff ff       	call   c00146fe <VAS::VAS(bool)>
c00169fa:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0016a00:	59                   	pop    ecx
c0016a01:	5e                   	pop    esi
c0016a02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a06:	50                   	push   eax
c0016a07:	53                   	push   ebx
c0016a08:	e8 8e f4 ff ff       	call   c0015e9b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016a0d:	83 c4 14             	add    esp,0x14
c0016a10:	31 c0                	xor    eax,eax
c0016a12:	5b                   	pop    ebx
c0016a13:	5e                   	pop    esi
c0016a14:	c3                   	ret    
c0016a15:	66 90                	xchg   ax,ax
c0016a17:	90                   	nop

c0016a18 <userModeEntryPoint(void*)>:
c0016a18:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0016a20:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0016a25:	85 c0                	test   eax,eax
c0016a27:	75 03                	jne    c0016a2c <userModeEntryPoint(void*)+0x14>
c0016a29:	fb                   	sti    
c0016a2a:	66 90                	xchg   ax,ax
c0016a2c:	fb                   	sti    
c0016a2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016a35:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0016a3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016a3f:	e9 fb 97 fe ff       	jmp    c000023f <goToUsermode>

c0016a44 <changeTSS>:
c0016a44:	83 ec 14             	sub    esp,0x14
c0016a47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a4c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0016a4f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016a54:	c1 e2 15             	shl    edx,0x15
c0016a57:	29 d0                	sub    eax,edx
c0016a59:	50                   	push   eax
c0016a5a:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c0016a5f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a65:	05 68 11 00 00       	add    eax,0x1168
c0016a6a:	50                   	push   eax
c0016a6b:	e8 34 cb ff ff       	call   c00135a4 <TSS::setESP(unsigned long)>
c0016a70:	83 c4 1c             	add    esp,0x1c
c0016a73:	c3                   	ret    

c0016a74 <switchToThread(ThreadControlBlock*)>:
c0016a74:	57                   	push   edi
c0016a75:	8b 0d 2c 63 03 c0    	mov    ecx,DWORD PTR ds:0xc003632c
c0016a7b:	56                   	push   esi
c0016a7c:	85 c9                	test   ecx,ecx
c0016a7e:	53                   	push   ebx
c0016a7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a83:	0f 85 9b 00 00 00    	jne    c0016b24 <switchToThread(ThreadControlBlock*)+0xb0>
c0016a89:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0016a8d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0016a93:	0f 84 87 00 00 00    	je     c0016b20 <switchToThread(ThreadControlBlock*)+0xac>
c0016a99:	b8 00 04 00 00       	mov    eax,0x400
c0016a9e:	29 d0                	sub    eax,edx
c0016aa0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0016aa3:	d1 f8                	sar    eax,1
c0016aa5:	01 d0                	add    eax,edx
c0016aa7:	90                   	nop
c0016aa8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016aab:	e8 33 49 00 00       	call   c001b3e3 <HalQueryPerformanceCounter()>
c0016ab0:	a3 70 63 03 c0       	mov    ds:0xc0036370,eax
c0016ab5:	89 15 74 63 03 c0    	mov    DWORD PTR ds:0xc0036374,edx
c0016abb:	89 c6                	mov    esi,eax
c0016abd:	89 d7                	mov    edi,edx
c0016abf:	2b 35 60 63 03 c0    	sub    esi,DWORD PTR ds:0xc0036360
c0016ac5:	a3 60 63 03 c0       	mov    ds:0xc0036360,eax
c0016aca:	1b 3d 64 63 03 c0    	sbb    edi,DWORD PTR ds:0xc0036364
c0016ad0:	89 35 68 63 03 c0    	mov    DWORD PTR ds:0xc0036368,esi
c0016ad6:	89 3d 6c 63 03 c0    	mov    DWORD PTR ds:0xc003636c,edi
c0016adc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016ae2:	89 15 64 63 03 c0    	mov    DWORD PTR ds:0xc0036364,edx
c0016ae8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016aeb:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016aee:	01 c6                	add    esi,eax
c0016af0:	11 d7                	adc    edi,edx
c0016af2:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016af5:	83 ec 0c             	sub    esp,0xc
c0016af8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016afb:	53                   	push   ebx
c0016afc:	e8 76 97 fe ff       	call   c0000277 <switchToThreadASM>
c0016b01:	0f 20 c0             	mov    eax,cr0
c0016b04:	83 c8 08             	or     eax,0x8
c0016b07:	0f 22 c0             	mov    cr0,eax
c0016b0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b0f:	83 c4 10             	add    esp,0x10
c0016b12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b16:	5b                   	pop    ebx
c0016b17:	5e                   	pop    esi
c0016b18:	5f                   	pop    edi
c0016b19:	e9 fa ef ff ff       	jmp    c0015b18 <KeCheckAlarm(ThreadControlBlock*)>
c0016b1e:	66 90                	xchg   ax,ax
c0016b20:	31 c0                	xor    eax,eax
c0016b22:	eb 84                	jmp    c0016aa8 <switchToThread(ThreadControlBlock*)+0x34>
c0016b24:	5b                   	pop    ebx
c0016b25:	c7 05 28 63 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x1
c0016b2f:	5e                   	pop    esi
c0016b30:	5f                   	pop    edi
c0016b31:	c3                   	ret    
c0016b32:	66 90                	xchg   ax,ax

c0016b34 <Process::addArgs(char**)>:
c0016b34:	57                   	push   edi
c0016b35:	56                   	push   esi
c0016b36:	53                   	push   ebx
c0016b37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016b3f:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c0016b49:	85 ff                	test   edi,edi
c0016b4b:	74 4f                	je     c0016b9c <Process::addArgs(char**)+0x68>
c0016b4d:	8b 07                	mov    eax,DWORD PTR [edi]
c0016b4f:	85 c0                	test   eax,eax
c0016b51:	74 49                	je     c0016b9c <Process::addArgs(char**)+0x68>
c0016b53:	31 db                	xor    ebx,ebx
c0016b55:	8d 76 00             	lea    esi,[esi+0x0]
c0016b58:	83 ec 0c             	sub    esp,0xc
c0016b5b:	50                   	push   eax
c0016b5c:	e8 0f 9a fe ff       	call   c0000570 <strlen>
c0016b61:	83 c0 01             	add    eax,0x1
c0016b64:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b67:	e8 8b 97 ff ff       	call   c00102f7 <malloc>
c0016b6c:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c0016b73:	5a                   	pop    edx
c0016b74:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0016b77:	59                   	pop    ecx
c0016b78:	83 c3 01             	add    ebx,0x1
c0016b7b:	52                   	push   edx
c0016b7c:	50                   	push   eax
c0016b7d:	e8 be 9a fe ff       	call   c0000640 <strcpy>
c0016b82:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c0016b88:	83 c4 10             	add    esp,0x10
c0016b8b:	83 c1 01             	add    ecx,0x1
c0016b8e:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c0016b94:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0016b97:	85 c0                	test   eax,eax
c0016b99:	75 bd                	jne    c0016b58 <Process::addArgs(char**)+0x24>
c0016b9b:	90                   	nop
c0016b9c:	5b                   	pop    ebx
c0016b9d:	5e                   	pop    esi
c0016b9e:	5f                   	pop    edi
c0016b9f:	c3                   	ret    

c0016ba0 <Process::Process(char const*, Process*, char**)>:
c0016ba0:	56                   	push   esi
c0016ba1:	53                   	push   ebx
c0016ba2:	83 ec 14             	sub    esp,0x14
c0016ba5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba9:	05 0c 02 00 00       	add    eax,0x20c
c0016bae:	bb 07 00 00 00       	mov    ebx,0x7
c0016bb3:	89 c6                	mov    esi,eax
c0016bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0016bb8:	85 db                	test   ebx,ebx
c0016bba:	78 14                	js     c0016bd0 <Process::Process(char const*, Process*, char**)+0x30>
c0016bbc:	83 ec 0c             	sub    esp,0xc
c0016bbf:	56                   	push   esi
c0016bc0:	e8 5f 29 01 00       	call   c0029524 <ThreadControlBlock::ThreadControlBlock()>
c0016bc5:	83 c4 10             	add    esp,0x10
c0016bc8:	83 c6 73             	add    esi,0x73
c0016bcb:	83 eb 01             	sub    ebx,0x1
c0016bce:	eb e8                	jmp    c0016bb8 <Process::Process(char const*, Process*, char**)+0x18>
c0016bd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd4:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bdf:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016be6:	83 ec 0c             	sub    esp,0xc
c0016be9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016bed:	e8 48 84 ff ff       	call   c000f03a <KeNewProcessEnv(Process*)>
c0016bf2:	83 c4 10             	add    esp,0x10
c0016bf5:	89 c2                	mov    edx,eax
c0016bf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bfb:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016c01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c05:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016c0e:	a1 dc fe 02 c0       	mov    eax,ds:0xc002fedc
c0016c13:	8d 50 01             	lea    edx,[eax+0x1]
c0016c16:	89 15 dc fe 02 c0    	mov    DWORD PTR ds:0xc002fedc,edx
c0016c1c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016c20:	89 02                	mov    DWORD PTR [edx],eax
c0016c22:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016c2a:	83 ec 0c             	sub    esp,0xc
c0016c2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016c31:	e8 c1 96 ff ff       	call   c00102f7 <malloc>
c0016c36:	83 c4 10             	add    esp,0x10
c0016c39:	89 c3                	mov    ebx,eax
c0016c3b:	83 ec 08             	sub    esp,0x8
c0016c3e:	6a 00                	push   0x0
c0016c40:	53                   	push   ebx
c0016c41:	e8 b8 da ff ff       	call   c00146fe <VAS::VAS(bool)>
c0016c46:	83 c4 10             	add    esp,0x10
c0016c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c4d:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016c53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c57:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016c61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016c69:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016c6f:	e8 4b ac ff ff       	call   c00118bf <KeInitSignals()>
c0016c74:	89 c2                	mov    edx,eax
c0016c76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c7a:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016c80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c84:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016c8a:	85 c0                	test   eax,eax
c0016c8c:	74 42                	je     c0016cd0 <Process::Process(char const*, Process*, char**)+0x130>
c0016c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c92:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016c98:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ca2:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016ca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cac:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016cb2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016cb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cbc:	05 0c 01 00 00       	add    eax,0x10c
c0016cc1:	83 ec 08             	sub    esp,0x8
c0016cc4:	52                   	push   edx
c0016cc5:	50                   	push   eax
c0016cc6:	e8 75 99 fe ff       	call   c0000640 <strcpy>
c0016ccb:	83 c4 10             	add    esp,0x10
c0016cce:	eb 7c                	jmp    c0016d4c <Process::Process(char const*, Process*, char**)+0x1ac>
c0016cd0:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016cd8:	83 ec 0c             	sub    esp,0xc
c0016cdb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016cdf:	e8 13 96 ff ff       	call   c00102f7 <malloc>
c0016ce4:	83 c4 10             	add    esp,0x10
c0016ce7:	89 c3                	mov    ebx,eax
c0016ce9:	83 ec 08             	sub    esp,0x8
c0016cec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cf0:	53                   	push   ebx
c0016cf1:	e8 ae c5 ff ff       	call   c00132a4 <VgaText::VgaText(char const*)>
c0016cf6:	83 c4 10             	add    esp,0x10
c0016cf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cfd:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d07:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016d0d:	83 ec 0c             	sub    esp,0xc
c0016d10:	50                   	push   eax
c0016d11:	e8 e4 bd ff ff       	call   c0012afa <addToTerminalCycle(VgaText*)>
c0016d16:	83 c4 10             	add    esp,0x10
c0016d19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d1d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016d23:	83 ec 0c             	sub    esp,0xc
c0016d26:	50                   	push   eax
c0016d27:	e8 3f c0 ff ff       	call   c0012d6b <setActiveTerminal(VgaText*)>
c0016d2c:	83 c4 10             	add    esp,0x10
c0016d2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d33:	05 0c 01 00 00       	add    eax,0x10c
c0016d38:	83 ec 08             	sub    esp,0x8
c0016d3b:	68 64 c3 02 c0       	push   0xc002c364
c0016d40:	50                   	push   eax
c0016d41:	e8 fa 98 fe ff       	call   c0000640 <strcpy>
c0016d46:	83 c4 10             	add    esp,0x10
c0016d49:	8d 76 00             	lea    esi,[esi+0x0]
c0016d4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d50:	83 c0 0c             	add    eax,0xc
c0016d53:	83 ec 08             	sub    esp,0x8
c0016d56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d5a:	50                   	push   eax
c0016d5b:	e8 e0 98 fe ff       	call   c0000640 <strcpy>
c0016d60:	83 c4 10             	add    esp,0x10
c0016d63:	83 ec 08             	sub    esp,0x8
c0016d66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d6e:	e8 c1 fd ff ff       	call   c0016b34 <Process::addArgs(char**)>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d7a:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016d80:	83 e2 7f             	and    edx,0x7f
c0016d83:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016d89:	83 ec 08             	sub    esp,0x8
c0016d8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d94:	e8 02 f1 ff ff       	call   c0015e9b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016d99:	83 c4 10             	add    esp,0x10
c0016d9c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016da0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016da4:	83 f0 01             	xor    eax,0x1
c0016da7:	88 c2                	mov    dl,al
c0016da9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dad:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016db7:	8b 10                	mov    edx,DWORD PTR [eax]
c0016db9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016dbe:	52                   	push   edx
c0016dbf:	50                   	push   eax
c0016dc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016dc4:	68 d0 c3 02 c0       	push   0xc002c3d0
c0016dc9:	e8 ae 01 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016dce:	83 c4 10             	add    esp,0x10
c0016dd1:	90                   	nop
c0016dd2:	83 c4 14             	add    esp,0x14
c0016dd5:	5b                   	pop    ebx
c0016dd6:	5e                   	pop    esi
c0016dd7:	c3                   	ret    

c0016dd8 <Process::Process(bool, char const*, Process*, char**)>:
c0016dd8:	56                   	push   esi
c0016dd9:	53                   	push   ebx
c0016dda:	83 ec 24             	sub    esp,0x24
c0016ddd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016de1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016de5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016de9:	05 0c 02 00 00       	add    eax,0x20c
c0016dee:	bb 07 00 00 00       	mov    ebx,0x7
c0016df3:	89 c6                	mov    esi,eax
c0016df5:	8d 76 00             	lea    esi,[esi+0x0]
c0016df8:	85 db                	test   ebx,ebx
c0016dfa:	78 14                	js     c0016e10 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016dfc:	83 ec 0c             	sub    esp,0xc
c0016dff:	56                   	push   esi
c0016e00:	e8 1f 27 01 00       	call   c0029524 <ThreadControlBlock::ThreadControlBlock()>
c0016e05:	83 c4 10             	add    esp,0x10
c0016e08:	83 c6 73             	add    esi,0x73
c0016e0b:	83 eb 01             	sub    ebx,0x1
c0016e0e:	eb e8                	jmp    c0016df8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016e10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e14:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016e1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e1f:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0016e26:	83 ec 0c             	sub    esp,0xc
c0016e29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016e2d:	e8 08 82 ff ff       	call   c000f03a <KeNewProcessEnv(Process*)>
c0016e32:	83 c4 10             	add    esp,0x10
c0016e35:	89 c2                	mov    edx,eax
c0016e37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e3b:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016e41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e45:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016e4e:	a1 dc fe 02 c0       	mov    eax,ds:0xc002fedc
c0016e53:	8d 50 01             	lea    edx,[eax+0x1]
c0016e56:	89 15 dc fe 02 c0    	mov    DWORD PTR ds:0xc002fedc,edx
c0016e5c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016e60:	89 02                	mov    DWORD PTR [edx],eax
c0016e62:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016e6a:	83 ec 0c             	sub    esp,0xc
c0016e6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016e71:	e8 81 94 ff ff       	call   c00102f7 <malloc>
c0016e76:	83 c4 10             	add    esp,0x10
c0016e79:	89 c3                	mov    ebx,eax
c0016e7b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016e80:	83 ec 08             	sub    esp,0x8
c0016e83:	50                   	push   eax
c0016e84:	53                   	push   ebx
c0016e85:	e8 74 d8 ff ff       	call   c00146fe <VAS::VAS(bool)>
c0016e8a:	83 c4 10             	add    esp,0x10
c0016e8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e91:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016e97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e9b:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016ea5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ea9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016ead:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016eb3:	e8 07 aa ff ff       	call   c00118bf <KeInitSignals()>
c0016eb8:	89 c2                	mov    edx,eax
c0016eba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ebe:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016ec4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ec8:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ece:	85 c0                	test   eax,eax
c0016ed0:	74 42                	je     c0016f14 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016ed2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ed6:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016edc:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016ee2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ee6:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016eec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ef0:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016ef6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016efc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f00:	05 0c 01 00 00       	add    eax,0x10c
c0016f05:	83 ec 08             	sub    esp,0x8
c0016f08:	52                   	push   edx
c0016f09:	50                   	push   eax
c0016f0a:	e8 31 97 fe ff       	call   c0000640 <strcpy>
c0016f0f:	83 c4 10             	add    esp,0x10
c0016f12:	eb 7c                	jmp    c0016f90 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016f14:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016f1c:	83 ec 0c             	sub    esp,0xc
c0016f1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016f23:	e8 cf 93 ff ff       	call   c00102f7 <malloc>
c0016f28:	83 c4 10             	add    esp,0x10
c0016f2b:	89 c3                	mov    ebx,eax
c0016f2d:	83 ec 08             	sub    esp,0x8
c0016f30:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f34:	53                   	push   ebx
c0016f35:	e8 6a c3 ff ff       	call   c00132a4 <VgaText::VgaText(char const*)>
c0016f3a:	83 c4 10             	add    esp,0x10
c0016f3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f41:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016f47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f4b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016f51:	83 ec 0c             	sub    esp,0xc
c0016f54:	50                   	push   eax
c0016f55:	e8 a0 bb ff ff       	call   c0012afa <addToTerminalCycle(VgaText*)>
c0016f5a:	83 c4 10             	add    esp,0x10
c0016f5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f61:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016f67:	83 ec 0c             	sub    esp,0xc
c0016f6a:	50                   	push   eax
c0016f6b:	e8 fb bd ff ff       	call   c0012d6b <setActiveTerminal(VgaText*)>
c0016f70:	83 c4 10             	add    esp,0x10
c0016f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f77:	05 0c 01 00 00       	add    eax,0x10c
c0016f7c:	83 ec 08             	sub    esp,0x8
c0016f7f:	68 64 c3 02 c0       	push   0xc002c364
c0016f84:	50                   	push   eax
c0016f85:	e8 b6 96 fe ff       	call   c0000640 <strcpy>
c0016f8a:	83 c4 10             	add    esp,0x10
c0016f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f94:	83 c0 0c             	add    eax,0xc
c0016f97:	83 ec 08             	sub    esp,0x8
c0016f9a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f9e:	50                   	push   eax
c0016f9f:	e8 9c 96 fe ff       	call   c0000640 <strcpy>
c0016fa4:	83 c4 10             	add    esp,0x10
c0016fa7:	83 ec 08             	sub    esp,0x8
c0016faa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016fae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016fb2:	e8 7d fb ff ff       	call   c0016b34 <Process::addArgs(char**)>
c0016fb7:	83 c4 10             	add    esp,0x10
c0016fba:	90                   	nop
c0016fbb:	83 c4 24             	add    esp,0x24
c0016fbe:	5b                   	pop    ebx
c0016fbf:	5e                   	pop    esi
c0016fc0:	c3                   	ret    
c0016fc1:	8d 76 00             	lea    esi,[esi+0x0]

c0016fc4 <taskStartupFunction>:
c0016fc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fc9:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016fcc:	c3                   	ret    
c0016fcd:	8d 76 00             	lea    esi,[esi+0x0]

c0016fd0 <KeDisablePreemption()>:
c0016fd0:	a1 0c 63 03 c0       	mov    eax,ds:0xc003630c
c0016fd5:	85 c0                	test   eax,eax
c0016fd7:	75 13                	jne    c0016fec <KeDisablePreemption()+0x1c>
c0016fd9:	8a 15 0c 61 03 c0    	mov    dl,BYTE PTR ds:0xc003610c
c0016fdf:	c6 05 0c 61 03 c0 00 	mov    BYTE PTR ds:0xc003610c,0x0
c0016fe6:	88 15 08 63 03 c0    	mov    BYTE PTR ds:0xc0036308,dl
c0016fec:	83 c0 01             	add    eax,0x1
c0016fef:	a3 0c 63 03 c0       	mov    ds:0xc003630c,eax
c0016ff4:	c3                   	ret    
c0016ff5:	8d 76 00             	lea    esi,[esi+0x0]

c0016ff8 <KeRestorePreemption()>:
c0016ff8:	a1 0c 63 03 c0       	mov    eax,ds:0xc003630c
c0016ffd:	83 e8 01             	sub    eax,0x1
c0017000:	a3 0c 63 03 c0       	mov    ds:0xc003630c,eax
c0017005:	75 0d                	jne    c0017014 <KeRestorePreemption()+0x1c>
c0017007:	a0 08 63 03 c0       	mov    al,ds:0xc0036308
c001700c:	a2 0c 61 03 c0       	mov    ds:0xc003610c,al
c0017011:	8d 76 00             	lea    esi,[esi+0x0]
c0017014:	c3                   	ret    
c0017015:	90                   	nop
c0017016:	66 90                	xchg   ax,ax

c0017018 <Process::createThread(void (*)(void*), void*, int)>:
c0017018:	55                   	push   ebp
c0017019:	31 c9                	xor    ecx,ecx
c001701b:	57                   	push   edi
c001701c:	56                   	push   esi
c001701d:	53                   	push   ebx
c001701e:	83 ec 0c             	sub    esp,0xc
c0017021:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017025:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c001702c:	89 f2                	mov    edx,esi
c001702e:	66 90                	xchg   ax,ax
c0017030:	0f b7 c2             	movzx  eax,dx
c0017033:	80 e2 01             	and    dl,0x1
c0017036:	74 18                	je     c0017050 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0017038:	d1 f8                	sar    eax,1
c001703a:	83 c1 01             	add    ecx,0x1
c001703d:	89 c2                	mov    edx,eax
c001703f:	83 f9 10             	cmp    ecx,0x10
c0017042:	75 ec                	jne    c0017030 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0017044:	83 c4 0c             	add    esp,0xc
c0017047:	31 db                	xor    ebx,ebx
c0017049:	89 d8                	mov    eax,ebx
c001704b:	5b                   	pop    ebx
c001704c:	5e                   	pop    esi
c001704d:	5f                   	pop    edi
c001704e:	5d                   	pop    ebp
c001704f:	c3                   	ret    
c0017050:	b8 01 00 00 00       	mov    eax,0x1
c0017055:	d3 e0                	shl    eax,cl
c0017057:	09 c6                	or     esi,eax
c0017059:	8d 04 89             	lea    eax,[ecx+ecx*4]
c001705c:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0017063:	01 c0                	add    eax,eax
c0017065:	01 c8                	add    eax,ecx
c0017067:	01 c0                	add    eax,eax
c0017069:	01 c8                	add    eax,ecx
c001706b:	8d 04 80             	lea    eax,[eax+eax*4]
c001706e:	01 d8                	add    eax,ebx
c0017070:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0017077:	75 0b                	jne    c0017084 <Process::createThread(void (*)(void*), void*, int)+0x6c>
c0017079:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0017083:	90                   	nop
c0017084:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c001708a:	83 ec 0c             	sub    esp,0xc
c001708d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017090:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0017093:	01 c0                	add    eax,eax
c0017095:	01 c8                	add    eax,ecx
c0017097:	01 c0                	add    eax,eax
c0017099:	01 c8                	add    eax,ecx
c001709b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001709e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00170a1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00170a7:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00170ad:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00170b1:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00170b7:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c00170bd:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c00170c3:	89 ca                	mov    edx,ecx
c00170c5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00170cc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00170d0:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c00170da:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c00170e4:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c00170eb:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c00170f2:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c00170f9:	f7 da                	neg    edx
c00170fb:	c1 e2 15             	shl    edx,0x15
c00170fe:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017104:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001710a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001710e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017118:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001711e:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0017124:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c001712a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017134:	83 e2 80             	and    edx,0xffffff80
c0017137:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017141:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0017147:	68 00 01 00 00       	push   0x100
c001714c:	e8 a6 91 ff ff       	call   c00102f7 <malloc>
c0017151:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0017154:	58                   	pop    eax
c0017155:	5a                   	pop    edx
c0017156:	53                   	push   ebx
c0017157:	68 68 c3 02 c0       	push   0xc002c368
c001715c:	e8 1b fe fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017161:	59                   	pop    ecx
c0017162:	5e                   	pop    esi
c0017163:	53                   	push   ebx
c0017164:	68 4c 63 03 c0       	push   0xc003634c
c0017169:	e8 62 1f 01 00       	call   c00290d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001716e:	89 d8                	mov    eax,ebx
c0017170:	83 c4 10             	add    esp,0x10
c0017173:	83 c4 0c             	add    esp,0xc
c0017176:	5b                   	pop    ebx
c0017177:	5e                   	pop    esi
c0017178:	5f                   	pop    edi
c0017179:	5d                   	pop    ebp
c001717a:	c3                   	ret    
c001717b:	90                   	nop

c001717c <Process::createUserThread()>:
c001717c:	83 ec 0c             	sub    esp,0xc
c001717f:	68 80 00 00 00       	push   0x80
c0017184:	6a 00                	push   0x0
c0017186:	68 18 6a 01 c0       	push   0xc0016a18
c001718b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001718f:	50                   	push   eax
c0017190:	e8 83 fe ff ff       	call   c0017018 <Process::createThread(void (*)(void*), void*, int)>
c0017195:	83 c4 1c             	add    esp,0x1c
c0017198:	c3                   	ret    
c0017199:	8d 76 00             	lea    esi,[esi+0x0]

c001719c <setupMultitasking(void (*)())>:
c001719c:	56                   	push   esi
c001719d:	53                   	push   ebx
c001719e:	83 ec 04             	sub    esp,0x4
c00171a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00171a5:	eb 11                	jmp    c00171b8 <setupMultitasking(void (*)())+0x1c>
c00171a7:	90                   	nop
c00171a8:	83 ec 0c             	sub    esp,0xc
c00171ab:	68 4c 63 03 c0       	push   0xc003634c
c00171b0:	e8 5f 1e 01 00       	call   c0029014 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00171b5:	83 c4 10             	add    esp,0x10
c00171b8:	83 ec 0c             	sub    esp,0xc
c00171bb:	68 4c 63 03 c0       	push   0xc003634c
c00171c0:	e8 2b 1e 01 00       	call   c0028ff0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00171c5:	83 c4 10             	add    esp,0x10
c00171c8:	84 c0                	test   al,al
c00171ca:	74 dc                	je     c00171a8 <setupMultitasking(void (*)())+0xc>
c00171cc:	83 ec 0c             	sub    esp,0xc
c00171cf:	68 c4 07 00 00       	push   0x7c4
c00171d4:	e8 1e 91 ff ff       	call   c00102f7 <malloc>
c00171d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00171e0:	89 c3                	mov    ebx,eax
c00171e2:	6a 00                	push   0x0
c00171e4:	68 7c c3 02 c0       	push   0xc002c37c
c00171e9:	6a 01                	push   0x1
c00171eb:	50                   	push   eax
c00171ec:	e8 e7 fb ff ff       	call   c0016dd8 <Process::Process(bool, char const*, Process*, char**)>
c00171f1:	83 c4 14             	add    esp,0x14
c00171f4:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c00171fa:	89 1d 58 63 03 c0    	mov    DWORD PTR ds:0xc0036358,ebx
c0017200:	50                   	push   eax
c0017201:	e8 65 bb ff ff       	call   c0012d6b <setActiveTerminal(VgaText*)>
c0017206:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c001720d:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0017217:	83 c8 01             	or     eax,0x1
c001721a:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0017221:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0017227:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001722a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017234:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001723a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017240:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001724a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017254:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001725e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017264:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001726e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017274:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001727e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0017285:	e8 6d 90 ff ff       	call   c00102f7 <malloc>
c001728a:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0017294:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001729a:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c00172a1:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c00172a8:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c00172af:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c00172b6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00172bc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00172c2:	5a                   	pop    edx
c00172c3:	59                   	pop    ecx
c00172c4:	68 64 c3 02 c0       	push   0xc002c364
c00172c9:	50                   	push   eax
c00172ca:	e8 71 93 fe ff       	call   c0000640 <strcpy>
c00172cf:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c00172d6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00172da:	83 c4 14             	add    esp,0x14
c00172dd:	5b                   	pop    ebx
c00172de:	5e                   	pop    esi
c00172df:	e9 85 8f fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c00172e4 <schedule()>:
c00172e4:	8b 15 2c 63 03 c0    	mov    edx,DWORD PTR ds:0xc003632c
c00172ea:	85 d2                	test   edx,edx
c00172ec:	74 0e                	je     c00172fc <schedule()+0x18>
c00172ee:	c7 05 28 63 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x1
c00172f8:	c3                   	ret    
c00172f9:	8d 76 00             	lea    esi,[esi+0x0]
c00172fc:	53                   	push   ebx
c00172fd:	83 ec 14             	sub    esp,0x14
c0017300:	68 4c 63 03 c0       	push   0xc003634c
c0017305:	e8 e6 1c 01 00       	call   c0028ff0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001730a:	83 c4 10             	add    esp,0x10
c001730d:	84 c0                	test   al,al
c001730f:	75 3f                	jne    c0017350 <schedule()+0x6c>
c0017311:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017316:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017319:	83 fa 01             	cmp    edx,0x1
c001731c:	74 3a                	je     c0017358 <schedule()+0x74>
c001731e:	66 90                	xchg   ax,ax
c0017320:	83 ec 0c             	sub    esp,0xc
c0017323:	68 4c 63 03 c0       	push   0xc003634c
c0017328:	e8 df 1c 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001732d:	c7 04 24 4c 63 03 c0 	mov    DWORD PTR [esp],0xc003634c
c0017334:	89 c3                	mov    ebx,eax
c0017336:	e8 d9 1c 01 00       	call   c0029014 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001733b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017342:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017345:	e8 2a f7 ff ff       	call   c0016a74 <switchToThread(ThreadControlBlock*)>
c001734a:	83 c4 10             	add    esp,0x10
c001734d:	8d 76 00             	lea    esi,[esi+0x0]
c0017350:	83 c4 08             	add    esp,0x8
c0017353:	5b                   	pop    ebx
c0017354:	c3                   	ret    
c0017355:	8d 76 00             	lea    esi,[esi+0x0]
c0017358:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001735f:	83 ec 08             	sub    esp,0x8
c0017362:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017367:	50                   	push   eax
c0017368:	68 4c 63 03 c0       	push   0xc003634c
c001736d:	e8 5e 1d 01 00       	call   c00290d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017372:	83 c4 10             	add    esp,0x10
c0017375:	eb a9                	jmp    c0017320 <schedule()+0x3c>
c0017377:	90                   	nop

c0017378 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017378:	83 ec 0c             	sub    esp,0xc
c001737b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017380:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017384:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017387:	e8 58 ff ff ff       	call   c00172e4 <schedule()>
c001738c:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017394:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017399:	85 c0                	test   eax,eax
c001739b:	75 03                	jne    c00173a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c001739d:	fb                   	sti    
c001739e:	66 90                	xchg   ax,ax
c00173a0:	83 c4 0c             	add    esp,0xc
c00173a3:	c3                   	ret    

c00173a4 <blockTask(TaskState)>:
c00173a4:	83 ec 0c             	sub    esp,0xc
c00173a7:	fa                   	cli    
c00173a8:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00173ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00173b1:	83 c0 01             	add    eax,0x1
c00173b4:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00173b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00173c1:	e8 1e ff ff ff       	call   c00172e4 <schedule()>
c00173c6:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00173ce:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c00173d4:	85 d2                	test   edx,edx
c00173d6:	75 04                	jne    c00173dc <blockTask(TaskState)+0x38>
c00173d8:	fb                   	sti    
c00173d9:	8d 76 00             	lea    esi,[esi+0x0]
c00173dc:	83 c4 0c             	add    esp,0xc
c00173df:	c3                   	ret    

c00173e0 <waitTask(int, int*, int)>:
c00173e0:	83 ec 18             	sub    esp,0x18
c00173e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173ec:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00173ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00173f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173f8:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c00173fb:	6a 07                	push   0x7
c00173fd:	e8 a2 ff ff ff       	call   c00173a4 <blockTask(TaskState)>
c0017402:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017407:	83 c4 10             	add    esp,0x10
c001740a:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001740d:	85 d2                	test   edx,edx
c001740f:	74 0b                	je     c001741c <waitTask(int, int*, int)+0x3c>
c0017411:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017414:	89 02                	mov    DWORD PTR [edx],eax
c0017416:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001741b:	90                   	nop
c001741c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001741f:	83 c4 0c             	add    esp,0xc
c0017422:	c3                   	ret    
c0017423:	90                   	nop

c0017424 <milliTenthSleepUntil(unsigned long long)>:
c0017424:	83 ec 0c             	sub    esp,0xc
c0017427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001742b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001742f:	3b 05 50 5b 03 c0    	cmp    eax,DWORD PTR ds:0xc0035b50
c0017435:	89 d1                	mov    ecx,edx
c0017437:	1b 0d 54 5b 03 c0    	sbb    ecx,DWORD PTR ds:0xc0035b54
c001743d:	73 05                	jae    c0017444 <milliTenthSleepUntil(unsigned long long)+0x20>
c001743f:	90                   	nop
c0017440:	83 c4 0c             	add    esp,0xc
c0017443:	c3                   	ret    
c0017444:	fa                   	cli    
c0017445:	8b 0d 30 63 03 c0    	mov    ecx,DWORD PTR ds:0xc0036330
c001744b:	83 ec 08             	sub    esp,0x8
c001744e:	83 c1 01             	add    ecx,0x1
c0017451:	89 0d 30 63 03 c0    	mov    DWORD PTR ds:0xc0036330,ecx
c0017457:	8b 0d 2c 63 03 c0    	mov    ecx,DWORD PTR ds:0xc003632c
c001745d:	83 c1 01             	add    ecx,0x1
c0017460:	89 0d 2c 63 03 c0    	mov    DWORD PTR ds:0xc003632c,ecx
c0017466:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001746c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001746f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0017472:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017477:	50                   	push   eax
c0017478:	68 40 63 03 c0       	push   0xc0036340
c001747d:	e8 4e 1c 01 00       	call   c00290d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017482:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0017489:	e8 16 ff ff ff       	call   c00173a4 <blockTask(TaskState)>
c001748e:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0017493:	83 c4 10             	add    esp,0x10
c0017496:	83 e8 01             	sub    eax,0x1
c0017499:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c001749e:	85 c0                	test   eax,eax
c00174a0:	75 0a                	jne    c00174ac <milliTenthSleepUntil(unsigned long long)+0x88>
c00174a2:	8b 15 28 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036328
c00174a8:	85 d2                	test   edx,edx
c00174aa:	75 18                	jne    c00174c4 <milliTenthSleepUntil(unsigned long long)+0xa0>
c00174ac:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00174b4:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00174b9:	85 c0                	test   eax,eax
c00174bb:	75 83                	jne    c0017440 <milliTenthSleepUntil(unsigned long long)+0x1c>
c00174bd:	fb                   	sti    
c00174be:	83 c4 0c             	add    esp,0xc
c00174c1:	c3                   	ret    
c00174c2:	66 90                	xchg   ax,ax
c00174c4:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c00174ce:	e8 11 fe ff ff       	call   c00172e4 <schedule()>
c00174d3:	eb d7                	jmp    c00174ac <milliTenthSleepUntil(unsigned long long)+0x88>
c00174d5:	8d 76 00             	lea    esi,[esi+0x0]

c00174d8 <milliTenthSleep(unsigned long long)>:
c00174d8:	a1 50 5b 03 c0       	mov    eax,ds:0xc0035b50
c00174dd:	8b 15 54 5b 03 c0    	mov    edx,DWORD PTR ds:0xc0035b54
c00174e3:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00174e7:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c00174eb:	e9 34 ff ff ff       	jmp    c0017424 <milliTenthSleepUntil(unsigned long long)>

c00174f0 <sleep(unsigned long long)>:
c00174f0:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c00174f8:	b8 10 27 00 00       	mov    eax,0x2710
c00174fd:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017501:	01 ca                	add    edx,ecx
c0017503:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017507:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001750b:	eb cb                	jmp    c00174d8 <milliTenthSleep(unsigned long long)>
c001750d:	8d 76 00             	lea    esi,[esi+0x0]

c0017510 <sleep(unsigned int)>:
c0017510:	83 ec 14             	sub    esp,0x14
c0017513:	b8 10 27 00 00       	mov    eax,0x2710
c0017518:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c001751c:	52                   	push   edx
c001751d:	50                   	push   eax
c001751e:	e8 b5 ff ff ff       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c0017523:	83 c4 1c             	add    esp,0x1c
c0017526:	c3                   	ret    
c0017527:	90                   	nop

c0017528 <milliTenthSleep(unsigned int)>:
c0017528:	83 ec 14             	sub    esp,0x14
c001752b:	31 d2                	xor    edx,edx
c001752d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017531:	03 05 50 5b 03 c0    	add    eax,DWORD PTR ds:0xc0035b50
c0017537:	13 15 54 5b 03 c0    	adc    edx,DWORD PTR ds:0xc0035b54
c001753d:	52                   	push   edx
c001753e:	50                   	push   eax
c001753f:	e8 e0 fe ff ff       	call   c0017424 <milliTenthSleepUntil(unsigned long long)>
c0017544:	83 c4 1c             	add    esp,0x1c
c0017547:	c3                   	ret    

c0017548 <taskReturned>:
c0017548:	83 ec 18             	sub    esp,0x18
c001754b:	68 04 c4 02 c0       	push   0xc002c404
c0017550:	e8 f7 91 ff ff       	call   c001074c <KePanic(char const*)>
c0017555:	83 c4 10             	add    esp,0x10
c0017558:	83 ec 0c             	sub    esp,0xc
c001755b:	6a 02                	push   0x2
c001755d:	e8 42 fe ff ff       	call   c00173a4 <blockTask(TaskState)>
c0017562:	fa                   	cli    
c0017563:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017568:	83 c0 01             	add    eax,0x1
c001756b:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017570:	e8 6f fd ff ff       	call   c00172e4 <schedule()>
c0017575:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c001757d:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c0017583:	83 c4 10             	add    esp,0x10
c0017586:	85 d2                	test   edx,edx
c0017588:	75 ce                	jne    c0017558 <taskReturned+0x10>
c001758a:	fb                   	sti    
c001758b:	eb cb                	jmp    c0017558 <taskReturned+0x10>
c001758d:	8d 76 00             	lea    esi,[esi+0x0]

c0017590 <KeProcessFromPID(int)>:
c0017590:	57                   	push   edi
c0017591:	56                   	push   esi
c0017592:	53                   	push   ebx
c0017593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017597:	fa                   	cli    
c0017598:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001759d:	83 ec 0c             	sub    esp,0xc
c00175a0:	83 c0 01             	add    eax,0x1
c00175a3:	68 4c 63 03 c0       	push   0xc003634c
c00175a8:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00175ad:	e8 5a 1a 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175b2:	83 c4 10             	add    esp,0x10
c00175b5:	89 c7                	mov    edi,eax
c00175b7:	eb 17                	jmp    c00175d0 <KeProcessFromPID(int)+0x40>
c00175b9:	8d 76 00             	lea    esi,[esi+0x0]
c00175bc:	83 ec 0c             	sub    esp,0xc
c00175bf:	68 4c 63 03 c0       	push   0xc003634c
c00175c4:	e8 43 1a 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175c9:	83 c4 10             	add    esp,0x10
c00175cc:	39 f8                	cmp    eax,edi
c00175ce:	74 50                	je     c0017620 <KeProcessFromPID(int)+0x90>
c00175d0:	83 ec 0c             	sub    esp,0xc
c00175d3:	68 4c 63 03 c0       	push   0xc003634c
c00175d8:	e8 2f 1a 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175dd:	c7 04 24 4c 63 03 c0 	mov    DWORD PTR [esp],0xc003634c
c00175e4:	89 c3                	mov    ebx,eax
c00175e6:	e8 29 1a 01 00       	call   c0029014 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00175eb:	59                   	pop    ecx
c00175ec:	58                   	pop    eax
c00175ed:	53                   	push   ebx
c00175ee:	68 4c 63 03 c0       	push   0xc003634c
c00175f3:	e8 d8 1a 01 00       	call   c00290d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00175f8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	39 30                	cmp    DWORD PTR [eax],esi
c0017600:	75 ba                	jne    c00175bc <KeProcessFromPID(int)+0x2c>
c0017602:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c001760a:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c0017610:	85 d2                	test   edx,edx
c0017612:	74 08                	je     c001761c <KeProcessFromPID(int)+0x8c>
c0017614:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017617:	5b                   	pop    ebx
c0017618:	5e                   	pop    esi
c0017619:	5f                   	pop    edi
c001761a:	c3                   	ret    
c001761b:	90                   	nop
c001761c:	fb                   	sti    
c001761d:	eb f5                	jmp    c0017614 <KeProcessFromPID(int)+0x84>
c001761f:	90                   	nop
c0017620:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017628:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001762d:	85 c0                	test   eax,eax
c001762f:	75 07                	jne    c0017638 <KeProcessFromPID(int)+0xa8>
c0017631:	fb                   	sti    
c0017632:	31 c0                	xor    eax,eax
c0017634:	5b                   	pop    ebx
c0017635:	5e                   	pop    esi
c0017636:	5f                   	pop    edi
c0017637:	c3                   	ret    
c0017638:	5b                   	pop    ebx
c0017639:	31 c0                	xor    eax,eax
c001763b:	5e                   	pop    esi
c001763c:	5f                   	pop    edi
c001763d:	c3                   	ret    
c001763e:	66 90                	xchg   ax,ax

c0017640 <unblockTask(ThreadControlBlock*)>:
c0017640:	53                   	push   ebx
c0017641:	83 ec 08             	sub    esp,0x8
c0017644:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017648:	fa                   	cli    
c0017649:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c001764f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017652:	83 c2 01             	add    edx,0x1
c0017655:	85 c0                	test   eax,eax
c0017657:	89 15 30 63 03 c0    	mov    DWORD PTR ds:0xc0036330,edx
c001765d:	74 6d                	je     c00176cc <unblockTask(ThreadControlBlock*)+0x8c>
c001765f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017662:	83 f8 01             	cmp    eax,0x1
c0017665:	74 39                	je     c00176a0 <unblockTask(ThreadControlBlock*)+0x60>
c0017667:	83 ec 0c             	sub    esp,0xc
c001766a:	68 4c 63 03 c0       	push   0xc003634c
c001766f:	e8 98 19 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017674:	83 c4 10             	add    esp,0x10
c0017677:	85 c0                	test   eax,eax
c0017679:	75 1d                	jne    c0017698 <unblockTask(ThreadControlBlock*)+0x58>
c001767b:	eb 63                	jmp    c00176e0 <unblockTask(ThreadControlBlock*)+0xa0>
c001767d:	8d 76 00             	lea    esi,[esi+0x0]
c0017680:	83 ec 08             	sub    esp,0x8
c0017683:	50                   	push   eax
c0017684:	68 4c 63 03 c0       	push   0xc003634c
c0017689:	e8 8a 1e 01 00       	call   c0029518 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001768e:	83 c4 10             	add    esp,0x10
c0017691:	85 c0                	test   eax,eax
c0017693:	74 4b                	je     c00176e0 <unblockTask(ThreadControlBlock*)+0xa0>
c0017695:	8d 76 00             	lea    esi,[esi+0x0]
c0017698:	39 c3                	cmp    ebx,eax
c001769a:	75 e4                	jne    c0017680 <unblockTask(ThreadControlBlock*)+0x40>
c001769c:	eb 12                	jmp    c00176b0 <unblockTask(ThreadControlBlock*)+0x70>
c001769e:	66 90                	xchg   ax,ax
c00176a0:	83 ec 0c             	sub    esp,0xc
c00176a3:	68 9a c3 02 c0       	push   0xc002c39a
c00176a8:	e8 cf f8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00176ad:	83 c4 10             	add    esp,0x10
c00176b0:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00176b8:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00176bd:	85 c0                	test   eax,eax
c00176bf:	75 03                	jne    c00176c4 <unblockTask(ThreadControlBlock*)+0x84>
c00176c1:	fb                   	sti    
c00176c2:	66 90                	xchg   ax,ax
c00176c4:	83 c4 08             	add    esp,0x8
c00176c7:	5b                   	pop    ebx
c00176c8:	c3                   	ret    
c00176c9:	8d 76 00             	lea    esi,[esi+0x0]
c00176cc:	83 ec 0c             	sub    esp,0xc
c00176cf:	68 83 c3 02 c0       	push   0xc002c383
c00176d4:	e8 a3 f8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00176d9:	83 c4 10             	add    esp,0x10
c00176dc:	eb d2                	jmp    c00176b0 <unblockTask(ThreadControlBlock*)+0x70>
c00176de:	66 90                	xchg   ax,ax
c00176e0:	83 ec 08             	sub    esp,0x8
c00176e3:	53                   	push   ebx
c00176e4:	68 4c 63 03 c0       	push   0xc003634c
c00176e9:	e8 e2 19 01 00       	call   c00290d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00176ee:	83 c4 10             	add    esp,0x10
c00176f1:	eb bd                	jmp    c00176b0 <unblockTask(ThreadControlBlock*)+0x70>
c00176f3:	90                   	nop

c00176f4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00176f4:	55                   	push   ebp
c00176f5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00176fa:	57                   	push   edi
c00176fb:	56                   	push   esi
c00176fc:	53                   	push   ebx
c00176fd:	83 ec 1c             	sub    esp,0x1c
c0017700:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017704:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017707:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001770a:	d3 c0                	rol    eax,cl
c001770c:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c0017713:	21 c8                	and    eax,ecx
c0017715:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c001771c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001771f:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017727:	0f 85 b7 01 00 00    	jne    c00178e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c001772d:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0017733:	85 ed                	test   ebp,ebp
c0017735:	7e 29                	jle    c0017760 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017737:	31 f6                	xor    esi,esi
c0017739:	8d 76 00             	lea    esi,[esi+0x0]
c001773c:	83 ec 0c             	sub    esp,0xc
c001773f:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0017746:	83 c6 01             	add    esi,0x1
c0017749:	57                   	push   edi
c001774a:	e8 b8 8b ff ff       	call   c0010307 <free>
c001774f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017752:	83 c4 10             	add    esp,0x10
c0017755:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c001775b:	7f df                	jg     c001773c <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c001775d:	8d 76 00             	lea    esi,[esi+0x0]
c0017760:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c001776a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001776d:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c0017773:	89 f7                	mov    edi,esi
c0017775:	85 ed                	test   ebp,ebp
c0017777:	74 1b                	je     c0017794 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0017779:	83 ec 0c             	sub    esp,0xc
c001777c:	55                   	push   ebp
c001777d:	e8 d4 77 ff ff       	call   c000ef56 <EnvVarContainer::~EnvVarContainer()>
c0017782:	59                   	pop    ecx
c0017783:	5e                   	pop    esi
c0017784:	6a 0c                	push   0xc
c0017786:	55                   	push   ebp
c0017787:	e8 78 66 ff ff       	call   c000de04 <operator delete(void*, unsigned long)>
c001778c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001778f:	83 c4 10             	add    esp,0x10
c0017792:	89 f7                	mov    edi,esi
c0017794:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c001779a:	85 c0                	test   eax,eax
c001779c:	0f 84 b6 00 00 00    	je     c0017858 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00177a2:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00177a5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00177a9:	31 c9                	xor    ecx,ecx
c00177ab:	eb 17                	jmp    c00177c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00177ad:	8d 76 00             	lea    esi,[esi+0x0]
c00177b0:	83 c1 01             	add    ecx,0x1
c00177b3:	83 f9 10             	cmp    ecx,0x10
c00177b6:	0f 84 9c 00 00 00    	je     c0017858 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00177bc:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00177c2:	66 90                	xchg   ax,ax
c00177c4:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c00177cb:	d3 fa                	sar    edx,cl
c00177cd:	80 e2 01             	and    dl,0x1
c00177d0:	74 de                	je     c00177b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00177d2:	8d 14 89             	lea    edx,[ecx+ecx*4]
c00177d5:	01 d2                	add    edx,edx
c00177d7:	01 ca                	add    edx,ecx
c00177d9:	01 d2                	add    edx,edx
c00177db:	01 ca                	add    edx,ecx
c00177dd:	8d 14 92             	lea    edx,[edx+edx*4]
c00177e0:	01 d0                	add    eax,edx
c00177e2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00177e8:	83 fd 07             	cmp    ebp,0x7
c00177eb:	75 c3                	jne    c00177b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00177ed:	05 40 02 00 00       	add    eax,0x240
c00177f2:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00177f5:	83 fd ff             	cmp    ebp,0xffffffff
c00177f8:	0f 8c ee 00 00 00    	jl     c00178ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c00177fe:	0f 84 ac 01 00 00    	je     c00179b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0017804:	85 ed                	test   ebp,ebp
c0017806:	0f 84 90 01 00 00    	je     c001799c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c001780c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001780e:	75 a0                	jne    c00177b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017810:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001781a:	01 d0                	add    eax,edx
c001781c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017820:	83 ec 0c             	sub    esp,0xc
c0017823:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017829:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001782c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0017832:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017839:	50                   	push   eax
c001783a:	e8 01 fe ff ff       	call   c0017640 <unblockTask(ThreadControlBlock*)>
c001783f:	83 c4 10             	add    esp,0x10
c0017842:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017845:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017849:	89 f7                	mov    edi,esi
c001784b:	83 c1 01             	add    ecx,0x1
c001784e:	83 f9 10             	cmp    ecx,0x10
c0017851:	0f 85 65 ff ff ff    	jne    c00177bc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0017857:	90                   	nop
c0017858:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c001785e:	85 c0                	test   eax,eax
c0017860:	74 62                	je     c00178c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0017862:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0017868:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c001786e:	74 54                	je     c00178c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c0017870:	83 ec 0c             	sub    esp,0xc
c0017873:	68 4c 63 03 c0       	push   0xc003634c
c0017878:	e8 8f 17 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001787d:	c7 04 24 4c 63 03 c0 	mov    DWORD PTR [esp],0xc003634c
c0017884:	89 c7                	mov    edi,eax
c0017886:	e8 65 17 01 00       	call   c0028ff0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001788b:	83 c4 10             	add    esp,0x10
c001788e:	84 c0                	test   al,al
c0017890:	0f 84 ce 00 00 00    	je     c0017964 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c0017896:	66 90                	xchg   ax,ax
c0017898:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001789b:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00178a1:	85 d2                	test   edx,edx
c00178a3:	74 0f                	je     c00178b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00178a5:	83 ec 0c             	sub    esp,0xc
c00178a8:	8b 02                	mov    eax,DWORD PTR [edx]
c00178aa:	52                   	push   edx
c00178ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00178ae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00178b1:	83 c4 10             	add    esp,0x10
c00178b4:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c00178be:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00178c1:	8d 76 00             	lea    esi,[esi+0x0]
c00178c4:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c00178ca:	85 db                	test   ebx,ebx
c00178cc:	74 16                	je     c00178e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c00178ce:	83 ec 0c             	sub    esp,0xc
c00178d1:	53                   	push   ebx
c00178d2:	e8 87 c9 ff ff       	call   c001425e <VAS::~VAS()>
c00178d7:	58                   	pop    eax
c00178d8:	5a                   	pop    edx
c00178d9:	6a 14                	push   0x14
c00178db:	53                   	push   ebx
c00178dc:	e8 23 65 ff ff       	call   c000de04 <operator delete(void*, unsigned long)>
c00178e1:	83 c4 10             	add    esp,0x10
c00178e4:	83 c4 1c             	add    esp,0x1c
c00178e7:	5b                   	pop    ebx
c00178e8:	5e                   	pop    esi
c00178e9:	5f                   	pop    edi
c00178ea:	5d                   	pop    ebp
c00178eb:	c3                   	ret    
c00178ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00178f0:	83 ec 0c             	sub    esp,0xc
c00178f3:	68 38 c4 02 c0       	push   0xc002c438
c00178f8:	e8 4f 8e ff ff       	call   c001074c <KePanic(char const*)>
c00178fd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017900:	83 c4 10             	add    esp,0x10
c0017903:	89 f7                	mov    edi,esi
c0017905:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017909:	e9 a2 fe ff ff       	jmp    c00177b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001790e:	66 90                	xchg   ax,ax
c0017910:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017916:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c001791c:	75 1e                	jne    c001793c <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c001791e:	83 ec 0c             	sub    esp,0xc
c0017921:	68 a0 c4 02 c0       	push   0xc002c4a0
c0017926:	e8 51 f6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001792b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017932:	e8 6d fa ff ff       	call   c00173a4 <blockTask(TaskState)>
c0017937:	83 c4 10             	add    esp,0x10
c001793a:	66 90                	xchg   ax,ax
c001793c:	83 ec 08             	sub    esp,0x8
c001793f:	56                   	push   esi
c0017940:	68 4c 63 03 c0       	push   0xc003634c
c0017945:	e8 86 17 01 00       	call   c00290d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001794a:	c7 04 24 4c 63 03 c0 	mov    DWORD PTR [esp],0xc003634c
c0017951:	e8 b6 16 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017956:	83 c4 10             	add    esp,0x10
c0017959:	39 f8                	cmp    eax,edi
c001795b:	0f 84 37 ff ff ff    	je     c0017898 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c0017961:	8d 76 00             	lea    esi,[esi+0x0]
c0017964:	83 ec 0c             	sub    esp,0xc
c0017967:	68 4c 63 03 c0       	push   0xc003634c
c001796c:	e8 9b 16 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017971:	c7 04 24 4c 63 03 c0 	mov    DWORD PTR [esp],0xc003634c
c0017978:	89 c6                	mov    esi,eax
c001797a:	e8 95 16 01 00       	call   c0029014 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001797f:	83 c4 10             	add    esp,0x10
c0017982:	39 f3                	cmp    ebx,esi
c0017984:	74 b6                	je     c001793c <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0017986:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0017989:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001798c:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c0017992:	75 a8                	jne    c001793c <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c0017994:	e9 77 ff ff ff       	jmp    c0017910 <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c0017999:	8d 76 00             	lea    esi,[esi+0x0]
c001799c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00179a0:	83 ec 0c             	sub    esp,0xc
c00179a3:	68 6c c4 02 c0       	push   0xc002c46c
c00179a8:	e9 4b ff ff ff       	jmp    c00178f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c00179ad:	8d 76 00             	lea    esi,[esi+0x0]
c00179b0:	8b 36                	mov    esi,DWORD PTR [esi]
c00179b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00179b6:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00179b9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00179bc:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c00179c2:	01 d7                	add    edi,edx
c00179c4:	89 f8                	mov    eax,edi
c00179c6:	e9 51 fe ff ff       	jmp    c001781c <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c00179cb:	90                   	nop

c00179cc <cleanerTaskFunction(void*)>:
c00179cc:	53                   	push   ebx
c00179cd:	83 ec 08             	sub    esp,0x8
c00179d0:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00179d8:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00179dd:	85 c0                	test   eax,eax
c00179df:	75 03                	jne    c00179e4 <cleanerTaskFunction(void*)+0x18>
c00179e1:	fb                   	sti    
c00179e2:	66 90                	xchg   ax,ax
c00179e4:	fa                   	cli    
c00179e5:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00179ea:	83 c0 01             	add    eax,0x1
c00179ed:	80 3d 14 63 03 c0 00 	cmp    BYTE PTR ds:0xc0036314,0x0
c00179f4:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c00179f9:	0f 85 c9 00 00 00    	jne    c0017ac8 <cleanerTaskFunction(void*)+0xfc>
c00179ff:	83 ec 0c             	sub    esp,0xc
c0017a02:	6a 02                	push   0x2
c0017a04:	e8 6f f9 ff ff       	call   c0017378 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017a09:	83 c4 10             	add    esp,0x10
c0017a0c:	c6 05 14 63 03 c0 00 	mov    BYTE PTR ds:0xc0036314,0x0
c0017a13:	fa                   	cli    
c0017a14:	8b 0d 30 63 03 c0    	mov    ecx,DWORD PTR ds:0xc0036330
c0017a1a:	8b 1d 2c 63 03 c0    	mov    ebx,DWORD PTR ds:0xc003632c
c0017a20:	83 c1 01             	add    ecx,0x1
c0017a23:	83 c3 01             	add    ebx,0x1
c0017a26:	89 0d 30 63 03 c0    	mov    DWORD PTR ds:0xc0036330,ecx
c0017a2c:	89 1d 2c 63 03 c0    	mov    DWORD PTR ds:0xc003632c,ebx
c0017a32:	fa                   	cli    
c0017a33:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017a38:	83 c0 01             	add    eax,0x1
c0017a3b:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017a40:	eb 2a                	jmp    c0017a6c <cleanerTaskFunction(void*)+0xa0>
c0017a42:	66 90                	xchg   ax,ax
c0017a44:	83 ec 0c             	sub    esp,0xc
c0017a47:	68 34 63 03 c0       	push   0xc0036334
c0017a4c:	e8 bb 15 01 00       	call   c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017a51:	c7 04 24 34 63 03 c0 	mov    DWORD PTR [esp],0xc0036334
c0017a58:	89 c3                	mov    ebx,eax
c0017a5a:	e8 b5 15 01 00       	call   c0029014 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017a5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017a62:	e8 8d fc ff ff       	call   c00176f4 <cleanupTerminatedTask(ThreadControlBlock*)>
c0017a67:	83 c4 10             	add    esp,0x10
c0017a6a:	66 90                	xchg   ax,ax
c0017a6c:	83 ec 0c             	sub    esp,0xc
c0017a6f:	68 34 63 03 c0       	push   0xc0036334
c0017a74:	e8 77 15 01 00       	call   c0028ff0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017a79:	83 c4 10             	add    esp,0x10
c0017a7c:	84 c0                	test   al,al
c0017a7e:	74 c4                	je     c0017a44 <cleanerTaskFunction(void*)+0x78>
c0017a80:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017a88:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c0017a8e:	85 d2                	test   edx,edx
c0017a90:	75 02                	jne    c0017a94 <cleanerTaskFunction(void*)+0xc8>
c0017a92:	fb                   	sti    
c0017a93:	90                   	nop
c0017a94:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0017a99:	83 e8 01             	sub    eax,0x1
c0017a9c:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0017aa1:	0f 85 29 ff ff ff    	jne    c00179d0 <cleanerTaskFunction(void*)+0x4>
c0017aa7:	a1 28 63 03 c0       	mov    eax,ds:0xc0036328
c0017aac:	85 c0                	test   eax,eax
c0017aae:	0f 84 1c ff ff ff    	je     c00179d0 <cleanerTaskFunction(void*)+0x4>
c0017ab4:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c0017abe:	e8 21 f8 ff ff       	call   c00172e4 <schedule()>
c0017ac3:	e9 08 ff ff ff       	jmp    c00179d0 <cleanerTaskFunction(void*)+0x4>
c0017ac8:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017ad0:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017ad5:	85 c0                	test   eax,eax
c0017ad7:	0f 85 2f ff ff ff    	jne    c0017a0c <cleanerTaskFunction(void*)+0x40>
c0017add:	fb                   	sti    
c0017ade:	e9 29 ff ff ff       	jmp    c0017a0c <cleanerTaskFunction(void*)+0x40>
c0017ae3:	90                   	nop

c0017ae4 <KeTerminateCurrentThread(int)>:
c0017ae4:	83 ec 14             	sub    esp,0x14
c0017ae7:	fa                   	cli    
c0017ae8:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017aed:	83 c0 01             	add    eax,0x1
c0017af0:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017af5:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0017afa:	83 c0 01             	add    eax,0x1
c0017afd:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0017b02:	fa                   	cli    
c0017b03:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017b08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b0c:	83 c0 01             	add    eax,0x1
c0017b0f:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017b14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b19:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017b1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b21:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017b24:	50                   	push   eax
c0017b25:	68 34 63 03 c0       	push   0xc0036334
c0017b2a:	e8 a1 15 01 00       	call   c00290d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017b2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b34:	83 c4 10             	add    esp,0x10
c0017b37:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017b3e:	a1 10 63 03 c0       	mov    eax,ds:0xc0036310
c0017b43:	85 c0                	test   eax,eax
c0017b45:	0f 84 81 00 00 00    	je     c0017bcc <KeTerminateCurrentThread(int)+0xe8>
c0017b4b:	83 ec 0c             	sub    esp,0xc
c0017b4e:	c6 05 14 63 03 c0 01 	mov    BYTE PTR ds:0xc0036314,0x1
c0017b55:	50                   	push   eax
c0017b56:	e8 e5 fa ff ff       	call   c0017640 <unblockTask(ThreadControlBlock*)>
c0017b5b:	83 c4 10             	add    esp,0x10
c0017b5e:	66 90                	xchg   ax,ax
c0017b60:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017b68:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017b6d:	85 c0                	test   eax,eax
c0017b6f:	75 03                	jne    c0017b74 <KeTerminateCurrentThread(int)+0x90>
c0017b71:	fb                   	sti    
c0017b72:	66 90                	xchg   ax,ax
c0017b74:	a1 2c 63 03 c0       	mov    eax,ds:0xc003632c
c0017b79:	83 e8 01             	sub    eax,0x1
c0017b7c:	a3 2c 63 03 c0       	mov    ds:0xc003632c,eax
c0017b81:	75 09                	jne    c0017b8c <KeTerminateCurrentThread(int)+0xa8>
c0017b83:	83 3d 28 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036328,0x0
c0017b8a:	75 54                	jne    c0017be0 <KeTerminateCurrentThread(int)+0xfc>
c0017b8c:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017b94:	8b 0d 30 63 03 c0    	mov    ecx,DWORD PTR ds:0xc0036330
c0017b9a:	85 c9                	test   ecx,ecx
c0017b9c:	75 06                	jne    c0017ba4 <KeTerminateCurrentThread(int)+0xc0>
c0017b9e:	66 90                	xchg   ax,ax
c0017ba0:	fb                   	sti    
c0017ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ba4:	fa                   	cli    
c0017ba5:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017baa:	83 c0 01             	add    eax,0x1
c0017bad:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017bb2:	e8 2d f7 ff ff       	call   c00172e4 <schedule()>
c0017bb7:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017bbf:	8b 15 30 63 03 c0    	mov    edx,DWORD PTR ds:0xc0036330
c0017bc5:	85 d2                	test   edx,edx
c0017bc7:	75 db                	jne    c0017ba4 <KeTerminateCurrentThread(int)+0xc0>
c0017bc9:	eb d5                	jmp    c0017ba0 <KeTerminateCurrentThread(int)+0xbc>
c0017bcb:	90                   	nop
c0017bcc:	83 ec 0c             	sub    esp,0xc
c0017bcf:	68 b1 c3 02 c0       	push   0xc002c3b1
c0017bd4:	e8 a3 f3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017bd9:	83 c4 10             	add    esp,0x10
c0017bdc:	eb 82                	jmp    c0017b60 <KeTerminateCurrentThread(int)+0x7c>
c0017bde:	66 90                	xchg   ax,ax
c0017be0:	c7 05 28 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036328,0x0
c0017bea:	e8 f5 f6 ff ff       	call   c00172e4 <schedule()>
c0017bef:	eb 9b                	jmp    c0017b8c <KeTerminateCurrentThread(int)+0xa8>
c0017bf1:	8d 76 00             	lea    esi,[esi+0x0]

c0017bf4 <__static_initialization_and_destruction_0(int, int)>:
c0017bf4:	83 ec 0c             	sub    esp,0xc
c0017bf7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017bfc:	0f 85 8e 00 00 00    	jne    c0017c90 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017c02:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017c0a:	0f 85 80 00 00 00    	jne    c0017c90 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017c10:	83 ec 0c             	sub    esp,0xc
c0017c13:	68 4c 63 03 c0       	push   0xc003634c
c0017c18:	e8 53 19 01 00       	call   c0029570 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017c1d:	83 c4 10             	add    esp,0x10
c0017c20:	83 ec 04             	sub    esp,0x4
c0017c23:	68 a0 f6 02 c0       	push   0xc002f6a0
c0017c28:	68 4c 63 03 c0       	push   0xc003634c
c0017c2d:	68 20 95 02 c0       	push   0xc0029520
c0017c32:	e8 7d 61 ff ff       	call   c000ddb4 <__cxa_atexit>
c0017c37:	83 c4 10             	add    esp,0x10
c0017c3a:	83 ec 0c             	sub    esp,0xc
c0017c3d:	68 40 63 03 c0       	push   0xc0036340
c0017c42:	e8 29 19 01 00       	call   c0029570 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017c47:	83 c4 10             	add    esp,0x10
c0017c4a:	83 ec 04             	sub    esp,0x4
c0017c4d:	68 a0 f6 02 c0       	push   0xc002f6a0
c0017c52:	68 40 63 03 c0       	push   0xc0036340
c0017c57:	68 20 95 02 c0       	push   0xc0029520
c0017c5c:	e8 53 61 ff ff       	call   c000ddb4 <__cxa_atexit>
c0017c61:	83 c4 10             	add    esp,0x10
c0017c64:	83 ec 0c             	sub    esp,0xc
c0017c67:	68 34 63 03 c0       	push   0xc0036334
c0017c6c:	e8 ff 18 01 00       	call   c0029570 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017c71:	83 c4 10             	add    esp,0x10
c0017c74:	83 ec 04             	sub    esp,0x4
c0017c77:	68 a0 f6 02 c0       	push   0xc002f6a0
c0017c7c:	68 34 63 03 c0       	push   0xc0036334
c0017c81:	68 20 95 02 c0       	push   0xc0029520
c0017c86:	e8 29 61 ff ff       	call   c000ddb4 <__cxa_atexit>
c0017c8b:	83 c4 10             	add    esp,0x10
c0017c8e:	66 90                	xchg   ax,ax
c0017c90:	90                   	nop
c0017c91:	83 c4 0c             	add    esp,0xc
c0017c94:	c3                   	ret    
c0017c95:	8d 76 00             	lea    esi,[esi+0x0]

c0017c98 <_GLOBAL__sub_I_keNextPID>:
c0017c98:	83 ec 0c             	sub    esp,0xc
c0017c9b:	83 ec 08             	sub    esp,0x8
c0017c9e:	68 ff ff 00 00       	push   0xffff
c0017ca3:	6a 01                	push   0x1
c0017ca5:	e8 4a ff ff ff       	call   c0017bf4 <__static_initialization_and_destruction_0(int, int)>
c0017caa:	83 c4 10             	add    esp,0x10
c0017cad:	83 c4 0c             	add    esp,0xc
c0017cb0:	c3                   	ret    

c0017cb1 <Vm::inbv(unsigned short)>:
c0017cb1:	55                   	push   ebp
c0017cb2:	89 e5                	mov    ebp,esp
c0017cb4:	83 ec 14             	sub    esp,0x14
c0017cb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cba:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017cbe:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017cc2:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017cc7:	75 07                	jne    c0017cd0 <Vm::inbv(unsigned short)+0x1f>
c0017cc9:	a1 90 63 03 c0       	mov    eax,ds:0xc0036390
c0017cce:	eb 16                	jmp    c0017ce6 <Vm::inbv(unsigned short)+0x35>
c0017cd0:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017cd4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017cd8:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0017cdc:	89 c2                	mov    edx,eax
c0017cde:	ec                   	in     al,dx
c0017cdf:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0017ce2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017ce5:	90                   	nop
c0017ce6:	c9                   	leave  
c0017ce7:	c3                   	ret    

c0017ce8 <Vm::outbv(unsigned short, unsigned char)>:
c0017ce8:	55                   	push   ebp
c0017ce9:	89 e5                	mov    ebp,esp
c0017ceb:	83 ec 18             	sub    esp,0x18
c0017cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cf1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017cf4:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017cf8:	88 d0                	mov    al,dl
c0017cfa:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0017cfd:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017d01:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017d06:	75 2d                	jne    c0017d35 <Vm::outbv(unsigned short, unsigned char)+0x4d>
c0017d08:	a1 90 63 03 c0       	mov    eax,ds:0xc0036390
c0017d0d:	8d 50 01             	lea    edx,[eax+0x1]
c0017d10:	89 15 90 63 03 c0    	mov    DWORD PTR ds:0xc0036390,edx
c0017d16:	8a 55 e8             	mov    dl,BYTE PTR [ebp-0x18]
c0017d19:	88 90 a0 63 03 c0    	mov    BYTE PTR [eax-0x3ffc9c60],dl
c0017d1f:	a1 90 63 03 c0       	mov    eax,ds:0xc0036390
c0017d24:	83 f8 20             	cmp    eax,0x20
c0017d27:	75 23                	jne    c0017d4c <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017d29:	c7 05 90 63 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0036390,0x1f
c0017d33:	eb 17                	jmp    c0017d4c <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017d35:	0f b6 55 e8          	movzx  edx,BYTE PTR [ebp-0x18]
c0017d39:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017d3d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017d41:	88 55 fd             	mov    BYTE PTR [ebp-0x3],dl
c0017d44:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017d47:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017d4b:	ee                   	out    dx,al
c0017d4c:	90                   	nop
c0017d4d:	c9                   	leave  
c0017d4e:	c3                   	ret    

c0017d4f <Vm::realToLinear(unsigned short, unsigned short)>:
c0017d4f:	55                   	push   ebp
c0017d50:	89 e5                	mov    ebp,esp
c0017d52:	83 ec 08             	sub    esp,0x8
c0017d55:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017d58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017d5b:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
c0017d5f:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
c0017d63:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
c0017d67:	c1 e0 04             	shl    eax,0x4
c0017d6a:	89 c2                	mov    edx,eax
c0017d6c:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
c0017d70:	01 d0                	add    eax,edx
c0017d72:	c9                   	leave  
c0017d73:	c3                   	ret    

c0017d74 <Vm::getSegment(unsigned int)>:
c0017d74:	55                   	push   ebp
c0017d75:	89 e5                	mov    ebp,esp
c0017d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d7a:	c1 e8 10             	shr    eax,0x10
c0017d7d:	5d                   	pop    ebp
c0017d7e:	c3                   	ret    

c0017d7f <Vm::getOffset(unsigned int)>:
c0017d7f:	55                   	push   ebp
c0017d80:	89 e5                	mov    ebp,esp
c0017d82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d85:	5d                   	pop    ebp
c0017d86:	c3                   	ret    

c0017d87 <Vm::mainloop2()>:
c0017d87:	55                   	push   ebp
c0017d88:	89 e5                	mov    ebp,esp
c0017d8a:	53                   	push   ebx
c0017d8b:	83 ec 04             	sub    esp,0x4
c0017d8e:	fa                   	cli    
c0017d8f:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017d94:	83 c0 01             	add    eax,0x1
c0017d97:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017d9c:	c6 05 89 63 03 c0 01 	mov    BYTE PTR ds:0xc0036389,0x1
c0017da3:	83 ec 0c             	sub    esp,0xc
c0017da6:	6a 02                	push   0x2
c0017da8:	e8 cb f5 ff ff       	call   c0017378 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017dad:	83 c4 10             	add    esp,0x10
c0017db0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0017db7:	66 8b 40 5f          	mov    ax,WORD PTR [eax+0x5f]
c0017dbb:	0f b7 d8             	movzx  ebx,ax
c0017dbe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dc5:	66 8b 40 5d          	mov    ax,WORD PTR [eax+0x5d]
c0017dc9:	0f b7 c8             	movzx  ecx,ax
c0017dcc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dd3:	66 8b 40 5b          	mov    ax,WORD PTR [eax+0x5b]
c0017dd7:	0f b7 d0             	movzx  edx,ax
c0017dda:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ddf:	8b 00                	mov    eax,DWORD PTR [eax]
c0017de1:	66 8b 40 59          	mov    ax,WORD PTR [eax+0x59]
c0017de5:	0f b7 c0             	movzx  eax,ax
c0017de8:	53                   	push   ebx
c0017de9:	51                   	push   ecx
c0017dea:	52                   	push   edx
c0017deb:	50                   	push   eax
c0017dec:	e8 1e 84 fe ff       	call   c000020f <goToVM86>
c0017df1:	83 c4 10             	add    esp,0x10
c0017df4:	90                   	nop
c0017df5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0017df8:	c9                   	leave  
c0017df9:	c3                   	ret    

c0017dfa <Vm::mainVm8086Loop(void*)>:
c0017dfa:	55                   	push   ebp
c0017dfb:	89 e5                	mov    ebp,esp
c0017dfd:	83 ec 08             	sub    esp,0x8
c0017e00:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017e08:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017e0d:	85 c0                	test   eax,eax
c0017e0f:	75 01                	jne    c0017e12 <Vm::mainVm8086Loop(void*)+0x18>
c0017e11:	fb                   	sti    
c0017e12:	e8 70 ff ff ff       	call   c0017d87 <Vm::mainloop2()>
c0017e17:	90                   	nop
c0017e18:	c9                   	leave  
c0017e19:	c3                   	ret    

c0017e1a <Vm::mainloop3(unsigned long)>:
c0017e1a:	55                   	push   ebp
c0017e1b:	89 e5                	mov    ebp,esp
c0017e1d:	83 ec 08             	sub    esp,0x8
c0017e20:	fa                   	cli    
c0017e21:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017e26:	83 c0 01             	add    eax,0x1
c0017e29:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017e2e:	c6 05 88 63 03 c0 01 	mov    BYTE PTR ds:0xc0036388,0x1
c0017e35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e38:	a3 84 63 03 c0       	mov    ds:0xc0036384,eax
c0017e3d:	83 ec 0c             	sub    esp,0xc
c0017e40:	6a 02                	push   0x2
c0017e42:	e8 31 f5 ff ff       	call   c0017378 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017e47:	83 c4 10             	add    esp,0x10
c0017e4a:	e8 38 ff ff ff       	call   c0017d87 <Vm::mainloop2()>
c0017e4f:	90                   	nop
c0017e50:	c9                   	leave  
c0017e51:	c3                   	ret    

c0017e52 <Vm::initialise8086()>:
c0017e52:	55                   	push   ebp
c0017e53:	89 e5                	mov    ebp,esp
c0017e55:	83 ec 08             	sub    esp,0x8
c0017e58:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c0017e5d:	68 80 00 00 00       	push   0x80
c0017e62:	6a 00                	push   0x0
c0017e64:	68 fa 7d 01 c0       	push   0xc0017dfa
c0017e69:	50                   	push   eax
c0017e6a:	e8 a9 f1 ff ff       	call   c0017018 <Process::createThread(void (*)(void*), void*, int)>
c0017e6f:	83 c4 10             	add    esp,0x10
c0017e72:	a3 8c 63 03 c0       	mov    ds:0xc003638c,eax
c0017e77:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c0017e7c:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0017e82:	83 ec 0c             	sub    esp,0xc
c0017e85:	6a 07                	push   0x7
c0017e87:	68 10 01 00 00       	push   0x110
c0017e8c:	6a 00                	push   0x0
c0017e8e:	6a 00                	push   0x0
c0017e90:	50                   	push   eax
c0017e91:	e8 1a c7 ff ff       	call   c00145b0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017e96:	83 c4 20             	add    esp,0x20
c0017e99:	90                   	nop
c0017e9a:	c9                   	leave  
c0017e9b:	c3                   	ret    

c0017e9c <Vm::finish8086()>:
c0017e9c:	55                   	push   ebp
c0017e9d:	89 e5                	mov    ebp,esp
c0017e9f:	83 ec 18             	sub    esp,0x18
c0017ea2:	fa                   	cli    
c0017ea3:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017ea8:	83 c0 01             	add    eax,0x1
c0017eab:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017eb0:	a0 88 63 03 c0       	mov    al,ds:0xc0036388
c0017eb5:	0f b6 c0             	movzx  eax,al
c0017eb8:	85 c0                	test   eax,eax
c0017eba:	75 19                	jne    c0017ed5 <Vm::finish8086()+0x39>
c0017ebc:	e8 23 f4 ff ff       	call   c00172e4 <schedule()>
c0017ec1:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017ec9:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017ece:	85 c0                	test   eax,eax
c0017ed0:	75 d0                	jne    c0017ea2 <Vm::finish8086()+0x6>
c0017ed2:	fb                   	sti    
c0017ed3:	eb cd                	jmp    c0017ea2 <Vm::finish8086()+0x6>
c0017ed5:	90                   	nop
c0017ed6:	a1 84 63 03 c0       	mov    eax,ds:0xc0036384
c0017edb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017ede:	c6 05 88 63 03 c0 00 	mov    BYTE PTR ds:0xc0036388,0x0
c0017ee5:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0017eea:	83 ec 0c             	sub    esp,0xc
c0017eed:	50                   	push   eax
c0017eee:	e8 4d f7 ff ff       	call   c0017640 <unblockTask(ThreadControlBlock*)>
c0017ef3:	83 c4 10             	add    esp,0x10
c0017ef6:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017efe:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017f03:	85 c0                	test   eax,eax
c0017f05:	75 01                	jne    c0017f08 <Vm::finish8086()+0x6c>
c0017f07:	fb                   	sti    
c0017f08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017f0b:	c9                   	leave  
c0017f0c:	c3                   	ret    

c0017f0d <Vm::getOutput8086(unsigned char*)>:
c0017f0d:	55                   	push   ebp
c0017f0e:	89 e5                	mov    ebp,esp
c0017f10:	57                   	push   edi
c0017f11:	56                   	push   esi
c0017f12:	53                   	push   ebx
c0017f13:	83 ec 20             	sub    esp,0x20
c0017f16:	a1 90 63 03 c0       	mov    eax,ds:0xc0036390
c0017f1b:	89 c2                	mov    edx,eax
c0017f1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f20:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0017f23:	c7 45 e8 a0 63 03 c0 	mov    DWORD PTR [ebp-0x18],0xc00363a0
c0017f2a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0017f2d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017f30:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0017f33:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0017f36:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0017f39:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0017f3c:	89 c6                	mov    esi,eax
c0017f3e:	89 d7                	mov    edi,edx
c0017f40:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017f42:	89 c8                	mov    eax,ecx
c0017f44:	89 fa                	mov    edx,edi
c0017f46:	89 f3                	mov    ebx,esi
c0017f48:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c0017f4b:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0017f4e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017f51:	a1 90 63 03 c0       	mov    eax,ds:0xc0036390
c0017f56:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0017f59:	c7 05 90 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036390,0x0
c0017f63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0017f66:	83 c4 20             	add    esp,0x20
c0017f69:	5b                   	pop    ebx
c0017f6a:	5e                   	pop    esi
c0017f6b:	5f                   	pop    edi
c0017f6c:	5d                   	pop    ebp
c0017f6d:	c3                   	ret    

c0017f6e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017f6e:	55                   	push   ebp
c0017f6f:	89 e5                	mov    ebp,esp
c0017f71:	57                   	push   edi
c0017f72:	56                   	push   esi
c0017f73:	53                   	push   ebx
c0017f74:	83 ec 3c             	sub    esp,0x3c
c0017f77:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0017f7a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0017f7d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0017f80:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017f83:	66 89 5d c4          	mov    WORD PTR [ebp-0x3c],bx
c0017f87:	66 89 4d c0          	mov    WORD PTR [ebp-0x40],cx
c0017f8b:	66 89 55 bc          	mov    WORD PTR [ebp-0x44],dx
c0017f8f:	66 89 45 b8          	mov    WORD PTR [ebp-0x48],ax
c0017f93:	a0 80 63 03 c0       	mov    al,ds:0xc0036380
c0017f98:	83 f0 01             	xor    eax,0x1
c0017f9b:	0f b6 c0             	movzx  eax,al
c0017f9e:	85 c0                	test   eax,eax
c0017fa0:	74 07                	je     c0017fa9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017fa2:	c6 05 80 63 03 c0 01 	mov    BYTE PTR ds:0xc0036380,0x1
c0017fa9:	fa                   	cli    
c0017faa:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017faf:	83 c0 01             	add    eax,0x1
c0017fb2:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c0017fb7:	a0 89 63 03 c0       	mov    al,ds:0xc0036389
c0017fbc:	0f b6 c0             	movzx  eax,al
c0017fbf:	85 c0                	test   eax,eax
c0017fc1:	75 19                	jne    c0017fdc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x6e>
c0017fc3:	e8 1c f3 ff ff       	call   c00172e4 <schedule()>
c0017fc8:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0017fd0:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0017fd5:	85 c0                	test   eax,eax
c0017fd7:	75 d0                	jne    c0017fa9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017fd9:	fb                   	sti    
c0017fda:	eb cd                	jmp    c0017fa9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017fdc:	90                   	nop
c0017fdd:	8b 15 8c 63 03 c0    	mov    edx,DWORD PTR ds:0xc003638c
c0017fe3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0017fe6:	66 89 42 59          	mov    WORD PTR [edx+0x59],ax
c0017fea:	8b 15 8c 63 03 c0    	mov    edx,DWORD PTR ds:0xc003638c
c0017ff0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0017ff3:	66 89 42 5b          	mov    WORD PTR [edx+0x5b],ax
c0017ff7:	8b 15 8c 63 03 c0    	mov    edx,DWORD PTR ds:0xc003638c
c0017ffd:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0018000:	66 89 42 5d          	mov    WORD PTR [edx+0x5d],ax
c0018004:	8b 15 8c 63 03 c0    	mov    edx,DWORD PTR ds:0xc003638c
c001800a:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c001800d:	66 89 42 5f          	mov    WORD PTR [edx+0x5f],ax
c0018011:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c0018016:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001801a:	c7 05 90 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036390,0x0
c0018024:	83 ec 04             	sub    esp,0x4
c0018027:	6a 20                	push   0x20
c0018029:	6a 00                	push   0x0
c001802b:	68 a0 63 03 c0       	push   0xc00363a0
c0018030:	e8 bb 84 fe ff       	call   c00004f0 <memset>
c0018035:	83 c4 10             	add    esp,0x10
c0018038:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c001803b:	0f b7 55 c4          	movzx  edx,WORD PTR [ebp-0x3c]
c001803f:	0f b7 45 c0          	movzx  eax,WORD PTR [ebp-0x40]
c0018043:	83 ec 08             	sub    esp,0x8
c0018046:	52                   	push   edx
c0018047:	50                   	push   eax
c0018048:	e8 02 fd ff ff       	call   c0017d4f <Vm::realToLinear(unsigned short, unsigned short)>
c001804d:	83 c4 10             	add    esp,0x10
c0018050:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018056:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0018059:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c001805c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001805f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018062:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0018065:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018068:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c001806b:	89 c6                	mov    esi,eax
c001806d:	89 d7                	mov    edi,edx
c001806f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018071:	89 c8                	mov    eax,ecx
c0018073:	89 fa                	mov    edx,edi
c0018075:	89 f3                	mov    ebx,esi
c0018077:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001807a:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c001807d:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0018080:	c6 05 89 63 03 c0 00 	mov    BYTE PTR ds:0xc0036389,0x0
c0018087:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c001808f:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0018094:	85 c0                	test   eax,eax
c0018096:	75 01                	jne    c0018099 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x12b>
c0018098:	fb                   	sti    
c0018099:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c001809e:	83 ec 0c             	sub    esp,0xc
c00180a1:	50                   	push   eax
c00180a2:	e8 99 f5 ff ff       	call   c0017640 <unblockTask(ThreadControlBlock*)>
c00180a7:	83 c4 10             	add    esp,0x10
c00180aa:	b0 01                	mov    al,0x1
c00180ac:	8d 65 f4             	lea    esp,[ebp-0xc]
c00180af:	5b                   	pop    ebx
c00180b0:	5e                   	pop    esi
c00180b1:	5f                   	pop    edi
c00180b2:	5d                   	pop    ebp
c00180b3:	c3                   	ret    

c00180b4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00180b4:	55                   	push   ebp
c00180b5:	89 e5                	mov    ebp,esp
c00180b7:	56                   	push   esi
c00180b8:	53                   	push   ebx
c00180b9:	83 ec 30             	sub    esp,0x30
c00180bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00180bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00180c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00180c5:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00180c8:	66 89 5d d4          	mov    WORD PTR [ebp-0x2c],bx
c00180cc:	66 89 4d d0          	mov    WORD PTR [ebp-0x30],cx
c00180d0:	66 89 55 cc          	mov    WORD PTR [ebp-0x34],dx
c00180d4:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c00180d8:	a0 80 63 03 c0       	mov    al,ds:0xc0036380
c00180dd:	83 f0 01             	xor    eax,0x1
c00180e0:	0f b6 c0             	movzx  eax,al
c00180e3:	85 c0                	test   eax,eax
c00180e5:	74 07                	je     c00180ee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3a>
c00180e7:	c6 05 80 63 03 c0 01 	mov    BYTE PTR ds:0xc0036380,0x1
c00180ee:	83 ec 08             	sub    esp,0x8
c00180f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00180f4:	68 c8 c4 02 c0       	push   0xc002c4c8
c00180f9:	e8 7e ee fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00180fe:	83 c4 10             	add    esp,0x10
c0018101:	fa                   	cli    
c0018102:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c0018107:	83 c0 01             	add    eax,0x1
c001810a:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c001810f:	a0 89 63 03 c0       	mov    al,ds:0xc0036389
c0018114:	0f b6 c0             	movzx  eax,al
c0018117:	85 c0                	test   eax,eax
c0018119:	75 19                	jne    c0018134 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x80>
c001811b:	e8 c4 f1 ff ff       	call   c00172e4 <schedule()>
c0018120:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0018128:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001812d:	85 c0                	test   eax,eax
c001812f:	75 d0                	jne    c0018101 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0018131:	fb                   	sti    
c0018132:	eb cd                	jmp    c0018101 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0018134:	90                   	nop
c0018135:	8b 15 8c 63 03 c0    	mov    edx,DWORD PTR ds:0xc003638c
c001813b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001813e:	66 89 42 59          	mov    WORD PTR [edx+0x59],ax
c0018142:	8b 15 8c 63 03 c0    	mov    edx,DWORD PTR ds:0xc003638c
c0018148:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001814b:	66 89 42 5b          	mov    WORD PTR [edx+0x5b],ax
c001814f:	8b 15 8c 63 03 c0    	mov    edx,DWORD PTR ds:0xc003638c
c0018155:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
c0018158:	66 89 42 5d          	mov    WORD PTR [edx+0x5d],ax
c001815c:	8b 15 8c 63 03 c0    	mov    edx,DWORD PTR ds:0xc003638c
c0018162:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0018165:	66 89 42 5f          	mov    WORD PTR [edx+0x5f],ax
c0018169:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c001816e:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018172:	c7 05 90 63 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036390,0x0
c001817c:	83 ec 04             	sub    esp,0x4
c001817f:	6a 20                	push   0x20
c0018181:	6a 00                	push   0x0
c0018183:	68 a0 63 03 c0       	push   0xc00363a0
c0018188:	e8 63 83 fe ff       	call   c00004f0 <memset>
c001818d:	83 c4 10             	add    esp,0x10
c0018190:	c7 45 ec 14 01 00 00 	mov    DWORD PTR [ebp-0x14],0x114
c0018197:	83 ec 0c             	sub    esp,0xc
c001819a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001819d:	e8 55 81 ff ff       	call   c00102f7 <malloc>
c00181a2:	83 c4 10             	add    esp,0x10
c00181a5:	89 c3                	mov    ebx,eax
c00181a7:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c00181ac:	83 ec 04             	sub    esp,0x4
c00181af:	50                   	push   eax
c00181b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00181b3:	53                   	push   ebx
c00181b4:	e8 fb 09 ff ff       	call   c0008bb4 <File::File(char const*, Process*)>
c00181b9:	83 c4 10             	add    esp,0x10
c00181bc:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00181bf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00181c3:	75 29                	jne    c00181ee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13a>
c00181c5:	83 ec 0c             	sub    esp,0xc
c00181c8:	68 ea c4 02 c0       	push   0xc002c4ea
c00181cd:	e8 7a 85 ff ff       	call   c001074c <KePanic(char const*)>
c00181d2:	83 c4 10             	add    esp,0x10
c00181d5:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00181dd:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00181e2:	85 c0                	test   eax,eax
c00181e4:	75 01                	jne    c00181e7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x133>
c00181e6:	fb                   	sti    
c00181e7:	b0 00                	mov    al,0x0
c00181e9:	e9 fb 00 00 00       	jmp    c00182e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c00181ee:	83 ec 04             	sub    esp,0x4
c00181f1:	8d 45 df             	lea    eax,[ebp-0x21]
c00181f4:	50                   	push   eax
c00181f5:	8d 45 e0             	lea    eax,[ebp-0x20]
c00181f8:	50                   	push   eax
c00181f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00181fc:	e8 d3 0c ff ff       	call   c0008ed4 <File::stat(unsigned long long*, bool*)>
c0018201:	83 c4 10             	add    esp,0x10
c0018204:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0018207:	0f b6 c0             	movzx  eax,al
c001820a:	85 c0                	test   eax,eax
c001820c:	74 29                	je     c0018237 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001820e:	83 ec 0c             	sub    esp,0xc
c0018211:	68 fe c4 02 c0       	push   0xc002c4fe
c0018216:	e8 31 85 ff ff       	call   c001074c <KePanic(char const*)>
c001821b:	83 c4 10             	add    esp,0x10
c001821e:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0018226:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001822b:	85 c0                	test   eax,eax
c001822d:	75 01                	jne    c0018230 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17c>
c001822f:	fb                   	sti    
c0018230:	b0 00                	mov    al,0x0
c0018232:	e9 b2 00 00 00       	jmp    c00182e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c0018237:	83 ec 08             	sub    esp,0x8
c001823a:	6a 01                	push   0x1
c001823c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001823f:	e8 8e 09 ff ff       	call   c0008bd2 <File::open(FileOpenMode)>
c0018244:	83 c4 10             	add    esp,0x10
c0018247:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001824a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c001824e:	74 26                	je     c0018276 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1c2>
c0018250:	83 ec 0c             	sub    esp,0xc
c0018253:	68 17 c5 02 c0       	push   0xc002c517
c0018258:	e8 ef 84 ff ff       	call   c001074c <KePanic(char const*)>
c001825d:	83 c4 10             	add    esp,0x10
c0018260:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c0018268:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001826d:	85 c0                	test   eax,eax
c001826f:	75 01                	jne    c0018272 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1be>
c0018271:	fb                   	sti    
c0018272:	b0 00                	mov    al,0x0
c0018274:	eb 73                	jmp    c00182e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x235>
c0018276:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018279:	8b 00                	mov    eax,DWORD PTR [eax]
c001827b:	83 c0 0c             	add    eax,0xc
c001827e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0018280:	0f b7 55 d4          	movzx  edx,WORD PTR [ebp-0x2c]
c0018284:	0f b7 45 d0          	movzx  eax,WORD PTR [ebp-0x30]
c0018288:	83 ec 08             	sub    esp,0x8
c001828b:	52                   	push   edx
c001828c:	50                   	push   eax
c001828d:	e8 bd fa ff ff       	call   c0017d4f <Vm::realToLinear(unsigned short, unsigned short)>
c0018292:	83 c4 10             	add    esp,0x10
c0018295:	89 c6                	mov    esi,eax
c0018297:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001829a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001829d:	83 ec 0c             	sub    esp,0xc
c00182a0:	8d 4d d8             	lea    ecx,[ebp-0x28]
c00182a3:	51                   	push   ecx
c00182a4:	56                   	push   esi
c00182a5:	52                   	push   edx
c00182a6:	50                   	push   eax
c00182a7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00182aa:	ff d3                	call   ebx
c00182ac:	83 c4 20             	add    esp,0x20
c00182af:	83 ec 0c             	sub    esp,0xc
c00182b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00182b5:	e8 76 09 ff ff       	call   c0008c30 <File::close()>
c00182ba:	83 c4 10             	add    esp,0x10
c00182bd:	c6 05 89 63 03 c0 00 	mov    BYTE PTR ds:0xc0036389,0x0
c00182c4:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c00182cc:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c00182d1:	85 c0                	test   eax,eax
c00182d3:	75 01                	jne    c00182d6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x222>
c00182d5:	fb                   	sti    
c00182d6:	a1 8c 63 03 c0       	mov    eax,ds:0xc003638c
c00182db:	83 ec 0c             	sub    esp,0xc
c00182de:	50                   	push   eax
c00182df:	e8 5c f3 ff ff       	call   c0017640 <unblockTask(ThreadControlBlock*)>
c00182e4:	83 c4 10             	add    esp,0x10
c00182e7:	b0 01                	mov    al,0x1
c00182e9:	8d 65 f8             	lea    esp,[ebp-0x8]
c00182ec:	5b                   	pop    ebx
c00182ed:	5e                   	pop    esi
c00182ee:	5d                   	pop    ebp
c00182ef:	c3                   	ret    

c00182f0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00182f0:	55                   	push   ebp
c00182f1:	89 e5                	mov    ebp,esp
c00182f3:	83 ec 68             	sub    esp,0x68
c00182f6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00182f9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00182fc:	66 89 55 9c          	mov    WORD PTR [ebp-0x64],dx
c0018300:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0018304:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c001830b:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
c001830e:	83 e8 06             	sub    eax,0x6
c0018311:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0018315:	0f b7 55 98          	movzx  edx,WORD PTR [ebp-0x68]
c0018319:	0f b7 45 9c          	movzx  eax,WORD PTR [ebp-0x64]
c001831d:	52                   	push   edx
c001831e:	50                   	push   eax
c001831f:	e8 2b fa ff ff       	call   c0017d4f <Vm::realToLinear(unsigned short, unsigned short)>
c0018324:	83 c4 08             	add    esp,0x8
c0018327:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001832a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001832d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018330:	83 e8 06             	sub    eax,0x6
c0018333:	0f b7 d0             	movzx  edx,ax
c0018336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018339:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001833c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001833f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018342:	83 c0 02             	add    eax,0x2
c0018345:	0f b7 c0             	movzx  eax,ax
c0018348:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c001834b:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c001834e:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
c0018352:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0018355:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018358:	66 8b 45 da          	mov    ax,WORD PTR [ebp-0x26]
c001835c:	88 c2                	mov    dl,al
c001835e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018361:	88 10                	mov    BYTE PTR [eax],dl
c0018363:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
c0018367:	c1 e8 08             	shr    eax,0x8
c001836a:	89 c2                	mov    edx,eax
c001836c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001836f:	83 c0 01             	add    eax,0x1
c0018372:	88 10                	mov    BYTE PTR [eax],dl
c0018374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018377:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001837a:	0f b7 c0             	movzx  eax,ax
c001837d:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0018380:	83 c2 02             	add    edx,0x2
c0018383:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
c0018386:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c001838a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001838d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0018390:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c0018394:	88 c2                	mov    dl,al
c0018396:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0018399:	88 10                	mov    BYTE PTR [eax],dl
c001839b:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c001839f:	c1 e8 08             	shr    eax,0x8
c00183a2:	89 c2                	mov    edx,eax
c00183a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00183a7:	83 c0 01             	add    eax,0x1
c00183aa:	88 10                	mov    BYTE PTR [eax],dl
c00183ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00183b2:	0f b7 c0             	movzx  eax,ax
c00183b5:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00183b8:	83 c2 04             	add    edx,0x4
c00183bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00183be:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
c00183c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00183c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00183c8:	66 8b 45 f2          	mov    ax,WORD PTR [ebp-0xe]
c00183cc:	88 c2                	mov    dl,al
c00183ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00183d1:	88 10                	mov    BYTE PTR [eax],dl
c00183d3:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
c00183d7:	c1 e8 08             	shr    eax,0x8
c00183da:	89 c2                	mov    edx,eax
c00183dc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00183df:	83 c0 01             	add    eax,0x1
c00183e2:	88 10                	mov    BYTE PTR [eax],dl
c00183e4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00183e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00183eb:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c00183ee:	0f b6 c0             	movzx  eax,al
c00183f1:	85 c0                	test   eax,eax
c00183f3:	74 5e                	je     c0018453 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x163>
c00183f5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00183f8:	83 c0 04             	add    eax,0x4
c00183fb:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c00183fe:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018401:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0018404:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0018407:	8a 00                	mov    al,BYTE PTR [eax]
c0018409:	0f b6 c0             	movzx  eax,al
c001840c:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c001840f:	83 c2 01             	add    edx,0x1
c0018412:	8a 12                	mov    dl,BYTE PTR [edx]
c0018414:	0f b6 d2             	movzx  edx,dl
c0018417:	c1 e2 08             	shl    edx,0x8
c001841a:	09 d0                	or     eax,edx
c001841c:	80 cc 02             	or     ah,0x2
c001841f:	0f b7 c0             	movzx  eax,ax
c0018422:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0018425:	83 c2 04             	add    edx,0x4
c0018428:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c001842b:	66 89 45 ce          	mov    WORD PTR [ebp-0x32],ax
c001842f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018432:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0018435:	66 8b 45 ce          	mov    ax,WORD PTR [ebp-0x32]
c0018439:	88 c2                	mov    dl,al
c001843b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001843e:	88 10                	mov    BYTE PTR [eax],dl
c0018440:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
c0018444:	c1 e8 08             	shr    eax,0x8
c0018447:	89 c2                	mov    edx,eax
c0018449:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001844c:	83 c0 01             	add    eax,0x1
c001844f:	88 10                	mov    BYTE PTR [eax],dl
c0018451:	eb 5e                	jmp    c00184b1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x1c1>
c0018453:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0018456:	83 c0 04             	add    eax,0x4
c0018459:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c001845c:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c001845f:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0018462:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0018465:	8a 00                	mov    al,BYTE PTR [eax]
c0018467:	0f b6 c0             	movzx  eax,al
c001846a:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c001846d:	83 c2 01             	add    edx,0x1
c0018470:	8a 12                	mov    dl,BYTE PTR [edx]
c0018472:	0f b6 d2             	movzx  edx,dl
c0018475:	c1 e2 08             	shl    edx,0x8
c0018478:	09 d0                	or     eax,edx
c001847a:	0f b7 c0             	movzx  eax,ax
c001847d:	25 ff fd 00 00       	and    eax,0xfdff
c0018482:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0018485:	83 c2 04             	add    edx,0x4
c0018488:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
c001848b:	66 89 45 ba          	mov    WORD PTR [ebp-0x46],ax
c001848f:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0018492:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0018495:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
c0018499:	88 c2                	mov    dl,al
c001849b:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c001849e:	88 10                	mov    BYTE PTR [eax],dl
c00184a0:	0f b7 45 ba          	movzx  eax,WORD PTR [ebp-0x46]
c00184a4:	c1 e8 08             	shr    eax,0x8
c00184a7:	89 c2                	mov    edx,eax
c00184a9:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c00184ac:	83 c0 01             	add    eax,0x1
c00184af:	88 10                	mov    BYTE PTR [eax],dl
c00184b1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00184b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00184b8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00184bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00184bf:	c1 e0 02             	shl    eax,0x2
c00184c2:	8d 50 02             	lea    edx,[eax+0x2]
c00184c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00184c8:	01 d0                	add    eax,edx
c00184ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c00184cd:	0f b7 d0             	movzx  edx,ax
c00184d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184d3:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00184d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00184d9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00184e0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00184e3:	01 d0                	add    eax,edx
c00184e5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00184e8:	0f b7 d0             	movzx  edx,ax
c00184eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00184f1:	90                   	nop
c00184f2:	c9                   	leave  
c00184f3:	c3                   	ret    

c00184f4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00184f4:	55                   	push   ebp
c00184f5:	89 e5                	mov    ebp,esp
c00184f7:	83 ec 28             	sub    esp,0x28
c00184fa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00184fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018500:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0018504:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018508:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001850c:	c1 e0 04             	shl    eax,0x4
c001850f:	89 c2                	mov    edx,eax
c0018511:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018515:	01 d0                	add    eax,edx
c0018517:	3d ff ff 0f 00       	cmp    eax,0xfffff
c001851c:	7e 10                	jle    c001852e <Vm::readByteFromReal(unsigned short, unsigned short)+0x3a>
c001851e:	83 ec 0c             	sub    esp,0xc
c0018521:	68 30 c5 02 c0       	push   0xc002c530
c0018526:	e8 21 82 ff ff       	call   c001074c <KePanic(char const*)>
c001852b:	83 c4 10             	add    esp,0x10
c001852e:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018532:	c1 e0 04             	shl    eax,0x4
c0018535:	89 c2                	mov    edx,eax
c0018537:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001853b:	01 d0                	add    eax,edx
c001853d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018540:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018543:	8a 00                	mov    al,BYTE PTR [eax]
c0018545:	c9                   	leave  
c0018546:	c3                   	ret    

c0018547 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018547:	55                   	push   ebp
c0018548:	89 e5                	mov    ebp,esp
c001854a:	83 ec 28             	sub    esp,0x28
c001854d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018550:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018553:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0018557:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001855b:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001855f:	c1 e0 04             	shl    eax,0x4
c0018562:	89 c2                	mov    edx,eax
c0018564:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018568:	01 d0                	add    eax,edx
c001856a:	3d ff ff 0f 00       	cmp    eax,0xfffff
c001856f:	7e 10                	jle    c0018581 <Vm::readWordFromReal(unsigned short, unsigned short)+0x3a>
c0018571:	83 ec 0c             	sub    esp,0xc
c0018574:	68 30 c5 02 c0       	push   0xc002c530
c0018579:	e8 ce 81 ff ff       	call   c001074c <KePanic(char const*)>
c001857e:	83 c4 10             	add    esp,0x10
c0018581:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018585:	c1 e0 04             	shl    eax,0x4
c0018588:	89 c2                	mov    edx,eax
c001858a:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001858e:	01 d0                	add    eax,edx
c0018590:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018593:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018596:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018599:	c9                   	leave  
c001859a:	c3                   	ret    

c001859b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001859b:	55                   	push   ebp
c001859c:	89 e5                	mov    ebp,esp
c001859e:	83 ec 28             	sub    esp,0x28
c00185a1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00185a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00185a7:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00185ab:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00185af:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00185b3:	c1 e0 04             	shl    eax,0x4
c00185b6:	89 c2                	mov    edx,eax
c00185b8:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00185bc:	01 d0                	add    eax,edx
c00185be:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00185c3:	7e 10                	jle    c00185d5 <Vm::readDwordFromReal(unsigned short, unsigned short)+0x3a>
c00185c5:	83 ec 0c             	sub    esp,0xc
c00185c8:	68 30 c5 02 c0       	push   0xc002c530
c00185cd:	e8 7a 81 ff ff       	call   c001074c <KePanic(char const*)>
c00185d2:	83 c4 10             	add    esp,0x10
c00185d5:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00185d9:	c1 e0 04             	shl    eax,0x4
c00185dc:	89 c2                	mov    edx,eax
c00185de:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00185e2:	01 d0                	add    eax,edx
c00185e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00185e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00185ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00185ec:	c9                   	leave  
c00185ed:	c3                   	ret    

c00185ee <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00185ee:	55                   	push   ebp
c00185ef:	89 e5                	mov    ebp,esp
c00185f1:	83 ec 28             	sub    esp,0x28
c00185f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00185f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00185fa:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00185fd:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0018601:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018605:	88 c8                	mov    al,cl
c0018607:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
c001860a:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001860e:	c1 e0 04             	shl    eax,0x4
c0018611:	89 c2                	mov    edx,eax
c0018613:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018617:	01 d0                	add    eax,edx
c0018619:	3d ff ff 0f 00       	cmp    eax,0xfffff
c001861e:	7e 10                	jle    c0018630 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)+0x42>
c0018620:	83 ec 0c             	sub    esp,0xc
c0018623:	68 30 c5 02 c0       	push   0xc002c530
c0018628:	e8 1f 81 ff ff       	call   c001074c <KePanic(char const*)>
c001862d:	83 c4 10             	add    esp,0x10
c0018630:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018634:	c1 e0 04             	shl    eax,0x4
c0018637:	89 c2                	mov    edx,eax
c0018639:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001863d:	01 d0                	add    eax,edx
c001863f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018642:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0018645:	8a 55 dc             	mov    dl,BYTE PTR [ebp-0x24]
c0018648:	88 10                	mov    BYTE PTR [eax],dl
c001864a:	90                   	nop
c001864b:	c9                   	leave  
c001864c:	c3                   	ret    

c001864d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001864d:	55                   	push   ebp
c001864e:	89 e5                	mov    ebp,esp
c0018650:	83 ec 28             	sub    esp,0x28
c0018653:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0018656:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018659:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001865c:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
c0018660:	66 89 55 e0          	mov    WORD PTR [ebp-0x20],dx
c0018664:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018668:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001866c:	c1 e0 04             	shl    eax,0x4
c001866f:	89 c2                	mov    edx,eax
c0018671:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0018675:	01 d0                	add    eax,edx
c0018677:	3d ff ff 0f 00       	cmp    eax,0xfffff
c001867c:	7e 10                	jle    c001868e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)+0x41>
c001867e:	83 ec 0c             	sub    esp,0xc
c0018681:	68 30 c5 02 c0       	push   0xc002c530
c0018686:	e8 c1 80 ff ff       	call   c001074c <KePanic(char const*)>
c001868b:	83 c4 10             	add    esp,0x10
c001868e:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0018692:	c1 e0 04             	shl    eax,0x4
c0018695:	89 c2                	mov    edx,eax
c0018697:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001869b:	01 d0                	add    eax,edx
c001869d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00186a0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00186a3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00186a6:	66 89 02             	mov    WORD PTR [edx],ax
c00186a9:	90                   	nop
c00186aa:	c9                   	leave  
c00186ab:	c3                   	ret    

c00186ac <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00186ac:	55                   	push   ebp
c00186ad:	89 e5                	mov    ebp,esp
c00186af:	83 ec 28             	sub    esp,0x28
c00186b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00186b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00186b8:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00186bc:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00186c0:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00186c4:	c1 e0 04             	shl    eax,0x4
c00186c7:	89 c2                	mov    edx,eax
c00186c9:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00186cd:	01 d0                	add    eax,edx
c00186cf:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00186d4:	7e 10                	jle    c00186e6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)+0x3a>
c00186d6:	83 ec 0c             	sub    esp,0xc
c00186d9:	68 30 c5 02 c0       	push   0xc002c530
c00186de:	e8 69 80 ff ff       	call   c001074c <KePanic(char const*)>
c00186e3:	83 c4 10             	add    esp,0x10
c00186e6:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00186ea:	c1 e0 04             	shl    eax,0x4
c00186ed:	89 c2                	mov    edx,eax
c00186ef:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00186f3:	01 d0                	add    eax,edx
c00186f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00186f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00186fb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00186fe:	89 10                	mov    DWORD PTR [eax],edx
c0018700:	90                   	nop
c0018701:	c9                   	leave  
c0018702:	c3                   	ret    

c0018703 <Vm::faultHandler(regs*)>:
c0018703:	55                   	push   ebp
c0018704:	89 e5                	mov    ebp,esp
c0018706:	57                   	push   edi
c0018707:	56                   	push   esi
c0018708:	53                   	push   ebx
c0018709:	81 ec ac 00 00 00    	sub    esp,0xac
c001870f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018712:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018715:	0f b7 d0             	movzx  edx,ax
c0018718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001871b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001871e:	0f b7 c0             	movzx  eax,ax
c0018721:	52                   	push   edx
c0018722:	50                   	push   eax
c0018723:	e8 27 f6 ff ff       	call   c0017d4f <Vm::realToLinear(unsigned short, unsigned short)>
c0018728:	83 c4 08             	add    esp,0x8
c001872b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001872e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018731:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018734:	0f b7 d0             	movzx  edx,ax
c0018737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001873a:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c001873d:	0f b7 c0             	movzx  eax,ax
c0018740:	52                   	push   edx
c0018741:	50                   	push   eax
c0018742:	e8 08 f6 ff ff       	call   c0017d4f <Vm::realToLinear(unsigned short, unsigned short)>
c0018747:	83 c4 08             	add    esp,0x8
c001874a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001874d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018750:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018753:	0f b7 d0             	movzx  edx,ax
c0018756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018759:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c001875c:	0f b7 c0             	movzx  eax,ax
c001875f:	52                   	push   edx
c0018760:	50                   	push   eax
c0018761:	e8 e9 f5 ff ff       	call   c0017d4f <Vm::realToLinear(unsigned short, unsigned short)>
c0018766:	83 c4 08             	add    esp,0x8
c0018769:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001876c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0018773:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
c0018777:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
c001877b:	c6 45 e1 06          	mov    BYTE PTR [ebp-0x1f],0x6
c001877f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018782:	8a 00                	mov    al,BYTE PTR [eax]
c0018784:	0f b6 c0             	movzx  eax,al
c0018787:	83 e8 26             	sub    eax,0x26
c001878a:	3d d5 00 00 00       	cmp    eax,0xd5
c001878f:	0f 87 f4 0c 00 00    	ja     c0019489 <Vm::faultHandler(regs*)+0xd86>
c0018795:	8b 04 85 b0 c5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3a50]
c001879c:	ff e0                	jmp    eax
c001879e:	c6 45 e1 02          	mov    BYTE PTR [ebp-0x1f],0x2
c00187a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00187a8:	8d 50 01             	lea    edx,[eax+0x1]
c00187ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00187b1:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00187b5:	e9 83 0d 00 00       	jmp    c001953d <Vm::faultHandler(regs*)+0xe3a>
c00187ba:	c6 45 e1 00          	mov    BYTE PTR [ebp-0x1f],0x0
c00187be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00187c4:	8d 50 01             	lea    edx,[eax+0x1]
c00187c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00187cd:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00187d1:	e9 67 0d 00 00       	jmp    c001953d <Vm::faultHandler(regs*)+0xe3a>
c00187d6:	c6 45 e1 01          	mov    BYTE PTR [ebp-0x1f],0x1
c00187da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00187e0:	8d 50 01             	lea    edx,[eax+0x1]
c00187e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00187e9:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c00187ed:	e9 4b 0d 00 00       	jmp    c001953d <Vm::faultHandler(regs*)+0xe3a>
c00187f2:	c6 45 e1 03          	mov    BYTE PTR [ebp-0x1f],0x3
c00187f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187f9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00187fc:	8d 50 01             	lea    edx,[eax+0x1]
c00187ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018802:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018805:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018809:	e9 2f 0d 00 00       	jmp    c001953d <Vm::faultHandler(regs*)+0xe3a>
c001880e:	c6 45 e1 04          	mov    BYTE PTR [ebp-0x1f],0x4
c0018812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018815:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018818:	8d 50 01             	lea    edx,[eax+0x1]
c001881b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001881e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018821:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018825:	e9 13 0d 00 00       	jmp    c001953d <Vm::faultHandler(regs*)+0xe3a>
c001882a:	c6 45 e1 05          	mov    BYTE PTR [ebp-0x1f],0x5
c001882e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018831:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018834:	8d 50 01             	lea    edx,[eax+0x1]
c0018837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001883a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001883d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018841:	e9 f7 0c 00 00       	jmp    c001953d <Vm::faultHandler(regs*)+0xe3a>
c0018846:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001884a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001884d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018850:	8d 50 01             	lea    edx,[eax+0x1]
c0018853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018856:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018859:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c001885d:	e9 db 0c 00 00       	jmp    c001953d <Vm::faultHandler(regs*)+0xe3a>
c0018862:	c6 45 e2 01          	mov    BYTE PTR [ebp-0x1e],0x1
c0018866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018869:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001886c:	8d 50 01             	lea    edx,[eax+0x1]
c001886f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018872:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018875:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018879:	e9 bf 0c 00 00       	jmp    c001953d <Vm::faultHandler(regs*)+0xe3a>
c001887e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018881:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018884:	8d 50 01             	lea    edx,[eax+0x1]
c0018887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001888a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001888d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0018891:	e9 a7 0c 00 00       	jmp    c001953d <Vm::faultHandler(regs*)+0xe3a>
c0018896:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001889a:	85 c0                	test   eax,eax
c001889c:	74 5b                	je     c00188f9 <Vm::faultHandler(regs*)+0x1f6>
c001889e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188a1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00188a4:	83 e8 04             	sub    eax,0x4
c00188a7:	0f b7 d0             	movzx  edx,ax
c00188aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188ad:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00188b0:	83 6d d0 04          	sub    DWORD PTR [ebp-0x30],0x4
c00188b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00188ba:	25 ff 0d 00 00       	and    eax,0xdff
c00188bf:	89 c2                	mov    edx,eax
c00188c1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00188c4:	89 10                	mov    DWORD PTR [eax],edx
c00188c6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00188cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00188cd:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c00188d0:	0f b6 c0             	movzx  eax,al
c00188d3:	85 c0                	test   eax,eax
c00188d5:	74 11                	je     c00188e8 <Vm::faultHandler(regs*)+0x1e5>
c00188d7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00188da:	8b 00                	mov    eax,DWORD PTR [eax]
c00188dc:	80 cc 02             	or     ah,0x2
c00188df:	89 c2                	mov    edx,eax
c00188e1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00188e4:	89 10                	mov    DWORD PTR [eax],edx
c00188e6:	eb 64                	jmp    c001894c <Vm::faultHandler(regs*)+0x249>
c00188e8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00188eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00188ed:	80 e4 fd             	and    ah,0xfd
c00188f0:	89 c2                	mov    edx,eax
c00188f2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00188f5:	89 10                	mov    DWORD PTR [eax],edx
c00188f7:	eb 53                	jmp    c001894c <Vm::faultHandler(regs*)+0x249>
c00188f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188fc:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00188ff:	83 e8 02             	sub    eax,0x2
c0018902:	0f b7 d0             	movzx  edx,ax
c0018905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018908:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001890b:	83 6d d4 02          	sub    DWORD PTR [ebp-0x2c],0x2
c001890f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018912:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018915:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018918:	66 89 02             	mov    WORD PTR [edx],ax
c001891b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018920:	8b 00                	mov    eax,DWORD PTR [eax]
c0018922:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0018925:	0f b6 c0             	movzx  eax,al
c0018928:	85 c0                	test   eax,eax
c001892a:	74 11                	je     c001893d <Vm::faultHandler(regs*)+0x23a>
c001892c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001892f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018932:	80 cc 02             	or     ah,0x2
c0018935:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018938:	66 89 02             	mov    WORD PTR [edx],ax
c001893b:	eb 0f                	jmp    c001894c <Vm::faultHandler(regs*)+0x249>
c001893d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018940:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018943:	80 e4 fd             	and    ah,0xfd
c0018946:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018949:	66 89 02             	mov    WORD PTR [edx],ax
c001894c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001894f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018952:	8d 50 01             	lea    edx,[eax+0x1]
c0018955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018958:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001895b:	b0 01                	mov    al,0x1
c001895d:	e9 e0 0b 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018962:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018966:	85 c0                	test   eax,eax
c0018968:	74 46                	je     c00189b0 <Vm::faultHandler(regs*)+0x2ad>
c001896a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001896d:	8b 00                	mov    eax,DWORD PTR [eax]
c001896f:	25 ff 0d 00 00       	and    eax,0xdff
c0018974:	0d 00 02 02 00       	or     eax,0x20200
c0018979:	89 c2                	mov    edx,eax
c001897b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001897e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018981:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0018984:	8b 00                	mov    eax,DWORD PTR [eax]
c0018986:	25 00 02 00 00       	and    eax,0x200
c001898b:	89 c2                	mov    edx,eax
c001898d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018992:	8b 00                	mov    eax,DWORD PTR [eax]
c0018994:	85 d2                	test   edx,edx
c0018996:	0f 95 c2             	setne  dl
c0018999:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c001899c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001899f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00189a2:	83 c0 04             	add    eax,0x4
c00189a5:	0f b7 d0             	movzx  edx,ax
c00189a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189ab:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00189ae:	eb 47                	jmp    c00189f7 <Vm::faultHandler(regs*)+0x2f4>
c00189b0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00189b3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00189b6:	0f b7 c0             	movzx  eax,ax
c00189b9:	0d 00 02 02 00       	or     eax,0x20200
c00189be:	89 c2                	mov    edx,eax
c00189c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189c3:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00189c6:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00189c9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00189cc:	0f b7 c0             	movzx  eax,ax
c00189cf:	25 00 02 00 00       	and    eax,0x200
c00189d4:	89 c2                	mov    edx,eax
c00189d6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00189db:	8b 00                	mov    eax,DWORD PTR [eax]
c00189dd:	85 d2                	test   edx,edx
c00189df:	0f 95 c2             	setne  dl
c00189e2:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c00189e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189e8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00189eb:	83 c0 02             	add    eax,0x2
c00189ee:	0f b7 d0             	movzx  edx,ax
c00189f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189f4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00189f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00189fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00189fd:	8d 50 01             	lea    edx,[eax+0x1]
c0018a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a03:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018a06:	b0 01                	mov    al,0x1
c0018a08:	e9 35 0b 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018a0d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a10:	83 c0 01             	add    eax,0x1
c0018a13:	8a 00                	mov    al,BYTE PTR [eax]
c0018a15:	0f b6 c0             	movzx  eax,al
c0018a18:	3d ee 00 00 00       	cmp    eax,0xee
c0018a1d:	75 19                	jne    c0018a38 <Vm::faultHandler(regs*)+0x335>
c0018a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a22:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018a25:	83 ec 0c             	sub    esp,0xc
c0018a28:	50                   	push   eax
c0018a29:	e8 ec f3 ff ff       	call   c0017e1a <Vm::mainloop3(unsigned long)>
c0018a2e:	83 c4 10             	add    esp,0x10
c0018a31:	b0 01                	mov    al,0x1
c0018a33:	e9 0a 0b 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a3b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018a3e:	0f b7 c8             	movzx  ecx,ax
c0018a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a44:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018a47:	0f b7 d0             	movzx  edx,ax
c0018a4a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018a4d:	83 c0 01             	add    eax,0x1
c0018a50:	8a 00                	mov    al,BYTE PTR [eax]
c0018a52:	0f b6 c0             	movzx  eax,al
c0018a55:	83 ec 0c             	sub    esp,0xc
c0018a58:	51                   	push   ecx
c0018a59:	52                   	push   edx
c0018a5a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0018a5d:	50                   	push   eax
c0018a5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018a61:	e8 8a f8 ff ff       	call   c00182f0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018a66:	83 c4 20             	add    esp,0x20
c0018a69:	b0 01                	mov    al,0x1
c0018a6b:	e9 d2 0a 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018a70:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018a75:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a77:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018a7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a7e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018a81:	8d 50 01             	lea    edx,[eax+0x1]
c0018a84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a87:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018a8a:	b0 01                	mov    al,0x1
c0018a8c:	e9 b1 0a 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018a91:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a98:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018a9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a9f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018aa2:	8d 50 01             	lea    edx,[eax+0x1]
c0018aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018aa8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018aab:	b0 01                	mov    al,0x1
c0018aad:	e9 90 0a 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018ab2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018ab5:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0018ab8:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0018abb:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
c0018abe:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c0018ac1:	8a 00                	mov    al,BYTE PTR [eax]
c0018ac3:	0f b6 c0             	movzx  eax,al
c0018ac6:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c0018ac9:	83 c2 01             	add    edx,0x1
c0018acc:	8a 12                	mov    dl,BYTE PTR [edx]
c0018ace:	0f b6 d2             	movzx  edx,dl
c0018ad1:	c1 e2 08             	shl    edx,0x8
c0018ad4:	09 d0                	or     eax,edx
c0018ad6:	0f b7 d0             	movzx  edx,ax
c0018ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018adc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018ae2:	83 c0 02             	add    eax,0x2
c0018ae5:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0018ae8:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0018aeb:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0018aee:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0018af1:	8a 00                	mov    al,BYTE PTR [eax]
c0018af3:	0f b6 c0             	movzx  eax,al
c0018af6:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c0018af9:	83 c2 01             	add    edx,0x1
c0018afc:	8a 12                	mov    dl,BYTE PTR [edx]
c0018afe:	0f b6 d2             	movzx  edx,dl
c0018b01:	c1 e2 08             	shl    edx,0x8
c0018b04:	09 d0                	or     eax,edx
c0018b06:	0f b7 d0             	movzx  edx,ax
c0018b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b0c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0018b0f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018b12:	83 c0 04             	add    eax,0x4
c0018b15:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
c0018b18:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0018b1b:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
c0018b1e:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c0018b21:	8a 00                	mov    al,BYTE PTR [eax]
c0018b23:	0f b6 c0             	movzx  eax,al
c0018b26:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c0018b29:	83 c2 01             	add    edx,0x1
c0018b2c:	8a 12                	mov    dl,BYTE PTR [edx]
c0018b2e:	0f b6 d2             	movzx  edx,dl
c0018b31:	c1 e2 08             	shl    edx,0x8
c0018b34:	09 d0                	or     eax,edx
c0018b36:	0f b7 c0             	movzx  eax,ax
c0018b39:	0d 00 02 02 00       	or     eax,0x20200
c0018b3e:	89 c2                	mov    edx,eax
c0018b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b43:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0018b46:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0018b49:	83 c0 04             	add    eax,0x4
c0018b4c:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0018b4f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0018b52:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0018b55:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0018b58:	8a 00                	mov    al,BYTE PTR [eax]
c0018b5a:	0f b6 c0             	movzx  eax,al
c0018b5d:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0018b60:	83 c2 01             	add    edx,0x1
c0018b63:	8a 12                	mov    dl,BYTE PTR [edx]
c0018b65:	0f b6 d2             	movzx  edx,dl
c0018b68:	c1 e2 08             	shl    edx,0x8
c0018b6b:	09 d0                	or     eax,edx
c0018b6d:	0f b7 c0             	movzx  eax,ax
c0018b70:	25 00 02 00 00       	and    eax,0x200
c0018b75:	89 c2                	mov    edx,eax
c0018b77:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018b7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b7e:	85 d2                	test   edx,edx
c0018b80:	0f 95 c2             	setne  dl
c0018b83:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0018b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b89:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018b8c:	83 c0 06             	add    eax,0x6
c0018b8f:	0f b7 d0             	movzx  edx,ax
c0018b92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b95:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0018b98:	b0 01                	mov    al,0x1
c0018b9a:	e9 a3 09 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018b9f:	66 c7 45 ca 00 00    	mov    WORD PTR [ebp-0x36],0x0
c0018ba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ba8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018bab:	66 89 45 ca          	mov    WORD PTR [ebp-0x36],ax
c0018baf:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018bb3:	85 c0                	test   eax,eax
c0018bb5:	74 7a                	je     c0018c31 <Vm::faultHandler(regs*)+0x52e>
c0018bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018bbd:	3d ff ff 00 00       	cmp    eax,0xffff
c0018bc2:	76 6d                	jbe    c0018c31 <Vm::faultHandler(regs*)+0x52e>
c0018bc4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018bc7:	83 c0 05             	add    eax,0x5
c0018bca:	8a 00                	mov    al,BYTE PTR [eax]
c0018bcc:	0f b6 c0             	movzx  eax,al
c0018bcf:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018bd5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018bd8:	83 c0 04             	add    eax,0x4
c0018bdb:	8a 00                	mov    al,BYTE PTR [eax]
c0018bdd:	0f b6 f8             	movzx  edi,al
c0018be0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018be3:	83 c0 03             	add    eax,0x3
c0018be6:	8a 00                	mov    al,BYTE PTR [eax]
c0018be8:	0f b6 f0             	movzx  esi,al
c0018beb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018bee:	83 c0 02             	add    eax,0x2
c0018bf1:	8a 00                	mov    al,BYTE PTR [eax]
c0018bf3:	0f b6 d8             	movzx  ebx,al
c0018bf6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018bf9:	83 c0 01             	add    eax,0x1
c0018bfc:	8a 00                	mov    al,BYTE PTR [eax]
c0018bfe:	0f b6 c8             	movzx  ecx,al
c0018c01:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018c04:	8a 00                	mov    al,BYTE PTR [eax]
c0018c06:	0f b6 d0             	movzx  edx,al
c0018c09:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018c0c:	8a 00                	mov    al,BYTE PTR [eax]
c0018c0e:	0f b6 c0             	movzx  eax,al
c0018c11:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018c17:	57                   	push   edi
c0018c18:	56                   	push   esi
c0018c19:	53                   	push   ebx
c0018c1a:	51                   	push   ecx
c0018c1b:	52                   	push   edx
c0018c1c:	50                   	push   eax
c0018c1d:	68 50 c5 02 c0       	push   0xc002c550
c0018c22:	e8 55 e3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018c27:	83 c4 20             	add    esp,0x20
c0018c2a:	b0 00                	mov    al,0x0
c0018c2c:	e9 11 09 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c34:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018c37:	0f b7 c0             	movzx  eax,ax
c0018c3a:	83 ec 0c             	sub    esp,0xc
c0018c3d:	50                   	push   eax
c0018c3e:	e8 6e f0 ff ff       	call   c0017cb1 <Vm::inbv(unsigned short)>
c0018c43:	83 c4 10             	add    esp,0x10
c0018c46:	0f b6 c8             	movzx  ecx,al
c0018c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c4c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018c4f:	0f b7 d0             	movzx  edx,ax
c0018c52:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
c0018c56:	83 ec 04             	sub    esp,0x4
c0018c59:	51                   	push   ecx
c0018c5a:	52                   	push   edx
c0018c5b:	50                   	push   eax
c0018c5c:	e8 8d f9 ff ff       	call   c00185ee <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018c61:	83 c4 10             	add    esp,0x10
c0018c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c67:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018c6a:	25 00 04 00 00       	and    eax,0x400
c0018c6f:	85 c0                	test   eax,eax
c0018c71:	74 14                	je     c0018c87 <Vm::faultHandler(regs*)+0x584>
c0018c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c76:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018c79:	83 e8 01             	sub    eax,0x1
c0018c7c:	0f b7 d0             	movzx  edx,ax
c0018c7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c82:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018c85:	eb 12                	jmp    c0018c99 <Vm::faultHandler(regs*)+0x596>
c0018c87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c8a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018c8d:	83 c0 01             	add    eax,0x1
c0018c90:	0f b7 d0             	movzx  edx,ax
c0018c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c96:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018c9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018c9f:	8d 50 01             	lea    edx,[eax+0x1]
c0018ca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ca5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018ca8:	b0 01                	mov    al,0x1
c0018caa:	e9 93 08 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018caf:	66 c7 45 c8 00 00    	mov    WORD PTR [ebp-0x38],0x0
c0018cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018cbb:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0018cbf:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018cc3:	85 c0                	test   eax,eax
c0018cc5:	74 7a                	je     c0018d41 <Vm::faultHandler(regs*)+0x63e>
c0018cc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018cca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018ccd:	3d ff ff 00 00       	cmp    eax,0xffff
c0018cd2:	76 6d                	jbe    c0018d41 <Vm::faultHandler(regs*)+0x63e>
c0018cd4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cd7:	83 c0 05             	add    eax,0x5
c0018cda:	8a 00                	mov    al,BYTE PTR [eax]
c0018cdc:	0f b6 c0             	movzx  eax,al
c0018cdf:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018ce5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ce8:	83 c0 04             	add    eax,0x4
c0018ceb:	8a 00                	mov    al,BYTE PTR [eax]
c0018ced:	0f b6 f8             	movzx  edi,al
c0018cf0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cf3:	83 c0 03             	add    eax,0x3
c0018cf6:	8a 00                	mov    al,BYTE PTR [eax]
c0018cf8:	0f b6 f0             	movzx  esi,al
c0018cfb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018cfe:	83 c0 02             	add    eax,0x2
c0018d01:	8a 00                	mov    al,BYTE PTR [eax]
c0018d03:	0f b6 d8             	movzx  ebx,al
c0018d06:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d09:	83 c0 01             	add    eax,0x1
c0018d0c:	8a 00                	mov    al,BYTE PTR [eax]
c0018d0e:	0f b6 c8             	movzx  ecx,al
c0018d11:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d14:	8a 00                	mov    al,BYTE PTR [eax]
c0018d16:	0f b6 d0             	movzx  edx,al
c0018d19:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018d1c:	8a 00                	mov    al,BYTE PTR [eax]
c0018d1e:	0f b6 c0             	movzx  eax,al
c0018d21:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018d27:	57                   	push   edi
c0018d28:	56                   	push   esi
c0018d29:	53                   	push   ebx
c0018d2a:	51                   	push   ecx
c0018d2b:	52                   	push   edx
c0018d2c:	50                   	push   eax
c0018d2d:	68 50 c5 02 c0       	push   0xc002c550
c0018d32:	e8 45 e2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018d37:	83 c4 20             	add    esp,0x20
c0018d3a:	b0 00                	mov    al,0x0
c0018d3c:	e9 01 08 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018d41:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018d45:	85 c0                	test   eax,eax
c0018d47:	74 6f                	je     c0018db8 <Vm::faultHandler(regs*)+0x6b5>
c0018d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d4c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018d4f:	0f b7 c0             	movzx  eax,ax
c0018d52:	66 89 45 a6          	mov    WORD PTR [ebp-0x5a],ax
c0018d56:	66 8b 45 a6          	mov    ax,WORD PTR [ebp-0x5a]
c0018d5a:	89 c2                	mov    edx,eax
c0018d5c:	ed                   	in     eax,dx
c0018d5d:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
c0018d60:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
c0018d63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d66:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018d69:	0f b7 d0             	movzx  edx,ax
c0018d6c:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018d70:	83 ec 04             	sub    esp,0x4
c0018d73:	51                   	push   ecx
c0018d74:	52                   	push   edx
c0018d75:	50                   	push   eax
c0018d76:	e8 31 f9 ff ff       	call   c00186ac <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018d7b:	83 c4 10             	add    esp,0x10
c0018d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d81:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018d84:	25 00 04 00 00       	and    eax,0x400
c0018d89:	85 c0                	test   eax,eax
c0018d8b:	74 17                	je     c0018da4 <Vm::faultHandler(regs*)+0x6a1>
c0018d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d90:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018d93:	83 e8 04             	sub    eax,0x4
c0018d96:	0f b7 d0             	movzx  edx,ax
c0018d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018d9c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018d9f:	e9 83 00 00 00       	jmp    c0018e27 <Vm::faultHandler(regs*)+0x724>
c0018da4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018da7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018daa:	83 c0 04             	add    eax,0x4
c0018dad:	0f b7 d0             	movzx  edx,ax
c0018db0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018db3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018db6:	eb 6f                	jmp    c0018e27 <Vm::faultHandler(regs*)+0x724>
c0018db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dbb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018dbe:	0f b7 c0             	movzx  eax,ax
c0018dc1:	66 89 45 9e          	mov    WORD PTR [ebp-0x62],ax
c0018dc5:	66 8b 45 9e          	mov    ax,WORD PTR [ebp-0x62]
c0018dc9:	89 c2                	mov    edx,eax
c0018dcb:	66 ed                	in     ax,dx
c0018dcd:	66 89 45 9c          	mov    WORD PTR [ebp-0x64],ax
c0018dd1:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
c0018dd4:	0f b7 c8             	movzx  ecx,ax
c0018dd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018dda:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018ddd:	0f b7 d0             	movzx  edx,ax
c0018de0:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c0018de4:	83 ec 04             	sub    esp,0x4
c0018de7:	51                   	push   ecx
c0018de8:	52                   	push   edx
c0018de9:	50                   	push   eax
c0018dea:	e8 5e f8 ff ff       	call   c001864d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018def:	83 c4 10             	add    esp,0x10
c0018df2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018df5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018df8:	25 00 04 00 00       	and    eax,0x400
c0018dfd:	85 c0                	test   eax,eax
c0018dff:	74 14                	je     c0018e15 <Vm::faultHandler(regs*)+0x712>
c0018e01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e04:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018e07:	83 e8 02             	sub    eax,0x2
c0018e0a:	0f b7 d0             	movzx  edx,ax
c0018e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e10:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018e13:	eb 12                	jmp    c0018e27 <Vm::faultHandler(regs*)+0x724>
c0018e15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e18:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018e1b:	83 c0 02             	add    eax,0x2
c0018e1e:	0f b7 d0             	movzx  edx,ax
c0018e21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e24:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018e27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018e2d:	8d 50 01             	lea    edx,[eax+0x1]
c0018e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e33:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018e36:	b0 01                	mov    al,0x1
c0018e38:	e9 05 07 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018e3d:	66 c7 45 de 00 00    	mov    WORD PTR [ebp-0x22],0x0
c0018e43:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c0018e47:	83 f8 06             	cmp    eax,0x6
c0018e4a:	77 4f                	ja     c0018e9b <Vm::faultHandler(regs*)+0x798>
c0018e4c:	8b 04 85 08 c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd36f8]
c0018e53:	ff e0                	jmp    eax
c0018e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018e5b:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018e5f:	eb 3a                	jmp    c0018e9b <Vm::faultHandler(regs*)+0x798>
c0018e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018e67:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018e6b:	eb 2e                	jmp    c0018e9b <Vm::faultHandler(regs*)+0x798>
c0018e6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e70:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018e73:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018e77:	eb 22                	jmp    c0018e9b <Vm::faultHandler(regs*)+0x798>
c0018e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018e7f:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018e83:	eb 16                	jmp    c0018e9b <Vm::faultHandler(regs*)+0x798>
c0018e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e88:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e8a:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018e8e:	eb 0b                	jmp    c0018e9b <Vm::faultHandler(regs*)+0x798>
c0018e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018e93:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018e96:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c0018e9a:	90                   	nop
c0018e9b:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018e9f:	85 c0                	test   eax,eax
c0018ea1:	74 7a                	je     c0018f1d <Vm::faultHandler(regs*)+0x81a>
c0018ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ea6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018ea9:	3d ff ff 00 00       	cmp    eax,0xffff
c0018eae:	76 6d                	jbe    c0018f1d <Vm::faultHandler(regs*)+0x81a>
c0018eb0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018eb3:	83 c0 05             	add    eax,0x5
c0018eb6:	8a 00                	mov    al,BYTE PTR [eax]
c0018eb8:	0f b6 c0             	movzx  eax,al
c0018ebb:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018ec1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ec4:	83 c0 04             	add    eax,0x4
c0018ec7:	8a 00                	mov    al,BYTE PTR [eax]
c0018ec9:	0f b6 f8             	movzx  edi,al
c0018ecc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ecf:	83 c0 03             	add    eax,0x3
c0018ed2:	8a 00                	mov    al,BYTE PTR [eax]
c0018ed4:	0f b6 f0             	movzx  esi,al
c0018ed7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018eda:	83 c0 02             	add    eax,0x2
c0018edd:	8a 00                	mov    al,BYTE PTR [eax]
c0018edf:	0f b6 d8             	movzx  ebx,al
c0018ee2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ee5:	83 c0 01             	add    eax,0x1
c0018ee8:	8a 00                	mov    al,BYTE PTR [eax]
c0018eea:	0f b6 c8             	movzx  ecx,al
c0018eed:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0018ef2:	0f b6 d0             	movzx  edx,al
c0018ef5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018ef8:	8a 00                	mov    al,BYTE PTR [eax]
c0018efa:	0f b6 c0             	movzx  eax,al
c0018efd:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018f03:	57                   	push   edi
c0018f04:	56                   	push   esi
c0018f05:	53                   	push   ebx
c0018f06:	51                   	push   ecx
c0018f07:	52                   	push   edx
c0018f08:	50                   	push   eax
c0018f09:	68 50 c5 02 c0       	push   0xc002c550
c0018f0e:	e8 69 e0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018f13:	83 c4 20             	add    esp,0x20
c0018f16:	b0 00                	mov    al,0x0
c0018f18:	e9 25 06 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018f1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f20:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f23:	0f b7 d0             	movzx  edx,ax
c0018f26:	0f b7 45 de          	movzx  eax,WORD PTR [ebp-0x22]
c0018f2a:	83 ec 08             	sub    esp,0x8
c0018f2d:	52                   	push   edx
c0018f2e:	50                   	push   eax
c0018f2f:	e8 c0 f5 ff ff       	call   c00184f4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018f34:	83 c4 10             	add    esp,0x10
c0018f37:	0f b6 d0             	movzx  edx,al
c0018f3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f3d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018f40:	0f b7 c0             	movzx  eax,ax
c0018f43:	83 ec 08             	sub    esp,0x8
c0018f46:	52                   	push   edx
c0018f47:	50                   	push   eax
c0018f48:	e8 9b ed ff ff       	call   c0017ce8 <Vm::outbv(unsigned short, unsigned char)>
c0018f4d:	83 c4 10             	add    esp,0x10
c0018f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f53:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018f56:	25 00 04 00 00       	and    eax,0x400
c0018f5b:	85 c0                	test   eax,eax
c0018f5d:	74 14                	je     c0018f73 <Vm::faultHandler(regs*)+0x870>
c0018f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f62:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f65:	83 e8 01             	sub    eax,0x1
c0018f68:	0f b7 d0             	movzx  edx,ax
c0018f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f6e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018f71:	eb 12                	jmp    c0018f85 <Vm::faultHandler(regs*)+0x882>
c0018f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f76:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018f79:	83 c0 01             	add    eax,0x1
c0018f7c:	0f b7 d0             	movzx  edx,ax
c0018f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f82:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f88:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018f8b:	8d 50 01             	lea    edx,[eax+0x1]
c0018f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018f91:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018f94:	b0 01                	mov    al,0x1
c0018f96:	e9 a7 05 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0018f9b:	66 c7 45 dc 00 00    	mov    WORD PTR [ebp-0x24],0x0
c0018fa1:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c0018fa5:	83 f8 06             	cmp    eax,0x6
c0018fa8:	77 4f                	ja     c0018ff9 <Vm::faultHandler(regs*)+0x8f6>
c0018faa:	8b 04 85 24 c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd36dc]
c0018fb1:	ff e0                	jmp    eax
c0018fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fb6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018fb9:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018fbd:	eb 3a                	jmp    c0018ff9 <Vm::faultHandler(regs*)+0x8f6>
c0018fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fc2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018fc5:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018fc9:	eb 2e                	jmp    c0018ff9 <Vm::faultHandler(regs*)+0x8f6>
c0018fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018fd1:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018fd5:	eb 22                	jmp    c0018ff9 <Vm::faultHandler(regs*)+0x8f6>
c0018fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018fdd:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018fe1:	eb 16                	jmp    c0018ff9 <Vm::faultHandler(regs*)+0x8f6>
c0018fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018fe6:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fe8:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018fec:	eb 0b                	jmp    c0018ff9 <Vm::faultHandler(regs*)+0x8f6>
c0018fee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ff1:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0018ff4:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018ff8:	90                   	nop
c0018ff9:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018ffd:	85 c0                	test   eax,eax
c0018fff:	74 7a                	je     c001907b <Vm::faultHandler(regs*)+0x978>
c0019001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019004:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019007:	3d ff ff 00 00       	cmp    eax,0xffff
c001900c:	76 6d                	jbe    c001907b <Vm::faultHandler(regs*)+0x978>
c001900e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019011:	83 c0 05             	add    eax,0x5
c0019014:	8a 00                	mov    al,BYTE PTR [eax]
c0019016:	0f b6 c0             	movzx  eax,al
c0019019:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c001901f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019022:	83 c0 04             	add    eax,0x4
c0019025:	8a 00                	mov    al,BYTE PTR [eax]
c0019027:	0f b6 f8             	movzx  edi,al
c001902a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001902d:	83 c0 03             	add    eax,0x3
c0019030:	8a 00                	mov    al,BYTE PTR [eax]
c0019032:	0f b6 f0             	movzx  esi,al
c0019035:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019038:	83 c0 02             	add    eax,0x2
c001903b:	8a 00                	mov    al,BYTE PTR [eax]
c001903d:	0f b6 d8             	movzx  ebx,al
c0019040:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019043:	83 c0 01             	add    eax,0x1
c0019046:	8a 00                	mov    al,BYTE PTR [eax]
c0019048:	0f b6 c8             	movzx  ecx,al
c001904b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001904e:	8a 00                	mov    al,BYTE PTR [eax]
c0019050:	0f b6 d0             	movzx  edx,al
c0019053:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019056:	8a 00                	mov    al,BYTE PTR [eax]
c0019058:	0f b6 c0             	movzx  eax,al
c001905b:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0019061:	57                   	push   edi
c0019062:	56                   	push   esi
c0019063:	53                   	push   ebx
c0019064:	51                   	push   ecx
c0019065:	52                   	push   edx
c0019066:	50                   	push   eax
c0019067:	68 50 c5 02 c0       	push   0xc002c550
c001906c:	e8 0b df fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019071:	83 c4 20             	add    esp,0x20
c0019074:	b0 00                	mov    al,0x0
c0019076:	e9 c7 04 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c001907b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001907f:	85 c0                	test   eax,eax
c0019081:	74 6e                	je     c00190f1 <Vm::faultHandler(regs*)+0x9ee>
c0019083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019086:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019089:	0f b7 d0             	movzx  edx,ax
c001908c:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0019090:	83 ec 08             	sub    esp,0x8
c0019093:	52                   	push   edx
c0019094:	50                   	push   eax
c0019095:	e8 01 f5 ff ff       	call   c001859b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001909a:	83 c4 10             	add    esp,0x10
c001909d:	89 c2                	mov    edx,eax
c001909f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190a2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00190a5:	0f b7 c0             	movzx  eax,ax
c00190a8:	66 89 45 9a          	mov    WORD PTR [ebp-0x66],ax
c00190ac:	89 55 94             	mov    DWORD PTR [ebp-0x6c],edx
c00190af:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
c00190b2:	66 8b 55 9a          	mov    dx,WORD PTR [ebp-0x66]
c00190b6:	ef                   	out    dx,eax
c00190b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00190bd:	25 00 04 00 00       	and    eax,0x400
c00190c2:	85 c0                	test   eax,eax
c00190c4:	74 17                	je     c00190dd <Vm::faultHandler(regs*)+0x9da>
c00190c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190c9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00190cc:	83 e8 04             	sub    eax,0x4
c00190cf:	0f b7 d0             	movzx  edx,ax
c00190d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190d5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00190d8:	e9 80 00 00 00       	jmp    c001915d <Vm::faultHandler(regs*)+0xa5a>
c00190dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190e0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00190e3:	83 c0 04             	add    eax,0x4
c00190e6:	0f b7 d0             	movzx  edx,ax
c00190e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190ec:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00190ef:	eb 6c                	jmp    c001915d <Vm::faultHandler(regs*)+0xa5a>
c00190f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00190f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00190f7:	0f b7 d0             	movzx  edx,ax
c00190fa:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c00190fe:	83 ec 08             	sub    esp,0x8
c0019101:	52                   	push   edx
c0019102:	50                   	push   eax
c0019103:	e8 3f f4 ff ff       	call   c0018547 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019108:	83 c4 10             	add    esp,0x10
c001910b:	0f b7 c0             	movzx  eax,ax
c001910e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019111:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0019114:	0f b7 d2             	movzx  edx,dx
c0019117:	66 89 55 92          	mov    WORD PTR [ebp-0x6e],dx
c001911b:	66 89 45 90          	mov    WORD PTR [ebp-0x70],ax
c001911f:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
c0019122:	66 8b 55 92          	mov    dx,WORD PTR [ebp-0x6e]
c0019126:	66 ef                	out    dx,ax
c0019128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001912b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001912e:	25 00 04 00 00       	and    eax,0x400
c0019133:	85 c0                	test   eax,eax
c0019135:	74 14                	je     c001914b <Vm::faultHandler(regs*)+0xa48>
c0019137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001913a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001913d:	83 e8 02             	sub    eax,0x2
c0019140:	0f b7 d0             	movzx  edx,ax
c0019143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019146:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0019149:	eb 12                	jmp    c001915d <Vm::faultHandler(regs*)+0xa5a>
c001914b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001914e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019151:	83 c0 02             	add    eax,0x2
c0019154:	0f b7 d0             	movzx  edx,ax
c0019157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001915a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001915d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019160:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019163:	8d 50 01             	lea    edx,[eax+0x1]
c0019166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019169:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001916c:	b0 01                	mov    al,0x1
c001916e:	e9 cf 03 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0019173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019176:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019179:	b0 00                	mov    al,0x0
c001917b:	89 c2                	mov    edx,eax
c001917d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019180:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019183:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019186:	83 c0 01             	add    eax,0x1
c0019189:	8a 00                	mov    al,BYTE PTR [eax]
c001918b:	0f b6 c0             	movzx  eax,al
c001918e:	83 ec 0c             	sub    esp,0xc
c0019191:	50                   	push   eax
c0019192:	e8 1a eb ff ff       	call   c0017cb1 <Vm::inbv(unsigned short)>
c0019197:	83 c4 10             	add    esp,0x10
c001919a:	88 c1                	mov    cl,al
c001919c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001919f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00191a2:	0f b6 c1             	movzx  eax,cl
c00191a5:	09 c2                	or     edx,eax
c00191a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00191ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191b0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00191b3:	8d 50 02             	lea    edx,[eax+0x2]
c00191b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191b9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00191bc:	b0 01                	mov    al,0x1
c00191be:	e9 7f 03 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c00191c3:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00191c7:	85 c0                	test   eax,eax
c00191c9:	74 24                	je     c00191ef <Vm::faultHandler(regs*)+0xaec>
c00191cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00191ce:	83 c0 01             	add    eax,0x1
c00191d1:	8a 00                	mov    al,BYTE PTR [eax]
c00191d3:	0f b6 c0             	movzx  eax,al
c00191d6:	66 89 45 8e          	mov    WORD PTR [ebp-0x72],ax
c00191da:	66 8b 45 8e          	mov    ax,WORD PTR [ebp-0x72]
c00191de:	89 c2                	mov    edx,eax
c00191e0:	ed                   	in     eax,dx
c00191e1:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
c00191e4:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
c00191e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191ea:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00191ed:	eb 42                	jmp    c0019231 <Vm::faultHandler(regs*)+0xb2e>
c00191ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191f2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00191f5:	25 00 00 ff ff       	and    eax,0xffff0000
c00191fa:	89 c2                	mov    edx,eax
c00191fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00191ff:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019202:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019205:	83 c0 01             	add    eax,0x1
c0019208:	8a 00                	mov    al,BYTE PTR [eax]
c001920a:	0f b6 c0             	movzx  eax,al
c001920d:	66 89 45 86          	mov    WORD PTR [ebp-0x7a],ax
c0019211:	66 8b 45 86          	mov    ax,WORD PTR [ebp-0x7a]
c0019215:	89 c2                	mov    edx,eax
c0019217:	66 ed                	in     ax,dx
c0019219:	66 89 45 84          	mov    WORD PTR [ebp-0x7c],ax
c001921d:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
c0019220:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019223:	8b 52 2c             	mov    edx,DWORD PTR [edx+0x2c]
c0019226:	0f b7 c0             	movzx  eax,ax
c0019229:	09 c2                	or     edx,eax
c001922b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001922e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019234:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019237:	8d 50 02             	lea    edx,[eax+0x2]
c001923a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001923d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019240:	b0 01                	mov    al,0x1
c0019242:	e9 fb 02 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0019247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001924a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001924d:	0f b6 d0             	movzx  edx,al
c0019250:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0019253:	83 c0 01             	add    eax,0x1
c0019256:	8a 00                	mov    al,BYTE PTR [eax]
c0019258:	0f b6 c0             	movzx  eax,al
c001925b:	83 ec 08             	sub    esp,0x8
c001925e:	52                   	push   edx
c001925f:	50                   	push   eax
c0019260:	e8 83 ea ff ff       	call   c0017ce8 <Vm::outbv(unsigned short, unsigned char)>
c0019265:	83 c4 10             	add    esp,0x10
c0019268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001926b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001926e:	8d 50 02             	lea    edx,[eax+0x2]
c0019271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019274:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019277:	b0 01                	mov    al,0x1
c0019279:	e9 c4 02 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c001927e:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0019282:	85 c0                	test   eax,eax
c0019284:	74 28                	je     c00192ae <Vm::faultHandler(regs*)+0xbab>
c0019286:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019289:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001928c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001928f:	83 c0 01             	add    eax,0x1
c0019292:	8a 00                	mov    al,BYTE PTR [eax]
c0019294:	0f b6 c0             	movzx  eax,al
c0019297:	66 89 45 82          	mov    WORD PTR [ebp-0x7e],ax
c001929b:	89 95 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],edx
c00192a1:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [ebp-0x84]
c00192a7:	66 8b 55 82          	mov    dx,WORD PTR [ebp-0x7e]
c00192ab:	ef                   	out    dx,eax
c00192ac:	eb 31                	jmp    c00192df <Vm::faultHandler(regs*)+0xbdc>
c00192ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192b1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00192b4:	0f b7 c0             	movzx  eax,ax
c00192b7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00192ba:	83 c2 01             	add    edx,0x1
c00192bd:	8a 12                	mov    dl,BYTE PTR [edx]
c00192bf:	0f b6 d2             	movzx  edx,dl
c00192c2:	66 89 95 7a ff ff ff 	mov    WORD PTR [ebp-0x86],dx
c00192c9:	66 89 85 78 ff ff ff 	mov    WORD PTR [ebp-0x88],ax
c00192d0:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [ebp-0x88]
c00192d6:	66 8b 95 7a ff ff ff 	mov    dx,WORD PTR [ebp-0x86]
c00192dd:	66 ef                	out    dx,ax
c00192df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00192e5:	8d 50 02             	lea    edx,[eax+0x2]
c00192e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00192ee:	b0 01                	mov    al,0x1
c00192f0:	e9 4d 02 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c00192f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00192f8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00192fb:	b0 00                	mov    al,0x0
c00192fd:	89 c2                	mov    edx,eax
c00192ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019302:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019308:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001930b:	0f b7 c0             	movzx  eax,ax
c001930e:	83 ec 0c             	sub    esp,0xc
c0019311:	50                   	push   eax
c0019312:	e8 9a e9 ff ff       	call   c0017cb1 <Vm::inbv(unsigned short)>
c0019317:	83 c4 10             	add    esp,0x10
c001931a:	88 c1                	mov    cl,al
c001931c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001931f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0019322:	0f b6 c1             	movzx  eax,cl
c0019325:	09 c2                	or     edx,eax
c0019327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001932a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001932d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019330:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019333:	8d 50 01             	lea    edx,[eax+0x1]
c0019336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019339:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001933c:	b0 01                	mov    al,0x1
c001933e:	e9 ff 01 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0019343:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0019347:	85 c0                	test   eax,eax
c0019349:	74 2e                	je     c0019379 <Vm::faultHandler(regs*)+0xc76>
c001934b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001934e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019351:	0f b7 c0             	movzx  eax,ax
c0019354:	66 89 85 76 ff ff ff 	mov    WORD PTR [ebp-0x8a],ax
c001935b:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [ebp-0x8a]
c0019362:	89 c2                	mov    edx,eax
c0019364:	ed                   	in     eax,dx
c0019365:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
c001936b:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [ebp-0x90]
c0019371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019374:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019377:	eb 4c                	jmp    c00193c5 <Vm::faultHandler(regs*)+0xcc2>
c0019379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001937c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001937f:	25 00 00 ff ff       	and    eax,0xffff0000
c0019384:	89 c2                	mov    edx,eax
c0019386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019389:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001938c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001938f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019392:	0f b7 c0             	movzx  eax,ax
c0019395:	66 89 85 6e ff ff ff 	mov    WORD PTR [ebp-0x92],ax
c001939c:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [ebp-0x92]
c00193a3:	89 c2                	mov    edx,eax
c00193a5:	66 ed                	in     ax,dx
c00193a7:	66 89 85 6c ff ff ff 	mov    WORD PTR [ebp-0x94],ax
c00193ae:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [ebp-0x94]
c00193b4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00193b7:	8b 52 2c             	mov    edx,DWORD PTR [edx+0x2c]
c00193ba:	0f b7 c0             	movzx  eax,ax
c00193bd:	09 c2                	or     edx,eax
c00193bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00193c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00193cb:	8d 50 01             	lea    edx,[eax+0x1]
c00193ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193d1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00193d4:	b0 01                	mov    al,0x1
c00193d6:	e9 67 01 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c00193db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193de:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00193e1:	0f b6 d0             	movzx  edx,al
c00193e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193e7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00193ea:	0f b7 c0             	movzx  eax,ax
c00193ed:	83 ec 08             	sub    esp,0x8
c00193f0:	52                   	push   edx
c00193f1:	50                   	push   eax
c00193f2:	e8 f1 e8 ff ff       	call   c0017ce8 <Vm::outbv(unsigned short, unsigned char)>
c00193f7:	83 c4 10             	add    esp,0x10
c00193fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00193fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019400:	8d 50 01             	lea    edx,[eax+0x1]
c0019403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019406:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019409:	b0 01                	mov    al,0x1
c001940b:	e9 32 01 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0019410:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0019414:	85 c0                	test   eax,eax
c0019416:	74 2c                	je     c0019444 <Vm::faultHandler(regs*)+0xd41>
c0019418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001941b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001941e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019421:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019424:	0f b7 c0             	movzx  eax,ax
c0019427:	66 89 85 6a ff ff ff 	mov    WORD PTR [ebp-0x96],ax
c001942e:	89 95 64 ff ff ff    	mov    DWORD PTR [ebp-0x9c],edx
c0019434:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
c001943a:	66 8b 95 6a ff ff ff 	mov    dx,WORD PTR [ebp-0x96]
c0019441:	ef                   	out    dx,eax
c0019442:	eb 2f                	jmp    c0019473 <Vm::faultHandler(regs*)+0xd70>
c0019444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019447:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001944a:	0f b7 c0             	movzx  eax,ax
c001944d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019450:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0019453:	0f b7 d2             	movzx  edx,dx
c0019456:	66 89 95 62 ff ff ff 	mov    WORD PTR [ebp-0x9e],dx
c001945d:	66 89 85 60 ff ff ff 	mov    WORD PTR [ebp-0xa0],ax
c0019464:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [ebp-0xa0]
c001946a:	66 8b 95 62 ff ff ff 	mov    dx,WORD PTR [ebp-0x9e]
c0019471:	66 ef                	out    dx,ax
c0019473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019476:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019479:	8d 50 01             	lea    edx,[eax+0x1]
c001947c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001947f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019482:	b0 01                	mov    al,0x1
c0019484:	e9 b9 00 00 00       	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c0019489:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001948c:	83 c0 05             	add    eax,0x5
c001948f:	8a 00                	mov    al,BYTE PTR [eax]
c0019491:	0f b6 c0             	movzx  eax,al
c0019494:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c001949a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001949d:	83 c0 04             	add    eax,0x4
c00194a0:	8a 00                	mov    al,BYTE PTR [eax]
c00194a2:	0f b6 f8             	movzx  edi,al
c00194a5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00194a8:	83 c0 03             	add    eax,0x3
c00194ab:	8a 00                	mov    al,BYTE PTR [eax]
c00194ad:	0f b6 f0             	movzx  esi,al
c00194b0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00194b3:	83 c0 02             	add    eax,0x2
c00194b6:	8a 00                	mov    al,BYTE PTR [eax]
c00194b8:	0f b6 d8             	movzx  ebx,al
c00194bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00194be:	83 c0 01             	add    eax,0x1
c00194c1:	8a 00                	mov    al,BYTE PTR [eax]
c00194c3:	0f b6 c8             	movzx  ecx,al
c00194c6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00194c9:	8a 00                	mov    al,BYTE PTR [eax]
c00194cb:	0f b6 d0             	movzx  edx,al
c00194ce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00194d1:	8a 00                	mov    al,BYTE PTR [eax]
c00194d3:	0f b6 c0             	movzx  eax,al
c00194d6:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00194dc:	57                   	push   edi
c00194dd:	56                   	push   esi
c00194de:	53                   	push   ebx
c00194df:	51                   	push   ecx
c00194e0:	52                   	push   edx
c00194e1:	50                   	push   eax
c00194e2:	68 80 c5 02 c0       	push   0xc002c580
c00194e7:	e8 90 da fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00194ec:	83 c4 20             	add    esp,0x20
c00194ef:	83 ec 0c             	sub    esp,0xc
c00194f2:	6a 60                	push   0x60
c00194f4:	e8 b8 e7 ff ff       	call   c0017cb1 <Vm::inbv(unsigned short)>
c00194f9:	83 c4 10             	add    esp,0x10
c00194fc:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00194ff:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0019503:	83 f8 1c             	cmp    eax,0x1c
c0019506:	74 09                	je     c0019511 <Vm::faultHandler(regs*)+0xe0e>
c0019508:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c001950c:	83 f8 5a             	cmp    eax,0x5a
c001950f:	75 24                	jne    c0019535 <Vm::faultHandler(regs*)+0xe32>
c0019511:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0019515:	83 f8 1c             	cmp    eax,0x1c
c0019518:	74 09                	je     c0019523 <Vm::faultHandler(regs*)+0xe20>
c001951a:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c001951e:	83 f8 5a             	cmp    eax,0x5a
c0019521:	75 15                	jne    c0019538 <Vm::faultHandler(regs*)+0xe35>
c0019523:	83 ec 0c             	sub    esp,0xc
c0019526:	6a 60                	push   0x60
c0019528:	e8 84 e7 ff ff       	call   c0017cb1 <Vm::inbv(unsigned short)>
c001952d:	83 c4 10             	add    esp,0x10
c0019530:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0019533:	eb dc                	jmp    c0019511 <Vm::faultHandler(regs*)+0xe0e>
c0019535:	90                   	nop
c0019536:	eb b7                	jmp    c00194ef <Vm::faultHandler(regs*)+0xdec>
c0019538:	90                   	nop
c0019539:	b0 00                	mov    al,0x0
c001953b:	eb 05                	jmp    c0019542 <Vm::faultHandler(regs*)+0xe3f>
c001953d:	e9 3d f2 ff ff       	jmp    c001877f <Vm::faultHandler(regs*)+0x7c>
c0019542:	8d 65 f4             	lea    esp,[ebp-0xc]
c0019545:	5b                   	pop    ebx
c0019546:	5e                   	pop    esi
c0019547:	5f                   	pop    edi
c0019548:	5d                   	pop    ebp
c0019549:	c3                   	ret    

c001954a <IOAPIC::close(int, int, void*)>:
c001954a:	b8 00 00 00 00       	mov    eax,0x0
c001954f:	c3                   	ret    

c0019550 <apicGetBase()>:
c0019550:	55                   	push   ebp
c0019551:	89 e5                	mov    ebp,esp
c0019553:	83 ec 18             	sub    esp,0x18
c0019556:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001955b:	83 e0 08             	and    eax,0x8
c001955e:	0f b6 c0             	movzx  eax,al
c0019561:	85 c0                	test   eax,eax
c0019563:	75 07                	jne    c001956c <apicGetBase()+0x1c>
c0019565:	b8 00 00 00 00       	mov    eax,0x0
c001956a:	eb 1b                	jmp    c0019587 <apicGetBase()+0x37>
c001956c:	83 ec 0c             	sub    esp,0xc
c001956f:	6a 1b                	push   0x1b
c0019571:	e8 72 15 00 00       	call   c001aae8 <x86rdmsr(unsigned int)>
c0019576:	83 c4 10             	add    esp,0x10
c0019579:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001957c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001957f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019582:	25 00 00 ff ff       	and    eax,0xffff0000
c0019587:	c9                   	leave  
c0019588:	c3                   	ret    
c0019589:	90                   	nop

c001958a <IOAPIC::IOAPIC()>:
c001958a:	83 ec 0c             	sub    esp,0xc
c001958d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019591:	83 ec 08             	sub    esp,0x8
c0019594:	68 40 c9 02 c0       	push   0xc002c940
c0019599:	50                   	push   eax
c001959a:	e8 43 10 ff ff       	call   c000a5e2 <Device::Device(char const*)>
c001959f:	83 c4 10             	add    esp,0x10
c00195a2:	ba 60 c9 02 c0       	mov    edx,0xc002c960
c00195a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195ab:	89 10                	mov    DWORD PTR [eax],edx
c00195ad:	90                   	nop
c00195ae:	83 c4 0c             	add    esp,0xc
c00195b1:	c3                   	ret    

c00195b2 <apicOpen()>:
c00195b2:	55                   	push   ebp
c00195b3:	89 e5                	mov    ebp,esp
c00195b5:	53                   	push   ebx
c00195b6:	83 ec 34             	sub    esp,0x34
c00195b9:	83 ec 0c             	sub    esp,0xc
c00195bc:	68 48 c9 02 c0       	push   0xc002c948
c00195c1:	e8 b6 d9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00195c6:	83 c4 10             	add    esp,0x10
c00195c9:	a0 00 64 03 c0       	mov    al,ds:0xc0036400
c00195ce:	83 f0 01             	xor    eax,0x1
c00195d1:	0f b6 c0             	movzx  eax,al
c00195d4:	85 c0                	test   eax,eax
c00195d6:	0f 84 a3 00 00 00    	je     c001967f <apicOpen()+0xcd>
c00195dc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00195e0:	a0 40 5e 03 c0       	mov    al,ds:0xc0035e40
c00195e5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00195e9:	0f b6 c0             	movzx  eax,al
c00195ec:	39 c2                	cmp    edx,eax
c00195ee:	0f 83 84 00 00 00    	jae    c0019678 <apicOpen()+0xc6>
c00195f4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c00195fb:	83 ec 0c             	sub    esp,0xc
c00195fe:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0019601:	e8 f1 6c ff ff       	call   c00102f7 <malloc>
c0019606:	83 c4 10             	add    esp,0x10
c0019609:	89 c3                	mov    ebx,eax
c001960b:	83 ec 0c             	sub    esp,0xc
c001960e:	53                   	push   ebx
c001960f:	e8 76 ff ff ff       	call   c001958a <IOAPIC::IOAPIC()>
c0019614:	83 c4 10             	add    esp,0x10
c0019617:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001961a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001961e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0019621:	89 14 85 e0 63 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9c20],edx
c0019628:	a1 c0 63 03 c0       	mov    eax,ds:0xc00363c0
c001962d:	83 c0 01             	add    eax,0x1
c0019630:	a3 c0 63 03 c0       	mov    ds:0xc00363c0,eax
c0019635:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001963a:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0019640:	83 ec 08             	sub    esp,0x8
c0019643:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0019646:	50                   	push   eax
c0019647:	e8 34 0e ff ff       	call   c000a480 <Device::addChild(Device*)>
c001964c:	83 c4 10             	add    esp,0x10
c001964f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0019652:	8b 00                	mov    eax,DWORD PTR [eax]
c0019654:	83 c0 08             	add    eax,0x8
c0019657:	8b 00                	mov    eax,DWORD PTR [eax]
c0019659:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001965d:	6a 00                	push   0x0
c001965f:	6a 00                	push   0x0
c0019661:	52                   	push   edx
c0019662:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0019665:	ff d0                	call   eax
c0019667:	83 c4 10             	add    esp,0x10
c001966a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001966d:	83 c0 01             	add    eax,0x1
c0019670:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0019673:	e9 68 ff ff ff       	jmp    c00195e0 <apicOpen()+0x2e>
c0019678:	c6 05 00 64 03 c0 01 	mov    BYTE PTR ds:0xc0036400,0x1
c001967f:	e8 cc fe ff ff       	call   c0019550 <apicGetBase()>
c0019684:	05 f0 00 00 00       	add    eax,0xf0
c0019689:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001968c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001968f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019691:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0019694:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001969b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c00196a2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00196a5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00196a8:	89 10                	mov    DWORD PTR [eax],edx
c00196aa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00196b1:	a1 8c 5d 03 c0       	mov    eax,ds:0xc0035d8c
c00196b6:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00196b9:	7d 7c                	jge    c0019737 <apicOpen()+0x185>
c00196bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00196be:	8b 04 85 a0 5d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca260]
c00196c5:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c00196c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00196cb:	8b 04 85 a0 5d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca260]
c00196d2:	c1 e8 08             	shr    eax,0x8
c00196d5:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00196d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00196dc:	8b 04 85 a0 5d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca260]
c00196e3:	c1 e8 18             	shr    eax,0x18
c00196e6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00196e9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00196ed:	3d ff 00 00 00       	cmp    eax,0xff
c00196f2:	75 3a                	jne    c001972e <apicOpen()+0x17c>
c00196f4:	e8 57 fe ff ff       	call   c0019550 <apicGetBase()>
c00196f9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c00196fd:	83 fa 01             	cmp    edx,0x1
c0019700:	75 07                	jne    c0019709 <apicOpen()+0x157>
c0019702:	ba 60 03 00 00       	mov    edx,0x360
c0019707:	eb 05                	jmp    c001970e <apicOpen()+0x15c>
c0019709:	ba 50 03 00 00       	mov    edx,0x350
c001970e:	01 d0                	add    eax,edx
c0019710:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0019713:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019716:	8b 00                	mov    eax,DWORD PTR [eax]
c0019718:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001971b:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0019722:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0019726:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019729:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001972c:	89 10                	mov    DWORD PTR [eax],edx
c001972e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0019732:	e9 7a ff ff ff       	jmp    c00196b1 <apicOpen()+0xff>
c0019737:	90                   	nop
c0019738:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001973b:	c9                   	leave  
c001973c:	c3                   	ret    
c001973d:	90                   	nop

c001973e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001973e:	55                   	push   ebp
c001973f:	89 e5                	mov    ebp,esp
c0019741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019744:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001974a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001974d:	72 1d                	jb     c001976c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001974f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019752:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0019758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001975b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0019761:	01 d0                	add    eax,edx
c0019763:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0019766:	73 04                	jae    c001976c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0019768:	b0 01                	mov    al,0x1
c001976a:	eb 02                	jmp    c001976e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001976c:	b0 00                	mov    al,0x0
c001976e:	5d                   	pop    ebp
c001976f:	c3                   	ret    

c0019770 <IOAPIC::read(int)>:
c0019770:	55                   	push   ebp
c0019771:	89 e5                	mov    ebp,esp
c0019773:	83 ec 10             	sub    esp,0x10
c0019776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019779:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001977f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0019782:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019785:	0f b6 d0             	movzx  edx,al
c0019788:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001978b:	89 10                	mov    DWORD PTR [eax],edx
c001978d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0019790:	83 c0 10             	add    eax,0x10
c0019793:	8b 00                	mov    eax,DWORD PTR [eax]
c0019795:	c9                   	leave  
c0019796:	c3                   	ret    
c0019797:	90                   	nop

c0019798 <IOAPIC::open(int, int, void*)>:
c0019798:	55                   	push   ebp
c0019799:	89 e5                	mov    ebp,esp
c001979b:	57                   	push   edi
c001979c:	56                   	push   esi
c001979d:	53                   	push   ebx
c001979e:	83 ec 04             	sub    esp,0x4
c00197a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00197a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00197ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00197b6:	8b 14 85 80 5e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffca180]
c00197bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197c0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00197c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197c9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00197cf:	8b 14 85 00 5f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffca100]
c00197d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197d9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00197df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197e2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00197e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00197eb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00197f1:	0f b6 f0             	movzx  esi,al
c00197f4:	89 d0                	mov    eax,edx
c00197f6:	ba 00 00 00 00       	mov    edx,0x0
c00197fb:	89 c7                	mov    edi,eax
c00197fd:	83 e7 ff             	and    edi,0xffffffff
c0019800:	89 f9                	mov    ecx,edi
c0019802:	0f b6 da             	movzx  ebx,dl
c0019805:	89 c8                	mov    eax,ecx
c0019807:	89 da                	mov    edx,ebx
c0019809:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001980c:	8d 5e 08             	lea    ebx,[esi+0x8]
c001980f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0019813:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0019817:	83 e0 00             	and    eax,0x0
c001981a:	09 d0                	or     eax,edx
c001981c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0019820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019823:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0019829:	8d 50 01             	lea    edx,[eax+0x1]
c001982c:	88 d1                	mov    cl,dl
c001982e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0019831:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0019837:	0f b6 d0             	movzx  edx,al
c001983a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001983d:	83 c2 08             	add    edx,0x8
c0019840:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0019844:	0f b6 c9             	movzx  ecx,cl
c0019847:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001984d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0019851:	6a 01                	push   0x1
c0019853:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019856:	e8 15 ff ff ff       	call   c0019770 <IOAPIC::read(int)>
c001985b:	83 c4 08             	add    esp,0x8
c001985e:	c1 f8 10             	sar    eax,0x10
c0019861:	0f b6 c0             	movzx  eax,al
c0019864:	8d 50 01             	lea    edx,[eax+0x1]
c0019867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001986a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0019870:	b8 00 00 00 00       	mov    eax,0x0
c0019875:	8d 65 f4             	lea    esp,[ebp-0xc]
c0019878:	5b                   	pop    ebx
c0019879:	5e                   	pop    esi
c001987a:	5f                   	pop    edi
c001987b:	5d                   	pop    ebp
c001987c:	c3                   	ret    
c001987d:	90                   	nop

c001987e <IOAPIC::write(int, int)>:
c001987e:	55                   	push   ebp
c001987f:	89 e5                	mov    ebp,esp
c0019881:	83 ec 10             	sub    esp,0x10
c0019884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019887:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001988d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0019890:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0019893:	0f b6 d0             	movzx  edx,al
c0019896:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0019899:	89 10                	mov    DWORD PTR [eax],edx
c001989b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001989e:	8d 50 10             	lea    edx,[eax+0x10]
c00198a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00198a4:	89 02                	mov    DWORD PTR [edx],eax
c00198a6:	90                   	nop
c00198a7:	c9                   	leave  
c00198a8:	c3                   	ret    
c00198a9:	90                   	nop

c00198aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00198aa:	55                   	push   ebp
c00198ab:	89 e5                	mov    ebp,esp
c00198ad:	53                   	push   ebx
c00198ae:	83 ec 2c             	sub    esp,0x2c
c00198b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00198b4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00198b7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00198ba:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00198bd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00198c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00198c3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00198c6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00198c9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00198cc:	88 d8                	mov    al,bl
c00198ce:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00198d1:	88 c8                	mov    al,cl
c00198d3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00198d6:	88 d0                	mov    al,dl
c00198d8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00198db:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00198df:	83 c0 08             	add    eax,0x8
c00198e2:	01 c0                	add    eax,eax
c00198e4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00198e7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00198eb:	83 c0 08             	add    eax,0x8
c00198ee:	01 c0                	add    eax,eax
c00198f0:	83 c0 01             	add    eax,0x1
c00198f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00198f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00198f9:	50                   	push   eax
c00198fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00198fd:	e8 6e fe ff ff       	call   c0019770 <IOAPIC::read(int)>
c0019902:	83 c4 08             	add    esp,0x8
c0019905:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019908:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001990f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019912:	c1 e0 18             	shl    eax,0x18
c0019915:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0019918:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001991b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001991e:	52                   	push   edx
c001991f:	50                   	push   eax
c0019920:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019923:	e8 56 ff ff ff       	call   c001987e <IOAPIC::write(int, int)>
c0019928:	83 c4 0c             	add    esp,0xc
c001992b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001992e:	50                   	push   eax
c001992f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019932:	e8 39 fe ff ff       	call   c0019770 <IOAPIC::read(int)>
c0019937:	83 c4 08             	add    esp,0x8
c001993a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001993d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0019944:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001994b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0019952:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0019956:	85 c0                	test   eax,eax
c0019958:	74 09                	je     c0019963 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001995a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0019961:	eb 07                	jmp    c001996a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0019963:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001996a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001996e:	85 c0                	test   eax,eax
c0019970:	74 09                	je     c001997b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0019972:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0019979:	eb 07                	jmp    c0019982 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001997b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0019982:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0019989:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001998d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0019990:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0019993:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0019996:	52                   	push   edx
c0019997:	50                   	push   eax
c0019998:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001999b:	e8 de fe ff ff       	call   c001987e <IOAPIC::write(int, int)>
c00199a0:	83 c4 0c             	add    esp,0xc
c00199a3:	90                   	nop
c00199a4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00199a7:	c9                   	leave  
c00199a8:	c3                   	ret    
c00199a9:	90                   	nop

c00199aa <noCopro(unsigned long)>:
c00199aa:	c3                   	ret    

c00199ab <HalRestart()>:
c00199ab:	e4 64                	in     al,0x64
c00199ad:	a8 02                	test   al,0x2
c00199af:	75 fa                	jne    c00199ab <HalRestart()>
c00199b1:	b0 fe                	mov    al,0xfe
c00199b3:	e6 64                	out    0x64,al
c00199b5:	c3                   	ret    

c00199b6 <HalShutdown()>:
c00199b6:	c3                   	ret    

c00199b7 <HalSleep()>:
c00199b7:	c3                   	ret    

c00199b8 <CPU::close(int, int, void*)>:
c00199b8:	31 c0                	xor    eax,eax
c00199ba:	c3                   	ret    

c00199bb <x86ReadCMOS(unsigned char)>:
c00199bb:	83 ec 14             	sub    esp,0x14
c00199be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199c2:	88 04 24             	mov    BYTE PTR [esp],al
c00199c5:	a0 2c 64 03 c0       	mov    al,ds:0xc003642c
c00199ca:	0f b6 c0             	movzx  eax,al
c00199cd:	85 c0                	test   eax,eax
c00199cf:	74 04                	je     c00199d5 <x86ReadCMOS(unsigned char)+0x1a>
c00199d1:	b2 00                	mov    dl,0x0
c00199d3:	eb 02                	jmp    c00199d7 <x86ReadCMOS(unsigned char)+0x1c>
c00199d5:	b2 80                	mov    dl,0x80
c00199d7:	8a 04 24             	mov    al,BYTE PTR [esp]
c00199da:	09 d0                	or     eax,edx
c00199dc:	0f b6 c0             	movzx  eax,al
c00199df:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c00199e6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00199ea:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00199ee:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00199f3:	ee                   	out    dx,al
c00199f4:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00199fb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0019a00:	89 c2                	mov    edx,eax
c0019a02:	ec                   	in     al,dx
c0019a03:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019a07:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019a0b:	83 c4 14             	add    esp,0x14
c0019a0e:	c3                   	ret    

c0019a0f <x86WriteCMOS(unsigned char, unsigned char)>:
c0019a0f:	83 ec 18             	sub    esp,0x18
c0019a12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a1a:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0019a1e:	88 04 24             	mov    BYTE PTR [esp],al
c0019a21:	a0 2c 64 03 c0       	mov    al,ds:0xc003642c
c0019a26:	0f b6 c0             	movzx  eax,al
c0019a29:	85 c0                	test   eax,eax
c0019a2b:	74 04                	je     c0019a31 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0019a2d:	b2 00                	mov    dl,0x0
c0019a2f:	eb 02                	jmp    c0019a33 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0019a31:	b2 80                	mov    dl,0x80
c0019a33:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019a37:	09 d0                	or     eax,edx
c0019a39:	0f b6 c0             	movzx  eax,al
c0019a3c:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0019a43:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019a47:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019a4b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019a50:	ee                   	out    dx,al
c0019a51:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0019a55:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0019a5c:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0019a60:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0019a64:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0019a69:	ee                   	out    dx,al
c0019a6a:	90                   	nop
c0019a6b:	83 c4 18             	add    esp,0x18
c0019a6e:	c3                   	ret    

c0019a6f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0019a6f:	60                   	pusha  
c0019a70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a78:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019a7c:	9c                   	pushf  
c0019a7d:	fa                   	cli    
c0019a7e:	0f 09                	wbinvd 
c0019a80:	0f 30                	wrmsr  
c0019a82:	9d                   	popf   
c0019a83:	89 c2                	mov    edx,eax
c0019a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a89:	89 10                	mov    DWORD PTR [eax],edx
c0019a8b:	61                   	popa   
c0019a8c:	90                   	nop
c0019a8d:	c3                   	ret    

c0019a8e <AMD_K6_read_msr(unsigned int, REGS*)>:
c0019a8e:	60                   	pusha  
c0019a8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a93:	89 c1                	mov    ecx,eax
c0019a95:	9c                   	pushf  
c0019a96:	fa                   	cli    
c0019a97:	0f 09                	wbinvd 
c0019a99:	31 c0                	xor    eax,eax
c0019a9b:	31 d2                	xor    edx,edx
c0019a9d:	0f 32                	rdmsr  
c0019a9f:	9d                   	popf   
c0019aa0:	89 c2                	mov    edx,eax
c0019aa2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aa6:	89 10                	mov    DWORD PTR [eax],edx
c0019aa8:	61                   	popa   
c0019aa9:	90                   	nop
c0019aaa:	c3                   	ret    

c0019aab <AMD_K6_writeback(int, int, int)>:
c0019aab:	83 ec 20             	sub    esp,0x20
c0019aae:	a1 70 61 03 c0       	mov    eax,ds:0xc0036170
c0019ab3:	c1 e8 14             	shr    eax,0x14
c0019ab6:	c1 e8 02             	shr    eax,0x2
c0019ab9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019abd:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0019ac2:	0f 85 9e 00 00 00    	jne    c0019b66 <AMD_K6_writeback(int, int, int)+0xbb>
c0019ac8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019acc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ad0:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0019ad5:	75 19                	jne    c0019af0 <AMD_K6_writeback(int, int, int)+0x45>
c0019ad7:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0019adc:	7f 0a                	jg     c0019ae8 <AMD_K6_writeback(int, int, int)+0x3d>
c0019ade:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0019ae6:	eb 08                	jmp    c0019af0 <AMD_K6_writeback(int, int, int)+0x45>
c0019ae8:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0019af0:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0019af5:	7c 6e                	jl     c0019b65 <AMD_K6_writeback(int, int, int)+0xba>
c0019af7:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0019afc:	7e 09                	jle    c0019b07 <AMD_K6_writeback(int, int, int)+0x5c>
c0019afe:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0019b03:	74 36                	je     c0019b3b <AMD_K6_writeback(int, int, int)+0x90>
c0019b05:	eb 5e                	jmp    c0019b65 <AMD_K6_writeback(int, int, int)+0xba>
c0019b07:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019b0b:	50                   	push   eax
c0019b0c:	68 82 00 00 c0       	push   0xc0000082
c0019b11:	e8 78 ff ff ff       	call   c0019a8e <AMD_K6_read_msr(unsigned int, REGS*)>
c0019b16:	83 c4 08             	add    esp,0x8
c0019b19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b1d:	01 c0                	add    eax,eax
c0019b1f:	83 e0 7f             	and    eax,0x7f
c0019b22:	89 c2                	mov    edx,eax
c0019b24:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019b28:	50                   	push   eax
c0019b29:	6a 00                	push   0x0
c0019b2b:	52                   	push   edx
c0019b2c:	68 82 00 00 c0       	push   0xc0000082
c0019b31:	e8 39 ff ff ff       	call   c0019a6f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019b36:	83 c4 10             	add    esp,0x10
c0019b39:	eb 2b                	jmp    c0019b66 <AMD_K6_writeback(int, int, int)+0xbb>
c0019b3b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019b3f:	50                   	push   eax
c0019b40:	68 82 00 00 c0       	push   0xc0000082
c0019b45:	e8 44 ff ff ff       	call   c0019a8e <AMD_K6_read_msr(unsigned int, REGS*)>
c0019b4a:	83 c4 08             	add    esp,0x8
c0019b4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019b51:	50                   	push   eax
c0019b52:	6a 00                	push   0x0
c0019b54:	6a 00                	push   0x0
c0019b56:	68 82 00 00 c0       	push   0xc0000082
c0019b5b:	e8 0f ff ff ff       	call   c0019a6f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0019b60:	83 c4 10             	add    esp,0x10
c0019b63:	eb 01                	jmp    c0019b66 <AMD_K6_writeback(int, int, int)+0xbb>
c0019b65:	90                   	nop
c0019b66:	90                   	nop
c0019b67:	83 c4 20             	add    esp,0x20
c0019b6a:	c3                   	ret    

c0019b6b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0019b6b:	56                   	push   esi
c0019b6c:	53                   	push   ebx
c0019b6d:	a1 80 01 03 c0       	mov    eax,ds:0xc0030180
c0019b72:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0019b76:	75 32                	jne    c0019baa <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0019b78:	8b 15 20 64 03 c0    	mov    edx,DWORD PTR ds:0xc0036420
c0019b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b82:	89 10                	mov    DWORD PTR [eax],edx
c0019b84:	8b 15 1c 64 03 c0    	mov    edx,DWORD PTR ds:0xc003641c
c0019b8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b8e:	89 10                	mov    DWORD PTR [eax],edx
c0019b90:	8b 15 18 64 03 c0    	mov    edx,DWORD PTR ds:0xc0036418
c0019b96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b9a:	89 10                	mov    DWORD PTR [eax],edx
c0019b9c:	8b 15 14 64 03 c0    	mov    edx,DWORD PTR ds:0xc0036414
c0019ba2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ba6:	89 10                	mov    DWORD PTR [eax],edx
c0019ba8:	eb 5c                	jmp    c0019c06 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0019baa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bae:	ba 00 00 00 00       	mov    edx,0x0
c0019bb3:	89 d1                	mov    ecx,edx
c0019bb5:	0f a2                	cpuid  
c0019bb7:	89 c6                	mov    esi,eax
c0019bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bbd:	89 30                	mov    DWORD PTR [eax],esi
c0019bbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bc3:	89 18                	mov    DWORD PTR [eax],ebx
c0019bc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019bc9:	89 08                	mov    DWORD PTR [eax],ecx
c0019bcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bcf:	89 10                	mov    DWORD PTR [eax],edx
c0019bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bd5:	a3 80 01 03 c0       	mov    ds:0xc0030180,eax
c0019bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0019be0:	a3 20 64 03 c0       	mov    ds:0xc0036420,eax
c0019be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0019beb:	a3 1c 64 03 c0       	mov    ds:0xc003641c,eax
c0019bf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bf6:	a3 18 64 03 c0       	mov    ds:0xc0036418,eax
c0019bfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c01:	a3 14 64 03 c0       	mov    ds:0xc0036414,eax
c0019c06:	5b                   	pop    ebx
c0019c07:	5e                   	pop    esi
c0019c08:	c3                   	ret    

c0019c09 <cpuidCheckEDX(unsigned int)>:
c0019c09:	83 ec 10             	sub    esp,0x10
c0019c0c:	89 e0                	mov    eax,esp
c0019c0e:	50                   	push   eax
c0019c0f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019c13:	50                   	push   eax
c0019c14:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019c18:	50                   	push   eax
c0019c19:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c1d:	50                   	push   eax
c0019c1e:	6a 01                	push   0x1
c0019c20:	e8 46 ff ff ff       	call   c0019b6b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019c25:	83 c4 14             	add    esp,0x14
c0019c28:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019c2b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019c2f:	0f 95 c0             	setne  al
c0019c32:	83 c4 10             	add    esp,0x10
c0019c35:	c3                   	ret    

c0019c36 <cpuidCheckECX(unsigned int)>:
c0019c36:	83 ec 10             	sub    esp,0x10
c0019c39:	89 e0                	mov    eax,esp
c0019c3b:	50                   	push   eax
c0019c3c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019c40:	50                   	push   eax
c0019c41:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019c45:	50                   	push   eax
c0019c46:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c4a:	50                   	push   eax
c0019c4b:	6a 01                	push   0x1
c0019c4d:	e8 19 ff ff ff       	call   c0019b6b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019c52:	83 c4 14             	add    esp,0x14
c0019c55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c59:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019c5d:	0f 95 c0             	setne  al
c0019c60:	83 c4 10             	add    esp,0x10
c0019c63:	c3                   	ret    

c0019c64 <cpuidCheckExtendedEBX(unsigned int)>:
c0019c64:	83 ec 10             	sub    esp,0x10
c0019c67:	89 e0                	mov    eax,esp
c0019c69:	50                   	push   eax
c0019c6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019c6e:	50                   	push   eax
c0019c6f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019c73:	50                   	push   eax
c0019c74:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c78:	50                   	push   eax
c0019c79:	6a 07                	push   0x7
c0019c7b:	e8 eb fe ff ff       	call   c0019b6b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019c80:	83 c4 14             	add    esp,0x14
c0019c83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c87:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019c8b:	0f 95 c0             	setne  al
c0019c8e:	83 c4 10             	add    esp,0x10
c0019c91:	c3                   	ret    

c0019c92 <cpuidCheckExtendedECX(unsigned int)>:
c0019c92:	83 ec 10             	sub    esp,0x10
c0019c95:	89 e0                	mov    eax,esp
c0019c97:	50                   	push   eax
c0019c98:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019c9c:	50                   	push   eax
c0019c9d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019ca1:	50                   	push   eax
c0019ca2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ca6:	50                   	push   eax
c0019ca7:	6a 07                	push   0x7
c0019ca9:	e8 bd fe ff ff       	call   c0019b6b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019cae:	83 c4 14             	add    esp,0x14
c0019cb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cb5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019cb9:	0f 95 c0             	setne  al
c0019cbc:	83 c4 10             	add    esp,0x10
c0019cbf:	c3                   	ret    

c0019cc0 <HalDetectFeatures()>:
c0019cc0:	57                   	push   edi
c0019cc1:	56                   	push   esi
c0019cc2:	53                   	push   ebx
c0019cc3:	81 ec 90 00 00 00    	sub    esp,0x90
c0019cc9:	83 ec 04             	sub    esp,0x4
c0019ccc:	6a 08                	push   0x8
c0019cce:	6a 00                	push   0x0
c0019cd0:	68 4c 64 03 c0       	push   0xc003644c
c0019cd5:	e8 16 68 fe ff       	call   c00004f0 <memset>
c0019cda:	83 c4 10             	add    esp,0x10
c0019cdd:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019ce2:	83 c8 04             	or     eax,0x4
c0019ce5:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019cea:	83 ec 0c             	sub    esp,0xc
c0019ced:	68 84 c9 02 c0       	push   0xc002c984
c0019cf2:	e8 85 d2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019cf7:	83 c4 10             	add    esp,0x10
c0019cfa:	e8 fa 64 fe ff       	call   c00001f9 <detectCPUID>
c0019cff:	85 c0                	test   eax,eax
c0019d01:	0f 95 c0             	setne  al
c0019d04:	83 e0 01             	and    eax,0x1
c0019d07:	83 e0 01             	and    eax,0x1
c0019d0a:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019d0d:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019d12:	83 e0 fd             	and    eax,0xfffffffd
c0019d15:	88 c2                	mov    dl,al
c0019d17:	88 c8                	mov    al,cl
c0019d19:	09 d0                	or     eax,edx
c0019d1b:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019d20:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019d25:	83 e0 02             	and    eax,0x2
c0019d28:	0f b6 c0             	movzx  eax,al
c0019d2b:	85 c0                	test   eax,eax
c0019d2d:	0f 84 84 02 00 00    	je     c0019fb7 <HalDetectFeatures()+0x2f7>
c0019d33:	83 ec 0c             	sub    esp,0xc
c0019d36:	6a 20                	push   0x20
c0019d38:	e8 cc fe ff ff       	call   c0019c09 <cpuidCheckEDX(unsigned int)>
c0019d3d:	83 c4 10             	add    esp,0x10
c0019d40:	83 e0 01             	and    eax,0x1
c0019d43:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019d4a:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019d4f:	83 e0 f7             	and    eax,0xfffffff7
c0019d52:	88 c2                	mov    dl,al
c0019d54:	88 c8                	mov    al,cl
c0019d56:	09 d0                	or     eax,edx
c0019d58:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019d5d:	83 ec 0c             	sub    esp,0xc
c0019d60:	68 00 00 00 04       	push   0x4000000
c0019d65:	e8 9f fe ff ff       	call   c0019c09 <cpuidCheckEDX(unsigned int)>
c0019d6a:	83 c4 10             	add    esp,0x10
c0019d6d:	89 c1                	mov    ecx,eax
c0019d6f:	83 e1 01             	and    ecx,0x1
c0019d72:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c0019d77:	83 e0 fe             	and    eax,0xfffffffe
c0019d7a:	88 c2                	mov    dl,al
c0019d7c:	88 c8                	mov    al,cl
c0019d7e:	09 d0                	or     eax,edx
c0019d80:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c0019d85:	83 ec 0c             	sub    esp,0xc
c0019d88:	68 80 00 00 00       	push   0x80
c0019d8d:	e8 77 fe ff ff       	call   c0019c09 <cpuidCheckEDX(unsigned int)>
c0019d92:	83 c4 10             	add    esp,0x10
c0019d95:	89 c1                	mov    ecx,eax
c0019d97:	c1 e1 07             	shl    ecx,0x7
c0019d9a:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c0019d9f:	83 e0 7f             	and    eax,0x7f
c0019da2:	88 c2                	mov    dl,al
c0019da4:	88 c8                	mov    al,cl
c0019da6:	09 d0                	or     eax,edx
c0019da8:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c0019dad:	83 ec 0c             	sub    esp,0xc
c0019db0:	68 00 00 80 00       	push   0x800000
c0019db5:	e8 4f fe ff ff       	call   c0019c09 <cpuidCheckEDX(unsigned int)>
c0019dba:	83 c4 10             	add    esp,0x10
c0019dbd:	83 e0 01             	and    eax,0x1
c0019dc0:	89 c1                	mov    ecx,eax
c0019dc2:	c1 e1 05             	shl    ecx,0x5
c0019dc5:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019dca:	83 e0 df             	and    eax,0xffffffdf
c0019dcd:	88 c2                	mov    dl,al
c0019dcf:	88 c8                	mov    al,cl
c0019dd1:	09 d0                	or     eax,edx
c0019dd3:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019dd8:	83 ec 0c             	sub    esp,0xc
c0019ddb:	6a 01                	push   0x1
c0019ddd:	e8 2a 3f ff ff       	call   c000dd0c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019de2:	83 c4 10             	add    esp,0x10
c0019de5:	0f b6 c0             	movzx  eax,al
c0019de8:	85 c0                	test   eax,eax
c0019dea:	75 17                	jne    c0019e03 <HalDetectFeatures()+0x143>
c0019dec:	83 ec 0c             	sub    esp,0xc
c0019def:	68 00 04 00 00       	push   0x400
c0019df4:	e8 13 3f ff ff       	call   c000dd0c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019df9:	83 c4 10             	add    esp,0x10
c0019dfc:	0f b6 c0             	movzx  eax,al
c0019dff:	85 c0                	test   eax,eax
c0019e01:	74 04                	je     c0019e07 <HalDetectFeatures()+0x147>
c0019e03:	b0 01                	mov    al,0x1
c0019e05:	eb 02                	jmp    c0019e09 <HalDetectFeatures()+0x149>
c0019e07:	b0 00                	mov    al,0x0
c0019e09:	0f b6 c0             	movzx  eax,al
c0019e0c:	85 c0                	test   eax,eax
c0019e0e:	74 0f                	je     c0019e1f <HalDetectFeatures()+0x15f>
c0019e10:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019e15:	83 e0 fe             	and    eax,0xfffffffe
c0019e18:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019e1d:	eb 28                	jmp    c0019e47 <HalDetectFeatures()+0x187>
c0019e1f:	83 ec 0c             	sub    esp,0xc
c0019e22:	68 00 02 00 00       	push   0x200
c0019e27:	e8 dd fd ff ff       	call   c0019c09 <cpuidCheckEDX(unsigned int)>
c0019e2c:	83 c4 10             	add    esp,0x10
c0019e2f:	89 c1                	mov    ecx,eax
c0019e31:	83 e1 01             	and    ecx,0x1
c0019e34:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019e39:	83 e0 fe             	and    eax,0xfffffffe
c0019e3c:	88 c2                	mov    dl,al
c0019e3e:	88 c8                	mov    al,cl
c0019e40:	09 d0                	or     eax,edx
c0019e42:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019e47:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019e4c:	83 e0 01             	and    eax,0x1
c0019e4f:	0f b6 c0             	movzx  eax,al
c0019e52:	85 c0                	test   eax,eax
c0019e54:	74 1c                	je     c0019e72 <HalDetectFeatures()+0x1b2>
c0019e56:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019e5b:	83 e0 08             	and    eax,0x8
c0019e5e:	0f b6 c0             	movzx  eax,al
c0019e61:	85 c0                	test   eax,eax
c0019e63:	75 0d                	jne    c0019e72 <HalDetectFeatures()+0x1b2>
c0019e65:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019e6a:	83 e0 fe             	and    eax,0xfffffffe
c0019e6d:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019e72:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0019e7a:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0019e82:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0019e8a:	85 c0                	test   eax,eax
c0019e8c:	0f 84 ab 00 00 00    	je     c0019f3d <HalDetectFeatures()+0x27d>
c0019e92:	83 ec 0c             	sub    esp,0xc
c0019e95:	6a 01                	push   0x1
c0019e97:	e8 9a fd ff ff       	call   c0019c36 <cpuidCheckECX(unsigned int)>
c0019e9c:	83 c4 10             	add    esp,0x10
c0019e9f:	83 e0 01             	and    eax,0x1
c0019ea2:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019ea5:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c0019eaa:	83 e0 fd             	and    eax,0xfffffffd
c0019ead:	88 c2                	mov    dl,al
c0019eaf:	88 c8                	mov    al,cl
c0019eb1:	09 d0                	or     eax,edx
c0019eb3:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c0019eb8:	83 ec 0c             	sub    esp,0xc
c0019ebb:	68 00 02 00 00       	push   0x200
c0019ec0:	e8 71 fd ff ff       	call   c0019c36 <cpuidCheckECX(unsigned int)>
c0019ec5:	83 c4 10             	add    esp,0x10
c0019ec8:	83 e0 01             	and    eax,0x1
c0019ecb:	89 c1                	mov    ecx,eax
c0019ecd:	c1 e1 04             	shl    ecx,0x4
c0019ed0:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c0019ed5:	83 e0 ef             	and    eax,0xffffffef
c0019ed8:	88 c2                	mov    dl,al
c0019eda:	88 c8                	mov    al,cl
c0019edc:	09 d0                	or     eax,edx
c0019ede:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c0019ee3:	83 ec 0c             	sub    esp,0xc
c0019ee6:	68 00 00 08 00       	push   0x80000
c0019eeb:	e8 46 fd ff ff       	call   c0019c36 <cpuidCheckECX(unsigned int)>
c0019ef0:	83 c4 10             	add    esp,0x10
c0019ef3:	83 e0 01             	and    eax,0x1
c0019ef6:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019efd:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c0019f02:	83 e0 fb             	and    eax,0xfffffffb
c0019f05:	88 c2                	mov    dl,al
c0019f07:	88 c8                	mov    al,cl
c0019f09:	09 d0                	or     eax,edx
c0019f0b:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c0019f10:	83 ec 0c             	sub    esp,0xc
c0019f13:	68 00 00 10 00       	push   0x100000
c0019f18:	e8 19 fd ff ff       	call   c0019c36 <cpuidCheckECX(unsigned int)>
c0019f1d:	83 c4 10             	add    esp,0x10
c0019f20:	83 e0 01             	and    eax,0x1
c0019f23:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019f2a:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c0019f2f:	83 e0 f7             	and    eax,0xfffffff7
c0019f32:	88 c2                	mov    dl,al
c0019f34:	88 c8                	mov    al,cl
c0019f36:	09 d0                	or     eax,edx
c0019f38:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c0019f3d:	83 ec 0c             	sub    esp,0xc
c0019f40:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019f44:	50                   	push   eax
c0019f45:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019f49:	50                   	push   eax
c0019f4a:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019f4e:	50                   	push   eax
c0019f4f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019f53:	50                   	push   eax
c0019f54:	68 00 00 00 80       	push   0x80000000
c0019f59:	e8 0d fc ff ff       	call   c0019b6b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019f5e:	83 c4 20             	add    esp,0x20
c0019f61:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019f65:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019f6a:	76 4b                	jbe    c0019fb7 <HalDetectFeatures()+0x2f7>
c0019f6c:	83 ec 0c             	sub    esp,0xc
c0019f6f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019f73:	50                   	push   eax
c0019f74:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019f78:	50                   	push   eax
c0019f79:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019f7d:	50                   	push   eax
c0019f7e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019f82:	50                   	push   eax
c0019f83:	68 01 00 00 80       	push   0x80000001
c0019f88:	e8 de fb ff ff       	call   c0019b6b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019f8d:	83 c4 20             	add    esp,0x20
c0019f90:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019f95:	83 e0 bf             	and    eax,0xffffffbf
c0019f98:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019f9d:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c0019fa2:	83 e0 fd             	and    eax,0xfffffffd
c0019fa5:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c0019faa:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c0019faf:	83 e0 fe             	and    eax,0xfffffffe
c0019fb2:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c0019fb7:	83 ec 0c             	sub    esp,0xc
c0019fba:	68 00 04 00 00       	push   0x400
c0019fbf:	e8 48 3d ff ff       	call   c000dd0c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019fc4:	83 c4 10             	add    esp,0x10
c0019fc7:	0f b6 c0             	movzx  eax,al
c0019fca:	85 c0                	test   eax,eax
c0019fcc:	74 0d                	je     c0019fdb <HalDetectFeatures()+0x31b>
c0019fce:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019fd3:	83 e0 fb             	and    eax,0xfffffffb
c0019fd6:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c0019fdb:	c6 05 48 64 03 c0 01 	mov    BYTE PTR ds:0xc0036448,0x1
c0019fe2:	83 ec 04             	sub    esp,0x4
c0019fe5:	6a 0d                	push   0xd
c0019fe7:	6a 00                	push   0x0
c0019fe9:	68 30 64 03 c0       	push   0xc0036430
c0019fee:	e8 fd 64 fe ff       	call   c00004f0 <memset>
c0019ff3:	83 c4 10             	add    esp,0x10
c0019ff6:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c0019ffb:	83 e0 02             	and    eax,0x2
c0019ffe:	0f b6 c0             	movzx  eax,al
c001a001:	85 c0                	test   eax,eax
c001a003:	0f 84 16 08 00 00    	je     c001a81f <HalDetectFeatures()+0xb5f>
c001a009:	83 ec 0c             	sub    esp,0xc
c001a00c:	6a 10                	push   0x10
c001a00e:	e8 f6 fb ff ff       	call   c0019c09 <cpuidCheckEDX(unsigned int)>
c001a013:	83 c4 10             	add    esp,0x10
c001a016:	83 e0 01             	and    eax,0x1
c001a019:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a020:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c001a025:	83 e0 f7             	and    eax,0xfffffff7
c001a028:	88 c2                	mov    dl,al
c001a02a:	88 c8                	mov    al,cl
c001a02c:	09 d0                	or     eax,edx
c001a02e:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c001a033:	83 ec 0c             	sub    esp,0xc
c001a036:	6a 40                	push   0x40
c001a038:	e8 cc fb ff ff       	call   c0019c09 <cpuidCheckEDX(unsigned int)>
c001a03d:	83 c4 10             	add    esp,0x10
c001a040:	83 e0 01             	and    eax,0x1
c001a043:	89 c1                	mov    ecx,eax
c001a045:	c1 e1 04             	shl    ecx,0x4
c001a048:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c001a04d:	83 e0 ef             	and    eax,0xffffffef
c001a050:	88 c2                	mov    dl,al
c001a052:	88 c8                	mov    al,cl
c001a054:	09 d0                	or     eax,edx
c001a056:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c001a05b:	83 ec 0c             	sub    esp,0xc
c001a05e:	6a 08                	push   0x8
c001a060:	e8 a4 fb ff ff       	call   c0019c09 <cpuidCheckEDX(unsigned int)>
c001a065:	83 c4 10             	add    esp,0x10
c001a068:	83 e0 01             	and    eax,0x1
c001a06b:	89 c1                	mov    ecx,eax
c001a06d:	c1 e1 05             	shl    ecx,0x5
c001a070:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c001a075:	83 e0 df             	and    eax,0xffffffdf
c001a078:	88 c2                	mov    dl,al
c001a07a:	88 c8                	mov    al,cl
c001a07c:	09 d0                	or     eax,edx
c001a07e:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c001a083:	83 ec 0c             	sub    esp,0xc
c001a086:	68 00 20 00 00       	push   0x2000
c001a08b:	e8 79 fb ff ff       	call   c0019c09 <cpuidCheckEDX(unsigned int)>
c001a090:	83 c4 10             	add    esp,0x10
c001a093:	83 e0 01             	and    eax,0x1
c001a096:	89 c1                	mov    ecx,eax
c001a098:	c1 e1 06             	shl    ecx,0x6
c001a09b:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c001a0a0:	83 e0 bf             	and    eax,0xffffffbf
c001a0a3:	88 c2                	mov    dl,al
c001a0a5:	88 c8                	mov    al,cl
c001a0a7:	09 d0                	or     eax,edx
c001a0a9:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c001a0ae:	83 ec 0c             	sub    esp,0xc
c001a0b1:	68 00 00 01 00       	push   0x10000
c001a0b6:	e8 4e fb ff ff       	call   c0019c09 <cpuidCheckEDX(unsigned int)>
c001a0bb:	83 c4 10             	add    esp,0x10
c001a0be:	89 c1                	mov    ecx,eax
c001a0c0:	c1 e1 07             	shl    ecx,0x7
c001a0c3:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c001a0c8:	83 e0 7f             	and    eax,0x7f
c001a0cb:	88 c2                	mov    dl,al
c001a0cd:	88 c8                	mov    al,cl
c001a0cf:	09 d0                	or     eax,edx
c001a0d1:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c001a0d6:	83 ec 0c             	sub    esp,0xc
c001a0d9:	6a 01                	push   0x1
c001a0db:	e8 29 fb ff ff       	call   c0019c09 <cpuidCheckEDX(unsigned int)>
c001a0e0:	83 c4 10             	add    esp,0x10
c001a0e3:	83 e0 01             	and    eax,0x1
c001a0e6:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a0ed:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a0f2:	83 e0 f7             	and    eax,0xfffffff7
c001a0f5:	88 c2                	mov    dl,al
c001a0f7:	88 c8                	mov    al,cl
c001a0f9:	09 d0                	or     eax,edx
c001a0fb:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a100:	83 ec 0c             	sub    esp,0xc
c001a103:	68 00 08 00 00       	push   0x800
c001a108:	e8 fc fa ff ff       	call   c0019c09 <cpuidCheckEDX(unsigned int)>
c001a10d:	83 c4 10             	add    esp,0x10
c001a110:	89 c1                	mov    ecx,eax
c001a112:	83 e1 01             	and    ecx,0x1
c001a115:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a11a:	83 e0 fe             	and    eax,0xfffffffe
c001a11d:	88 c2                	mov    dl,al
c001a11f:	88 c8                	mov    al,cl
c001a121:	09 d0                	or     eax,edx
c001a123:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a128:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c001a12d:	83 e0 40             	and    eax,0x40
c001a130:	0f b6 c0             	movzx  eax,al
c001a133:	85 c0                	test   eax,eax
c001a135:	74 0a                	je     c001a141 <HalDetectFeatures()+0x481>
c001a137:	c7 05 28 64 03 c0 00 01 00 00 	mov    DWORD PTR ds:0xc0036428,0x100
c001a141:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c001a146:	83 e0 80             	and    eax,0xffffff80
c001a149:	0f b6 c0             	movzx  eax,al
c001a14c:	85 c0                	test   eax,eax
c001a14e:	74 0a                	je     c001a15a <HalDetectFeatures()+0x49a>
c001a150:	c7 05 24 64 03 c0 80 00 00 00 	mov    DWORD PTR ds:0xc0036424,0x80
c001a15a:	83 ec 0c             	sub    esp,0xc
c001a15d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a161:	50                   	push   eax
c001a162:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a166:	50                   	push   eax
c001a167:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a16b:	50                   	push   eax
c001a16c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a170:	50                   	push   eax
c001a171:	6a 00                	push   0x0
c001a173:	e8 f3 f9 ff ff       	call   c0019b6b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a178:	83 c4 20             	add    esp,0x20
c001a17b:	c7 44 24 48 30 64 03 c0 	mov    DWORD PTR [esp+0x48],0xc0036430
c001a183:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a187:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a18b:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c001a193:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a197:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001a19b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001a19f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001a1a3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001a1a7:	89 c6                	mov    esi,eax
c001a1a9:	89 d7                	mov    edi,edx
c001a1ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1ad:	89 c8                	mov    eax,ecx
c001a1af:	89 fa                	mov    edx,edi
c001a1b1:	89 f3                	mov    ebx,esi
c001a1b3:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001a1b7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a1bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a1bf:	b8 34 64 03 c0       	mov    eax,0xc0036434
c001a1c4:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a1c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a1cc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a1d0:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c001a1d8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a1dc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a1e0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a1e4:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001a1e8:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a1ec:	89 c6                	mov    esi,eax
c001a1ee:	89 d7                	mov    edi,edx
c001a1f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1f2:	89 c8                	mov    eax,ecx
c001a1f4:	89 fa                	mov    edx,edi
c001a1f6:	89 f3                	mov    ebx,esi
c001a1f8:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c001a1fc:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c001a200:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a204:	b8 38 64 03 c0       	mov    eax,0xc0036438
c001a209:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c001a210:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a214:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001a218:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c001a220:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a227:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c001a22b:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001a22f:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a236:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001a23a:	89 c6                	mov    esi,eax
c001a23c:	89 d7                	mov    edi,edx
c001a23e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a240:	89 c8                	mov    eax,ecx
c001a242:	89 fa                	mov    edx,edi
c001a244:	89 f3                	mov    ebx,esi
c001a246:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001a24a:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c001a24e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001a252:	83 ec 08             	sub    esp,0x8
c001a255:	68 99 c9 02 c0       	push   0xc002c999
c001a25a:	68 30 64 03 c0       	push   0xc0036430
c001a25f:	e8 ec 64 fe ff       	call   c0000750 <strcmp>
c001a264:	83 c4 10             	add    esp,0x10
c001a267:	85 c0                	test   eax,eax
c001a269:	74 19                	je     c001a284 <HalDetectFeatures()+0x5c4>
c001a26b:	83 ec 08             	sub    esp,0x8
c001a26e:	68 a6 c9 02 c0       	push   0xc002c9a6
c001a273:	68 30 64 03 c0       	push   0xc0036430
c001a278:	e8 d3 64 fe ff       	call   c0000750 <strcmp>
c001a27d:	83 c4 10             	add    esp,0x10
c001a280:	85 c0                	test   eax,eax
c001a282:	75 04                	jne    c001a288 <HalDetectFeatures()+0x5c8>
c001a284:	b0 01                	mov    al,0x1
c001a286:	eb 02                	jmp    c001a28a <HalDetectFeatures()+0x5ca>
c001a288:	b0 00                	mov    al,0x0
c001a28a:	0f b6 c0             	movzx  eax,al
c001a28d:	85 c0                	test   eax,eax
c001a28f:	74 0f                	je     c001a2a0 <HalDetectFeatures()+0x5e0>
c001a291:	c7 05 44 64 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x2
c001a29b:	e9 0d 03 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a2a0:	83 ec 08             	sub    esp,0x8
c001a2a3:	68 b3 c9 02 c0       	push   0xc002c9b3
c001a2a8:	68 30 64 03 c0       	push   0xc0036430
c001a2ad:	e8 9e 64 fe ff       	call   c0000750 <strcmp>
c001a2b2:	83 c4 10             	add    esp,0x10
c001a2b5:	85 c0                	test   eax,eax
c001a2b7:	74 19                	je     c001a2d2 <HalDetectFeatures()+0x612>
c001a2b9:	83 ec 08             	sub    esp,0x8
c001a2bc:	68 c0 c9 02 c0       	push   0xc002c9c0
c001a2c1:	68 30 64 03 c0       	push   0xc0036430
c001a2c6:	e8 85 64 fe ff       	call   c0000750 <strcmp>
c001a2cb:	83 c4 10             	add    esp,0x10
c001a2ce:	85 c0                	test   eax,eax
c001a2d0:	75 04                	jne    c001a2d6 <HalDetectFeatures()+0x616>
c001a2d2:	b0 01                	mov    al,0x1
c001a2d4:	eb 02                	jmp    c001a2d8 <HalDetectFeatures()+0x618>
c001a2d6:	b0 00                	mov    al,0x0
c001a2d8:	0f b6 c0             	movzx  eax,al
c001a2db:	85 c0                	test   eax,eax
c001a2dd:	74 0f                	je     c001a2ee <HalDetectFeatures()+0x62e>
c001a2df:	c7 05 44 64 03 c0 04 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x4
c001a2e9:	e9 bf 02 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a2ee:	83 ec 08             	sub    esp,0x8
c001a2f1:	68 cd c9 02 c0       	push   0xc002c9cd
c001a2f6:	68 30 64 03 c0       	push   0xc0036430
c001a2fb:	e8 50 64 fe ff       	call   c0000750 <strcmp>
c001a300:	83 c4 10             	add    esp,0x10
c001a303:	85 c0                	test   eax,eax
c001a305:	74 19                	je     c001a320 <HalDetectFeatures()+0x660>
c001a307:	83 ec 08             	sub    esp,0x8
c001a30a:	68 da c9 02 c0       	push   0xc002c9da
c001a30f:	68 30 64 03 c0       	push   0xc0036430
c001a314:	e8 37 64 fe ff       	call   c0000750 <strcmp>
c001a319:	83 c4 10             	add    esp,0x10
c001a31c:	85 c0                	test   eax,eax
c001a31e:	75 04                	jne    c001a324 <HalDetectFeatures()+0x664>
c001a320:	b0 01                	mov    al,0x1
c001a322:	eb 02                	jmp    c001a326 <HalDetectFeatures()+0x666>
c001a324:	b0 00                	mov    al,0x0
c001a326:	0f b6 c0             	movzx  eax,al
c001a329:	85 c0                	test   eax,eax
c001a32b:	74 0f                	je     c001a33c <HalDetectFeatures()+0x67c>
c001a32d:	c7 05 44 64 03 c0 05 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x5
c001a337:	e9 71 02 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a33c:	83 ec 08             	sub    esp,0x8
c001a33f:	68 e7 c9 02 c0       	push   0xc002c9e7
c001a344:	68 30 64 03 c0       	push   0xc0036430
c001a349:	e8 02 64 fe ff       	call   c0000750 <strcmp>
c001a34e:	83 c4 10             	add    esp,0x10
c001a351:	85 c0                	test   eax,eax
c001a353:	0f 94 c0             	sete   al
c001a356:	0f b6 c0             	movzx  eax,al
c001a359:	85 c0                	test   eax,eax
c001a35b:	74 0f                	je     c001a36c <HalDetectFeatures()+0x6ac>
c001a35d:	c7 05 44 64 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x1
c001a367:	e9 41 02 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a36c:	83 ec 08             	sub    esp,0x8
c001a36f:	68 f4 c9 02 c0       	push   0xc002c9f4
c001a374:	68 30 64 03 c0       	push   0xc0036430
c001a379:	e8 d2 63 fe ff       	call   c0000750 <strcmp>
c001a37e:	83 c4 10             	add    esp,0x10
c001a381:	85 c0                	test   eax,eax
c001a383:	0f 94 c0             	sete   al
c001a386:	0f b6 c0             	movzx  eax,al
c001a389:	85 c0                	test   eax,eax
c001a38b:	74 0f                	je     c001a39c <HalDetectFeatures()+0x6dc>
c001a38d:	c7 05 44 64 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x3
c001a397:	e9 11 02 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a39c:	83 ec 08             	sub    esp,0x8
c001a39f:	68 b3 c9 02 c0       	push   0xc002c9b3
c001a3a4:	68 30 64 03 c0       	push   0xc0036430
c001a3a9:	e8 a2 63 fe ff       	call   c0000750 <strcmp>
c001a3ae:	83 c4 10             	add    esp,0x10
c001a3b1:	85 c0                	test   eax,eax
c001a3b3:	0f 94 c0             	sete   al
c001a3b6:	0f b6 c0             	movzx  eax,al
c001a3b9:	85 c0                	test   eax,eax
c001a3bb:	74 0f                	je     c001a3cc <HalDetectFeatures()+0x70c>
c001a3bd:	c7 05 44 64 03 c0 06 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x6
c001a3c7:	e9 e1 01 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a3cc:	83 ec 08             	sub    esp,0x8
c001a3cf:	68 01 ca 02 c0       	push   0xc002ca01
c001a3d4:	68 30 64 03 c0       	push   0xc0036430
c001a3d9:	e8 72 63 fe ff       	call   c0000750 <strcmp>
c001a3de:	83 c4 10             	add    esp,0x10
c001a3e1:	85 c0                	test   eax,eax
c001a3e3:	0f 94 c0             	sete   al
c001a3e6:	0f b6 c0             	movzx  eax,al
c001a3e9:	85 c0                	test   eax,eax
c001a3eb:	74 0f                	je     c001a3fc <HalDetectFeatures()+0x73c>
c001a3ed:	c7 05 44 64 03 c0 07 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x7
c001a3f7:	e9 b1 01 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a3fc:	83 ec 08             	sub    esp,0x8
c001a3ff:	68 0e ca 02 c0       	push   0xc002ca0e
c001a404:	68 30 64 03 c0       	push   0xc0036430
c001a409:	e8 42 63 fe ff       	call   c0000750 <strcmp>
c001a40e:	83 c4 10             	add    esp,0x10
c001a411:	85 c0                	test   eax,eax
c001a413:	0f 94 c0             	sete   al
c001a416:	0f b6 c0             	movzx  eax,al
c001a419:	85 c0                	test   eax,eax
c001a41b:	74 0f                	je     c001a42c <HalDetectFeatures()+0x76c>
c001a41d:	c7 05 44 64 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x8
c001a427:	e9 81 01 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a42c:	83 ec 08             	sub    esp,0x8
c001a42f:	68 1b ca 02 c0       	push   0xc002ca1b
c001a434:	68 30 64 03 c0       	push   0xc0036430
c001a439:	e8 12 63 fe ff       	call   c0000750 <strcmp>
c001a43e:	83 c4 10             	add    esp,0x10
c001a441:	85 c0                	test   eax,eax
c001a443:	0f 94 c0             	sete   al
c001a446:	0f b6 c0             	movzx  eax,al
c001a449:	85 c0                	test   eax,eax
c001a44b:	74 0f                	je     c001a45c <HalDetectFeatures()+0x79c>
c001a44d:	c7 05 44 64 03 c0 09 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x9
c001a457:	e9 51 01 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a45c:	83 ec 08             	sub    esp,0x8
c001a45f:	68 28 ca 02 c0       	push   0xc002ca28
c001a464:	68 30 64 03 c0       	push   0xc0036430
c001a469:	e8 e2 62 fe ff       	call   c0000750 <strcmp>
c001a46e:	83 c4 10             	add    esp,0x10
c001a471:	85 c0                	test   eax,eax
c001a473:	0f 94 c0             	sete   al
c001a476:	0f b6 c0             	movzx  eax,al
c001a479:	85 c0                	test   eax,eax
c001a47b:	74 0f                	je     c001a48c <HalDetectFeatures()+0x7cc>
c001a47d:	c7 05 44 64 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xa
c001a487:	e9 21 01 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a48c:	83 ec 08             	sub    esp,0x8
c001a48f:	68 35 ca 02 c0       	push   0xc002ca35
c001a494:	68 30 64 03 c0       	push   0xc0036430
c001a499:	e8 b2 62 fe ff       	call   c0000750 <strcmp>
c001a49e:	83 c4 10             	add    esp,0x10
c001a4a1:	85 c0                	test   eax,eax
c001a4a3:	0f 94 c0             	sete   al
c001a4a6:	0f b6 c0             	movzx  eax,al
c001a4a9:	85 c0                	test   eax,eax
c001a4ab:	74 0f                	je     c001a4bc <HalDetectFeatures()+0x7fc>
c001a4ad:	c7 05 44 64 03 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xb
c001a4b7:	e9 f1 00 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a4bc:	83 ec 08             	sub    esp,0x8
c001a4bf:	68 42 ca 02 c0       	push   0xc002ca42
c001a4c4:	68 30 64 03 c0       	push   0xc0036430
c001a4c9:	e8 82 62 fe ff       	call   c0000750 <strcmp>
c001a4ce:	83 c4 10             	add    esp,0x10
c001a4d1:	85 c0                	test   eax,eax
c001a4d3:	0f 94 c0             	sete   al
c001a4d6:	0f b6 c0             	movzx  eax,al
c001a4d9:	85 c0                	test   eax,eax
c001a4db:	74 0f                	je     c001a4ec <HalDetectFeatures()+0x82c>
c001a4dd:	c7 05 44 64 03 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xc
c001a4e7:	e9 c1 00 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a4ec:	83 ec 08             	sub    esp,0x8
c001a4ef:	68 4f ca 02 c0       	push   0xc002ca4f
c001a4f4:	68 30 64 03 c0       	push   0xc0036430
c001a4f9:	e8 52 62 fe ff       	call   c0000750 <strcmp>
c001a4fe:	83 c4 10             	add    esp,0x10
c001a501:	85 c0                	test   eax,eax
c001a503:	0f 94 c0             	sete   al
c001a506:	0f b6 c0             	movzx  eax,al
c001a509:	85 c0                	test   eax,eax
c001a50b:	74 0f                	je     c001a51c <HalDetectFeatures()+0x85c>
c001a50d:	c7 05 44 64 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xd
c001a517:	e9 91 00 00 00       	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a51c:	83 ec 08             	sub    esp,0x8
c001a51f:	68 5c ca 02 c0       	push   0xc002ca5c
c001a524:	68 30 64 03 c0       	push   0xc0036430
c001a529:	e8 22 62 fe ff       	call   c0000750 <strcmp>
c001a52e:	83 c4 10             	add    esp,0x10
c001a531:	85 c0                	test   eax,eax
c001a533:	0f 94 c0             	sete   al
c001a536:	0f b6 c0             	movzx  eax,al
c001a539:	85 c0                	test   eax,eax
c001a53b:	74 0c                	je     c001a549 <HalDetectFeatures()+0x889>
c001a53d:	c7 05 44 64 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xd
c001a547:	eb 64                	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a549:	83 ec 08             	sub    esp,0x8
c001a54c:	68 69 ca 02 c0       	push   0xc002ca69
c001a551:	68 30 64 03 c0       	push   0xc0036430
c001a556:	e8 f5 61 fe ff       	call   c0000750 <strcmp>
c001a55b:	83 c4 10             	add    esp,0x10
c001a55e:	85 c0                	test   eax,eax
c001a560:	0f 94 c0             	sete   al
c001a563:	0f b6 c0             	movzx  eax,al
c001a566:	85 c0                	test   eax,eax
c001a568:	74 0c                	je     c001a576 <HalDetectFeatures()+0x8b6>
c001a56a:	c7 05 44 64 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xd
c001a574:	eb 37                	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a576:	83 ec 08             	sub    esp,0x8
c001a579:	68 76 ca 02 c0       	push   0xc002ca76
c001a57e:	68 30 64 03 c0       	push   0xc0036430
c001a583:	e8 c8 61 fe ff       	call   c0000750 <strcmp>
c001a588:	83 c4 10             	add    esp,0x10
c001a58b:	85 c0                	test   eax,eax
c001a58d:	0f 94 c0             	sete   al
c001a590:	0f b6 c0             	movzx  eax,al
c001a593:	85 c0                	test   eax,eax
c001a595:	74 0c                	je     c001a5a3 <HalDetectFeatures()+0x8e3>
c001a597:	c7 05 44 64 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0036444,0xd
c001a5a1:	eb 0a                	jmp    c001a5ad <HalDetectFeatures()+0x8ed>
c001a5a3:	c7 05 44 64 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x0
c001a5ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5b1:	83 f8 06             	cmp    eax,0x6
c001a5b4:	0f 86 cc 00 00 00    	jbe    c001a686 <HalDetectFeatures()+0x9c6>
c001a5ba:	83 ec 0c             	sub    esp,0xc
c001a5bd:	68 80 00 00 00       	push   0x80
c001a5c2:	e8 9d f6 ff ff       	call   c0019c64 <cpuidCheckExtendedEBX(unsigned int)>
c001a5c7:	83 c4 10             	add    esp,0x10
c001a5ca:	89 c1                	mov    ecx,eax
c001a5cc:	83 e1 01             	and    ecx,0x1
c001a5cf:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a5d4:	83 e0 fe             	and    eax,0xfffffffe
c001a5d7:	88 c2                	mov    dl,al
c001a5d9:	88 c8                	mov    al,cl
c001a5db:	09 d0                	or     eax,edx
c001a5dd:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a5e2:	83 ec 0c             	sub    esp,0xc
c001a5e5:	68 00 00 10 00       	push   0x100000
c001a5ea:	e8 75 f6 ff ff       	call   c0019c64 <cpuidCheckExtendedEBX(unsigned int)>
c001a5ef:	83 c4 10             	add    esp,0x10
c001a5f2:	83 e0 01             	and    eax,0x1
c001a5f5:	89 c1                	mov    ecx,eax
c001a5f7:	c1 e1 06             	shl    ecx,0x6
c001a5fa:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a5ff:	83 e0 bf             	and    eax,0xffffffbf
c001a602:	88 c2                	mov    dl,al
c001a604:	88 c8                	mov    al,cl
c001a606:	09 d0                	or     eax,edx
c001a608:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a60d:	83 ec 0c             	sub    esp,0xc
c001a610:	68 00 00 04 00       	push   0x40000
c001a615:	e8 4a f6 ff ff       	call   c0019c64 <cpuidCheckExtendedEBX(unsigned int)>
c001a61a:	83 c4 10             	add    esp,0x10
c001a61d:	83 e0 01             	and    eax,0x1
c001a620:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001a623:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a628:	83 e0 fd             	and    eax,0xfffffffd
c001a62b:	88 c2                	mov    dl,al
c001a62d:	88 c8                	mov    al,cl
c001a62f:	09 d0                	or     eax,edx
c001a631:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a636:	83 ec 0c             	sub    esp,0xc
c001a639:	6a 04                	push   0x4
c001a63b:	e8 52 f6 ff ff       	call   c0019c92 <cpuidCheckExtendedECX(unsigned int)>
c001a640:	83 c4 10             	add    esp,0x10
c001a643:	83 e0 01             	and    eax,0x1
c001a646:	89 c1                	mov    ecx,eax
c001a648:	c1 e1 05             	shl    ecx,0x5
c001a64b:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a650:	83 e0 df             	and    eax,0xffffffdf
c001a653:	88 c2                	mov    dl,al
c001a655:	88 c8                	mov    al,cl
c001a657:	09 d0                	or     eax,edx
c001a659:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a65e:	83 ec 0c             	sub    esp,0xc
c001a661:	6a 20                	push   0x20
c001a663:	e8 2a f6 ff ff       	call   c0019c92 <cpuidCheckExtendedECX(unsigned int)>
c001a668:	83 c4 10             	add    esp,0x10
c001a66b:	83 e0 01             	and    eax,0x1
c001a66e:	89 c1                	mov    ecx,eax
c001a670:	c1 e1 04             	shl    ecx,0x4
c001a673:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a678:	83 e0 ef             	and    eax,0xffffffef
c001a67b:	88 c2                	mov    dl,al
c001a67d:	88 c8                	mov    al,cl
c001a67f:	09 d0                	or     eax,edx
c001a681:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a686:	83 ec 0c             	sub    esp,0xc
c001a689:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a68d:	50                   	push   eax
c001a68e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a692:	50                   	push   eax
c001a693:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a697:	50                   	push   eax
c001a698:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a69c:	50                   	push   eax
c001a69d:	6a 01                	push   0x1
c001a69f:	e8 c7 f4 ff ff       	call   c0019b6b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a6a4:	83 c4 20             	add    esp,0x20
c001a6a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6ab:	83 e0 0f             	and    eax,0xf
c001a6ae:	a2 40 64 03 c0       	mov    ds:0xc0036440,al
c001a6b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6b7:	c1 e8 04             	shr    eax,0x4
c001a6ba:	83 e0 0f             	and    eax,0xf
c001a6bd:	a2 3e 64 03 c0       	mov    ds:0xc003643e,al
c001a6c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6c6:	c1 e8 08             	shr    eax,0x8
c001a6c9:	83 e0 0f             	and    eax,0xf
c001a6cc:	a2 3d 64 03 c0       	mov    ds:0xc003643d,al
c001a6d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6d5:	c1 e8 0c             	shr    eax,0xc
c001a6d8:	83 e0 03             	and    eax,0x3
c001a6db:	a2 3f 64 03 c0       	mov    ds:0xc003643f,al
c001a6e0:	a0 3d 64 03 c0       	mov    al,ds:0xc003643d
c001a6e5:	0f b6 c0             	movzx  eax,al
c001a6e8:	83 f8 06             	cmp    eax,0x6
c001a6eb:	74 0d                	je     c001a6fa <HalDetectFeatures()+0xa3a>
c001a6ed:	a0 3d 64 03 c0       	mov    al,ds:0xc003643d
c001a6f2:	0f b6 c0             	movzx  eax,al
c001a6f5:	83 f8 0f             	cmp    eax,0xf
c001a6f8:	75 18                	jne    c001a712 <HalDetectFeatures()+0xa52>
c001a6fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6fe:	c1 e8 10             	shr    eax,0x10
c001a701:	c1 e0 04             	shl    eax,0x4
c001a704:	88 c2                	mov    dl,al
c001a706:	a0 3e 64 03 c0       	mov    al,ds:0xc003643e
c001a70b:	09 d0                	or     eax,edx
c001a70d:	a2 3e 64 03 c0       	mov    ds:0xc003643e,al
c001a712:	a0 3d 64 03 c0       	mov    al,ds:0xc003643d
c001a717:	0f b6 c0             	movzx  eax,al
c001a71a:	83 f8 0f             	cmp    eax,0xf
c001a71d:	75 15                	jne    c001a734 <HalDetectFeatures()+0xa74>
c001a71f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a723:	c1 e8 14             	shr    eax,0x14
c001a726:	88 c2                	mov    dl,al
c001a728:	a0 3d 64 03 c0       	mov    al,ds:0xc003643d
c001a72d:	01 d0                	add    eax,edx
c001a72f:	a2 3d 64 03 c0       	mov    ds:0xc003643d,al
c001a734:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c001a73c:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c001a744:	85 c0                	test   eax,eax
c001a746:	74 2d                	je     c001a775 <HalDetectFeatures()+0xab5>
c001a748:	83 ec 0c             	sub    esp,0xc
c001a74b:	68 00 00 00 40       	push   0x40000000
c001a750:	e8 e1 f4 ff ff       	call   c0019c36 <cpuidCheckECX(unsigned int)>
c001a755:	83 c4 10             	add    esp,0x10
c001a758:	83 e0 01             	and    eax,0x1
c001a75b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001a762:	a0 4e 64 03 c0       	mov    al,ds:0xc003644e
c001a767:	83 e0 fb             	and    eax,0xfffffffb
c001a76a:	88 c2                	mov    dl,al
c001a76c:	88 c8                	mov    al,cl
c001a76e:	09 d0                	or     eax,edx
c001a770:	a2 4e 64 03 c0       	mov    ds:0xc003644e,al
c001a775:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a77a:	83 c8 04             	or     eax,0x4
c001a77d:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a782:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a787:	83 c8 08             	or     eax,0x8
c001a78a:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a78f:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a794:	83 c8 10             	or     eax,0x10
c001a797:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a79c:	83 ec 0c             	sub    esp,0xc
c001a79f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7a3:	50                   	push   eax
c001a7a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7a8:	50                   	push   eax
c001a7a9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7ad:	50                   	push   eax
c001a7ae:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a7b2:	50                   	push   eax
c001a7b3:	68 00 00 00 80       	push   0x80000000
c001a7b8:	e8 ae f3 ff ff       	call   c0019b6b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a7bd:	83 c4 20             	add    esp,0x20
c001a7c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7c4:	3d 00 00 00 80       	cmp    eax,0x80000000
c001a7c9:	0f 86 96 01 00 00    	jbe    c001a965 <HalDetectFeatures()+0xca5>
c001a7cf:	83 ec 0c             	sub    esp,0xc
c001a7d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7d6:	50                   	push   eax
c001a7d7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7db:	50                   	push   eax
c001a7dc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7e0:	50                   	push   eax
c001a7e1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a7e5:	50                   	push   eax
c001a7e6:	68 01 00 00 80       	push   0x80000001
c001a7eb:	e8 7b f3 ff ff       	call   c0019b6b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001a7f0:	83 c4 20             	add    esp,0x20
c001a7f3:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a7f8:	83 e0 7f             	and    eax,0x7f
c001a7fb:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a800:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a805:	83 e0 fb             	and    eax,0xfffffffb
c001a808:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a80d:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a812:	83 e0 fd             	and    eax,0xfffffffd
c001a815:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a81a:	e9 46 01 00 00       	jmp    c001a965 <HalDetectFeatures()+0xca5>
c001a81f:	83 ec 08             	sub    esp,0x8
c001a822:	68 e7 c9 02 c0       	push   0xc002c9e7
c001a827:	68 30 64 03 c0       	push   0xc0036430
c001a82c:	e8 0f 5e fe ff       	call   c0000640 <strcpy>
c001a831:	83 c4 10             	add    esp,0x10
c001a834:	c7 05 44 64 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0036444,0x1
c001a83e:	e8 80 59 fe ff       	call   c00001c3 <is486>
c001a843:	85 c0                	test   eax,eax
c001a845:	0f 95 c0             	setne  al
c001a848:	0f b6 c0             	movzx  eax,al
c001a84b:	85 c0                	test   eax,eax
c001a84d:	0f 84 8d 00 00 00    	je     c001a8e0 <HalDetectFeatures()+0xc20>
c001a853:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a858:	83 c8 04             	or     eax,0x4
c001a85b:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a860:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a865:	83 c8 08             	or     eax,0x8
c001a868:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a86d:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a872:	83 c8 10             	or     eax,0x10
c001a875:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a87a:	0f 20 c0             	mov    eax,cr0
c001a87d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a881:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a885:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a88c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a893:	83 e0 04             	and    eax,0x4
c001a896:	74 1e                	je     c001a8b6 <HalDetectFeatures()+0xbf6>
c001a898:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a89f:	83 e0 10             	and    eax,0x10
c001a8a2:	75 12                	jne    c001a8b6 <HalDetectFeatures()+0xbf6>
c001a8a4:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a8a9:	83 e0 f7             	and    eax,0xfffffff7
c001a8ac:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a8b1:	e9 af 00 00 00       	jmp    c001a965 <HalDetectFeatures()+0xca5>
c001a8b6:	e8 e3 58 fe ff       	call   c000019e <hasLegacyFPU>
c001a8bb:	83 e0 01             	and    eax,0x1
c001a8be:	83 e0 01             	and    eax,0x1
c001a8c1:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a8c8:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a8cd:	83 e0 f7             	and    eax,0xfffffff7
c001a8d0:	88 c2                	mov    dl,al
c001a8d2:	88 c8                	mov    al,cl
c001a8d4:	09 d0                	or     eax,edx
c001a8d6:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a8db:	e9 85 00 00 00       	jmp    c001a965 <HalDetectFeatures()+0xca5>
c001a8e0:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a8e5:	83 e0 fb             	and    eax,0xfffffffb
c001a8e8:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a8ed:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a8f2:	83 e0 f7             	and    eax,0xfffffff7
c001a8f5:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a8fa:	a0 4f 64 03 c0       	mov    al,ds:0xc003644f
c001a8ff:	83 e0 ef             	and    eax,0xffffffef
c001a902:	a2 4f 64 03 c0       	mov    ds:0xc003644f,al
c001a907:	0f 20 c0             	mov    eax,cr0
c001a90a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a90e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a912:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c001a919:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a920:	83 e0 04             	and    eax,0x4
c001a923:	74 1b                	je     c001a940 <HalDetectFeatures()+0xc80>
c001a925:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a92c:	83 e0 10             	and    eax,0x10
c001a92f:	75 0f                	jne    c001a940 <HalDetectFeatures()+0xc80>
c001a931:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a936:	83 e0 f7             	and    eax,0xfffffff7
c001a939:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a93e:	eb 25                	jmp    c001a965 <HalDetectFeatures()+0xca5>
c001a940:	e8 59 58 fe ff       	call   c000019e <hasLegacyFPU>
c001a945:	83 e0 01             	and    eax,0x1
c001a948:	83 e0 01             	and    eax,0x1
c001a94b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a952:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a957:	83 e0 f7             	and    eax,0xfffffff7
c001a95a:	88 c2                	mov    dl,al
c001a95c:	88 c8                	mov    al,cl
c001a95e:	09 d0                	or     eax,edx
c001a960:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a965:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a96a:	83 e0 08             	and    eax,0x8
c001a96d:	0f b6 c0             	movzx  eax,al
c001a970:	85 c0                	test   eax,eax
c001a972:	75 25                	jne    c001a999 <HalDetectFeatures()+0xcd9>
c001a974:	e8 25 58 fe ff       	call   c000019e <hasLegacyFPU>
c001a979:	83 e0 01             	and    eax,0x1
c001a97c:	83 e0 01             	and    eax,0x1
c001a97f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001a986:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a98b:	83 e0 f7             	and    eax,0xfffffff7
c001a98e:	88 c2                	mov    dl,al
c001a990:	88 c8                	mov    al,cl
c001a992:	09 d0                	or     eax,edx
c001a994:	a2 50 64 03 c0       	mov    ds:0xc0036450,al
c001a999:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001a99e:	83 e0 08             	and    eax,0x8
c001a9a1:	0f b6 c0             	movzx  eax,al
c001a9a4:	85 c0                	test   eax,eax
c001a9a6:	74 0d                	je     c001a9b5 <HalDetectFeatures()+0xcf5>
c001a9a8:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a9ad:	83 c8 10             	or     eax,0x10
c001a9b0:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001a9b5:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a9ba:	83 e0 10             	and    eax,0x10
c001a9bd:	0f b6 c0             	movzx  eax,al
c001a9c0:	85 c0                	test   eax,eax
c001a9c2:	75 23                	jne    c001a9e7 <HalDetectFeatures()+0xd27>
c001a9c4:	e8 8d 97 00 00       	call   c0024156 <x87Detect>
c001a9c9:	83 e0 01             	and    eax,0x1
c001a9cc:	83 e0 01             	and    eax,0x1
c001a9cf:	89 c1                	mov    ecx,eax
c001a9d1:	c1 e1 04             	shl    ecx,0x4
c001a9d4:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001a9d9:	83 e0 ef             	and    eax,0xffffffef
c001a9dc:	88 c2                	mov    dl,al
c001a9de:	88 c8                	mov    al,cl
c001a9e0:	09 d0                	or     eax,edx
c001a9e2:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001a9e7:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c001a9ec:	83 e0 01             	and    eax,0x1
c001a9ef:	0f b6 c0             	movzx  eax,al
c001a9f2:	85 c0                	test   eax,eax
c001a9f4:	75 2d                	jne    c001aa23 <HalDetectFeatures()+0xd63>
c001a9f6:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c001a9fb:	83 e0 02             	and    eax,0x2
c001a9fe:	0f b6 c0             	movzx  eax,al
c001aa01:	85 c0                	test   eax,eax
c001aa03:	75 1e                	jne    c001aa23 <HalDetectFeatures()+0xd63>
c001aa05:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c001aa0a:	83 e0 04             	and    eax,0x4
c001aa0d:	0f b6 c0             	movzx  eax,al
c001aa10:	85 c0                	test   eax,eax
c001aa12:	75 0f                	jne    c001aa23 <HalDetectFeatures()+0xd63>
c001aa14:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c001aa19:	83 e0 08             	and    eax,0x8
c001aa1c:	0f b6 c0             	movzx  eax,al
c001aa1f:	85 c0                	test   eax,eax
c001aa21:	74 0d                	je     c001aa30 <HalDetectFeatures()+0xd70>
c001aa23:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001aa28:	83 c8 80             	or     eax,0xffffff80
c001aa2b:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001aa30:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001aa35:	83 e0 10             	and    eax,0x10
c001aa38:	0f b6 c0             	movzx  eax,al
c001aa3b:	85 c0                	test   eax,eax
c001aa3d:	74 2f                	je     c001aa6e <HalDetectFeatures()+0xdae>
c001aa3f:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001aa44:	83 e0 80             	and    eax,0xffffff80
c001aa47:	0f b6 c0             	movzx  eax,al
c001aa4a:	85 c0                	test   eax,eax
c001aa4c:	75 20                	jne    c001aa6e <HalDetectFeatures()+0xdae>
c001aa4e:	e8 bd 96 00 00       	call   c0024110 <sseDetect>
c001aa53:	83 e0 01             	and    eax,0x1
c001aa56:	89 c1                	mov    ecx,eax
c001aa58:	c1 e1 07             	shl    ecx,0x7
c001aa5b:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001aa60:	83 e0 7f             	and    eax,0x7f
c001aa63:	88 c2                	mov    dl,al
c001aa65:	88 c8                	mov    al,cl
c001aa67:	09 d0                	or     eax,edx
c001aa69:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001aa6e:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001aa73:	83 e0 80             	and    eax,0xffffff80
c001aa76:	0f b6 c0             	movzx  eax,al
c001aa79:	85 c0                	test   eax,eax
c001aa7b:	74 1c                	je     c001aa99 <HalDetectFeatures()+0xdd9>
c001aa7d:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c001aa82:	83 e0 20             	and    eax,0x20
c001aa85:	0f b6 c0             	movzx  eax,al
c001aa88:	85 c0                	test   eax,eax
c001aa8a:	75 0d                	jne    c001aa99 <HalDetectFeatures()+0xdd9>
c001aa8c:	a0 4d 64 03 c0       	mov    al,ds:0xc003644d
c001aa91:	83 e0 df             	and    eax,0xffffffdf
c001aa94:	a2 4d 64 03 c0       	mov    ds:0xc003644d,al
c001aa99:	c6 05 48 64 03 c0 00 	mov    BYTE PTR ds:0xc0036448,0x0
c001aaa0:	90                   	nop
c001aaa1:	81 c4 90 00 00 00    	add    esp,0x90
c001aaa7:	5b                   	pop    ebx
c001aaa8:	5e                   	pop    esi
c001aaa9:	5f                   	pop    edi
c001aaaa:	c3                   	ret    

c001aaab <HalEnableNMI()>:
c001aaab:	c6 05 2c 64 03 c0 01 	mov    BYTE PTR ds:0xc003642c,0x1
c001aab2:	6a 10                	push   0x10
c001aab4:	e8 02 ef ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001aab9:	83 c4 04             	add    esp,0x4
c001aabc:	90                   	nop
c001aabd:	c3                   	ret    

c001aabe <HalDisableNMI()>:
c001aabe:	c6 05 2c 64 03 c0 00 	mov    BYTE PTR ds:0xc003642c,0x0
c001aac5:	6a 10                	push   0x10
c001aac7:	e8 ef ee ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001aacc:	83 c4 04             	add    esp,0x4
c001aacf:	90                   	nop
c001aad0:	c3                   	ret    

c001aad1 <HalGetNMIState()>:
c001aad1:	a0 2c 64 03 c0       	mov    al,ds:0xc003642c
c001aad6:	c3                   	ret    

c001aad7 <HalIsAPICEnabled()>:
c001aad7:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001aadc:	83 e0 01             	and    eax,0x1
c001aadf:	0f b6 c0             	movzx  eax,al
c001aae2:	85 c0                	test   eax,eax
c001aae4:	0f 95 c0             	setne  al
c001aae7:	c3                   	ret    

c001aae8 <x86rdmsr(unsigned int)>:
c001aae8:	83 ec 1c             	sub    esp,0x1c
c001aaeb:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001aaf0:	83 e0 08             	and    eax,0x8
c001aaf3:	0f b6 c0             	movzx  eax,al
c001aaf6:	85 c0                	test   eax,eax
c001aaf8:	75 10                	jne    c001ab0a <x86rdmsr(unsigned int)+0x22>
c001aafa:	83 ec 0c             	sub    esp,0xc
c001aafd:	68 82 ca 02 c0       	push   0xc002ca82
c001ab02:	e8 45 5c ff ff       	call   c001074c <KePanic(char const*)>
c001ab07:	83 c4 10             	add    esp,0x10
c001ab0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab0e:	89 c1                	mov    ecx,eax
c001ab10:	0f 32                	rdmsr  
c001ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ab1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab22:	83 c4 1c             	add    esp,0x1c
c001ab25:	c3                   	ret    

c001ab26 <x86wrmsr(unsigned int, unsigned long long)>:
c001ab26:	83 ec 1c             	sub    esp,0x1c
c001ab29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab39:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001ab3e:	83 e0 08             	and    eax,0x8
c001ab41:	0f b6 c0             	movzx  eax,al
c001ab44:	85 c0                	test   eax,eax
c001ab46:	75 10                	jne    c001ab58 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c001ab48:	83 ec 0c             	sub    esp,0xc
c001ab4b:	68 88 ca 02 c0       	push   0xc002ca88
c001ab50:	e8 f7 5b ff ff       	call   c001074c <KePanic(char const*)>
c001ab55:	83 c4 10             	add    esp,0x10
c001ab58:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001ab5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab64:	0f 30                	wrmsr  
c001ab66:	90                   	nop
c001ab67:	83 c4 1c             	add    esp,0x1c
c001ab6a:	c3                   	ret    

c001ab6b <HalHandleGeneralProtectionFault(void*, void*)>:
c001ab6b:	83 ec 0c             	sub    esp,0xc
c001ab6e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001ab73:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab75:	8a 40 62             	mov    al,BYTE PTR [eax+0x62]
c001ab78:	0f b6 c0             	movzx  eax,al
c001ab7b:	85 c0                	test   eax,eax
c001ab7d:	74 11                	je     c001ab90 <HalHandleGeneralProtectionFault(void*, void*)+0x25>
c001ab7f:	83 ec 0c             	sub    esp,0xc
c001ab82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab86:	e8 78 db ff ff       	call   c0018703 <Vm::faultHandler(regs*)>
c001ab8b:	83 c4 10             	add    esp,0x10
c001ab8e:	eb 02                	jmp    c001ab92 <HalHandleGeneralProtectionFault(void*, void*)+0x27>
c001ab90:	b0 00                	mov    al,0x0
c001ab92:	83 c4 0c             	add    esp,0xc
c001ab95:	c3                   	ret    

c001ab96 <HalFindRSDP()>:
c001ab96:	83 ec 1c             	sub    esp,0x1c
c001ab99:	a1 7c 61 03 c0       	mov    eax,ds:0xc003617c
c001ab9e:	3d ff 07 00 00       	cmp    eax,0x7ff
c001aba3:	7e 17                	jle    c001abbc <HalFindRSDP()+0x26>
c001aba5:	83 ec 0c             	sub    esp,0xc
c001aba8:	68 00 04 00 00       	push   0x400
c001abad:	e8 5a 31 ff ff       	call   c000dd0c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001abb2:	83 c4 10             	add    esp,0x10
c001abb5:	0f b6 c0             	movzx  eax,al
c001abb8:	85 c0                	test   eax,eax
c001abba:	74 04                	je     c001abc0 <HalFindRSDP()+0x2a>
c001abbc:	b0 01                	mov    al,0x1
c001abbe:	eb 02                	jmp    c001abc2 <HalFindRSDP()+0x2c>
c001abc0:	b0 00                	mov    al,0x0
c001abc2:	0f b6 c0             	movzx  eax,al
c001abc5:	85 c0                	test   eax,eax
c001abc7:	74 1d                	je     c001abe6 <HalFindRSDP()+0x50>
c001abc9:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001abce:	83 e0 fb             	and    eax,0xfffffffb
c001abd1:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001abd6:	83 ec 0c             	sub    esp,0xc
c001abd9:	68 8e ca 02 c0       	push   0xc002ca8e
c001abde:	e8 99 c3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001abe3:	83 c4 10             	add    esp,0x10
c001abe6:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001abeb:	83 e0 04             	and    eax,0x4
c001abee:	0f b6 c0             	movzx  eax,al
c001abf1:	85 c0                	test   eax,eax
c001abf3:	75 17                	jne    c001ac0c <HalFindRSDP()+0x76>
c001abf5:	83 ec 0c             	sub    esp,0xc
c001abf8:	68 9d ca 02 c0       	push   0xc002ca9d
c001abfd:	e8 7a c3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ac02:	83 c4 10             	add    esp,0x10
c001ac05:	b8 00 00 00 00       	mov    eax,0x0
c001ac0a:	eb 63                	jmp    c001ac6f <HalFindRSDP()+0xd9>
c001ac0c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001ac14:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001ac1c:	77 2f                	ja     c001ac4d <HalFindRSDP()+0xb7>
c001ac1e:	83 ec 04             	sub    esp,0x4
c001ac21:	6a 08                	push   0x8
c001ac23:	68 a7 ca 02 c0       	push   0xc002caa7
c001ac28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac2c:	e8 4f 57 fe ff       	call   c0000380 <memcmp>
c001ac31:	83 c4 10             	add    esp,0x10
c001ac34:	85 c0                	test   eax,eax
c001ac36:	0f 94 c0             	sete   al
c001ac39:	0f b6 c0             	movzx  eax,al
c001ac3c:	85 c0                	test   eax,eax
c001ac3e:	74 06                	je     c001ac46 <HalFindRSDP()+0xb0>
c001ac40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac44:	eb 29                	jmp    c001ac6f <HalFindRSDP()+0xd9>
c001ac46:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001ac4b:	eb c7                	jmp    c001ac14 <HalFindRSDP()+0x7e>
c001ac4d:	83 ec 0c             	sub    esp,0xc
c001ac50:	68 b0 ca 02 c0       	push   0xc002cab0
c001ac55:	e8 22 c3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ac5a:	83 c4 10             	add    esp,0x10
c001ac5d:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001ac62:	83 e0 fb             	and    eax,0xfffffffb
c001ac65:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001ac6a:	b8 00 00 00 00       	mov    eax,0x0
c001ac6f:	83 c4 1c             	add    esp,0x1c
c001ac72:	c3                   	ret    

c001ac73 <HalHandlePageFault(void*, void*)>:
c001ac73:	83 ec 1c             	sub    esp,0x1c
c001ac76:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001ac7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac7d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac80:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001ac86:	0f 20 d2             	mov    edx,cr2
c001ac89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ac8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac91:	83 ec 08             	sub    esp,0x8
c001ac94:	52                   	push   edx
c001ac95:	50                   	push   eax
c001ac96:	e8 15 9e ff ff       	call   c0014ab0 <VAS::tryLoadBackOffDisk(unsigned long)>
c001ac9b:	83 c4 10             	add    esp,0x10
c001ac9e:	83 c4 1c             	add    esp,0x1c
c001aca1:	c3                   	ret    

c001aca2 <HalHandleOpcodeFault(void*, void*)>:
c001aca2:	83 ec 1c             	sub    esp,0x1c
c001aca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acad:	a0 48 64 03 c0       	mov    al,ds:0xc0036448
c001acb2:	0f b6 c0             	movzx  eax,al
c001acb5:	85 c0                	test   eax,eax
c001acb7:	74 25                	je     c001acde <HalHandleOpcodeFault(void*, void*)+0x3c>
c001acb9:	83 ec 0c             	sub    esp,0xc
c001acbc:	68 bc cc 02 c0       	push   0xc002ccbc
c001acc1:	e8 b6 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001acc6:	83 c4 10             	add    esp,0x10
c001acc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001accd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001acd0:	8d 50 19             	lea    edx,[eax+0x19]
c001acd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acd7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001acda:	b0 01                	mov    al,0x1
c001acdc:	eb 02                	jmp    c001ace0 <HalHandleOpcodeFault(void*, void*)+0x3e>
c001acde:	b0 00                	mov    al,0x0
c001ace0:	83 c4 1c             	add    esp,0x1c
c001ace3:	c3                   	ret    

c001ace4 <HalDisplayDebugInfo(void*)>:
c001ace4:	83 ec 2c             	sub    esp,0x2c
c001ace7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aceb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001acef:	0f 20 c0             	mov    eax,cr0
c001acf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001acf6:	0f 20 d0             	mov    eax,cr2
c001acf9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acfd:	0f 20 d8             	mov    eax,cr3
c001ad00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad04:	0f 20 e0             	mov    eax,cr4
c001ad07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad0f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ad12:	83 ec 08             	sub    esp,0x8
c001ad15:	50                   	push   eax
c001ad16:	68 ca ca 02 c0       	push   0xc002caca
c001ad1b:	e8 5c c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad20:	83 c4 10             	add    esp,0x10
c001ad23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad27:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001ad2a:	83 ec 08             	sub    esp,0x8
c001ad2d:	50                   	push   eax
c001ad2e:	68 bb ca 02 c0       	push   0xc002cabb
c001ad33:	e8 44 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad38:	83 c4 10             	add    esp,0x10
c001ad3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad3f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001ad42:	83 ec 08             	sub    esp,0x8
c001ad45:	50                   	push   eax
c001ad46:	68 c6 ca 02 c0       	push   0xc002cac6
c001ad4b:	e8 2c c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad50:	83 c4 10             	add    esp,0x10
c001ad53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad57:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ad5a:	83 ec 08             	sub    esp,0x8
c001ad5d:	50                   	push   eax
c001ad5e:	68 d5 ca 02 c0       	push   0xc002cad5
c001ad63:	e8 14 c2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad68:	83 c4 10             	add    esp,0x10
c001ad6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad6f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001ad72:	83 ec 08             	sub    esp,0x8
c001ad75:	50                   	push   eax
c001ad76:	68 e0 ca 02 c0       	push   0xc002cae0
c001ad7b:	e8 fc c1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad80:	83 c4 10             	add    esp,0x10
c001ad83:	83 ec 08             	sub    esp,0x8
c001ad86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad8a:	68 eb ca 02 c0       	push   0xc002caeb
c001ad8f:	e8 e8 c1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ad94:	83 c4 10             	add    esp,0x10
c001ad97:	83 ec 08             	sub    esp,0x8
c001ad9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad9e:	68 f6 ca 02 c0       	push   0xc002caf6
c001ada3:	e8 d4 c1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ada8:	83 c4 10             	add    esp,0x10
c001adab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adaf:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001adb2:	c1 e0 05             	shl    eax,0x5
c001adb5:	8d 90 e0 fe 02 c0    	lea    edx,[eax-0x3ffd0120]
c001adbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adbf:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001adc2:	83 ec 04             	sub    esp,0x4
c001adc5:	52                   	push   edx
c001adc6:	50                   	push   eax
c001adc7:	68 01 cb 02 c0       	push   0xc002cb01
c001adcc:	e8 ab c1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001add1:	83 c4 10             	add    esp,0x10
c001add4:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001add9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001addf:	83 ec 0c             	sub    esp,0xc
c001ade2:	50                   	push   eax
c001ade3:	e8 83 7f ff ff       	call   c0012d6b <setActiveTerminal(VgaText*)>
c001ade8:	83 c4 10             	add    esp,0x10
c001adeb:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001adf0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001adf6:	83 ec 08             	sub    esp,0x8
c001adf9:	68 10 cb 02 c0       	push   0xc002cb10
c001adfe:	50                   	push   eax
c001adff:	e8 b4 82 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001ae04:	83 c4 10             	add    esp,0x10
c001ae07:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ae0c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ae12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae16:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001ae19:	83 ec 08             	sub    esp,0x8
c001ae1c:	52                   	push   edx
c001ae1d:	50                   	push   eax
c001ae1e:	e8 4f 82 ff ff       	call   c0013072 <VgaText::putx(unsigned int)>
c001ae23:	83 c4 10             	add    esp,0x10
c001ae26:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ae2b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ae31:	83 ec 08             	sub    esp,0x8
c001ae34:	68 1e cb 02 c0       	push   0xc002cb1e
c001ae39:	50                   	push   eax
c001ae3a:	e8 79 82 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001ae3f:	83 c4 10             	add    esp,0x10
c001ae42:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ae47:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ae4d:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001ae52:	8b 12                	mov    edx,DWORD PTR [edx]
c001ae54:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001ae57:	83 c2 0c             	add    edx,0xc
c001ae5a:	83 ec 08             	sub    esp,0x8
c001ae5d:	52                   	push   edx
c001ae5e:	50                   	push   eax
c001ae5f:	e8 54 82 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001ae64:	83 c4 10             	add    esp,0x10
c001ae67:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ae6c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ae72:	83 ec 08             	sub    esp,0x8
c001ae75:	68 27 cb 02 c0       	push   0xc002cb27
c001ae7a:	50                   	push   eax
c001ae7b:	e8 38 82 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001ae80:	83 c4 10             	add    esp,0x10
c001ae83:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001ae88:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001ae8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae92:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001ae95:	83 ec 08             	sub    esp,0x8
c001ae98:	52                   	push   edx
c001ae99:	50                   	push   eax
c001ae9a:	e8 d3 81 ff ff       	call   c0013072 <VgaText::putx(unsigned int)>
c001ae9f:	83 c4 10             	add    esp,0x10
c001aea2:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001aea7:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aead:	83 ec 08             	sub    esp,0x8
c001aeb0:	68 2f cb 02 c0       	push   0xc002cb2f
c001aeb5:	50                   	push   eax
c001aeb6:	e8 fd 81 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001aebb:	83 c4 10             	add    esp,0x10
c001aebe:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001aec3:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aec9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aecd:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001aed0:	83 ec 08             	sub    esp,0x8
c001aed3:	52                   	push   edx
c001aed4:	50                   	push   eax
c001aed5:	e8 98 81 ff ff       	call   c0013072 <VgaText::putx(unsigned int)>
c001aeda:	83 c4 10             	add    esp,0x10
c001aedd:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001aee2:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aee8:	83 ec 08             	sub    esp,0x8
c001aeeb:	68 37 cb 02 c0       	push   0xc002cb37
c001aef0:	50                   	push   eax
c001aef1:	e8 c2 81 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001aef6:	83 c4 10             	add    esp,0x10
c001aef9:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001aefe:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001af04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af08:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001af0b:	83 ec 08             	sub    esp,0x8
c001af0e:	52                   	push   edx
c001af0f:	50                   	push   eax
c001af10:	e8 5d 81 ff ff       	call   c0013072 <VgaText::putx(unsigned int)>
c001af15:	83 c4 10             	add    esp,0x10
c001af18:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001af1d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001af23:	83 ec 08             	sub    esp,0x8
c001af26:	68 3f cb 02 c0       	push   0xc002cb3f
c001af2b:	50                   	push   eax
c001af2c:	e8 87 81 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001af31:	83 c4 10             	add    esp,0x10
c001af34:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001af39:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001af3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af43:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001af46:	83 ec 08             	sub    esp,0x8
c001af49:	52                   	push   edx
c001af4a:	50                   	push   eax
c001af4b:	e8 22 81 ff ff       	call   c0013072 <VgaText::putx(unsigned int)>
c001af50:	83 c4 10             	add    esp,0x10
c001af53:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001af58:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001af5e:	83 ec 08             	sub    esp,0x8
c001af61:	68 47 cb 02 c0       	push   0xc002cb47
c001af66:	50                   	push   eax
c001af67:	e8 4c 81 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001af6c:	83 c4 10             	add    esp,0x10
c001af6f:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001af74:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001af7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af7e:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001af81:	83 ec 08             	sub    esp,0x8
c001af84:	52                   	push   edx
c001af85:	50                   	push   eax
c001af86:	e8 e7 80 ff ff       	call   c0013072 <VgaText::putx(unsigned int)>
c001af8b:	83 c4 10             	add    esp,0x10
c001af8e:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001af93:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001af99:	83 ec 08             	sub    esp,0x8
c001af9c:	68 4f cb 02 c0       	push   0xc002cb4f
c001afa1:	50                   	push   eax
c001afa2:	e8 11 81 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001afa7:	83 c4 10             	add    esp,0x10
c001afaa:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001afaf:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001afb5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001afb9:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001afbc:	83 ec 08             	sub    esp,0x8
c001afbf:	52                   	push   edx
c001afc0:	50                   	push   eax
c001afc1:	e8 ac 80 ff ff       	call   c0013072 <VgaText::putx(unsigned int)>
c001afc6:	83 c4 10             	add    esp,0x10
c001afc9:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001afce:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001afd4:	83 ec 08             	sub    esp,0x8
c001afd7:	68 57 cb 02 c0       	push   0xc002cb57
c001afdc:	50                   	push   eax
c001afdd:	e8 d6 80 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001afe2:	83 c4 10             	add    esp,0x10
c001afe5:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001afea:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001aff0:	83 ec 08             	sub    esp,0x8
c001aff3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aff7:	50                   	push   eax
c001aff8:	e8 75 80 ff ff       	call   c0013072 <VgaText::putx(unsigned int)>
c001affd:	83 c4 10             	add    esp,0x10
c001b000:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001b005:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b00b:	83 ec 08             	sub    esp,0x8
c001b00e:	68 60 cb 02 c0       	push   0xc002cb60
c001b013:	50                   	push   eax
c001b014:	e8 9f 80 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001b019:	83 c4 10             	add    esp,0x10
c001b01c:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001b021:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b027:	83 ec 08             	sub    esp,0x8
c001b02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b02e:	50                   	push   eax
c001b02f:	e8 3e 80 ff ff       	call   c0013072 <VgaText::putx(unsigned int)>
c001b034:	83 c4 10             	add    esp,0x10
c001b037:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001b03c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b042:	83 ec 08             	sub    esp,0x8
c001b045:	68 68 cb 02 c0       	push   0xc002cb68
c001b04a:	50                   	push   eax
c001b04b:	e8 68 80 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001b050:	83 c4 10             	add    esp,0x10
c001b053:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001b058:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001b05e:	83 ec 08             	sub    esp,0x8
c001b061:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b065:	50                   	push   eax
c001b066:	e8 07 80 ff ff       	call   c0013072 <VgaText::putx(unsigned int)>
c001b06b:	83 c4 10             	add    esp,0x10
c001b06e:	fa                   	cli    
c001b06f:	f4                   	hlt    
c001b070:	eb fe                	jmp    c001b070 <HalDisplayDebugInfo(void*)+0x38c>

c001b072 <HalReceivedNMI()>:
c001b072:	83 ec 1c             	sub    esp,0x1c
c001b075:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001b07c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b080:	89 c2                	mov    edx,eax
c001b082:	ec                   	in     al,dx
c001b083:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001b087:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001b08b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b08f:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001b096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b09a:	89 c2                	mov    edx,eax
c001b09c:	ec                   	in     al,dx
c001b09d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b0a1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001b0a5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001b0a9:	83 ec 0c             	sub    esp,0xc
c001b0ac:	68 70 cb 02 c0       	push   0xc002cb70
c001b0b1:	e8 c6 be fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b0b6:	83 c4 10             	add    esp,0x10
c001b0b9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b0be:	83 e0 10             	and    eax,0x10
c001b0c1:	74 10                	je     c001b0d3 <HalReceivedNMI()+0x61>
c001b0c3:	83 ec 0c             	sub    esp,0xc
c001b0c6:	68 81 cb 02 c0       	push   0xc002cb81
c001b0cb:	e8 7c 56 ff ff       	call   c001074c <KePanic(char const*)>
c001b0d0:	83 c4 10             	add    esp,0x10
c001b0d3:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001b0d8:	83 e0 40             	and    eax,0x40
c001b0db:	74 10                	je     c001b0ed <HalReceivedNMI()+0x7b>
c001b0dd:	83 ec 0c             	sub    esp,0xc
c001b0e0:	68 8e cb 02 c0       	push   0xc002cb8e
c001b0e5:	e8 62 56 ff ff       	call   c001074c <KePanic(char const*)>
c001b0ea:	83 c4 10             	add    esp,0x10
c001b0ed:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001b0f1:	0f be c0             	movsx  eax,al
c001b0f4:	85 c0                	test   eax,eax
c001b0f6:	79 10                	jns    c001b108 <HalReceivedNMI()+0x96>
c001b0f8:	83 ec 0c             	sub    esp,0xc
c001b0fb:	68 98 cb 02 c0       	push   0xc002cb98
c001b100:	e8 47 56 ff ff       	call   c001074c <KePanic(char const*)>
c001b105:	83 c4 10             	add    esp,0x10
c001b108:	90                   	nop
c001b109:	83 c4 1c             	add    esp,0x1c
c001b10c:	c3                   	ret    

c001b10d <HalSystemIdle()>:
c001b10d:	56                   	push   esi
c001b10e:	53                   	push   ebx
c001b10f:	83 ec 14             	sub    esp,0x14
c001b112:	a0 50 64 03 c0       	mov    al,ds:0xc0036450
c001b117:	83 e0 10             	and    eax,0x10
c001b11a:	0f b6 c0             	movzx  eax,al
c001b11d:	85 c0                	test   eax,eax
c001b11f:	74 43                	je     c001b164 <HalSystemIdle()+0x57>
c001b121:	83 ec 0c             	sub    esp,0xc
c001b124:	68 e1 00 00 00       	push   0xe1
c001b129:	e8 ba f9 ff ff       	call   c001aae8 <x86rdmsr(unsigned int)>
c001b12e:	83 c4 10             	add    esp,0x10
c001b131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b135:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b139:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b13d:	83 e0 02             	and    eax,0x2
c001b140:	89 c3                	mov    ebx,eax
c001b142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b146:	83 e0 00             	and    eax,0x0
c001b149:	89 c6                	mov    esi,eax
c001b14b:	83 ec 04             	sub    esp,0x4
c001b14e:	56                   	push   esi
c001b14f:	53                   	push   ebx
c001b150:	68 e1 00 00 00       	push   0xe1
c001b155:	e8 cc f9 ff ff       	call   c001ab26 <x86wrmsr(unsigned int, unsigned long long)>
c001b15a:	83 c4 10             	add    esp,0x10
c001b15d:	e8 32 50 fe ff       	call   c0000194 <doTPAUSE>
c001b162:	eb 01                	jmp    c001b165 <HalSystemIdle()+0x58>
c001b164:	f4                   	hlt    
c001b165:	90                   	nop
c001b166:	83 c4 14             	add    esp,0x14
c001b169:	5b                   	pop    ebx
c001b16a:	5e                   	pop    esi
c001b16b:	c3                   	ret    

c001b16c <i386SaveCoprocessor(void*)>:
c001b16c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b170:	83 c0 3f             	add    eax,0x3f
c001b173:	83 e0 c0             	and    eax,0xffffffc0
c001b176:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b17a:	ff 25 10 64 03 c0    	jmp    DWORD PTR ds:0xc0036410

c001b180 <i386LoadCoprocessor(void*)>:
c001b180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b184:	83 c0 3f             	add    eax,0x3f
c001b187:	83 e0 c0             	and    eax,0xffffffc0
c001b18a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b18e:	ff 25 0c 64 03 c0    	jmp    DWORD PTR ds:0xc003640c

c001b194 <x87EmulHandler(regs*, void*)>:
c001b194:	53                   	push   ebx
c001b195:	83 ec 08             	sub    esp,0x8
c001b198:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b19d:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001b1a1:	74 10                	je     c001b1b3 <x87EmulHandler(regs*, void*)+0x1f>
c001b1a3:	83 ec 0c             	sub    esp,0xc
c001b1a6:	68 a5 cb 02 c0       	push   0xc002cba5
c001b1ab:	e8 9c 55 ff ff       	call   c001074c <KePanic(char const*)>
c001b1b0:	83 c4 10             	add    esp,0x10
c001b1b3:	0f 20 c0             	mov    eax,cr0
c001b1b6:	a8 08                	test   al,0x8
c001b1b8:	74 59                	je     c001b213 <x87EmulHandler(regs*, void*)+0x7f>
c001b1ba:	0f 06                	clts   
c001b1bc:	a1 08 64 03 c0       	mov    eax,ds:0xc0036408
c001b1c1:	85 c0                	test   eax,eax
c001b1c3:	74 0e                	je     c001b1d3 <x87EmulHandler(regs*, void*)+0x3f>
c001b1c5:	83 ec 0c             	sub    esp,0xc
c001b1c8:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001b1cb:	e8 9c ff ff ff       	call   c001b16c <i386SaveCoprocessor(void*)>
c001b1d0:	83 c4 10             	add    esp,0x10
c001b1d3:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001b1d9:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001b1dd:	75 12                	jne    c001b1f1 <x87EmulHandler(regs*, void*)+0x5d>
c001b1df:	83 ec 0c             	sub    esp,0xc
c001b1e2:	68 40 02 00 00       	push   0x240
c001b1e7:	e8 0b 51 ff ff       	call   c00102f7 <malloc>
c001b1ec:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001b1ef:	eb 10                	jmp    c001b201 <x87EmulHandler(regs*, void*)+0x6d>
c001b1f1:	83 ec 0c             	sub    esp,0xc
c001b1f4:	a1 08 64 03 c0       	mov    eax,ds:0xc0036408
c001b1f9:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001b1fc:	e8 7f ff ff ff       	call   c001b180 <i386LoadCoprocessor(void*)>
c001b201:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b206:	83 c4 10             	add    esp,0x10
c001b209:	a3 08 64 03 c0       	mov    ds:0xc0036408,eax
c001b20e:	83 c4 08             	add    esp,0x8
c001b211:	5b                   	pop    ebx
c001b212:	c3                   	ret    
c001b213:	83 ec 0c             	sub    esp,0xc
c001b216:	68 b9 cb 02 c0       	push   0xc002cbb9
c001b21b:	e8 5c bd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b220:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001b228:	83 c4 18             	add    esp,0x18
c001b22b:	5b                   	pop    ebx
c001b22c:	e9 b3 c8 ff ff       	jmp    c0017ae4 <KeTerminateCurrentThread(int)>

c001b231 <HalInitialiseCoprocessor()>:
c001b231:	83 ec 10             	sub    esp,0x10
c001b234:	c7 05 08 64 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036408,0x0
c001b23e:	6a 00                	push   0x0
c001b240:	68 94 b1 01 c0       	push   0xc001b194
c001b245:	6a 07                	push   0x7
c001b247:	e8 fb 07 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b24c:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001b251:	83 c4 10             	add    esp,0x10
c001b254:	a8 80                	test   al,0x80
c001b256:	74 29                	je     c001b281 <HalInitialiseCoprocessor()+0x50>
c001b258:	83 ec 0c             	sub    esp,0xc
c001b25b:	68 cf cb 02 c0       	push   0xc002cbcf
c001b260:	e8 17 bd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b265:	c7 05 10 64 03 c0 28 41 02 c0 	mov    DWORD PTR ds:0xc0036410,0xc0024128
c001b26f:	c7 05 0c 64 03 c0 30 41 02 c0 	mov    DWORD PTR ds:0xc003640c,0xc0024130
c001b279:	83 c4 1c             	add    esp,0x1c
c001b27c:	e9 b7 8e 00 00       	jmp    c0024138 <sseInit>
c001b281:	a8 10                	test   al,0x10
c001b283:	74 29                	je     c001b2ae <HalInitialiseCoprocessor()+0x7d>
c001b285:	83 ec 0c             	sub    esp,0xc
c001b288:	68 da cb 02 c0       	push   0xc002cbda
c001b28d:	e8 ea bc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b292:	c7 05 10 64 03 c0 77 41 02 c0 	mov    DWORD PTR ds:0xc0036410,0xc0024177
c001b29c:	c7 05 0c 64 03 c0 7e 41 02 c0 	mov    DWORD PTR ds:0xc003640c,0xc002417e
c001b2a6:	83 c4 1c             	add    esp,0x1c
c001b2a9:	e9 d7 8e 00 00       	jmp    c0024185 <x87Init>
c001b2ae:	c7 05 10 64 03 c0 aa 99 01 c0 	mov    DWORD PTR ds:0xc0036410,0xc00199aa
c001b2b8:	c7 05 0c 64 03 c0 aa 99 01 c0 	mov    DWORD PTR ds:0xc003640c,0xc00199aa
c001b2c2:	0f 20 c0             	mov    eax,cr0
c001b2c5:	83 c8 04             	or     eax,0x4
c001b2c8:	0f 22 c0             	mov    cr0,eax
c001b2cb:	83 c4 0c             	add    esp,0xc
c001b2ce:	c3                   	ret    

c001b2cf <HalPanic(char const*)>:
c001b2cf:	53                   	push   ebx
c001b2d0:	83 ec 10             	sub    esp,0x10
c001b2d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b2d7:	fa                   	cli    
c001b2d8:	53                   	push   ebx
c001b2d9:	68 e5 cb 02 c0       	push   0xc002cbe5
c001b2de:	e8 99 bc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b2e3:	a1 04 64 03 c0       	mov    eax,ds:0xc0036404
c001b2e8:	83 c4 10             	add    esp,0x10
c001b2eb:	85 c0                	test   eax,eax
c001b2ed:	74 09                	je     c001b2f8 <HalPanic(char const*)+0x29>
c001b2ef:	83 ec 0c             	sub    esp,0xc
c001b2f2:	53                   	push   ebx
c001b2f3:	ff d0                	call   eax
c001b2f5:	83 c4 10             	add    esp,0x10
c001b2f8:	a1 f4 61 03 c0       	mov    eax,ds:0xc00361f4
c001b2fd:	85 c0                	test   eax,eax
c001b2ff:	0f 84 dc 00 00 00    	je     c001b3e1 <HalPanic(char const*)+0x112>
c001b305:	52                   	push   edx
c001b306:	6a 01                	push   0x1
c001b308:	6a 0f                	push   0xf
c001b30a:	50                   	push   eax
c001b30b:	e8 9a 78 ff ff       	call   c0012baa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b310:	59                   	pop    ecx
c001b311:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b317:	e8 9a 7a ff ff       	call   c0012db6 <VgaText::clearScreen()>
c001b31c:	58                   	pop    eax
c001b31d:	5a                   	pop    edx
c001b31e:	68 b8 bb 02 c0       	push   0xc002bbb8
c001b323:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b329:	e8 b4 78 ff ff       	call   c0012be2 <VgaText::setTitle(char*)>
c001b32e:	83 c4 0c             	add    esp,0xc
c001b331:	6a 01                	push   0x1
c001b333:	6a 0f                	push   0xf
c001b335:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b33b:	e8 6a 78 ff ff       	call   c0012baa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b340:	59                   	pop    ecx
c001b341:	58                   	pop    eax
c001b342:	68 fe cb 02 c0       	push   0xc002cbfe
c001b347:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b34d:	e8 66 7d ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001b352:	83 c4 0c             	add    esp,0xc
c001b355:	6a 0f                	push   0xf
c001b357:	6a 01                	push   0x1
c001b359:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b35f:	e8 46 78 ff ff       	call   c0012baa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b364:	58                   	pop    eax
c001b365:	5a                   	pop    edx
c001b366:	68 07 cc 02 c0       	push   0xc002cc07
c001b36b:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b371:	e8 42 7d ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001b376:	83 c4 0c             	add    esp,0xc
c001b379:	6a 01                	push   0x1
c001b37b:	6a 0f                	push   0xf
c001b37d:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b383:	e8 22 78 ff ff       	call   c0012baa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001b388:	59                   	pop    ecx
c001b389:	58                   	pop    eax
c001b38a:	68 f6 a6 02 c0       	push   0xc002a6f6
c001b38f:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b395:	e8 1e 7d ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001b39a:	58                   	pop    eax
c001b39b:	5a                   	pop    edx
c001b39c:	68 14 cc 02 c0       	push   0xc002cc14
c001b3a1:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b3a7:	e8 0c 7d ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001b3ac:	59                   	pop    ecx
c001b3ad:	58                   	pop    eax
c001b3ae:	68 4e cc 02 c0       	push   0xc002cc4e
c001b3b3:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b3b9:	e8 fa 7c ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001b3be:	58                   	pop    eax
c001b3bf:	5a                   	pop    edx
c001b3c0:	53                   	push   ebx
c001b3c1:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b3c7:	e8 ec 7c ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001b3cc:	59                   	pop    ecx
c001b3cd:	5b                   	pop    ebx
c001b3ce:	68 f6 a6 02 c0       	push   0xc002a6f6
c001b3d3:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c001b3d9:	e8 da 7c ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001b3de:	83 c4 10             	add    esp,0x10
c001b3e1:	eb fe                	jmp    c001b3e1 <HalPanic(char const*)+0x112>

c001b3e3 <HalQueryPerformanceCounter()>:
c001b3e3:	31 c0                	xor    eax,eax
c001b3e5:	31 d2                	xor    edx,edx
c001b3e7:	f6 05 4e 64 03 c0 08 	test   BYTE PTR ds:0xc003644e,0x8
c001b3ee:	75 02                	jne    c001b3f2 <HalQueryPerformanceCounter()+0xf>
c001b3f0:	0f 31                	rdtsc  
c001b3f2:	c3                   	ret    

c001b3f3 <HalInitialise()>:
c001b3f3:	53                   	push   ebx
c001b3f4:	83 ec 08             	sub    esp,0x8
c001b3f7:	e8 c4 e8 ff ff       	call   c0019cc0 <HalDetectFeatures()>
c001b3fc:	83 ec 0c             	sub    esp,0xc
c001b3ff:	68 ab 99 01 c0       	push   0xc00199ab
c001b404:	e8 85 5c ff ff       	call   c001108e <KeRegisterRestartHandler(void (*)())>
c001b409:	c7 04 24 b6 99 01 c0 	mov    DWORD PTR [esp],0xc00199b6
c001b410:	e8 6f 5c ff ff       	call   c0011084 <KeRegisterShutdownHandler(void (*)())>
c001b415:	c7 04 24 b7 99 01 c0 	mov    DWORD PTR [esp],0xc00199b7
c001b41c:	e8 77 5c ff ff       	call   c0011098 <KeRegisterSleepHandler(void (*)())>
c001b421:	e8 12 1a ff ff       	call   c000ce38 <scanMADT()>
c001b426:	83 c4 10             	add    esp,0x10
c001b429:	80 3d 40 5e 03 c0 00 	cmp    BYTE PTR ds:0xc0035e40,0x0
c001b430:	75 0d                	jne    c001b43f <HalInitialise()+0x4c>
c001b432:	a0 4c 64 03 c0       	mov    al,ds:0xc003644c
c001b437:	83 e0 fe             	and    eax,0xfffffffe
c001b43a:	a2 4c 64 03 c0       	mov    ds:0xc003644c,al
c001b43f:	e8 e0 08 00 00       	call   c001bd24 <picOpen()>
c001b444:	f6 05 4c 64 03 c0 01 	test   BYTE PTR ds:0xc003644c,0x1
c001b44b:	74 0a                	je     c001b457 <HalInitialise()+0x64>
c001b44d:	e8 22 08 00 00       	call   c001bc74 <picDisable()>
c001b452:	e8 5b e1 ff ff       	call   c00195b2 <apicOpen()>
c001b457:	bb 0f 00 00 00       	mov    ebx,0xf
c001b45c:	50                   	push   eax
c001b45d:	6a 00                	push   0x0
c001b45f:	68 34 f3 00 c0       	push   0xc000f334
c001b464:	6a 02                	push   0x2
c001b466:	e8 dc 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b46b:	83 c4 0c             	add    esp,0xc
c001b46e:	6a 00                	push   0x0
c001b470:	68 ac f2 00 c0       	push   0xc000f2ac
c001b475:	6a 06                	push   0x6
c001b477:	e8 cb 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b47c:	83 c4 0c             	add    esp,0xc
c001b47f:	6a 00                	push   0x0
c001b481:	68 44 f3 00 c0       	push   0xc000f344
c001b486:	6a 08                	push   0x8
c001b488:	e8 ba 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b48d:	83 c4 0c             	add    esp,0xc
c001b490:	6a 00                	push   0x0
c001b492:	68 04 f2 00 c0       	push   0xc000f204
c001b497:	6a 0d                	push   0xd
c001b499:	e8 a9 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b49e:	83 c4 0c             	add    esp,0xc
c001b4a1:	6a 00                	push   0x0
c001b4a3:	68 58 f2 00 c0       	push   0xc000f258
c001b4a8:	6a 0e                	push   0xe
c001b4aa:	e8 98 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b4af:	83 c4 0c             	add    esp,0xc
c001b4b2:	6a 00                	push   0x0
c001b4b4:	68 00 f3 00 c0       	push   0xc000f300
c001b4b9:	6a 00                	push   0x0
c001b4bb:	e8 87 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b4c0:	83 c4 0c             	add    esp,0xc
c001b4c3:	6a 00                	push   0x0
c001b4c5:	68 00 f3 00 c0       	push   0xc000f300
c001b4ca:	6a 01                	push   0x1
c001b4cc:	e8 76 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b4d1:	83 c4 0c             	add    esp,0xc
c001b4d4:	6a 00                	push   0x0
c001b4d6:	68 00 f3 00 c0       	push   0xc000f300
c001b4db:	6a 03                	push   0x3
c001b4dd:	e8 65 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b4e2:	83 c4 0c             	add    esp,0xc
c001b4e5:	6a 00                	push   0x0
c001b4e7:	68 00 f3 00 c0       	push   0xc000f300
c001b4ec:	6a 04                	push   0x4
c001b4ee:	e8 54 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b4f3:	83 c4 0c             	add    esp,0xc
c001b4f6:	6a 00                	push   0x0
c001b4f8:	68 00 f3 00 c0       	push   0xc000f300
c001b4fd:	6a 05                	push   0x5
c001b4ff:	e8 43 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b504:	83 c4 0c             	add    esp,0xc
c001b507:	6a 00                	push   0x0
c001b509:	68 00 f3 00 c0       	push   0xc000f300
c001b50e:	6a 00                	push   0x0
c001b510:	e8 32 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b515:	83 c4 0c             	add    esp,0xc
c001b518:	6a 00                	push   0x0
c001b51a:	68 00 f3 00 c0       	push   0xc000f300
c001b51f:	6a 01                	push   0x1
c001b521:	e8 21 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b526:	83 c4 0c             	add    esp,0xc
c001b529:	6a 00                	push   0x0
c001b52b:	68 00 f3 00 c0       	push   0xc000f300
c001b530:	6a 09                	push   0x9
c001b532:	e8 10 05 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b537:	83 c4 0c             	add    esp,0xc
c001b53a:	6a 00                	push   0x0
c001b53c:	68 00 f3 00 c0       	push   0xc000f300
c001b541:	6a 0a                	push   0xa
c001b543:	e8 ff 04 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b548:	83 c4 0c             	add    esp,0xc
c001b54b:	6a 00                	push   0x0
c001b54d:	68 00 f3 00 c0       	push   0xc000f300
c001b552:	6a 0b                	push   0xb
c001b554:	e8 ee 04 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b559:	83 c4 10             	add    esp,0x10
c001b55c:	50                   	push   eax
c001b55d:	6a 00                	push   0x0
c001b55f:	68 00 f3 00 c0       	push   0xc000f300
c001b564:	53                   	push   ebx
c001b565:	43                   	inc    ebx
c001b566:	e8 dc 04 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b56b:	83 c4 10             	add    esp,0x10
c001b56e:	83 fb 1e             	cmp    ebx,0x1e
c001b571:	75 e9                	jne    c001b55c <HalInitialise()+0x169>
c001b573:	50                   	push   eax
c001b574:	6a 00                	push   0x0
c001b576:	68 44 2a 01 c0       	push   0xc0012a44
c001b57b:	6a 60                	push   0x60
c001b57d:	e8 c5 04 00 00       	call   c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001b582:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001b587:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b591:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001b598:	e8 5a 4d ff ff       	call   c00102f7 <malloc>
c001b59d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5a0:	89 c3                	mov    ebx,eax
c001b5a2:	e8 eb 0e 00 00       	call   c001c492 <RTC::RTC()>
c001b5a7:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001b5b1:	5a                   	pop    edx
c001b5b2:	59                   	pop    ecx
c001b5b3:	53                   	push   ebx
c001b5b4:	ff 35 08 61 03 c0    	push   DWORD PTR ds:0xc0036108
c001b5ba:	e8 c1 ee fe ff       	call   c000a480 <Device::addChild(Device*)>
c001b5bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5c1:	6a 00                	push   0x0
c001b5c3:	6a 00                	push   0x0
c001b5c5:	6a 00                	push   0x0
c001b5c7:	53                   	push   ebx
c001b5c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5cb:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001b5d0:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001b5d6:	83 c4 28             	add    esp,0x28
c001b5d9:	5b                   	pop    ebx
c001b5da:	c3                   	ret    

c001b5db <HalMakeBeep(int)>:
c001b5db:	53                   	push   ebx
c001b5dc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5e0:	85 db                	test   ebx,ebx
c001b5e2:	75 07                	jne    c001b5eb <HalMakeBeep(int)+0x10>
c001b5e4:	e4 61                	in     al,0x61
c001b5e6:	83 e0 fc             	and    eax,0xfffffffc
c001b5e9:	eb 26                	jmp    c001b611 <HalMakeBeep(int)+0x36>
c001b5eb:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b5f0:	99                   	cdq    
c001b5f1:	f7 fb                	idiv   ebx
c001b5f3:	89 c1                	mov    ecx,eax
c001b5f5:	b0 b6                	mov    al,0xb6
c001b5f7:	e6 43                	out    0x43,al
c001b5f9:	88 c8                	mov    al,cl
c001b5fb:	e6 42                	out    0x42,al
c001b5fd:	89 c8                	mov    eax,ecx
c001b5ff:	c1 e8 08             	shr    eax,0x8
c001b602:	e6 42                	out    0x42,al
c001b604:	e4 61                	in     al,0x61
c001b606:	89 c2                	mov    edx,eax
c001b608:	83 ca 03             	or     edx,0x3
c001b60b:	38 d0                	cmp    al,dl
c001b60d:	74 04                	je     c001b613 <HalMakeBeep(int)+0x38>
c001b60f:	88 d0                	mov    al,dl
c001b611:	e6 61                	out    0x61,al
c001b613:	5b                   	pop    ebx
c001b614:	c3                   	ret    

c001b615 <HalGetRand()>:
c001b615:	31 c0                	xor    eax,eax
c001b617:	c3                   	ret    

c001b618 <HalEndOfInterrupt(int)>:
c001b618:	f6 05 4c 64 03 c0 01 	test   BYTE PTR ds:0xc003644c,0x1
c001b61f:	74 1d                	je     c001b63e <HalEndOfInterrupt(int)+0x26>
c001b621:	83 ec 18             	sub    esp,0x18
c001b624:	6a 1b                	push   0x1b
c001b626:	e8 bd f4 ff ff       	call   c001aae8 <x86rdmsr(unsigned int)>
c001b62b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b630:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001b63a:	83 c4 1c             	add    esp,0x1c
c001b63d:	c3                   	ret    
c001b63e:	e9 65 08 00 00       	jmp    c001bea8 <picEOI(int)>
c001b643:	90                   	nop

c001b644 <CPU::CPU()>:
c001b644:	83 ec 0c             	sub    esp,0xc
c001b647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b64b:	83 ec 08             	sub    esp,0x8
c001b64e:	68 d6 c9 02 c0       	push   0xc002c9d6
c001b653:	50                   	push   eax
c001b654:	e8 89 ef fe ff       	call   c000a5e2 <Device::Device(char const*)>
c001b659:	83 c4 10             	add    esp,0x10
c001b65c:	ba e8 cc 02 c0       	mov    edx,0xc002cce8
c001b661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b665:	89 10                	mov    DWORD PTR [eax],edx
c001b667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b66b:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b679:	05 64 01 00 00       	add    eax,0x164
c001b67e:	83 ec 0c             	sub    esp,0xc
c001b681:	50                   	push   eax
c001b682:	e8 0f 3d ff ff       	call   c000f396 <GDT::GDT()>
c001b687:	83 c4 10             	add    esp,0x10
c001b68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b68e:	05 68 09 00 00       	add    eax,0x968
c001b693:	83 ec 0c             	sub    esp,0xc
c001b696:	50                   	push   eax
c001b697:	e8 4c 3f ff ff       	call   c000f5e8 <IDT::IDT()>
c001b69c:	83 c4 10             	add    esp,0x10
c001b69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6a3:	05 68 11 00 00       	add    eax,0x1168
c001b6a8:	83 ec 0c             	sub    esp,0xc
c001b6ab:	50                   	push   eax
c001b6ac:	e8 e3 7e ff ff       	call   c0013594 <TSS::TSS()>
c001b6b1:	83 c4 10             	add    esp,0x10
c001b6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b8:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001b6c2:	90                   	nop
c001b6c3:	83 c4 0c             	add    esp,0xc
c001b6c6:	c3                   	ret    
c001b6c7:	90                   	nop

c001b6c8 <CPU::setupSMEP()>:
c001b6c8:	0f 20 e0             	mov    eax,cr4
c001b6cb:	0d 00 00 10 00       	or     eax,0x100000
c001b6d0:	0f 22 e0             	mov    cr4,eax
c001b6d3:	c3                   	ret    

c001b6d4 <CPU::setupUMIP()>:
c001b6d4:	0f 20 e0             	mov    eax,cr4
c001b6d7:	80 cc 08             	or     ah,0x8
c001b6da:	0f 22 e0             	mov    cr4,eax
c001b6dd:	c3                   	ret    

c001b6de <CPU::setupTSC()>:
c001b6de:	0f 20 e0             	mov    eax,cr4
c001b6e1:	83 c8 04             	or     eax,0x4
c001b6e4:	0f 22 e0             	mov    cr4,eax
c001b6e7:	c3                   	ret    

c001b6e8 <CPU::setupLargePages()>:
c001b6e8:	0f 20 e0             	mov    eax,cr4
c001b6eb:	83 c8 10             	or     eax,0x10
c001b6ee:	0f 22 e0             	mov    cr4,eax
c001b6f1:	c3                   	ret    

c001b6f2 <CPU::setupPAT()>:
c001b6f2:	f6 05 4c 64 03 c0 08 	test   BYTE PTR ds:0xc003644c,0x8
c001b6f9:	74 28                	je     c001b723 <CPU::setupPAT()+0x31>
c001b6fb:	53                   	push   ebx
c001b6fc:	83 ec 14             	sub    esp,0x14
c001b6ff:	68 77 02 00 00       	push   0x277
c001b704:	e8 df f3 ff ff       	call   c001aae8 <x86rdmsr(unsigned int)>
c001b709:	83 c4 0c             	add    esp,0xc
c001b70c:	83 e2 f8             	and    edx,0xfffffff8
c001b70f:	83 ca 01             	or     edx,0x1
c001b712:	52                   	push   edx
c001b713:	50                   	push   eax
c001b714:	68 77 02 00 00       	push   0x277
c001b719:	e8 08 f4 ff ff       	call   c001ab26 <x86wrmsr(unsigned int, unsigned long long)>
c001b71e:	83 c4 18             	add    esp,0x18
c001b721:	5b                   	pop    ebx
c001b722:	c3                   	ret    
c001b723:	c3                   	ret    

c001b724 <CPU::setupMTRR()>:
c001b724:	c3                   	ret    
c001b725:	90                   	nop

c001b726 <CPU::setupGlobalPages()>:
c001b726:	0f 20 e0             	mov    eax,cr4
c001b729:	0c 80                	or     al,0x80
c001b72b:	0f 22 e0             	mov    cr4,eax
c001b72e:	c3                   	ret    
c001b72f:	90                   	nop

c001b730 <CPU::allowUsermodeDataAccess()>:
c001b730:	f6 05 4f 64 03 c0 40 	test   BYTE PTR ds:0xc003644f,0x40
c001b737:	74 03                	je     c001b73c <CPU::allowUsermodeDataAccess()+0xc>
c001b739:	0f 01 cb             	stac   
c001b73c:	c3                   	ret    
c001b73d:	90                   	nop

c001b73e <CPU::prohibitUsermodeDataAccess()>:
c001b73e:	f6 05 4f 64 03 c0 40 	test   BYTE PTR ds:0xc003644f,0x40
c001b745:	74 03                	je     c001b74a <CPU::prohibitUsermodeDataAccess()+0xc>
c001b747:	0f 01 ca             	clac   
c001b74a:	c3                   	ret    
c001b74b:	90                   	nop

c001b74c <CPU::setupSMAP()>:
c001b74c:	0f 20 e0             	mov    eax,cr4
c001b74f:	0d 00 00 20 00       	or     eax,0x200000
c001b754:	0f 22 e0             	mov    cr4,eax
c001b757:	eb e5                	jmp    c001b73e <CPU::prohibitUsermodeDataAccess()>
c001b759:	90                   	nop

c001b75a <CPU::setupFeatures()>:
c001b75a:	53                   	push   ebx
c001b75b:	83 ec 08             	sub    esp,0x8
c001b75e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b762:	f6 05 4f 64 03 c0 20 	test   BYTE PTR ds:0xc003644f,0x20
c001b769:	74 18                	je     c001b783 <CPU::setupFeatures()+0x29>
c001b76b:	83 ec 0c             	sub    esp,0xc
c001b76e:	68 59 cc 02 c0       	push   0xc002cc59
c001b773:	e8 04 b8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b778:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b77b:	e8 54 ff ff ff       	call   c001b6d4 <CPU::setupUMIP()>
c001b780:	83 c4 10             	add    esp,0x10
c001b783:	f6 05 4e 64 03 c0 08 	test   BYTE PTR ds:0xc003644e,0x8
c001b78a:	74 18                	je     c001b7a4 <CPU::setupFeatures()+0x4a>
c001b78c:	83 ec 0c             	sub    esp,0xc
c001b78f:	68 63 cc 02 c0       	push   0xc002cc63
c001b794:	e8 e3 b7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b799:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b79c:	e8 3d ff ff ff       	call   c001b6de <CPU::setupTSC()>
c001b7a1:	83 c4 10             	add    esp,0x10
c001b7a4:	f6 05 4e 64 03 c0 20 	test   BYTE PTR ds:0xc003644e,0x20
c001b7ab:	74 18                	je     c001b7c5 <CPU::setupFeatures()+0x6b>
c001b7ad:	83 ec 0c             	sub    esp,0xc
c001b7b0:	68 6c cc 02 c0       	push   0xc002cc6c
c001b7b5:	e8 c2 b7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b7ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7bd:	e8 26 ff ff ff       	call   c001b6e8 <CPU::setupLargePages()>
c001b7c2:	83 c4 10             	add    esp,0x10
c001b7c5:	f6 05 4e 64 03 c0 40 	test   BYTE PTR ds:0xc003644e,0x40
c001b7cc:	74 18                	je     c001b7e6 <CPU::setupFeatures()+0x8c>
c001b7ce:	83 ec 0c             	sub    esp,0xc
c001b7d1:	68 75 cc 02 c0       	push   0xc002cc75
c001b7d6:	e8 a1 b7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b7db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7de:	e8 43 ff ff ff       	call   c001b726 <CPU::setupGlobalPages()>
c001b7e3:	83 c4 10             	add    esp,0x10
c001b7e6:	f6 05 4e 64 03 c0 80 	test   BYTE PTR ds:0xc003644e,0x80
c001b7ed:	74 18                	je     c001b807 <CPU::setupFeatures()+0xad>
c001b7ef:	83 ec 0c             	sub    esp,0xc
c001b7f2:	68 87 cc 02 c0       	push   0xc002cc87
c001b7f7:	e8 80 b7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001b7fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7ff:	e8 ee fe ff ff       	call   c001b6f2 <CPU::setupPAT()>
c001b804:	83 c4 10             	add    esp,0x10
c001b807:	f6 05 50 64 03 c0 04 	test   BYTE PTR ds:0xc0036450,0x4
c001b80e:	74 11                	je     c001b821 <CPU::setupFeatures()+0xc7>
c001b810:	c7 44 24 10 90 cc 02 c0 	mov    DWORD PTR [esp+0x10],0xc002cc90
c001b818:	83 c4 08             	add    esp,0x8
c001b81b:	5b                   	pop    ebx
c001b81c:	e9 5b b7 fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001b821:	83 c4 08             	add    esp,0x8
c001b824:	5b                   	pop    ebx
c001b825:	c3                   	ret    

c001b826 <CPU::open(int, int, void*)>:
c001b826:	55                   	push   ebp
c001b827:	57                   	push   edi
c001b828:	56                   	push   esi
c001b829:	53                   	push   ebx
c001b82a:	83 ec 18             	sub    esp,0x18
c001b82d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b831:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b835:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b839:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001b83f:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001b845:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001b84b:	50                   	push   eax
c001b84c:	e8 a7 3b ff ff       	call   c000f3f8 <GDT::setup()>
c001b851:	83 c4 0c             	add    esp,0xc
c001b854:	6a 00                	push   0x0
c001b856:	68 ef be ad de       	push   0xdeadbeef
c001b85b:	55                   	push   ebp
c001b85c:	e8 77 7d ff ff       	call   c00135d8 <TSS::setup(unsigned long, unsigned long)>
c001b861:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b864:	e8 4f 7d ff ff       	call   c00135b8 <TSS::flush()>
c001b869:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001b86f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b872:	e8 e7 3d ff ff       	call   c000f65e <IDT::setup()>
c001b877:	b8 00 04 00 00       	mov    eax,0x400
c001b87c:	0f 23 f8             	mov    dr7,eax
c001b87f:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001b889:	e8 b2 50 ff ff       	call   c0010940 <Phys::allocatePage()>
c001b88e:	83 c4 10             	add    esp,0x10
c001b891:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b897:	85 f6                	test   esi,esi
c001b899:	89 38                	mov    DWORD PTR [eax],edi
c001b89b:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b8a1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001b8a4:	74 10                	je     c001b8b6 <CPU::open(int, int, void*)+0x90>
c001b8a6:	50                   	push   eax
c001b8a7:	50                   	push   eax
c001b8a8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b8ae:	56                   	push   esi
c001b8af:	e8 d0 86 ff ff       	call   c0013f84 <VAS::setCPUSpecific(unsigned long)>
c001b8b4:	eb 0d                	jmp    c001b8c3 <CPU::open(int, int, void*)+0x9d>
c001b8b6:	83 ec 0c             	sub    esp,0xc
c001b8b9:	68 9a cc 02 c0       	push   0xc002cc9a
c001b8be:	e8 89 4e ff ff       	call   c001074c <KePanic(char const*)>
c001b8c3:	83 c4 10             	add    esp,0x10
c001b8c6:	83 ec 0c             	sub    esp,0xc
c001b8c9:	68 a8 cc 02 c0       	push   0xc002cca8
c001b8ce:	e8 86 24 ff ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c001b8d3:	e8 1b fb ff ff       	call   c001b3f3 <HalInitialise()>
c001b8d8:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001b8df:	e8 28 24 ff ff       	call   c000dd0c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b8e4:	0f b6 c0             	movzx  eax,al
c001b8e7:	83 f8 01             	cmp    eax,0x1
c001b8ea:	19 c0                	sbb    eax,eax
c001b8ec:	25 aa 00 00 00       	and    eax,0xaa
c001b8f1:	83 c0 1e             	add    eax,0x1e
c001b8f4:	89 04 24             	mov    DWORD PTR [esp],eax
c001b8f7:	e8 e9 01 ff ff       	call   c000bae5 <setupTimer(int)>
c001b8fc:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001b902:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001b909:	e8 fe 23 ff ff       	call   c000dd0c <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001b90e:	83 c4 10             	add    esp,0x10
c001b911:	84 c0                	test   al,al
c001b913:	74 0c                	je     c001b921 <CPU::open(int, int, void*)+0xfb>
c001b915:	83 ec 0c             	sub    esp,0xc
c001b918:	53                   	push   ebx
c001b919:	e8 3c fe ff ff       	call   c001b75a <CPU::setupFeatures()>
c001b91e:	83 c4 10             	add    esp,0x10
c001b921:	83 c4 0c             	add    esp,0xc
c001b924:	31 c0                	xor    eax,eax
c001b926:	5b                   	pop    ebx
c001b927:	5e                   	pop    esi
c001b928:	5f                   	pop    edi
c001b929:	5d                   	pop    ebp
c001b92a:	c3                   	ret    

c001b92b <convertLegacyIRQNumber(int)>:
c001b92b:	83 ec 0c             	sub    esp,0xc
c001b92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b932:	f6 05 4c 64 03 c0 01 	test   BYTE PTR ds:0xc003644c,0x1
c001b939:	74 0c                	je     c001b947 <convertLegacyIRQNumber(int)+0x1c>
c001b93b:	83 f8 0f             	cmp    eax,0xf
c001b93e:	7f 0b                	jg     c001b94b <convertLegacyIRQNumber(int)+0x20>
c001b940:	0f b6 80 e8 f6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0918]
c001b947:	83 c4 0c             	add    esp,0xc
c001b94a:	c3                   	ret    
c001b94b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b94f:	83 ec 0c             	sub    esp,0xc
c001b952:	68 0c cd 02 c0       	push   0xc002cd0c
c001b957:	e8 f0 4d ff ff       	call   c001074c <KePanic(char const*)>
c001b95c:	83 c4 10             	add    esp,0x10
c001b95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b963:	83 c4 0c             	add    esp,0xc
c001b966:	c3                   	ret    

c001b967 <KeSetupInterrupts()>:
c001b967:	31 c0                	xor    eax,eax
c001b969:	c7 80 60 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba0],0x0
c001b973:	c7 80 60 64 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc9ba0],0x0
c001b97d:	c7 80 64 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8b9c],0x0
c001b987:	c7 80 64 64 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc9b9c],0x0
c001b991:	c7 80 68 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8b98],0x0
c001b99b:	c7 80 68 64 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc9b98],0x0
c001b9a5:	c7 80 6c 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8b94],0x0
c001b9af:	c7 80 6c 64 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc9b94],0x0
c001b9b9:	83 c0 10             	add    eax,0x10
c001b9bc:	3d 00 10 00 00       	cmp    eax,0x1000
c001b9c1:	75 a6                	jne    c001b969 <KeSetupInterrupts()+0x2>
c001b9c3:	c3                   	ret    

c001b9c4 <int_handler>:
c001b9c4:	55                   	push   ebp
c001b9c5:	57                   	push   edi
c001b9c6:	56                   	push   esi
c001b9c7:	53                   	push   ebx
c001b9c8:	83 ec 0c             	sub    esp,0xc
c001b9cb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b9cf:	eb 02                	jmp    c001b9d3 <int_handler+0xf>
c001b9d1:	fa                   	cli    
c001b9d2:	f4                   	hlt    
c001b9d3:	e8 6e 4d ff ff       	call   c0010746 <KeIsKernelInPanic()>
c001b9d8:	84 c0                	test   al,al
c001b9da:	75 f5                	jne    c001b9d1 <int_handler+0xd>
c001b9dc:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b9df:	8d 46 e0             	lea    eax,[esi-0x20]
c001b9e2:	83 f8 17             	cmp    eax,0x17
c001b9e5:	76 40                	jbe    c001ba27 <int_handler+0x63>
c001b9e7:	c1 e6 04             	shl    esi,0x4
c001b9ea:	31 db                	xor    ebx,ebx
c001b9ec:	8d ae 60 74 03 c0    	lea    ebp,[esi-0x3ffc8ba0]
c001b9f2:	81 c6 60 64 03 c0    	add    esi,0xc0036460
c001b9f8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b9fc:	85 c0                	test   eax,eax
c001b9fe:	74 13                	je     c001ba13 <int_handler+0x4f>
c001ba00:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001ba03:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001ba07:	74 2c                	je     c001ba35 <int_handler+0x71>
c001ba09:	83 ec 08             	sub    esp,0x8
c001ba0c:	52                   	push   edx
c001ba0d:	57                   	push   edi
c001ba0e:	ff d0                	call   eax
c001ba10:	83 c4 10             	add    esp,0x10
c001ba13:	83 c3 01             	add    ebx,0x1
c001ba16:	83 fb 04             	cmp    ebx,0x4
c001ba19:	75 dd                	jne    c001b9f8 <int_handler+0x34>
c001ba1b:	83 c4 0c             	add    esp,0xc
c001ba1e:	31 c0                	xor    eax,eax
c001ba20:	5b                   	pop    ebx
c001ba21:	31 d2                	xor    edx,edx
c001ba23:	5e                   	pop    esi
c001ba24:	5f                   	pop    edi
c001ba25:	5d                   	pop    ebp
c001ba26:	c3                   	ret    
c001ba27:	83 ec 0c             	sub    esp,0xc
c001ba2a:	50                   	push   eax
c001ba2b:	e8 e8 fb ff ff       	call   c001b618 <HalEndOfInterrupt(int)>
c001ba30:	83 c4 10             	add    esp,0x10
c001ba33:	eb b2                	jmp    c001b9e7 <int_handler+0x23>
c001ba35:	83 ec 08             	sub    esp,0x8
c001ba38:	52                   	push   edx
c001ba39:	57                   	push   edi
c001ba3a:	ff d0                	call   eax
c001ba3c:	83 c4 10             	add    esp,0x10
c001ba3f:	83 c4 0c             	add    esp,0xc
c001ba42:	5b                   	pop    ebx
c001ba43:	5e                   	pop    esi
c001ba44:	5f                   	pop    edi
c001ba45:	5d                   	pop    ebp
c001ba46:	c3                   	ret    

c001ba47 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001ba47:	56                   	push   esi
c001ba48:	31 c0                	xor    eax,eax
c001ba4a:	53                   	push   ebx
c001ba4b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ba4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba53:	89 ca                	mov    edx,ecx
c001ba55:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ba59:	c1 e2 04             	shl    edx,0x4
c001ba5c:	83 bc 82 60 74 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc8ba0],0x0
c001ba64:	74 17                	je     c001ba7d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001ba66:	83 c0 01             	add    eax,0x1
c001ba69:	83 f8 04             	cmp    eax,0x4
c001ba6c:	75 ee                	jne    c001ba5c <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001ba6e:	c7 44 24 0c 6d cd 02 c0 	mov    DWORD PTR [esp+0xc],0xc002cd6d
c001ba76:	5b                   	pop    ebx
c001ba77:	5e                   	pop    esi
c001ba78:	e9 cf 4c ff ff       	jmp    c001074c <KePanic(char const*)>
c001ba7d:	8d 04 88             	lea    eax,[eax+ecx*4]
c001ba80:	89 1c 85 60 74 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8ba0],ebx
c001ba87:	89 34 85 60 64 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9ba0],esi
c001ba8e:	5b                   	pop    ebx
c001ba8f:	5e                   	pop    esi
c001ba90:	c3                   	ret    

c001ba91 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001ba91:	57                   	push   edi
c001ba92:	f6 05 4c 64 03 c0 01 	test   BYTE PTR ds:0xc003644c,0x1
c001ba99:	56                   	push   esi
c001ba9a:	53                   	push   ebx
c001ba9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001baa3:	74 54                	je     c001baf9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001baa5:	89 c7                	mov    edi,eax
c001baa7:	84 c0                	test   al,al
c001baa9:	74 1d                	je     c001bac8 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001baab:	83 fe 0f             	cmp    esi,0xf
c001baae:	0f 8f d5 00 00 00    	jg     c001bb89 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001bab4:	0f b6 b6 e8 f6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd0918]
c001babb:	0f b7 bc 36 20 5e 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffca1e0]
c001bac3:	d1 ef                	shr    edi,1
c001bac5:	83 e7 01             	and    edi,0x1
c001bac8:	83 ec 08             	sub    esp,0x8
c001bacb:	a1 c0 63 03 c0       	mov    eax,ds:0xc00363c0
c001bad0:	31 db                	xor    ebx,ebx
c001bad2:	50                   	push   eax
c001bad3:	68 7a cd 02 c0       	push   0xc002cd7a
c001bad8:	e8 9f b4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001badd:	83 c4 10             	add    esp,0x10
c001bae0:	a1 c0 63 03 c0       	mov    eax,ds:0xc00363c0
c001bae5:	85 c0                	test   eax,eax
c001bae7:	7f 55                	jg     c001bb3e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001bae9:	83 ec 0c             	sub    esp,0xc
c001baec:	68 91 cd 02 c0       	push   0xc002cd91
c001baf1:	e8 56 4c ff ff       	call   c001074c <KePanic(char const*)>
c001baf6:	83 c4 10             	add    esp,0x10
c001baf9:	8d 7e 20             	lea    edi,[esi+0x20]
c001bafc:	89 f8                	mov    eax,edi
c001bafe:	31 d2                	xor    edx,edx
c001bb00:	c1 e0 04             	shl    eax,0x4
c001bb03:	8b 8c 90 60 74 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc8ba0]
c001bb0a:	85 c9                	test   ecx,ecx
c001bb0c:	0f 84 8e 00 00 00    	je     c001bba0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001bb12:	83 c2 01             	add    edx,0x1
c001bb15:	83 fa 04             	cmp    edx,0x4
c001bb18:	75 e9                	jne    c001bb03 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001bb1a:	83 ec 0c             	sub    esp,0xc
c001bb1d:	68 48 cd 02 c0       	push   0xc002cd48
c001bb22:	e8 25 4c ff ff       	call   c001074c <KePanic(char const*)>
c001bb27:	83 c4 10             	add    esp,0x10
c001bb2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb2f:	5b                   	pop    ebx
c001bb30:	5e                   	pop    esi
c001bb31:	5f                   	pop    edi
c001bb32:	c3                   	ret    
c001bb33:	83 c3 01             	add    ebx,0x1
c001bb36:	39 1d c0 63 03 c0    	cmp    DWORD PTR ds:0xc00363c0,ebx
c001bb3c:	7e ab                	jle    c001bae9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001bb3e:	83 ec 08             	sub    esp,0x8
c001bb41:	8b 04 9d e0 63 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc9c20]
c001bb48:	56                   	push   esi
c001bb49:	50                   	push   eax
c001bb4a:	e8 ef db ff ff       	call   c001973e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001bb4f:	83 c4 10             	add    esp,0x10
c001bb52:	84 c0                	test   al,al
c001bb54:	74 dd                	je     c001bb33 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001bb56:	83 ec 04             	sub    esp,0x4
c001bb59:	89 f8                	mov    eax,edi
c001bb5b:	8b 1c 9d e0 63 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffc9c20]
c001bb62:	0f b6 f8             	movzx  edi,al
c001bb65:	57                   	push   edi
c001bb66:	8d 7e 20             	lea    edi,[esi+0x20]
c001bb69:	6a 00                	push   0x0
c001bb6b:	89 f8                	mov    eax,edi
c001bb6d:	0f b6 c0             	movzx  eax,al
c001bb70:	50                   	push   eax
c001bb71:	89 f0                	mov    eax,esi
c001bb73:	6a 00                	push   0x0
c001bb75:	0f b6 c0             	movzx  eax,al
c001bb78:	6a 00                	push   0x0
c001bb7a:	50                   	push   eax
c001bb7b:	53                   	push   ebx
c001bb7c:	e8 29 dd ff ff       	call   c00198aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001bb81:	83 c4 20             	add    esp,0x20
c001bb84:	e9 73 ff ff ff       	jmp    c001bafc <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001bb89:	83 ec 0c             	sub    esp,0xc
c001bb8c:	31 ff                	xor    edi,edi
c001bb8e:	68 0c cd 02 c0       	push   0xc002cd0c
c001bb93:	e8 b4 4b ff ff       	call   c001074c <KePanic(char const*)>
c001bb98:	83 c4 10             	add    esp,0x10
c001bb9b:	e9 28 ff ff ff       	jmp    c001bac8 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001bba0:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bba3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bba7:	89 14 85 60 74 03 c0 	mov    DWORD PTR [eax*4-0x3ffc8ba0],edx
c001bbae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bbb2:	5b                   	pop    ebx
c001bbb3:	89 14 85 60 64 03 c0 	mov    DWORD PTR [eax*4-0x3ffc9ba0],edx
c001bbba:	89 f0                	mov    eax,esi
c001bbbc:	5e                   	pop    esi
c001bbbd:	5f                   	pop    edi
c001bbbe:	c3                   	ret    

c001bbbf <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001bbbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbc3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bbc7:	c1 e0 04             	shl    eax,0x4
c001bbca:	8d 50 10             	lea    edx,[eax+0x10]
c001bbcd:	39 88 60 74 03 c0    	cmp    DWORD PTR [eax-0x3ffc8ba0],ecx
c001bbd3:	74 08                	je     c001bbdd <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001bbd5:	83 c0 04             	add    eax,0x4
c001bbd8:	39 d0                	cmp    eax,edx
c001bbda:	75 f1                	jne    c001bbcd <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001bbdc:	c3                   	ret    
c001bbdd:	c7 80 60 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba0],0x0
c001bbe7:	c7 80 60 64 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc9ba0],0x0
c001bbf1:	eb e2                	jmp    c001bbd5 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001bbf3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001bbf3:	53                   	push   ebx
c001bbf4:	83 ec 08             	sub    esp,0x8
c001bbf7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bbfb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bc00:	74 09                	je     c001bc0b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001bc02:	f6 05 4c 64 03 c0 01 	test   BYTE PTR ds:0xc003644c,0x1
c001bc09:	75 37                	jne    c001bc42 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001bc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc0f:	83 c0 20             	add    eax,0x20
c001bc12:	c1 e0 04             	shl    eax,0x4
c001bc15:	8d 50 10             	lea    edx,[eax+0x10]
c001bc18:	39 98 60 74 03 c0    	cmp    DWORD PTR [eax-0x3ffc8ba0],ebx
c001bc1e:	74 0c                	je     c001bc2c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001bc20:	83 c0 04             	add    eax,0x4
c001bc23:	39 d0                	cmp    eax,edx
c001bc25:	75 f1                	jne    c001bc18 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001bc27:	83 c4 08             	add    esp,0x8
c001bc2a:	5b                   	pop    ebx
c001bc2b:	c3                   	ret    
c001bc2c:	c7 80 60 74 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc8ba0],0x0
c001bc36:	c7 80 60 64 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc9ba0],0x0
c001bc40:	eb de                	jmp    c001bc20 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001bc42:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001bc47:	7f 11                	jg     c001bc5a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001bc49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc4d:	0f b6 80 e8 f6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0918]
c001bc54:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bc58:	eb b1                	jmp    c001bc0b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001bc5a:	83 ec 0c             	sub    esp,0xc
c001bc5d:	68 9e cd 02 c0       	push   0xc002cd9e
c001bc62:	e8 e5 4a ff ff       	call   c001074c <KePanic(char const*)>
c001bc67:	83 c4 10             	add    esp,0x10
c001bc6a:	eb 9f                	jmp    c001bc0b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>

c001bc6c <picIoWait()>:
c001bc6c:	eb 00                	jmp    c001bc6e <picIoWait()+0x2>
c001bc6e:	eb 00                	jmp    c001bc70 <picIoWait()+0x4>
c001bc70:	90                   	nop
c001bc71:	c3                   	ret    
c001bc72:	66 90                	xchg   ax,ax

c001bc74 <picDisable()>:
c001bc74:	83 ec 10             	sub    esp,0x10
c001bc77:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001bc7e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001bc83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bc87:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bc8c:	ee                   	out    dx,al
c001bc8d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001bc94:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001bc99:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001bc9d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001bca2:	ee                   	out    dx,al
c001bca3:	90                   	nop
c001bca4:	83 c4 10             	add    esp,0x10
c001bca7:	c3                   	ret    

c001bca8 <picGetIRQReg(int)>:
c001bca8:	83 ec 10             	sub    esp,0x10
c001bcab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bcaf:	0f b6 c0             	movzx  eax,al
c001bcb2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001bcb9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001bcbd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001bcc1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bcc6:	ee                   	out    dx,al
c001bcc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bccb:	0f b6 c0             	movzx  eax,al
c001bcce:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001bcd5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001bcd9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001bcdd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bce2:	ee                   	out    dx,al
c001bce3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001bcea:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001bcef:	89 c2                	mov    edx,eax
c001bcf1:	ec                   	in     al,dx
c001bcf2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bcf6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bcfa:	0f b6 c0             	movzx  eax,al
c001bcfd:	c1 e0 08             	shl    eax,0x8
c001bd00:	89 c1                	mov    ecx,eax
c001bd02:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001bd09:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001bd0e:	89 c2                	mov    edx,eax
c001bd10:	ec                   	in     al,dx
c001bd11:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001bd15:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001bd19:	0f b6 c0             	movzx  eax,al
c001bd1c:	09 c8                	or     eax,ecx
c001bd1e:	83 c4 10             	add    esp,0x10
c001bd21:	c3                   	ret    
c001bd22:	66 90                	xchg   ax,ax

c001bd24 <picOpen()>:
c001bd24:	83 ec 50             	sub    esp,0x50
c001bd27:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001bd2e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001bd33:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bd37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd3b:	ee                   	out    dx,al
c001bd3c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001bd43:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001bd48:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001bd4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd50:	ee                   	out    dx,al
c001bd51:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001bd59:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001bd61:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001bd68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd6c:	89 c2                	mov    edx,eax
c001bd6e:	ec                   	in     al,dx
c001bd6f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001bd73:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001bd77:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001bd7b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001bd82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd86:	89 c2                	mov    edx,eax
c001bd88:	ec                   	in     al,dx
c001bd89:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001bd8d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001bd91:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001bd95:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001bd9c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001bda1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001bda5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bda9:	ee                   	out    dx,al
c001bdaa:	e8 bd fe ff ff       	call   c001bc6c <picIoWait()>
c001bdaf:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001bdb6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001bdbb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001bdbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bdc3:	ee                   	out    dx,al
c001bdc4:	e8 a3 fe ff ff       	call   c001bc6c <picIoWait()>
c001bdc9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bdcd:	0f b6 c0             	movzx  eax,al
c001bdd0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001bdd7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001bddb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001bddf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bde3:	ee                   	out    dx,al
c001bde4:	e8 83 fe ff ff       	call   c001bc6c <picIoWait()>
c001bde9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bded:	0f b6 c0             	movzx  eax,al
c001bdf0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001bdf7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bdfb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bdff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001be03:	ee                   	out    dx,al
c001be04:	e8 63 fe ff ff       	call   c001bc6c <picIoWait()>
c001be09:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001be10:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001be15:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001be19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001be1d:	ee                   	out    dx,al
c001be1e:	e8 49 fe ff ff       	call   c001bc6c <picIoWait()>
c001be23:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001be2a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001be2f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001be33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001be37:	ee                   	out    dx,al
c001be38:	e8 2f fe ff ff       	call   c001bc6c <picIoWait()>
c001be3d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001be44:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001be49:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001be4d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001be51:	ee                   	out    dx,al
c001be52:	e8 15 fe ff ff       	call   c001bc6c <picIoWait()>
c001be57:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001be5e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001be63:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001be67:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001be6b:	ee                   	out    dx,al
c001be6c:	e8 fb fd ff ff       	call   c001bc6c <picIoWait()>
c001be71:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001be76:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001be7d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001be81:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001be85:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001be89:	ee                   	out    dx,al
c001be8a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001be8f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001be96:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001be9a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001be9e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bea2:	ee                   	out    dx,al
c001bea3:	90                   	nop
c001bea4:	83 c4 50             	add    esp,0x50
c001bea7:	c3                   	ret    

c001bea8 <picEOI(int)>:
c001bea8:	83 ec 10             	sub    esp,0x10
c001beab:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001beb0:	75 1e                	jne    c001bed0 <picEOI(int)+0x28>
c001beb2:	6a 0b                	push   0xb
c001beb4:	e8 ef fd ff ff       	call   c001bca8 <picGetIRQReg(int)>
c001beb9:	83 c4 04             	add    esp,0x4
c001bebc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001bec1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001bec6:	25 80 00 00 00       	and    eax,0x80
c001becb:	74 73                	je     c001bf40 <picEOI(int)+0x98>
c001becd:	8d 76 00             	lea    esi,[esi+0x0]
c001bed0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001bed5:	75 31                	jne    c001bf08 <picEOI(int)+0x60>
c001bed7:	6a 0b                	push   0xb
c001bed9:	e8 ca fd ff ff       	call   c001bca8 <picGetIRQReg(int)>
c001bede:	83 c4 04             	add    esp,0x4
c001bee1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001bee6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beea:	98                   	cwde   
c001beeb:	85 c0                	test   eax,eax
c001beed:	78 19                	js     c001bf08 <picEOI(int)+0x60>
c001beef:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001bef6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001befb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001beff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bf04:	ee                   	out    dx,al
c001bf05:	eb 3d                	jmp    c001bf44 <picEOI(int)+0x9c>
c001bf07:	90                   	nop
c001bf08:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001bf0d:	7e 19                	jle    c001bf28 <picEOI(int)+0x80>
c001bf0f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001bf16:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001bf1b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001bf1f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bf24:	ee                   	out    dx,al
c001bf25:	8d 76 00             	lea    esi,[esi+0x0]
c001bf28:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001bf2f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001bf34:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001bf38:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001bf3d:	ee                   	out    dx,al
c001bf3e:	eb 04                	jmp    c001bf44 <picEOI(int)+0x9c>
c001bf40:	90                   	nop
c001bf41:	8d 76 00             	lea    esi,[esi+0x0]
c001bf44:	83 c4 10             	add    esp,0x10
c001bf47:	c3                   	ret    

c001bf48 <RTC::open(int, int, void*)>:
c001bf48:	31 c0                	xor    eax,eax
c001bf4a:	c3                   	ret    
c001bf4b:	90                   	nop

c001bf4c <RTC::close(int, int, void*)>:
c001bf4c:	31 c0                	xor    eax,eax
c001bf4e:	c3                   	ret    
c001bf4f:	90                   	nop

c001bf50 <RTC::timeInSecondsUTC()>:
c001bf50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf54:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001bf5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bf60:	c3                   	ret    
c001bf61:	90                   	nop

c001bf62 <RTC::timeInDatetimeUTC()>:
c001bf62:	53                   	push   ebx
c001bf63:	83 ec 14             	sub    esp,0x14
c001bf66:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bf6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf6e:	8b 10                	mov    edx,DWORD PTR [eax]
c001bf70:	50                   	push   eax
c001bf71:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001bf74:	83 c4 0c             	add    esp,0xc
c001bf77:	52                   	push   edx
c001bf78:	50                   	push   eax
c001bf79:	53                   	push   ebx
c001bf7a:	e8 f7 e0 fe ff       	call   c000a076 <KeSecondsToDatetime(unsigned long long)>
c001bf7f:	89 d8                	mov    eax,ebx
c001bf81:	83 c4 14             	add    esp,0x14
c001bf84:	5b                   	pop    ebx
c001bf85:	c2 04 00             	ret    0x4

c001bf88 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001bf88:	56                   	push   esi
c001bf89:	53                   	push   ebx
c001bf8a:	83 ec 14             	sub    esp,0x14
c001bf8d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bf91:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf93:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001bf96:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf9a:	52                   	push   edx
c001bf9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfa3:	50                   	push   eax
c001bfa4:	e8 cd e0 fe ff       	call   c000a076 <KeSecondsToDatetime(unsigned long long)>
c001bfa9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bfad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bfb5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001bfb9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001bfbd:	89 f0                	mov    eax,esi
c001bfbf:	83 c4 20             	add    esp,0x20
c001bfc2:	5b                   	pop    ebx
c001bfc3:	5e                   	pop    esi
c001bfc4:	ff e0                	jmp    eax

c001bfc6 <RTC::~RTC()>:
c001bfc6:	83 ec 0c             	sub    esp,0xc
c001bfc9:	ba c8 cd 02 c0       	mov    edx,0xc002cdc8
c001bfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfd2:	89 10                	mov    DWORD PTR [eax],edx
c001bfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfd8:	83 ec 0c             	sub    esp,0xc
c001bfdb:	50                   	push   eax
c001bfdc:	e8 37 db fe ff       	call   c0009b18 <Clock::~Clock()>
c001bfe1:	83 c4 10             	add    esp,0x10
c001bfe4:	90                   	nop
c001bfe5:	83 c4 0c             	add    esp,0xc
c001bfe8:	c3                   	ret    
c001bfe9:	90                   	nop

c001bfea <RTC::~RTC()>:
c001bfea:	83 ec 0c             	sub    esp,0xc
c001bfed:	83 ec 0c             	sub    esp,0xc
c001bff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bff4:	e8 cd ff ff ff       	call   c001bfc6 <RTC::~RTC()>
c001bff9:	83 c4 10             	add    esp,0x10
c001bffc:	83 ec 08             	sub    esp,0x8
c001bfff:	68 60 01 00 00       	push   0x160
c001c004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c008:	e8 f7 1d ff ff       	call   c000de04 <operator delete(void*, unsigned long)>
c001c00d:	83 c4 10             	add    esp,0x10
c001c010:	83 c4 0c             	add    esp,0xc
c001c013:	c3                   	ret    

c001c014 <RTC::get_update_in_progress_flag()>:
c001c014:	83 ec 18             	sub    esp,0x18
c001c017:	6a 0a                	push   0xa
c001c019:	e8 9d d9 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c01e:	83 c4 1c             	add    esp,0x1c
c001c021:	0f b6 c0             	movzx  eax,al
c001c024:	c1 e8 07             	shr    eax,0x7
c001c027:	c3                   	ret    

c001c028 <RTC::completeRTCRefresh()>:
c001c028:	55                   	push   ebp
c001c029:	57                   	push   edi
c001c02a:	56                   	push   esi
c001c02b:	53                   	push   ebx
c001c02c:	83 ec 3c             	sub    esp,0x3c
c001c02f:	8b 1d 50 5b 03 c0    	mov    ebx,DWORD PTR ds:0xc0035b50
c001c035:	83 ec 0c             	sub    esp,0xc
c001c038:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c03c:	e8 d3 ff ff ff       	call   c001c014 <RTC::get_update_in_progress_flag()>
c001c041:	83 c4 10             	add    esp,0x10
c001c044:	84 c0                	test   al,al
c001c046:	74 0e                	je     c001c056 <RTC::completeRTCRefresh()+0x2e>
c001c048:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001c04e:	3b 05 50 5b 03 c0    	cmp    eax,DWORD PTR ds:0xc0035b50
c001c054:	73 df                	jae    c001c035 <RTC::completeRTCRefresh()+0xd>
c001c056:	83 ec 0c             	sub    esp,0xc
c001c059:	6a 00                	push   0x0
c001c05b:	e8 5b d9 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c060:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001c067:	89 c5                	mov    ebp,eax
c001c069:	e8 4d d9 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c06e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c075:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001c079:	e8 3d d9 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c07e:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001c085:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001c089:	e8 2d d9 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c08e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001c095:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c099:	e8 1d d9 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c09e:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001c0a5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001c0a9:	e8 0d d9 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c0ae:	0f b6 c0             	movzx  eax,al
c001c0b1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c0b5:	83 c4 10             	add    esp,0x10
c001c0b8:	8b 1d 50 5b 03 c0    	mov    ebx,DWORD PTR ds:0xc0035b50
c001c0be:	83 ec 0c             	sub    esp,0xc
c001c0c1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c0c5:	e8 4a ff ff ff       	call   c001c014 <RTC::get_update_in_progress_flag()>
c001c0ca:	83 c4 10             	add    esp,0x10
c001c0cd:	84 c0                	test   al,al
c001c0cf:	74 0e                	je     c001c0df <RTC::completeRTCRefresh()+0xb7>
c001c0d1:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001c0d7:	3b 05 50 5b 03 c0    	cmp    eax,DWORD PTR ds:0xc0035b50
c001c0dd:	73 df                	jae    c001c0be <RTC::completeRTCRefresh()+0x96>
c001c0df:	83 ec 0c             	sub    esp,0xc
c001c0e2:	6a 00                	push   0x0
c001c0e4:	e8 d2 d8 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c0e9:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001c0f0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c0f4:	e8 c2 d8 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c0f9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c100:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c104:	e8 b2 d8 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c109:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001c110:	88 c3                	mov    bl,al
c001c112:	e8 a4 d8 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c117:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001c11e:	89 c6                	mov    esi,eax
c001c120:	e8 96 d8 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c125:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001c12c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c130:	e8 86 d8 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c135:	89 e9                	mov    ecx,ebp
c001c137:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c13b:	0f b6 f8             	movzx  edi,al
c001c13e:	83 c4 10             	add    esp,0x10
c001c141:	0f b6 eb             	movzx  ebp,bl
c001c144:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001c148:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c14d:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c152:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c156:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001c15a:	0f 94 c0             	sete   al
c001c15d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c161:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001c165:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001c16a:	0f 94 c2             	sete   dl
c001c16d:	21 d0                	and    eax,edx
c001c16f:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001c173:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001c177:	0f 94 c2             	sete   dl
c001c17a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c17e:	21 c2                	and    edx,eax
c001c180:	89 f0                	mov    eax,esi
c001c182:	0f b6 c0             	movzx  eax,al
c001c185:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c189:	89 f0                	mov    eax,esi
c001c18b:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001c18f:	0f 94 c0             	sete   al
c001c192:	21 d0                	and    eax,edx
c001c194:	31 d2                	xor    edx,edx
c001c196:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001c19a:	0f 94 c2             	sete   dl
c001c19d:	85 c2                	test   edx,eax
c001c19f:	75 27                	jne    c001c1c8 <RTC::completeRTCRefresh()+0x1a0>
c001c1a1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c1a5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001c1a9:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001c1ad:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001c1b1:	89 f0                	mov    eax,esi
c001c1b3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001c1b7:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001c1bb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c1bf:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c1c3:	e9 f0 fe ff ff       	jmp    c001c0b8 <RTC::completeRTCRefresh()+0x90>
c001c1c8:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001c1cc:	75 d3                	jne    c001c1a1 <RTC::completeRTCRefresh()+0x179>
c001c1ce:	83 ec 0c             	sub    esp,0xc
c001c1d1:	6a 0b                	push   0xb
c001c1d3:	e8 e3 d7 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c1d8:	83 c4 10             	add    esp,0x10
c001c1db:	a8 04                	test   al,0x4
c001c1dd:	75 7a                	jne    c001c259 <RTC::completeRTCRefresh()+0x231>
c001c1df:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c1e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c1e7:	83 e1 0f             	and    ecx,0xf
c001c1ea:	c1 ea 04             	shr    edx,0x4
c001c1ed:	83 e6 0f             	and    esi,0xf
c001c1f0:	6b d2 0a             	imul   edx,edx,0xa
c001c1f3:	c1 ef 04             	shr    edi,0x4
c001c1f6:	01 d1                	add    ecx,edx
c001c1f8:	6b ff 0a             	imul   edi,edi,0xa
c001c1fb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001c1ff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c203:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c207:	c1 ea 04             	shr    edx,0x4
c001c20a:	83 e1 0f             	and    ecx,0xf
c001c20d:	6b d2 0a             	imul   edx,edx,0xa
c001c210:	01 d1                	add    ecx,edx
c001c212:	89 ea                	mov    edx,ebp
c001c214:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001c218:	c1 ea 04             	shr    edx,0x4
c001c21b:	89 d9                	mov    ecx,ebx
c001c21d:	83 e2 07             	and    edx,0x7
c001c220:	83 e1 0f             	and    ecx,0xf
c001c223:	6b d2 0a             	imul   edx,edx,0xa
c001c226:	83 e3 80             	and    ebx,0xffffff80
c001c229:	01 d1                	add    ecx,edx
c001c22b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c22f:	09 cb                	or     ebx,ecx
c001c231:	c1 ea 04             	shr    edx,0x4
c001c234:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c238:	6b d2 0a             	imul   edx,edx,0xa
c001c23b:	83 e1 0f             	and    ecx,0xf
c001c23e:	01 d6                	add    esi,edx
c001c240:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c244:	c1 ea 04             	shr    edx,0x4
c001c247:	6b d2 0a             	imul   edx,edx,0xa
c001c24a:	01 d1                	add    ecx,edx
c001c24c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c250:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001c254:	83 e2 0f             	and    edx,0xf
c001c257:	01 d7                	add    edi,edx
c001c259:	a8 02                	test   al,0x2
c001c25b:	75 15                	jne    c001c272 <RTC::completeRTCRefresh()+0x24a>
c001c25d:	f6 c3 80             	test   bl,0x80
c001c260:	74 10                	je     c001c272 <RTC::completeRTCRefresh()+0x24a>
c001c262:	83 e3 7f             	and    ebx,0x7f
c001c265:	b9 18 00 00 00       	mov    ecx,0x18
c001c26a:	8d 43 0c             	lea    eax,[ebx+0xc]
c001c26d:	99                   	cdq    
c001c26e:	f7 f9                	idiv   ecx
c001c270:	88 d3                	mov    bl,dl
c001c272:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001c278:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001c27e:	77 06                	ja     c001c286 <RTC::completeRTCRefresh()+0x25e>
c001c280:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001c286:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c28b:	31 c9                	xor    ecx,ecx
c001c28d:	c1 e0 10             	shl    eax,0x10
c001c290:	89 cf                	mov    edi,ecx
c001c292:	c1 e5 10             	shl    ebp,0x10
c001c295:	31 d2                	xor    edx,edx
c001c297:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001c29d:	09 c7                	or     edi,eax
c001c29f:	89 f0                	mov    eax,esi
c001c2a1:	89 f9                	mov    ecx,edi
c001c2a3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c2a7:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001c2ab:	88 c2                	mov    dl,al
c001c2ad:	88 d9                	mov    cl,bl
c001c2af:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001c2b3:	0f b7 c2             	movzx  eax,dx
c001c2b6:	09 e8                	or     eax,ebp
c001c2b8:	89 c2                	mov    edx,eax
c001c2ba:	50                   	push   eax
c001c2bb:	50                   	push   eax
c001c2bc:	51                   	push   ecx
c001c2bd:	52                   	push   edx
c001c2be:	e8 a5 d9 fe ff       	call   c0009c68 <KeDatetimeToSeconds(datetime_t)>
c001c2c3:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001c2c7:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001c2cd:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001c2d3:	83 c4 4c             	add    esp,0x4c
c001c2d6:	5b                   	pop    ebx
c001c2d7:	5e                   	pop    esi
c001c2d8:	5f                   	pop    edi
c001c2d9:	5d                   	pop    ebp
c001c2da:	c3                   	ret    
c001c2db:	90                   	nop

c001c2dc <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001c2dc:	55                   	push   ebp
c001c2dd:	57                   	push   edi
c001c2de:	56                   	push   esi
c001c2df:	53                   	push   ebx
c001c2e0:	83 ec 34             	sub    esp,0x34
c001c2e3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c2e7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c2eb:	6a 00                	push   0x0
c001c2ed:	89 fb                	mov    ebx,edi
c001c2ef:	6a 00                	push   0x0
c001c2f1:	e8 19 d7 ff ff       	call   c0019a0f <x86WriteCMOS(unsigned char, unsigned char)>
c001c2f6:	5d                   	pop    ebp
c001c2f7:	58                   	pop    eax
c001c2f8:	6a 00                	push   0x0
c001c2fa:	6a 02                	push   0x2
c001c2fc:	e8 0e d7 ff ff       	call   c0019a0f <x86WriteCMOS(unsigned char, unsigned char)>
c001c301:	31 d2                	xor    edx,edx
c001c303:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001c30a:	89 f9                	mov    ecx,edi
c001c30c:	89 f8                	mov    eax,edi
c001c30e:	c1 e9 10             	shr    ecx,0x10
c001c311:	0f b6 c4             	movzx  eax,ah
c001c314:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001c318:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001c31c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c320:	b9 64 00 00 00       	mov    ecx,0x64
c001c325:	89 f0                	mov    eax,esi
c001c327:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c32b:	89 f0                	mov    eax,esi
c001c32d:	0f b6 c4             	movzx  eax,ah
c001c330:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c334:	89 f0                	mov    eax,esi
c001c336:	c1 e8 10             	shr    eax,0x10
c001c339:	f7 f1                	div    ecx
c001c33b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c33f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001c343:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c347:	e8 6f d6 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c34c:	83 c4 10             	add    esp,0x10
c001c34f:	89 c5                	mov    ebp,eax
c001c351:	a8 04                	test   al,0x4
c001c353:	75 6e                	jne    c001c3c3 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001c355:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c359:	31 d2                	xor    edx,edx
c001c35b:	0f b6 c1             	movzx  eax,cl
c001c35e:	b9 0a 00 00 00       	mov    ecx,0xa
c001c363:	f7 f1                	div    ecx
c001c365:	c1 e0 04             	shl    eax,0x4
c001c368:	09 d0                	or     eax,edx
c001c36a:	31 d2                	xor    edx,edx
c001c36c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c370:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c375:	f7 f1                	div    ecx
c001c377:	c1 e0 04             	shl    eax,0x4
c001c37a:	09 d0                	or     eax,edx
c001c37c:	31 d2                	xor    edx,edx
c001c37e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c382:	0f b6 c3             	movzx  eax,bl
c001c385:	f7 f1                	div    ecx
c001c387:	c1 e0 04             	shl    eax,0x4
c001c38a:	09 d0                	or     eax,edx
c001c38c:	31 d2                	xor    edx,edx
c001c38e:	89 c3                	mov    ebx,eax
c001c390:	89 f0                	mov    eax,esi
c001c392:	0f b6 c0             	movzx  eax,al
c001c395:	f7 f1                	div    ecx
c001c397:	c1 e0 04             	shl    eax,0x4
c001c39a:	09 d0                	or     eax,edx
c001c39c:	31 d2                	xor    edx,edx
c001c39e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c3a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c3a7:	f7 f1                	div    ecx
c001c3a9:	c1 e0 04             	shl    eax,0x4
c001c3ac:	09 d0                	or     eax,edx
c001c3ae:	31 d2                	xor    edx,edx
c001c3b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3b8:	f7 f1                	div    ecx
c001c3ba:	c1 e0 04             	shl    eax,0x4
c001c3bd:	09 d0                	or     eax,edx
c001c3bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c3c3:	83 e5 02             	and    ebp,0x2
c001c3c6:	75 1e                	jne    c001c3e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c3c8:	0f b6 c3             	movzx  eax,bl
c001c3cb:	83 f8 0b             	cmp    eax,0xb
c001c3ce:	76 10                	jbe    c001c3e0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001c3d0:	8d 53 f4             	lea    edx,[ebx-0xc]
c001c3d3:	88 d3                	mov    bl,dl
c001c3d5:	84 d2                	test   dl,dl
c001c3d7:	75 02                	jne    c001c3db <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001c3d9:	b3 0c                	mov    bl,0xc
c001c3db:	83 cb 80             	or     ebx,0xffffff80
c001c3de:	eb 06                	jmp    c001c3e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c3e0:	85 c0                	test   eax,eax
c001c3e2:	75 02                	jne    c001c3e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001c3e4:	b3 0c                	mov    bl,0xc
c001c3e6:	0f b6 db             	movzx  ebx,bl
c001c3e9:	50                   	push   eax
c001c3ea:	50                   	push   eax
c001c3eb:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001c3f0:	52                   	push   edx
c001c3f1:	6a 00                	push   0x0
c001c3f3:	e8 17 d6 ff ff       	call   c0019a0f <x86WriteCMOS(unsigned char, unsigned char)>
c001c3f8:	5a                   	pop    edx
c001c3f9:	59                   	pop    ecx
c001c3fa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c3ff:	50                   	push   eax
c001c400:	6a 02                	push   0x2
c001c402:	e8 08 d6 ff ff       	call   c0019a0f <x86WriteCMOS(unsigned char, unsigned char)>
c001c407:	5e                   	pop    esi
c001c408:	5f                   	pop    edi
c001c409:	53                   	push   ebx
c001c40a:	6a 04                	push   0x4
c001c40c:	e8 fe d5 ff ff       	call   c0019a0f <x86WriteCMOS(unsigned char, unsigned char)>
c001c411:	5d                   	pop    ebp
c001c412:	58                   	pop    eax
c001c413:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001c418:	52                   	push   edx
c001c419:	6a 07                	push   0x7
c001c41b:	e8 ef d5 ff ff       	call   c0019a0f <x86WriteCMOS(unsigned char, unsigned char)>
c001c420:	58                   	pop    eax
c001c421:	5a                   	pop    edx
c001c422:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c427:	50                   	push   eax
c001c428:	6a 08                	push   0x8
c001c42a:	e8 e0 d5 ff ff       	call   c0019a0f <x86WriteCMOS(unsigned char, unsigned char)>
c001c42f:	59                   	pop    ecx
c001c430:	5b                   	pop    ebx
c001c431:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c436:	55                   	push   ebp
c001c437:	6a 09                	push   0x9
c001c439:	e8 d1 d5 ff ff       	call   c0019a0f <x86WriteCMOS(unsigned char, unsigned char)>
c001c43e:	5e                   	pop    esi
c001c43f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c443:	e8 e0 fb ff ff       	call   c001c028 <RTC::completeRTCRefresh()>
c001c448:	83 c4 3c             	add    esp,0x3c
c001c44b:	b0 01                	mov    al,0x1
c001c44d:	5b                   	pop    ebx
c001c44e:	5e                   	pop    esi
c001c44f:	5f                   	pop    edi
c001c450:	5d                   	pop    ebp
c001c451:	c3                   	ret    

c001c452 <rtcIRQHandler(regs*, void*)>:
c001c452:	53                   	push   ebx
c001c453:	83 ec 14             	sub    esp,0x14
c001c456:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c45a:	6a 0c                	push   0xc
c001c45c:	e8 5a d5 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c461:	83 c4 10             	add    esp,0x10
c001c464:	a8 80                	test   al,0x80
c001c466:	74 24                	je     c001c48c <rtcIRQHandler(regs*, void*)+0x3a>
c001c468:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001c46f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001c476:	66 ff 05 60 84 03 c0 	inc    WORD PTR ds:0xc0038460
c001c47d:	75 0d                	jne    c001c48c <rtcIRQHandler(regs*, void*)+0x3a>
c001c47f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c483:	83 c4 08             	add    esp,0x8
c001c486:	5b                   	pop    ebx
c001c487:	e9 9c fb ff ff       	jmp    c001c028 <RTC::completeRTCRefresh()>
c001c48c:	83 c4 08             	add    esp,0x8
c001c48f:	5b                   	pop    ebx
c001c490:	c3                   	ret    
c001c491:	90                   	nop

c001c492 <RTC::RTC()>:
c001c492:	83 ec 1c             	sub    esp,0x1c
c001c495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c499:	83 ec 08             	sub    esp,0x8
c001c49c:	68 ab cd 02 c0       	push   0xc002cdab
c001c4a1:	50                   	push   eax
c001c4a2:	e8 3b d6 fe ff       	call   c0009ae2 <Clock::Clock(char const*)>
c001c4a7:	83 c4 10             	add    esp,0x10
c001c4aa:	ba c8 cd 02 c0       	mov    edx,0xc002cdc8
c001c4af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4b3:	89 10                	mov    DWORD PTR [eax],edx
c001c4b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4b9:	83 ec 0c             	sub    esp,0xc
c001c4bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4c0:	6a 01                	push   0x1
c001c4c2:	68 52 c4 01 c0       	push   0xc001c452
c001c4c7:	6a 08                	push   0x8
c001c4c9:	50                   	push   eax
c001c4ca:	e8 5d df fe ff       	call   c000a42c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4cf:	83 c4 20             	add    esp,0x20
c001c4d2:	89 c2                	mov    edx,eax
c001c4d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4d8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001c4de:	fa                   	cli    
c001c4df:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001c4e4:	83 c0 01             	add    eax,0x1
c001c4e7:	a3 30 63 03 c0       	mov    ds:0xc0036330,eax
c001c4ec:	83 ec 0c             	sub    esp,0xc
c001c4ef:	6a 0b                	push   0xb
c001c4f1:	e8 c5 d4 ff ff       	call   c00199bb <x86ReadCMOS(unsigned char)>
c001c4f6:	83 c4 10             	add    esp,0x10
c001c4f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c4fd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c501:	83 c8 10             	or     eax,0x10
c001c504:	0f b6 c0             	movzx  eax,al
c001c507:	83 ec 08             	sub    esp,0x8
c001c50a:	50                   	push   eax
c001c50b:	6a 0b                	push   0xb
c001c50d:	e8 fd d4 ff ff       	call   c0019a0f <x86WriteCMOS(unsigned char, unsigned char)>
c001c512:	83 c4 10             	add    esp,0x10
c001c515:	83 ec 0c             	sub    esp,0xc
c001c518:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c51c:	e8 07 fb ff ff       	call   c001c028 <RTC::completeRTCRefresh()>
c001c521:	83 c4 10             	add    esp,0x10
c001c524:	f0 83 2d 30 63 03 c0 01 	lock sub DWORD PTR ds:0xc0036330,0x1
c001c52c:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c001c531:	85 c0                	test   eax,eax
c001c533:	75 01                	jne    c001c536 <RTC::RTC()+0xa4>
c001c535:	fb                   	sti    
c001c536:	90                   	nop
c001c537:	83 c4 1c             	add    esp,0x1c
c001c53a:	c3                   	ret    
c001c53b:	90                   	nop

c001c53c <HalConsoleScroll(int, int)>:
c001c53c:	83 ec 10             	sub    esp,0x10
c001c53f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001c547:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001c54f:	90                   	nop
c001c550:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c555:	0f 8f e1 00 00 00    	jg     c001c63c <HalConsoleScroll(int, int)+0x100>
c001c55b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c563:	90                   	nop
c001c564:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001c56c:	0f 8f be 00 00 00    	jg     c001c630 <HalConsoleScroll(int, int)+0xf4>
c001c572:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c576:	89 d0                	mov    eax,edx
c001c578:	c1 e0 02             	shl    eax,0x2
c001c57b:	01 d0                	add    eax,edx
c001c57d:	c1 e0 05             	shl    eax,0x5
c001c580:	89 c2                	mov    edx,eax
c001c582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c586:	01 d0                	add    eax,edx
c001c588:	89 c2                	mov    edx,eax
c001c58a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c58e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c591:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c595:	89 d0                	mov    eax,edx
c001c597:	c1 e0 02             	shl    eax,0x2
c001c59a:	01 d0                	add    eax,edx
c001c59c:	c1 e0 05             	shl    eax,0x5
c001c59f:	89 c2                	mov    edx,eax
c001c5a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5a5:	01 d0                	add    eax,edx
c001c5a7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001c5ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5b1:	01 c2                	add    edx,eax
c001c5b3:	8a 01                	mov    al,BYTE PTR [ecx]
c001c5b5:	88 02                	mov    BYTE PTR [edx],al
c001c5b7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001c5bc:	75 66                	jne    c001c624 <HalConsoleScroll(int, int)+0xe8>
c001c5be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5c2:	83 e0 01             	and    eax,0x1
c001c5c5:	74 39                	je     c001c600 <HalConsoleScroll(int, int)+0xc4>
c001c5c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c5cb:	83 e0 0f             	and    eax,0xf
c001c5ce:	88 c2                	mov    dl,al
c001c5d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5d4:	c1 e0 04             	shl    eax,0x4
c001c5d7:	09 d0                	or     eax,edx
c001c5d9:	88 c1                	mov    cl,al
c001c5db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c5df:	89 d0                	mov    eax,edx
c001c5e1:	c1 e0 02             	shl    eax,0x2
c001c5e4:	01 d0                	add    eax,edx
c001c5e6:	c1 e0 05             	shl    eax,0x5
c001c5e9:	89 c2                	mov    edx,eax
c001c5eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5ef:	01 d0                	add    eax,edx
c001c5f1:	89 c2                	mov    edx,eax
c001c5f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5f7:	01 d0                	add    eax,edx
c001c5f9:	88 ca                	mov    dl,cl
c001c5fb:	88 10                	mov    BYTE PTR [eax],dl
c001c5fd:	eb 25                	jmp    c001c624 <HalConsoleScroll(int, int)+0xe8>
c001c5ff:	90                   	nop
c001c600:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c604:	89 d0                	mov    eax,edx
c001c606:	c1 e0 02             	shl    eax,0x2
c001c609:	01 d0                	add    eax,edx
c001c60b:	c1 e0 05             	shl    eax,0x5
c001c60e:	89 c2                	mov    edx,eax
c001c610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c614:	01 d0                	add    eax,edx
c001c616:	89 c2                	mov    edx,eax
c001c618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c61c:	01 d0                	add    eax,edx
c001c61e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001c621:	8d 76 00             	lea    esi,[esi+0x0]
c001c624:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001c629:	e9 36 ff ff ff       	jmp    c001c564 <HalConsoleScroll(int, int)+0x28>
c001c62e:	66 90                	xchg   ax,ax
c001c630:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c635:	e9 16 ff ff ff       	jmp    c001c550 <HalConsoleScroll(int, int)+0x14>
c001c63a:	66 90                	xchg   ax,ax
c001c63c:	90                   	nop
c001c63d:	83 c4 10             	add    esp,0x10
c001c640:	c3                   	ret    
c001c641:	8d 76 00             	lea    esi,[esi+0x0]

c001c644 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001c644:	83 ec 14             	sub    esp,0x14
c001c647:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c64b:	88 04 24             	mov    BYTE PTR [esp],al
c001c64e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c651:	0f b6 c0             	movzx  eax,al
c001c654:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c658:	89 d1                	mov    ecx,edx
c001c65a:	83 e1 0f             	and    ecx,0xf
c001c65d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c661:	c1 e2 04             	shl    edx,0x4
c001c664:	0f b6 d2             	movzx  edx,dl
c001c667:	09 ca                	or     edx,ecx
c001c669:	c1 e2 08             	shl    edx,0x8
c001c66c:	09 d0                	or     eax,edx
c001c66e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001c673:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001c67b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c67f:	89 d0                	mov    eax,edx
c001c681:	c1 e0 02             	shl    eax,0x2
c001c684:	01 d0                	add    eax,edx
c001c686:	c1 e0 04             	shl    eax,0x4
c001c689:	89 c2                	mov    edx,eax
c001c68b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c68f:	01 d0                	add    eax,edx
c001c691:	01 c0                	add    eax,eax
c001c693:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001c697:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c69b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001c6a0:	66 89 02             	mov    WORD PTR [edx],ax
c001c6a3:	90                   	nop
c001c6a4:	83 c4 14             	add    esp,0x14
c001c6a7:	c3                   	ret    

c001c6a8 <HalConsoleCursorUpdate(int, int)>:
c001c6a8:	83 ec 20             	sub    esp,0x20
c001c6ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c6af:	89 c2                	mov    edx,eax
c001c6b1:	c1 e2 02             	shl    edx,0x2
c001c6b4:	01 d0                	add    eax,edx
c001c6b6:	c1 e0 04             	shl    eax,0x4
c001c6b9:	89 c2                	mov    edx,eax
c001c6bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6bf:	01 d0                	add    eax,edx
c001c6c1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001c6c6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001c6cd:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001c6d2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c6d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c6da:	ee                   	out    dx,al
c001c6db:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c6e0:	0f b6 c0             	movzx  eax,al
c001c6e3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001c6ea:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c6ee:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001c6f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6f6:	ee                   	out    dx,al
c001c6f7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001c6fe:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001c703:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001c707:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c70b:	ee                   	out    dx,al
c001c70c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001c711:	c1 e8 08             	shr    eax,0x8
c001c714:	0f b6 c0             	movzx  eax,al
c001c717:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001c71e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001c722:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001c726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c72a:	ee                   	out    dx,al
c001c72b:	90                   	nop
c001c72c:	83 c4 20             	add    esp,0x20
c001c72f:	c3                   	ret    

c001c730 <ACPIDriver::initialise()>:
c001c730:	90                   	nop
c001c731:	c3                   	ret    
c001c732:	66 90                	xchg   ax,ax

c001c734 <ACPIDriver::detect()>:
c001c734:	90                   	nop
c001c735:	c3                   	ret    
c001c736:	66 90                	xchg   ax,ax

c001c738 <ACPIDriver::deinitialise()>:
c001c738:	90                   	nop
c001c739:	c3                   	ret    
c001c73a:	66 90                	xchg   ax,ax

c001c73c <ACPIDriver::setPowerState(DevicePowerState)>:
c001c73c:	90                   	nop
c001c73d:	c3                   	ret    
c001c73e:	66 90                	xchg   ax,ax

c001c740 <ACPIDriver::getHumanReadableName()>:
c001c740:	b8 67 a6 02 c0       	mov    eax,0xc002a667
c001c745:	c3                   	ret    
c001c746:	66 90                	xchg   ax,ax

c001c748 <ISADriver::initialise()>:
c001c748:	90                   	nop
c001c749:	c3                   	ret    
c001c74a:	66 90                	xchg   ax,ax

c001c74c <ISADriver::detect()>:
c001c74c:	90                   	nop
c001c74d:	c3                   	ret    
c001c74e:	66 90                	xchg   ax,ax

c001c750 <ISADriver::deinitialise()>:
c001c750:	90                   	nop
c001c751:	c3                   	ret    
c001c752:	66 90                	xchg   ax,ax

c001c754 <ISADriver::setPowerState(DevicePowerState)>:
c001c754:	90                   	nop
c001c755:	c3                   	ret    
c001c756:	66 90                	xchg   ax,ax

c001c758 <ISADriver::getHumanReadableName()>:
c001c758:	b8 82 a6 02 c0       	mov    eax,0xc002a682
c001c75d:	c3                   	ret    
c001c75e:	66 90                	xchg   ax,ax

c001c760 <ISAPnPDriver::detect()>:
c001c760:	90                   	nop
c001c761:	c3                   	ret    
c001c762:	66 90                	xchg   ax,ax

c001c764 <ISAPnPDriver::deinitialise()>:
c001c764:	90                   	nop
c001c765:	c3                   	ret    
c001c766:	66 90                	xchg   ax,ax

c001c768 <ISAPnPDriver::setPowerState(DevicePowerState)>:
c001c768:	90                   	nop
c001c769:	c3                   	ret    
c001c76a:	66 90                	xchg   ax,ax

c001c76c <ISAPnPDriver::getHumanReadableName()>:
c001c76c:	b8 6c a6 02 c0       	mov    eax,0xc002a66c
c001c771:	c3                   	ret    
c001c772:	66 90                	xchg   ax,ax

c001c774 <ISAPnPDriver::sendInitiationKey()>:
c001c774:	57                   	push   edi
c001c775:	56                   	push   esi
c001c776:	53                   	push   ebx
c001c777:	83 ec 40             	sub    esp,0x40
c001c77a:	8d 44 24 0d          	lea    eax,[esp+0xd]
c001c77e:	ba 60 ce 02 c0       	mov    edx,0xc002ce60
c001c783:	bb 20 00 00 00       	mov    ebx,0x20
c001c788:	89 c1                	mov    ecx,eax
c001c78a:	83 e1 01             	and    ecx,0x1
c001c78d:	74 0d                	je     c001c79c <ISAPnPDriver::sendInitiationKey()+0x28>
c001c78f:	8a 0a                	mov    cl,BYTE PTR [edx]
c001c791:	88 08                	mov    BYTE PTR [eax],cl
c001c793:	8d 40 01             	lea    eax,[eax+0x1]
c001c796:	8d 52 01             	lea    edx,[edx+0x1]
c001c799:	83 eb 01             	sub    ebx,0x1
c001c79c:	89 c1                	mov    ecx,eax
c001c79e:	83 e1 02             	and    ecx,0x2
c001c7a1:	74 11                	je     c001c7b4 <ISAPnPDriver::sendInitiationKey()+0x40>
c001c7a3:	66 8b 0a             	mov    cx,WORD PTR [edx]
c001c7a6:	66 89 08             	mov    WORD PTR [eax],cx
c001c7a9:	8d 40 02             	lea    eax,[eax+0x2]
c001c7ac:	8d 52 02             	lea    edx,[edx+0x2]
c001c7af:	83 eb 02             	sub    ebx,0x2
c001c7b2:	66 90                	xchg   ax,ax
c001c7b4:	89 d9                	mov    ecx,ebx
c001c7b6:	c1 e9 02             	shr    ecx,0x2
c001c7b9:	fc                   	cld    
c001c7ba:	89 c7                	mov    edi,eax
c001c7bc:	89 d6                	mov    esi,edx
c001c7be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c7c0:	89 f2                	mov    edx,esi
c001c7c2:	89 f8                	mov    eax,edi
c001c7c4:	b9 00 00 00 00       	mov    ecx,0x0
c001c7c9:	89 de                	mov    esi,ebx
c001c7cb:	83 e6 02             	and    esi,0x2
c001c7ce:	74 0c                	je     c001c7dc <ISAPnPDriver::sendInitiationKey()+0x68>
c001c7d0:	66 8b 34 0a          	mov    si,WORD PTR [edx+ecx*1]
c001c7d4:	66 89 34 08          	mov    WORD PTR [eax+ecx*1],si
c001c7d8:	83 c1 02             	add    ecx,0x2
c001c7db:	90                   	nop
c001c7dc:	83 e3 01             	and    ebx,0x1
c001c7df:	74 07                	je     c001c7e8 <ISAPnPDriver::sendInitiationKey()+0x74>
c001c7e1:	8a 14 0a             	mov    dl,BYTE PTR [edx+ecx*1]
c001c7e4:	88 14 08             	mov    BYTE PTR [eax+ecx*1],dl
c001c7e7:	90                   	nop
c001c7e8:	fa                   	cli    
c001c7e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001c7f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7f4:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001c7f9:	0f 8f 8d 00 00 00    	jg     c001c88c <ISAPnPDriver::sendInitiationKey()+0x118>
c001c7ff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c803:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c806:	0f b7 c0             	movzx  eax,ax
c001c809:	66 89 44 24 32       	mov    WORD PTR [esp+0x32],ax
c001c80e:	c6 44 24 31 00       	mov    BYTE PTR [esp+0x31],0x0
c001c813:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001c817:	66 8b 54 24 32       	mov    dx,WORD PTR [esp+0x32]
c001c81c:	ee                   	out    dx,al
c001c81d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c821:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c824:	0f b7 c0             	movzx  eax,ax
c001c827:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c001c82c:	c6 44 24 35 00       	mov    BYTE PTR [esp+0x35],0x0
c001c831:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001c835:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c001c83a:	ee                   	out    dx,al
c001c83b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001c843:	90                   	nop
c001c844:	83 7c 24 38 1f       	cmp    DWORD PTR [esp+0x38],0x1f
c001c849:	7f 35                	jg     c001c880 <ISAPnPDriver::sendInitiationKey()+0x10c>
c001c84b:	8d 54 24 0d          	lea    edx,[esp+0xd]
c001c84f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c853:	01 d0                	add    eax,edx
c001c855:	8a 00                	mov    al,BYTE PTR [eax]
c001c857:	0f b6 d0             	movzx  edx,al
c001c85a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c85e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c861:	0f b7 c0             	movzx  eax,ax
c001c864:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001c869:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c86d:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c001c871:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c001c876:	ee                   	out    dx,al
c001c877:	83 44 24 38 01       	add    DWORD PTR [esp+0x38],0x1
c001c87c:	eb c6                	jmp    c001c844 <ISAPnPDriver::sendInitiationKey()+0xd0>
c001c87e:	66 90                	xchg   ax,ax
c001c880:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c001c885:	e9 6a ff ff ff       	jmp    c001c7f4 <ISAPnPDriver::sendInitiationKey()+0x80>
c001c88a:	66 90                	xchg   ax,ax
c001c88c:	fb                   	sti    
c001c88d:	90                   	nop
c001c88e:	83 c4 40             	add    esp,0x40
c001c891:	5b                   	pop    ebx
c001c892:	5e                   	pop    esi
c001c893:	5f                   	pop    edi
c001c894:	c3                   	ret    
c001c895:	90                   	nop
c001c896:	66 90                	xchg   ax,ax

c001c898 <ISAPnPDriver::isolateCard()>:
c001c898:	83 ec 3c             	sub    esp,0x3c
c001c89b:	83 ec 0c             	sub    esp,0xc
c001c89e:	68 80 ce 02 c0       	push   0xc002ce80
c001c8a3:	e8 d4 a6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001c8a8:	83 c4 10             	add    esp,0x10
c001c8ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c8b3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c8bb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c8c3:	90                   	nop
c001c8c4:	83 7c 24 24 3f       	cmp    DWORD PTR [esp+0x24],0x3f
c001c8c9:	0f 8f a1 00 00 00    	jg     c001c970 <ISAPnPDriver::isolateCard()+0xd8>
c001c8cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c8d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c8d6:	0f b7 c0             	movzx  eax,ax
c001c8d9:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c001c8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e2:	89 c2                	mov    edx,eax
c001c8e4:	ec                   	in     al,dx
c001c8e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c8e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c8ed:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001c8f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c8f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c8f8:	0f b7 c0             	movzx  eax,ax
c001c8fb:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001c900:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c904:	89 c2                	mov    edx,eax
c001c906:	ec                   	in     al,dx
c001c907:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c90b:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001c90f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c913:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c917:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c91b:	01 c0                	add    eax,eax
c001c91d:	11 d2                	adc    edx,edx
c001c91f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c923:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001c927:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c92c:	83 f8 55             	cmp    eax,0x55
c001c92f:	75 0f                	jne    c001c940 <ISAPnPDriver::isolateCard()+0xa8>
c001c931:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001c936:	3d aa 00 00 00       	cmp    eax,0xaa
c001c93b:	74 1b                	je     c001c958 <ISAPnPDriver::isolateCard()+0xc0>
c001c93d:	8d 76 00             	lea    esi,[esi+0x0]
c001c940:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c945:	3d aa 00 00 00       	cmp    eax,0xaa
c001c94a:	75 18                	jne    c001c964 <ISAPnPDriver::isolateCard()+0xcc>
c001c94c:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001c951:	83 f8 55             	cmp    eax,0x55
c001c954:	75 0e                	jne    c001c964 <ISAPnPDriver::isolateCard()+0xcc>
c001c956:	66 90                	xchg   ax,ax
c001c958:	83 4c 24 28 01       	or     DWORD PTR [esp+0x28],0x1
c001c95d:	83 4c 24 2c 00       	or     DWORD PTR [esp+0x2c],0x0
c001c962:	66 90                	xchg   ax,ax
c001c964:	83 44 24 24 01       	add    DWORD PTR [esp+0x24],0x1
c001c969:	e9 56 ff ff ff       	jmp    c001c8c4 <ISAPnPDriver::isolateCard()+0x2c>
c001c96e:	66 90                	xchg   ax,ax
c001c970:	c6 44 24 19 00       	mov    BYTE PTR [esp+0x19],0x0
c001c975:	c6 44 24 23 00       	mov    BYTE PTR [esp+0x23],0x0
c001c97a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c982:	66 90                	xchg   ax,ax
c001c984:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c001c989:	0f 8f 95 00 00 00    	jg     c001ca24 <ISAPnPDriver::isolateCard()+0x18c>
c001c98f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c993:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c996:	0f b7 c0             	movzx  eax,ax
c001c999:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001c99e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9a2:	89 c2                	mov    edx,eax
c001c9a4:	ec                   	in     al,dx
c001c9a5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001c9a9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001c9ad:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c9b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c9b5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c9b8:	0f b7 c0             	movzx  eax,ax
c001c9bb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001c9c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9c4:	89 c2                	mov    edx,eax
c001c9c6:	ec                   	in     al,dx
c001c9c7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c9cb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001c9cf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001c9d3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001c9d7:	d1 e0                	shl    eax,1
c001c9d9:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001c9dd:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001c9e2:	83 f8 55             	cmp    eax,0x55
c001c9e5:	75 0d                	jne    c001c9f4 <ISAPnPDriver::isolateCard()+0x15c>
c001c9e7:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001c9ec:	3d aa 00 00 00       	cmp    eax,0xaa
c001c9f1:	74 19                	je     c001ca0c <ISAPnPDriver::isolateCard()+0x174>
c001c9f3:	90                   	nop
c001c9f4:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001c9f9:	3d aa 00 00 00       	cmp    eax,0xaa
c001c9fe:	75 18                	jne    c001ca18 <ISAPnPDriver::isolateCard()+0x180>
c001ca00:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001ca05:	83 f8 55             	cmp    eax,0x55
c001ca08:	75 0e                	jne    c001ca18 <ISAPnPDriver::isolateCard()+0x180>
c001ca0a:	66 90                	xchg   ax,ax
c001ca0c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001ca10:	83 c8 01             	or     eax,0x1
c001ca13:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001ca17:	90                   	nop
c001ca18:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001ca1d:	e9 62 ff ff ff       	jmp    c001c984 <ISAPnPDriver::isolateCard()+0xec>
c001ca22:	66 90                	xchg   ax,ax
c001ca24:	83 ec 0c             	sub    esp,0xc
c001ca27:	68 20 cf 02 c0       	push   0xc002cf20
c001ca2c:	e8 4b a5 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ca31:	83 c4 10             	add    esp,0x10
c001ca34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca38:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ca3c:	83 c4 3c             	add    esp,0x3c
c001ca3f:	c3                   	ret    

c001ca40 <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>:
c001ca40:	83 ec 18             	sub    esp,0x18
c001ca43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ca47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ca4b:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001ca4f:	88 04 24             	mov    BYTE PTR [esp],al
c001ca52:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001ca57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca5b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca5e:	0f b7 c0             	movzx  eax,ax
c001ca61:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001ca66:	88 54 24 11          	mov    BYTE PTR [esp+0x11],dl
c001ca6a:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ca6e:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001ca73:	ee                   	out    dx,al
c001ca74:	0f b6 14 24          	movzx  edx,BYTE PTR [esp]
c001ca78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca7c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001ca80:	0f b7 c0             	movzx  eax,ax
c001ca83:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001ca88:	88 54 24 15          	mov    BYTE PTR [esp+0x15],dl
c001ca8c:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001ca90:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001ca95:	ee                   	out    dx,al
c001ca96:	90                   	nop
c001ca97:	83 c4 18             	add    esp,0x18
c001ca9a:	c3                   	ret    
c001ca9b:	90                   	nop

c001ca9c <ISAPnPDriver::changeReadPortBase()>:
c001ca9c:	83 ec 1c             	sub    esp,0x1c
c001ca9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caa3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001caa6:	0f b7 c0             	movzx  eax,ax
c001caa9:	83 c0 04             	add    eax,0x4
c001caac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cab0:	81 7c 24 0c f2 03 00 00 	cmp    DWORD PTR [esp+0xc],0x3f2
c001cab8:	7f 72                	jg     c001cb2c <ISAPnPDriver::changeReadPortBase()+0x90>
c001caba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cabe:	0f b7 c0             	movzx  eax,ax
c001cac1:	83 ec 08             	sub    esp,0x8
c001cac4:	6a 01                	push   0x1
c001cac6:	50                   	push   eax
c001cac7:	e8 25 a9 fe ff       	call   c00073f1 <KeIsPortInUse(unsigned short, int)>
c001cacc:	83 c4 10             	add    esp,0x10
c001cacf:	83 f0 01             	xor    eax,0x1
c001cad2:	0f b6 c0             	movzx  eax,al
c001cad5:	85 c0                	test   eax,eax
c001cad7:	74 4b                	je     c001cb24 <ISAPnPDriver::changeReadPortBase()+0x88>
c001cad9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cadd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cae1:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c001cae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cae9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001caec:	0f b7 c0             	movzx  eax,ax
c001caef:	83 ec 08             	sub    esp,0x8
c001caf2:	50                   	push   eax
c001caf3:	68 44 cf 02 c0       	push   0xc002cf44
c001caf8:	e8 7f a4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cafd:	83 c4 10             	add    esp,0x10
c001cb00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cb07:	0f b7 c0             	movzx  eax,ax
c001cb0a:	c1 f8 03             	sar    eax,0x3
c001cb0d:	0f b6 c0             	movzx  eax,al
c001cb10:	83 ec 04             	sub    esp,0x4
c001cb13:	50                   	push   eax
c001cb14:	6a 00                	push   0x0
c001cb16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb1a:	e8 21 ff ff ff       	call   c001ca40 <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001cb1f:	83 c4 10             	add    esp,0x10
c001cb22:	eb 08                	jmp    c001cb2c <ISAPnPDriver::changeReadPortBase()+0x90>
c001cb24:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c001cb29:	eb 85                	jmp    c001cab0 <ISAPnPDriver::changeReadPortBase()+0x14>
c001cb2b:	90                   	nop
c001cb2c:	83 c4 1c             	add    esp,0x1c
c001cb2f:	c3                   	ret    

c001cb30 <ISAPnPDriver::resetAllCards()>:
c001cb30:	6a 05                	push   0x5
c001cb32:	6a 02                	push   0x2
c001cb34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cb38:	e8 03 ff ff ff       	call   c001ca40 <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001cb3d:	83 c4 0c             	add    esp,0xc
c001cb40:	90                   	nop
c001cb41:	c3                   	ret    
c001cb42:	66 90                	xchg   ax,ax

c001cb44 <ISAPnPDriver::readRegister(unsigned char)>:
c001cb44:	83 ec 14             	sub    esp,0x14
c001cb47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb4b:	88 04 24             	mov    BYTE PTR [esp],al
c001cb4e:	0f b6 14 24          	movzx  edx,BYTE PTR [esp]
c001cb52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cb59:	0f b7 c0             	movzx  eax,ax
c001cb5c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cb61:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c001cb65:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001cb69:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001cb6e:	ee                   	out    dx,al
c001cb6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cb76:	0f b7 c0             	movzx  eax,ax
c001cb79:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001cb7e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001cb83:	89 c2                	mov    edx,eax
c001cb85:	ec                   	in     al,dx
c001cb86:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001cb8a:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001cb8e:	90                   	nop
c001cb8f:	83 c4 14             	add    esp,0x14
c001cb92:	c3                   	ret    
c001cb93:	90                   	nop

c001cb94 <ISAPnPDriver::initialise()>:
c001cb94:	55                   	push   ebp
c001cb95:	57                   	push   edi
c001cb96:	56                   	push   esi
c001cb97:	53                   	push   ebx
c001cb98:	83 ec 2c             	sub    esp,0x2c
c001cb9b:	83 ec 0c             	sub    esp,0xc
c001cb9e:	68 34 ce 02 c0       	push   0xc002ce34
c001cba3:	e8 d4 a3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cba8:	83 c4 10             	add    esp,0x10
c001cbab:	83 ec 0c             	sub    esp,0xc
c001cbae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cbb2:	e8 79 ff ff ff       	call   c001cb30 <ISAPnPDriver::resetAllCards()>
c001cbb7:	83 c4 10             	add    esp,0x10
c001cbba:	83 ec 0c             	sub    esp,0xc
c001cbbd:	68 37 ce 02 c0       	push   0xc002ce37
c001cbc2:	e8 b5 a3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cbc7:	83 c4 10             	add    esp,0x10
c001cbca:	83 ec 0c             	sub    esp,0xc
c001cbcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cbd1:	e8 9e fb ff ff       	call   c001c774 <ISAPnPDriver::sendInitiationKey()>
c001cbd6:	83 c4 10             	add    esp,0x10
c001cbd9:	83 ec 0c             	sub    esp,0xc
c001cbdc:	68 80 b7 02 c0       	push   0xc002b780
c001cbe1:	e8 96 a3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cbe6:	83 c4 10             	add    esp,0x10
c001cbe9:	83 ec 04             	sub    esp,0x4
c001cbec:	6a 00                	push   0x0
c001cbee:	6a 03                	push   0x3
c001cbf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cbf4:	e8 47 fe ff ff       	call   c001ca40 <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001cbf9:	83 c4 10             	add    esp,0x10
c001cbfc:	83 ec 0c             	sub    esp,0xc
c001cbff:	68 c1 ba 02 c0       	push   0xc002bac1
c001cc04:	e8 73 a3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cc09:	83 c4 10             	add    esp,0x10
c001cc0c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cc10:	66 c7 40 0c 03 02    	mov    WORD PTR [eax+0xc],0x203
c001cc16:	83 ec 0c             	sub    esp,0xc
c001cc19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cc1d:	e8 7a fe ff ff       	call   c001ca9c <ISAPnPDriver::changeReadPortBase()>
c001cc22:	83 c4 10             	add    esp,0x10
c001cc25:	83 ec 0c             	sub    esp,0xc
c001cc28:	68 5c a6 02 c0       	push   0xc002a65c
c001cc2d:	e8 4a a3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cc32:	83 c4 10             	add    esp,0x10
c001cc35:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001cc3d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cc45:	8d 76 00             	lea    esi,[esi+0x0]
c001cc48:	83 ec 0c             	sub    esp,0xc
c001cc4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cc4f:	e8 44 fc ff ff       	call   c001c898 <ISAPnPDriver::isolateCard()>
c001cc54:	83 c4 10             	add    esp,0x10
c001cc57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cc5b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc63:	80 f4 00             	xor    ah,0x0
c001cc66:	89 c3                	mov    ebx,eax
c001cc68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc6c:	80 f4 00             	xor    ah,0x0
c001cc6f:	89 c6                	mov    esi,eax
c001cc71:	89 f0                	mov    eax,esi
c001cc73:	09 d8                	or     eax,ebx
c001cc75:	75 3d                	jne    c001ccb4 <ISAPnPDriver::initialise()+0x120>
c001cc77:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cc7c:	0f 85 fe 00 00 00    	jne    c001cd80 <ISAPnPDriver::initialise()+0x1ec>
c001cc82:	83 ec 0c             	sub    esp,0xc
c001cc85:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cc89:	e8 0e fe ff ff       	call   c001ca9c <ISAPnPDriver::changeReadPortBase()>
c001cc8e:	83 c4 10             	add    esp,0x10
c001cc91:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001cc96:	83 7c 24 18 13       	cmp    DWORD PTR [esp+0x18],0x13
c001cc9b:	7e ab                	jle    c001cc48 <ISAPnPDriver::initialise()+0xb4>
c001cc9d:	83 ec 0c             	sub    esp,0xc
c001cca0:	68 3a ce 02 c0       	push   0xc002ce3a
c001cca5:	e8 d2 a2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ccaa:	83 c4 10             	add    esp,0x10
c001ccad:	e9 2e 01 00 00       	jmp    c001cde0 <ISAPnPDriver::initialise()+0x24c>
c001ccb2:	66 90                	xchg   ax,ax
c001ccb4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001ccb9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ccbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ccc5:	89 d0                	mov    eax,edx
c001ccc7:	31 d2                	xor    edx,edx
c001ccc9:	89 c7                	mov    edi,eax
c001cccb:	89 d5                	mov    ebp,edx
c001cccd:	89 f8                	mov    eax,edi
c001cccf:	83 ec 04             	sub    esp,0x4
c001ccd2:	51                   	push   ecx
c001ccd3:	50                   	push   eax
c001ccd4:	68 68 cf 02 c0       	push   0xc002cf68
c001ccd9:	e8 9e a2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ccde:	83 c4 10             	add    esp,0x10
c001cce1:	83 ec 08             	sub    esp,0x8
c001cce4:	6a 06                	push   0x6
c001cce6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ccea:	e8 55 fe ff ff       	call   c001cb44 <ISAPnPDriver::readRegister(unsigned char)>
c001ccef:	83 c4 10             	add    esp,0x10
c001ccf2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ccf6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ccfb:	83 ec 08             	sub    esp,0x8
c001ccfe:	50                   	push   eax
c001ccff:	68 4d ce 02 c0       	push   0xc002ce4d
c001cd04:	e8 73 a2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cd09:	83 c4 10             	add    esp,0x10
c001cd0c:	c7 44 24 04 88 01 00 00 	mov    DWORD PTR [esp+0x4],0x188
c001cd14:	83 ec 0c             	sub    esp,0xc
c001cd17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cd1b:	e8 d7 35 ff ff       	call   c00102f7 <malloc>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	89 c7                	mov    edi,eax
c001cd25:	83 ec 0c             	sub    esp,0xc
c001cd28:	57                   	push   edi
c001cd29:	e8 82 c9 00 00       	call   c00296b0 <UnknownHardware::UnknownHardware()>
c001cd2e:	83 c4 10             	add    esp,0x10
c001cd31:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001cd35:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cd3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd42:	50                   	push   eax
c001cd43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd47:	e8 94 c9 00 00       	call   c00296e0 <UnknownHardware::setISAPnPDetection(unsigned char, unsigned long long)>
c001cd4c:	83 c4 10             	add    esp,0x10
c001cd4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cd53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001cd56:	83 ec 08             	sub    esp,0x8
c001cd59:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cd5d:	50                   	push   eax
c001cd5e:	e8 19 ac fe ff       	call   c000797c <Hardware::addChild(Hardware*)>
c001cd63:	83 c4 10             	add    esp,0x10
c001cd66:	83 ec 04             	sub    esp,0x4
c001cd69:	6a 00                	push   0x0
c001cd6b:	6a 03                	push   0x3
c001cd6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cd71:	e8 ca fc ff ff       	call   c001ca40 <ISAPnPDriver::writeRegister(unsigned char, unsigned char)>
c001cd76:	83 c4 10             	add    esp,0x10
c001cd79:	e9 ca fe ff ff       	jmp    c001cc48 <ISAPnPDriver::initialise()+0xb4>
c001cd7e:	66 90                	xchg   ax,ax
c001cd80:	90                   	nop
c001cd81:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cd85:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001cd88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cd8c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001cd90:	0f b7 c0             	movzx  eax,ax
c001cd93:	6a 01                	push   0x1
c001cd95:	6a 01                	push   0x1
c001cd97:	50                   	push   eax
c001cd98:	52                   	push   edx
c001cd99:	e8 90 ad fe ff       	call   c0007b2e <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001cd9e:	83 c4 10             	add    esp,0x10
c001cda1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cda5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001cda8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cdac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cdaf:	0f b7 c0             	movzx  eax,ax
c001cdb2:	6a 01                	push   0x1
c001cdb4:	6a 01                	push   0x1
c001cdb6:	50                   	push   eax
c001cdb7:	52                   	push   edx
c001cdb8:	e8 71 ad fe ff       	call   c0007b2e <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001cdbd:	83 c4 10             	add    esp,0x10
c001cdc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cdc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001cdc7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cdcb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cdce:	0f b7 c0             	movzx  eax,ax
c001cdd1:	6a 01                	push   0x1
c001cdd3:	6a 01                	push   0x1
c001cdd5:	50                   	push   eax
c001cdd6:	52                   	push   edx
c001cdd7:	e8 52 ad fe ff       	call   c0007b2e <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001cddc:	83 c4 10             	add    esp,0x10
c001cddf:	90                   	nop
c001cde0:	83 c4 2c             	add    esp,0x2c
c001cde3:	5b                   	pop    ebx
c001cde4:	5e                   	pop    esi
c001cde5:	5f                   	pop    edi
c001cde6:	5d                   	pop    ebp
c001cde7:	c3                   	ret    

c001cde8 <PCIDriver::deinitialise()>:
c001cde8:	90                   	nop
c001cde9:	c3                   	ret    
c001cdea:	66 90                	xchg   ax,ax

c001cdec <PCIDriver::setPowerState(DevicePowerState)>:
c001cdec:	90                   	nop
c001cded:	c3                   	ret    
c001cdee:	66 90                	xchg   ax,ax

c001cdf0 <PCIDriver::getHumanReadableName()>:
c001cdf0:	b8 5f a6 02 c0       	mov    eax,0xc002a65f
c001cdf5:	c3                   	ret    
c001cdf6:	66 90                	xchg   ax,ax

c001cdf8 <PCIDriver::readBAR8(unsigned int, int)>:
c001cdf8:	83 ec 10             	sub    esp,0x10
c001cdfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdff:	83 e0 01             	and    eax,0x1
c001ce02:	74 2c                	je     c001ce30 <PCIDriver::readBAR8(unsigned int, int)+0x38>
c001ce04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce08:	83 e0 fc             	and    eax,0xfffffffc
c001ce0b:	89 c2                	mov    edx,eax
c001ce0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ce11:	01 d0                	add    eax,edx
c001ce13:	0f b7 c0             	movzx  eax,ax
c001ce16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001ce1b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001ce20:	89 c2                	mov    edx,eax
c001ce22:	ec                   	in     al,dx
c001ce23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ce27:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ce2b:	eb 1f                	jmp    c001ce4c <PCIDriver::readBAR8(unsigned int, int)+0x54>
c001ce2d:	8d 76 00             	lea    esi,[esi+0x0]
c001ce30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce34:	83 e0 f0             	and    eax,0xfffffff0
c001ce37:	89 c2                	mov    edx,eax
c001ce39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ce3d:	01 d0                	add    eax,edx
c001ce3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce47:	8a 00                	mov    al,BYTE PTR [eax]
c001ce49:	8d 76 00             	lea    esi,[esi+0x0]
c001ce4c:	83 c4 10             	add    esp,0x10
c001ce4f:	c3                   	ret    

c001ce50 <PCIDriver::readBAR16(unsigned int, int)>:
c001ce50:	83 ec 10             	sub    esp,0x10
c001ce53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce57:	83 e0 01             	and    eax,0x1
c001ce5a:	74 2c                	je     c001ce88 <PCIDriver::readBAR16(unsigned int, int)+0x38>
c001ce5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce60:	83 e0 fc             	and    eax,0xfffffffc
c001ce63:	89 c2                	mov    edx,eax
c001ce65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ce69:	01 d0                	add    eax,edx
c001ce6b:	0f b7 c0             	movzx  eax,ax
c001ce6e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001ce73:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001ce78:	89 c2                	mov    edx,eax
c001ce7a:	66 ed                	in     ax,dx
c001ce7c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001ce81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce85:	eb 1d                	jmp    c001cea4 <PCIDriver::readBAR16(unsigned int, int)+0x54>
c001ce87:	90                   	nop
c001ce88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce8c:	83 e0 f0             	and    eax,0xfffffff0
c001ce8f:	89 c2                	mov    edx,eax
c001ce91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ce95:	01 d0                	add    eax,edx
c001ce97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce9f:	66 8b 00             	mov    ax,WORD PTR [eax]
c001cea2:	66 90                	xchg   ax,ax
c001cea4:	83 c4 10             	add    esp,0x10
c001cea7:	c3                   	ret    

c001cea8 <PCIDriver::readBAR32(unsigned int, int)>:
c001cea8:	83 ec 10             	sub    esp,0x10
c001ceab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ceaf:	83 e0 01             	and    eax,0x1
c001ceb2:	74 2c                	je     c001cee0 <PCIDriver::readBAR32(unsigned int, int)+0x38>
c001ceb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ceb8:	83 e0 fc             	and    eax,0xfffffffc
c001cebb:	89 c2                	mov    edx,eax
c001cebd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cec1:	01 d0                	add    eax,edx
c001cec3:	0f b7 c0             	movzx  eax,ax
c001cec6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001cecb:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001ced0:	89 c2                	mov    edx,eax
c001ced2:	ed                   	in     eax,dx
c001ced3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ced7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cedb:	eb 1f                	jmp    c001cefc <PCIDriver::readBAR32(unsigned int, int)+0x54>
c001cedd:	8d 76 00             	lea    esi,[esi+0x0]
c001cee0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cee4:	83 e0 f0             	and    eax,0xfffffff0
c001cee7:	89 c2                	mov    edx,eax
c001cee9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ceed:	01 d0                	add    eax,edx
c001ceef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cef3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cef7:	8b 00                	mov    eax,DWORD PTR [eax]
c001cef9:	8d 76 00             	lea    esi,[esi+0x0]
c001cefc:	83 c4 10             	add    esp,0x10
c001ceff:	c3                   	ret    

c001cf00 <PCIDriver::writeBAR8(unsigned int, unsigned char, int)>:
c001cf00:	83 ec 14             	sub    esp,0x14
c001cf03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf07:	88 04 24             	mov    BYTE PTR [esp],al
c001cf0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf0e:	83 e0 01             	and    eax,0x1
c001cf11:	74 2d                	je     c001cf40 <PCIDriver::writeBAR8(unsigned int, unsigned char, int)+0x40>
c001cf13:	0f b6 14 24          	movzx  edx,BYTE PTR [esp]
c001cf17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf1b:	83 e0 fc             	and    eax,0xfffffffc
c001cf1e:	89 c1                	mov    ecx,eax
c001cf20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf24:	01 c8                	add    eax,ecx
c001cf26:	0f b7 c0             	movzx  eax,ax
c001cf29:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cf2e:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c001cf32:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001cf36:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001cf3b:	ee                   	out    dx,al
c001cf3c:	eb 1e                	jmp    c001cf5c <PCIDriver::writeBAR8(unsigned int, unsigned char, int)+0x5c>
c001cf3e:	66 90                	xchg   ax,ax
c001cf40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf44:	83 e0 f0             	and    eax,0xfffffff0
c001cf47:	89 c2                	mov    edx,eax
c001cf49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf4d:	01 d0                	add    eax,edx
c001cf4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf57:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001cf5a:	88 10                	mov    BYTE PTR [eax],dl
c001cf5c:	90                   	nop
c001cf5d:	83 c4 14             	add    esp,0x14
c001cf60:	c3                   	ret    
c001cf61:	90                   	nop
c001cf62:	66 90                	xchg   ax,ax

c001cf64 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)>:
c001cf64:	83 ec 14             	sub    esp,0x14
c001cf67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c001cf6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf73:	83 e0 01             	and    eax,0x1
c001cf76:	74 30                	je     c001cfa8 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)+0x44>
c001cf78:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001cf7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf80:	83 e2 fc             	and    edx,0xfffffffc
c001cf83:	89 d1                	mov    ecx,edx
c001cf85:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf89:	01 ca                	add    edx,ecx
c001cf8b:	0f b7 d2             	movzx  edx,dx
c001cf8e:	66 89 54 24 0e       	mov    WORD PTR [esp+0xe],dx
c001cf93:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001cf98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf9c:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001cfa1:	66 ef                	out    dx,ax
c001cfa3:	eb 23                	jmp    c001cfc8 <PCIDriver::writeBAR16(unsigned int, unsigned short, int)+0x64>
c001cfa5:	8d 76 00             	lea    esi,[esi+0x0]
c001cfa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cfac:	83 e0 f0             	and    eax,0xfffffff0
c001cfaf:	89 c2                	mov    edx,eax
c001cfb1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfb5:	01 d0                	add    eax,edx
c001cfb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cfbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cfbf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cfc2:	66 89 02             	mov    WORD PTR [edx],ax
c001cfc5:	8d 76 00             	lea    esi,[esi+0x0]
c001cfc8:	90                   	nop
c001cfc9:	83 c4 14             	add    esp,0x14
c001cfcc:	c3                   	ret    
c001cfcd:	90                   	nop
c001cfce:	66 90                	xchg   ax,ax

c001cfd0 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)>:
c001cfd0:	83 ec 10             	sub    esp,0x10
c001cfd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cfd7:	83 e0 01             	and    eax,0x1
c001cfda:	74 2c                	je     c001d008 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)+0x38>
c001cfdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cfe0:	83 e0 fc             	and    eax,0xfffffffc
c001cfe3:	89 c2                	mov    edx,eax
c001cfe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfe9:	01 d0                	add    eax,edx
c001cfeb:	0f b7 c0             	movzx  eax,ax
c001cfee:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001cff3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cff7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cffb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d004:	ef                   	out    dx,eax
c001d005:	eb 21                	jmp    c001d028 <PCIDriver::writeBAR32(unsigned int, unsigned int, int)+0x58>
c001d007:	90                   	nop
c001d008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d00c:	83 e0 f0             	and    eax,0xfffffff0
c001d00f:	89 c2                	mov    edx,eax
c001d011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d015:	01 d0                	add    eax,edx
c001d017:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d01b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d01f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d023:	89 10                	mov    DWORD PTR [eax],edx
c001d025:	8d 76 00             	lea    esi,[esi+0x0]
c001d028:	90                   	nop
c001d029:	83 c4 10             	add    esp,0x10
c001d02c:	c3                   	ret    
c001d02d:	90                   	nop
c001d02e:	66 90                	xchg   ax,ax

c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d030:	53                   	push   ebx
c001d031:	83 ec 30             	sub    esp,0x30
c001d034:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d038:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d03c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d040:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d044:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
c001d048:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d04c:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d050:	88 04 24             	mov    BYTE PTR [esp],al
c001d053:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d058:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d05c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d065:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d06a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d06e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d072:	c1 e0 10             	shl    eax,0x10
c001d075:	89 c2                	mov    edx,eax
c001d077:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d07b:	c1 e0 0b             	shl    eax,0xb
c001d07e:	09 c2                	or     edx,eax
c001d080:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d084:	c1 e0 08             	shl    eax,0x8
c001d087:	09 c2                	or     edx,eax
c001d089:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001d08d:	25 fc 00 00 00       	and    eax,0xfc
c001d092:	09 d0                	or     eax,edx
c001d094:	0d 00 00 00 80       	or     eax,0x80000000
c001d099:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d09d:	66 c7 44 24 16 f8 0c 	mov    WORD PTR [esp+0x16],0xcf8
c001d0a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0b0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001d0b5:	ef                   	out    dx,eax
c001d0b6:	66 c7 44 24 1e fc 0c 	mov    WORD PTR [esp+0x1e],0xcfc
c001d0bd:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001d0c2:	89 c2                	mov    edx,eax
c001d0c4:	ed                   	in     eax,dx
c001d0c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d0cd:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001d0d1:	83 e0 02             	and    eax,0x2
c001d0d4:	c1 e0 03             	shl    eax,0x3
c001d0d7:	88 c1                	mov    cl,al
c001d0d9:	d3 ea                	shr    edx,cl
c001d0db:	89 d0                	mov    eax,edx
c001d0dd:	83 c4 30             	add    esp,0x30
c001d0e0:	5b                   	pop    ebx
c001d0e1:	c3                   	ret    
c001d0e2:	66 90                	xchg   ax,ax

c001d0e4 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d0e4:	57                   	push   edi
c001d0e5:	56                   	push   esi
c001d0e6:	53                   	push   ebx
c001d0e7:	83 ec 54             	sub    esp,0x54
c001d0ea:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
c001d0ee:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
c001d0f2:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001d0f6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c001d0fa:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c001d0fe:	89 f0                	mov    eax,esi
c001d100:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001d104:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
c001d108:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d10c:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d110:	89 f8                	mov    eax,edi
c001d112:	66 89 04 24          	mov    WORD PTR [esp],ax
c001d116:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d11b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d11f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d124:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001d128:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d12d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d131:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d135:	c1 e0 10             	shl    eax,0x10
c001d138:	89 c2                	mov    edx,eax
c001d13a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d13e:	c1 e0 0b             	shl    eax,0xb
c001d141:	09 c2                	or     edx,eax
c001d143:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d147:	c1 e0 08             	shl    eax,0x8
c001d14a:	09 c2                	or     edx,eax
c001d14c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d151:	25 fc 00 00 00       	and    eax,0xfc
c001d156:	09 d0                	or     eax,edx
c001d158:	0d 00 00 00 80       	or     eax,0x80000000
c001d15d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001d161:	66 c7 44 24 36 f8 0c 	mov    WORD PTR [esp+0x36],0xcf8
c001d168:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d16c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d174:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c001d179:	ef                   	out    dx,eax
c001d17a:	66 c7 44 24 3e fc 0c 	mov    WORD PTR [esp+0x3e],0xcfc
c001d181:	66 8b 44 24 3e       	mov    ax,WORD PTR [esp+0x3e]
c001d186:	89 c2                	mov    edx,eax
c001d188:	ed                   	in     eax,dx
c001d189:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d18d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d191:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001d195:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d19a:	83 e0 02             	and    eax,0x2
c001d19d:	74 15                	je     c001d1b4 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd0>
c001d19f:	81 64 24 50 ff ff 00 00 	and    DWORD PTR [esp+0x50],0xffff
c001d1a7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001d1ab:	c1 e0 10             	shl    eax,0x10
c001d1ae:	09 44 24 50          	or     DWORD PTR [esp+0x50],eax
c001d1b2:	eb 10                	jmp    c001d1c4 <PCIDriver::writeWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xe0>
c001d1b4:	81 64 24 50 00 00 ff ff 	and    DWORD PTR [esp+0x50],0xffff0000
c001d1bc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001d1c0:	09 44 24 50          	or     DWORD PTR [esp+0x50],eax
c001d1c4:	66 c7 44 24 26 f8 0c 	mov    WORD PTR [esp+0x26],0xcf8
c001d1cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d1cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d1d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1d7:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c001d1dc:	ef                   	out    dx,eax
c001d1dd:	66 c7 44 24 2e fc 0c 	mov    WORD PTR [esp+0x2e],0xcfc
c001d1e4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d1e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d1ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1f0:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c001d1f5:	ef                   	out    dx,eax
c001d1f6:	90                   	nop
c001d1f7:	83 c4 54             	add    esp,0x54
c001d1fa:	5b                   	pop    ebx
c001d1fb:	5e                   	pop    esi
c001d1fc:	5f                   	pop    edi
c001d1fd:	c3                   	ret    
c001d1fe:	66 90                	xchg   ax,ax

c001d200 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d200:	83 ec 0c             	sub    esp,0xc
c001d203:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d207:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d20b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d20f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d213:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d217:	88 04 24             	mov    BYTE PTR [esp],al
c001d21a:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d21e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d223:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d228:	6a 00                	push   0x0
c001d22a:	51                   	push   ecx
c001d22b:	52                   	push   edx
c001d22c:	50                   	push   eax
c001d22d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d231:	e8 fa fd ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d236:	83 c4 14             	add    esp,0x14
c001d239:	83 c4 0c             	add    esp,0xc
c001d23c:	c3                   	ret    
c001d23d:	90                   	nop
c001d23e:	66 90                	xchg   ax,ax

c001d240 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d240:	83 ec 0c             	sub    esp,0xc
c001d243:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d247:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d24b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d24f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d253:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d257:	88 04 24             	mov    BYTE PTR [esp],al
c001d25a:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d25e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d263:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d268:	6a 0e                	push   0xe
c001d26a:	51                   	push   ecx
c001d26b:	52                   	push   edx
c001d26c:	50                   	push   eax
c001d26d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d271:	e8 ba fd ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d276:	83 c4 14             	add    esp,0x14
c001d279:	0f b6 c0             	movzx  eax,al
c001d27c:	83 c4 0c             	add    esp,0xc
c001d27f:	c3                   	ret    

c001d280 <PCIDriver::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d280:	83 ec 1c             	sub    esp,0x1c
c001d283:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d287:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d28b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d28f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d293:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d297:	88 04 24             	mov    BYTE PTR [esp],al
c001d29a:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d29e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d2a3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d2a8:	6a 0a                	push   0xa
c001d2aa:	51                   	push   ecx
c001d2ab:	52                   	push   edx
c001d2ac:	50                   	push   eax
c001d2ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d2b1:	e8 7a fd ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2b6:	83 c4 14             	add    esp,0x14
c001d2b9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001d2bd:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d2c1:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d2c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d2cb:	6a 0a                	push   0xa
c001d2cd:	51                   	push   ecx
c001d2ce:	52                   	push   edx
c001d2cf:	50                   	push   eax
c001d2d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d2d4:	e8 57 fd ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2d9:	83 c4 14             	add    esp,0x14
c001d2dc:	0f b7 c0             	movzx  eax,ax
c001d2df:	c1 f8 08             	sar    eax,0x8
c001d2e2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d2e6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d2eb:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c001d2f0:	c1 e2 08             	shl    edx,0x8
c001d2f3:	09 d0                	or     eax,edx
c001d2f5:	83 c4 1c             	add    esp,0x1c
c001d2f8:	c3                   	ret    
c001d2f9:	90                   	nop
c001d2fa:	66 90                	xchg   ax,ax

c001d2fc <PCIDriver::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d2fc:	83 ec 0c             	sub    esp,0xc
c001d2ff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d303:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d30b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d30f:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d313:	88 04 24             	mov    BYTE PTR [esp],al
c001d316:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d31a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d31f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d324:	6a 08                	push   0x8
c001d326:	51                   	push   ecx
c001d327:	52                   	push   edx
c001d328:	50                   	push   eax
c001d329:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d32d:	e8 fe fc ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d332:	83 c4 14             	add    esp,0x14
c001d335:	0f b7 c0             	movzx  eax,ax
c001d338:	c1 f8 08             	sar    eax,0x8
c001d33b:	83 c4 0c             	add    esp,0xc
c001d33e:	c3                   	ret    
c001d33f:	90                   	nop

c001d340 <PCIDriver::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d340:	83 ec 0c             	sub    esp,0xc
c001d343:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d347:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d34b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d34f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d353:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d357:	88 04 24             	mov    BYTE PTR [esp],al
c001d35a:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d35e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d363:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d368:	6a 08                	push   0x8
c001d36a:	51                   	push   ecx
c001d36b:	52                   	push   edx
c001d36c:	50                   	push   eax
c001d36d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d371:	e8 ba fc ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d376:	83 c4 14             	add    esp,0x14
c001d379:	83 c4 0c             	add    esp,0xc
c001d37c:	c3                   	ret    
c001d37d:	90                   	nop
c001d37e:	66 90                	xchg   ax,ax

c001d380 <PCIDriver::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d380:	83 ec 0c             	sub    esp,0xc
c001d383:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d387:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d38b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d38f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d393:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d397:	88 04 24             	mov    BYTE PTR [esp],al
c001d39a:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d39e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d3a3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d3a8:	6a 3c                	push   0x3c
c001d3aa:	51                   	push   ecx
c001d3ab:	52                   	push   edx
c001d3ac:	50                   	push   eax
c001d3ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3b1:	e8 7a fc ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3b6:	83 c4 14             	add    esp,0x14
c001d3b9:	83 c4 0c             	add    esp,0xc
c001d3bc:	c3                   	ret    
c001d3bd:	90                   	nop
c001d3be:	66 90                	xchg   ax,ax

c001d3c0 <PCIDriver::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d3c0:	83 ec 0c             	sub    esp,0xc
c001d3c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d3c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d3cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3cf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d3d3:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d3d7:	88 04 24             	mov    BYTE PTR [esp],al
c001d3da:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d3de:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d3e3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d3e8:	6a 18                	push   0x18
c001d3ea:	51                   	push   ecx
c001d3eb:	52                   	push   edx
c001d3ec:	50                   	push   eax
c001d3ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3f1:	e8 3a fc ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3f6:	83 c4 14             	add    esp,0x14
c001d3f9:	0f b7 c0             	movzx  eax,ax
c001d3fc:	c1 f8 08             	sar    eax,0x8
c001d3ff:	83 c4 0c             	add    esp,0xc
c001d402:	c3                   	ret    
c001d403:	90                   	nop

c001d404 <PCIDriver::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d404:	56                   	push   esi
c001d405:	53                   	push   ebx
c001d406:	83 ec 10             	sub    esp,0x10
c001d409:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d40d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d411:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d415:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d419:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
c001d41d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001d421:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001d425:	88 04 24             	mov    BYTE PTR [esp],al
c001d428:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d42c:	c1 e0 02             	shl    eax,0x2
c001d42f:	83 c0 12             	add    eax,0x12
c001d432:	0f b6 d8             	movzx  ebx,al
c001d435:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d439:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d43e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d443:	53                   	push   ebx
c001d444:	51                   	push   ecx
c001d445:	52                   	push   edx
c001d446:	50                   	push   eax
c001d447:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d44b:	e8 e0 fb ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d450:	83 c4 14             	add    esp,0x14
c001d453:	0f b7 c0             	movzx  eax,ax
c001d456:	c1 e0 10             	shl    eax,0x10
c001d459:	89 c6                	mov    esi,eax
c001d45b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d45f:	83 c0 04             	add    eax,0x4
c001d462:	c1 e0 02             	shl    eax,0x2
c001d465:	0f b6 d8             	movzx  ebx,al
c001d468:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001d46c:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001d471:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d476:	53                   	push   ebx
c001d477:	51                   	push   ecx
c001d478:	52                   	push   edx
c001d479:	50                   	push   eax
c001d47a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d47e:	e8 ad fb ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d483:	83 c4 14             	add    esp,0x14
c001d486:	0f b7 c0             	movzx  eax,ax
c001d489:	09 f0                	or     eax,esi
c001d48b:	83 c4 10             	add    esp,0x10
c001d48e:	5b                   	pop    ebx
c001d48f:	5e                   	pop    esi
c001d490:	c3                   	ret    
c001d491:	90                   	nop
c001d492:	66 90                	xchg   ax,ax

c001d494 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)>:
c001d494:	83 ec 0c             	sub    esp,0xc
c001d497:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d49b:	0f b6 c0             	movzx  eax,al
c001d49e:	83 f8 40             	cmp    eax,0x40
c001d4a1:	0f 87 65 05 00 00    	ja     c001da0c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x578>
c001d4a7:	8b 04 85 10 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27f0]
c001d4ae:	ff e0                	jmp    eax
c001d4b0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d4b4:	0f b6 c0             	movzx  eax,al
c001d4b7:	83 f8 01             	cmp    eax,0x1
c001d4ba:	75 0c                	jne    c001d4c8 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x34>
c001d4bc:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c001d4c1:	e9 72 05 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d4c6:	66 90                	xchg   ax,ax
c001d4c8:	b8 f8 cf 02 c0       	mov    eax,0xc002cff8
c001d4cd:	e9 66 05 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d4d2:	66 90                	xchg   ax,ax
c001d4d4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d4d8:	0f b6 c0             	movzx  eax,al
c001d4db:	83 f8 08             	cmp    eax,0x8
c001d4de:	77 6c                	ja     c001d54c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0xb8>
c001d4e0:	8b 04 85 14 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd26ec]
c001d4e7:	ff e0                	jmp    eax
c001d4e9:	8d 76 00             	lea    esi,[esi+0x0]
c001d4ec:	b8 09 d0 02 c0       	mov    eax,0xc002d009
c001d4f1:	e9 42 05 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d4f6:	66 90                	xchg   ax,ax
c001d4f8:	b8 1d d0 02 c0       	mov    eax,0xc002d01d
c001d4fd:	e9 36 05 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d502:	66 90                	xchg   ax,ax
c001d504:	b8 30 d0 02 c0       	mov    eax,0xc002d030
c001d509:	e9 2a 05 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d50e:	66 90                	xchg   ax,ax
c001d510:	b8 4b d0 02 c0       	mov    eax,0xc002d04b
c001d515:	e9 1e 05 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d51a:	66 90                	xchg   ax,ax
c001d51c:	b8 62 d0 02 c0       	mov    eax,0xc002d062
c001d521:	e9 12 05 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d526:	66 90                	xchg   ax,ax
c001d528:	b8 76 d0 02 c0       	mov    eax,0xc002d076
c001d52d:	e9 06 05 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d532:	66 90                	xchg   ax,ax
c001d534:	b8 89 d0 02 c0       	mov    eax,0xc002d089
c001d539:	e9 fa 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d53e:	66 90                	xchg   ax,ax
c001d540:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c001d545:	e9 ee 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d54a:	66 90                	xchg   ax,ax
c001d54c:	b8 9d d0 02 c0       	mov    eax,0xc002d09d
c001d551:	e9 e2 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d556:	66 90                	xchg   ax,ax
c001d558:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d55c:	0f b6 c0             	movzx  eax,al
c001d55f:	85 c0                	test   eax,eax
c001d561:	75 0d                	jne    c001d570 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0xdc>
c001d563:	b8 b5 d0 02 c0       	mov    eax,0xc002d0b5
c001d568:	e9 cb 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d56d:	8d 76 00             	lea    esi,[esi+0x0]
c001d570:	b8 cd d0 02 c0       	mov    eax,0xc002d0cd
c001d575:	e9 be 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d57a:	66 90                	xchg   ax,ax
c001d57c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d580:	0f b6 c0             	movzx  eax,al
c001d583:	83 f8 01             	cmp    eax,0x1
c001d586:	74 14                	je     c001d59c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x108>
c001d588:	83 f8 02             	cmp    eax,0x2
c001d58b:	74 1b                	je     c001d5a8 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x114>
c001d58d:	85 c0                	test   eax,eax
c001d58f:	75 23                	jne    c001d5b4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x120>
c001d591:	b8 94 d6 02 c0       	mov    eax,0xc002d694
c001d596:	e9 9d 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d59b:	90                   	nop
c001d59c:	b8 e4 d0 02 c0       	mov    eax,0xc002d0e4
c001d5a1:	e9 92 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d5a6:	66 90                	xchg   ax,ax
c001d5a8:	b8 f7 d0 02 c0       	mov    eax,0xc002d0f7
c001d5ad:	e9 86 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d5b2:	66 90                	xchg   ax,ax
c001d5b4:	b8 09 d1 02 c0       	mov    eax,0xc002d109
c001d5b9:	e9 7a 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d5be:	66 90                	xchg   ax,ax
c001d5c0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d5c4:	0f b6 c0             	movzx  eax,al
c001d5c7:	83 f8 01             	cmp    eax,0x1
c001d5ca:	74 24                	je     c001d5f0 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x15c>
c001d5cc:	83 f8 01             	cmp    eax,0x1
c001d5cf:	7f 07                	jg     c001d5d8 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x144>
c001d5d1:	85 c0                	test   eax,eax
c001d5d3:	74 0f                	je     c001d5e4 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x150>
c001d5d5:	eb 3d                	jmp    c001d614 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x180>
c001d5d7:	90                   	nop
c001d5d8:	83 f8 02             	cmp    eax,0x2
c001d5db:	74 1f                	je     c001d5fc <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x168>
c001d5dd:	83 f8 03             	cmp    eax,0x3
c001d5e0:	74 26                	je     c001d608 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x174>
c001d5e2:	eb 30                	jmp    c001d614 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x180>
c001d5e4:	b8 20 d1 02 c0       	mov    eax,0xc002d120
c001d5e9:	e9 4a 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d5ee:	66 90                	xchg   ax,ax
c001d5f0:	b8 35 d1 02 c0       	mov    eax,0xc002d135
c001d5f5:	e9 3e 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d5fa:	66 90                	xchg   ax,ax
c001d5fc:	b8 4a d1 02 c0       	mov    eax,0xc002d14a
c001d601:	e9 32 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d606:	66 90                	xchg   ax,ax
c001d608:	b8 5f d1 02 c0       	mov    eax,0xc002d15f
c001d60d:	e9 26 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d612:	66 90                	xchg   ax,ax
c001d614:	b8 70 d1 02 c0       	mov    eax,0xc002d170
c001d619:	e9 1a 04 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d61e:	66 90                	xchg   ax,ax
c001d620:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d624:	0f b6 c0             	movzx  eax,al
c001d627:	85 c0                	test   eax,eax
c001d629:	74 09                	je     c001d634 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x1a0>
c001d62b:	83 f8 01             	cmp    eax,0x1
c001d62e:	74 10                	je     c001d640 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x1ac>
c001d630:	eb 1a                	jmp    c001d64c <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x1b8>
c001d632:	66 90                	xchg   ax,ax
c001d634:	b8 8a d1 02 c0       	mov    eax,0xc002d18a
c001d639:	e9 fa 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d63e:	66 90                	xchg   ax,ax
c001d640:	b8 9d d1 02 c0       	mov    eax,0xc002d19d
c001d645:	e9 ee 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d64a:	66 90                	xchg   ax,ax
c001d64c:	b8 b9 d1 02 c0       	mov    eax,0xc002d1b9
c001d651:	e9 e2 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d656:	66 90                	xchg   ax,ax
c001d658:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d65c:	0f b6 c0             	movzx  eax,al
c001d65f:	83 f8 0a             	cmp    eax,0xa
c001d662:	0f 87 84 00 00 00    	ja     c001d6ec <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x258>
c001d668:	8b 04 85 38 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd26c8]
c001d66f:	ff e0                	jmp    eax
c001d671:	8d 76 00             	lea    esi,[esi+0x0]
c001d674:	b8 56 d2 02 c0       	mov    eax,0xc002d256
c001d679:	e9 ba 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d67e:	66 90                	xchg   ax,ax
c001d680:	b8 cf d1 02 c0       	mov    eax,0xc002d1cf
c001d685:	e9 ae 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d68a:	66 90                	xchg   ax,ax
c001d68c:	b8 de d1 02 c0       	mov    eax,0xc002d1de
c001d691:	e9 a2 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d696:	66 90                	xchg   ax,ax
c001d698:	b8 ee d1 02 c0       	mov    eax,0xc002d1ee
c001d69d:	e9 96 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6a2:	66 90                	xchg   ax,ax
c001d6a4:	b8 fd d1 02 c0       	mov    eax,0xc002d1fd
c001d6a9:	e9 8a 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6ae:	66 90                	xchg   ax,ax
c001d6b0:	b8 0f d2 02 c0       	mov    eax,0xc002d20f
c001d6b5:	e9 7e 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6ba:	66 90                	xchg   ax,ax
c001d6bc:	b8 1d d2 02 c0       	mov    eax,0xc002d21d
c001d6c1:	e9 72 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6c6:	66 90                	xchg   ax,ax
c001d6c8:	b8 2a d2 02 c0       	mov    eax,0xc002d22a
c001d6cd:	e9 66 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6d2:	66 90                	xchg   ax,ax
c001d6d4:	b8 39 d2 02 c0       	mov    eax,0xc002d239
c001d6d9:	e9 5a 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6de:	66 90                	xchg   ax,ax
c001d6e0:	b8 48 d2 02 c0       	mov    eax,0xc002d248
c001d6e5:	e9 4e 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6ea:	66 90                	xchg   ax,ax
c001d6ec:	b8 66 d2 02 c0       	mov    eax,0xc002d266
c001d6f1:	e9 42 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d6f6:	66 90                	xchg   ax,ax
c001d6f8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d6fc:	0f b6 c0             	movzx  eax,al
c001d6ff:	83 f8 05             	cmp    eax,0x5
c001d702:	77 54                	ja     c001d758 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x2c4>
c001d704:	8b 04 85 64 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd269c]
c001d70b:	ff e0                	jmp    eax
c001d70d:	8d 76 00             	lea    esi,[esi+0x0]
c001d710:	b8 77 d2 02 c0       	mov    eax,0xc002d277
c001d715:	e9 1e 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d71a:	66 90                	xchg   ax,ax
c001d71c:	b8 8d d2 02 c0       	mov    eax,0xc002d28d
c001d721:	e9 12 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d726:	66 90                	xchg   ax,ax
c001d728:	b8 b8 d6 02 c0       	mov    eax,0xc002d6b8
c001d72d:	e9 06 03 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d732:	66 90                	xchg   ax,ax
c001d734:	b8 a5 d2 02 c0       	mov    eax,0xc002d2a5
c001d739:	e9 fa 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d73e:	66 90                	xchg   ax,ax
c001d740:	b8 af d2 02 c0       	mov    eax,0xc002d2af
c001d745:	e9 ee 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d74a:	66 90                	xchg   ax,ax
c001d74c:	b8 c7 d2 02 c0       	mov    eax,0xc002d2c7
c001d751:	e9 e2 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d756:	66 90                	xchg   ax,ax
c001d758:	b8 e1 d2 02 c0       	mov    eax,0xc002d2e1
c001d75d:	e9 d6 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d762:	66 90                	xchg   ax,ax
c001d764:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d768:	0f b6 c0             	movzx  eax,al
c001d76b:	83 f8 06             	cmp    eax,0x6
c001d76e:	77 60                	ja     c001d7d0 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x33c>
c001d770:	8b 04 85 7c d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2684]
c001d777:	ff e0                	jmp    eax
c001d779:	8d 76 00             	lea    esi,[esi+0x0]
c001d77c:	b8 d8 d6 02 c0       	mov    eax,0xc002d6d8
c001d781:	e9 b2 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d786:	66 90                	xchg   ax,ax
c001d788:	b8 fe d2 02 c0       	mov    eax,0xc002d2fe
c001d78d:	e9 a6 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d792:	66 90                	xchg   ax,ax
c001d794:	b8 11 d3 02 c0       	mov    eax,0xc002d311
c001d799:	e9 9a 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d79e:	66 90                	xchg   ax,ax
c001d7a0:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c001d7a5:	e9 8e 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d7aa:	66 90                	xchg   ax,ax
c001d7ac:	b8 1b d3 02 c0       	mov    eax,0xc002d31b
c001d7b1:	e9 82 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d7b6:	66 90                	xchg   ax,ax
c001d7b8:	b8 33 d3 02 c0       	mov    eax,0xc002d333
c001d7bd:	e9 76 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d7c2:	66 90                	xchg   ax,ax
c001d7c4:	b8 4a d3 02 c0       	mov    eax,0xc002d34a
c001d7c9:	e9 6a 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d7ce:	66 90                	xchg   ax,ax
c001d7d0:	b8 54 d3 02 c0       	mov    eax,0xc002d354
c001d7d5:	e9 5e 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d7da:	66 90                	xchg   ax,ax
c001d7dc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d7e0:	0f b6 c0             	movzx  eax,al
c001d7e3:	83 f8 04             	cmp    eax,0x4
c001d7e6:	77 48                	ja     c001d830 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x39c>
c001d7e8:	8b 04 85 98 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2668]
c001d7ef:	ff e0                	jmp    eax
c001d7f1:	8d 76 00             	lea    esi,[esi+0x0]
c001d7f4:	b8 6a d3 02 c0       	mov    eax,0xc002d36a
c001d7f9:	e9 3a 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d7fe:	66 90                	xchg   ax,ax
c001d800:	b8 82 d3 02 c0       	mov    eax,0xc002d382
c001d805:	e9 2e 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d80a:	66 90                	xchg   ax,ax
c001d80c:	b8 94 d3 02 c0       	mov    eax,0xc002d394
c001d811:	e9 22 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d816:	66 90                	xchg   ax,ax
c001d818:	b8 a9 d3 02 c0       	mov    eax,0xc002d3a9
c001d81d:	e9 16 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d822:	66 90                	xchg   ax,ax
c001d824:	b8 c1 d3 02 c0       	mov    eax,0xc002d3c1
c001d829:	e9 0a 02 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d82e:	66 90                	xchg   ax,ax
c001d830:	b8 da d3 02 c0       	mov    eax,0xc002d3da
c001d835:	e9 fe 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d83a:	66 90                	xchg   ax,ax
c001d83c:	b8 f6 d3 02 c0       	mov    eax,0xc002d3f6
c001d841:	e9 f2 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d846:	66 90                	xchg   ax,ax
c001d848:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d84c:	0f b6 c0             	movzx  eax,al
c001d84f:	83 f8 40             	cmp    eax,0x40
c001d852:	77 6c                	ja     c001d8c0 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x42c>
c001d854:	8b 04 85 ac d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2654]
c001d85b:	ff e0                	jmp    eax
c001d85d:	8d 76 00             	lea    esi,[esi+0x0]
c001d860:	b8 0a d4 02 c0       	mov    eax,0xc002d40a
c001d865:	e9 ce 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d86a:	66 90                	xchg   ax,ax
c001d86c:	b8 19 d4 02 c0       	mov    eax,0xc002d419
c001d871:	e9 c2 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d876:	66 90                	xchg   ax,ax
c001d878:	b8 28 d4 02 c0       	mov    eax,0xc002d428
c001d87d:	e9 b6 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d882:	66 90                	xchg   ax,ax
c001d884:	b8 3a d4 02 c0       	mov    eax,0xc002d43a
c001d889:	e9 aa 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d88e:	66 90                	xchg   ax,ax
c001d890:	b8 50 d4 02 c0       	mov    eax,0xc002d450
c001d895:	e9 9e 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d89a:	66 90                	xchg   ax,ax
c001d89c:	b8 60 d4 02 c0       	mov    eax,0xc002d460
c001d8a1:	e9 92 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d8a6:	66 90                	xchg   ax,ax
c001d8a8:	b8 72 d4 02 c0       	mov    eax,0xc002d472
c001d8ad:	e9 86 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d8b2:	66 90                	xchg   ax,ax
c001d8b4:	b8 81 d4 02 c0       	mov    eax,0xc002d481
c001d8b9:	e9 7a 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d8be:	66 90                	xchg   ax,ax
c001d8c0:	b8 8e d4 02 c0       	mov    eax,0xc002d48e
c001d8c5:	e9 6e 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d8ca:	66 90                	xchg   ax,ax
c001d8cc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d8d0:	0f b6 c0             	movzx  eax,al
c001d8d3:	83 f8 09             	cmp    eax,0x9
c001d8d6:	0f 87 84 00 00 00    	ja     c001d960 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x4cc>
c001d8dc:	8b 04 85 b0 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2550]
c001d8e3:	ff e0                	jmp    eax
c001d8e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d8e8:	b8 9e d4 02 c0       	mov    eax,0xc002d49e
c001d8ed:	e9 46 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d8f2:	66 90                	xchg   ax,ax
c001d8f4:	b8 b6 d4 02 c0       	mov    eax,0xc002d4b6
c001d8f9:	e9 3a 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d8fe:	66 90                	xchg   ax,ax
c001d900:	b8 d0 d4 02 c0       	mov    eax,0xc002d4d0
c001d905:	e9 2e 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d90a:	66 90                	xchg   ax,ax
c001d90c:	b8 d8 d4 02 c0       	mov    eax,0xc002d4d8
c001d911:	e9 22 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d916:	66 90                	xchg   ax,ax
c001d918:	b8 eb d4 02 c0       	mov    eax,0xc002d4eb
c001d91d:	e9 16 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d922:	66 90                	xchg   ax,ax
c001d924:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c001d929:	e9 0a 01 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d92e:	66 90                	xchg   ax,ax
c001d930:	b8 15 d5 02 c0       	mov    eax,0xc002d515
c001d935:	e9 fe 00 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d93a:	66 90                	xchg   ax,ax
c001d93c:	b8 2f d5 02 c0       	mov    eax,0xc002d52f
c001d941:	e9 f2 00 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d946:	66 90                	xchg   ax,ax
c001d948:	b8 42 d5 02 c0       	mov    eax,0xc002d542
c001d94d:	e9 e6 00 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d952:	66 90                	xchg   ax,ax
c001d954:	b8 57 d5 02 c0       	mov    eax,0xc002d557
c001d959:	e9 da 00 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d95e:	66 90                	xchg   ax,ax
c001d960:	b8 6c d5 02 c0       	mov    eax,0xc002d56c
c001d965:	e9 ce 00 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d96a:	66 90                	xchg   ax,ax
c001d96c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d970:	0f b6 c0             	movzx  eax,al
c001d973:	83 f8 21             	cmp    eax,0x21
c001d976:	77 54                	ja     c001d9cc <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x538>
c001d978:	8b 04 85 d8 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2528]
c001d97f:	ff e0                	jmp    eax
c001d981:	8d 76 00             	lea    esi,[esi+0x0]
c001d984:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c001d989:	e9 aa 00 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d98e:	66 90                	xchg   ax,ax
c001d990:	b8 86 d5 02 c0       	mov    eax,0xc002d586
c001d995:	e9 9e 00 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d99a:	66 90                	xchg   ax,ax
c001d99c:	b8 98 d5 02 c0       	mov    eax,0xc002d598
c001d9a1:	e9 92 00 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9a6:	66 90                	xchg   ax,ax
c001d9a8:	b8 aa d5 02 c0       	mov    eax,0xc002d5aa
c001d9ad:	e9 86 00 00 00       	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9b2:	66 90                	xchg   ax,ax
c001d9b4:	b8 c3 d5 02 c0       	mov    eax,0xc002d5c3
c001d9b9:	eb 7d                	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9bb:	90                   	nop
c001d9bc:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c001d9c1:	eb 75                	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9c3:	90                   	nop
c001d9c4:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c001d9c9:	eb 6d                	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9cb:	90                   	nop
c001d9cc:	b8 dc d5 02 c0       	mov    eax,0xc002d5dc
c001d9d1:	eb 65                	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9d3:	90                   	nop
c001d9d4:	b8 f4 d5 02 c0       	mov    eax,0xc002d5f4
c001d9d9:	eb 5d                	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9db:	90                   	nop
c001d9dc:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c001d9e1:	eb 55                	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9e3:	90                   	nop
c001d9e4:	b8 0f d6 02 c0       	mov    eax,0xc002d60f
c001d9e9:	eb 4d                	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9eb:	90                   	nop
c001d9ec:	b8 a8 d7 02 c0       	mov    eax,0xc002d7a8
c001d9f1:	eb 45                	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9f3:	90                   	nop
c001d9f4:	b8 29 d6 02 c0       	mov    eax,0xc002d629
c001d9f9:	eb 3d                	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001d9fb:	90                   	nop
c001d9fc:	b8 cc d7 02 c0       	mov    eax,0xc002d7cc
c001da01:	eb 35                	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001da03:	90                   	nop
c001da04:	b8 81 d4 02 c0       	mov    eax,0xc002d481
c001da09:	eb 2d                	jmp    c001da38 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)+0x5a4>
c001da0b:	90                   	nop
c001da0c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001da10:	0f b6 c8             	movzx  ecx,al
c001da13:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001da17:	0f b6 d0             	movzx  edx,al
c001da1a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da1e:	0f b6 c0             	movzx  eax,al
c001da21:	51                   	push   ecx
c001da22:	52                   	push   edx
c001da23:	50                   	push   eax
c001da24:	68 f0 d7 02 c0       	push   0xc002d7f0
c001da29:	e8 4e 95 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001da2e:	83 c4 10             	add    esp,0x10
c001da31:	b8 44 d6 02 c0       	mov    eax,0xc002d644
c001da36:	66 90                	xchg   ax,ax
c001da38:	83 c4 0c             	add    esp,0xc
c001da3b:	c3                   	ret    

c001da3c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)>:
c001da3c:	55                   	push   ebp
c001da3d:	57                   	push   edi
c001da3e:	56                   	push   esi
c001da3f:	53                   	push   ebx
c001da40:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001da46:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001da4d:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001da54:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c001da5b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001da5f:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c001da63:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001da67:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001da6c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001da71:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001da76:	6a 0c                	push   0xc
c001da78:	51                   	push   ecx
c001da79:	52                   	push   edx
c001da7a:	50                   	push   eax
c001da7b:	ff b4 24 b0 00 00 00 	push   DWORD PTR [esp+0xb0]
c001da82:	e8 a9 f5 ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da87:	83 c4 14             	add    esp,0x14
c001da8a:	0f b7 c0             	movzx  eax,ax
c001da8d:	c1 f8 10             	sar    eax,0x10
c001da90:	25 ff 00 00 00       	and    eax,0xff
c001da95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c001da99:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c001da9e:	0f 85 b4 02 00 00    	jne    c001dd58 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x31c>
c001daa4:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001daa9:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001daae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dab3:	51                   	push   ecx
c001dab4:	52                   	push   edx
c001dab5:	50                   	push   eax
c001dab6:	ff b4 24 ac 00 00 00 	push   DWORD PTR [esp+0xac]
c001dabd:	e8 3e f7 ff ff       	call   c001d200 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001dac2:	83 c4 10             	add    esp,0x10
c001dac5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001daca:	0f b7 44 24 6e       	movzx  eax,WORD PTR [esp+0x6e]
c001dacf:	3d ff ff 00 00       	cmp    eax,0xffff
c001dad4:	0f 84 82 02 00 00    	je     c001dd5c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x320>
c001dada:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001dadf:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001dae4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dae9:	51                   	push   ecx
c001daea:	52                   	push   edx
c001daeb:	50                   	push   eax
c001daec:	ff b4 24 ac 00 00 00 	push   DWORD PTR [esp+0xac]
c001daf3:	e8 88 f7 ff ff       	call   c001d280 <PCIDriver::getClassCode(unsigned char, unsigned char, unsigned char)>
c001daf8:	83 c4 10             	add    esp,0x10
c001dafb:	66 89 44 24 6c       	mov    WORD PTR [esp+0x6c],ax
c001db00:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001db05:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001db0a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db0f:	51                   	push   ecx
c001db10:	52                   	push   edx
c001db11:	50                   	push   eax
c001db12:	ff b4 24 ac 00 00 00 	push   DWORD PTR [esp+0xac]
c001db19:	e8 62 f8 ff ff       	call   c001d380 <PCIDriver::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001db1e:	83 c4 10             	add    esp,0x10
c001db21:	88 44 24 7f          	mov    BYTE PTR [esp+0x7f],al
c001db25:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001db2a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001db2f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db34:	6a 3c                	push   0x3c
c001db36:	51                   	push   ecx
c001db37:	52                   	push   edx
c001db38:	50                   	push   eax
c001db39:	ff b4 24 b0 00 00 00 	push   DWORD PTR [esp+0xb0]
c001db40:	e8 eb f4 ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001db45:	83 c4 14             	add    esp,0x14
c001db48:	0f b7 c0             	movzx  eax,ax
c001db4b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001db4f:	c1 6c 24 68 08       	shr    DWORD PTR [esp+0x68],0x8
c001db54:	81 64 24 68 ff 00 00 00 	and    DWORD PTR [esp+0x68],0xff
c001db5c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001db60:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001db64:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001db69:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001db6f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001db75:	85 c0                	test   eax,eax
c001db77:	0f 84 87 00 00 00    	je     c001dc04 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x1c8>
c001db7d:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c001db85:	8d 76 00             	lea    esi,[esi+0x0]
c001db88:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001db8d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001db93:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001db99:	39 44 24 78          	cmp    DWORD PTR [esp+0x78],eax
c001db9d:	7d 65                	jge    c001dc04 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x1c8>
c001db9f:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001dba4:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001dba9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001dbaf:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001dbb3:	83 c1 2a             	add    ecx,0x2a
c001dbb6:	8b 44 c8 0c          	mov    eax,DWORD PTR [eax+ecx*8+0xc]
c001dbba:	0f b7 c0             	movzx  eax,ax
c001dbbd:	39 c2                	cmp    edx,eax
c001dbbf:	75 3b                	jne    c001dbfc <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x1c0>
c001dbc1:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001dbc6:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001dbcc:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c001dbd0:	83 c2 2a             	add    edx,0x2a
c001dbd3:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001dbd7:	0f b6 c0             	movzx  eax,al
c001dbda:	39 44 24 68          	cmp    DWORD PTR [esp+0x68],eax
c001dbde:	75 1c                	jne    c001dbfc <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x1c0>
c001dbe0:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c001dbe5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001dbeb:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c001dbef:	83 c2 2a             	add    edx,0x2a
c001dbf2:	8a 44 d0 0f          	mov    al,BYTE PTR [eax+edx*8+0xf]
c001dbf6:	88 44 24 7f          	mov    BYTE PTR [esp+0x7f],al
c001dbfa:	66 90                	xchg   ax,ax
c001dbfc:	83 44 24 78 01       	add    DWORD PTR [esp+0x78],0x1
c001dc01:	eb 85                	jmp    c001db88 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x14c>
c001dc03:	90                   	nop
c001dc04:	c7 44 24 74 00 00 00 00 	mov    DWORD PTR [esp+0x74],0x0
c001dc0c:	83 7c 24 74 05       	cmp    DWORD PTR [esp+0x74],0x5
c001dc11:	7f 3d                	jg     c001dc50 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x214>
c001dc13:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c001dc18:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001dc1d:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001dc22:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001dc26:	0f b6 c0             	movzx  eax,al
c001dc29:	53                   	push   ebx
c001dc2a:	51                   	push   ecx
c001dc2b:	52                   	push   edx
c001dc2c:	50                   	push   eax
c001dc2d:	ff b4 24 b0 00 00 00 	push   DWORD PTR [esp+0xb0]
c001dc34:	e8 cb f7 ff ff       	call   c001d404 <PCIDriver::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc39:	83 c4 14             	add    esp,0x14
c001dc3c:	89 c2                	mov    edx,eax
c001dc3e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001dc42:	89 54 84 20          	mov    DWORD PTR [esp+eax*4+0x20],edx
c001dc46:	83 44 24 74 01       	add    DWORD PTR [esp+0x74],0x1
c001dc4b:	eb bf                	jmp    c001dc0c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x1d0>
c001dc4d:	8d 76 00             	lea    esi,[esi+0x0]
c001dc50:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dc54:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001dc58:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001dc5c:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001dc60:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001dc64:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001dc68:	0f b7 44 24 6c       	movzx  eax,WORD PTR [esp+0x6c]
c001dc6d:	c1 f8 08             	sar    eax,0x8
c001dc70:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001dc74:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c001dc78:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001dc7c:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c001dc80:	0f b6 c8             	movzx  ecx,al
c001dc83:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c001dc87:	0f b6 d0             	movzx  edx,al
c001dc8a:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001dc8e:	0f b6 c0             	movzx  eax,al
c001dc91:	6a 02                	push   0x2
c001dc93:	51                   	push   ecx
c001dc94:	52                   	push   edx
c001dc95:	50                   	push   eax
c001dc96:	ff b4 24 b0 00 00 00 	push   DWORD PTR [esp+0xb0]
c001dc9d:	e8 8e f3 ff ff       	call   c001d030 <PCIDriver::readWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dca2:	83 c4 14             	add    esp,0x14
c001dca5:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001dcaa:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001dcaf:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001dcb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcb9:	51                   	push   ecx
c001dcba:	52                   	push   edx
c001dcbb:	50                   	push   eax
c001dcbc:	ff b4 24 ac 00 00 00 	push   DWORD PTR [esp+0xac]
c001dcc3:	e8 34 f6 ff ff       	call   c001d2fc <PCIDriver::getProgIF(unsigned char, unsigned char, unsigned char)>
c001dcc8:	83 c4 10             	add    esp,0x10
c001dccb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dccf:	66 8b 44 24 6e       	mov    ax,WORD PTR [esp+0x6e]
c001dcd4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001dcd9:	8a 44 24 7f          	mov    al,BYTE PTR [esp+0x7f]
c001dcdd:	88 44 24 38          	mov    BYTE PTR [esp+0x38],al
c001dce1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001dce5:	8d 54 24 18          	lea    edx,[esp+0x18]
c001dce9:	b9 09 00 00 00       	mov    ecx,0x9
c001dcee:	fc                   	cld    
c001dcef:	89 c7                	mov    edi,eax
c001dcf1:	89 d6                	mov    esi,edx
c001dcf3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dcf5:	c7 44 24 60 88 01 00 00 	mov    DWORD PTR [esp+0x60],0x188
c001dcfd:	83 ec 0c             	sub    esp,0xc
c001dd00:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001dd04:	e8 ee 25 ff ff       	call   c00102f7 <malloc>
c001dd09:	83 c4 10             	add    esp,0x10
c001dd0c:	89 c5                	mov    ebp,eax
c001dd0e:	83 ec 08             	sub    esp,0x8
c001dd11:	83 ec 24             	sub    esp,0x24
c001dd14:	89 e0                	mov    eax,esp
c001dd16:	89 c3                	mov    ebx,eax
c001dd18:	8d 44 24 68          	lea    eax,[esp+0x68]
c001dd1c:	ba 09 00 00 00       	mov    edx,0x9
c001dd21:	89 df                	mov    edi,ebx
c001dd23:	89 c6                	mov    esi,eax
c001dd25:	89 d1                	mov    ecx,edx
c001dd27:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dd29:	55                   	push   ebp
c001dd2a:	e8 55 ba 00 00       	call   c0029784 <UnknownHardware::UnknownHardware(DevicePCIConnectionInfo)>
c001dd2f:	83 c4 30             	add    esp,0x30
c001dd32:	89 6c 24 64          	mov    DWORD PTR [esp+0x64],ebp
c001dd36:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c001dd3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd40:	83 ec 08             	sub    esp,0x8
c001dd43:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001dd47:	50                   	push   eax
c001dd48:	e8 2f 9c fe ff       	call   c000797c <Hardware::addChild(Hardware*)>
c001dd4d:	83 c4 10             	add    esp,0x10
c001dd50:	e9 0b 00 00 00       	jmp    c001dd60 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x324>
c001dd55:	8d 76 00             	lea    esi,[esi+0x0]
c001dd58:	90                   	nop
c001dd59:	eb 05                	jmp    c001dd60 <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)+0x324>
c001dd5b:	90                   	nop
c001dd5c:	90                   	nop
c001dd5d:	8d 76 00             	lea    esi,[esi+0x0]
c001dd60:	81 c4 8c 00 00 00    	add    esp,0x8c
c001dd66:	5b                   	pop    ebx
c001dd67:	5e                   	pop    esi
c001dd68:	5f                   	pop    edi
c001dd69:	5d                   	pop    ebp
c001dd6a:	c3                   	ret    
c001dd6b:	90                   	nop

c001dd6c <PCIDriver::checkDevice(unsigned char, unsigned char)>:
c001dd6c:	83 ec 2c             	sub    esp,0x2c
c001dd6f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dd73:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd77:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001dd7b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001dd7f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001dd84:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001dd89:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001dd8e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd93:	51                   	push   ecx
c001dd94:	52                   	push   edx
c001dd95:	50                   	push   eax
c001dd96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd9a:	e8 61 f4 ff ff       	call   c001d200 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001dd9f:	83 c4 10             	add    esp,0x10
c001dda2:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001dda7:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001ddac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ddb1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ddb6:	51                   	push   ecx
c001ddb7:	52                   	push   edx
c001ddb8:	50                   	push   eax
c001ddb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddbd:	e8 7a fc ff ff       	call   c001da3c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)>
c001ddc2:	83 c4 10             	add    esp,0x10
c001ddc5:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001ddca:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ddcf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ddd4:	51                   	push   ecx
c001ddd5:	52                   	push   edx
c001ddd6:	50                   	push   eax
c001ddd7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dddb:	e8 60 f4 ff ff       	call   c001d240 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001dde0:	83 c4 10             	add    esp,0x10
c001dde3:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001dde7:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001ddeb:	0f be c0             	movsx  eax,al
c001ddee:	85 c0                	test   eax,eax
c001ddf0:	79 6e                	jns    c001de60 <PCIDriver::checkDevice(unsigned char, unsigned char)+0xf4>
c001ddf2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ddf7:	90                   	nop
c001ddf8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001ddfd:	83 f8 07             	cmp    eax,0x7
c001de00:	77 5e                	ja     c001de60 <PCIDriver::checkDevice(unsigned char, unsigned char)+0xf4>
c001de02:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001de07:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001de0c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001de11:	51                   	push   ecx
c001de12:	52                   	push   edx
c001de13:	50                   	push   eax
c001de14:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de18:	e8 e3 f3 ff ff       	call   c001d200 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001de1d:	83 c4 10             	add    esp,0x10
c001de20:	0f b7 c0             	movzx  eax,ax
c001de23:	3d ff ff 00 00       	cmp    eax,0xffff
c001de28:	0f 95 c0             	setne  al
c001de2b:	0f b6 c0             	movzx  eax,al
c001de2e:	85 c0                	test   eax,eax
c001de30:	74 1e                	je     c001de50 <PCIDriver::checkDevice(unsigned char, unsigned char)+0xe4>
c001de32:	0f b6 4c 24 1f       	movzx  ecx,BYTE PTR [esp+0x1f]
c001de37:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001de3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001de41:	51                   	push   ecx
c001de42:	52                   	push   edx
c001de43:	50                   	push   eax
c001de44:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de48:	e8 ef fb ff ff       	call   c001da3c <PCIDriver::registerDevice(unsigned char, unsigned char, unsigned char)>
c001de4d:	83 c4 10             	add    esp,0x10
c001de50:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001de54:	83 c0 01             	add    eax,0x1
c001de57:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001de5b:	eb 9b                	jmp    c001ddf8 <PCIDriver::checkDevice(unsigned char, unsigned char)+0x8c>
c001de5d:	8d 76 00             	lea    esi,[esi+0x0]
c001de60:	90                   	nop
c001de61:	83 c4 2c             	add    esp,0x2c
c001de64:	c3                   	ret    
c001de65:	90                   	nop
c001de66:	66 90                	xchg   ax,ax

c001de68 <PCIDriver::checkBus(unsigned char)>:
c001de68:	83 ec 2c             	sub    esp,0x2c
c001de6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001de6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001de73:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001de78:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001de7d:	83 f8 1f             	cmp    eax,0x1f
c001de80:	77 2a                	ja     c001deac <PCIDriver::checkBus(unsigned char)+0x44>
c001de82:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001de87:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001de8c:	83 ec 04             	sub    esp,0x4
c001de8f:	52                   	push   edx
c001de90:	50                   	push   eax
c001de91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de95:	e8 d2 fe ff ff       	call   c001dd6c <PCIDriver::checkDevice(unsigned char, unsigned char)>
c001de9a:	83 c4 10             	add    esp,0x10
c001de9d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001dea1:	83 c0 01             	add    eax,0x1
c001dea4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dea8:	eb ce                	jmp    c001de78 <PCIDriver::checkBus(unsigned char)+0x10>
c001deaa:	66 90                	xchg   ax,ax
c001deac:	90                   	nop
c001dead:	83 c4 2c             	add    esp,0x2c
c001deb0:	c3                   	ret    
c001deb1:	90                   	nop
c001deb2:	66 90                	xchg   ax,ax

c001deb4 <PCIDriver::enumerateDevices()>:
c001deb4:	83 ec 1c             	sub    esp,0x1c
c001deb7:	6a 00                	push   0x0
c001deb9:	6a 00                	push   0x0
c001debb:	6a 00                	push   0x0
c001debd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dec1:	e8 7a f3 ff ff       	call   c001d240 <PCIDriver::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001dec6:	83 c4 10             	add    esp,0x10
c001dec9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001dece:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001ded3:	25 80 00 00 00       	and    eax,0x80
c001ded8:	75 16                	jne    c001def0 <PCIDriver::enumerateDevices()+0x3c>
c001deda:	83 ec 08             	sub    esp,0x8
c001dedd:	6a 00                	push   0x0
c001dedf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dee3:	e8 80 ff ff ff       	call   c001de68 <PCIDriver::checkBus(unsigned char)>
c001dee8:	83 c4 10             	add    esp,0x10
c001deeb:	eb 63                	jmp    c001df50 <PCIDriver::enumerateDevices()+0x9c>
c001deed:	8d 76 00             	lea    esi,[esi+0x0]
c001def0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001def5:	8d 76 00             	lea    esi,[esi+0x0]
c001def8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001defd:	83 f8 07             	cmp    eax,0x7
c001df00:	77 4e                	ja     c001df50 <PCIDriver::enumerateDevices()+0x9c>
c001df02:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001df07:	50                   	push   eax
c001df08:	6a 00                	push   0x0
c001df0a:	6a 00                	push   0x0
c001df0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df10:	e8 eb f2 ff ff       	call   c001d200 <PCIDriver::getVendorID(unsigned char, unsigned char, unsigned char)>
c001df15:	83 c4 10             	add    esp,0x10
c001df18:	0f b7 c0             	movzx  eax,ax
c001df1b:	3d ff ff 00 00       	cmp    eax,0xffff
c001df20:	0f 95 c0             	setne  al
c001df23:	0f b6 c0             	movzx  eax,al
c001df26:	85 c0                	test   eax,eax
c001df28:	75 22                	jne    c001df4c <PCIDriver::enumerateDevices()+0x98>
c001df2a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001df2f:	83 ec 08             	sub    esp,0x8
c001df32:	50                   	push   eax
c001df33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df37:	e8 2c ff ff ff       	call   c001de68 <PCIDriver::checkBus(unsigned char)>
c001df3c:	83 c4 10             	add    esp,0x10
c001df3f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001df43:	83 c0 01             	add    eax,0x1
c001df46:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001df4a:	eb ac                	jmp    c001def8 <PCIDriver::enumerateDevices()+0x44>
c001df4c:	90                   	nop
c001df4d:	8d 76 00             	lea    esi,[esi+0x0]
c001df50:	90                   	nop
c001df51:	83 c4 1c             	add    esp,0x1c
c001df54:	c3                   	ret    
c001df55:	90                   	nop
c001df56:	66 90                	xchg   ax,ax

c001df58 <PCIDriver::initialise()>:
c001df58:	83 ec 0c             	sub    esp,0xc
c001df5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df62:	6a 04                	push   0x4
c001df64:	6a 08                	push   0x8
c001df66:	68 f8 0c 00 00       	push   0xcf8
c001df6b:	50                   	push   eax
c001df6c:	e8 bd 9b fe ff       	call   c0007b2e <Hardware::registerPortRange(unsigned short, unsigned char, int)>
c001df71:	83 c4 10             	add    esp,0x10
c001df74:	83 ec 0c             	sub    esp,0xc
c001df77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df7b:	e8 34 ff ff ff       	call   c001deb4 <PCIDriver::enumerateDevices()>
c001df80:	83 c4 10             	add    esp,0x10
c001df83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df87:	8b 00                	mov    eax,DWORD PTR [eax]
c001df89:	83 c0 08             	add    eax,0x8
c001df8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001df8e:	83 ec 0c             	sub    esp,0xc
c001df91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df95:	ff d0                	call   eax
c001df97:	83 c4 10             	add    esp,0x10
c001df9a:	90                   	nop
c001df9b:	83 c4 0c             	add    esp,0xc
c001df9e:	c3                   	ret    
c001df9f:	90                   	nop

c001dfa0 <PCIDriver::detect()>:
c001dfa0:	83 ec 2c             	sub    esp,0x2c
c001dfa3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfa7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dfaa:	83 c0 74             	add    eax,0x74
c001dfad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dfb1:	8d 44 24 10          	lea    eax,[esp+0x10]
c001dfb5:	83 ec 08             	sub    esp,0x8
c001dfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dfbc:	50                   	push   eax
c001dfbd:	e8 5e a3 00 00       	call   c0028320 <std::vector<Hardware*>::begin()>
c001dfc2:	83 c4 0c             	add    esp,0xc
c001dfc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001dfc9:	83 ec 08             	sub    esp,0x8
c001dfcc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dfd0:	50                   	push   eax
c001dfd1:	e8 6e a3 00 00       	call   c0028344 <std::vector<Hardware*>::end()>
c001dfd6:	83 c4 0c             	add    esp,0xc
c001dfd9:	8d 76 00             	lea    esi,[esi+0x0]
c001dfdc:	83 ec 08             	sub    esp,0x8
c001dfdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c001dfe3:	50                   	push   eax
c001dfe4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dfe8:	50                   	push   eax
c001dfe9:	e8 12 a0 00 00       	call   c0028000 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c001dfee:	83 c4 10             	add    esp,0x10
c001dff1:	0f b6 c0             	movzx  eax,al
c001dff4:	85 c0                	test   eax,eax
c001dff6:	74 3c                	je     c001e034 <PCIDriver::detect()+0x94>
c001dff8:	83 ec 0c             	sub    esp,0xc
c001dffb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dfff:	50                   	push   eax
c001e000:	e8 0f a0 00 00       	call   c0028014 <std::vector<Hardware*>::iterator::operator*() const>
c001e005:	83 c4 10             	add    esp,0x10
c001e008:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e00c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e010:	83 ec 08             	sub    esp,0x8
c001e013:	8d 54 24 18          	lea    edx,[esp+0x18]
c001e017:	52                   	push   edx
c001e018:	50                   	push   eax
c001e019:	e8 4a a3 00 00       	call   c0028368 <std::vector<Hardware*>::iterator::operator++()>
c001e01e:	83 c4 0c             	add    esp,0xc
c001e021:	83 ec 0c             	sub    esp,0xc
c001e024:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e028:	50                   	push   eax
c001e029:	e8 be 9f 00 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c001e02e:	83 c4 10             	add    esp,0x10
c001e031:	eb a9                	jmp    c001dfdc <PCIDriver::detect()+0x3c>
c001e033:	90                   	nop
c001e034:	83 ec 0c             	sub    esp,0xc
c001e037:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e03b:	50                   	push   eax
c001e03c:	e8 ab 9f 00 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c001e041:	83 c4 10             	add    esp,0x10
c001e044:	83 ec 0c             	sub    esp,0xc
c001e047:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e04b:	50                   	push   eax
c001e04c:	e8 9b 9f 00 00       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c001e051:	83 c4 10             	add    esp,0x10
c001e054:	90                   	nop
c001e055:	83 c4 2c             	add    esp,0x2c
c001e058:	c3                   	ret    
c001e059:	90                   	nop

c001e05a <RS232Serial::detect()>:
c001e05a:	c3                   	ret    
c001e05b:	90                   	nop

c001e05c <RS232Serial::deinitialise()>:
c001e05c:	c3                   	ret    
c001e05d:	90                   	nop

c001e05e <RS232Serial::setPowerState(DevicePowerState)>:
c001e05e:	c3                   	ret    
c001e05f:	90                   	nop

c001e060 <RS232Serial::getHumanReadableName()>:
c001e060:	b8 88 db 02 c0       	mov    eax,0xc002db88
c001e065:	c3                   	ret    

c001e066 <RS232Serial::areInterruptsSupported()>:
c001e066:	b0 01                	mov    al,0x1
c001e068:	c3                   	ret    
c001e069:	90                   	nop

c001e06a <RS232Serial::areInterruptsEnabled()>:
c001e06a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e06e:	8a 40 1c             	mov    al,BYTE PTR [eax+0x1c]
c001e071:	c3                   	ret    

c001e072 <RS232Serial::getBaud()>:
c001e072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e076:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001e079:	c3                   	ret    

c001e07a <RS232Serial::getNumberBytesInIRQBuffer()>:
c001e07a:	31 c0                	xor    eax,eax
c001e07c:	c3                   	ret    
c001e07d:	90                   	nop

c001e07e <RS232Serial::getMaximumBytesInIRQBuffer()>:
c001e07e:	31 c0                	xor    eax,eax
c001e080:	c3                   	ret    
c001e081:	90                   	nop

c001e082 <RS232Serial::emptyBuffer()>:
c001e082:	c3                   	ret    
c001e083:	90                   	nop

c001e084 <RS232Serial::waitForData()>:
c001e084:	53                   	push   ebx
c001e085:	83 ec 08             	sub    esp,0x8
c001e088:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e08c:	83 ec 0c             	sub    esp,0xc
c001e08f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e091:	53                   	push   ebx
c001e092:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001e095:	83 c4 10             	add    esp,0x10
c001e098:	84 c0                	test   al,al
c001e09a:	74 f0                	je     c001e08c <RS232Serial::waitForData()+0x8>
c001e09c:	83 c4 08             	add    esp,0x8
c001e09f:	5b                   	pop    ebx
c001e0a0:	c3                   	ret    
c001e0a1:	90                   	nop

c001e0a2 <RS232Serial::isParityModeSupported(SerialParityMode)>:
c001e0a2:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c001e0a7:	0f 96 c0             	setbe  al
c001e0aa:	c3                   	ret    
c001e0ab:	90                   	nop

c001e0ac <RS232Serial::getPartityMode()>:
c001e0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e0b3:	c3                   	ret    

c001e0b4 <RS232Serial::isTransmissionSizeValid(int)>:
c001e0b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e0b8:	83 e8 05             	sub    eax,0x5
c001e0bb:	83 f8 03             	cmp    eax,0x3
c001e0be:	0f 96 c0             	setbe  al
c001e0c1:	c3                   	ret    

c001e0c2 <RS232Serial::getTransmissionSize()>:
c001e0c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e0c9:	c3                   	ret    

c001e0ca <RS232Serial::isNumberOfStopBitsValid(int)>:
c001e0ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e0ce:	48                   	dec    eax
c001e0cf:	83 f8 01             	cmp    eax,0x1
c001e0d2:	0f 96 c0             	setbe  al
c001e0d5:	c3                   	ret    

c001e0d6 <RS232Serial::getNumberOfStopBits()>:
c001e0d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0da:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001e0dd:	c3                   	ret    

c001e0de <RS232Serial::supportsHardwareStopBits()>:
c001e0de:	b0 01                	mov    al,0x1
c001e0e0:	c3                   	ret    
c001e0e1:	90                   	nop

c001e0e2 <RS232Serial::supportsHardwareParity()>:
c001e0e2:	b0 01                	mov    al,0x1
c001e0e4:	c3                   	ret    
c001e0e5:	90                   	nop

c001e0e6 <RS232Serial::initialise()>:
c001e0e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e0ed:	83 7a 70 00          	cmp    DWORD PTR [edx+0x70],0x0
c001e0f1:	75 08                	jne    c001e0fb <RS232Serial::initialise()+0x15>
c001e0f3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001e0f6:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c001e0fa:	c3                   	ret    
c001e0fb:	c7 44 24 04 a6 db 02 c0 	mov    DWORD PTR [esp+0x4],0xc002dba6
c001e103:	e9 44 26 ff ff       	jmp    c001074c <KePanic(char const*)>

c001e108 <RS232Serial::enableInterrupts(bool)>:
c001e108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e10c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e110:	88 50 1c             	mov    BYTE PTR [eax+0x1c],dl
c001e113:	c7 44 24 04 c8 db 02 c0 	mov    DWORD PTR [esp+0x4],0xc002dbc8
c001e11b:	e9 2c 26 ff ff       	jmp    c001074c <KePanic(char const*)>

c001e120 <RS232Serial::setBaud(int)>:
c001e120:	53                   	push   ebx
c001e121:	83 ec 10             	sub    esp,0x10
c001e124:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e128:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e12e:	53                   	push   ebx
c001e12f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001e132:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001e135:	c7 44 24 20 db db 02 c0 	mov    DWORD PTR [esp+0x20],0xc002dbdb
c001e13d:	83 c4 18             	add    esp,0x18
c001e140:	5b                   	pop    ebx
c001e141:	e9 06 26 ff ff       	jmp    c001074c <KePanic(char const*)>

c001e146 <RS232Serial::getClosestSupportedBaud(int)>:
c001e146:	83 ec 18             	sub    esp,0x18
c001e149:	68 ea db 02 c0       	push   0xc002dbea
c001e14e:	e8 f9 25 ff ff       	call   c001074c <KePanic(char const*)>
c001e153:	31 c0                	xor    eax,eax
c001e155:	83 c4 1c             	add    esp,0x1c
c001e158:	c3                   	ret    
c001e159:	90                   	nop

c001e15a <RS232Serial::write(unsigned char)>:
c001e15a:	c7 44 24 04 08 dc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002dc08
c001e162:	e9 e5 25 ff ff       	jmp    c001074c <KePanic(char const*)>
c001e167:	90                   	nop

c001e168 <RS232Serial::getHardwareBufferSize()>:
c001e168:	83 ec 18             	sub    esp,0x18
c001e16b:	68 1f dc 02 c0       	push   0xc002dc1f
c001e170:	e8 d7 25 ff ff       	call   c001074c <KePanic(char const*)>
c001e175:	31 c0                	xor    eax,eax
c001e177:	83 c4 1c             	add    esp,0x1c
c001e17a:	c3                   	ret    
c001e17b:	90                   	nop

c001e17c <RS232Serial::isDataReady()>:
c001e17c:	83 ec 18             	sub    esp,0x18
c001e17f:	68 42 dc 02 c0       	push   0xc002dc42
c001e184:	e8 c3 25 ff ff       	call   c001074c <KePanic(char const*)>
c001e189:	31 c0                	xor    eax,eax
c001e18b:	83 c4 1c             	add    esp,0x1c
c001e18e:	c3                   	ret    
c001e18f:	90                   	nop

c001e190 <RS232Serial::setParityMode(SerialParityMode)>:
c001e190:	56                   	push   esi
c001e191:	53                   	push   ebx
c001e192:	83 ec 0c             	sub    esp,0xc
c001e195:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e199:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001e19d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e19f:	56                   	push   esi
c001e1a0:	53                   	push   ebx
c001e1a1:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001e1a4:	83 c4 10             	add    esp,0x10
c001e1a7:	84 c0                	test   al,al
c001e1a9:	74 13                	je     c001e1be <RS232Serial::setParityMode(SerialParityMode)+0x2e>
c001e1ab:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c001e1ae:	c7 44 24 10 5b dc 02 c0 	mov    DWORD PTR [esp+0x10],0xc002dc5b
c001e1b6:	5a                   	pop    edx
c001e1b7:	5b                   	pop    ebx
c001e1b8:	5e                   	pop    esi
c001e1b9:	e9 8e 25 ff ff       	jmp    c001074c <KePanic(char const*)>
c001e1be:	58                   	pop    eax
c001e1bf:	5b                   	pop    ebx
c001e1c0:	5e                   	pop    esi
c001e1c1:	c3                   	ret    

c001e1c2 <RS232Serial::setTransmissionSize(int)>:
c001e1c2:	56                   	push   esi
c001e1c3:	53                   	push   ebx
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e1cb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001e1cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e1d1:	56                   	push   esi
c001e1d2:	53                   	push   ebx
c001e1d3:	ff 50 5c             	call   DWORD PTR [eax+0x5c]
c001e1d6:	83 c4 10             	add    esp,0x10
c001e1d9:	84 c0                	test   al,al
c001e1db:	74 13                	je     c001e1f0 <RS232Serial::setTransmissionSize(int)+0x2e>
c001e1dd:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001e1e0:	c7 44 24 10 76 dc 02 c0 	mov    DWORD PTR [esp+0x10],0xc002dc76
c001e1e8:	5a                   	pop    edx
c001e1e9:	5b                   	pop    ebx
c001e1ea:	5e                   	pop    esi
c001e1eb:	e9 5c 25 ff ff       	jmp    c001074c <KePanic(char const*)>
c001e1f0:	58                   	pop    eax
c001e1f1:	5b                   	pop    ebx
c001e1f2:	5e                   	pop    esi
c001e1f3:	c3                   	ret    

c001e1f4 <RS232Serial::setNumberOfStopBits(int)>:
c001e1f4:	56                   	push   esi
c001e1f5:	53                   	push   ebx
c001e1f6:	83 ec 0c             	sub    esp,0xc
c001e1f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e1fd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001e201:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e203:	56                   	push   esi
c001e204:	53                   	push   ebx
c001e205:	ff 50 68             	call   DWORD PTR [eax+0x68]
c001e208:	83 c4 10             	add    esp,0x10
c001e20b:	84 c0                	test   al,al
c001e20d:	74 13                	je     c001e222 <RS232Serial::setNumberOfStopBits(int)+0x2e>
c001e20f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001e212:	c7 44 24 10 97 dc 02 c0 	mov    DWORD PTR [esp+0x10],0xc002dc97
c001e21a:	5a                   	pop    edx
c001e21b:	5b                   	pop    ebx
c001e21c:	5e                   	pop    esi
c001e21d:	e9 2a 25 ff ff       	jmp    c001074c <KePanic(char const*)>
c001e222:	58                   	pop    eax
c001e223:	5b                   	pop    ebx
c001e224:	5e                   	pop    esi
c001e225:	c3                   	ret    

c001e226 <RS232Serial::didAnyErrorsOccur()>:
c001e226:	83 ec 18             	sub    esp,0x18
c001e229:	68 b8 dc 02 c0       	push   0xc002dcb8
c001e22e:	e8 19 25 ff ff       	call   c001074c <KePanic(char const*)>
c001e233:	31 c0                	xor    eax,eax
c001e235:	83 c4 1c             	add    esp,0x1c
c001e238:	c3                   	ret    
c001e239:	90                   	nop

c001e23a <RS232Serial::clearAllErrors()>:
c001e23a:	c7 44 24 04 d7 dc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002dcd7
c001e242:	e9 05 25 ff ff       	jmp    c001074c <KePanic(char const*)>
c001e247:	90                   	nop

c001e248 <RS232Serial::clearFirstError()>:
c001e248:	c7 44 24 04 f3 dc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002dcf3
c001e250:	e9 f7 24 ff ff       	jmp    c001074c <KePanic(char const*)>
c001e255:	90                   	nop

c001e256 <RS232Serial::getFirstError()>:
c001e256:	83 ec 18             	sub    esp,0x18
c001e259:	68 10 dd 02 c0       	push   0xc002dd10
c001e25e:	e8 e9 24 ff ff       	call   c001074c <KePanic(char const*)>
c001e263:	b8 01 00 00 00       	mov    eax,0x1
c001e268:	83 c4 1c             	add    esp,0x1c
c001e26b:	c3                   	ret    

c001e26c <RS232Serial::read()>:
c001e26c:	83 ec 18             	sub    esp,0x18
c001e26f:	68 2b dd 02 c0       	push   0xc002dd2b
c001e274:	e8 d3 24 ff ff       	call   c001074c <KePanic(char const*)>
c001e279:	66 90                	xchg   ax,ax
c001e27b:	90                   	nop

c001e27c <FAT::getName()>:
c001e27c:	b8 d0 dd 02 c0       	mov    eax,0xc002ddd0
c001e281:	c3                   	ret    
c001e282:	66 90                	xchg   ax,ax

c001e284 <FAT::tell(void*, unsigned long long*)>:
c001e284:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e289:	75 09                	jne    c001e294 <FAT::tell(void*, unsigned long long*)+0x10>
c001e28b:	b8 04 00 00 00       	mov    eax,0x4
c001e290:	c3                   	ret    
c001e291:	8d 76 00             	lea    esi,[esi+0x0]
c001e294:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e299:	75 09                	jne    c001e2a4 <FAT::tell(void*, unsigned long long*)+0x20>
c001e29b:	b8 04 00 00 00       	mov    eax,0x4
c001e2a0:	c3                   	ret    
c001e2a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e2a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001e2ab:	ba 00 00 00 00       	mov    edx,0x0
c001e2b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e2b4:	89 01                	mov    DWORD PTR [ecx],eax
c001e2b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e2b9:	b8 00 00 00 00       	mov    eax,0x0
c001e2be:	c3                   	ret    
c001e2bf:	90                   	nop

c001e2c0 <FAT::stat(void*, unsigned long long*)>:
c001e2c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e2c5:	75 09                	jne    c001e2d0 <FAT::stat(void*, unsigned long long*)+0x10>
c001e2c7:	b8 04 00 00 00       	mov    eax,0x4
c001e2cc:	c3                   	ret    
c001e2cd:	8d 76 00             	lea    esi,[esi+0x0]
c001e2d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e2d5:	75 09                	jne    c001e2e0 <FAT::stat(void*, unsigned long long*)+0x20>
c001e2d7:	b8 04 00 00 00       	mov    eax,0x4
c001e2dc:	c3                   	ret    
c001e2dd:	8d 76 00             	lea    esi,[esi+0x0]
c001e2e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e2e7:	ba 00 00 00 00       	mov    edx,0x0
c001e2ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e2f0:	89 01                	mov    DWORD PTR [ecx],eax
c001e2f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e2f5:	b8 00 00 00 00       	mov    eax,0x0
c001e2fa:	c3                   	ret    
c001e2fb:	90                   	nop

c001e2fc <FAT::~FAT()>:
c001e2fc:	83 ec 0c             	sub    esp,0xc
c001e2ff:	ba 1c de 02 c0       	mov    edx,0xc002de1c
c001e304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e308:	89 10                	mov    DWORD PTR [eax],edx
c001e30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e30e:	83 ec 0c             	sub    esp,0xc
c001e311:	50                   	push   eax
c001e312:	e8 ff a4 fe ff       	call   c0008816 <Filesystem::~Filesystem()>
c001e317:	83 c4 10             	add    esp,0x10
c001e31a:	90                   	nop
c001e31b:	83 c4 0c             	add    esp,0xc
c001e31e:	c3                   	ret    
c001e31f:	90                   	nop

c001e320 <FAT::~FAT()>:
c001e320:	83 ec 0c             	sub    esp,0xc
c001e323:	83 ec 0c             	sub    esp,0xc
c001e326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e32a:	e8 cd ff ff ff       	call   c001e2fc <FAT::~FAT()>
c001e32f:	83 c4 10             	add    esp,0x10
c001e332:	83 ec 08             	sub    esp,0x8
c001e335:	6a 08                	push   0x8
c001e337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e33b:	e8 c4 fa fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c001e340:	83 c4 10             	add    esp,0x10
c001e343:	83 c4 0c             	add    esp,0xc
c001e346:	c3                   	ret    
c001e347:	90                   	nop

c001e348 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001e348:	83 ec 1c             	sub    esp,0x1c
c001e34b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001e352:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001e357:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e35b:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e362:	83 f8 ff             	cmp    eax,0xffffffff
c001e365:	75 35                	jne    c001e39c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001e367:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e36b:	88 c2                	mov    dl,al
c001e36d:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e372:	01 d0                	add    eax,edx
c001e374:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e378:	8b 15 80 84 03 c0    	mov    edx,DWORD PTR ds:0xc0038480
c001e37e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e382:	89 14 85 a0 84 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7b60],edx
c001e389:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e38e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e392:	89 14 85 20 85 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7ae0],edx
c001e399:	eb 19                	jmp    c001e3b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001e39b:	90                   	nop
c001e39c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e3a0:	88 c2                	mov    dl,al
c001e3a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e3a6:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e3ad:	01 d0                	add    eax,edx
c001e3af:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e3b3:	90                   	nop
c001e3b4:	83 ec 04             	sub    esp,0x4
c001e3b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e3bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e3bf:	8d 44 24 15          	lea    eax,[esp+0x15]
c001e3c3:	50                   	push   eax
c001e3c4:	e8 ef 6d fe ff       	call   c00051b8 <f_getlabel>
c001e3c9:	83 c4 10             	add    esp,0x10
c001e3cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e3d5:	75 09                	jne    c001e3e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001e3d7:	b8 00 00 00 00       	mov    eax,0x0
c001e3dc:	eb 0a                	jmp    c001e3e8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001e3de:	66 90                	xchg   ax,ax
c001e3e0:	b8 01 00 00 00       	mov    eax,0x1
c001e3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001e3e8:	83 c4 1c             	add    esp,0x1c
c001e3eb:	c3                   	ret    

c001e3ec <FAT::setlabel(LogicalDisk*, int, char*)>:
c001e3ec:	57                   	push   edi
c001e3ed:	83 ec 58             	sub    esp,0x58
c001e3f0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001e3f8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e3fc:	b8 00 00 00 00       	mov    eax,0x0
c001e401:	b9 0f 00 00 00       	mov    ecx,0xf
c001e406:	fc                   	cld    
c001e407:	89 d7                	mov    edi,edx
c001e409:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e40b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e40f:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e416:	83 f8 ff             	cmp    eax,0xffffffff
c001e419:	75 35                	jne    c001e450 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001e41b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e41f:	88 c2                	mov    dl,al
c001e421:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e426:	01 d0                	add    eax,edx
c001e428:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e42c:	8b 15 80 84 03 c0    	mov    edx,DWORD PTR ds:0xc0038480
c001e432:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e436:	89 14 85 a0 84 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7b60],edx
c001e43d:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e442:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001e446:	89 14 85 20 85 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7ae0],edx
c001e44d:	eb 19                	jmp    c001e468 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001e44f:	90                   	nop
c001e450:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e454:	88 c2                	mov    dl,al
c001e456:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e45a:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e461:	01 d0                	add    eax,edx
c001e463:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e467:	90                   	nop
c001e468:	83 ec 08             	sub    esp,0x8
c001e46b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001e46f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e473:	50                   	push   eax
c001e474:	e8 c7 23 fe ff       	call   c0000840 <strcat>
c001e479:	83 c4 10             	add    esp,0x10
c001e47c:	83 ec 0c             	sub    esp,0xc
c001e47f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e483:	50                   	push   eax
c001e484:	e8 80 6e fe ff       	call   c0005309 <f_setlabel>
c001e489:	83 c4 10             	add    esp,0x10
c001e48c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e490:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001e495:	75 09                	jne    c001e4a0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001e497:	b8 00 00 00 00       	mov    eax,0x0
c001e49c:	eb 0a                	jmp    c001e4a8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001e49e:	66 90                	xchg   ax,ax
c001e4a0:	b8 01 00 00 00       	mov    eax,0x1
c001e4a5:	8d 76 00             	lea    esi,[esi+0x0]
c001e4a8:	83 c4 58             	add    esp,0x58
c001e4ab:	5f                   	pop    edi
c001e4ac:	c3                   	ret    
c001e4ad:	90                   	nop
c001e4ae:	66 90                	xchg   ax,ax

c001e4b0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001e4b0:	83 ec 2c             	sub    esp,0x2c
c001e4b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001e4bb:	83 ec 08             	sub    esp,0x8
c001e4be:	68 f4 dd 02 c0       	push   0xc002ddf4
c001e4c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e4c7:	e8 84 22 fe ff       	call   c0000750 <strcmp>
c001e4cc:	83 c4 10             	add    esp,0x10
c001e4cf:	85 c0                	test   eax,eax
c001e4d1:	0f 94 c0             	sete   al
c001e4d4:	0f b6 c0             	movzx  eax,al
c001e4d7:	85 c0                	test   eax,eax
c001e4d9:	74 0d                	je     c001e4e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001e4db:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e4e3:	e9 c0 00 00 00       	jmp    c001e5a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001e4e8:	83 ec 08             	sub    esp,0x8
c001e4eb:	68 e6 dd 02 c0       	push   0xc002dde6
c001e4f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e4f4:	e8 57 22 fe ff       	call   c0000750 <strcmp>
c001e4f9:	83 c4 10             	add    esp,0x10
c001e4fc:	85 c0                	test   eax,eax
c001e4fe:	0f 94 c0             	sete   al
c001e501:	0f b6 c0             	movzx  eax,al
c001e504:	85 c0                	test   eax,eax
c001e506:	74 10                	je     c001e518 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001e508:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e510:	e9 93 00 00 00       	jmp    c001e5a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001e515:	8d 76 00             	lea    esi,[esi+0x0]
c001e518:	83 ec 08             	sub    esp,0x8
c001e51b:	68 ec dd 02 c0       	push   0xc002ddec
c001e520:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e524:	e8 27 22 fe ff       	call   c0000750 <strcmp>
c001e529:	83 c4 10             	add    esp,0x10
c001e52c:	85 c0                	test   eax,eax
c001e52e:	0f 94 c0             	sete   al
c001e531:	0f b6 c0             	movzx  eax,al
c001e534:	85 c0                	test   eax,eax
c001e536:	74 0c                	je     c001e544 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001e538:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e540:	eb 66                	jmp    c001e5a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001e542:	66 90                	xchg   ax,ax
c001e544:	83 ec 08             	sub    esp,0x8
c001e547:	68 1c 9c 02 c0       	push   0xc0029c1c
c001e54c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e550:	e8 fb 21 fe ff       	call   c0000750 <strcmp>
c001e555:	83 c4 10             	add    esp,0x10
c001e558:	85 c0                	test   eax,eax
c001e55a:	0f 94 c0             	sete   al
c001e55d:	0f b6 c0             	movzx  eax,al
c001e560:	85 c0                	test   eax,eax
c001e562:	74 0c                	je     c001e570 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001e564:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001e56c:	eb 3a                	jmp    c001e5a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001e56e:	66 90                	xchg   ax,ax
c001e570:	83 ec 08             	sub    esp,0x8
c001e573:	68 f2 dd 02 c0       	push   0xc002ddf2
c001e578:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e57c:	e8 cf 21 fe ff       	call   c0000750 <strcmp>
c001e581:	83 c4 10             	add    esp,0x10
c001e584:	85 c0                	test   eax,eax
c001e586:	0f 94 c0             	sete   al
c001e589:	0f b6 c0             	movzx  eax,al
c001e58c:	85 c0                	test   eax,eax
c001e58e:	74 0c                	je     c001e59c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001e590:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001e598:	eb 0e                	jmp    c001e5a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001e59a:	66 90                	xchg   ax,ax
c001e59c:	b8 08 00 00 00       	mov    eax,0x8
c001e5a1:	e9 ea 00 00 00       	jmp    c001e690 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001e5a6:	66 90                	xchg   ax,ax
c001e5a8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001e5af:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001e5b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e5b8:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e5bf:	83 f8 ff             	cmp    eax,0xffffffff
c001e5c2:	75 34                	jne    c001e5f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001e5c4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e5c8:	88 c2                	mov    dl,al
c001e5ca:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e5cf:	01 d0                	add    eax,edx
c001e5d1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e5d5:	8b 15 80 84 03 c0    	mov    edx,DWORD PTR ds:0xc0038480
c001e5db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e5df:	89 14 85 a0 84 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7b60],edx
c001e5e6:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e5eb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e5ef:	89 14 85 20 85 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7ae0],edx
c001e5f6:	eb 18                	jmp    c001e610 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001e5f8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e5fc:	88 c2                	mov    dl,al
c001e5fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e602:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e609:	01 d0                	add    eax,edx
c001e60b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e60f:	90                   	nop
c001e610:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e614:	88 04 24             	mov    BYTE PTR [esp],al
c001e617:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e61b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e61f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e627:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e62c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e634:	83 ec 0c             	sub    esp,0xc
c001e637:	68 00 20 00 00       	push   0x2000
c001e63c:	e8 b6 1c ff ff       	call   c00102f7 <malloc>
c001e641:	83 c4 10             	add    esp,0x10
c001e644:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e648:	68 00 20 00 00       	push   0x2000
c001e64d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e651:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e655:	50                   	push   eax
c001e656:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e65a:	50                   	push   eax
c001e65b:	e8 a6 6f fe ff       	call   c0005606 <f_mkfs>
c001e660:	83 c4 10             	add    esp,0x10
c001e663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e667:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e66c:	75 0a                	jne    c001e678 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001e66e:	b8 00 00 00 00       	mov    eax,0x0
c001e673:	eb 1b                	jmp    c001e690 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001e675:	8d 76 00             	lea    esi,[esi+0x0]
c001e678:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e67d:	75 09                	jne    c001e688 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001e67f:	b8 09 00 00 00       	mov    eax,0x9
c001e684:	eb 0a                	jmp    c001e690 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001e686:	66 90                	xchg   ax,ax
c001e688:	b8 01 00 00 00       	mov    eax,0x1
c001e68d:	8d 76 00             	lea    esi,[esi+0x0]
c001e690:	83 c4 2c             	add    esp,0x2c
c001e693:	c3                   	ret    

c001e694 <FAT::tryMount(LogicalDisk*, int)>:
c001e694:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001e69a:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e69f:	83 f8 14             	cmp    eax,0x14
c001e6a2:	75 18                	jne    c001e6bc <FAT::tryMount(LogicalDisk*, int)+0x28>
c001e6a4:	83 ec 0c             	sub    esp,0xc
c001e6a7:	68 f8 dd 02 c0       	push   0xc002ddf8
c001e6ac:	e8 9b 20 ff ff       	call   c001074c <KePanic(char const*)>
c001e6b1:	83 c4 10             	add    esp,0x10
c001e6b4:	b0 00                	mov    al,0x0
c001e6b6:	e9 ed 01 00 00       	jmp    c001e8a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001e6bb:	90                   	nop
c001e6bc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e6c3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e6c9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6cf:	3d 00 02 00 00       	cmp    eax,0x200
c001e6d4:	74 0a                	je     c001e6e0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001e6d6:	b0 00                	mov    al,0x0
c001e6d8:	e9 cb 01 00 00       	jmp    c001e8a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001e6dd:	8d 76 00             	lea    esi,[esi+0x0]
c001e6e0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001e6e8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001e6ef:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001e6f6:	83 f8 ff             	cmp    eax,0xffffffff
c001e6f9:	74 09                	je     c001e704 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001e6fb:	b0 01                	mov    al,0x1
c001e6fd:	e9 a6 01 00 00       	jmp    c001e8a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001e702:	66 90                	xchg   ax,ax
c001e704:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001e70e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001e716:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001e71d:	88 c2                	mov    dl,al
c001e71f:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e724:	01 d0                	add    eax,edx
c001e726:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001e72d:	8b 15 80 84 03 c0    	mov    edx,DWORD PTR ds:0xc0038480
c001e733:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001e73a:	89 14 85 a0 84 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7b60],edx
c001e741:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e746:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001e74d:	89 14 85 20 85 03 c0 	mov    DWORD PTR [eax*4-0x3ffc7ae0],edx
c001e754:	83 ec 0c             	sub    esp,0xc
c001e757:	68 34 02 00 00       	push   0x234
c001e75c:	e8 96 1b ff ff       	call   c00102f7 <malloc>
c001e761:	83 c4 10             	add    esp,0x10
c001e764:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001e76b:	83 ec 04             	sub    esp,0x4
c001e76e:	6a 00                	push   0x0
c001e770:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001e777:	50                   	push   eax
c001e778:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001e77f:	e8 5d 56 fe ff       	call   c0003de1 <f_mount>
c001e784:	83 c4 10             	add    esp,0x10
c001e787:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001e78e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001e796:	74 1c                	je     c001e7b4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001e798:	83 ec 0c             	sub    esp,0xc
c001e79b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001e7a2:	e8 70 1b ff ff       	call   c0010317 <rfree>
c001e7a7:	83 c4 10             	add    esp,0x10
c001e7aa:	b0 00                	mov    al,0x0
c001e7ac:	e9 f7 00 00 00       	jmp    c001e8a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001e7b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e7b4:	83 ec 04             	sub    esp,0x4
c001e7b7:	68 00 01 00 00       	push   0x100
c001e7bc:	6a 00                	push   0x0
c001e7be:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001e7c5:	50                   	push   eax
c001e7c6:	e8 25 1d fe ff       	call   c00004f0 <memset>
c001e7cb:	83 c4 10             	add    esp,0x10
c001e7ce:	83 ec 08             	sub    esp,0x8
c001e7d1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001e7d8:	50                   	push   eax
c001e7d9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001e7e0:	50                   	push   eax
c001e7e1:	e8 5a 20 fe ff       	call   c0000840 <strcat>
c001e7e6:	83 c4 10             	add    esp,0x10
c001e7e9:	83 ec 08             	sub    esp,0x8
c001e7ec:	68 06 de 02 c0       	push   0xc002de06
c001e7f1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001e7f8:	50                   	push   eax
c001e7f9:	e8 42 20 fe ff       	call   c0000840 <strcat>
c001e7fe:	83 c4 10             	add    esp,0x10
c001e801:	83 ec 04             	sub    esp,0x4
c001e804:	6a 01                	push   0x1
c001e806:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001e80d:	50                   	push   eax
c001e80e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e812:	50                   	push   eax
c001e813:	e8 2b 56 fe ff       	call   c0003e43 <f_open>
c001e818:	83 c4 10             	add    esp,0x10
c001e81b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001e822:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001e829:	85 c0                	test   eax,eax
c001e82b:	74 0b                	je     c001e838 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001e82d:	78 31                	js     c001e860 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001e82f:	83 e8 04             	sub    eax,0x4
c001e832:	83 f8 01             	cmp    eax,0x1
c001e835:	77 29                	ja     c001e860 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001e837:	90                   	nop
c001e838:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001e840:	83 ec 0c             	sub    esp,0xc
c001e843:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e847:	50                   	push   eax
c001e848:	e8 c5 5d fe ff       	call   c0004612 <f_close>
c001e84d:	83 c4 10             	add    esp,0x10
c001e850:	90                   	nop
c001e851:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001e859:	85 c0                	test   eax,eax
c001e85b:	74 43                	je     c001e8a0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001e85d:	eb 31                	jmp    c001e890 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001e85f:	90                   	nop
c001e860:	83 ec 0c             	sub    esp,0xc
c001e863:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001e86a:	e8 a8 1a ff ff       	call   c0010317 <rfree>
c001e86f:	83 c4 10             	add    esp,0x10
c001e872:	83 ec 04             	sub    esp,0x4
c001e875:	6a 00                	push   0x0
c001e877:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001e87e:	50                   	push   eax
c001e87f:	6a 00                	push   0x0
c001e881:	e8 5b 55 fe ff       	call   c0003de1 <f_mount>
c001e886:	83 c4 10             	add    esp,0x10
c001e889:	b0 00                	mov    al,0x0
c001e88b:	eb 1b                	jmp    c001e8a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001e88d:	8d 76 00             	lea    esi,[esi+0x0]
c001e890:	a1 80 84 03 c0       	mov    eax,ds:0xc0038480
c001e895:	83 c0 01             	add    eax,0x1
c001e898:	a3 80 84 03 c0       	mov    ds:0xc0038480,eax
c001e89d:	8d 76 00             	lea    esi,[esi+0x0]
c001e8a0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001e8a7:	90                   	nop
c001e8a8:	81 c4 4c 03 00 00    	add    esp,0x34c
c001e8ae:	c3                   	ret    
c001e8af:	90                   	nop

c001e8b0 <FAT::allocateSwapfile(char const*, int)>:
c001e8b0:	55                   	push   ebp
c001e8b1:	57                   	push   edi
c001e8b2:	56                   	push   esi
c001e8b3:	53                   	push   ebx
c001e8b4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001e8ba:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001e8c5:	83 ec 0c             	sub    esp,0xc
c001e8c8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001e8cf:	e8 23 1a ff ff       	call   c00102f7 <malloc>
c001e8d4:	83 c4 10             	add    esp,0x10
c001e8d7:	89 c7                	mov    edi,eax
c001e8d9:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001e8de:	83 ec 04             	sub    esp,0x4
c001e8e1:	50                   	push   eax
c001e8e2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001e8e9:	57                   	push   edi
c001e8ea:	e8 c5 a2 fe ff       	call   c0008bb4 <File::File(char const*, Process*)>
c001e8ef:	83 c4 10             	add    esp,0x10
c001e8f2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001e8f9:	83 ec 04             	sub    esp,0x4
c001e8fc:	8d 44 24 13          	lea    eax,[esp+0x13]
c001e900:	50                   	push   eax
c001e901:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e905:	50                   	push   eax
c001e906:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001e90d:	e8 c2 a5 fe ff       	call   c0008ed4 <File::stat(unsigned long long*, bool*)>
c001e912:	83 c4 10             	add    esp,0x10
c001e915:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001e91c:	c1 e0 14             	shl    eax,0x14
c001e91f:	89 c7                	mov    edi,eax
c001e921:	89 c5                	mov    ebp,eax
c001e923:	c1 fd 1f             	sar    ebp,0x1f
c001e926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e92a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e92e:	89 f9                	mov    ecx,edi
c001e930:	31 c1                	xor    ecx,eax
c001e932:	89 cb                	mov    ebx,ecx
c001e934:	89 e9                	mov    ecx,ebp
c001e936:	31 d1                	xor    ecx,edx
c001e938:	89 ce                	mov    esi,ecx
c001e93a:	89 f0                	mov    eax,esi
c001e93c:	09 d8                	or     eax,ebx
c001e93e:	0f 84 9c 00 00 00    	je     c001e9e0 <FAT::allocateSwapfile(char const*, int)+0x130>
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001e94e:	e8 4d a4 fe ff       	call   c0008da0 <File::unlink()>
c001e953:	83 c4 10             	add    esp,0x10
c001e956:	83 ec 08             	sub    esp,0x8
c001e959:	6a 12                	push   0x12
c001e95b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001e962:	e8 6b a2 fe ff       	call   c0008bd2 <File::open(FileOpenMode)>
c001e967:	83 c4 10             	add    esp,0x10
c001e96a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001e971:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001e977:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001e97e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001e985:	c1 e0 14             	shl    eax,0x14
c001e988:	83 ec 04             	sub    esp,0x4
c001e98b:	6a 01                	push   0x1
c001e98d:	50                   	push   eax
c001e98e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001e995:	e8 ff 6a fe ff       	call   c0005499 <f_expand>
c001e99a:	83 c4 10             	add    esp,0x10
c001e99d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001e9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9a6:	83 c0 10             	add    eax,0x10
c001e9a9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ab:	83 ec 0c             	sub    esp,0xc
c001e9ae:	8d 54 24 24          	lea    edx,[esp+0x24]
c001e9b2:	52                   	push   edx
c001e9b3:	8d 54 24 30          	lea    edx,[esp+0x30]
c001e9b7:	52                   	push   edx
c001e9b8:	6a 00                	push   0x0
c001e9ba:	68 00 04 00 00       	push   0x400
c001e9bf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001e9c6:	ff d0                	call   eax
c001e9c8:	83 c4 20             	add    esp,0x20
c001e9cb:	83 ec 0c             	sub    esp,0xc
c001e9ce:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001e9d5:	e8 56 a2 fe ff       	call   c0008c30 <File::close()>
c001e9da:	83 c4 10             	add    esp,0x10
c001e9dd:	8d 76 00             	lea    esi,[esi+0x0]
c001e9e0:	83 ec 08             	sub    esp,0x8
c001e9e3:	6a 01                	push   0x1
c001e9e5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001e9ec:	e8 e1 a1 fe ff       	call   c0008bd2 <File::open(FileOpenMode)>
c001e9f1:	83 c4 10             	add    esp,0x10
c001e9f4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001e9fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9fd:	83 c0 0c             	add    eax,0xc
c001ea00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea02:	83 ec 0c             	sub    esp,0xc
c001ea05:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ea09:	52                   	push   edx
c001ea0a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ea0e:	52                   	push   edx
c001ea0f:	6a 00                	push   0x0
c001ea11:	6a 04                	push   0x4
c001ea13:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ea1a:	ff d0                	call   eax
c001ea1c:	83 c4 20             	add    esp,0x20
c001ea1f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ea26:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ea2c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ea33:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ea3a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ea3d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ea44:	83 ec 0c             	sub    esp,0xc
c001ea47:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ea4e:	e8 dd a1 fe ff       	call   c0008c30 <File::close()>
c001ea53:	83 c4 10             	add    esp,0x10
c001ea56:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ea5d:	ba 00 00 00 00       	mov    edx,0x0
c001ea62:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ea68:	5b                   	pop    ebx
c001ea69:	5e                   	pop    esi
c001ea6a:	5f                   	pop    edi
c001ea6b:	5d                   	pop    ebp
c001ea6c:	c3                   	ret    
c001ea6d:	90                   	nop
c001ea6e:	66 90                	xchg   ax,ax

c001ea70 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ea70:	57                   	push   edi
c001ea71:	56                   	push   esi
c001ea72:	53                   	push   ebx
c001ea73:	81 ec 50 02 00 00    	sub    esp,0x250
c001ea79:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ea81:	74 0d                	je     c001ea90 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ea83:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ea8b:	75 0f                	jne    c001ea9c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ea8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ea90:	b8 04 00 00 00       	mov    eax,0x4
c001ea95:	e9 3a 01 00 00       	jmp    c001ebd4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001ea9a:	66 90                	xchg   ax,ax
c001ea9c:	83 ec 08             	sub    esp,0x8
c001ea9f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001eaa6:	50                   	push   eax
c001eaa7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001eaae:	e8 2c 5e fe ff       	call   c00048df <f_readdir>
c001eab3:	83 c4 10             	add    esp,0x10
c001eab6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001eabd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001eac4:	83 ec 0c             	sub    esp,0xc
c001eac7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001eace:	83 c0 16             	add    eax,0x16
c001ead1:	50                   	push   eax
c001ead2:	e8 99 1a fe ff       	call   c0000570 <strlen>
c001ead7:	83 c4 10             	add    esp,0x10
c001eada:	ba 00 00 00 00       	mov    edx,0x0
c001eadf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eae3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001eae7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001eaee:	0f b6 c0             	movzx  eax,al
c001eaf1:	83 e0 10             	and    eax,0x10
c001eaf4:	74 0a                	je     c001eb00 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001eaf6:	b8 02 00 00 00       	mov    eax,0x2
c001eafb:	eb 0b                	jmp    c001eb08 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001eafd:	8d 76 00             	lea    esi,[esi+0x0]
c001eb00:	b8 01 00 00 00       	mov    eax,0x1
c001eb05:	8d 76 00             	lea    esi,[esi+0x0]
c001eb08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001eb0c:	83 ec 08             	sub    esp,0x8
c001eb0f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001eb16:	83 c0 16             	add    eax,0x16
c001eb19:	50                   	push   eax
c001eb1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eb1e:	83 c0 10             	add    eax,0x10
c001eb21:	50                   	push   eax
c001eb22:	e8 19 1b fe ff       	call   c0000640 <strcpy>
c001eb27:	83 c4 10             	add    esp,0x10
c001eb2a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001eb31:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001eb38:	8d 44 24 08          	lea    eax,[esp+0x8]
c001eb3c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001eb43:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001eb4a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001eb51:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001eb58:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001eb5f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001eb66:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001eb6d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001eb74:	89 c6                	mov    esi,eax
c001eb76:	89 d7                	mov    edi,edx
c001eb78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eb7a:	89 c8                	mov    eax,ecx
c001eb7c:	89 fa                	mov    edx,edi
c001eb7e:	89 f3                	mov    ebx,esi
c001eb80:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001eb87:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001eb8e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001eb95:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001eb9c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001eba2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001eba9:	0f be c0             	movsx  eax,al
c001ebac:	85 c0                	test   eax,eax
c001ebae:	75 08                	jne    c001ebb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001ebb0:	b8 07 00 00 00       	mov    eax,0x7
c001ebb5:	eb 1d                	jmp    c001ebd4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001ebb7:	90                   	nop
c001ebb8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ebbf:	85 c0                	test   eax,eax
c001ebc1:	75 09                	jne    c001ebcc <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001ebc3:	b8 00 00 00 00       	mov    eax,0x0
c001ebc8:	eb 0a                	jmp    c001ebd4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001ebca:	66 90                	xchg   ax,ax
c001ebcc:	b8 01 00 00 00       	mov    eax,0x1
c001ebd1:	8d 76 00             	lea    esi,[esi+0x0]
c001ebd4:	81 c4 50 02 00 00    	add    esp,0x250
c001ebda:	5b                   	pop    ebx
c001ebdb:	5e                   	pop    esi
c001ebdc:	5f                   	pop    edi
c001ebdd:	c3                   	ret    
c001ebde:	66 90                	xchg   ax,ax

c001ebe0 <FAT::read(void*, unsigned long, void*, int*)>:
c001ebe0:	83 ec 1c             	sub    esp,0x1c
c001ebe3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ebe8:	74 0a                	je     c001ebf4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ebea:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ebef:	75 0b                	jne    c001ebfc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ebf1:	8d 76 00             	lea    esi,[esi+0x0]
c001ebf4:	b8 04 00 00 00       	mov    eax,0x4
c001ebf9:	eb 41                	jmp    c001ec3c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ebfb:	90                   	nop
c001ebfc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ec00:	50                   	push   eax
c001ec01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ec05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ec09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec0d:	e8 f4 54 fe ff       	call   c0004106 <f_read>
c001ec12:	83 c4 10             	add    esp,0x10
c001ec15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec1d:	89 c2                	mov    edx,eax
c001ec1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ec23:	89 10                	mov    DWORD PTR [eax],edx
c001ec25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec29:	85 c0                	test   eax,eax
c001ec2b:	75 07                	jne    c001ec34 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ec2d:	b8 00 00 00 00       	mov    eax,0x0
c001ec32:	eb 08                	jmp    c001ec3c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ec34:	b8 01 00 00 00       	mov    eax,0x1
c001ec39:	8d 76 00             	lea    esi,[esi+0x0]
c001ec3c:	83 c4 1c             	add    esp,0x1c
c001ec3f:	c3                   	ret    

c001ec40 <FAT::write(void*, unsigned long, void*, int*)>:
c001ec40:	83 ec 1c             	sub    esp,0x1c
c001ec43:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ec48:	74 0a                	je     c001ec54 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ec4a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ec4f:	75 0b                	jne    c001ec5c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ec51:	8d 76 00             	lea    esi,[esi+0x0]
c001ec54:	b8 04 00 00 00       	mov    eax,0x4
c001ec59:	eb 41                	jmp    c001ec9c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ec5b:	90                   	nop
c001ec5c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ec60:	50                   	push   eax
c001ec61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ec65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ec69:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec6d:	e8 93 56 fe ff       	call   c0004305 <f_write>
c001ec72:	83 c4 10             	add    esp,0x10
c001ec75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec7d:	89 c2                	mov    edx,eax
c001ec7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ec83:	89 10                	mov    DWORD PTR [eax],edx
c001ec85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec89:	85 c0                	test   eax,eax
c001ec8b:	75 07                	jne    c001ec94 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001ec8d:	b8 00 00 00 00       	mov    eax,0x0
c001ec92:	eb 08                	jmp    c001ec9c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ec94:	b8 01 00 00 00       	mov    eax,0x1
c001ec99:	8d 76 00             	lea    esi,[esi+0x0]
c001ec9c:	83 c4 1c             	add    esp,0x1c
c001ec9f:	c3                   	ret    

c001eca0 <FAT::close(void*)>:
c001eca0:	83 ec 1c             	sub    esp,0x1c
c001eca3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001eca8:	75 0a                	jne    c001ecb4 <FAT::close(void*)+0x14>
c001ecaa:	b8 04 00 00 00       	mov    eax,0x4
c001ecaf:	eb 3f                	jmp    c001ecf0 <FAT::close(void*)+0x50>
c001ecb1:	8d 76 00             	lea    esi,[esi+0x0]
c001ecb4:	83 ec 0c             	sub    esp,0xc
c001ecb7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecbb:	e8 52 59 fe ff       	call   c0004612 <f_close>
c001ecc0:	83 c4 10             	add    esp,0x10
c001ecc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecc7:	83 ec 0c             	sub    esp,0xc
c001ecca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecce:	e8 34 16 ff ff       	call   c0010307 <free>
c001ecd3:	83 c4 10             	add    esp,0x10
c001ecd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecda:	85 c0                	test   eax,eax
c001ecdc:	75 0a                	jne    c001ece8 <FAT::close(void*)+0x48>
c001ecde:	b8 00 00 00 00       	mov    eax,0x0
c001ece3:	eb 0b                	jmp    c001ecf0 <FAT::close(void*)+0x50>
c001ece5:	8d 76 00             	lea    esi,[esi+0x0]
c001ece8:	b8 01 00 00 00       	mov    eax,0x1
c001eced:	8d 76 00             	lea    esi,[esi+0x0]
c001ecf0:	83 c4 1c             	add    esp,0x1c
c001ecf3:	c3                   	ret    

c001ecf4 <FAT::closeDir(void*)>:
c001ecf4:	83 ec 1c             	sub    esp,0x1c
c001ecf7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ecfc:	75 0a                	jne    c001ed08 <FAT::closeDir(void*)+0x14>
c001ecfe:	b8 04 00 00 00       	mov    eax,0x4
c001ed03:	eb 3f                	jmp    c001ed44 <FAT::closeDir(void*)+0x50>
c001ed05:	8d 76 00             	lea    esi,[esi+0x0]
c001ed08:	83 ec 0c             	sub    esp,0xc
c001ed0b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed0f:	e8 a9 5b fe ff       	call   c00048bd <f_closedir>
c001ed14:	83 c4 10             	add    esp,0x10
c001ed17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed1b:	83 ec 0c             	sub    esp,0xc
c001ed1e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed22:	e8 e0 15 ff ff       	call   c0010307 <free>
c001ed27:	83 c4 10             	add    esp,0x10
c001ed2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed2e:	85 c0                	test   eax,eax
c001ed30:	75 0a                	jne    c001ed3c <FAT::closeDir(void*)+0x48>
c001ed32:	b8 00 00 00 00       	mov    eax,0x0
c001ed37:	eb 0b                	jmp    c001ed44 <FAT::closeDir(void*)+0x50>
c001ed39:	8d 76 00             	lea    esi,[esi+0x0]
c001ed3c:	b8 01 00 00 00       	mov    eax,0x1
c001ed41:	8d 76 00             	lea    esi,[esi+0x0]
c001ed44:	83 c4 1c             	add    esp,0x1c
c001ed47:	c3                   	ret    

c001ed48 <FAT::truncate(void*, unsigned long long)>:
c001ed48:	83 ec 2c             	sub    esp,0x2c
c001ed4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ed4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ed53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ed57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed5b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ed60:	75 0a                	jne    c001ed6c <FAT::truncate(void*, unsigned long long)+0x24>
c001ed62:	b8 04 00 00 00       	mov    eax,0x4
c001ed67:	eb 47                	jmp    c001edb0 <FAT::truncate(void*, unsigned long long)+0x68>
c001ed69:	8d 76 00             	lea    esi,[esi+0x0]
c001ed6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ed70:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ed73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ed77:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ed7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed83:	83 ec 08             	sub    esp,0x8
c001ed86:	50                   	push   eax
c001ed87:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ed8b:	e8 b1 58 fe ff       	call   c0004641 <f_lseek>
c001ed90:	83 c4 10             	add    esp,0x10
c001ed93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ed97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed9b:	85 c0                	test   eax,eax
c001ed9d:	75 09                	jne    c001eda8 <FAT::truncate(void*, unsigned long long)+0x60>
c001ed9f:	b8 00 00 00 00       	mov    eax,0x0
c001eda4:	eb 0a                	jmp    c001edb0 <FAT::truncate(void*, unsigned long long)+0x68>
c001eda6:	66 90                	xchg   ax,ax
c001eda8:	b8 01 00 00 00       	mov    eax,0x1
c001edad:	8d 76 00             	lea    esi,[esi+0x0]
c001edb0:	83 c4 2c             	add    esp,0x2c
c001edb3:	c3                   	ret    

c001edb4 <FAT::seek(void*, unsigned long long)>:
c001edb4:	83 ec 2c             	sub    esp,0x2c
c001edb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001edbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001edbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001edc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edc7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001edcc:	75 0a                	jne    c001edd8 <FAT::seek(void*, unsigned long long)+0x24>
c001edce:	b8 04 00 00 00       	mov    eax,0x4
c001edd3:	eb 33                	jmp    c001ee08 <FAT::seek(void*, unsigned long long)+0x54>
c001edd5:	8d 76 00             	lea    esi,[esi+0x0]
c001edd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eddc:	83 ec 08             	sub    esp,0x8
c001eddf:	50                   	push   eax
c001ede0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ede4:	e8 58 58 fe ff       	call   c0004641 <f_lseek>
c001ede9:	83 c4 10             	add    esp,0x10
c001edec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001edf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edf4:	85 c0                	test   eax,eax
c001edf6:	75 08                	jne    c001ee00 <FAT::seek(void*, unsigned long long)+0x4c>
c001edf8:	b8 00 00 00 00       	mov    eax,0x0
c001edfd:	eb 09                	jmp    c001ee08 <FAT::seek(void*, unsigned long long)+0x54>
c001edff:	90                   	nop
c001ee00:	b8 01 00 00 00       	mov    eax,0x1
c001ee05:	8d 76 00             	lea    esi,[esi+0x0]
c001ee08:	83 c4 2c             	add    esp,0x2c
c001ee0b:	c3                   	ret    

c001ee0c <fatWrapperReadDisk>:
c001ee0c:	53                   	push   ebx
c001ee0d:	83 ec 18             	sub    esp,0x18
c001ee10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee14:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ee18:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ee1d:	8b 0c 85 e0 5a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffca520]
c001ee24:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ee28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ee2c:	ba 00 00 00 00       	mov    edx,0x0
c001ee31:	83 ec 0c             	sub    esp,0xc
c001ee34:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ee38:	53                   	push   ebx
c001ee39:	52                   	push   edx
c001ee3a:	50                   	push   eax
c001ee3b:	51                   	push   ecx
c001ee3c:	e8 5d c6 fe ff       	call   c000b49e <LogicalDisk::read(unsigned long long, int, void*)>
c001ee41:	83 c4 20             	add    esp,0x20
c001ee44:	83 c4 18             	add    esp,0x18
c001ee47:	5b                   	pop    ebx
c001ee48:	c3                   	ret    
c001ee49:	8d 76 00             	lea    esi,[esi+0x0]

c001ee4c <fatWrapperWriteDisk>:
c001ee4c:	53                   	push   ebx
c001ee4d:	83 ec 18             	sub    esp,0x18
c001ee50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee54:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ee58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ee5d:	8b 0c 85 e0 5a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffca520]
c001ee64:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ee68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ee6c:	ba 00 00 00 00       	mov    edx,0x0
c001ee71:	83 ec 0c             	sub    esp,0xc
c001ee74:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ee78:	53                   	push   ebx
c001ee79:	52                   	push   edx
c001ee7a:	50                   	push   eax
c001ee7b:	51                   	push   ecx
c001ee7c:	e8 89 c6 fe ff       	call   c000b50a <LogicalDisk::write(unsigned long long, int, void*)>
c001ee81:	83 c4 20             	add    esp,0x20
c001ee84:	83 c4 18             	add    esp,0x18
c001ee87:	5b                   	pop    ebx
c001ee88:	c3                   	ret    
c001ee89:	8d 76 00             	lea    esi,[esi+0x0]

c001ee8c <fatWrapperIoctl>:
c001ee8c:	53                   	push   ebx
c001ee8d:	83 ec 28             	sub    esp,0x28
c001ee90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ee94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ee98:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ee9c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eea0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eea5:	83 f8 02             	cmp    eax,0x2
c001eea8:	75 32                	jne    c001eedc <fatWrapperIoctl+0x50>
c001eeaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eeae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001eeb2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eeb7:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c001eebe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001eec4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eeca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eece:	66 89 02             	mov    WORD PTR [edx],ax
c001eed1:	b8 00 00 00 00       	mov    eax,0x0
c001eed6:	e9 c5 00 00 00       	jmp    c001efa0 <fatWrapperIoctl+0x114>
c001eedb:	90                   	nop
c001eedc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eee1:	83 f8 01             	cmp    eax,0x1
c001eee4:	75 6a                	jne    c001ef50 <fatWrapperIoctl+0xc4>
c001eee6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eeea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001eeee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eef3:	8b 04 85 e0 5a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca520]
c001eefa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ef00:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001ef06:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001ef0c:	89 c8                	mov    eax,ecx
c001ef0e:	89 da                	mov    edx,ebx
c001ef10:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ef14:	c1 e0 0a             	shl    eax,0xa
c001ef17:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001ef1c:	8b 0c 8d e0 5a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffca520]
c001ef23:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001ef29:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001ef2f:	89 cb                	mov    ebx,ecx
c001ef31:	c1 fb 1f             	sar    ebx,0x1f
c001ef34:	53                   	push   ebx
c001ef35:	51                   	push   ecx
c001ef36:	52                   	push   edx
c001ef37:	50                   	push   eax
c001ef38:	e8 57 55 00 00       	call   c0024494 <__udivdi3>
c001ef3d:	83 c4 10             	add    esp,0x10
c001ef40:	89 c2                	mov    edx,eax
c001ef42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef46:	89 10                	mov    DWORD PTR [eax],edx
c001ef48:	b8 00 00 00 00       	mov    eax,0x0
c001ef4d:	eb 51                	jmp    c001efa0 <fatWrapperIoctl+0x114>
c001ef4f:	90                   	nop
c001ef50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ef55:	85 c0                	test   eax,eax
c001ef57:	75 07                	jne    c001ef60 <fatWrapperIoctl+0xd4>
c001ef59:	b8 00 00 00 00       	mov    eax,0x0
c001ef5e:	eb 40                	jmp    c001efa0 <fatWrapperIoctl+0x114>
c001ef60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ef65:	83 f8 03             	cmp    eax,0x3
c001ef68:	75 1a                	jne    c001ef84 <fatWrapperIoctl+0xf8>
c001ef6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ef6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ef72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef76:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ef7c:	b8 00 00 00 00       	mov    eax,0x0
c001ef81:	eb 1d                	jmp    c001efa0 <fatWrapperIoctl+0x114>
c001ef83:	90                   	nop
c001ef84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ef89:	83 f8 04             	cmp    eax,0x4
c001ef8c:	75 0a                	jne    c001ef98 <fatWrapperIoctl+0x10c>
c001ef8e:	b8 00 00 00 00       	mov    eax,0x0
c001ef93:	eb 0b                	jmp    c001efa0 <fatWrapperIoctl+0x114>
c001ef95:	8d 76 00             	lea    esi,[esi+0x0]
c001ef98:	b8 04 00 00 00       	mov    eax,0x4
c001ef9d:	8d 76 00             	lea    esi,[esi+0x0]
c001efa0:	83 c4 28             	add    esp,0x28
c001efa3:	5b                   	pop    ebx
c001efa4:	c3                   	ret    
c001efa5:	90                   	nop
c001efa6:	66 90                	xchg   ax,ax

c001efa8 <FAT::FAT()>:
c001efa8:	83 ec 1c             	sub    esp,0x1c
c001efab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efaf:	83 ec 0c             	sub    esp,0xc
c001efb2:	50                   	push   eax
c001efb3:	e8 3a 98 fe ff       	call   c00087f2 <Filesystem::Filesystem()>
c001efb8:	83 c4 10             	add    esp,0x10
c001efbb:	ba 1c de 02 c0       	mov    edx,0xc002de1c
c001efc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efc4:	89 10                	mov    DWORD PTR [eax],edx
c001efc6:	c7 05 80 84 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0038480,0x0
c001efd0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001efd8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001efdd:	7f 19                	jg     c001eff8 <FAT::FAT()+0x50>
c001efdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efe3:	c7 04 85 a0 84 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffc7b60],0xffffffff
c001efee:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001eff3:	eb e3                	jmp    c001efd8 <FAT::FAT()+0x30>
c001eff5:	8d 76 00             	lea    esi,[esi+0x0]
c001eff8:	90                   	nop
c001eff9:	83 c4 1c             	add    esp,0x1c
c001effc:	c3                   	ret    
c001effd:	90                   	nop
c001effe:	66 90                	xchg   ax,ax

c001f000 <FAT::fixFilepath(char*)>:
c001f000:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f004:	8a 00                	mov    al,BYTE PTR [eax]
c001f006:	0f be c0             	movsx  eax,al
c001f009:	83 f8 40             	cmp    eax,0x40
c001f00c:	7e 2e                	jle    c001f03c <FAT::fixFilepath(char*)+0x3c>
c001f00e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f012:	8a 00                	mov    al,BYTE PTR [eax]
c001f014:	83 e8 41             	sub    eax,0x41
c001f017:	88 c2                	mov    dl,al
c001f019:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f01d:	88 10                	mov    BYTE PTR [eax],dl
c001f01f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f023:	8a 00                	mov    al,BYTE PTR [eax]
c001f025:	0f be c0             	movsx  eax,al
c001f028:	8b 04 85 a0 84 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc7b60]
c001f02f:	83 c0 30             	add    eax,0x30
c001f032:	88 c2                	mov    dl,al
c001f034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f038:	88 10                	mov    BYTE PTR [eax],dl
c001f03a:	66 90                	xchg   ax,ax
c001f03c:	90                   	nop
c001f03d:	c3                   	ret    
c001f03e:	66 90                	xchg   ax,ax

c001f040 <FAT::open(char const*, void**, FileOpenMode)>:
c001f040:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f046:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f04e:	74 0c                	je     c001f05c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001f050:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f058:	75 0e                	jne    c001f068 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001f05a:	66 90                	xchg   ax,ax
c001f05c:	b8 04 00 00 00       	mov    eax,0x4
c001f061:	e9 46 01 00 00       	jmp    c001f1ac <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001f066:	66 90                	xchg   ax,ax
c001f068:	83 ec 08             	sub    esp,0x8
c001f06b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f072:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f076:	50                   	push   eax
c001f077:	e8 c4 15 fe ff       	call   c0000640 <strcpy>
c001f07c:	83 c4 10             	add    esp,0x10
c001f07f:	83 ec 08             	sub    esp,0x8
c001f082:	8d 44 24 10          	lea    eax,[esp+0x10]
c001f086:	50                   	push   eax
c001f087:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f08e:	e8 6d ff ff ff       	call   c001f000 <FAT::fixFilepath(char*)>
c001f093:	83 c4 10             	add    esp,0x10
c001f096:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001f09e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f0a5:	83 e0 01             	and    eax,0x1
c001f0a8:	74 12                	je     c001f0bc <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001f0aa:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f0b1:	83 c8 01             	or     eax,0x1
c001f0b4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f0bb:	90                   	nop
c001f0bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f0c3:	83 e0 04             	and    eax,0x4
c001f0c6:	74 24                	je     c001f0ec <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001f0c8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f0cf:	83 c8 30             	or     eax,0x30
c001f0d2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f0d9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f0e0:	83 c8 02             	or     eax,0x2
c001f0e3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f0ea:	66 90                	xchg   ax,ax
c001f0ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f0f3:	83 e0 02             	and    eax,0x2
c001f0f6:	74 14                	je     c001f10c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001f0f8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f0ff:	83 c8 02             	or     eax,0x2
c001f102:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f109:	8d 76 00             	lea    esi,[esi+0x0]
c001f10c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f113:	83 e0 08             	and    eax,0x8
c001f116:	74 14                	je     c001f12c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001f118:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f11f:	83 c8 04             	or     eax,0x4
c001f122:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f129:	8d 76 00             	lea    esi,[esi+0x0]
c001f12c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f133:	83 e0 10             	and    eax,0x10
c001f136:	74 14                	je     c001f14c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001f138:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001f13f:	83 c8 08             	or     eax,0x8
c001f142:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001f149:	8d 76 00             	lea    esi,[esi+0x0]
c001f14c:	83 ec 0c             	sub    esp,0xc
c001f14f:	68 28 02 00 00       	push   0x228
c001f154:	e8 9e 11 ff ff       	call   c00102f7 <malloc>
c001f159:	83 c4 10             	add    esp,0x10
c001f15c:	89 c2                	mov    edx,eax
c001f15e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f165:	89 10                	mov    DWORD PTR [eax],edx
c001f167:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001f16f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f176:	8b 00                	mov    eax,DWORD PTR [eax]
c001f178:	83 ec 04             	sub    esp,0x4
c001f17b:	52                   	push   edx
c001f17c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f180:	52                   	push   edx
c001f181:	50                   	push   eax
c001f182:	e8 bc 4c fe ff       	call   c0003e43 <f_open>
c001f187:	83 c4 10             	add    esp,0x10
c001f18a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001f191:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001f199:	74 09                	je     c001f1a4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001f19b:	b8 01 00 00 00       	mov    eax,0x1
c001f1a0:	eb 0a                	jmp    c001f1ac <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001f1a2:	66 90                	xchg   ax,ax
c001f1a4:	b8 00 00 00 00       	mov    eax,0x0
c001f1a9:	8d 76 00             	lea    esi,[esi+0x0]
c001f1ac:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f1b2:	c3                   	ret    
c001f1b3:	90                   	nop

c001f1b4 <FAT::openDir(char const*, void**)>:
c001f1b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f1ba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f1c2:	74 0c                	je     c001f1d0 <FAT::openDir(char const*, void**)+0x1c>
c001f1c4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f1cc:	75 0e                	jne    c001f1dc <FAT::openDir(char const*, void**)+0x28>
c001f1ce:	66 90                	xchg   ax,ax
c001f1d0:	b8 04 00 00 00       	mov    eax,0x4
c001f1d5:	e9 82 00 00 00       	jmp    c001f25c <FAT::openDir(char const*, void**)+0xa8>
c001f1da:	66 90                	xchg   ax,ax
c001f1dc:	83 ec 08             	sub    esp,0x8
c001f1df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f1e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f1ea:	50                   	push   eax
c001f1eb:	e8 50 14 fe ff       	call   c0000640 <strcpy>
c001f1f0:	83 c4 10             	add    esp,0x10
c001f1f3:	83 ec 08             	sub    esp,0x8
c001f1f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f1fa:	50                   	push   eax
c001f1fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f202:	e8 f9 fd ff ff       	call   c001f000 <FAT::fixFilepath(char*)>
c001f207:	83 c4 10             	add    esp,0x10
c001f20a:	83 ec 0c             	sub    esp,0xc
c001f20d:	6a 30                	push   0x30
c001f20f:	e8 e3 10 ff ff       	call   c00102f7 <malloc>
c001f214:	83 c4 10             	add    esp,0x10
c001f217:	89 c2                	mov    edx,eax
c001f219:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f220:	89 10                	mov    DWORD PTR [eax],edx
c001f222:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f229:	8b 00                	mov    eax,DWORD PTR [eax]
c001f22b:	83 ec 08             	sub    esp,0x8
c001f22e:	8d 54 24 14          	lea    edx,[esp+0x14]
c001f232:	52                   	push   edx
c001f233:	50                   	push   eax
c001f234:	e8 b9 55 fe ff       	call   c00047f2 <f_opendir>
c001f239:	83 c4 10             	add    esp,0x10
c001f23c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f243:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001f24b:	74 07                	je     c001f254 <FAT::openDir(char const*, void**)+0xa0>
c001f24d:	b8 01 00 00 00       	mov    eax,0x1
c001f252:	eb 08                	jmp    c001f25c <FAT::openDir(char const*, void**)+0xa8>
c001f254:	b8 00 00 00 00       	mov    eax,0x0
c001f259:	8d 76 00             	lea    esi,[esi+0x0]
c001f25c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f262:	c3                   	ret    
c001f263:	90                   	nop

c001f264 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001f264:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f26a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001f272:	75 0c                	jne    c001f280 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001f274:	b8 04 00 00 00       	mov    eax,0x4
c001f279:	e9 d6 00 00 00       	jmp    c001f354 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f27e:	66 90                	xchg   ax,ax
c001f280:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001f288:	75 0a                	jne    c001f294 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001f28a:	b8 04 00 00 00       	mov    eax,0x4
c001f28f:	e9 c0 00 00 00       	jmp    c001f354 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f294:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001f29c:	75 0a                	jne    c001f2a8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001f29e:	b8 04 00 00 00       	mov    eax,0x4
c001f2a3:	e9 ac 00 00 00       	jmp    c001f354 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f2a8:	83 ec 08             	sub    esp,0x8
c001f2ab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f2b2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f2b9:	50                   	push   eax
c001f2ba:	e8 81 13 fe ff       	call   c0000640 <strcpy>
c001f2bf:	83 c4 10             	add    esp,0x10
c001f2c2:	83 ec 08             	sub    esp,0x8
c001f2c5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001f2cc:	50                   	push   eax
c001f2cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f2d4:	e8 27 fd ff ff       	call   c001f000 <FAT::fixFilepath(char*)>
c001f2d9:	83 c4 10             	add    esp,0x10
c001f2dc:	83 ec 08             	sub    esp,0x8
c001f2df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2e3:	50                   	push   eax
c001f2e4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f2eb:	50                   	push   eax
c001f2ec:	e8 80 56 fe ff       	call   c0004971 <f_stat>
c001f2f1:	83 c4 10             	add    esp,0x10
c001f2f4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f2fb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f302:	85 c0                	test   eax,eax
c001f304:	74 0a                	je     c001f310 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001f306:	83 f8 04             	cmp    eax,0x4
c001f309:	74 39                	je     c001f344 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001f30b:	eb 3f                	jmp    c001f34c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001f30d:	8d 76 00             	lea    esi,[esi+0x0]
c001f310:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f314:	0f b6 c0             	movzx  eax,al
c001f317:	83 e0 10             	and    eax,0x10
c001f31a:	0f 95 c2             	setne  dl
c001f31d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001f324:	88 10                	mov    BYTE PTR [eax],dl
c001f326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f32a:	ba 00 00 00 00       	mov    edx,0x0
c001f32f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001f336:	89 01                	mov    DWORD PTR [ecx],eax
c001f338:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f33b:	b8 00 00 00 00       	mov    eax,0x0
c001f340:	eb 12                	jmp    c001f354 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f342:	66 90                	xchg   ax,ax
c001f344:	b8 02 00 00 00       	mov    eax,0x2
c001f349:	eb 09                	jmp    c001f354 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001f34b:	90                   	nop
c001f34c:	b8 01 00 00 00       	mov    eax,0x1
c001f351:	8d 76 00             	lea    esi,[esi+0x0]
c001f354:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f35a:	c3                   	ret    
c001f35b:	90                   	nop

c001f35c <FAT::unlink(char const*)>:
c001f35c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f362:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f36a:	75 08                	jne    c001f374 <FAT::unlink(char const*)+0x18>
c001f36c:	b8 04 00 00 00       	mov    eax,0x4
c001f371:	eb 61                	jmp    c001f3d4 <FAT::unlink(char const*)+0x78>
c001f373:	90                   	nop
c001f374:	83 ec 08             	sub    esp,0x8
c001f377:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f37e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f382:	50                   	push   eax
c001f383:	e8 b8 12 fe ff       	call   c0000640 <strcpy>
c001f388:	83 c4 10             	add    esp,0x10
c001f38b:	83 ec 08             	sub    esp,0x8
c001f38e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f392:	50                   	push   eax
c001f393:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f39a:	e8 61 fc ff ff       	call   c001f000 <FAT::fixFilepath(char*)>
c001f39f:	83 c4 10             	add    esp,0x10
c001f3a2:	83 ec 0c             	sub    esp,0xc
c001f3a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f3a9:	50                   	push   eax
c001f3aa:	e8 34 58 fe ff       	call   c0004be3 <f_unlink>
c001f3af:	83 c4 10             	add    esp,0x10
c001f3b2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f3b9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f3c0:	85 c0                	test   eax,eax
c001f3c2:	75 08                	jne    c001f3cc <FAT::unlink(char const*)+0x70>
c001f3c4:	b8 00 00 00 00       	mov    eax,0x0
c001f3c9:	eb 09                	jmp    c001f3d4 <FAT::unlink(char const*)+0x78>
c001f3cb:	90                   	nop
c001f3cc:	b8 01 00 00 00       	mov    eax,0x1
c001f3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f3d4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f3da:	c3                   	ret    
c001f3db:	90                   	nop

c001f3dc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001f3dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001f3e2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001f3e9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001f3f0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001f3f4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f3f8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001f400:	75 0a                	jne    c001f40c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001f402:	b8 04 00 00 00       	mov    eax,0x4
c001f407:	e9 7c 01 00 00       	jmp    c001f588 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001f40c:	83 ec 08             	sub    esp,0x8
c001f40f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f416:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f41a:	50                   	push   eax
c001f41b:	e8 20 12 fe ff       	call   c0000640 <strcpy>
c001f420:	83 c4 10             	add    esp,0x10
c001f423:	83 ec 08             	sub    esp,0x8
c001f426:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f42a:	50                   	push   eax
c001f42b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f432:	e8 c9 fb ff ff       	call   c001f000 <FAT::fixFilepath(char*)>
c001f437:	83 c4 10             	add    esp,0x10
c001f43a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001f442:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001f44a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f44f:	83 e0 01             	and    eax,0x1
c001f452:	74 14                	je     c001f468 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001f454:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f45b:	83 c8 01             	or     eax,0x1
c001f45e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001f465:	8d 76 00             	lea    esi,[esi+0x0]
c001f468:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f46d:	83 e0 02             	and    eax,0x2
c001f470:	74 12                	je     c001f484 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001f472:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f479:	83 c8 20             	or     eax,0x20
c001f47c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001f483:	90                   	nop
c001f484:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f489:	83 e0 04             	and    eax,0x4
c001f48c:	74 12                	je     c001f4a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001f48e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f495:	83 c8 04             	or     eax,0x4
c001f498:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001f49f:	90                   	nop
c001f4a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f4a5:	83 e0 08             	and    eax,0x8
c001f4a8:	74 12                	je     c001f4bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001f4aa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f4b1:	83 c8 02             	or     eax,0x2
c001f4b4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001f4bb:	90                   	nop
c001f4bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f4c1:	83 e0 01             	and    eax,0x1
c001f4c4:	74 12                	je     c001f4d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001f4c6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001f4cd:	83 c8 01             	or     eax,0x1
c001f4d0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001f4d7:	90                   	nop
c001f4d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f4dd:	83 e0 02             	and    eax,0x2
c001f4e0:	74 12                	je     c001f4f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001f4e2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001f4e9:	83 c8 20             	or     eax,0x20
c001f4ec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001f4f3:	90                   	nop
c001f4f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f4f9:	83 e0 04             	and    eax,0x4
c001f4fc:	74 12                	je     c001f510 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001f4fe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001f505:	83 c8 04             	or     eax,0x4
c001f508:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001f50f:	90                   	nop
c001f510:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f515:	83 e0 08             	and    eax,0x8
c001f518:	74 12                	je     c001f52c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001f51a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001f521:	83 c8 02             	or     eax,0x2
c001f524:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001f52b:	90                   	nop
c001f52c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001f533:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f53a:	09 d0                	or     eax,edx
c001f53c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001f543:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001f54b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001f553:	83 ec 04             	sub    esp,0x4
c001f556:	52                   	push   edx
c001f557:	50                   	push   eax
c001f558:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f55c:	50                   	push   eax
c001f55d:	e8 f6 5a fe ff       	call   c0005058 <f_chmod>
c001f562:	83 c4 10             	add    esp,0x10
c001f565:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001f56c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001f573:	85 c0                	test   eax,eax
c001f575:	75 09                	jne    c001f580 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001f577:	b8 00 00 00 00       	mov    eax,0x0
c001f57c:	eb 0a                	jmp    c001f588 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001f57e:	66 90                	xchg   ax,ax
c001f580:	b8 01 00 00 00       	mov    eax,0x1
c001f585:	8d 76 00             	lea    esi,[esi+0x0]
c001f588:	81 c4 2c 01 00 00    	add    esp,0x12c
c001f58e:	c3                   	ret    
c001f58f:	90                   	nop

c001f590 <FAT::rename(char const*, char const*)>:
c001f590:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f596:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001f59e:	74 0c                	je     c001f5ac <FAT::rename(char const*, char const*)+0x1c>
c001f5a0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001f5a8:	75 0e                	jne    c001f5b8 <FAT::rename(char const*, char const*)+0x28>
c001f5aa:	66 90                	xchg   ax,ax
c001f5ac:	b8 04 00 00 00       	mov    eax,0x4
c001f5b1:	e9 9e 00 00 00       	jmp    c001f654 <FAT::rename(char const*, char const*)+0xc4>
c001f5b6:	66 90                	xchg   ax,ax
c001f5b8:	83 ec 08             	sub    esp,0x8
c001f5bb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f5c2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f5c9:	50                   	push   eax
c001f5ca:	e8 71 10 fe ff       	call   c0000640 <strcpy>
c001f5cf:	83 c4 10             	add    esp,0x10
c001f5d2:	83 ec 08             	sub    esp,0x8
c001f5d5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001f5dc:	50                   	push   eax
c001f5dd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f5e4:	e8 17 fa ff ff       	call   c001f000 <FAT::fixFilepath(char*)>
c001f5e9:	83 c4 10             	add    esp,0x10
c001f5ec:	83 ec 08             	sub    esp,0x8
c001f5ef:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001f5f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f5fa:	50                   	push   eax
c001f5fb:	e8 40 10 fe ff       	call   c0000640 <strcpy>
c001f600:	83 c4 10             	add    esp,0x10
c001f603:	83 ec 08             	sub    esp,0x8
c001f606:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f60a:	50                   	push   eax
c001f60b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f612:	e8 e9 f9 ff ff       	call   c001f000 <FAT::fixFilepath(char*)>
c001f617:	83 c4 10             	add    esp,0x10
c001f61a:	83 ec 08             	sub    esp,0x8
c001f61d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f621:	50                   	push   eax
c001f622:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f629:	50                   	push   eax
c001f62a:	e8 71 58 fe ff       	call   c0004ea0 <f_rename>
c001f62f:	83 c4 10             	add    esp,0x10
c001f632:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001f639:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001f640:	85 c0                	test   eax,eax
c001f642:	75 08                	jne    c001f64c <FAT::rename(char const*, char const*)+0xbc>
c001f644:	b8 00 00 00 00       	mov    eax,0x0
c001f649:	eb 09                	jmp    c001f654 <FAT::rename(char const*, char const*)+0xc4>
c001f64b:	90                   	nop
c001f64c:	b8 01 00 00 00       	mov    eax,0x1
c001f651:	8d 76 00             	lea    esi,[esi+0x0]
c001f654:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f65a:	c3                   	ret    
c001f65b:	90                   	nop

c001f65c <FAT::mkdir(char const*)>:
c001f65c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f662:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f66a:	75 08                	jne    c001f674 <FAT::mkdir(char const*)+0x18>
c001f66c:	b8 04 00 00 00       	mov    eax,0x4
c001f671:	eb 61                	jmp    c001f6d4 <FAT::mkdir(char const*)+0x78>
c001f673:	90                   	nop
c001f674:	83 ec 08             	sub    esp,0x8
c001f677:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f67e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f682:	50                   	push   eax
c001f683:	e8 b8 0f fe ff       	call   c0000640 <strcpy>
c001f688:	83 c4 10             	add    esp,0x10
c001f68b:	83 ec 08             	sub    esp,0x8
c001f68e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f692:	50                   	push   eax
c001f693:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f69a:	e8 61 f9 ff ff       	call   c001f000 <FAT::fixFilepath(char*)>
c001f69f:	83 c4 10             	add    esp,0x10
c001f6a2:	83 ec 0c             	sub    esp,0xc
c001f6a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f6a9:	50                   	push   eax
c001f6aa:	e8 56 56 fe ff       	call   c0004d05 <f_mkdir>
c001f6af:	83 c4 10             	add    esp,0x10
c001f6b2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f6b9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f6c0:	85 c0                	test   eax,eax
c001f6c2:	75 08                	jne    c001f6cc <FAT::mkdir(char const*)+0x70>
c001f6c4:	b8 00 00 00 00       	mov    eax,0x0
c001f6c9:	eb 09                	jmp    c001f6d4 <FAT::mkdir(char const*)+0x78>
c001f6cb:	90                   	nop
c001f6cc:	b8 01 00 00 00       	mov    eax,0x1
c001f6d1:	8d 76 00             	lea    esi,[esi+0x0]
c001f6d4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f6da:	c3                   	ret    
c001f6db:	90                   	nop

c001f6dc <FAT::exists(char const*)>:
c001f6dc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f6e2:	83 ec 08             	sub    esp,0x8
c001f6e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f6ec:	8d 44 24 10          	lea    eax,[esp+0x10]
c001f6f0:	50                   	push   eax
c001f6f1:	e8 4a 0f fe ff       	call   c0000640 <strcpy>
c001f6f6:	83 c4 10             	add    esp,0x10
c001f6f9:	83 ec 08             	sub    esp,0x8
c001f6fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f700:	50                   	push   eax
c001f701:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f708:	e8 f3 f8 ff ff       	call   c001f000 <FAT::fixFilepath(char*)>
c001f70d:	83 c4 10             	add    esp,0x10
c001f710:	83 ec 08             	sub    esp,0x8
c001f713:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001f71a:	50                   	push   eax
c001f71b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001f71f:	50                   	push   eax
c001f720:	e8 4c 52 fe ff       	call   c0004971 <f_stat>
c001f725:	83 c4 10             	add    esp,0x10
c001f728:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f72f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f736:	85 c0                	test   eax,eax
c001f738:	75 06                	jne    c001f740 <FAT::exists(char const*)+0x64>
c001f73a:	b0 01                	mov    al,0x1
c001f73c:	eb 06                	jmp    c001f744 <FAT::exists(char const*)+0x68>
c001f73e:	66 90                	xchg   ax,ax
c001f740:	b0 00                	mov    al,0x0
c001f742:	66 90                	xchg   ax,ax
c001f744:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f74a:	c3                   	ret    
c001f74b:	90                   	nop

c001f74c <isoReadDiscSectorHelper>:
c001f74c:	83 ec 2c             	sub    esp,0x2c
c001f74f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f753:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f757:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f75c:	83 e8 41             	sub    eax,0x41
c001f75f:	8b 0c 85 e0 5a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffca520]
c001f766:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f76a:	ba 00 00 00 00       	mov    edx,0x0
c001f76f:	83 ec 0c             	sub    esp,0xc
c001f772:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f776:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f77a:	52                   	push   edx
c001f77b:	50                   	push   eax
c001f77c:	51                   	push   ecx
c001f77d:	e8 1c bd fe ff       	call   c000b49e <LogicalDisk::read(unsigned long long, int, void*)>
c001f782:	83 c4 20             	add    esp,0x20
c001f785:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f789:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f78e:	74 0c                	je     c001f79c <isoReadDiscSectorHelper+0x50>
c001f790:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f794:	c1 e0 0b             	shl    eax,0xb
c001f797:	eb 0b                	jmp    c001f7a4 <isoReadDiscSectorHelper+0x58>
c001f799:	8d 76 00             	lea    esi,[esi+0x0]
c001f79c:	b8 00 00 00 00       	mov    eax,0x0
c001f7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001f7a4:	83 c4 2c             	add    esp,0x2c
c001f7a7:	c3                   	ret    

c001f7a8 <iso_kprintf>:
c001f7a8:	83 ec 0c             	sub    esp,0xc
c001f7ab:	83 ec 08             	sub    esp,0x8
c001f7ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f7b2:	68 0c cb 02 c0       	push   0xc002cb0c
c001f7b7:	e8 c0 77 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f7bc:	83 c4 10             	add    esp,0x10
c001f7bf:	90                   	nop
c001f7c0:	83 c4 0c             	add    esp,0xc
c001f7c3:	c3                   	ret    

c001f7c4 <iso_kprintfd>:
c001f7c4:	83 ec 0c             	sub    esp,0xc
c001f7c7:	83 ec 08             	sub    esp,0x8
c001f7ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f7ce:	68 ca c0 02 c0       	push   0xc002c0ca
c001f7d3:	e8 a4 77 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f7d8:	83 c4 10             	add    esp,0x10
c001f7db:	90                   	nop
c001f7dc:	83 c4 0c             	add    esp,0xc
c001f7df:	c3                   	ret    

c001f7e0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001f7e0:	b8 08 00 00 00       	mov    eax,0x8
c001f7e5:	c3                   	ret    

c001f7e6 <ISO9660::truncate(void*, unsigned long long)>:
c001f7e6:	b8 01 00 00 00       	mov    eax,0x1
c001f7eb:	c3                   	ret    

c001f7ec <ISO9660::getName()>:
c001f7ec:	b8 80 de 02 c0       	mov    eax,0xc002de80
c001f7f1:	c3                   	ret    

c001f7f2 <ISO9660::closeDir(void*)>:
c001f7f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7f8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001f7fb:	90                   	nop

c001f7fc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001f7fc:	b8 01 00 00 00       	mov    eax,0x1
c001f801:	c3                   	ret    

c001f802 <ISO9660::unlink(char const*)>:
c001f802:	b8 01 00 00 00       	mov    eax,0x1
c001f807:	c3                   	ret    

c001f808 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001f808:	b8 03 00 00 00       	mov    eax,0x3
c001f80d:	c3                   	ret    

c001f80e <ISO9660::rename(char const*, char const*)>:
c001f80e:	b8 01 00 00 00       	mov    eax,0x1
c001f813:	c3                   	ret    

c001f814 <ISO9660::mkdir(char const*)>:
c001f814:	b8 01 00 00 00       	mov    eax,0x1
c001f819:	c3                   	ret    

c001f81a <ISO9660::~ISO9660()>:
c001f81a:	83 ec 0c             	sub    esp,0xc
c001f81d:	ba c0 df 02 c0       	mov    edx,0xc002dfc0
c001f822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f826:	89 10                	mov    DWORD PTR [eax],edx
c001f828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82c:	83 ec 0c             	sub    esp,0xc
c001f82f:	50                   	push   eax
c001f830:	e8 e1 8f fe ff       	call   c0008816 <Filesystem::~Filesystem()>
c001f835:	83 c4 10             	add    esp,0x10
c001f838:	90                   	nop
c001f839:	83 c4 0c             	add    esp,0xc
c001f83c:	c3                   	ret    
c001f83d:	90                   	nop

c001f83e <ISO9660::~ISO9660()>:
c001f83e:	83 ec 0c             	sub    esp,0xc
c001f841:	83 ec 0c             	sub    esp,0xc
c001f844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f848:	e8 cd ff ff ff       	call   c001f81a <ISO9660::~ISO9660()>
c001f84d:	83 c4 10             	add    esp,0x10
c001f850:	83 ec 08             	sub    esp,0x8
c001f853:	6a 08                	push   0x8
c001f855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f859:	e8 a6 e5 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c001f85e:	83 c4 10             	add    esp,0x10
c001f861:	83 c4 0c             	add    esp,0xc
c001f864:	c3                   	ret    
c001f865:	90                   	nop

c001f866 <ISO9660::exists(char const*)>:
c001f866:	83 ec 18             	sub    esp,0x18
c001f869:	68 9b de 02 c0       	push   0xc002de9b
c001f86e:	e8 d9 0e ff ff       	call   c001074c <KePanic(char const*)>
c001f873:	31 c0                	xor    eax,eax
c001f875:	83 c4 1c             	add    esp,0x1c
c001f878:	c3                   	ret    
c001f879:	90                   	nop

c001f87a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f87a:	56                   	push   esi
c001f87b:	53                   	push   ebx
c001f87c:	53                   	push   ebx
c001f87d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f881:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f885:	85 db                	test   ebx,ebx
c001f887:	0f 84 ca 00 00 00    	je     c001f957 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001f88d:	85 f6                	test   esi,esi
c001f88f:	0f 84 c2 00 00 00    	je     c001f957 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001f895:	b8 03 00 00 00       	mov    eax,0x3
c001f89a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001f89f:	0f 85 b7 00 00 00    	jne    c001f95c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001f8a5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001f8a7:	0f be 05 80 85 03 c0 	movsx  eax,BYTE PTR ds:0xc0038580
c001f8ae:	38 0d 80 85 03 c0    	cmp    BYTE PTR ds:0xc0038580,cl
c001f8b4:	74 1b                	je     c001f8d1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f8b6:	85 c0                	test   eax,eax
c001f8b8:	74 10                	je     c001f8ca <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001f8ba:	83 ec 0c             	sub    esp,0xc
c001f8bd:	68 b9 de 02 c0       	push   0xc002deb9
c001f8c2:	e8 85 0e ff ff       	call   c001074c <KePanic(char const*)>
c001f8c7:	83 c4 10             	add    esp,0x10
c001f8ca:	8a 03                	mov    al,BYTE PTR [ebx]
c001f8cc:	a2 80 85 03 c0       	mov    ds:0xc0038580,al
c001f8d1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001f8d4:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c001f8db:	85 c0                	test   eax,eax
c001f8dd:	74 09                	je     c001f8e8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001f8df:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001f8e6:	74 48                	je     c001f930 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001f8e8:	83 ec 0c             	sub    esp,0xc
c001f8eb:	68 c9 de 02 c0       	push   0xc002dec9
c001f8f0:	e8 87 76 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f8f5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001f8f8:	83 c4 10             	add    esp,0x10
c001f8fb:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c001f902:	85 c0                	test   eax,eax
c001f904:	74 17                	je     c001f91d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001f906:	83 ec 0c             	sub    esp,0xc
c001f909:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001f910:	68 e9 de 02 c0       	push   0xc002dee9
c001f915:	e8 62 76 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f91a:	83 c4 10             	add    esp,0x10
c001f91d:	83 ec 0c             	sub    esp,0xc
c001f920:	0f be 05 80 85 03 c0 	movsx  eax,BYTE PTR ds:0xc0038580
c001f927:	50                   	push   eax
c001f928:	e8 01 73 fe ff       	call   c0006c2e <init_percd>
c001f92d:	83 c4 10             	add    esp,0x10
c001f930:	83 c3 03             	add    ebx,0x3
c001f933:	51                   	push   ecx
c001f934:	51                   	push   ecx
c001f935:	6a 00                	push   0x0
c001f937:	53                   	push   ebx
c001f938:	e8 b8 6d fe ff       	call   c00066f5 <iso_open>
c001f93d:	83 c4 10             	add    esp,0x10
c001f940:	89 c2                	mov    edx,eax
c001f942:	b8 01 00 00 00       	mov    eax,0x1
c001f947:	83 fa ff             	cmp    edx,0xffffffff
c001f94a:	74 10                	je     c001f95c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001f94c:	83 c2 32             	add    edx,0x32
c001f94f:	31 c0                	xor    eax,eax
c001f951:	01 d2                	add    edx,edx
c001f953:	89 16                	mov    DWORD PTR [esi],edx
c001f955:	eb 05                	jmp    c001f95c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001f957:	b8 04 00 00 00       	mov    eax,0x4
c001f95c:	5a                   	pop    edx
c001f95d:	5b                   	pop    ebx
c001f95e:	5e                   	pop    esi
c001f95f:	c3                   	ret    

c001f960 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f960:	53                   	push   ebx
c001f961:	83 ec 08             	sub    esp,0x8
c001f964:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f968:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f96c:	85 c0                	test   eax,eax
c001f96e:	74 2d                	je     c001f99d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001f970:	85 db                	test   ebx,ebx
c001f972:	74 29                	je     c001f99d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001f974:	b9 02 00 00 00       	mov    ecx,0x2
c001f979:	52                   	push   edx
c001f97a:	99                   	cdq    
c001f97b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f97f:	f7 f9                	idiv   ecx
c001f981:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001f985:	83 e8 32             	sub    eax,0x32
c001f988:	50                   	push   eax
c001f989:	e8 0f 6e fe ff       	call   c000679d <iso_read>
c001f98e:	83 c4 10             	add    esp,0x10
c001f991:	89 03                	mov    DWORD PTR [ebx],eax
c001f993:	09 d0                	or     eax,edx
c001f995:	0f 94 c0             	sete   al
c001f998:	0f b6 c0             	movzx  eax,al
c001f99b:	eb 05                	jmp    c001f9a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001f99d:	b8 04 00 00 00       	mov    eax,0x4
c001f9a2:	83 c4 08             	add    esp,0x8
c001f9a5:	5b                   	pop    ebx
c001f9a6:	c3                   	ret    
c001f9a7:	90                   	nop

c001f9a8 <ISO9660::seek(void*, unsigned long long)>:
c001f9a8:	57                   	push   edi
c001f9a9:	56                   	push   esi
c001f9aa:	b8 04 00 00 00       	mov    eax,0x4
c001f9af:	51                   	push   ecx
c001f9b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f9b8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f9bc:	85 d2                	test   edx,edx
c001f9be:	74 26                	je     c001f9e6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001f9c0:	6a 00                	push   0x0
c001f9c2:	b9 02 00 00 00       	mov    ecx,0x2
c001f9c7:	57                   	push   edi
c001f9c8:	89 d0                	mov    eax,edx
c001f9ca:	56                   	push   esi
c001f9cb:	99                   	cdq    
c001f9cc:	f7 f9                	idiv   ecx
c001f9ce:	83 e8 32             	sub    eax,0x32
c001f9d1:	50                   	push   eax
c001f9d2:	e8 dc 6e fe ff       	call   c00068b3 <iso_seek>
c001f9d7:	83 c4 10             	add    esp,0x10
c001f9da:	31 f0                	xor    eax,esi
c001f9dc:	31 fa                	xor    edx,edi
c001f9de:	09 d0                	or     eax,edx
c001f9e0:	0f 95 c0             	setne  al
c001f9e3:	0f b6 c0             	movzx  eax,al
c001f9e6:	5a                   	pop    edx
c001f9e7:	5e                   	pop    esi
c001f9e8:	5f                   	pop    edi
c001f9e9:	c3                   	ret    

c001f9ea <ISO9660::tell(void*, unsigned long long*)>:
c001f9ea:	53                   	push   ebx
c001f9eb:	83 ec 08             	sub    esp,0x8
c001f9ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f9f2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f9f6:	85 c0                	test   eax,eax
c001f9f8:	74 24                	je     c001fa1e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001f9fa:	85 db                	test   ebx,ebx
c001f9fc:	74 20                	je     c001fa1e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001f9fe:	83 ec 0c             	sub    esp,0xc
c001fa01:	b9 02 00 00 00       	mov    ecx,0x2
c001fa06:	99                   	cdq    
c001fa07:	f7 f9                	idiv   ecx
c001fa09:	83 e8 32             	sub    eax,0x32
c001fa0c:	50                   	push   eax
c001fa0d:	e8 25 6f fe ff       	call   c0006937 <iso_tell>
c001fa12:	83 c4 10             	add    esp,0x10
c001fa15:	89 03                	mov    DWORD PTR [ebx],eax
c001fa17:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001fa1a:	31 c0                	xor    eax,eax
c001fa1c:	eb 05                	jmp    c001fa23 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001fa1e:	b8 04 00 00 00       	mov    eax,0x4
c001fa23:	83 c4 08             	add    esp,0x8
c001fa26:	5b                   	pop    ebx
c001fa27:	c3                   	ret    

c001fa28 <ISO9660::stat(void*, unsigned long long*)>:
c001fa28:	53                   	push   ebx
c001fa29:	83 ec 14             	sub    esp,0x14
c001fa2c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001fa30:	68 0d df 02 c0       	push   0xc002df0d
c001fa35:	e8 42 75 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001fa3a:	83 c4 10             	add    esp,0x10
c001fa3d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa42:	74 2c                	je     c001fa70 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001fa44:	85 db                	test   ebx,ebx
c001fa46:	74 28                	je     c001fa70 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001fa48:	83 ec 0c             	sub    esp,0xc
c001fa4b:	b9 02 00 00 00       	mov    ecx,0x2
c001fa50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa54:	99                   	cdq    
c001fa55:	f7 f9                	idiv   ecx
c001fa57:	83 e8 32             	sub    eax,0x32
c001fa5a:	50                   	push   eax
c001fa5b:	e8 08 6f fe ff       	call   c0006968 <iso_total>
c001fa60:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fa67:	89 03                	mov    DWORD PTR [ebx],eax
c001fa69:	83 c4 10             	add    esp,0x10
c001fa6c:	31 c0                	xor    eax,eax
c001fa6e:	eb 05                	jmp    c001fa75 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001fa70:	b8 04 00 00 00       	mov    eax,0x4
c001fa75:	83 c4 08             	add    esp,0x8
c001fa78:	5b                   	pop    ebx
c001fa79:	c3                   	ret    

c001fa7a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001fa7a:	55                   	push   ebp
c001fa7b:	57                   	push   edi
c001fa7c:	56                   	push   esi
c001fa7d:	53                   	push   ebx
c001fa7e:	83 ec 18             	sub    esp,0x18
c001fa81:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fa85:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fa89:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa8d:	68 15 df 02 c0       	push   0xc002df15
c001fa92:	e8 e5 74 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001fa97:	83 c4 10             	add    esp,0x10
c001fa9a:	85 ff                	test   edi,edi
c001fa9c:	0f 94 c0             	sete   al
c001fa9f:	85 f6                	test   esi,esi
c001faa1:	0f 94 c2             	sete   dl
c001faa4:	09 d0                	or     eax,edx
c001faa6:	a8 01                	test   al,0x1
c001faa8:	0f 85 dd 00 00 00    	jne    c001fb8b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001faae:	85 db                	test   ebx,ebx
c001fab0:	0f 84 d5 00 00 00    	je     c001fb8b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001fab6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001fab9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001fabf:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001fac6:	0f be 05 80 85 03 c0 	movsx  eax,BYTE PTR ds:0xc0038580
c001facd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001facf:	38 0d 80 85 03 c0    	cmp    BYTE PTR ds:0xc0038580,cl
c001fad5:	74 1b                	je     c001faf2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001fad7:	85 c0                	test   eax,eax
c001fad9:	74 10                	je     c001faeb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001fadb:	83 ec 0c             	sub    esp,0xc
c001fade:	68 b9 de 02 c0       	push   0xc002deb9
c001fae3:	e8 64 0c ff ff       	call   c001074c <KePanic(char const*)>
c001fae8:	83 c4 10             	add    esp,0x10
c001faeb:	8a 03                	mov    al,BYTE PTR [ebx]
c001faed:	a2 80 85 03 c0       	mov    ds:0xc0038580,al
c001faf2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001faf5:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c001fafc:	85 c0                	test   eax,eax
c001fafe:	74 09                	je     c001fb09 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001fb00:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001fb07:	74 51                	je     c001fb5a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001fb09:	83 ec 0c             	sub    esp,0xc
c001fb0c:	68 1d df 02 c0       	push   0xc002df1d
c001fb11:	e8 66 74 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001fb16:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001fb19:	83 c4 10             	add    esp,0x10
c001fb1c:	83 3c 85 dc 59 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffca624],0x0
c001fb24:	74 21                	je     c001fb47 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001fb26:	83 ec 0c             	sub    esp,0xc
c001fb29:	68 3d df 02 c0       	push   0xc002df3d
c001fb2e:	e8 49 74 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001fb33:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001fb36:	83 c4 10             	add    esp,0x10
c001fb39:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c001fb40:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001fb47:	83 ec 0c             	sub    esp,0xc
c001fb4a:	0f be 05 80 85 03 c0 	movsx  eax,BYTE PTR ds:0xc0038580
c001fb51:	50                   	push   eax
c001fb52:	e8 d7 70 fe ff       	call   c0006c2e <init_percd>
c001fb57:	83 c4 10             	add    esp,0x10
c001fb5a:	83 c3 03             	add    ebx,0x3
c001fb5d:	52                   	push   edx
c001fb5e:	52                   	push   edx
c001fb5f:	6a 00                	push   0x0
c001fb61:	53                   	push   ebx
c001fb62:	e8 8e 6b fe ff       	call   c00066f5 <iso_open>
c001fb67:	83 c4 10             	add    esp,0x10
c001fb6a:	89 c5                	mov    ebp,eax
c001fb6c:	83 f8 ff             	cmp    eax,0xffffffff
c001fb6f:	75 21                	jne    c001fb92 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001fb71:	50                   	push   eax
c001fb72:	50                   	push   eax
c001fb73:	6a 01                	push   0x1
c001fb75:	53                   	push   ebx
c001fb76:	e8 7a 6b fe ff       	call   c00066f5 <iso_open>
c001fb7b:	83 c4 10             	add    esp,0x10
c001fb7e:	ba 02 00 00 00       	mov    edx,0x2
c001fb83:	40                   	inc    eax
c001fb84:	74 2b                	je     c001fbb1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001fb86:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001fb89:	eb 24                	jmp    c001fbaf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001fb8b:	ba 04 00 00 00       	mov    edx,0x4
c001fb90:	eb 1f                	jmp    c001fbb1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001fb92:	83 ec 0c             	sub    esp,0xc
c001fb95:	50                   	push   eax
c001fb96:	e8 cd 6d fe ff       	call   c0006968 <iso_total>
c001fb9b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001fba2:	89 07                	mov    DWORD PTR [edi],eax
c001fba4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001fba7:	e8 d3 6b fe ff       	call   c000677f <iso_close>
c001fbac:	83 c4 10             	add    esp,0x10
c001fbaf:	31 d2                	xor    edx,edx
c001fbb1:	83 c4 0c             	add    esp,0xc
c001fbb4:	89 d0                	mov    eax,edx
c001fbb6:	5b                   	pop    ebx
c001fbb7:	5e                   	pop    esi
c001fbb8:	5f                   	pop    edi
c001fbb9:	5d                   	pop    ebp
c001fbba:	c3                   	ret    
c001fbbb:	90                   	nop

c001fbbc <ISO9660::close(void*)>:
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	b8 04 00 00 00       	mov    eax,0x4
c001fbc4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbc8:	85 d2                	test   edx,edx
c001fbca:	74 1b                	je     c001fbe7 <ISO9660::close(void*)+0x2b>
c001fbcc:	83 ec 0c             	sub    esp,0xc
c001fbcf:	b9 02 00 00 00       	mov    ecx,0x2
c001fbd4:	89 d0                	mov    eax,edx
c001fbd6:	99                   	cdq    
c001fbd7:	f7 f9                	idiv   ecx
c001fbd9:	83 e8 32             	sub    eax,0x32
c001fbdc:	50                   	push   eax
c001fbdd:	e8 9d 6b fe ff       	call   c000677f <iso_close>
c001fbe2:	83 c4 10             	add    esp,0x10
c001fbe5:	31 c0                	xor    eax,eax
c001fbe7:	83 c4 0c             	add    esp,0xc
c001fbea:	c3                   	ret    
c001fbeb:	90                   	nop

c001fbec <ISO9660::openDir(char const*, void**)>:
c001fbec:	56                   	push   esi
c001fbed:	53                   	push   ebx
c001fbee:	50                   	push   eax
c001fbef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fbf3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fbf7:	85 db                	test   ebx,ebx
c001fbf9:	0f 84 bd 00 00 00    	je     c001fcbc <ISO9660::openDir(char const*, void**)+0xd0>
c001fbff:	85 f6                	test   esi,esi
c001fc01:	0f 84 b5 00 00 00    	je     c001fcbc <ISO9660::openDir(char const*, void**)+0xd0>
c001fc07:	8a 13                	mov    dl,BYTE PTR [ebx]
c001fc09:	0f be 05 80 85 03 c0 	movsx  eax,BYTE PTR ds:0xc0038580
c001fc10:	38 15 80 85 03 c0    	cmp    BYTE PTR ds:0xc0038580,dl
c001fc16:	74 1b                	je     c001fc33 <ISO9660::openDir(char const*, void**)+0x47>
c001fc18:	85 c0                	test   eax,eax
c001fc1a:	74 10                	je     c001fc2c <ISO9660::openDir(char const*, void**)+0x40>
c001fc1c:	83 ec 0c             	sub    esp,0xc
c001fc1f:	68 b9 de 02 c0       	push   0xc002deb9
c001fc24:	e8 23 0b ff ff       	call   c001074c <KePanic(char const*)>
c001fc29:	83 c4 10             	add    esp,0x10
c001fc2c:	8a 03                	mov    al,BYTE PTR [ebx]
c001fc2e:	a2 80 85 03 c0       	mov    ds:0xc0038580,al
c001fc33:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001fc36:	8b 04 85 dc 59 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffca624]
c001fc3d:	85 c0                	test   eax,eax
c001fc3f:	74 10                	je     c001fc51 <ISO9660::openDir(char const*, void**)+0x65>
c001fc41:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001fc48:	74 1a                	je     c001fc64 <ISO9660::openDir(char const*, void**)+0x78>
c001fc4a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001fc51:	83 ec 0c             	sub    esp,0xc
c001fc54:	0f be 05 80 85 03 c0 	movsx  eax,BYTE PTR ds:0xc0038580
c001fc5b:	50                   	push   eax
c001fc5c:	e8 cd 6f fe ff       	call   c0006c2e <init_percd>
c001fc61:	83 c4 10             	add    esp,0x10
c001fc64:	83 c3 03             	add    ebx,0x3
c001fc67:	50                   	push   eax
c001fc68:	50                   	push   eax
c001fc69:	6a 01                	push   0x1
c001fc6b:	53                   	push   ebx
c001fc6c:	e8 84 6a fe ff       	call   c00066f5 <iso_open>
c001fc71:	83 c4 10             	add    esp,0x10
c001fc74:	89 c3                	mov    ebx,eax
c001fc76:	83 f8 ff             	cmp    eax,0xffffffff
c001fc79:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001fc7e:	75 1c                	jne    c001fc9c <ISO9660::openDir(char const*, void**)+0xb0>
c001fc80:	53                   	push   ebx
c001fc81:	53                   	push   ebx
c001fc82:	68 61 df 02 c0       	push   0xc002df61
c001fc87:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001fc8d:	e8 26 34 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001fc92:	83 c4 10             	add    esp,0x10
c001fc95:	b8 01 00 00 00       	mov    eax,0x1
c001fc9a:	eb 25                	jmp    c001fcc1 <ISO9660::openDir(char const*, void**)+0xd5>
c001fc9c:	01 db                	add    ebx,ebx
c001fc9e:	51                   	push   ecx
c001fc9f:	83 c3 65             	add    ebx,0x65
c001fca2:	51                   	push   ecx
c001fca3:	68 74 df 02 c0       	push   0xc002df74
c001fca8:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001fcae:	e8 05 34 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001fcb3:	89 1e                	mov    DWORD PTR [esi],ebx
c001fcb5:	83 c4 10             	add    esp,0x10
c001fcb8:	31 c0                	xor    eax,eax
c001fcba:	eb 05                	jmp    c001fcc1 <ISO9660::openDir(char const*, void**)+0xd5>
c001fcbc:	b8 04 00 00 00       	mov    eax,0x4
c001fcc1:	5a                   	pop    edx
c001fcc2:	5b                   	pop    ebx
c001fcc3:	5e                   	pop    esi
c001fcc4:	c3                   	ret    
c001fcc5:	90                   	nop

c001fcc6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001fcc6:	55                   	push   ebp
c001fcc7:	57                   	push   edi
c001fcc8:	56                   	push   esi
c001fcc9:	53                   	push   ebx
c001fcca:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fcd0:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001fcd7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001fcde:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001fce6:	0f 84 e7 00 00 00    	je     c001fdd3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001fcec:	85 db                	test   ebx,ebx
c001fcee:	0f 84 df 00 00 00    	je     c001fdd3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001fcf4:	83 ec 0c             	sub    esp,0xc
c001fcf7:	68 87 df 02 c0       	push   0xc002df87
c001fcfc:	e8 7b 72 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001fd01:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001fd08:	b9 02 00 00 00       	mov    ecx,0x2
c001fd0d:	99                   	cdq    
c001fd0e:	f7 f9                	idiv   ecx
c001fd10:	83 e8 32             	sub    eax,0x32
c001fd13:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd16:	e8 9f 6c fe ff       	call   c00069ba <iso_readdir>
c001fd1b:	83 c4 10             	add    esp,0x10
c001fd1e:	89 c6                	mov    esi,eax
c001fd20:	85 c0                	test   eax,eax
c001fd22:	75 37                	jne    c001fd5b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001fd24:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001fd29:	56                   	push   esi
c001fd2a:	56                   	push   esi
c001fd2b:	68 92 df 02 c0       	push   0xc002df92
c001fd30:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001fd36:	e8 7d 33 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001fd3b:	83 c4 0c             	add    esp,0xc
c001fd3e:	68 10 01 00 00       	push   0x110
c001fd43:	6a 00                	push   0x0
c001fd45:	57                   	push   edi
c001fd46:	e8 a5 07 fe ff       	call   c00004f0 <memset>
c001fd4b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001fd51:	83 c4 10             	add    esp,0x10
c001fd54:	b8 01 00 00 00       	mov    eax,0x1
c001fd59:	eb 7d                	jmp    c001fdd8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001fd5b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fd61:	8d 68 08             	lea    ebp,[eax+0x8]
c001fd64:	83 ec 0c             	sub    esp,0xc
c001fd67:	55                   	push   ebp
c001fd68:	e8 03 08 fe ff       	call   c0000570 <strlen>
c001fd6d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001fd75:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fd79:	83 c4 10             	add    esp,0x10
c001fd7c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001fd80:	75 0a                	jne    c001fd8c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001fd82:	b8 02 00 00 00       	mov    eax,0x2
c001fd87:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001fd8a:	74 05                	je     c001fd91 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001fd8c:	b8 01 00 00 00       	mov    eax,0x1
c001fd91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd95:	50                   	push   eax
c001fd96:	50                   	push   eax
c001fd97:	55                   	push   ebp
c001fd98:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fd9c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001fda0:	50                   	push   eax
c001fda1:	e8 9a 08 fe ff       	call   c0000640 <strcpy>
c001fda6:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001fdad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fdaf:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001fdb5:	5a                   	pop    edx
c001fdb6:	a1 58 63 03 c0       	mov    eax,ds:0xc0036358
c001fdbb:	59                   	pop    ecx
c001fdbc:	68 a5 df 02 c0       	push   0xc002dfa5
c001fdc1:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001fdc7:	e8 ec 32 ff ff       	call   c00130b8 <VgaText::puts(char const*)>
c001fdcc:	83 c4 10             	add    esp,0x10
c001fdcf:	31 c0                	xor    eax,eax
c001fdd1:	eb 05                	jmp    c001fdd8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001fdd3:	b8 04 00 00 00       	mov    eax,0x4
c001fdd8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001fdde:	5b                   	pop    ebx
c001fddf:	5e                   	pop    esi
c001fde0:	5f                   	pop    edi
c001fde1:	5d                   	pop    ebp
c001fde2:	c3                   	ret    

c001fde3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001fde3:	57                   	push   edi
c001fde4:	56                   	push   esi
c001fde5:	53                   	push   ebx
c001fde6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fdea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fdee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fdf2:	39 35 84 85 03 c0    	cmp    DWORD PTR ds:0xc0038584,esi
c001fdf8:	0f be cb             	movsx  ecx,bl
c001fdfb:	75 0b                	jne    c001fe08 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001fdfd:	0f be 05 84 01 03 c0 	movsx  eax,BYTE PTR ds:0xc0030184
c001fe04:	39 c8                	cmp    eax,ecx
c001fe06:	74 47                	je     c001fe4f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001fe08:	83 ec 0c             	sub    esp,0xc
c001fe0b:	31 d2                	xor    edx,edx
c001fe0d:	68 a0 85 03 c0       	push   0xc00385a0
c001fe12:	6a 01                	push   0x1
c001fe14:	52                   	push   edx
c001fe15:	56                   	push   esi
c001fe16:	ff 34 8d dc 59 03 c0 	push   DWORD PTR [ecx*4-0x3ffca624]
c001fe1d:	e8 7c b6 fe ff       	call   c000b49e <LogicalDisk::read(unsigned long long, int, void*)>
c001fe22:	83 c4 20             	add    esp,0x20
c001fe25:	85 c0                	test   eax,eax
c001fe27:	75 0e                	jne    c001fe37 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001fe29:	89 35 84 85 03 c0    	mov    DWORD PTR ds:0xc0038584,esi
c001fe2f:	88 1d 84 01 03 c0    	mov    BYTE PTR ds:0xc0030184,bl
c001fe35:	eb 18                	jmp    c001fe4f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001fe37:	50                   	push   eax
c001fe38:	68 00 08 00 00       	push   0x800
c001fe3d:	6a 00                	push   0x0
c001fe3f:	57                   	push   edi
c001fe40:	e8 ab 06 fe ff       	call   c00004f0 <memset>
c001fe45:	83 c4 10             	add    esp,0x10
c001fe48:	b8 01 00 00 00       	mov    eax,0x1
c001fe4d:	eb 0e                	jmp    c001fe5d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001fe4f:	be a0 85 03 c0       	mov    esi,0xc00385a0
c001fe54:	b9 00 08 00 00       	mov    ecx,0x800
c001fe59:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe5b:	31 c0                	xor    eax,eax
c001fe5d:	5b                   	pop    ebx
c001fe5e:	5e                   	pop    esi
c001fe5f:	5f                   	pop    edi
c001fe60:	c3                   	ret    
c001fe61:	90                   	nop

c001fe62 <ISO9660::tryMount(LogicalDisk*, int)>:
c001fe62:	53                   	push   ebx
c001fe63:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001fe69:	c7 05 84 85 03 c0 ef be ad de 	mov    DWORD PTR ds:0xc0038584,0xdeadbeef
c001fe73:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001fe7a:	8d 58 41             	lea    ebx,[eax+0x41]
c001fe7d:	0f be db             	movsx  ebx,bl
c001fe80:	53                   	push   ebx
c001fe81:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fe85:	50                   	push   eax
c001fe86:	6a 10                	push   0x10
c001fe88:	e8 56 ff ff ff       	call   c001fde3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fe8d:	83 c4 10             	add    esp,0x10
c001fe90:	31 d2                	xor    edx,edx
c001fe92:	85 c0                	test   eax,eax
c001fe94:	75 33                	jne    c001fec9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001fe96:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001fe9b:	75 2c                	jne    c001fec9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001fe9d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001fea2:	75 25                	jne    c001fec9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001fea4:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001fea9:	75 1e                	jne    c001fec9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001feab:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001feb0:	75 17                	jne    c001fec9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001feb2:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001feb7:	75 10                	jne    c001fec9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001feb9:	83 ec 0c             	sub    esp,0xc
c001febc:	53                   	push   ebx
c001febd:	e8 6c 6d fe ff       	call   c0006c2e <init_percd>
c001fec2:	83 c4 10             	add    esp,0x10
c001fec5:	40                   	inc    eax
c001fec6:	0f 95 c2             	setne  dl
c001fec9:	88 d0                	mov    al,dl
c001fecb:	81 c4 08 08 00 00    	add    esp,0x808
c001fed1:	5b                   	pop    ebx
c001fed2:	c3                   	ret    
c001fed3:	90                   	nop

c001fed4 <ISO9660::ISO9660()>:
c001fed4:	83 ec 0c             	sub    esp,0xc
c001fed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fedb:	83 ec 0c             	sub    esp,0xc
c001fede:	50                   	push   eax
c001fedf:	e8 0e 89 fe ff       	call   c00087f2 <Filesystem::Filesystem()>
c001fee4:	83 c4 10             	add    esp,0x10
c001fee7:	ba c0 df 02 c0       	mov    edx,0xc002dfc0
c001feec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef0:	89 10                	mov    DWORD PTR [eax],edx
c001fef2:	e8 49 6e fe ff       	call   c0006d40 <fs_iso9660_init>
c001fef7:	90                   	nop
c001fef8:	83 c4 0c             	add    esp,0xc
c001fefb:	c3                   	ret    

c001fefc <SoundCard::beginPlayback()>:
c001fefc:	c7 44 24 04 24 e0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002e024
c001ff04:	e9 43 08 ff ff       	jmp    c001074c <KePanic(char const*)>
c001ff09:	90                   	nop

c001ff0a <SoundCard::stopPlayback()>:
c001ff0a:	c7 44 24 04 24 e0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002e024
c001ff12:	e9 35 08 ff ff       	jmp    c001074c <KePanic(char const*)>
c001ff17:	90                   	nop

c001ff18 <SoundCard::SoundCard(char const*)>:
c001ff18:	83 ec 1c             	sub    esp,0x1c
c001ff1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff1f:	83 ec 08             	sub    esp,0x8
c001ff22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ff26:	50                   	push   eax
c001ff27:	e8 b6 a6 fe ff       	call   c000a5e2 <Device::Device(char const*)>
c001ff2c:	83 c4 10             	add    esp,0x10
c001ff2f:	ba 70 e0 02 c0       	mov    edx,0xc002e070
c001ff34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff38:	89 10                	mov    DWORD PTR [eax],edx
c001ff3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff3e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ff45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff49:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ff53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff57:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ff61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff65:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ff6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff73:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ff7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ff85:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ff8a:	7f 1a                	jg     c001ffa6 <SoundCard::SoundCard(char const*)+0x8e>
c001ff8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ff94:	83 c2 54             	add    edx,0x54
c001ff97:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ff9f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ffa4:	eb df                	jmp    c001ff85 <SoundCard::SoundCard(char const*)+0x6d>
c001ffa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ffaa:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ffb1:	90                   	nop
c001ffb2:	83 c4 1c             	add    esp,0x1c
c001ffb5:	c3                   	ret    

c001ffb6 <SoundCard::~SoundCard()>:
c001ffb6:	83 ec 0c             	sub    esp,0xc
c001ffb9:	ba 70 e0 02 c0       	mov    edx,0xc002e070
c001ffbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc2:	89 10                	mov    DWORD PTR [eax],edx
c001ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc8:	83 ec 0c             	sub    esp,0xc
c001ffcb:	50                   	push   eax
c001ffcc:	e8 b1 a3 fe ff       	call   c000a382 <Device::~Device()>
c001ffd1:	83 c4 10             	add    esp,0x10
c001ffd4:	90                   	nop
c001ffd5:	83 c4 0c             	add    esp,0xc
c001ffd8:	c3                   	ret    
c001ffd9:	90                   	nop

c001ffda <SoundCard::~SoundCard()>:
c001ffda:	83 ec 0c             	sub    esp,0xc
c001ffdd:	83 ec 0c             	sub    esp,0xc
c001ffe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffe4:	e8 cd ff ff ff       	call   c001ffb6 <SoundCard::~SoundCard()>
c001ffe9:	83 c4 10             	add    esp,0x10
c001ffec:	83 ec 08             	sub    esp,0x8
c001ffef:	68 e8 01 00 00       	push   0x1e8
c001fff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fff8:	e8 07 de fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c001fffd:	83 c4 10             	add    esp,0x10
c0020000:	83 c4 0c             	add    esp,0xc
c0020003:	c3                   	ret    

c0020004 <SoundCard::configureRates(int, int, int)>:
c0020004:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020008:	31 c0                	xor    eax,eax
c002000a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0020011:	75 20                	jne    c0020033 <SoundCard::configureRates(int, int, int)+0x2f>
c0020013:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020017:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c002001d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020021:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0020027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0020031:	b0 01                	mov    al,0x1
c0020033:	c3                   	ret    

c0020034 <SoundCard::getSamples16(int, short*)>:
c0020034:	55                   	push   ebp
c0020035:	57                   	push   edi
c0020036:	31 ff                	xor    edi,edi
c0020038:	56                   	push   esi
c0020039:	53                   	push   ebx
c002003a:	31 db                	xor    ebx,ebx
c002003c:	83 ec 10             	sub    esp,0x10
c002003f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020043:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0020047:	8d 04 36             	lea    eax,[esi+esi*1]
c002004a:	50                   	push   eax
c002004b:	6a 00                	push   0x0
c002004d:	55                   	push   ebp
c002004e:	e8 9d 04 fe ff       	call   c00004f0 <memset>
c0020053:	83 c4 10             	add    esp,0x10
c0020056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002005a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0020061:	85 c0                	test   eax,eax
c0020063:	74 1b                	je     c0020080 <SoundCard::getSamples16(int, short*)+0x4c>
c0020065:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0020069:	75 15                	jne    c0020080 <SoundCard::getSamples16(int, short*)+0x4c>
c002006b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002006f:	55                   	push   ebp
c0020070:	56                   	push   esi
c0020071:	50                   	push   eax
c0020072:	e8 8d 03 00 00       	call   c0020404 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0020077:	83 c4 10             	add    esp,0x10
c002007a:	39 c7                	cmp    edi,eax
c002007c:	7d 02                	jge    c0020080 <SoundCard::getSamples16(int, short*)+0x4c>
c002007e:	89 c7                	mov    edi,eax
c0020080:	43                   	inc    ebx
c0020081:	83 fb 20             	cmp    ebx,0x20
c0020084:	75 d0                	jne    c0020056 <SoundCard::getSamples16(int, short*)+0x22>
c0020086:	83 c4 0c             	add    esp,0xc
c0020089:	89 f8                	mov    eax,edi
c002008b:	5b                   	pop    ebx
c002008c:	5e                   	pop    esi
c002008d:	5f                   	pop    edi
c002008e:	5d                   	pop    ebp
c002008f:	c3                   	ret    

c0020090 <SoundCard::getSamples32(int, int*)>:
c0020090:	55                   	push   ebp
c0020091:	57                   	push   edi
c0020092:	31 ff                	xor    edi,edi
c0020094:	56                   	push   esi
c0020095:	31 f6                	xor    esi,esi
c0020097:	53                   	push   ebx
c0020098:	83 ec 10             	sub    esp,0x10
c002009b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002009f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00200a3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00200a7:	c1 e0 02             	shl    eax,0x2
c00200aa:	50                   	push   eax
c00200ab:	6a 00                	push   0x0
c00200ad:	55                   	push   ebp
c00200ae:	e8 3d 04 fe ff       	call   c00004f0 <memset>
c00200b3:	83 c4 10             	add    esp,0x10
c00200b6:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00200bd:	85 c0                	test   eax,eax
c00200bf:	74 1b                	je     c00200dc <SoundCard::getSamples32(int, int*)+0x4c>
c00200c1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00200c5:	75 15                	jne    c00200dc <SoundCard::getSamples32(int, int*)+0x4c>
c00200c7:	53                   	push   ebx
c00200c8:	55                   	push   ebp
c00200c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00200cd:	50                   	push   eax
c00200ce:	e8 fd 03 00 00       	call   c00204d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00200d3:	83 c4 10             	add    esp,0x10
c00200d6:	39 c6                	cmp    esi,eax
c00200d8:	7d 02                	jge    c00200dc <SoundCard::getSamples32(int, int*)+0x4c>
c00200da:	89 c6                	mov    esi,eax
c00200dc:	47                   	inc    edi
c00200dd:	83 ff 20             	cmp    edi,0x20
c00200e0:	75 d4                	jne    c00200b6 <SoundCard::getSamples32(int, int*)+0x26>
c00200e2:	85 f6                	test   esi,esi
c00200e4:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c00200eb:	75 0f                	jne    c00200fc <SoundCard::getSamples32(int, int*)+0x6c>
c00200ed:	85 c0                	test   eax,eax
c00200ef:	74 1b                	je     c002010c <SoundCard::getSamples32(int, int*)+0x7c>
c00200f1:	83 ec 0c             	sub    esp,0xc
c00200f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00200f6:	53                   	push   ebx
c00200f7:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00200fa:	eb 0d                	jmp    c0020109 <SoundCard::getSamples32(int, int*)+0x79>
c00200fc:	85 c0                	test   eax,eax
c00200fe:	75 0c                	jne    c002010c <SoundCard::getSamples32(int, int*)+0x7c>
c0020100:	83 ec 0c             	sub    esp,0xc
c0020103:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020105:	53                   	push   ebx
c0020106:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0020109:	83 c4 10             	add    esp,0x10
c002010c:	83 c4 0c             	add    esp,0xc
c002010f:	89 f0                	mov    eax,esi
c0020111:	5b                   	pop    ebx
c0020112:	5e                   	pop    esi
c0020113:	5f                   	pop    edi
c0020114:	5d                   	pop    ebp
c0020115:	c3                   	ret    

c0020116 <SoundCard::addChannel(SoundPort*)>:
c0020116:	83 ec 0c             	sub    esp,0xc
c0020119:	31 c0                	xor    eax,eax
c002011b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002011f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0020127:	74 1b                	je     c0020144 <SoundCard::addChannel(SoundPort*)+0x2e>
c0020129:	40                   	inc    eax
c002012a:	83 f8 20             	cmp    eax,0x20
c002012d:	75 f0                	jne    c002011f <SoundCard::addChannel(SoundPort*)+0x9>
c002012f:	83 ec 0c             	sub    esp,0xc
c0020132:	68 49 e0 02 c0       	push   0xc002e049
c0020137:	e8 10 06 ff ff       	call   c001074c <KePanic(char const*)>
c002013c:	83 c4 10             	add    esp,0x10
c002013f:	83 c8 ff             	or     eax,0xffffffff
c0020142:	eb 0b                	jmp    c002014f <SoundCard::addChannel(SoundPort*)+0x39>
c0020144:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020148:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c002014f:	83 c4 0c             	add    esp,0xc
c0020152:	c3                   	ret    
c0020153:	90                   	nop

c0020154 <SoundCard::removeChannel(int)>:
c0020154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020158:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002015c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0020167:	c3                   	ret    

c0020168 <SoundPort::SoundPort(int, int, int, int)>:
c0020168:	83 ec 0c             	sub    esp,0xc
c002016b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002016f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002017e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020182:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020186:	89 10                	mov    DWORD PTR [eax],edx
c0020188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002018c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020190:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020197:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002019b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002019e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00201a3:	75 13                	jne    c00201b8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00201a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00201ab:	05 a0 0f 00 00       	add    eax,0xfa0
c00201b0:	01 c0                	add    eax,eax
c00201b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00201b6:	66 90                	xchg   ax,ax
c00201b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00201c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00201c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00201ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00201d5:	c1 e0 02             	shl    eax,0x2
c00201d8:	83 ec 0c             	sub    esp,0xc
c00201db:	50                   	push   eax
c00201dc:	e8 16 01 ff ff       	call   c00102f7 <malloc>
c00201e1:	83 c4 10             	add    esp,0x10
c00201e4:	89 c2                	mov    edx,eax
c00201e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00201ed:	90                   	nop
c00201ee:	83 c4 0c             	add    esp,0xc
c00201f1:	c3                   	ret    
c00201f2:	66 90                	xchg   ax,ax

c00201f4 <SoundPort::~SoundPort()>:
c00201f4:	83 ec 0c             	sub    esp,0xc
c00201f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00201fe:	85 c0                	test   eax,eax
c0020200:	74 1e                	je     c0020220 <SoundPort::~SoundPort()+0x2c>
c0020202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020206:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020209:	83 ec 0c             	sub    esp,0xc
c002020c:	50                   	push   eax
c002020d:	e8 f5 00 ff ff       	call   c0010307 <free>
c0020212:	83 c4 10             	add    esp,0x10
c0020215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020219:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020220:	90                   	nop
c0020221:	83 c4 0c             	add    esp,0xc
c0020224:	c3                   	ret    
c0020225:	90                   	nop
c0020226:	66 90                	xchg   ax,ax

c0020228 <SoundPort::unpause()>:
c0020228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002022c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0020230:	c3                   	ret    
c0020231:	90                   	nop
c0020232:	66 90                	xchg   ax,ax

c0020234 <SoundPort::pause()>:
c0020234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020238:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002023c:	c3                   	ret    
c002023d:	90                   	nop
c002023e:	66 90                	xchg   ax,ax

c0020240 <SoundPort::getBufferUsed()>:
c0020240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020244:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0020247:	c3                   	ret    

c0020248 <SoundPort::getBufferSize()>:
c0020248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002024c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002024f:	c3                   	ret    

c0020250 <SoundPort::buffer8(signed char*, int)>:
c0020250:	55                   	push   ebp
c0020251:	57                   	push   edi
c0020252:	56                   	push   esi
c0020253:	53                   	push   ebx
c0020254:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020258:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002025c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c002025f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0020262:	74 70                	je     c00202d4 <SoundPort::buffer8(signed char*, int)+0x84>
c0020264:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020268:	85 c9                	test   ecx,ecx
c002026a:	7e 68                	jle    c00202d4 <SoundPort::buffer8(signed char*, int)+0x84>
c002026c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c0020270:	8d 48 01             	lea    ecx,[eax+0x1]
c0020273:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0020276:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020279:	89 f1                	mov    ecx,esi
c002027b:	c1 e1 18             	shl    ecx,0x18
c002027e:	29 f1                	sub    ecx,esi
c0020280:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0020283:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020286:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020289:	74 51                	je     c00202dc <SoundPort::buffer8(signed char*, int)+0x8c>
c002028b:	31 ff                	xor    edi,edi
c002028d:	eb 25                	jmp    c00202b4 <SoundPort::buffer8(signed char*, int)+0x64>
c002028f:	90                   	nop
c0020290:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c0020295:	8d 59 01             	lea    ebx,[ecx+0x1]
c0020298:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c002029b:	89 f3                	mov    ebx,esi
c002029d:	c1 e3 18             	shl    ebx,0x18
c00202a0:	29 f3                	sub    ebx,esi
c00202a2:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c00202a5:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00202a8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00202ab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00202ae:	74 1c                	je     c00202cc <SoundPort::buffer8(signed char*, int)+0x7c>
c00202b0:	89 c7                	mov    edi,eax
c00202b2:	66 90                	xchg   ax,ax
c00202b4:	8d 47 01             	lea    eax,[edi+0x1]
c00202b7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00202bb:	75 d3                	jne    c0020290 <SoundPort::buffer8(signed char*, int)+0x40>
c00202bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202c1:	8d 76 00             	lea    esi,[esi+0x0]
c00202c4:	5b                   	pop    ebx
c00202c5:	5e                   	pop    esi
c00202c6:	5f                   	pop    edi
c00202c7:	5d                   	pop    ebp
c00202c8:	c3                   	ret    
c00202c9:	8d 76 00             	lea    esi,[esi+0x0]
c00202cc:	5b                   	pop    ebx
c00202cd:	8d 47 02             	lea    eax,[edi+0x2]
c00202d0:	5e                   	pop    esi
c00202d1:	5f                   	pop    edi
c00202d2:	5d                   	pop    ebp
c00202d3:	c3                   	ret    
c00202d4:	5b                   	pop    ebx
c00202d5:	31 c0                	xor    eax,eax
c00202d7:	5e                   	pop    esi
c00202d8:	5f                   	pop    edi
c00202d9:	5d                   	pop    ebp
c00202da:	c3                   	ret    
c00202db:	90                   	nop
c00202dc:	b8 01 00 00 00       	mov    eax,0x1
c00202e1:	eb e1                	jmp    c00202c4 <SoundPort::buffer8(signed char*, int)+0x74>
c00202e3:	90                   	nop

c00202e4 <SoundPort::buffer16(short*, int)>:
c00202e4:	55                   	push   ebp
c00202e5:	57                   	push   edi
c00202e6:	56                   	push   esi
c00202e7:	53                   	push   ebx
c00202e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202ec:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00202f0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00202f3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00202f6:	74 70                	je     c0020368 <SoundPort::buffer16(short*, int)+0x84>
c00202f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00202fc:	85 c9                	test   ecx,ecx
c00202fe:	7e 68                	jle    c0020368 <SoundPort::buffer16(short*, int)+0x84>
c0020300:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c0020304:	8d 48 01             	lea    ecx,[eax+0x1]
c0020307:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002030a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002030d:	89 f1                	mov    ecx,esi
c002030f:	c1 e1 10             	shl    ecx,0x10
c0020312:	29 f1                	sub    ecx,esi
c0020314:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0020317:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002031a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002031d:	74 51                	je     c0020370 <SoundPort::buffer16(short*, int)+0x8c>
c002031f:	31 ff                	xor    edi,edi
c0020321:	eb 25                	jmp    c0020348 <SoundPort::buffer16(short*, int)+0x64>
c0020323:	90                   	nop
c0020324:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c0020329:	8d 59 01             	lea    ebx,[ecx+0x1]
c002032c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c002032f:	89 f3                	mov    ebx,esi
c0020331:	c1 e3 10             	shl    ebx,0x10
c0020334:	29 f3                	sub    ebx,esi
c0020336:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c0020339:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002033c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002033f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020342:	74 1c                	je     c0020360 <SoundPort::buffer16(short*, int)+0x7c>
c0020344:	89 c7                	mov    edi,eax
c0020346:	66 90                	xchg   ax,ax
c0020348:	8d 47 01             	lea    eax,[edi+0x1]
c002034b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c002034f:	75 d3                	jne    c0020324 <SoundPort::buffer16(short*, int)+0x40>
c0020351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020355:	8d 76 00             	lea    esi,[esi+0x0]
c0020358:	5b                   	pop    ebx
c0020359:	5e                   	pop    esi
c002035a:	5f                   	pop    edi
c002035b:	5d                   	pop    ebp
c002035c:	c3                   	ret    
c002035d:	8d 76 00             	lea    esi,[esi+0x0]
c0020360:	5b                   	pop    ebx
c0020361:	8d 47 02             	lea    eax,[edi+0x2]
c0020364:	5e                   	pop    esi
c0020365:	5f                   	pop    edi
c0020366:	5d                   	pop    ebp
c0020367:	c3                   	ret    
c0020368:	5b                   	pop    ebx
c0020369:	31 c0                	xor    eax,eax
c002036b:	5e                   	pop    esi
c002036c:	5f                   	pop    edi
c002036d:	5d                   	pop    ebp
c002036e:	c3                   	ret    
c002036f:	90                   	nop
c0020370:	b8 01 00 00 00       	mov    eax,0x1
c0020375:	eb e1                	jmp    c0020358 <SoundPort::buffer16(short*, int)+0x74>
c0020377:	90                   	nop

c0020378 <SoundPort::buffer32(int*, int)>:
c0020378:	55                   	push   ebp
c0020379:	57                   	push   edi
c002037a:	56                   	push   esi
c002037b:	53                   	push   ebx
c002037c:	83 ec 04             	sub    esp,0x4
c002037f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020383:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020387:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002038a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002038e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020391:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0020394:	74 5a                	je     c00203f0 <SoundPort::buffer32(int*, int)+0x78>
c0020396:	85 c0                	test   eax,eax
c0020398:	7e 56                	jle    c00203f0 <SoundPort::buffer32(int*, int)+0x78>
c002039a:	8d 71 01             	lea    esi,[ecx+0x1]
c002039d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00203a0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00203a3:	8b 37                	mov    esi,DWORD PTR [edi]
c00203a5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00203a8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00203ab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00203ae:	74 4c                	je     c00203fc <SoundPort::buffer32(int*, int)+0x84>
c00203b0:	31 f6                	xor    esi,esi
c00203b2:	eb 1c                	jmp    c00203d0 <SoundPort::buffer32(int*, int)+0x58>
c00203b4:	8d 69 01             	lea    ebp,[ecx+0x1]
c00203b7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00203ba:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00203bd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00203c0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00203c4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00203c7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00203ca:	74 18                	je     c00203e4 <SoundPort::buffer32(int*, int)+0x6c>
c00203cc:	89 de                	mov    esi,ebx
c00203ce:	66 90                	xchg   ax,ax
c00203d0:	8d 5e 01             	lea    ebx,[esi+0x1]
c00203d3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00203d6:	75 dc                	jne    c00203b4 <SoundPort::buffer32(int*, int)+0x3c>
c00203d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00203db:	90                   	nop
c00203dc:	83 c4 04             	add    esp,0x4
c00203df:	5b                   	pop    ebx
c00203e0:	5e                   	pop    esi
c00203e1:	5f                   	pop    edi
c00203e2:	5d                   	pop    ebp
c00203e3:	c3                   	ret    
c00203e4:	83 c4 04             	add    esp,0x4
c00203e7:	8d 46 02             	lea    eax,[esi+0x2]
c00203ea:	5b                   	pop    ebx
c00203eb:	5e                   	pop    esi
c00203ec:	5f                   	pop    edi
c00203ed:	5d                   	pop    ebp
c00203ee:	c3                   	ret    
c00203ef:	90                   	nop
c00203f0:	83 c4 04             	add    esp,0x4
c00203f3:	31 c0                	xor    eax,eax
c00203f5:	5b                   	pop    ebx
c00203f6:	5e                   	pop    esi
c00203f7:	5f                   	pop    edi
c00203f8:	5d                   	pop    ebp
c00203f9:	c3                   	ret    
c00203fa:	66 90                	xchg   ax,ax
c00203fc:	b8 01 00 00 00       	mov    eax,0x1
c0020401:	eb d9                	jmp    c00203dc <SoundPort::buffer32(int*, int)+0x64>
c0020403:	90                   	nop

c0020404 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0020404:	57                   	push   edi
c0020405:	56                   	push   esi
c0020406:	53                   	push   ebx
c0020407:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002040b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002040f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0020415:	39 03                	cmp    DWORD PTR [ebx],eax
c0020417:	74 13                	je     c002042c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0020419:	83 ec 0c             	sub    esp,0xc
c002041c:	68 9c e0 02 c0       	push   0xc002e09c
c0020421:	e8 26 03 ff ff       	call   c001074c <KePanic(char const*)>
c0020426:	83 c4 10             	add    esp,0x10
c0020429:	8d 76 00             	lea    esi,[esi+0x0]
c002042c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0020432:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0020435:	74 11                	je     c0020448 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0020437:	83 ec 0c             	sub    esp,0xc
c002043a:	68 db e0 02 c0       	push   0xc002e0db
c002043f:	e8 08 03 ff ff       	call   c001074c <KePanic(char const*)>
c0020444:	83 c4 10             	add    esp,0x10
c0020447:	90                   	nop
c0020448:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c002044e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0020451:	74 11                	je     c0020464 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0020453:	83 ec 0c             	sub    esp,0xc
c0020456:	68 db e0 02 c0       	push   0xc002e0db
c002045b:	e8 ec 02 ff ff       	call   c001074c <KePanic(char const*)>
c0020460:	83 c4 10             	add    esp,0x10
c0020463:	90                   	nop
c0020464:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0020467:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c002046b:	7e 07                	jle    c0020474 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c002046d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020471:	8d 76 00             	lea    esi,[esi+0x0]
c0020474:	85 f6                	test   esi,esi
c0020476:	7e 2c                	jle    c00204a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0020478:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002047c:	8d 3c 36             	lea    edi,[esi+esi*1]
c002047f:	31 c9                	xor    ecx,ecx
c0020481:	01 d7                	add    edi,edx
c0020483:	90                   	nop
c0020484:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0020487:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c002048a:	85 c0                	test   eax,eax
c002048c:	79 06                	jns    c0020494 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c002048e:	05 ff 7f 00 00       	add    eax,0x7fff
c0020493:	90                   	nop
c0020494:	c1 f8 0f             	sar    eax,0xf
c0020497:	83 c1 04             	add    ecx,0x4
c002049a:	66 01 02             	add    WORD PTR [edx],ax
c002049d:	83 c2 02             	add    edx,0x2
c00204a0:	39 d7                	cmp    edi,edx
c00204a2:	75 e0                	jne    c0020484 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00204a4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00204a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00204aa:	83 ec 04             	sub    esp,0x4
c00204ad:	29 f0                	sub    eax,esi
c00204af:	c1 e0 02             	shl    eax,0x2
c00204b2:	50                   	push   eax
c00204b3:	8d 04 b2             	lea    eax,[edx+esi*4]
c00204b6:	50                   	push   eax
c00204b7:	52                   	push   edx
c00204b8:	e8 13 ff fd ff       	call   c00003d0 <memmove>
c00204bd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00204c0:	83 c4 10             	add    esp,0x10
c00204c3:	29 f0                	sub    eax,esi
c00204c5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00204c8:	89 f0                	mov    eax,esi
c00204ca:	5b                   	pop    ebx
c00204cb:	5e                   	pop    esi
c00204cc:	5f                   	pop    edi
c00204cd:	c3                   	ret    
c00204ce:	66 90                	xchg   ax,ax

c00204d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00204d0:	57                   	push   edi
c00204d1:	56                   	push   esi
c00204d2:	53                   	push   ebx
c00204d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00204d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00204db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00204df:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00204e5:	39 06                	cmp    DWORD PTR [esi],eax
c00204e7:	74 13                	je     c00204fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00204e9:	83 ec 0c             	sub    esp,0xc
c00204ec:	68 bc e0 02 c0       	push   0xc002e0bc
c00204f1:	e8 56 02 ff ff       	call   c001074c <KePanic(char const*)>
c00204f6:	83 c4 10             	add    esp,0x10
c00204f9:	8d 76 00             	lea    esi,[esi+0x0]
c00204fc:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0020502:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0020505:	74 11                	je     c0020518 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0020507:	83 ec 0c             	sub    esp,0xc
c002050a:	68 f7 e0 02 c0       	push   0xc002e0f7
c002050f:	e8 38 02 ff ff       	call   c001074c <KePanic(char const*)>
c0020514:	83 c4 10             	add    esp,0x10
c0020517:	90                   	nop
c0020518:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c002051e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0020521:	74 11                	je     c0020534 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0020523:	83 ec 0c             	sub    esp,0xc
c0020526:	68 f7 e0 02 c0       	push   0xc002e0f7
c002052b:	e8 1c 02 ff ff       	call   c001074c <KePanic(char const*)>
c0020530:	83 c4 10             	add    esp,0x10
c0020533:	90                   	nop
c0020534:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0020537:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c002053b:	7e 07                	jle    c0020544 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c002053d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0020541:	8d 76 00             	lea    esi,[esi+0x0]
c0020544:	85 ff                	test   edi,edi
c0020546:	7e 1c                	jle    c0020564 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0020548:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002054f:	31 c0                	xor    eax,eax
c0020551:	8d 76 00             	lea    esi,[esi+0x0]
c0020554:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020557:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002055a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c002055d:	83 c0 04             	add    eax,0x4
c0020560:	39 c1                	cmp    ecx,eax
c0020562:	75 f0                	jne    c0020554 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0020564:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020567:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002056a:	83 ec 04             	sub    esp,0x4
c002056d:	29 f8                	sub    eax,edi
c002056f:	c1 e0 02             	shl    eax,0x2
c0020572:	50                   	push   eax
c0020573:	8d 04 ba             	lea    eax,[edx+edi*4]
c0020576:	50                   	push   eax
c0020577:	52                   	push   edx
c0020578:	e8 53 fe fd ff       	call   c00003d0 <memmove>
c002057d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0020580:	83 c4 10             	add    esp,0x10
c0020583:	29 f8                	sub    eax,edi
c0020585:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0020588:	89 f8                	mov    eax,edi
c002058a:	5b                   	pop    ebx
c002058b:	5e                   	pop    esi
c002058c:	5f                   	pop    edi
c002058d:	c3                   	ret    

c002058e <PCI::open(int, int, void*)>:
c002058e:	83 ec 18             	sub    esp,0x18
c0020591:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020595:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020599:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002059f:	8b 10                	mov    edx,DWORD PTR [eax]
c00205a1:	50                   	push   eax
c00205a2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00205a5:	31 c0                	xor    eax,eax
c00205a7:	83 c4 1c             	add    esp,0x1c
c00205aa:	c3                   	ret    
c00205ab:	90                   	nop

c00205ac <PCI::close(int, int, void*)>:
c00205ac:	31 c0                	xor    eax,eax
c00205ae:	c3                   	ret    
c00205af:	90                   	nop

c00205b0 <PCI::PCI()>:
c00205b0:	83 ec 0c             	sub    esp,0xc
c00205b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b7:	83 ec 08             	sub    esp,0x8
c00205ba:	68 5f a6 02 c0       	push   0xc002a65f
c00205bf:	50                   	push   eax
c00205c0:	e8 cb 8d fe ff       	call   c0009390 <Bus::Bus(char const*)>
c00205c5:	83 c4 10             	add    esp,0x10
c00205c8:	ba 18 e2 02 c0       	mov    edx,0xc002e218
c00205cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205d1:	89 10                	mov    DWORD PTR [eax],edx
c00205d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205d7:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00205e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205e5:	a3 a0 8d 03 c0       	mov    ds:0xc0038da0,eax
c00205ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00205f4:	0f b6 d0             	movzx  edx,al
c00205f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205fb:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0020602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020606:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002060c:	0f b6 d0             	movzx  edx,al
c002060f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020613:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002061c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020622:	8d 50 01             	lea    edx,[eax+0x1]
c0020625:	88 d1                	mov    cl,dl
c0020627:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002062b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0020631:	0f b6 d0             	movzx  edx,al
c0020634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020638:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002063c:	83 c9 c0             	or     ecx,0xffffffc0
c002063f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020643:	90                   	nop
c0020644:	83 c4 0c             	add    esp,0xc
c0020647:	c3                   	ret    

c0020648 <PCI::readBAR8(unsigned int, int)>:
c0020648:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002064c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020650:	f6 c2 01             	test   dl,0x1
c0020653:	74 07                	je     c002065c <PCI::readBAR8(unsigned int, int)+0x14>
c0020655:	83 e2 fc             	and    edx,0xfffffffc
c0020658:	01 c2                	add    edx,eax
c002065a:	ec                   	in     al,dx
c002065b:	c3                   	ret    
c002065c:	83 e2 f0             	and    edx,0xfffffff0
c002065f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0020662:	c3                   	ret    
c0020663:	90                   	nop

c0020664 <PCI::readBAR16(unsigned int, int)>:
c0020664:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020668:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002066c:	f6 c2 01             	test   dl,0x1
c002066f:	74 08                	je     c0020679 <PCI::readBAR16(unsigned int, int)+0x15>
c0020671:	83 e2 fc             	and    edx,0xfffffffc
c0020674:	01 c2                	add    edx,eax
c0020676:	66 ed                	in     ax,dx
c0020678:	c3                   	ret    
c0020679:	83 e2 f0             	and    edx,0xfffffff0
c002067c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0020680:	c3                   	ret    
c0020681:	90                   	nop

c0020682 <PCI::readBAR32(unsigned int, int)>:
c0020682:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002068a:	f6 c2 01             	test   dl,0x1
c002068d:	74 07                	je     c0020696 <PCI::readBAR32(unsigned int, int)+0x14>
c002068f:	83 e2 fc             	and    edx,0xfffffffc
c0020692:	01 c2                	add    edx,eax
c0020694:	ed                   	in     eax,dx
c0020695:	c3                   	ret    
c0020696:	83 e2 f0             	and    edx,0xfffffff0
c0020699:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002069c:	c3                   	ret    
c002069d:	90                   	nop

c002069e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002069e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00206a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00206aa:	f6 c2 01             	test   dl,0x1
c00206ad:	74 07                	je     c00206b6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00206af:	83 e2 fc             	and    edx,0xfffffffc
c00206b2:	01 ca                	add    edx,ecx
c00206b4:	ee                   	out    dx,al
c00206b5:	c3                   	ret    
c00206b6:	83 e2 f0             	and    edx,0xfffffff0
c00206b9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00206bc:	c3                   	ret    
c00206bd:	90                   	nop

c00206be <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00206be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00206c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00206ca:	f6 c2 01             	test   dl,0x1
c00206cd:	74 08                	je     c00206d7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00206cf:	83 e2 fc             	and    edx,0xfffffffc
c00206d2:	01 ca                	add    edx,ecx
c00206d4:	66 ef                	out    dx,ax
c00206d6:	c3                   	ret    
c00206d7:	83 e2 f0             	and    edx,0xfffffff0
c00206da:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00206de:	c3                   	ret    
c00206df:	90                   	nop

c00206e0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00206e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00206e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00206ec:	f6 c2 01             	test   dl,0x1
c00206ef:	74 07                	je     c00206f8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00206f1:	83 e2 fc             	and    edx,0xfffffffc
c00206f4:	01 ca                	add    edx,ecx
c00206f6:	ef                   	out    dx,eax
c00206f7:	c3                   	ret    
c00206f8:	83 e2 f0             	and    edx,0xfffffff0
c00206fb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00206fe:	c3                   	ret    
c00206ff:	90                   	nop

c0020700 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020700:	55                   	push   ebp
c0020701:	57                   	push   edi
c0020702:	56                   	push   esi
c0020703:	53                   	push   ebx
c0020704:	83 ec 0c             	sub    esp,0xc
c0020707:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002070c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0020710:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0020714:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020718:	83 fe 07             	cmp    esi,0x7
c002071b:	76 10                	jbe    c002072d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002071d:	83 ec 0c             	sub    esp,0xc
c0020720:	68 13 e1 02 c0       	push   0xc002e113
c0020725:	e8 22 00 ff ff       	call   c001074c <KePanic(char const*)>
c002072a:	83 c4 10             	add    esp,0x10
c002072d:	0f b6 db             	movzx  ebx,bl
c0020730:	83 fb 0f             	cmp    ebx,0xf
c0020733:	76 10                	jbe    c0020745 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c0020735:	83 ec 0c             	sub    esp,0xc
c0020738:	68 43 e1 02 c0       	push   0xc002e143
c002073d:	e8 0a 00 ff ff       	call   c001074c <KePanic(char const*)>
c0020742:	83 c4 10             	add    esp,0x10
c0020745:	8d 04 36             	lea    eax,[esi+esi*1]
c0020748:	ba f8 0c 00 00       	mov    edx,0xcf8
c002074d:	83 c8 f0             	or     eax,0xfffffff0
c0020750:	ee                   	out    dx,al
c0020751:	ba fa 0c 00 00       	mov    edx,0xcfa
c0020756:	89 e8                	mov    eax,ebp
c0020758:	ee                   	out    dx,al
c0020759:	83 c4 0c             	add    esp,0xc
c002075c:	89 d8                	mov    eax,ebx
c002075e:	89 f9                	mov    ecx,edi
c0020760:	c1 e0 08             	shl    eax,0x8
c0020763:	0f b6 d9             	movzx  ebx,cl
c0020766:	83 e3 fc             	and    ebx,0xfffffffc
c0020769:	09 d8                	or     eax,ebx
c002076b:	5b                   	pop    ebx
c002076c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c0020771:	5e                   	pop    esi
c0020772:	5f                   	pop    edi
c0020773:	5d                   	pop    ebp
c0020774:	c3                   	ret    
c0020775:	90                   	nop

c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020776:	57                   	push   edi
c0020777:	56                   	push   esi
c0020778:	53                   	push   ebx
c0020779:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002077d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020781:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0020787:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002078b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002078f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020793:	83 ff 01             	cmp    edi,0x1
c0020796:	75 3f                	jne    c00207d7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c0020798:	89 de                	mov    esi,ebx
c002079a:	0f b6 c0             	movzx  eax,al
c002079d:	81 e6 fc 00 00 00    	and    esi,0xfc
c00207a3:	c1 e0 10             	shl    eax,0x10
c00207a6:	0f b6 c9             	movzx  ecx,cl
c00207a9:	09 f0                	or     eax,esi
c00207ab:	c1 e1 08             	shl    ecx,0x8
c00207ae:	0f b6 d2             	movzx  edx,dl
c00207b1:	09 c8                	or     eax,ecx
c00207b3:	c1 e2 0b             	shl    edx,0xb
c00207b6:	09 d0                	or     eax,edx
c00207b8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00207bd:	0d 00 00 00 80       	or     eax,0x80000000
c00207c2:	ef                   	out    dx,eax
c00207c3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00207c8:	ed                   	in     eax,dx
c00207c9:	83 e3 02             	and    ebx,0x2
c00207cc:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c00207d3:	d3 e8                	shr    eax,cl
c00207d5:	eb 44                	jmp    c002081b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c00207d7:	83 ff 02             	cmp    edi,0x2
c00207da:	75 2d                	jne    c0020809 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c00207dc:	83 ec 0c             	sub    esp,0xc
c00207df:	0f b6 c9             	movzx  ecx,cl
c00207e2:	0f b6 d2             	movzx  edx,dl
c00207e5:	0f b6 fb             	movzx  edi,bl
c00207e8:	0f b6 c0             	movzx  eax,al
c00207eb:	57                   	push   edi
c00207ec:	51                   	push   ecx
c00207ed:	52                   	push   edx
c00207ee:	50                   	push   eax
c00207ef:	56                   	push   esi
c00207f0:	e8 0b ff ff ff       	call   c0020700 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00207f5:	89 c2                	mov    edx,eax
c00207f7:	ed                   	in     eax,dx
c00207f8:	83 e3 02             	and    ebx,0x2
c00207fb:	83 c4 20             	add    esp,0x20
c00207fe:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c0020805:	d3 e8                	shr    eax,cl
c0020807:	eb 12                	jmp    c002081b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c0020809:	83 ec 0c             	sub    esp,0xc
c002080c:	68 73 e1 02 c0       	push   0xc002e173
c0020811:	e8 36 ff fe ff       	call   c001074c <KePanic(char const*)>
c0020816:	83 c4 10             	add    esp,0x10
c0020819:	31 c0                	xor    eax,eax
c002081b:	5b                   	pop    ebx
c002081c:	5e                   	pop    esi
c002081d:	5f                   	pop    edi
c002081e:	c3                   	ret    
c002081f:	90                   	nop

c0020820 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0020820:	83 ec 18             	sub    esp,0x18
c0020823:	6a 00                	push   0x0
c0020825:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002082a:	50                   	push   eax
c002082b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020830:	50                   	push   eax
c0020831:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020836:	50                   	push   eax
c0020837:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002083b:	e8 36 ff ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020840:	83 c4 2c             	add    esp,0x2c
c0020843:	c3                   	ret    

c0020844 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0020844:	83 ec 18             	sub    esp,0x18
c0020847:	6a 0e                	push   0xe
c0020849:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002084e:	50                   	push   eax
c002084f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020854:	50                   	push   eax
c0020855:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002085a:	50                   	push   eax
c002085b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002085f:	e8 12 ff ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020864:	83 c4 2c             	add    esp,0x2c
c0020867:	0f b6 c0             	movzx  eax,al
c002086a:	c3                   	ret    
c002086b:	90                   	nop

c002086c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002086c:	55                   	push   ebp
c002086d:	57                   	push   edi
c002086e:	56                   	push   esi
c002086f:	53                   	push   ebx
c0020870:	83 ec 18             	sub    esp,0x18
c0020873:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0020878:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002087d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0020882:	6a 0a                	push   0xa
c0020884:	56                   	push   esi
c0020885:	55                   	push   ebp
c0020886:	57                   	push   edi
c0020887:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002088b:	e8 e6 fe ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020890:	83 c4 14             	add    esp,0x14
c0020893:	89 c3                	mov    ebx,eax
c0020895:	6a 0a                	push   0xa
c0020897:	0f b6 db             	movzx  ebx,bl
c002089a:	56                   	push   esi
c002089b:	55                   	push   ebp
c002089c:	57                   	push   edi
c002089d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00208a1:	e8 d0 fe ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00208a6:	83 c4 2c             	add    esp,0x2c
c00208a9:	25 00 ff 00 00       	and    eax,0xff00
c00208ae:	09 d8                	or     eax,ebx
c00208b0:	5b                   	pop    ebx
c00208b1:	5e                   	pop    esi
c00208b2:	5f                   	pop    edi
c00208b3:	5d                   	pop    ebp
c00208b4:	c3                   	ret    
c00208b5:	90                   	nop

c00208b6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00208b6:	83 ec 18             	sub    esp,0x18
c00208b9:	6a 08                	push   0x8
c00208bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00208c0:	50                   	push   eax
c00208c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00208c6:	50                   	push   eax
c00208c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00208cc:	50                   	push   eax
c00208cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00208d1:	e8 a0 fe ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00208d6:	83 c4 2c             	add    esp,0x2c
c00208d9:	0f b6 c4             	movzx  eax,ah
c00208dc:	c3                   	ret    
c00208dd:	90                   	nop

c00208de <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00208de:	83 ec 18             	sub    esp,0x18
c00208e1:	6a 08                	push   0x8
c00208e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00208e8:	50                   	push   eax
c00208e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00208ee:	50                   	push   eax
c00208ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00208f4:	50                   	push   eax
c00208f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00208f9:	e8 78 fe ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00208fe:	83 c4 2c             	add    esp,0x2c
c0020901:	c3                   	ret    

c0020902 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020902:	83 ec 18             	sub    esp,0x18
c0020905:	6a 3c                	push   0x3c
c0020907:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002090c:	50                   	push   eax
c002090d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020912:	50                   	push   eax
c0020913:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020918:	50                   	push   eax
c0020919:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002091d:	e8 54 fe ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020922:	83 c4 2c             	add    esp,0x2c
c0020925:	c3                   	ret    

c0020926 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020926:	83 ec 18             	sub    esp,0x18
c0020929:	6a 18                	push   0x18
c002092b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020930:	50                   	push   eax
c0020931:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020936:	50                   	push   eax
c0020937:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002093c:	50                   	push   eax
c002093d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020941:	e8 30 fe ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020946:	83 c4 2c             	add    esp,0x2c
c0020949:	0f b6 c4             	movzx  eax,ah
c002094c:	c3                   	ret    
c002094d:	90                   	nop

c002094e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002094e:	55                   	push   ebp
c002094f:	57                   	push   edi
c0020950:	56                   	push   esi
c0020951:	53                   	push   ebx
c0020952:	83 ec 28             	sub    esp,0x28
c0020955:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020959:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002095e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0020963:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0020968:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002096f:	8d 43 12             	lea    eax,[ebx+0x12]
c0020972:	83 c3 10             	add    ebx,0x10
c0020975:	0f b6 c0             	movzx  eax,al
c0020978:	0f b6 db             	movzx  ebx,bl
c002097b:	50                   	push   eax
c002097c:	51                   	push   ecx
c002097d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0020981:	57                   	push   edi
c0020982:	55                   	push   ebp
c0020983:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020987:	e8 ea fd ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002098c:	83 c4 14             	add    esp,0x14
c002098f:	89 c6                	mov    esi,eax
c0020991:	53                   	push   ebx
c0020992:	c1 e6 10             	shl    esi,0x10
c0020995:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020999:	51                   	push   ecx
c002099a:	57                   	push   edi
c002099b:	55                   	push   ebp
c002099c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00209a0:	e8 d1 fd ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00209a5:	83 c4 3c             	add    esp,0x3c
c00209a8:	0f b7 c0             	movzx  eax,ax
c00209ab:	5b                   	pop    ebx
c00209ac:	09 f0                	or     eax,esi
c00209ae:	5e                   	pop    esi
c00209af:	5f                   	pop    edi
c00209b0:	5d                   	pop    ebp
c00209b1:	c3                   	ret    

c00209b2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00209b2:	55                   	push   ebp
c00209b3:	57                   	push   edi
c00209b4:	56                   	push   esi
c00209b5:	53                   	push   ebx
c00209b6:	83 ec 0c             	sub    esp,0xc
c00209b9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00209bd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00209c1:	89 f5                	mov    ebp,esi
c00209c3:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00209c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00209cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00209d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00209d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00209d9:	83 f9 01             	cmp    ecx,0x1
c00209dc:	75 5d                	jne    c0020a3b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00209de:	0f b6 c8             	movzx  ecx,al
c00209e1:	0f b6 d2             	movzx  edx,dl
c00209e4:	c1 e1 10             	shl    ecx,0x10
c00209e7:	c1 e2 0b             	shl    edx,0xb
c00209ea:	89 f0                	mov    eax,esi
c00209ec:	25 fc 00 00 00       	and    eax,0xfc
c00209f1:	09 c1                	or     ecx,eax
c00209f3:	89 e8                	mov    eax,ebp
c00209f5:	0f b6 c0             	movzx  eax,al
c00209f8:	c1 e0 08             	shl    eax,0x8
c00209fb:	09 c1                	or     ecx,eax
c00209fd:	09 d1                	or     ecx,edx
c00209ff:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020a04:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020a0a:	89 c8                	mov    eax,ecx
c0020a0c:	ef                   	out    dx,eax
c0020a0d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020a12:	ed                   	in     eax,dx
c0020a13:	0f b7 db             	movzx  ebx,bx
c0020a16:	83 e6 02             	and    esi,0x2
c0020a19:	74 0a                	je     c0020a25 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0020a1b:	0f b7 d0             	movzx  edx,ax
c0020a1e:	c1 e3 10             	shl    ebx,0x10
c0020a21:	09 d3                	or     ebx,edx
c0020a23:	eb 05                	jmp    c0020a2a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0020a25:	66 31 c0             	xor    ax,ax
c0020a28:	09 c3                	or     ebx,eax
c0020a2a:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020a2f:	89 c8                	mov    eax,ecx
c0020a31:	ef                   	out    dx,eax
c0020a32:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020a37:	89 d8                	mov    eax,ebx
c0020a39:	eb 41                	jmp    c0020a7c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0020a3b:	83 f9 02             	cmp    ecx,0x2
c0020a3e:	75 45                	jne    c0020a85 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0020a40:	83 ec 0c             	sub    esp,0xc
c0020a43:	0f b6 d2             	movzx  edx,dl
c0020a46:	89 f1                	mov    ecx,esi
c0020a48:	0f b6 c0             	movzx  eax,al
c0020a4b:	0f b6 f1             	movzx  esi,cl
c0020a4e:	89 e9                	mov    ecx,ebp
c0020a50:	56                   	push   esi
c0020a51:	0f b6 c9             	movzx  ecx,cl
c0020a54:	51                   	push   ecx
c0020a55:	52                   	push   edx
c0020a56:	50                   	push   eax
c0020a57:	57                   	push   edi
c0020a58:	e8 a3 fc ff ff       	call   c0020700 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020a5d:	89 c2                	mov    edx,eax
c0020a5f:	ed                   	in     eax,dx
c0020a60:	83 c4 20             	add    esp,0x20
c0020a63:	0f b7 db             	movzx  ebx,bx
c0020a66:	f6 c2 02             	test   dl,0x2
c0020a69:	74 0c                	je     c0020a77 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0020a6b:	0f b7 c8             	movzx  ecx,ax
c0020a6e:	89 d8                	mov    eax,ebx
c0020a70:	c1 e0 10             	shl    eax,0x10
c0020a73:	09 c8                	or     eax,ecx
c0020a75:	eb 05                	jmp    c0020a7c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0020a77:	66 31 c0             	xor    ax,ax
c0020a7a:	09 d8                	or     eax,ebx
c0020a7c:	ef                   	out    dx,eax
c0020a7d:	83 c4 0c             	add    esp,0xc
c0020a80:	5b                   	pop    ebx
c0020a81:	5e                   	pop    esi
c0020a82:	5f                   	pop    edi
c0020a83:	5d                   	pop    ebp
c0020a84:	c3                   	ret    
c0020a85:	c7 44 24 20 73 e1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002e173
c0020a8d:	83 c4 0c             	add    esp,0xc
c0020a90:	5b                   	pop    ebx
c0020a91:	5e                   	pop    esi
c0020a92:	5f                   	pop    edi
c0020a93:	5d                   	pop    ebp
c0020a94:	e9 b3 fc fe ff       	jmp    c001074c <KePanic(char const*)>
c0020a99:	90                   	nop

c0020a9a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0020a9a:	55                   	push   ebp
c0020a9b:	57                   	push   edi
c0020a9c:	56                   	push   esi
c0020a9d:	53                   	push   ebx
c0020a9e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c0020aa4:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c0020aab:	80 3d ac 8d 03 c0 00 	cmp    BYTE PTR ds:0xc0038dac,0x0
c0020ab2:	0f 85 bd 00 00 00    	jne    c0020b75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c0020ab8:	83 ec 0c             	sub    esp,0xc
c0020abb:	68 14 01 00 00       	push   0x114
c0020ac0:	e8 32 f8 fe ff       	call   c00102f7 <malloc>
c0020ac5:	83 c4 0c             	add    esp,0xc
c0020ac8:	89 c3                	mov    ebx,eax
c0020aca:	ff 35 58 63 03 c0    	push   DWORD PTR ds:0xc0036358
c0020ad0:	68 79 e1 02 c0       	push   0xc002e179
c0020ad5:	50                   	push   eax
c0020ad6:	e8 d9 80 fe ff       	call   c0008bb4 <File::File(char const*, Process*)>
c0020adb:	83 c4 10             	add    esp,0x10
c0020ade:	85 db                	test   ebx,ebx
c0020ae0:	0f 84 67 02 00 00    	je     c0020d4d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c0020ae6:	56                   	push   esi
c0020ae7:	56                   	push   esi
c0020ae8:	6a 01                	push   0x1
c0020aea:	53                   	push   ebx
c0020aeb:	e8 e2 80 fe ff       	call   c0008bd2 <File::open(FileOpenMode)>
c0020af0:	83 c4 10             	add    esp,0x10
c0020af3:	85 c0                	test   eax,eax
c0020af5:	0f 85 52 02 00 00    	jne    c0020d4d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c0020afb:	52                   	push   edx
c0020afc:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c0020b00:	50                   	push   eax
c0020b01:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020b05:	50                   	push   eax
c0020b06:	53                   	push   ebx
c0020b07:	e8 c8 83 fe ff       	call   c0008ed4 <File::stat(unsigned long long*, bool*)>
c0020b0c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020b10:	40                   	inc    eax
c0020b11:	89 04 24             	mov    DWORD PTR [esp],eax
c0020b14:	e8 de f7 fe ff       	call   c00102f7 <malloc>
c0020b19:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0020b1d:	a3 a8 8d 03 c0       	mov    ds:0xc0038da8,eax
c0020b22:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0020b26:	59                   	pop    ecx
c0020b27:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020b29:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c0020b2d:	51                   	push   ecx
c0020b2e:	50                   	push   eax
c0020b2f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0020b33:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0020b37:	53                   	push   ebx
c0020b38:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020b3b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0020b3f:	83 c4 20             	add    esp,0x20
c0020b42:	89 c8                	mov    eax,ecx
c0020b44:	99                   	cdq    
c0020b45:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c0020b49:	0f 85 fe 01 00 00    	jne    c0020d4d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c0020b4f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c0020b53:	0f 85 f4 01 00 00    	jne    c0020d4d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c0020b59:	83 ec 0c             	sub    esp,0xc
c0020b5c:	53                   	push   ebx
c0020b5d:	e8 ce 80 fe ff       	call   c0008c30 <File::close()>
c0020b62:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0020b66:	c6 05 ac 8d 03 c0 01 	mov    BYTE PTR ds:0xc0038dac,0x1
c0020b6d:	a3 a4 8d 03 c0       	mov    ds:0xc0038da4,eax
c0020b72:	83 c4 10             	add    esp,0x10
c0020b75:	a1 a4 8d 03 c0       	mov    eax,ds:0xc0038da4
c0020b7a:	8b 1d a8 8d 03 c0    	mov    ebx,DWORD PTR ds:0xc0038da8
c0020b80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b84:	31 f6                	xor    esi,esi
c0020b86:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0020b8e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0020b95:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0020b9a:	31 c9                	xor    ecx,ecx
c0020b9c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c0020ba4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0020ba9:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c0020bb1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0020bb5:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c0020bbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0020bc1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0020bc5:	0f 8e 82 01 00 00    	jle    c0020d4d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c0020bcb:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c0020bce:	d4 40                	aam    0x40
c0020bd0:	d5 39                	aad    0x39
c0020bd2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0020bd6:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c0020bda:	d4 40                	aam    0x40
c0020bdc:	d5 39                	aad    0x39
c0020bde:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0020be2:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c0020be6:	d4 40                	aam    0x40
c0020be8:	d5 39                	aad    0x39
c0020bea:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0020bee:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c0020bf2:	d4 40                	aam    0x40
c0020bf4:	d5 39                	aad    0x39
c0020bf6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0020bfa:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c0020bfe:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0020c02:	3c 56                	cmp    al,0x56
c0020c04:	74 43                	je     c0020c49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c0020c06:	d4 40                	aam    0x40
c0020c08:	d5 39                	aad    0x39
c0020c0a:	8d 48 d0             	lea    ecx,[eax-0x30]
c0020c0d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c0020c11:	0f b6 c9             	movzx  ecx,cl
c0020c14:	c1 e1 04             	shl    ecx,0x4
c0020c17:	d4 40                	aam    0x40
c0020c19:	d5 39                	aad    0x39
c0020c1b:	83 e8 30             	sub    eax,0x30
c0020c1e:	0f b6 c0             	movzx  eax,al
c0020c21:	09 c1                	or     ecx,eax
c0020c23:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c0020c27:	c1 e1 04             	shl    ecx,0x4
c0020c2a:	d4 40                	aam    0x40
c0020c2c:	d5 39                	aad    0x39
c0020c2e:	83 e8 30             	sub    eax,0x30
c0020c31:	0f b6 c0             	movzx  eax,al
c0020c34:	09 c1                	or     ecx,eax
c0020c36:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c0020c3a:	c1 e1 04             	shl    ecx,0x4
c0020c3d:	d4 40                	aam    0x40
c0020c3f:	d5 39                	aad    0x39
c0020c41:	83 e8 30             	sub    eax,0x30
c0020c44:	0f b6 c0             	movzx  eax,al
c0020c47:	09 c1                	or     ecx,eax
c0020c49:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c0020c4d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0020c51:	3c 58                	cmp    al,0x58
c0020c53:	74 47                	je     c0020c9c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c0020c55:	d4 40                	aam    0x40
c0020c57:	d5 39                	aad    0x39
c0020c59:	8d 50 d0             	lea    edx,[eax-0x30]
c0020c5c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c0020c60:	0f b6 d2             	movzx  edx,dl
c0020c63:	c1 e2 04             	shl    edx,0x4
c0020c66:	d4 40                	aam    0x40
c0020c68:	d5 39                	aad    0x39
c0020c6a:	83 e8 30             	sub    eax,0x30
c0020c6d:	0f b6 c0             	movzx  eax,al
c0020c70:	09 c2                	or     edx,eax
c0020c72:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c0020c76:	c1 e2 04             	shl    edx,0x4
c0020c79:	d4 40                	aam    0x40
c0020c7b:	d5 39                	aad    0x39
c0020c7d:	83 e8 30             	sub    eax,0x30
c0020c80:	0f b6 c0             	movzx  eax,al
c0020c83:	09 c2                	or     edx,eax
c0020c85:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c0020c89:	c1 e2 04             	shl    edx,0x4
c0020c8c:	d4 40                	aam    0x40
c0020c8e:	d5 39                	aad    0x39
c0020c90:	83 e8 30             	sub    eax,0x30
c0020c93:	0f b6 c0             	movzx  eax,al
c0020c96:	09 c2                	or     edx,eax
c0020c98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020c9c:	83 c6 10             	add    esi,0x10
c0020c9f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c0020ca3:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c0020ca7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0020cab:	83 fa 0a             	cmp    edx,0xa
c0020cae:	74 0b                	je     c0020cbb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c0020cb0:	47                   	inc    edi
c0020cb1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c0020cb5:	75 19                	jne    c0020cd0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c0020cb7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0020cbb:	31 c0                	xor    eax,eax
c0020cbd:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c0020cc2:	0f 94 c0             	sete   al
c0020cc5:	01 c6                	add    esi,eax
c0020cc7:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c0020ccc:	75 0b                	jne    c0020cd9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c0020cce:	eb 14                	jmp    c0020ce4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c0020cd0:	46                   	inc    esi
c0020cd1:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c0020cd4:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0020cd7:	eb ca                	jmp    c0020ca3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c0020cd9:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c0020cde:	0f 85 dd fe ff ff    	jne    c0020bc1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c0020ce4:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c0020ce9:	74 10                	je     c0020cfb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c0020ceb:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c0020cf0:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c0020cf5:	0f 85 c6 fe ff ff    	jne    c0020bc1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c0020cfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020cff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020d03:	83 e8 30             	sub    eax,0x30
c0020d06:	83 ef 30             	sub    edi,0x30
c0020d09:	c1 e0 04             	shl    eax,0x4
c0020d0c:	09 f8                	or     eax,edi
c0020d0e:	0f b6 c0             	movzx  eax,al
c0020d11:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0020d15:	0f 85 a6 fe ff ff    	jne    c0020bc1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c0020d1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d1f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0020d23:	83 e8 30             	sub    eax,0x30
c0020d26:	83 ef 30             	sub    edi,0x30
c0020d29:	c1 e0 04             	shl    eax,0x4
c0020d2c:	09 f8                	or     eax,edi
c0020d2e:	0f b6 c0             	movzx  eax,al
c0020d31:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0020d35:	0f 85 86 fe ff ff    	jne    c0020bc1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c0020d3b:	50                   	push   eax
c0020d3c:	50                   	push   eax
c0020d3d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020d41:	50                   	push   eax
c0020d42:	55                   	push   ebp
c0020d43:	e8 f8 f8 fd ff       	call   c0000640 <strcpy>
c0020d48:	83 c4 10             	add    esp,0x10
c0020d4b:	eb 06                	jmp    c0020d53 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c0020d4d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0020d51:	31 ed                	xor    ebp,ebp
c0020d53:	81 c4 4c 01 00 00    	add    esp,0x14c
c0020d59:	89 e8                	mov    eax,ebp
c0020d5b:	5b                   	pop    ebx
c0020d5c:	5e                   	pop    esi
c0020d5d:	5f                   	pop    edi
c0020d5e:	5d                   	pop    ebp
c0020d5f:	c3                   	ret    

c0020d60 <PCI::checkBus(unsigned char)>:
c0020d60:	56                   	push   esi
c0020d61:	53                   	push   ebx
c0020d62:	31 db                	xor    ebx,ebx
c0020d64:	51                   	push   ecx
c0020d65:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020d6a:	52                   	push   edx
c0020d6b:	53                   	push   ebx
c0020d6c:	43                   	inc    ebx
c0020d6d:	56                   	push   esi
c0020d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d72:	e8 6f 03 00 00       	call   c00210e6 <PCI::checkDevice(unsigned char, unsigned char)>
c0020d77:	83 c4 10             	add    esp,0x10
c0020d7a:	83 fb 20             	cmp    ebx,0x20
c0020d7d:	75 eb                	jne    c0020d6a <PCI::checkBus(unsigned char)+0xa>
c0020d7f:	58                   	pop    eax
c0020d80:	5b                   	pop    ebx
c0020d81:	5e                   	pop    esi
c0020d82:	c3                   	ret    
c0020d83:	90                   	nop

c0020d84 <PCI::foundDevice(PCIDeviceInfo)>:
c0020d84:	55                   	push   ebp
c0020d85:	57                   	push   edi
c0020d86:	56                   	push   esi
c0020d87:	53                   	push   ebx
c0020d88:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0020d8e:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c0020d96:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c0020d9d:	3d ff ff 00 00       	cmp    eax,0xffff
c0020da2:	0f 84 b7 01 00 00    	je     c0020f5f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c0020da8:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c0020db0:	66 81 fb 06 04       	cmp    bx,0x406
c0020db5:	75 32                	jne    c0020de9 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c0020db7:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c0020dbf:	50                   	push   eax
c0020dc0:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c0020dc8:	50                   	push   eax
c0020dc9:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c0020dd1:	50                   	push   eax
c0020dd2:	55                   	push   ebp
c0020dd3:	e8 4e fb ff ff       	call   c0020926 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0020dd8:	59                   	pop    ecx
c0020dd9:	0f b6 c0             	movzx  eax,al
c0020ddc:	5b                   	pop    ebx
c0020ddd:	50                   	push   eax
c0020dde:	55                   	push   ebp
c0020ddf:	e8 7c ff ff ff       	call   c0020d60 <PCI::checkBus(unsigned char)>
c0020de4:	e9 16 01 00 00       	jmp    c0020eff <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c0020de9:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c0020df0:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c0020df6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0020dfa:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c0020e01:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c0020e09:	85 c0                	test   eax,eax
c0020e0b:	74 36                	je     c0020e43 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c0020e0d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020e10:	85 d2                	test   edx,edx
c0020e12:	74 2b                	je     c0020e3f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c0020e14:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c0020e1a:	31 f9                	xor    ecx,edi
c0020e1c:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c0020e22:	75 1b                	jne    c0020e3f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c0020e24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020e28:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c0020e2e:	75 0f                	jne    c0020e3f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c0020e30:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c0020e37:	39 f2                	cmp    edx,esi
c0020e39:	0f 84 20 01 00 00    	je     c0020f5f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c0020e3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e41:	eb c6                	jmp    c0020e09 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c0020e43:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020e47:	be ac e1 02 c0       	mov    esi,0xc002e1ac
c0020e4c:	b9 07 00 00 00       	mov    ecx,0x7
c0020e51:	fc                   	cld    
c0020e52:	31 d2                	xor    edx,edx
c0020e54:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020e56:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c0020e5d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0020e61:	b9 12 00 00 00       	mov    ecx,0x12
c0020e66:	83 ec 0c             	sub    esp,0xc
c0020e69:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020e6b:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c0020e73:	b9 0a 00 00 00       	mov    ecx,0xa
c0020e78:	f7 f1                	div    ecx
c0020e7a:	83 c0 30             	add    eax,0x30
c0020e7d:	83 c2 30             	add    edx,0x30
c0020e80:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0020e84:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c0020e88:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c0020e90:	31 d2                	xor    edx,edx
c0020e92:	f7 f1                	div    ecx
c0020e94:	83 c0 30             	add    eax,0x30
c0020e97:	83 c2 30             	add    edx,0x30
c0020e9a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0020e9e:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c0020ea2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020ea6:	50                   	push   eax
c0020ea7:	e8 ad ce fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0020eac:	83 c4 10             	add    esp,0x10
c0020eaf:	81 fb 01 06 00 00    	cmp    ebx,0x601
c0020eb5:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c0020ebc:	75 46                	jne    c0020f04 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c0020ebe:	83 ec 0c             	sub    esp,0xc
c0020ec1:	68 64 01 00 00       	push   0x164
c0020ec6:	e8 2c f4 fe ff       	call   c00102f7 <malloc>
c0020ecb:	89 c3                	mov    ebx,eax
c0020ecd:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ed0:	e8 3b 11 00 00       	call   c0022010 <SATABus::SATABus()>
c0020ed5:	58                   	pop    eax
c0020ed6:	5a                   	pop    edx
c0020ed7:	53                   	push   ebx
c0020ed8:	55                   	push   ebp
c0020ed9:	e8 a2 95 fe ff       	call   c000a480 <Device::addChild(Device*)>
c0020ede:	83 ec 1c             	sub    esp,0x1c
c0020ee1:	b9 09 00 00 00       	mov    ecx,0x9
c0020ee6:	89 e7                	mov    edi,esp
c0020ee8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020eea:	53                   	push   ebx
c0020eeb:	e8 d6 94 fe ff       	call   c000a3c6 <Device::preOpenPCI(PCIDeviceInfo)>
c0020ef0:	83 c4 30             	add    esp,0x30
c0020ef3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020ef5:	6a 00                	push   0x0
c0020ef7:	6a 00                	push   0x0
c0020ef9:	6a 00                	push   0x0
c0020efb:	53                   	push   ebx
c0020efc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020eff:	83 c4 10             	add    esp,0x10
c0020f02:	eb 5b                	jmp    c0020f5f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c0020f04:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0020f0a:	75 19                	jne    c0020f25 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c0020f0c:	83 ec 0c             	sub    esp,0xc
c0020f0f:	68 70 02 00 00       	push   0x270
c0020f14:	e8 de f3 fe ff       	call   c00102f7 <malloc>
c0020f19:	89 c3                	mov    ebx,eax
c0020f1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f1e:	e8 93 02 00 00       	call   c00211b6 <IDE::IDE()>
c0020f23:	eb b0                	jmp    c0020ed5 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c0020f25:	83 ec 0c             	sub    esp,0xc
c0020f28:	68 58 01 00 00       	push   0x158
c0020f2d:	e8 c5 f3 fe ff       	call   c00102f7 <malloc>
c0020f32:	89 c3                	mov    ebx,eax
c0020f34:	58                   	pop    eax
c0020f35:	5a                   	pop    edx
c0020f36:	68 92 e1 02 c0       	push   0xc002e192
c0020f3b:	53                   	push   ebx
c0020f3c:	e8 f3 97 fe ff       	call   c000a734 <DriverlessDevice::DriverlessDevice(char const*)>
c0020f41:	59                   	pop    ecx
c0020f42:	5f                   	pop    edi
c0020f43:	53                   	push   ebx
c0020f44:	55                   	push   ebp
c0020f45:	e8 36 95 fe ff       	call   c000a480 <Device::addChild(Device*)>
c0020f4a:	83 ec 1c             	sub    esp,0x1c
c0020f4d:	b9 09 00 00 00       	mov    ecx,0x9
c0020f52:	89 e7                	mov    edi,esp
c0020f54:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020f56:	53                   	push   ebx
c0020f57:	e8 6a 94 fe ff       	call   c000a3c6 <Device::preOpenPCI(PCIDeviceInfo)>
c0020f5c:	83 c4 30             	add    esp,0x30
c0020f5f:	81 c4 8c 00 00 00    	add    esp,0x8c
c0020f65:	5b                   	pop    ebx
c0020f66:	5e                   	pop    esi
c0020f67:	5f                   	pop    edi
c0020f68:	5d                   	pop    ebp
c0020f69:	c3                   	ret    

c0020f6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0020f6a:	55                   	push   ebp
c0020f6b:	57                   	push   edi
c0020f6c:	56                   	push   esi
c0020f6d:	53                   	push   ebx
c0020f6e:	83 ec 68             	sub    esp,0x68
c0020f71:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0020f75:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0020f7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020f80:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0020f87:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0020f8c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020f90:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0020f97:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c0020f9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0020fa0:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c0020fa5:	6a 0c                	push   0xc
c0020fa7:	57                   	push   edi
c0020fa8:	53                   	push   ebx
c0020fa9:	56                   	push   esi
c0020faa:	55                   	push   ebp
c0020fab:	e8 c6 f7 ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020fb0:	83 c4 20             	add    esp,0x20
c0020fb3:	57                   	push   edi
c0020fb4:	53                   	push   ebx
c0020fb5:	56                   	push   esi
c0020fb6:	55                   	push   ebp
c0020fb7:	e8 b0 f8 ff ff       	call   c002086c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020fbc:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0020fc1:	57                   	push   edi
c0020fc2:	53                   	push   ebx
c0020fc3:	56                   	push   esi
c0020fc4:	55                   	push   ebp
c0020fc5:	e8 38 f9 ff ff       	call   c0020902 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020fca:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0020fce:	83 c4 14             	add    esp,0x14
c0020fd1:	6a 3c                	push   0x3c
c0020fd3:	57                   	push   edi
c0020fd4:	53                   	push   ebx
c0020fd5:	56                   	push   esi
c0020fd6:	55                   	push   ebp
c0020fd7:	e8 9a f7 ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020fdc:	0f b6 c4             	movzx  eax,ah
c0020fdf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020fe3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020fe7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0020feb:	a1 08 61 03 c0       	mov    eax,ds:0xc0036108
c0020ff0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0020ff6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0020ffc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021000:	83 c4 20             	add    esp,0x20
c0021003:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0021008:	74 30                	je     c002103a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002100a:	31 c0                	xor    eax,eax
c002100c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0021010:	7e 28                	jle    c002103a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0021012:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002101a:	39 cb                	cmp    ebx,ecx
c002101c:	75 19                	jne    c0021037 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002101e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0021026:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002102a:	75 0b                	jne    c0021037 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002102c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0021033:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0021037:	40                   	inc    eax
c0021038:	eb d2                	jmp    c002100c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002103a:	31 d2                	xor    edx,edx
c002103c:	83 ec 0c             	sub    esp,0xc
c002103f:	57                   	push   edi
c0021040:	53                   	push   ebx
c0021041:	56                   	push   esi
c0021042:	52                   	push   edx
c0021043:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0021047:	55                   	push   ebp
c0021048:	e8 01 f9 ff ff       	call   c002094e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002104d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021051:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021055:	42                   	inc    edx
c0021056:	83 c4 20             	add    esp,0x20
c0021059:	83 fa 06             	cmp    edx,0x6
c002105c:	75 de                	jne    c002103c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002105e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021062:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021066:	c1 e2 08             	shl    edx,0x8
c0021069:	83 ec 0c             	sub    esp,0xc
c002106c:	0f b6 c4             	movzx  eax,ah
c002106f:	09 d0                	or     eax,edx
c0021071:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0021076:	6a 02                	push   0x2
c0021078:	57                   	push   edi
c0021079:	53                   	push   ebx
c002107a:	56                   	push   esi
c002107b:	55                   	push   ebp
c002107c:	e8 f5 f6 ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021081:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0021086:	83 c4 20             	add    esp,0x20
c0021089:	57                   	push   edi
c002108a:	53                   	push   ebx
c002108b:	56                   	push   esi
c002108c:	55                   	push   ebp
c002108d:	e8 24 f8 ff ff       	call   c00208b6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021092:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021096:	57                   	push   edi
c0021097:	53                   	push   ebx
c0021098:	56                   	push   esi
c0021099:	55                   	push   ebp
c002109a:	e8 81 f7 ff ff       	call   c0020820 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002109f:	b9 09 00 00 00       	mov    ecx,0x9
c00210a4:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00210a9:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00210ad:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00210b1:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00210b5:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00210b9:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c00210bd:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00210c1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00210c5:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00210c9:	83 ec 0c             	sub    esp,0xc
c00210cc:	fc                   	cld    
c00210cd:	89 e7                	mov    edi,esp
c00210cf:	8d 74 24 58          	lea    esi,[esp+0x58]
c00210d3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00210d5:	55                   	push   ebp
c00210d6:	e8 a9 fc ff ff       	call   c0020d84 <PCI::foundDevice(PCIDeviceInfo)>
c00210db:	81 c4 8c 00 00 00    	add    esp,0x8c
c00210e1:	5b                   	pop    ebx
c00210e2:	5e                   	pop    esi
c00210e3:	5f                   	pop    edi
c00210e4:	5d                   	pop    ebp
c00210e5:	c3                   	ret    

c00210e6 <PCI::checkDevice(unsigned char, unsigned char)>:
c00210e6:	55                   	push   ebp
c00210e7:	57                   	push   edi
c00210e8:	56                   	push   esi
c00210e9:	53                   	push   ebx
c00210ea:	83 ec 0c             	sub    esp,0xc
c00210ed:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00210f1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00210f6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00210fb:	6a 00                	push   0x0
c00210fd:	56                   	push   esi
c00210fe:	57                   	push   edi
c00210ff:	55                   	push   ebp
c0021100:	e8 1b f7 ff ff       	call   c0020820 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021105:	6a 00                	push   0x0
c0021107:	56                   	push   esi
c0021108:	57                   	push   edi
c0021109:	55                   	push   ebp
c002110a:	e8 5b fe ff ff       	call   c0020f6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002110f:	83 c4 20             	add    esp,0x20
c0021112:	6a 00                	push   0x0
c0021114:	56                   	push   esi
c0021115:	57                   	push   edi
c0021116:	55                   	push   ebp
c0021117:	e8 28 f7 ff ff       	call   c0020844 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002111c:	83 c4 10             	add    esp,0x10
c002111f:	a8 80                	test   al,0x80
c0021121:	74 2d                	je     c0021150 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c0021123:	bb 01 00 00 00       	mov    ebx,0x1
c0021128:	53                   	push   ebx
c0021129:	56                   	push   esi
c002112a:	57                   	push   edi
c002112b:	55                   	push   ebp
c002112c:	e8 ef f6 ff ff       	call   c0020820 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021131:	83 c4 10             	add    esp,0x10
c0021134:	0f b7 c0             	movzx  eax,ax
c0021137:	3d ff ff 00 00       	cmp    eax,0xffff
c002113c:	74 0c                	je     c002114a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002113e:	53                   	push   ebx
c002113f:	56                   	push   esi
c0021140:	57                   	push   edi
c0021141:	55                   	push   ebp
c0021142:	e8 23 fe ff ff       	call   c0020f6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021147:	83 c4 10             	add    esp,0x10
c002114a:	43                   	inc    ebx
c002114b:	83 fb 08             	cmp    ebx,0x8
c002114e:	75 d8                	jne    c0021128 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021150:	83 c4 0c             	add    esp,0xc
c0021153:	5b                   	pop    ebx
c0021154:	5e                   	pop    esi
c0021155:	5f                   	pop    edi
c0021156:	5d                   	pop    ebp
c0021157:	c3                   	ret    

c0021158 <PCI::detect()>:
c0021158:	56                   	push   esi
c0021159:	53                   	push   ebx
c002115a:	53                   	push   ebx
c002115b:	31 db                	xor    ebx,ebx
c002115d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021161:	6a 00                	push   0x0
c0021163:	6a 00                	push   0x0
c0021165:	6a 00                	push   0x0
c0021167:	56                   	push   esi
c0021168:	e8 d7 f6 ff ff       	call   c0020844 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002116d:	83 c4 10             	add    esp,0x10
c0021170:	a8 80                	test   al,0x80
c0021172:	75 21                	jne    c0021195 <PCI::detect()+0x3d>
c0021174:	51                   	push   ecx
c0021175:	51                   	push   ecx
c0021176:	6a 00                	push   0x0
c0021178:	56                   	push   esi
c0021179:	e8 e2 fb ff ff       	call   c0020d60 <PCI::checkBus(unsigned char)>
c002117e:	83 c4 10             	add    esp,0x10
c0021181:	eb 2a                	jmp    c00211ad <PCI::detect()+0x55>
c0021183:	52                   	push   edx
c0021184:	52                   	push   edx
c0021185:	53                   	push   ebx
c0021186:	43                   	inc    ebx
c0021187:	56                   	push   esi
c0021188:	e8 d3 fb ff ff       	call   c0020d60 <PCI::checkBus(unsigned char)>
c002118d:	83 c4 10             	add    esp,0x10
c0021190:	83 fb 08             	cmp    ebx,0x8
c0021193:	74 18                	je     c00211ad <PCI::detect()+0x55>
c0021195:	53                   	push   ebx
c0021196:	6a 00                	push   0x0
c0021198:	6a 00                	push   0x0
c002119a:	56                   	push   esi
c002119b:	e8 80 f6 ff ff       	call   c0020820 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00211a0:	83 c4 10             	add    esp,0x10
c00211a3:	0f b7 c0             	movzx  eax,ax
c00211a6:	3d ff ff 00 00       	cmp    eax,0xffff
c00211ab:	74 d6                	je     c0021183 <PCI::detect()+0x2b>
c00211ad:	58                   	pop    eax
c00211ae:	5b                   	pop    ebx
c00211af:	5e                   	pop    esi
c00211b0:	c3                   	ret    
c00211b1:	90                   	nop

c00211b2 <IDE::close(int, int, void*)>:
c00211b2:	83 c8 ff             	or     eax,0xffffffff
c00211b5:	c3                   	ret    

c00211b6 <IDE::IDE()>:
c00211b6:	83 ec 0c             	sub    esp,0xc
c00211b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211bd:	83 ec 08             	sub    esp,0x8
c00211c0:	68 3c e2 02 c0       	push   0xc002e23c
c00211c5:	50                   	push   eax
c00211c6:	e8 0d 96 fe ff       	call   c000a7d8 <HardDiskController::HardDiskController(char const*)>
c00211cb:	83 c4 10             	add    esp,0x10
c00211ce:	ba 68 e3 02 c0       	mov    edx,0xc002e368
c00211d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211d7:	89 10                	mov    DWORD PTR [eax],edx
c00211d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211dd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00211e4:	90                   	nop
c00211e5:	83 c4 0c             	add    esp,0xc
c00211e8:	c3                   	ret    
c00211e9:	90                   	nop

c00211ea <IDE::prepareInterrupt(unsigned char)>:
c00211ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00211ef:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00211f3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00211fb:	c3                   	ret    

c00211fc <selectDrive(unsigned char, unsigned char)>:
c00211fc:	c3                   	ret    
c00211fd:	90                   	nop

c00211fe <IDE::getBase(unsigned char)>:
c00211fe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021203:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021207:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002120f:	c3                   	ret    

c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021210:	55                   	push   ebp
c0021211:	57                   	push   edi
c0021212:	56                   	push   esi
c0021213:	53                   	push   ebx
c0021214:	83 ec 1c             	sub    esp,0x1c
c0021217:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002121b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002121f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021222:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021226:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002122a:	80 f9 03             	cmp    cl,0x3
c002122d:	77 4f                	ja     c002127e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002122f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021233:	0f b6 fa             	movzx  edi,dl
c0021236:	0f b6 db             	movzx  ebx,bl
c0021239:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002123c:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c0021241:	80 ca 80             	or     dl,0x80
c0021244:	52                   	push   edx
c0021245:	6a 0c                	push   0xc
c0021247:	57                   	push   edi
c0021248:	56                   	push   esi
c0021249:	e8 c2 ff ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002124e:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0021253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021257:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002125b:	ee                   	out    dx,al
c002125c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0021261:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0021265:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021269:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002126d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021275:	83 c4 2c             	add    esp,0x2c
c0021278:	5b                   	pop    ebx
c0021279:	5e                   	pop    esi
c002127a:	5f                   	pop    edi
c002127b:	5d                   	pop    ebp
c002127c:	eb 92                	jmp    c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002127e:	0f b6 cb             	movzx  ecx,bl
c0021281:	83 f9 07             	cmp    ecx,0x7
c0021284:	77 12                	ja     c0021298 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c0021286:	0f b6 d2             	movzx  edx,dl
c0021289:	0f b6 db             	movzx  ebx,bl
c002128c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c0021294:	01 da                	add    edx,ebx
c0021296:	eb 2f                	jmp    c00212c7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021298:	83 f9 0d             	cmp    ecx,0xd
c002129b:	77 13                	ja     c00212b0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002129d:	0f b6 d2             	movzx  edx,dl
c00212a0:	0f b6 db             	movzx  ebx,bl
c00212a3:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c00212aa:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00212ae:	eb 17                	jmp    c00212c7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00212b0:	83 f9 15             	cmp    ecx,0x15
c00212b3:	77 13                	ja     c00212c8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c00212b5:	0f b6 d2             	movzx  edx,dl
c00212b8:	0f b6 db             	movzx  ebx,bl
c00212bb:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c00212c3:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00212c7:	ee                   	out    dx,al
c00212c8:	83 c4 1c             	add    esp,0x1c
c00212cb:	5b                   	pop    ebx
c00212cc:	5e                   	pop    esi
c00212cd:	5f                   	pop    edi
c00212ce:	5d                   	pop    ebp
c00212cf:	c3                   	ret    

c00212d0 <IDE::read(unsigned char, unsigned char)>:
c00212d0:	55                   	push   ebp
c00212d1:	57                   	push   edi
c00212d2:	56                   	push   esi
c00212d3:	53                   	push   ebx
c00212d4:	83 ec 1c             	sub    esp,0x1c
c00212d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00212db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00212df:	8d 43 f8             	lea    eax,[ebx-0x8]
c00212e2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00212e6:	3c 03                	cmp    al,0x3
c00212e8:	77 40                	ja     c002132a <IDE::read(unsigned char, unsigned char)+0x5a>
c00212ea:	0f b6 f9             	movzx  edi,cl
c00212ed:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c00212f0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00212f5:	0c 80                	or     al,0x80
c00212f7:	50                   	push   eax
c00212f8:	6a 0c                	push   0xc
c00212fa:	57                   	push   edi
c00212fb:	56                   	push   esi
c00212fc:	e8 0f ff ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021301:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c0021306:	0f b6 d3             	movzx  edx,bl
c0021309:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002130d:	ec                   	in     al,dx
c002130e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021312:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c0021317:	52                   	push   edx
c0021318:	6a 0c                	push   0xc
c002131a:	57                   	push   edi
c002131b:	56                   	push   esi
c002131c:	e8 ef fe ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021321:	83 c4 20             	add    esp,0x20
c0021324:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021328:	eb 4c                	jmp    c0021376 <IDE::read(unsigned char, unsigned char)+0xa6>
c002132a:	0f b6 d3             	movzx  edx,bl
c002132d:	83 fa 07             	cmp    edx,0x7
c0021330:	77 12                	ja     c0021344 <IDE::read(unsigned char, unsigned char)+0x74>
c0021332:	0f b6 c9             	movzx  ecx,cl
c0021335:	0f b6 d3             	movzx  edx,bl
c0021338:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c0021340:	01 c2                	add    edx,eax
c0021342:	eb 31                	jmp    c0021375 <IDE::read(unsigned char, unsigned char)+0xa5>
c0021344:	83 fa 0d             	cmp    edx,0xd
c0021347:	77 13                	ja     c002135c <IDE::read(unsigned char, unsigned char)+0x8c>
c0021349:	0f b6 c9             	movzx  ecx,cl
c002134c:	0f b6 d3             	movzx  edx,bl
c002134f:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c0021356:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002135a:	eb 19                	jmp    c0021375 <IDE::read(unsigned char, unsigned char)+0xa5>
c002135c:	31 c0                	xor    eax,eax
c002135e:	83 fa 15             	cmp    edx,0x15
c0021361:	77 13                	ja     c0021376 <IDE::read(unsigned char, unsigned char)+0xa6>
c0021363:	0f b6 c9             	movzx  ecx,cl
c0021366:	0f b6 d3             	movzx  edx,bl
c0021369:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c0021371:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0021375:	ec                   	in     al,dx
c0021376:	83 c4 1c             	add    esp,0x1c
c0021379:	5b                   	pop    ebx
c002137a:	5e                   	pop    esi
c002137b:	5f                   	pop    edi
c002137c:	5d                   	pop    ebp
c002137d:	c3                   	ret    

c002137e <IDE::waitInterrupt(unsigned char)>:
c002137e:	55                   	push   ebp
c002137f:	57                   	push   edi
c0021380:	56                   	push   esi
c0021381:	53                   	push   ebx
c0021382:	31 db                	xor    ebx,ebx
c0021384:	83 ec 0c             	sub    esp,0xc
c0021387:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002138b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0021390:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0021398:	89 e8                	mov    eax,ebp
c002139a:	84 c0                	test   al,al
c002139c:	75 31                	jne    c00213cf <IDE::waitInterrupt(unsigned char)+0x51>
c002139e:	52                   	push   edx
c002139f:	6a 0c                	push   0xc
c00213a1:	56                   	push   esi
c00213a2:	57                   	push   edi
c00213a3:	e8 28 ff ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c00213a8:	83 c4 10             	add    esp,0x10
c00213ab:	a8 01                	test   al,0x1
c00213ad:	75 28                	jne    c00213d7 <IDE::waitInterrupt(unsigned char)+0x59>
c00213af:	f6 c3 04             	test   bl,0x4
c00213b2:	75 13                	jne    c00213c7 <IDE::waitInterrupt(unsigned char)+0x49>
c00213b4:	83 fb 32             	cmp    ebx,0x32
c00213b7:	7e 0e                	jle    c00213c7 <IDE::waitInterrupt(unsigned char)+0x49>
c00213b9:	50                   	push   eax
c00213ba:	50                   	push   eax
c00213bb:	6a 00                	push   0x0
c00213bd:	6a 64                	push   0x64
c00213bf:	e8 14 61 ff ff       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c00213c4:	83 c4 10             	add    esp,0x10
c00213c7:	83 fb 3c             	cmp    ebx,0x3c
c00213ca:	74 0b                	je     c00213d7 <IDE::waitInterrupt(unsigned char)+0x59>
c00213cc:	43                   	inc    ebx
c00213cd:	eb c1                	jmp    c0021390 <IDE::waitInterrupt(unsigned char)+0x12>
c00213cf:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00213d7:	83 c4 0c             	add    esp,0xc
c00213da:	89 e8                	mov    eax,ebp
c00213dc:	5b                   	pop    ebx
c00213dd:	5e                   	pop    esi
c00213de:	5f                   	pop    edi
c00213df:	5d                   	pop    ebp
c00213e0:	c3                   	ret    

c00213e1 <ideChannel0IRQHandler(regs*, void*)>:
c00213e1:	83 ec 10             	sub    esp,0x10
c00213e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00213e8:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00213ef:	6a 07                	push   0x7
c00213f1:	6a 00                	push   0x0
c00213f3:	50                   	push   eax
c00213f4:	e8 d7 fe ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c00213f9:	83 c4 1c             	add    esp,0x1c
c00213fc:	c3                   	ret    

c00213fd <ideChannel1IRQHandler(regs*, void*)>:
c00213fd:	83 ec 10             	sub    esp,0x10
c0021400:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021404:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002140b:	6a 07                	push   0x7
c002140d:	6a 01                	push   0x1
c002140f:	50                   	push   eax
c0021410:	e8 bb fe ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021415:	83 c4 1c             	add    esp,0x1c
c0021418:	c3                   	ret    
c0021419:	90                   	nop

c002141a <IDE::enableIRQs(unsigned char, bool)>:
c002141a:	57                   	push   edi
c002141b:	b8 02 00 00 00       	mov    eax,0x2
c0021420:	56                   	push   esi
c0021421:	53                   	push   ebx
c0021422:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021426:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002142a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002142f:	74 02                	je     c0021433 <IDE::enableIRQs(unsigned char, bool)+0x19>
c0021431:	31 c0                	xor    eax,eax
c0021433:	0f b6 db             	movzx  ebx,bl
c0021436:	bf 04 00 00 00       	mov    edi,0x4
c002143b:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c0021442:	50                   	push   eax
c0021443:	6a 0c                	push   0xc
c0021445:	53                   	push   ebx
c0021446:	56                   	push   esi
c0021447:	e8 c4 fd ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002144c:	83 c4 10             	add    esp,0x10
c002144f:	50                   	push   eax
c0021450:	6a 0c                	push   0xc
c0021452:	53                   	push   ebx
c0021453:	56                   	push   esi
c0021454:	e8 77 fe ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021459:	83 c4 10             	add    esp,0x10
c002145c:	4f                   	dec    edi
c002145d:	75 f0                	jne    c002144f <IDE::enableIRQs(unsigned char, bool)+0x35>
c002145f:	5b                   	pop    ebx
c0021460:	5e                   	pop    esi
c0021461:	5f                   	pop    edi
c0021462:	c3                   	ret    
c0021463:	90                   	nop

c0021464 <IDE::open(int, int, void*)>:
c0021464:	57                   	push   edi
c0021465:	56                   	push   esi
c0021466:	53                   	push   ebx
c0021467:	83 ec 10             	sub    esp,0x10
c002146a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002146e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0021477:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0021480:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0021487:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002148e:	0f 85 84 02 00 00    	jne    c0021718 <IDE::open(int, int, void*)+0x2b4>
c0021494:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002149a:	a8 70                	test   al,0x70
c002149c:	75 44                	jne    c00214e2 <IDE::open(int, int, void*)+0x7e>
c002149e:	ba 20 84 00 00       	mov    edx,0x8420
c00214a3:	0f a3 c2             	bt     edx,eax
c00214a6:	73 3a                	jae    c00214e2 <IDE::open(int, int, void*)+0x7e>
c00214a8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00214ae:	83 ec 0c             	sub    esp,0xc
c00214b1:	83 e0 fc             	and    eax,0xfffffffc
c00214b4:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00214bb:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00214c1:	83 e0 fc             	and    eax,0xfffffffc
c00214c4:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00214cb:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00214d1:	83 e0 fc             	and    eax,0xfffffffc
c00214d4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00214db:	68 4a a9 02 c0       	push   0xc002a94a
c00214e0:	eb 60                	jmp    c0021542 <IDE::open(int, int, void*)+0xde>
c00214e2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00214ec:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00214f6:	be 64 00 00 00       	mov    esi,0x64
c00214fb:	57                   	push   edi
c00214fc:	57                   	push   edi
c00214fd:	68 54 e2 02 c0       	push   0xc002e254
c0021502:	8d 7c 24 12          	lea    edi,[esp+0x12]
c0021506:	57                   	push   edi
c0021507:	e8 34 f1 fd ff       	call   c0000640 <strcpy>
c002150c:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c0021513:	31 d2                	xor    edx,edx
c0021515:	89 c8                	mov    eax,ecx
c0021517:	89 3c 24             	mov    DWORD PTR [esp],edi
c002151a:	f7 f6                	div    esi
c002151c:	be 0a 00 00 00       	mov    esi,0xa
c0021521:	83 c0 30             	add    eax,0x30
c0021524:	31 d2                	xor    edx,edx
c0021526:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002152a:	89 c8                	mov    eax,ecx
c002152c:	f7 f6                	div    esi
c002152e:	89 d1                	mov    ecx,edx
c0021530:	31 d2                	xor    edx,edx
c0021532:	83 c1 30             	add    ecx,0x30
c0021535:	f7 f6                	div    esi
c0021537:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c002153b:	83 c2 30             	add    edx,0x30
c002153e:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c0021542:	e8 12 c8 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021547:	bf f8 0c 00 00       	mov    edi,0xcf8
c002154c:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0021553:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002155a:	c1 e1 10             	shl    ecx,0x10
c002155d:	c1 e0 0b             	shl    eax,0xb
c0021560:	83 c4 10             	add    esp,0x10
c0021563:	09 c1                	or     ecx,eax
c0021565:	89 fa                	mov    edx,edi
c0021567:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002156e:	c1 e0 08             	shl    eax,0x8
c0021571:	09 c1                	or     ecx,eax
c0021573:	89 c8                	mov    eax,ecx
c0021575:	0d 08 00 00 80       	or     eax,0x80000008
c002157a:	ef                   	out    dx,eax
c002157b:	be fc 0c 00 00       	mov    esi,0xcfc
c0021580:	89 f2                	mov    edx,esi
c0021582:	ed                   	in     eax,dx
c0021583:	c1 e8 10             	shr    eax,0x10
c0021586:	3d ff ff 00 00       	cmp    eax,0xffff
c002158b:	0f 84 e5 00 00 00    	je     c0021676 <IDE::open(int, int, void*)+0x212>
c0021591:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0021597:	89 fa                	mov    edx,edi
c0021599:	89 c8                	mov    eax,ecx
c002159b:	ef                   	out    dx,eax
c002159c:	b0 fe                	mov    al,0xfe
c002159e:	89 f2                	mov    edx,esi
c00215a0:	ee                   	out    dx,al
c00215a1:	89 c8                	mov    eax,ecx
c00215a3:	89 fa                	mov    edx,edi
c00215a5:	ef                   	out    dx,eax
c00215a6:	89 f2                	mov    edx,esi
c00215a8:	ed                   	in     eax,dx
c00215a9:	3c fe                	cmp    al,0xfe
c00215ab:	0f 85 85 00 00 00    	jne    c0021636 <IDE::open(int, int, void*)+0x1d2>
c00215b1:	83 ec 0c             	sub    esp,0xc
c00215b4:	68 80 a9 02 c0       	push   0xc002a980
c00215b9:	e8 9b c7 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c00215be:	c7 04 24 5a e2 02 c0 	mov    DWORD PTR [esp],0xc002e25a
c00215c5:	e8 b2 59 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00215ca:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00215d4:	c7 04 24 68 ac 02 c0 	mov    DWORD PTR [esp],0xc002ac68
c00215db:	e8 79 c7 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c00215e0:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00215e7:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00215ee:	c1 e1 10             	shl    ecx,0x10
c00215f1:	c1 e0 08             	shl    eax,0x8
c00215f4:	89 fa                	mov    edx,edi
c00215f6:	09 c1                	or     ecx,eax
c00215f8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00215ff:	c1 e0 0b             	shl    eax,0xb
c0021602:	09 c1                	or     ecx,eax
c0021604:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002160a:	89 c8                	mov    eax,ecx
c002160c:	ef                   	out    dx,eax
c002160d:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0021613:	89 f2                	mov    edx,esi
c0021615:	ee                   	out    dx,al
c0021616:	89 c8                	mov    eax,ecx
c0021618:	89 fa                	mov    edx,edi
c002161a:	ef                   	out    dx,eax
c002161b:	89 f2                	mov    edx,esi
c002161d:	ed                   	in     eax,dx
c002161e:	0f b6 c0             	movzx  eax,al
c0021621:	83 c4 10             	add    esp,0x10
c0021624:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002162a:	74 5a                	je     c0021686 <IDE::open(int, int, void*)+0x222>
c002162c:	83 ec 0c             	sub    esp,0xc
c002162f:	68 6f e2 02 c0       	push   0xc002e26f
c0021634:	eb 48                	jmp    c002167e <IDE::open(int, int, void*)+0x21a>
c0021636:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002163f:	75 2b                	jne    c002166c <IDE::open(int, int, void*)+0x208>
c0021641:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c0021648:	3d 80 00 00 00       	cmp    eax,0x80
c002164d:	74 07                	je     c0021656 <IDE::open(int, int, void*)+0x1f2>
c002164f:	3d 8a 00 00 00       	cmp    eax,0x8a
c0021654:	75 16                	jne    c002166c <IDE::open(int, int, void*)+0x208>
c0021656:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002165d:	83 ec 0c             	sub    esp,0xc
c0021660:	68 fe a1 02 c0       	push   0xc002a1fe
c0021665:	e8 ef c6 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c002166a:	eb 17                	jmp    c0021683 <IDE::open(int, int, void*)+0x21f>
c002166c:	83 ec 0c             	sub    esp,0xc
c002166f:	68 77 e2 02 c0       	push   0xc002e277
c0021674:	eb 08                	jmp    c002167e <IDE::open(int, int, void*)+0x21a>
c0021676:	83 ec 0c             	sub    esp,0xc
c0021679:	68 a8 e2 02 c0       	push   0xc002e2a8
c002167e:	e8 c9 f0 fe ff       	call   c001074c <KePanic(char const*)>
c0021683:	83 c4 10             	add    esp,0x10
c0021686:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002168d:	0f 84 bf 00 00 00    	je     c0021752 <IDE::open(int, int, void*)+0x2ee>
c0021693:	83 ec 0c             	sub    esp,0xc
c0021696:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002169c:	83 e0 fc             	and    eax,0xfffffffc
c002169f:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00216a6:	83 c0 08             	add    eax,0x8
c00216a9:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00216b0:	68 d2 e2 02 c0       	push   0xc002e2d2
c00216b5:	e8 c2 58 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00216ba:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00216c1:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00216c8:	50                   	push   eax
c00216c9:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00216d0:	50                   	push   eax
c00216d1:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00216d8:	50                   	push   eax
c00216d9:	ff 35 a0 8d 03 c0    	push   DWORD PTR ds:0xc0038da0
c00216df:	e8 92 f0 ff ff       	call   c0020776 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00216e4:	83 c4 18             	add    esp,0x18
c00216e7:	83 c8 07             	or     eax,0x7
c00216ea:	0f b7 c0             	movzx  eax,ax
c00216ed:	50                   	push   eax
c00216ee:	6a 04                	push   0x4
c00216f0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00216f7:	50                   	push   eax
c00216f8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00216ff:	50                   	push   eax
c0021700:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0021707:	50                   	push   eax
c0021708:	ff 35 a0 8d 03 c0    	push   DWORD PTR ds:0xc0038da0
c002170e:	e8 9f f2 ff ff       	call   c00209b2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c0021713:	83 c4 20             	add    esp,0x20
c0021716:	eb 3a                	jmp    c0021752 <IDE::open(int, int, void*)+0x2ee>
c0021718:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002171e:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021725:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002172c:	05 06 02 00 00       	add    eax,0x206
c0021731:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021738:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002173f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0021746:	05 06 02 00 00       	add    eax,0x206
c002174b:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0021752:	83 ec 0c             	sub    esp,0xc
c0021755:	68 07 b2 02 c0       	push   0xc002b207
c002175a:	e8 fa c5 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c002175f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0021765:	83 c4 10             	add    esp,0x10
c0021768:	89 c2                	mov    edx,eax
c002176a:	83 e2 0f             	and    edx,0xf
c002176d:	83 fa 08             	cmp    edx,0x8
c0021770:	75 0a                	jne    c002177c <IDE::open(int, int, void*)+0x318>
c0021772:	83 e8 02             	sub    eax,0x2
c0021775:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002177c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0021782:	89 c2                	mov    edx,eax
c0021784:	83 e2 0f             	and    edx,0xf
c0021787:	83 fa 08             	cmp    edx,0x8
c002178a:	75 0a                	jne    c0021796 <IDE::open(int, int, void*)+0x332>
c002178c:	83 e8 02             	sub    eax,0x2
c002178f:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0021796:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002179d:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00217a4:	89 d0                	mov    eax,edx
c00217a6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00217a9:	8d 7a 01             	lea    edi,[edx+0x1]
c00217ac:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00217b0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00217b4:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c00217b8:	83 e1 3f             	and    ecx,0x3f
c00217bb:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c00217bf:	89 f9                	mov    ecx,edi
c00217c1:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00217c8:	0f b6 c9             	movzx  ecx,cl
c00217cb:	8d 78 02             	lea    edi,[eax+0x2]
c00217ce:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00217d1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00217d5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00217d9:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c00217dd:	83 e2 3f             	and    edx,0x3f
c00217e0:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c00217e4:	89 f9                	mov    ecx,edi
c00217e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00217ec:	0f b6 d1             	movzx  edx,cl
c00217ef:	8d 78 03             	lea    edi,[eax+0x3]
c00217f2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00217f5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00217f9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00217fd:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c0021801:	83 e1 3f             	and    ecx,0x3f
c0021804:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c0021808:	89 fa                	mov    edx,edi
c002180a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0021810:	0f b6 ca             	movzx  ecx,dl
c0021813:	8d 78 04             	lea    edi,[eax+0x4]
c0021816:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021819:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002181d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0021821:	89 fa                	mov    edx,edi
c0021823:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0021829:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002182d:	83 e2 3f             	and    edx,0x3f
c0021830:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c0021834:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002183b:	66 85 f6             	test   si,si
c002183e:	74 24                	je     c0021864 <IDE::open(int, int, void*)+0x400>
c0021840:	89 f9                	mov    ecx,edi
c0021842:	83 c0 05             	add    eax,0x5
c0021845:	0f b6 d1             	movzx  edx,cl
c0021848:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002184b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002184f:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0021853:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0021859:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002185d:	83 e0 3f             	and    eax,0x3f
c0021860:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c0021864:	83 ec 0c             	sub    esp,0xc
c0021867:	68 40 a7 02 c0       	push   0xc002a740
c002186c:	e8 e8 c4 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021871:	58                   	pop    eax
c0021872:	5a                   	pop    edx
c0021873:	6a 00                	push   0x0
c0021875:	53                   	push   ebx
c0021876:	e8 6f f9 ff ff       	call   c00211ea <IDE::prepareInterrupt(unsigned char)>
c002187b:	59                   	pop    ecx
c002187c:	5e                   	pop    esi
c002187d:	6a 01                	push   0x1
c002187f:	53                   	push   ebx
c0021880:	e8 65 f9 ff ff       	call   c00211ea <IDE::prepareInterrupt(unsigned char)>
c0021885:	c7 04 24 8c cb 02 c0 	mov    DWORD PTR [esp],0xc002cb8c
c002188c:	e8 c8 c4 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021891:	83 c4 0c             	add    esp,0xc
c0021894:	6a 00                	push   0x0
c0021896:	6a 00                	push   0x0
c0021898:	53                   	push   ebx
c0021899:	e8 7c fb ff ff       	call   c002141a <IDE::enableIRQs(unsigned char, bool)>
c002189e:	83 c4 0c             	add    esp,0xc
c00218a1:	6a 00                	push   0x0
c00218a3:	6a 01                	push   0x1
c00218a5:	53                   	push   ebx
c00218a6:	e8 6f fb ff ff       	call   c002141a <IDE::enableIRQs(unsigned char, bool)>
c00218ab:	c7 04 24 ea e2 02 c0 	mov    DWORD PTR [esp],0xc002e2ea
c00218b2:	e8 a2 c4 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c00218b7:	83 c4 10             	add    esp,0x10
c00218ba:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00218c1:	74 3c                	je     c00218ff <IDE::open(int, int, void*)+0x49b>
c00218c3:	83 ec 0c             	sub    esp,0xc
c00218c6:	53                   	push   ebx
c00218c7:	6a 01                	push   0x1
c00218c9:	68 e1 13 02 c0       	push   0xc00213e1
c00218ce:	6a 0e                	push   0xe
c00218d0:	53                   	push   ebx
c00218d1:	e8 56 8b fe ff       	call   c000a42c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00218d6:	83 c4 14             	add    esp,0x14
c00218d9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00218df:	53                   	push   ebx
c00218e0:	6a 01                	push   0x1
c00218e2:	68 fd 13 02 c0       	push   0xc00213fd
c00218e7:	6a 0f                	push   0xf
c00218e9:	53                   	push   ebx
c00218ea:	e8 3d 8b fe ff       	call   c000a42c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00218ef:	83 c4 14             	add    esp,0x14
c00218f2:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00218f8:	68 6e ae 02 c0       	push   0xc002ae6e
c00218fd:	eb 40                	jmp    c002193f <IDE::open(int, int, void*)+0x4db>
c00218ff:	83 ec 0c             	sub    esp,0xc
c0021902:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002190c:	53                   	push   ebx
c002190d:	6a 00                	push   0x0
c002190f:	68 e1 13 02 c0       	push   0xc00213e1
c0021914:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002191a:	53                   	push   ebx
c002191b:	e8 0c 8b fe ff       	call   c000a42c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021920:	83 c4 14             	add    esp,0x14
c0021923:	53                   	push   ebx
c0021924:	6a 00                	push   0x0
c0021926:	68 fd 13 02 c0       	push   0xc00213fd
c002192b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0021931:	53                   	push   ebx
c0021932:	e8 f5 8a fe ff       	call   c000a42c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021937:	83 c4 14             	add    esp,0x14
c002193a:	68 8e bb 02 c0       	push   0xc002bb8e
c002193f:	e8 15 c4 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021944:	83 c4 10             	add    esp,0x10
c0021947:	83 ec 0c             	sub    esp,0xc
c002194a:	68 ec e2 02 c0       	push   0xc002e2ec
c002194f:	e8 05 c4 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021954:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021956:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021959:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002195c:	c7 04 24 01 c0 02 c0 	mov    DWORD PTR [esp],0xc002c001
c0021963:	e8 f1 c3 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021968:	83 c4 0c             	add    esp,0xc
c002196b:	6a 07                	push   0x7
c002196d:	6a 00                	push   0x0
c002196f:	53                   	push   ebx
c0021970:	e8 5b f9 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021975:	83 c4 0c             	add    esp,0xc
c0021978:	6a 07                	push   0x7
c002197a:	6a 01                	push   0x1
c002197c:	53                   	push   ebx
c002197d:	e8 4e f9 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021982:	c7 04 24 98 b8 02 c0 	mov    DWORD PTR [esp],0xc002b898
c0021989:	e8 cb c3 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c002198e:	83 c4 0c             	add    esp,0xc
c0021991:	6a 01                	push   0x1
c0021993:	6a 00                	push   0x0
c0021995:	53                   	push   ebx
c0021996:	e8 7f fa ff ff       	call   c002141a <IDE::enableIRQs(unsigned char, bool)>
c002199b:	83 c4 0c             	add    esp,0xc
c002199e:	6a 01                	push   0x1
c00219a0:	6a 01                	push   0x1
c00219a2:	53                   	push   ebx
c00219a3:	e8 72 fa ff ff       	call   c002141a <IDE::enableIRQs(unsigned char, bool)>
c00219a8:	c7 04 24 ef e2 02 c0 	mov    DWORD PTR [esp],0xc002e2ef
c00219af:	e8 a5 c3 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c00219b4:	83 c4 20             	add    esp,0x20
c00219b7:	31 c0                	xor    eax,eax
c00219b9:	5b                   	pop    ebx
c00219ba:	5e                   	pop    esi
c00219bb:	5f                   	pop    edi
c00219bc:	c3                   	ret    
c00219bd:	90                   	nop

c00219be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00219be:	55                   	push   ebp
c00219bf:	57                   	push   edi
c00219c0:	56                   	push   esi
c00219c1:	53                   	push   ebx
c00219c2:	83 ec 1c             	sub    esp,0x1c
c00219c5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00219c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00219cd:	8d 42 f8             	lea    eax,[edx-0x8]
c00219d0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00219d4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00219d8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00219dc:	3c 03                	cmp    al,0x3
c00219de:	77 5a                	ja     c0021a3a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c00219e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00219e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00219e8:	0f b6 db             	movzx  ebx,bl
c00219eb:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00219ee:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00219f3:	0c 80                	or     al,0x80
c00219f5:	50                   	push   eax
c00219f6:	6a 0c                	push   0xc
c00219f8:	53                   	push   ebx
c00219f9:	56                   	push   esi
c00219fa:	e8 11 f8 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219ff:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c0021a04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021a08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021a0c:	0f b6 d2             	movzx  edx,dl
c0021a0f:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c0021a13:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0021a15:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0021a1a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0021a1e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021a22:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021a26:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021a2e:	83 c4 2c             	add    esp,0x2c
c0021a31:	5b                   	pop    ebx
c0021a32:	5e                   	pop    esi
c0021a33:	5f                   	pop    edi
c0021a34:	5d                   	pop    ebp
c0021a35:	e9 d6 f7 ff ff       	jmp    c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021a3a:	0f b6 c2             	movzx  eax,dl
c0021a3d:	83 f8 07             	cmp    eax,0x7
c0021a40:	77 12                	ja     c0021a54 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c0021a42:	0f b6 c2             	movzx  eax,dl
c0021a45:	0f b6 db             	movzx  ebx,bl
c0021a48:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c0021a50:	01 c2                	add    edx,eax
c0021a52:	eb 2f                	jmp    c0021a83 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c0021a54:	83 f8 0d             	cmp    eax,0xd
c0021a57:	77 13                	ja     c0021a6c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c0021a59:	0f b6 db             	movzx  ebx,bl
c0021a5c:	0f b6 d2             	movzx  edx,dl
c0021a5f:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c0021a66:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0021a6a:	eb 17                	jmp    c0021a83 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c0021a6c:	83 f8 15             	cmp    eax,0x15
c0021a6f:	77 14                	ja     c0021a85 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c0021a71:	0f b6 db             	movzx  ebx,bl
c0021a74:	0f b6 d2             	movzx  edx,dl
c0021a77:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c0021a7f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0021a83:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0021a85:	83 c4 1c             	add    esp,0x1c
c0021a88:	5b                   	pop    ebx
c0021a89:	5e                   	pop    esi
c0021a8a:	5f                   	pop    edi
c0021a8b:	5d                   	pop    ebp
c0021a8c:	c3                   	ret    
c0021a8d:	90                   	nop

c0021a8e <IDE::detect()>:
c0021a8e:	55                   	push   ebp
c0021a8f:	57                   	push   edi
c0021a90:	56                   	push   esi
c0021a91:	53                   	push   ebx
c0021a92:	81 ec 28 02 00 00    	sub    esp,0x228
c0021a98:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c0021a9f:	68 f1 e2 02 c0       	push   0xc002e2f1
c0021aa4:	e8 b0 c2 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021aa9:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c0021aaf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0021ab3:	83 c4 10             	add    esp,0x10
c0021ab6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0021abb:	0f 85 2f 04 00 00    	jne    c0021ef0 <IDE::detect()+0x462>
c0021ac1:	83 ec 0c             	sub    esp,0xc
c0021ac4:	31 f6                	xor    esi,esi
c0021ac6:	68 f4 e2 02 c0       	push   0xc002e2f4
c0021acb:	31 ff                	xor    edi,edi
c0021acd:	e8 87 c2 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021ad2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0021ad9:	83 c4 10             	add    esp,0x10
c0021adc:	83 ec 0c             	sub    esp,0xc
c0021adf:	68 f7 e2 02 c0       	push   0xc002e2f7
c0021ae4:	e8 70 c2 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021ae9:	83 c4 10             	add    esp,0x10
c0021aec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0021af3:	83 ec 0c             	sub    esp,0xc
c0021af6:	31 ed                	xor    ebp,ebp
c0021af8:	68 fa e2 02 c0       	push   0xc002e2fa
c0021afd:	e8 57 c2 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021b02:	89 f8                	mov    eax,edi
c0021b04:	c1 e0 06             	shl    eax,0x6
c0021b07:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0021b0f:	c7 04 24 fd e2 02 c0 	mov    DWORD PTR [esp],0xc002e2fd
c0021b16:	e8 3e c2 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021b1b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021b1f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0021b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b27:	c1 e0 04             	shl    eax,0x4
c0021b2a:	83 c8 a0             	or     eax,0xffffffa0
c0021b2d:	0f b6 c0             	movzx  eax,al
c0021b30:	50                   	push   eax
c0021b31:	6a 06                	push   0x6
c0021b33:	56                   	push   esi
c0021b34:	53                   	push   ebx
c0021b35:	e8 d6 f6 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b3a:	83 c4 1c             	add    esp,0x1c
c0021b3d:	6a 0c                	push   0xc
c0021b3f:	56                   	push   esi
c0021b40:	53                   	push   ebx
c0021b41:	e8 8a f7 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021b46:	83 c4 0c             	add    esp,0xc
c0021b49:	6a 0c                	push   0xc
c0021b4b:	56                   	push   esi
c0021b4c:	53                   	push   ebx
c0021b4d:	e8 7e f7 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021b52:	83 c4 0c             	add    esp,0xc
c0021b55:	6a 0c                	push   0xc
c0021b57:	56                   	push   esi
c0021b58:	53                   	push   ebx
c0021b59:	e8 72 f7 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021b5e:	83 c4 0c             	add    esp,0xc
c0021b61:	6a 0c                	push   0xc
c0021b63:	56                   	push   esi
c0021b64:	53                   	push   ebx
c0021b65:	e8 66 f7 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021b6a:	c7 04 24 00 e3 02 c0 	mov    DWORD PTR [esp],0xc002e300
c0021b71:	e8 e3 c1 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021b76:	68 ec 00 00 00       	push   0xec
c0021b7b:	6a 07                	push   0x7
c0021b7d:	56                   	push   esi
c0021b7e:	53                   	push   ebx
c0021b7f:	e8 8c f6 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b84:	83 c4 1c             	add    esp,0x1c
c0021b87:	6a 0c                	push   0xc
c0021b89:	56                   	push   esi
c0021b8a:	53                   	push   ebx
c0021b8b:	e8 40 f7 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021b90:	83 c4 0c             	add    esp,0xc
c0021b93:	6a 0c                	push   0xc
c0021b95:	56                   	push   esi
c0021b96:	53                   	push   ebx
c0021b97:	e8 34 f7 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021b9c:	83 c4 0c             	add    esp,0xc
c0021b9f:	6a 0c                	push   0xc
c0021ba1:	56                   	push   esi
c0021ba2:	53                   	push   ebx
c0021ba3:	e8 28 f7 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021ba8:	83 c4 0c             	add    esp,0xc
c0021bab:	6a 0c                	push   0xc
c0021bad:	56                   	push   esi
c0021bae:	53                   	push   ebx
c0021baf:	e8 1c f7 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021bb4:	c7 04 24 03 e3 02 c0 	mov    DWORD PTR [esp],0xc002e303
c0021bbb:	e8 99 c1 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021bc0:	83 c4 0c             	add    esp,0xc
c0021bc3:	6a 0c                	push   0xc
c0021bc5:	56                   	push   esi
c0021bc6:	53                   	push   ebx
c0021bc7:	e8 04 f7 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021bcc:	83 c4 10             	add    esp,0x10
c0021bcf:	84 c0                	test   al,al
c0021bd1:	75 1f                	jne    c0021bf2 <IDE::detect()+0x164>
c0021bd3:	83 ec 0c             	sub    esp,0xc
c0021bd6:	68 06 e3 02 c0       	push   0xc002e306
c0021bdb:	e8 79 c1 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021be0:	e9 e9 02 00 00       	jmp    c0021ece <IDE::detect()+0x440>
c0021be5:	a8 80                	test   al,0x80
c0021be7:	74 21                	je     c0021c0a <IDE::detect()+0x17c>
c0021be9:	45                   	inc    ebp
c0021bea:	81 fd 17 01 00 00    	cmp    ebp,0x117
c0021bf0:	7f 1e                	jg     c0021c10 <IDE::detect()+0x182>
c0021bf2:	50                   	push   eax
c0021bf3:	6a 0c                	push   0xc
c0021bf5:	56                   	push   esi
c0021bf6:	53                   	push   ebx
c0021bf7:	e8 d4 f6 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021bfc:	83 c4 10             	add    esp,0x10
c0021bff:	a8 01                	test   al,0x1
c0021c01:	74 e2                	je     c0021be5 <IDE::detect()+0x157>
c0021c03:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0021c08:	eb 23                	jmp    c0021c2d <IDE::detect()+0x19f>
c0021c0a:	a8 08                	test   al,0x8
c0021c0c:	74 db                	je     c0021be9 <IDE::detect()+0x15b>
c0021c0e:	eb 18                	jmp    c0021c28 <IDE::detect()+0x19a>
c0021c10:	50                   	push   eax
c0021c11:	50                   	push   eax
c0021c12:	6a 00                	push   0x0
c0021c14:	6a 32                	push   0x32
c0021c16:	e8 bd 58 ff ff       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c0021c1b:	83 c4 10             	add    esp,0x10
c0021c1e:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c0021c24:	75 cc                	jne    c0021bf2 <IDE::detect()+0x164>
c0021c26:	eb db                	jmp    c0021c03 <IDE::detect()+0x175>
c0021c28:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c0021c2d:	83 ec 0c             	sub    esp,0xc
c0021c30:	68 09 e3 02 c0       	push   0xc002e309
c0021c35:	e8 1f c1 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021c3a:	83 c4 10             	add    esp,0x10
c0021c3d:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c0021c42:	74 5f                	je     c0021ca3 <IDE::detect()+0x215>
c0021c44:	51                   	push   ecx
c0021c45:	6a 04                	push   0x4
c0021c47:	56                   	push   esi
c0021c48:	53                   	push   ebx
c0021c49:	e8 82 f6 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021c4e:	83 c4 0c             	add    esp,0xc
c0021c51:	89 c5                	mov    ebp,eax
c0021c53:	6a 05                	push   0x5
c0021c55:	56                   	push   esi
c0021c56:	53                   	push   ebx
c0021c57:	e8 74 f6 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021c5c:	83 c4 10             	add    esp,0x10
c0021c5f:	89 e9                	mov    ecx,ebp
c0021c61:	0f b6 c0             	movzx  eax,al
c0021c64:	0f b6 e9             	movzx  ebp,cl
c0021c67:	83 fd 14             	cmp    ebp,0x14
c0021c6a:	75 07                	jne    c0021c73 <IDE::detect()+0x1e5>
c0021c6c:	3d eb 00 00 00       	cmp    eax,0xeb
c0021c71:	eb 0e                	jmp    c0021c81 <IDE::detect()+0x1f3>
c0021c73:	3d 96 00 00 00       	cmp    eax,0x96
c0021c78:	0f 85 53 02 00 00    	jne    c0021ed1 <IDE::detect()+0x443>
c0021c7e:	83 fd 69             	cmp    ebp,0x69
c0021c81:	0f 85 4a 02 00 00    	jne    c0021ed1 <IDE::detect()+0x443>
c0021c87:	68 a1 00 00 00       	push   0xa1
c0021c8c:	6a 07                	push   0x7
c0021c8e:	56                   	push   esi
c0021c8f:	53                   	push   ebx
c0021c90:	e8 7b f5 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c95:	58                   	pop    eax
c0021c96:	5a                   	pop    edx
c0021c97:	6a 00                	push   0x0
c0021c99:	6a 0a                	push   0xa
c0021c9b:	e8 38 58 ff ff       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c0021ca0:	83 c4 10             	add    esp,0x10
c0021ca3:	83 ec 0c             	sub    esp,0xc
c0021ca6:	89 fd                	mov    ebp,edi
c0021ca8:	68 0c e3 02 c0       	push   0xc002e30c
c0021cad:	c1 e5 06             	shl    ebp,0x6
c0021cb0:	e8 a4 c0 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021cb5:	01 dd                	add    ebp,ebx
c0021cb7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0021cbb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0021cc2:	52                   	push   edx
c0021cc3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0021cc7:	6a 00                	push   0x0
c0021cc9:	56                   	push   esi
c0021cca:	53                   	push   ebx
c0021ccb:	e8 ee fc ff ff       	call   c00219be <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021cd0:	83 c4 14             	add    esp,0x14
c0021cd3:	68 10 e3 02 c0       	push   0xc002e310
c0021cd8:	e8 7c c0 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021cdd:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0021ce2:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c0021ce9:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c0021cf0:	89 f0                	mov    eax,esi
c0021cf2:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c0021cf8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021cfc:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c0021d02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d06:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c0021d0d:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c0021d15:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c0021d1c:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c0021d24:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c0021d2a:	c7 04 24 14 e3 02 c0 	mov    DWORD PTR [esp],0xc002e314
c0021d31:	e8 23 c0 fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021d36:	83 c4 10             	add    esp,0x10
c0021d39:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c0021d40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d44:	74 09                	je     c0021d4f <IDE::detect()+0x2c1>
c0021d46:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c0021d4d:	eb 07                	jmp    c0021d56 <IDE::detect()+0x2c8>
c0021d4f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0021d56:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021d5a:	89 f8                	mov    eax,edi
c0021d5c:	83 ec 0c             	sub    esp,0xc
c0021d5f:	c1 e0 06             	shl    eax,0x6
c0021d62:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0021d65:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c0021d6b:	68 18 e3 02 c0       	push   0xc002e318
c0021d70:	e8 e4 bf fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021d75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021d79:	89 e8                	mov    eax,ebp
c0021d7b:	83 c4 10             	add    esp,0x10
c0021d7e:	8d 6a 28             	lea    ebp,[edx+0x28]
c0021d81:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c0021d84:	83 c0 02             	add    eax,0x2
c0021d87:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c0021d8d:	83 c2 02             	add    edx,0x2
c0021d90:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c0021d93:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c0021d99:	39 d5                	cmp    ebp,edx
c0021d9b:	75 e4                	jne    c0021d81 <IDE::detect()+0x2f3>
c0021d9d:	89 f8                	mov    eax,edi
c0021d9f:	c1 e0 06             	shl    eax,0x6
c0021da2:	01 d8                	add    eax,ebx
c0021da4:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c0021dab:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0021db2:	c1 ea 09             	shr    edx,0x9
c0021db5:	83 e2 01             	and    edx,0x1
c0021db8:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c0021dbf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0021dc5:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c0021dc9:	74 0c                	je     c0021dd7 <IDE::detect()+0x349>
c0021dcb:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c0021dd4:	0f 95 c2             	setne  dl
c0021dd7:	83 ec 0c             	sub    esp,0xc
c0021dda:	89 fd                	mov    ebp,edi
c0021ddc:	c1 e5 06             	shl    ebp,0x6
c0021ddf:	01 dd                	add    ebp,ebx
c0021de1:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c0021de7:	68 1c e3 02 c0       	push   0xc002e31c
c0021dec:	e8 68 bf fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021df1:	83 c4 10             	add    esp,0x10
c0021df4:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c0021df9:	75 66                	jne    c0021e61 <IDE::detect()+0x3d3>
c0021dfb:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c0021e02:	0f 84 b8 00 00 00    	je     c0021ec0 <IDE::detect()+0x432>
c0021e08:	83 ec 0c             	sub    esp,0xc
c0021e0b:	68 20 e3 02 c0       	push   0xc002e320
c0021e10:	e8 44 bf fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021e15:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c0021e1c:	e8 d6 e4 fe ff       	call   c00102f7 <malloc>
c0021e21:	89 04 24             	mov    DWORD PTR [esp],eax
c0021e24:	89 c5                	mov    ebp,eax
c0021e26:	e8 43 05 00 00       	call   c002236e <ATA::ATA()>
c0021e2b:	c7 04 24 24 e3 02 c0 	mov    DWORD PTR [esp],0xc002e324
c0021e32:	e8 22 bf fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021e37:	59                   	pop    ecx
c0021e38:	58                   	pop    eax
c0021e39:	55                   	push   ebp
c0021e3a:	53                   	push   ebx
c0021e3b:	e8 40 86 fe ff       	call   c000a480 <Device::addChild(Device*)>
c0021e40:	c7 04 24 29 e3 02 c0 	mov    DWORD PTR [esp],0xc002e329
c0021e47:	e8 0d bf fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021e4c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021e4f:	53                   	push   ebx
c0021e50:	57                   	push   edi
c0021e51:	6a 00                	push   0x0
c0021e53:	55                   	push   ebp
c0021e54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021e57:	83 c4 14             	add    esp,0x14
c0021e5a:	68 2e e3 02 c0       	push   0xc002e32e
c0021e5f:	eb 57                	jmp    c0021eb8 <IDE::detect()+0x42a>
c0021e61:	83 ec 0c             	sub    esp,0xc
c0021e64:	68 33 e3 02 c0       	push   0xc002e333
c0021e69:	e8 eb be fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021e6e:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0021e75:	e8 7d e4 fe ff       	call   c00102f7 <malloc>
c0021e7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0021e7d:	89 c5                	mov    ebp,eax
c0021e7f:	e8 98 0c 00 00       	call   c0022b1c <ATAPI::ATAPI()>
c0021e84:	c7 04 24 39 e3 02 c0 	mov    DWORD PTR [esp],0xc002e339
c0021e8b:	e8 c9 be fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021e90:	58                   	pop    eax
c0021e91:	5a                   	pop    edx
c0021e92:	55                   	push   ebp
c0021e93:	53                   	push   ebx
c0021e94:	e8 e7 85 fe ff       	call   c000a480 <Device::addChild(Device*)>
c0021e99:	c7 04 24 40 e3 02 c0 	mov    DWORD PTR [esp],0xc002e340
c0021ea0:	e8 b4 be fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021ea5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021ea8:	53                   	push   ebx
c0021ea9:	57                   	push   edi
c0021eaa:	6a 00                	push   0x0
c0021eac:	55                   	push   ebp
c0021ead:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021eb0:	83 c4 14             	add    esp,0x14
c0021eb3:	68 47 e3 02 c0       	push   0xc002e347
c0021eb8:	e8 9c be fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021ebd:	83 c4 10             	add    esp,0x10
c0021ec0:	83 ec 0c             	sub    esp,0xc
c0021ec3:	47                   	inc    edi
c0021ec4:	68 4e e3 02 c0       	push   0xc002e34e
c0021ec9:	e8 8b be fe ff       	call   c000dd59 <KeSetBootMessage(char const*)>
c0021ece:	83 c4 10             	add    esp,0x10
c0021ed1:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c0021ed5:	74 0c                	je     c0021ee3 <IDE::detect()+0x455>
c0021ed7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0021ede:	e9 10 fc ff ff       	jmp    c0021af3 <IDE::detect()+0x65>
c0021ee3:	4e                   	dec    esi
c0021ee4:	74 0a                	je     c0021ef0 <IDE::detect()+0x462>
c0021ee6:	be 01 00 00 00       	mov    esi,0x1
c0021eeb:	e9 ec fb ff ff       	jmp    c0021adc <IDE::detect()+0x4e>
c0021ef0:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021ef6:	5b                   	pop    ebx
c0021ef7:	5e                   	pop    esi
c0021ef8:	5f                   	pop    edi
c0021ef9:	5d                   	pop    ebp
c0021efa:	c3                   	ret    
c0021efb:	90                   	nop

c0021efc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0021efc:	55                   	push   ebp
c0021efd:	57                   	push   edi
c0021efe:	56                   	push   esi
c0021eff:	53                   	push   ebx
c0021f00:	83 ec 1c             	sub    esp,0x1c
c0021f03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021f07:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021f0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021f0f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021f13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021f17:	88 c3                	mov    bl,al
c0021f19:	25 ff 00 00 00       	and    eax,0xff
c0021f1e:	0f 84 88 00 00 00    	je     c0021fac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0021f24:	83 ec 0c             	sub    esp,0xc
c0021f27:	89 c7                	mov    edi,eax
c0021f29:	68 52 e3 02 c0       	push   0xc002e352
c0021f2e:	e8 49 50 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0021f33:	83 c4 10             	add    esp,0x10
c0021f36:	83 ff 01             	cmp    edi,0x1
c0021f39:	74 6b                	je     c0021fa6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c0021f3b:	83 ff 02             	cmp    edi,0x2
c0021f3e:	75 58                	jne    c0021f98 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c0021f40:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0021f45:	01 ff                	add    edi,edi
c0021f47:	50                   	push   eax
c0021f48:	09 fe                	or     esi,edi
c0021f4a:	6a 01                	push   0x1
c0021f4c:	89 f0                	mov    eax,esi
c0021f4e:	0f b6 f0             	movzx  esi,al
c0021f51:	c1 e6 06             	shl    esi,0x6
c0021f54:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c0021f5c:	50                   	push   eax
c0021f5d:	55                   	push   ebp
c0021f5e:	e8 6d f3 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021f63:	83 c4 10             	add    esp,0x10
c0021f66:	a8 01                	test   al,0x1
c0021f68:	74 02                	je     c0021f6c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c0021f6a:	b3 07                	mov    bl,0x7
c0021f6c:	a8 02                	test   al,0x2
c0021f6e:	74 02                	je     c0021f72 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c0021f70:	b3 03                	mov    bl,0x3
c0021f72:	a8 04                	test   al,0x4
c0021f74:	74 02                	je     c0021f78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c0021f76:	b3 14                	mov    bl,0x14
c0021f78:	a8 08                	test   al,0x8
c0021f7a:	74 02                	je     c0021f7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c0021f7c:	b3 03                	mov    bl,0x3
c0021f7e:	a8 10                	test   al,0x10
c0021f80:	74 02                	je     c0021f84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c0021f82:	b3 15                	mov    bl,0x15
c0021f84:	a8 20                	test   al,0x20
c0021f86:	74 02                	je     c0021f8a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c0021f88:	b3 03                	mov    bl,0x3
c0021f8a:	a8 40                	test   al,0x40
c0021f8c:	74 02                	je     c0021f90 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0021f8e:	b3 16                	mov    bl,0x16
c0021f90:	a8 80                	test   al,0x80
c0021f92:	74 18                	je     c0021fac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0021f94:	b3 0d                	mov    bl,0xd
c0021f96:	eb 14                	jmp    c0021fac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0021f98:	83 ff 03             	cmp    edi,0x3
c0021f9b:	74 0d                	je     c0021faa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c0021f9d:	83 ff 04             	cmp    edi,0x4
c0021fa0:	75 0a                	jne    c0021fac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0021fa2:	b3 08                	mov    bl,0x8
c0021fa4:	eb 06                	jmp    c0021fac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0021fa6:	b3 13                	mov    bl,0x13
c0021fa8:	eb 02                	jmp    c0021fac <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c0021faa:	b3 17                	mov    bl,0x17
c0021fac:	83 c4 1c             	add    esp,0x1c
c0021faf:	88 d8                	mov    al,bl
c0021fb1:	5b                   	pop    ebx
c0021fb2:	5e                   	pop    esi
c0021fb3:	5f                   	pop    edi
c0021fb4:	5d                   	pop    ebp
c0021fb5:	c3                   	ret    

c0021fb6 <IDE::polling(unsigned char, unsigned int)>:
c0021fb6:	57                   	push   edi
c0021fb7:	56                   	push   esi
c0021fb8:	53                   	push   ebx
c0021fb9:	bb 04 00 00 00       	mov    ebx,0x4
c0021fbe:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021fc2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021fc7:	52                   	push   edx
c0021fc8:	6a 0c                	push   0xc
c0021fca:	56                   	push   esi
c0021fcb:	57                   	push   edi
c0021fcc:	e8 ff f2 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021fd1:	83 c4 10             	add    esp,0x10
c0021fd4:	4b                   	dec    ebx
c0021fd5:	75 f0                	jne    c0021fc7 <IDE::polling(unsigned char, unsigned int)+0x11>
c0021fd7:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021fdc:	50                   	push   eax
c0021fdd:	6a 0c                	push   0xc
c0021fdf:	56                   	push   esi
c0021fe0:	57                   	push   edi
c0021fe1:	e8 ea f2 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0021fe6:	83 c4 10             	add    esp,0x10
c0021fe9:	a8 01                	test   al,0x1
c0021feb:	75 17                	jne    c0022004 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0021fed:	a8 20                	test   al,0x20
c0021fef:	75 0f                	jne    c0022000 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0021ff1:	4b                   	dec    ebx
c0021ff2:	74 10                	je     c0022004 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0021ff4:	a8 80                	test   al,0x80
c0021ff6:	75 e4                	jne    c0021fdc <IDE::polling(unsigned char, unsigned int)+0x26>
c0021ff8:	a8 08                	test   al,0x8
c0021ffa:	74 e0                	je     c0021fdc <IDE::polling(unsigned char, unsigned int)+0x26>
c0021ffc:	31 c0                	xor    eax,eax
c0021ffe:	eb 06                	jmp    c0022006 <IDE::polling(unsigned char, unsigned int)+0x50>
c0022000:	b0 01                	mov    al,0x1
c0022002:	eb 02                	jmp    c0022006 <IDE::polling(unsigned char, unsigned int)+0x50>
c0022004:	b0 02                	mov    al,0x2
c0022006:	5b                   	pop    ebx
c0022007:	5e                   	pop    esi
c0022008:	5f                   	pop    edi
c0022009:	c3                   	ret    

c002200a <SATABus::close(int, int, void*)>:
c002200a:	31 c0                	xor    eax,eax
c002200c:	c3                   	ret    
c002200d:	90                   	nop

c002200e <SATABus::detect()>:
c002200e:	c3                   	ret    
c002200f:	90                   	nop

c0022010 <SATABus::SATABus()>:
c0022010:	83 ec 0c             	sub    esp,0xc
c0022013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022017:	83 ec 08             	sub    esp,0x8
c002201a:	68 8c e3 02 c0       	push   0xc002e38c
c002201f:	50                   	push   eax
c0022020:	e8 b3 87 fe ff       	call   c000a7d8 <HardDiskController::HardDiskController(char const*)>
c0022025:	83 c4 10             	add    esp,0x10
c0022028:	ba b8 e3 02 c0       	mov    edx,0xc002e3b8
c002202d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022031:	89 10                	mov    DWORD PTR [eax],edx
c0022033:	83 ec 0c             	sub    esp,0xc
c0022036:	6a 50                	push   0x50
c0022038:	e8 ea e9 fe ff       	call   c0010a27 <Phys::allocateContiguousPages(int)>
c002203d:	83 c4 10             	add    esp,0x10
c0022040:	89 c2                	mov    edx,eax
c0022042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022046:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002204c:	83 ec 0c             	sub    esp,0xc
c002204f:	6a 50                	push   0x50
c0022051:	e8 8d 1c ff ff       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c0022056:	83 c4 10             	add    esp,0x10
c0022059:	89 c2                	mov    edx,eax
c002205b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022065:	a1 90 62 03 c0       	mov    eax,ds:0xc0036290
c002206a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002206e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022074:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022078:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002207e:	83 ec 0c             	sub    esp,0xc
c0022081:	6a 03                	push   0x3
c0022083:	6a 50                	push   0x50
c0022085:	51                   	push   ecx
c0022086:	52                   	push   edx
c0022087:	50                   	push   eax
c0022088:	e8 23 25 ff ff       	call   c00145b0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002208d:	83 c4 20             	add    esp,0x20
c0022090:	90                   	nop
c0022091:	83 c4 0c             	add    esp,0xc
c0022094:	c3                   	ret    
c0022095:	90                   	nop

c0022096 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022096:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002209a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002209d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00220a0:	09 c2                	or     edx,eax
c00220a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00220ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c00220ae:	31 c0                	xor    eax,eax
c00220b0:	c1 e9 08             	shr    ecx,0x8
c00220b3:	83 e1 0f             	and    ecx,0xf
c00220b6:	39 c8                	cmp    eax,ecx
c00220b8:	74 0a                	je     c00220c4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c00220ba:	f6 c2 01             	test   dl,0x1
c00220bd:	74 08                	je     c00220c7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00220bf:	d1 ea                	shr    edx,1
c00220c1:	40                   	inc    eax
c00220c2:	eb f2                	jmp    c00220b6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c00220c4:	83 c8 ff             	or     eax,0xffffffff
c00220c7:	c3                   	ret    

c00220c8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00220c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00220cc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00220cf:	89 c2                	mov    edx,eax
c00220d1:	c1 ea 08             	shr    edx,0x8
c00220d4:	83 e2 0f             	and    edx,0xf
c00220d7:	4a                   	dec    edx
c00220d8:	75 32                	jne    c002210c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00220da:	83 e0 0f             	and    eax,0xf
c00220dd:	83 f8 03             	cmp    eax,0x3
c00220e0:	75 2a                	jne    c002210c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00220e2:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00220e5:	b8 02 00 00 00       	mov    eax,0x2
c00220ea:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00220f0:	74 1c                	je     c002210e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00220f2:	b8 04 00 00 00       	mov    eax,0x4
c00220f7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00220fd:	74 0f                	je     c002210e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00220ff:	31 c0                	xor    eax,eax
c0022101:	83 fa 03             	cmp    edx,0x3
c0022104:	0f 94 c0             	sete   al
c0022107:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002210b:	c3                   	ret    
c002210c:	31 c0                	xor    eax,eax
c002210e:	c3                   	ret    
c002210f:	90                   	nop

c0022110 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022114:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022117:	0f ba e2 0f          	bt     edx,0xf
c002211b:	72 f7                	jb     c0022114 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002211d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022120:	83 ca 10             	or     edx,0x10
c0022123:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022126:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022129:	83 ca 01             	or     edx,0x1
c002212c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002212f:	c3                   	ret    

c0022130 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022130:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022134:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022137:	83 e2 fe             	and    edx,0xfffffffe
c002213a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002213d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022140:	83 e2 ef             	and    edx,0xffffffef
c0022143:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022146:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022149:	0f ba e2 0e          	bt     edx,0xe
c002214d:	72 f7                	jb     c0022146 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002214f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022152:	0f ba e2 0f          	bt     edx,0xf
c0022156:	72 ee                	jb     c0022146 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022158:	c3                   	ret    
c0022159:	90                   	nop

c002215a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002215a:	55                   	push   ebp
c002215b:	57                   	push   edi
c002215c:	56                   	push   esi
c002215d:	53                   	push   ebx
c002215e:	83 ec 1c             	sub    esp,0x1c
c0022161:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022165:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022169:	53                   	push   ebx
c002216a:	56                   	push   esi
c002216b:	e8 c0 ff ff ff       	call   c0022130 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022170:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0022174:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002217a:	83 ec 0c             	sub    esp,0xc
c002217d:	c1 e5 0a             	shl    ebp,0xa
c0022180:	01 e8                	add    eax,ebp
c0022182:	89 03                	mov    DWORD PTR [ebx],eax
c0022184:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022186:	68 00 04 00 00       	push   0x400
c002218b:	6a 00                	push   0x0
c002218d:	50                   	push   eax
c002218e:	e8 5d e3 fd ff       	call   c00004f0 <memset>
c0022193:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022199:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002219d:	01 e8                	add    eax,ebp
c002219f:	83 c4 1c             	add    esp,0x1c
c00221a2:	89 03                	mov    DWORD PTR [ebx],eax
c00221a4:	c1 e2 08             	shl    edx,0x8
c00221a7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221ae:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c00221b4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00221ba:	01 f8                	add    eax,edi
c00221bc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221bf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00221c2:	68 00 01 00 00       	push   0x100
c00221c7:	6a 00                	push   0x0
c00221c9:	50                   	push   eax
c00221ca:	e8 21 e3 fd ff       	call   c00004f0 <memset>
c00221cf:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c00221d5:	01 fa                	add    edx,edi
c00221d7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00221db:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00221de:	c1 e7 0d             	shl    edi,0xd
c00221e1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221e8:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00221ee:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00221f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00221f8:	31 ff                	xor    edi,edi
c00221fa:	83 c4 10             	add    esp,0x10
c00221fd:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022203:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022207:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002220d:	83 c5 20             	add    ebp,0x20
c0022210:	01 f8                	add    eax,edi
c0022212:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022215:	52                   	push   edx
c0022216:	68 00 01 00 00       	push   0x100
c002221b:	6a 00                	push   0x0
c002221d:	50                   	push   eax
c002221e:	e8 cd e2 fd ff       	call   c00004f0 <memset>
c0022223:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022227:	83 c4 10             	add    esp,0x10
c002222a:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022230:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022237:	01 f8                	add    eax,edi
c0022239:	81 c7 00 01 00 00    	add    edi,0x100
c002223f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022242:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022248:	75 b3                	jne    c00221fd <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002224a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0022251:	50                   	push   eax
c0022252:	50                   	push   eax
c0022253:	53                   	push   ebx
c0022254:	56                   	push   esi
c0022255:	e8 b6 fe ff ff       	call   c0022110 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002225a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0022261:	83 c4 2c             	add    esp,0x2c
c0022264:	5b                   	pop    ebx
c0022265:	5e                   	pop    esi
c0022266:	5f                   	pop    edi
c0022267:	5d                   	pop    ebp
c0022268:	c3                   	ret    
c0022269:	90                   	nop

c002226a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002226a:	55                   	push   ebp
c002226b:	57                   	push   edi
c002226c:	56                   	push   esi
c002226d:	53                   	push   ebx
c002226e:	31 db                	xor    ebx,ebx
c0022270:	83 ec 0c             	sub    esp,0xc
c0022273:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022277:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002227b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002227e:	f7 c7 01 00 00 00    	test   edi,0x1
c0022284:	74 7a                	je     c0022300 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0022286:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002228a:	89 d8                	mov    eax,ebx
c002228c:	c1 e0 07             	shl    eax,0x7
c002228f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0022296:	55                   	push   ebp
c0022297:	56                   	push   esi
c0022298:	e8 2b fe ff ff       	call   c00220c8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002229d:	5a                   	pop    edx
c002229e:	83 f8 01             	cmp    eax,0x1
c00222a1:	59                   	pop    ecx
c00222a2:	75 21                	jne    c00222c5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c00222a4:	50                   	push   eax
c00222a5:	53                   	push   ebx
c00222a6:	55                   	push   ebp
c00222a7:	56                   	push   esi
c00222a8:	e8 ad fe ff ff       	call   c002215a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00222ad:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00222b4:	e8 3e e0 fe ff       	call   c00102f7 <malloc>
c00222b9:	89 c5                	mov    ebp,eax
c00222bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00222be:	e8 25 0f 00 00       	call   c00231e8 <SATA::SATA()>
c00222c3:	eb 24                	jmp    c00222e9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00222c5:	83 f8 04             	cmp    eax,0x4
c00222c8:	75 36                	jne    c0022300 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00222ca:	51                   	push   ecx
c00222cb:	53                   	push   ebx
c00222cc:	55                   	push   ebp
c00222cd:	56                   	push   esi
c00222ce:	e8 87 fe ff ff       	call   c002215a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00222d3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c00222da:	e8 18 e0 fe ff       	call   c00102f7 <malloc>
c00222df:	89 c5                	mov    ebp,eax
c00222e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00222e4:	e8 97 12 00 00       	call   c0023580 <SATAPI::SATAPI()>
c00222e9:	58                   	pop    eax
c00222ea:	5a                   	pop    edx
c00222eb:	55                   	push   ebp
c00222ec:	56                   	push   esi
c00222ed:	e8 8e 81 fe ff       	call   c000a480 <Device::addChild(Device*)>
c00222f2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00222f5:	56                   	push   esi
c00222f6:	6a 00                	push   0x0
c00222f8:	53                   	push   ebx
c00222f9:	55                   	push   ebp
c00222fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00222fd:	83 c4 20             	add    esp,0x20
c0022300:	d1 ef                	shr    edi,1
c0022302:	43                   	inc    ebx
c0022303:	83 fb 20             	cmp    ebx,0x20
c0022306:	0f 85 72 ff ff ff    	jne    c002227e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002230c:	83 c4 0c             	add    esp,0xc
c002230f:	5b                   	pop    ebx
c0022310:	5e                   	pop    esi
c0022311:	5f                   	pop    edi
c0022312:	5d                   	pop    ebp
c0022313:	c3                   	ret    

c0022314 <SATABus::open(int, int, void*)>:
c0022314:	53                   	push   ebx
c0022315:	83 ec 08             	sub    esp,0x8
c0022318:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002231c:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c0022322:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0022328:	e8 a3 4c ff ff       	call   c0016fd0 <KeDisablePreemption()>
c002232d:	52                   	push   edx
c002232e:	52                   	push   edx
c002232f:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c0022335:	53                   	push   ebx
c0022336:	e8 2f ff ff ff       	call   c002226a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002233b:	e8 b8 4c ff ff       	call   c0016ff8 <KeRestorePreemption()>
c0022340:	31 c0                	xor    eax,eax
c0022342:	83 c4 18             	add    esp,0x18
c0022345:	5b                   	pop    ebx
c0022346:	c3                   	ret    
c0022347:	90                   	nop

c0022348 <ATA::close(int, int, void*)>:
c0022348:	83 ec 0c             	sub    esp,0xc
c002234b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002234f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022355:	85 c0                	test   eax,eax
c0022357:	74 0c                	je     c0022365 <ATA::close(int, int, void*)+0x1d>
c0022359:	83 ec 0c             	sub    esp,0xc
c002235c:	8b 10                	mov    edx,DWORD PTR [eax]
c002235e:	50                   	push   eax
c002235f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022362:	83 c4 10             	add    esp,0x10
c0022365:	31 c0                	xor    eax,eax
c0022367:	83 c4 0c             	add    esp,0xc
c002236a:	c3                   	ret    
c002236b:	90                   	nop

c002236c <ATA::powerSaving(PowerSavingLevel)>:
c002236c:	c3                   	ret    
c002236d:	90                   	nop

c002236e <ATA::ATA()>:
c002236e:	83 ec 0c             	sub    esp,0xc
c0022371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022375:	83 ec 04             	sub    esp,0x4
c0022378:	68 00 02 00 00       	push   0x200
c002237d:	68 39 e5 02 c0       	push   0xc002e539
c0022382:	50                   	push   eax
c0022383:	e8 da 84 fe ff       	call   c000a862 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022388:	83 c4 10             	add    esp,0x10
c002238b:	ba a0 e4 02 c0       	mov    edx,0xc002e4a0
c0022390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022394:	89 10                	mov    DWORD PTR [eax],edx
c0022396:	90                   	nop
c0022397:	83 c4 0c             	add    esp,0xc
c002239a:	c3                   	ret    
c002239b:	90                   	nop

c002239c <ATA::flush(bool)>:
c002239c:	53                   	push   ebx
c002239d:	83 ec 08             	sub    esp,0x8
c00223a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00223a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00223a9:	83 f8 01             	cmp    eax,0x1
c00223ac:	19 c0                	sbb    eax,eax
c00223ae:	83 e0 fd             	and    eax,0xfffffffd
c00223b1:	05 ea 00 00 00       	add    eax,0xea
c00223b6:	50                   	push   eax
c00223b7:	6a 07                	push   0x7
c00223b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00223c0:	50                   	push   eax
c00223c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00223c7:	e8 44 ee ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223cc:	83 c4 0c             	add    esp,0xc
c00223cf:	6a 00                	push   0x0
c00223d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00223d8:	50                   	push   eax
c00223d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00223df:	e8 d2 fb ff ff       	call   c0021fb6 <IDE::polling(unsigned char, unsigned int)>
c00223e4:	83 c4 18             	add    esp,0x18
c00223e7:	5b                   	pop    ebx
c00223e8:	c3                   	ret    
c00223e9:	90                   	nop

c00223ea <ATA::readyForCommand()>:
c00223ea:	56                   	push   esi
c00223eb:	53                   	push   ebx
c00223ec:	31 db                	xor    ebx,ebx
c00223ee:	50                   	push   eax
c00223ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00223f3:	50                   	push   eax
c00223f4:	6a 0c                	push   0xc
c00223f6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00223fd:	50                   	push   eax
c00223fe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022404:	e8 c7 ee ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0022409:	83 c4 10             	add    esp,0x10
c002240c:	a8 88                	test   al,0x88
c002240e:	74 20                	je     c0022430 <ATA::readyForCommand()+0x46>
c0022410:	43                   	inc    ebx
c0022411:	83 fb 63             	cmp    ebx,0x63
c0022414:	7e dd                	jle    c00223f3 <ATA::readyForCommand()+0x9>
c0022416:	51                   	push   ecx
c0022417:	51                   	push   ecx
c0022418:	6a 00                	push   0x0
c002241a:	6a 0a                	push   0xa
c002241c:	e8 b7 50 ff ff       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c0022421:	83 c4 10             	add    esp,0x10
c0022424:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002242a:	75 c7                	jne    c00223f3 <ATA::readyForCommand()+0x9>
c002242c:	31 c0                	xor    eax,eax
c002242e:	eb 02                	jmp    c0022432 <ATA::readyForCommand()+0x48>
c0022430:	b0 01                	mov    al,0x1
c0022432:	5a                   	pop    edx
c0022433:	5b                   	pop    ebx
c0022434:	5e                   	pop    esi
c0022435:	c3                   	ret    

c0022436 <ATA::access(unsigned long long, int, void*, bool)>:
c0022436:	55                   	push   ebp
c0022437:	57                   	push   edi
c0022438:	56                   	push   esi
c0022439:	53                   	push   ebx
c002243a:	83 ec 2c             	sub    esp,0x2c
c002243d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022441:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022445:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022449:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002244d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022451:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022455:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022459:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002245f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022463:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022469:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002246d:	c1 e0 06             	shl    eax,0x6
c0022470:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0022478:	74 5d                	je     c00224d7 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002247a:	89 fa                	mov    edx,edi
c002247c:	89 f0                	mov    eax,esi
c002247e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0022482:	c1 ea 1c             	shr    edx,0x1c
c0022485:	89 d1                	mov    ecx,edx
c0022487:	09 c1                	or     ecx,eax
c0022489:	74 25                	je     c00224b0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002248b:	31 ed                	xor    ebp,ebp
c002248d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0022494:	89 fa                	mov    edx,edi
c0022496:	89 f0                	mov    eax,esi
c0022498:	0f ad d0             	shrd   eax,edx,cl
c002249b:	d3 ea                	shr    edx,cl
c002249d:	f6 c1 20             	test   cl,0x20
c00224a0:	74 02                	je     c00224a4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00224a2:	89 d0                	mov    eax,edx
c00224a4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00224a8:	45                   	inc    ebp
c00224a9:	83 fd 06             	cmp    ebp,0x6
c00224ac:	75 df                	jne    c002248d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00224ae:	eb 76                	jmp    c0022526 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00224b0:	89 f0                	mov    eax,esi
c00224b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00224b7:	89 fa                	mov    edx,edi
c00224b9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00224c0:	0f ac d0 10          	shrd   eax,edx,0x10
c00224c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00224c9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00224cd:	c1 ee 18             	shr    esi,0x18
c00224d0:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00224d5:	eb 56                	jmp    c002252d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00224d7:	6a 00                	push   0x0
c00224d9:	6a 3f                	push   0x3f
c00224db:	57                   	push   edi
c00224dc:	56                   	push   esi
c00224dd:	e8 b2 20 00 00       	call   c0024594 <__umoddi3>
c00224e2:	83 c4 10             	add    esp,0x10
c00224e5:	40                   	inc    eax
c00224e6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00224ea:	6a 00                	push   0x0
c00224ec:	68 f0 03 00 00       	push   0x3f0
c00224f1:	57                   	push   edi
c00224f2:	56                   	push   esi
c00224f3:	e8 9c 1f 00 00       	call   c0024494 <__udivdi3>
c00224f8:	83 c4 10             	add    esp,0x10
c00224fb:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0022500:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022507:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002250c:	6a 00                	push   0x0
c002250e:	6a 3f                	push   0x3f
c0022510:	57                   	push   edi
c0022511:	56                   	push   esi
c0022512:	e8 7d 1f 00 00       	call   c0024494 <__udivdi3>
c0022517:	83 c4 10             	add    esp,0x10
c002251a:	83 e0 0f             	and    eax,0xf
c002251d:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0022522:	89 c6                	mov    esi,eax
c0022524:	eb 07                	jmp    c002252d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0022526:	31 f6                	xor    esi,esi
c0022528:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002252d:	55                   	push   ebp
c002252e:	6a 00                	push   0x0
c0022530:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022537:	50                   	push   eax
c0022538:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002253c:	e8 d9 ee ff ff       	call   c002141a <IDE::enableIRQs(unsigned char, bool)>
c0022541:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022544:	e8 a1 fe ff ff       	call   c00223ea <ATA::readyForCommand()>
c0022549:	83 c4 10             	add    esp,0x10
c002254c:	84 c0                	test   al,al
c002254e:	75 0a                	jne    c002255a <ATA::access(unsigned long long, int, void*, bool)+0x124>
c0022550:	be 01 00 00 00       	mov    esi,0x1
c0022555:	e9 c2 02 00 00       	jmp    c002281c <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c002255a:	fa                   	cli    
c002255b:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0022561:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0022567:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c002256c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0022572:	75 0a                	jne    c002257e <ATA::access(unsigned long long, int, void*, bool)+0x148>
c0022574:	c1 e0 04             	shl    eax,0x4
c0022577:	09 c6                	or     esi,eax
c0022579:	83 ce a0             	or     esi,0xffffffa0
c002257c:	eb 08                	jmp    c0022586 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c002257e:	c1 e0 04             	shl    eax,0x4
c0022581:	09 c6                	or     esi,eax
c0022583:	83 ce e0             	or     esi,0xffffffe0
c0022586:	89 f0                	mov    eax,esi
c0022588:	0f b6 d2             	movzx  edx,dl
c002258b:	0f b6 f0             	movzx  esi,al
c002258e:	56                   	push   esi
c002258f:	6a 06                	push   0x6
c0022591:	52                   	push   edx
c0022592:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022598:	e8 73 ec ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002259d:	83 c4 10             	add    esp,0x10
c00225a0:	6a 00                	push   0x0
c00225a2:	6a 01                	push   0x1
c00225a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00225ab:	50                   	push   eax
c00225ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00225b2:	e8 59 ec ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225b7:	83 c4 10             	add    esp,0x10
c00225ba:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00225bf:	83 f8 02             	cmp    eax,0x2
c00225c2:	75 6e                	jne    c0022632 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c00225c4:	6a 00                	push   0x0
c00225c6:	6a 08                	push   0x8
c00225c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00225cf:	50                   	push   eax
c00225d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00225d6:	e8 35 ec ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225db:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00225e0:	50                   	push   eax
c00225e1:	6a 09                	push   0x9
c00225e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00225ea:	50                   	push   eax
c00225eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00225f1:	e8 1a ec ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225f6:	83 c4 20             	add    esp,0x20
c00225f9:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00225fe:	50                   	push   eax
c00225ff:	6a 0a                	push   0xa
c0022601:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022608:	50                   	push   eax
c0022609:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002260f:	e8 fc eb ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022614:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0022619:	50                   	push   eax
c002261a:	6a 0b                	push   0xb
c002261c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022623:	50                   	push   eax
c0022624:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002262a:	e8 e1 eb ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002262f:	83 c4 20             	add    esp,0x20
c0022632:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0022637:	50                   	push   eax
c0022638:	6a 02                	push   0x2
c002263a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022641:	50                   	push   eax
c0022642:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022648:	e8 c3 eb ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002264d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0022652:	50                   	push   eax
c0022653:	6a 03                	push   0x3
c0022655:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002265c:	50                   	push   eax
c002265d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022663:	e8 a8 eb ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022668:	83 c4 20             	add    esp,0x20
c002266b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0022670:	50                   	push   eax
c0022671:	6a 04                	push   0x4
c0022673:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002267a:	50                   	push   eax
c002267b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022681:	e8 8a eb ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022686:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002268b:	50                   	push   eax
c002268c:	6a 05                	push   0x5
c002268e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022695:	50                   	push   eax
c0022696:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002269c:	e8 6f eb ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226a1:	83 c4 20             	add    esp,0x20
c00226a4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00226a9:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00226ae:	74 13                	je     c00226c3 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c00226b0:	83 f8 02             	cmp    eax,0x2
c00226b3:	74 20                	je     c00226d5 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c00226b5:	48                   	dec    eax
c00226b6:	0f 85 94 fe ff ff    	jne    c0022550 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c00226bc:	b8 30 00 00 00       	mov    eax,0x30
c00226c1:	eb 1e                	jmp    c00226e1 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c00226c3:	83 f8 02             	cmp    eax,0x2
c00226c6:	74 14                	je     c00226dc <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c00226c8:	48                   	dec    eax
c00226c9:	b8 20 00 00 00       	mov    eax,0x20
c00226ce:	74 11                	je     c00226e1 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c00226d0:	e9 7b fe ff ff       	jmp    c0022550 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c00226d5:	b8 34 00 00 00       	mov    eax,0x34
c00226da:	eb 05                	jmp    c00226e1 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c00226dc:	b8 24 00 00 00       	mov    eax,0x24
c00226e1:	50                   	push   eax
c00226e2:	6a 07                	push   0x7
c00226e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00226eb:	50                   	push   eax
c00226ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00226f2:	e8 19 eb ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226f7:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c00226fe:	83 c4 10             	add    esp,0x10
c0022701:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0022708:	75 01                	jne    c002270b <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c002270a:	fb                   	sti    
c002270b:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002270f:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c0022714:	85 f6                	test   esi,esi
c0022716:	0f 84 dd 00 00 00    	je     c00227f9 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c002271c:	57                   	push   edi
c002271d:	6a 01                	push   0x1
c002271f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022726:	50                   	push   eax
c0022727:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002272d:	e8 84 f8 ff ff       	call   c0021fb6 <IDE::polling(unsigned char, unsigned int)>
c0022732:	83 c4 10             	add    esp,0x10
c0022735:	0f b6 c0             	movzx  eax,al
c0022738:	85 c0                	test   eax,eax
c002273a:	74 23                	je     c002275f <ATA::access(unsigned long long, int, void*, bool)+0x329>
c002273c:	50                   	push   eax
c002273d:	89 c6                	mov    esi,eax
c002273f:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0022746:	50                   	push   eax
c0022747:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002274e:	50                   	push   eax
c002274f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022755:	e8 a2 f7 ff ff       	call   c0021efc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002275a:	e9 ba 00 00 00       	jmp    c0022819 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c002275f:	85 ed                	test   ebp,ebp
c0022761:	74 49                	je     c00227ac <ATA::access(unsigned long long, int, void*, bool)+0x376>
c0022763:	fa                   	cli    
c0022764:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c002276a:	31 c9                	xor    ecx,ecx
c002276c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022770:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022774:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c0022778:	51                   	push   ecx
c0022779:	51                   	push   ecx
c002277a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022781:	50                   	push   eax
c0022782:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022788:	e8 71 ea ff ff       	call   c00211fe <IDE::getBase(unsigned char)>
c002278d:	89 c2                	mov    edx,eax
c002278f:	89 f8                	mov    eax,edi
c0022791:	66 ef                	out    dx,ax
c0022793:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022797:	83 c4 10             	add    esp,0x10
c002279a:	41                   	inc    ecx
c002279b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00227a1:	75 c9                	jne    c002276c <ATA::access(unsigned long long, int, void*, bool)+0x336>
c00227a3:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c00227aa:	eb 35                	jmp    c00227e1 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c00227ac:	fa                   	cli    
c00227ad:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c00227b3:	52                   	push   edx
c00227b4:	52                   	push   edx
c00227b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00227bc:	50                   	push   eax
c00227bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00227c3:	e8 36 ea ff ff       	call   c00211fe <IDE::getBase(unsigned char)>
c00227c8:	b9 00 01 00 00       	mov    ecx,0x100
c00227cd:	89 c2                	mov    edx,eax
c00227cf:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00227d3:	fc                   	cld    
c00227d4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00227d7:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c00227de:	83 c4 10             	add    esp,0x10
c00227e1:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c00227e8:	75 01                	jne    c00227eb <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c00227ea:	fb                   	sti    
c00227eb:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00227f3:	4e                   	dec    esi
c00227f4:	e9 1b ff ff ff       	jmp    c0022714 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c00227f9:	31 f6                	xor    esi,esi
c00227fb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0022800:	74 1a                	je     c002281c <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c0022802:	50                   	push   eax
c0022803:	50                   	push   eax
c0022804:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0022809:	83 f8 02             	cmp    eax,0x2
c002280c:	0f 94 c0             	sete   al
c002280f:	0f b6 c0             	movzx  eax,al
c0022812:	50                   	push   eax
c0022813:	53                   	push   ebx
c0022814:	e8 83 fb ff ff       	call   c002239c <ATA::flush(bool)>
c0022819:	83 c4 10             	add    esp,0x10
c002281c:	83 c4 2c             	add    esp,0x2c
c002281f:	89 f0                	mov    eax,esi
c0022821:	5b                   	pop    ebx
c0022822:	5e                   	pop    esi
c0022823:	5f                   	pop    edi
c0022824:	5d                   	pop    ebp
c0022825:	c3                   	ret    

c0022826 <ATA::read(unsigned long long, int, void*)>:
c0022826:	57                   	push   edi
c0022827:	b8 04 00 00 00       	mov    eax,0x4
c002282c:	56                   	push   esi
c002282d:	53                   	push   ebx
c002282e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022832:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022836:	8d 7a ff             	lea    edi,[edx-0x1]
c0022839:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002283d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022841:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0022847:	77 25                	ja     c002286e <ATA::read(unsigned long long, int, void*)+0x48>
c0022849:	b8 06 00 00 00       	mov    eax,0x6
c002284e:	85 f6                	test   esi,esi
c0022850:	74 1c                	je     c002286e <ATA::read(unsigned long long, int, void*)+0x48>
c0022852:	50                   	push   eax
c0022853:	50                   	push   eax
c0022854:	6a 00                	push   0x0
c0022856:	56                   	push   esi
c0022857:	52                   	push   edx
c0022858:	53                   	push   ebx
c0022859:	51                   	push   ecx
c002285a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002285e:	e8 d3 fb ff ff       	call   c0022436 <ATA::access(unsigned long long, int, void*, bool)>
c0022863:	83 c4 20             	add    esp,0x20
c0022866:	85 c0                	test   eax,eax
c0022868:	0f 95 c0             	setne  al
c002286b:	0f b6 c0             	movzx  eax,al
c002286e:	5b                   	pop    ebx
c002286f:	5e                   	pop    esi
c0022870:	5f                   	pop    edi
c0022871:	c3                   	ret    

c0022872 <ATA::write(unsigned long long, int, void*)>:
c0022872:	57                   	push   edi
c0022873:	b8 04 00 00 00       	mov    eax,0x4
c0022878:	56                   	push   esi
c0022879:	53                   	push   ebx
c002287a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002287e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022882:	8d 7a ff             	lea    edi,[edx-0x1]
c0022885:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022889:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002288d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0022893:	77 25                	ja     c00228ba <ATA::write(unsigned long long, int, void*)+0x48>
c0022895:	b8 06 00 00 00       	mov    eax,0x6
c002289a:	85 f6                	test   esi,esi
c002289c:	74 1c                	je     c00228ba <ATA::write(unsigned long long, int, void*)+0x48>
c002289e:	50                   	push   eax
c002289f:	50                   	push   eax
c00228a0:	6a 01                	push   0x1
c00228a2:	56                   	push   esi
c00228a3:	52                   	push   edx
c00228a4:	53                   	push   ebx
c00228a5:	51                   	push   ecx
c00228a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00228aa:	e8 87 fb ff ff       	call   c0022436 <ATA::access(unsigned long long, int, void*, bool)>
c00228af:	83 c4 20             	add    esp,0x20
c00228b2:	85 c0                	test   eax,eax
c00228b4:	0f 95 c0             	setne  al
c00228b7:	0f b6 c0             	movzx  eax,al
c00228ba:	5b                   	pop    ebx
c00228bb:	5e                   	pop    esi
c00228bc:	5f                   	pop    edi
c00228bd:	c3                   	ret    

c00228be <ATA::detectCHS()>:
c00228be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00228c2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00228c8:	c1 e0 06             	shl    eax,0x6
c00228cb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00228d1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00228db:	c7 44 24 04 dc e3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002e3dc
c00228e3:	e9 64 de fe ff       	jmp    c001074c <KePanic(char const*)>

c00228e8 <ATA::open(int, int, void*)>:
c00228e8:	53                   	push   ebx
c00228e9:	83 ec 08             	sub    esp,0x8
c00228ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00228f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00228f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00228f8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00228fe:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0022904:	c1 e0 06             	shl    eax,0x6
c0022907:	01 d0                	add    eax,edx
c0022909:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0022910:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0022916:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002291d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0022927:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002292d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0022934:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002293b:	75 0c                	jne    c0022949 <ATA::open(int, int, void*)+0x61>
c002293d:	83 ec 0c             	sub    esp,0xc
c0022940:	53                   	push   ebx
c0022941:	e8 78 ff ff ff       	call   c00228be <ATA::detectCHS()>
c0022946:	83 c4 10             	add    esp,0x10
c0022949:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002294f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022955:	c1 e0 06             	shl    eax,0x6
c0022958:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002295f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0022969:	d1 e8                	shr    eax,1
c002296b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0022971:	6a 04                	push   0x4
c0022973:	6a 0c                	push   0xc
c0022975:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002297c:	50                   	push   eax
c002297d:	52                   	push   edx
c002297e:	e8 8d e8 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022983:	90                   	nop
c0022984:	90                   	nop
c0022985:	6a 00                	push   0x0
c0022987:	6a 0c                	push   0xc
c0022989:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022990:	50                   	push   eax
c0022991:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022997:	e8 74 e8 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002299c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00229a2:	83 c4 20             	add    esp,0x20
c00229a5:	c1 e0 06             	shl    eax,0x6
c00229a8:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c00229ae:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c00229b5:	0f 84 00 01 00 00    	je     c0022abb <ATA::open(int, int, void*)+0x1d3>
c00229bb:	83 ec 0c             	sub    esp,0xc
c00229be:	6a 08                	push   0x8
c00229c0:	e8 62 e0 fe ff       	call   c0010a27 <Phys::allocateContiguousPages(int)>
c00229c5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00229cb:	c7 04 24 ee e3 02 c0 	mov    DWORD PTR [esp],0xc002e3ee
c00229d2:	e8 a5 45 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00229d7:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00229de:	e8 00 13 ff ff       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c00229e3:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00229e9:	6a 03                	push   0x3
c00229eb:	50                   	push   eax
c00229ec:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00229f2:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c00229f8:	e8 c9 19 ff ff       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00229fd:	83 c4 20             	add    esp,0x20
c0022a00:	e8 3b df fe ff       	call   c0010940 <Phys::allocatePage()>
c0022a05:	83 ec 0c             	sub    esp,0xc
c0022a08:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c0022a0e:	6a 01                	push   0x1
c0022a10:	e8 ce 12 ff ff       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c0022a15:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c0022a1b:	6a 03                	push   0x3
c0022a1d:	50                   	push   eax
c0022a1e:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c0022a24:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c0022a2a:	e8 97 19 ff ff       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0022a2f:	83 c4 14             	add    esp,0x14
c0022a32:	68 27 e4 02 c0       	push   0xc002e427
c0022a37:	e8 40 45 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0022a3c:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c0022a43:	50                   	push   eax
c0022a44:	6a 12                	push   0x12
c0022a46:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022a4d:	50                   	push   eax
c0022a4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022a54:	e8 b7 e7 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a59:	83 c4 20             	add    esp,0x20
c0022a5c:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c0022a62:	0f b6 c4             	movzx  eax,ah
c0022a65:	50                   	push   eax
c0022a66:	6a 13                	push   0x13
c0022a68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022a6f:	50                   	push   eax
c0022a70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022a76:	e8 95 e7 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a7b:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c0022a82:	50                   	push   eax
c0022a83:	6a 14                	push   0x14
c0022a85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022a8c:	50                   	push   eax
c0022a8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022a93:	e8 78 e7 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a98:	83 c4 20             	add    esp,0x20
c0022a9b:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c0022aa2:	50                   	push   eax
c0022aa3:	6a 15                	push   0x15
c0022aa5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022aac:	50                   	push   eax
c0022aad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022ab3:	e8 58 e7 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ab8:	83 c4 10             	add    esp,0x10
c0022abb:	83 ec 0c             	sub    esp,0xc
c0022abe:	53                   	push   ebx
c0022abf:	e8 06 7e fe ff       	call   c000a8ca <PhysicalDisk::startCache()>
c0022ac4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022ac7:	e8 6a 8c fe ff       	call   c000b736 <createPartitionsForDisk(PhysicalDisk*)>
c0022acc:	31 c0                	xor    eax,eax
c0022ace:	83 c4 18             	add    esp,0x18
c0022ad1:	5b                   	pop    ebx
c0022ad2:	c3                   	ret    

c0022ad3 <combineCharAndColour(char, unsigned char)>:
c0022ad3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022ad8:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c0022ade:	c1 e0 08             	shl    eax,0x8
c0022ae1:	09 d0                	or     eax,edx
c0022ae3:	c3                   	ret    

c0022ae4 <combineColours(unsigned char, unsigned char)>:
c0022ae4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022ae9:	c1 e0 04             	shl    eax,0x4
c0022aec:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0022af0:	c3                   	ret    
c0022af1:	90                   	nop

c0022af2 <ATAPI::write(unsigned long long, int, void*)>:
c0022af2:	b8 03 00 00 00       	mov    eax,0x3
c0022af7:	c3                   	ret    

c0022af8 <ATAPI::close(int, int, void*)>:
c0022af8:	83 ec 0c             	sub    esp,0xc
c0022afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022b05:	85 c0                	test   eax,eax
c0022b07:	74 0c                	je     c0022b15 <ATAPI::close(int, int, void*)+0x1d>
c0022b09:	83 ec 0c             	sub    esp,0xc
c0022b0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0022b0e:	50                   	push   eax
c0022b0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022b12:	83 c4 10             	add    esp,0x10
c0022b15:	31 c0                	xor    eax,eax
c0022b17:	83 c4 0c             	add    esp,0xc
c0022b1a:	c3                   	ret    
c0022b1b:	90                   	nop

c0022b1c <ATAPI::ATAPI()>:
c0022b1c:	83 ec 0c             	sub    esp,0xc
c0022b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b23:	83 ec 04             	sub    esp,0x4
c0022b26:	68 00 08 00 00       	push   0x800
c0022b2b:	68 d9 e5 02 c0       	push   0xc002e5d9
c0022b30:	50                   	push   eax
c0022b31:	e8 2c 7d fe ff       	call   c000a862 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022b36:	83 c4 10             	add    esp,0x10
c0022b39:	ba e8 e4 02 c0       	mov    edx,0xc002e4e8
c0022b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b42:	89 10                	mov    DWORD PTR [eax],edx
c0022b44:	90                   	nop
c0022b45:	83 c4 0c             	add    esp,0xc
c0022b48:	c3                   	ret    
c0022b49:	90                   	nop

c0022b4a <ATAPI::readyForCommand()>:
c0022b4a:	56                   	push   esi
c0022b4b:	53                   	push   ebx
c0022b4c:	31 db                	xor    ebx,ebx
c0022b4e:	50                   	push   eax
c0022b4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022b53:	50                   	push   eax
c0022b54:	6a 0c                	push   0xc
c0022b56:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022b5d:	50                   	push   eax
c0022b5e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022b64:	e8 67 e7 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0022b69:	83 c4 10             	add    esp,0x10
c0022b6c:	a8 88                	test   al,0x88
c0022b6e:	74 26                	je     c0022b96 <ATAPI::readyForCommand()+0x4c>
c0022b70:	43                   	inc    ebx
c0022b71:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0022b77:	7e da                	jle    c0022b53 <ATAPI::readyForCommand()+0x9>
c0022b79:	51                   	push   ecx
c0022b7a:	51                   	push   ecx
c0022b7b:	6a 00                	push   0x0
c0022b7d:	68 5e 01 00 00       	push   0x15e
c0022b82:	e8 51 49 ff ff       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c0022b87:	83 c4 10             	add    esp,0x10
c0022b8a:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0022b90:	75 c1                	jne    c0022b53 <ATAPI::readyForCommand()+0x9>
c0022b92:	31 c0                	xor    eax,eax
c0022b94:	eb 02                	jmp    c0022b98 <ATAPI::readyForCommand()+0x4e>
c0022b96:	b0 01                	mov    al,0x1
c0022b98:	5a                   	pop    edx
c0022b99:	5b                   	pop    ebx
c0022b9a:	5e                   	pop    esi
c0022b9b:	c3                   	ret    

c0022b9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0022b9c:	55                   	push   ebp
c0022b9d:	57                   	push   edi
c0022b9e:	56                   	push   esi
c0022b9f:	53                   	push   ebx
c0022ba0:	83 ec 20             	sub    esp,0x20
c0022ba3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022ba7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022bab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022baf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022bb3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022bb7:	6a 01                	push   0x1
c0022bb9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022bc0:	50                   	push   eax
c0022bc1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022bc7:	e8 4e e8 ff ff       	call   c002141a <IDE::enableIRQs(unsigned char, bool)>
c0022bcc:	5e                   	pop    esi
c0022bcd:	58                   	pop    eax
c0022bce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022bd5:	50                   	push   eax
c0022bd6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022bdc:	e8 09 e6 ff ff       	call   c00211ea <IDE::prepareInterrupt(unsigned char)>
c0022be1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0022be4:	e8 61 ff ff ff       	call   c0022b4a <ATAPI::readyForCommand()>
c0022be9:	83 c4 10             	add    esp,0x10
c0022bec:	84 c0                	test   al,al
c0022bee:	75 0a                	jne    c0022bfa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0022bf0:	bb 01 00 00 00       	mov    ebx,0x1
c0022bf5:	e9 60 02 00 00       	jmp    c0022e5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0022bfa:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0022c00:	c1 e0 04             	shl    eax,0x4
c0022c03:	0f b6 c0             	movzx  eax,al
c0022c06:	50                   	push   eax
c0022c07:	6a 06                	push   0x6
c0022c09:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022c10:	50                   	push   eax
c0022c11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022c17:	e8 f4 e5 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c1c:	6a 00                	push   0x0
c0022c1e:	6a 01                	push   0x1
c0022c20:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022c27:	50                   	push   eax
c0022c28:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022c2e:	e8 dd e5 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c33:	83 c4 20             	add    esp,0x20
c0022c36:	0f b6 c3             	movzx  eax,bl
c0022c39:	0f b6 df             	movzx  ebx,bh
c0022c3c:	50                   	push   eax
c0022c3d:	6a 04                	push   0x4
c0022c3f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022c46:	50                   	push   eax
c0022c47:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022c4d:	e8 be e5 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c52:	53                   	push   ebx
c0022c53:	6a 05                	push   0x5
c0022c55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022c5c:	50                   	push   eax
c0022c5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022c63:	e8 a8 e5 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c68:	83 c4 20             	add    esp,0x20
c0022c6b:	68 a0 00 00 00       	push   0xa0
c0022c70:	6a 07                	push   0x7
c0022c72:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022c79:	50                   	push   eax
c0022c7a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022c80:	e8 8b e5 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c85:	83 c4 0c             	add    esp,0xc
c0022c88:	6a 01                	push   0x1
c0022c8a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022c91:	50                   	push   eax
c0022c92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022c98:	e8 19 f3 ff ff       	call   c0021fb6 <IDE::polling(unsigned char, unsigned int)>
c0022c9d:	83 c4 10             	add    esp,0x10
c0022ca0:	0f b6 d8             	movzx  ebx,al
c0022ca3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c0022ca9:	85 db                	test   ebx,ebx
c0022cab:	74 20                	je     c0022ccd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0022cad:	53                   	push   ebx
c0022cae:	0f b6 c0             	movzx  eax,al
c0022cb1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c0022cb8:	52                   	push   edx
c0022cb9:	50                   	push   eax
c0022cba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022cc0:	e8 37 f2 ff ff       	call   c0021efc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0022cc5:	83 c4 10             	add    esp,0x10
c0022cc8:	e9 8d 01 00 00       	jmp    c0022e5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0022ccd:	0f b6 c0             	movzx  eax,al
c0022cd0:	53                   	push   ebx
c0022cd1:	53                   	push   ebx
c0022cd2:	50                   	push   eax
c0022cd3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022cd9:	e8 20 e5 ff ff       	call   c00211fe <IDE::getBase(unsigned char)>
c0022cde:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022ce2:	b9 06 00 00 00       	mov    ecx,0x6
c0022ce7:	89 c2                	mov    edx,eax
c0022ce9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0022cec:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022cf0:	83 c4 10             	add    esp,0x10
c0022cf3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0022cf8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022cfc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022d02:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022d09:	85 db                	test   ebx,ebx
c0022d0b:	0f 84 ec 00 00 00    	je     c0022dfd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c0022d11:	51                   	push   ecx
c0022d12:	51                   	push   ecx
c0022d13:	52                   	push   edx
c0022d14:	50                   	push   eax
c0022d15:	e8 64 e6 ff ff       	call   c002137e <IDE::waitInterrupt(unsigned char)>
c0022d1a:	83 c4 10             	add    esp,0x10
c0022d1d:	84 c0                	test   al,al
c0022d1f:	0f 84 cb fe ff ff    	je     c0022bf0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0022d25:	56                   	push   esi
c0022d26:	56                   	push   esi
c0022d27:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022d2e:	50                   	push   eax
c0022d2f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022d35:	e8 b0 e4 ff ff       	call   c00211ea <IDE::prepareInterrupt(unsigned char)>
c0022d3a:	83 c4 0c             	add    esp,0xc
c0022d3d:	6a 04                	push   0x4
c0022d3f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022d46:	50                   	push   eax
c0022d47:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022d4d:	e8 7e e5 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0022d52:	83 c4 0c             	add    esp,0xc
c0022d55:	89 c6                	mov    esi,eax
c0022d57:	6a 05                	push   0x5
c0022d59:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022d60:	50                   	push   eax
c0022d61:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022d67:	e8 64 e5 ff ff       	call   c00212d0 <IDE::read(unsigned char, unsigned char)>
c0022d6c:	89 f1                	mov    ecx,esi
c0022d6e:	0f b6 c0             	movzx  eax,al
c0022d71:	0f b6 f1             	movzx  esi,cl
c0022d74:	c1 e0 08             	shl    eax,0x8
c0022d77:	09 c6                	or     esi,eax
c0022d79:	d1 fe                	sar    esi,1
c0022d7b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0022d7f:	83 c4 10             	add    esp,0x10
c0022d82:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0022d87:	74 41                	je     c0022dca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c0022d89:	31 c9                	xor    ecx,ecx
c0022d8b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022d91:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022d98:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0022d9c:	75 0a                	jne    c0022da8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c0022d9e:	01 c9                	add    ecx,ecx
c0022da0:	01 cd                	add    ebp,ecx
c0022da2:	4b                   	dec    ebx
c0022da3:	e9 54 ff ff ff       	jmp    c0022cfc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c0022da8:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0022dad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022db1:	51                   	push   ecx
c0022db2:	51                   	push   ecx
c0022db3:	52                   	push   edx
c0022db4:	50                   	push   eax
c0022db5:	e8 44 e4 ff ff       	call   c00211fe <IDE::getBase(unsigned char)>
c0022dba:	89 c2                	mov    edx,eax
c0022dbc:	89 f0                	mov    eax,esi
c0022dbe:	66 ef                	out    dx,ax
c0022dc0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022dc4:	83 c4 10             	add    esp,0x10
c0022dc7:	41                   	inc    ecx
c0022dc8:	eb c1                	jmp    c0022d8b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c0022dca:	31 f6                	xor    esi,esi
c0022dcc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022dd2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022dd9:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0022ddd:	75 06                	jne    c0022de5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c0022ddf:	01 f6                	add    esi,esi
c0022de1:	01 f5                	add    ebp,esi
c0022de3:	eb bd                	jmp    c0022da2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c0022de5:	51                   	push   ecx
c0022de6:	51                   	push   ecx
c0022de7:	52                   	push   edx
c0022de8:	50                   	push   eax
c0022de9:	e8 10 e4 ff ff       	call   c00211fe <IDE::getBase(unsigned char)>
c0022dee:	89 c2                	mov    edx,eax
c0022df0:	66 ed                	in     ax,dx
c0022df2:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0022df7:	83 c4 10             	add    esp,0x10
c0022dfa:	46                   	inc    esi
c0022dfb:	eb cf                	jmp    c0022dcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c0022dfd:	51                   	push   ecx
c0022dfe:	51                   	push   ecx
c0022dff:	52                   	push   edx
c0022e00:	50                   	push   eax
c0022e01:	e8 78 e5 ff ff       	call   c002137e <IDE::waitInterrupt(unsigned char)>
c0022e06:	83 c4 10             	add    esp,0x10
c0022e09:	84 c0                	test   al,al
c0022e0b:	0f 84 df fd ff ff    	je     c0022bf0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0022e11:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022e16:	52                   	push   edx
c0022e17:	52                   	push   edx
c0022e18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022e1f:	50                   	push   eax
c0022e20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022e26:	e8 bf e3 ff ff       	call   c00211ea <IDE::prepareInterrupt(unsigned char)>
c0022e2b:	83 c4 10             	add    esp,0x10
c0022e2e:	50                   	push   eax
c0022e2f:	50                   	push   eax
c0022e30:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022e37:	50                   	push   eax
c0022e38:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022e3e:	e8 bb e3 ff ff       	call   c00211fe <IDE::getBase(unsigned char)>
c0022e43:	8d 50 07             	lea    edx,[eax+0x7]
c0022e46:	ec                   	in     al,dx
c0022e47:	83 c4 10             	add    esp,0x10
c0022e4a:	a8 88                	test   al,0x88
c0022e4c:	74 0a                	je     c0022e58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c0022e4e:	4b                   	dec    ebx
c0022e4f:	75 dd                	jne    c0022e2e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c0022e51:	bb 02 00 00 00       	mov    ebx,0x2
c0022e56:	eb 02                	jmp    c0022e5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0022e58:	31 db                	xor    ebx,ebx
c0022e5a:	83 c4 1c             	add    esp,0x1c
c0022e5d:	89 d8                	mov    eax,ebx
c0022e5f:	5b                   	pop    ebx
c0022e60:	5e                   	pop    esi
c0022e61:	5f                   	pop    edi
c0022e62:	5d                   	pop    ebp
c0022e63:	c3                   	ret    

c0022e64 <ATAPI::diskRemoved()>:
c0022e64:	53                   	push   ebx
c0022e65:	83 ec 14             	sub    esp,0x14
c0022e68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022e6c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0022e73:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0022e79:	e8 a6 85 fe ff       	call   c000b424 <LogicalDisk::unmount()>
c0022e7e:	58                   	pop    eax
c0022e7f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0022e85:	e8 82 8f fe ff       	call   c000be0c <VCache::writeWriteBuffer()>
c0022e8a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0022e90:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022e94:	83 c4 18             	add    esp,0x18
c0022e97:	5b                   	pop    ebx
c0022e98:	e9 5f 8f fe ff       	jmp    c000bdfc <VCache::invalidateReadBuffer()>
c0022e9d:	90                   	nop

c0022e9e <ATAPI::eject()>:
c0022e9e:	57                   	push   edi
c0022e9f:	b9 03 00 00 00       	mov    ecx,0x3
c0022ea4:	53                   	push   ebx
c0022ea5:	83 ec 14             	sub    esp,0x14
c0022ea8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022eac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022eb0:	fc                   	cld    
c0022eb1:	31 c0                	xor    eax,eax
c0022eb3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022eb5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0022eba:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0022ebf:	50                   	push   eax
c0022ec0:	50                   	push   eax
c0022ec1:	6a 00                	push   0x0
c0022ec3:	6a 00                	push   0x0
c0022ec5:	6a 00                	push   0x0
c0022ec7:	6a 02                	push   0x2
c0022ec9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022ecd:	50                   	push   eax
c0022ece:	53                   	push   ebx
c0022ecf:	e8 c8 fc ff ff       	call   c0022b9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022ed4:	83 c4 14             	add    esp,0x14
c0022ed7:	53                   	push   ebx
c0022ed8:	e8 87 ff ff ff       	call   c0022e64 <ATAPI::diskRemoved()>
c0022edd:	83 c4 24             	add    esp,0x24
c0022ee0:	31 c0                	xor    eax,eax
c0022ee2:	5b                   	pop    ebx
c0022ee3:	5f                   	pop    edi
c0022ee4:	c3                   	ret    
c0022ee5:	90                   	nop

c0022ee6 <ATAPI::diskInserted()>:
c0022ee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022eea:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0022ef1:	c3                   	ret    

c0022ef2 <ATAPI::detectMedia()>:
c0022ef2:	56                   	push   esi
c0022ef3:	53                   	push   ebx
c0022ef4:	83 ec 28             	sub    esp,0x28
c0022ef7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022efb:	6a 0c                	push   0xc
c0022efd:	6a 00                	push   0x0
c0022eff:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0022f03:	56                   	push   esi
c0022f04:	e8 e7 d5 fd ff       	call   c00004f0 <memset>
c0022f09:	58                   	pop    eax
c0022f0a:	5a                   	pop    edx
c0022f0b:	6a 00                	push   0x0
c0022f0d:	6a 00                	push   0x0
c0022f0f:	6a 00                	push   0x0
c0022f11:	6a 00                	push   0x0
c0022f13:	56                   	push   esi
c0022f14:	53                   	push   ebx
c0022f15:	e8 82 fc ff ff       	call   c0022b9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022f1a:	83 c4 1c             	add    esp,0x1c
c0022f1d:	6a 0c                	push   0xc
c0022f1f:	6a 00                	push   0x0
c0022f21:	56                   	push   esi
c0022f22:	e8 c9 d5 fd ff       	call   c00004f0 <memset>
c0022f27:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0022f2c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0022f31:	59                   	pop    ecx
c0022f32:	58                   	pop    eax
c0022f33:	6a 01                	push   0x1
c0022f35:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022f39:	50                   	push   eax
c0022f3a:	6a 00                	push   0x0
c0022f3c:	6a 12                	push   0x12
c0022f3e:	56                   	push   esi
c0022f3f:	53                   	push   ebx
c0022f40:	e8 57 fc ff ff       	call   c0022b9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022f45:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0022f49:	83 c4 20             	add    esp,0x20
c0022f4c:	83 e0 7f             	and    eax,0x7f
c0022f4f:	83 f8 70             	cmp    eax,0x70
c0022f52:	74 15                	je     c0022f69 <ATAPI::detectMedia()+0x77>
c0022f54:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022f5b:	75 0c                	jne    c0022f69 <ATAPI::detectMedia()+0x77>
c0022f5d:	83 ec 0c             	sub    esp,0xc
c0022f60:	53                   	push   ebx
c0022f61:	e8 80 ff ff ff       	call   c0022ee6 <ATAPI::diskInserted()>
c0022f66:	83 c4 10             	add    esp,0x10
c0022f69:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022f6d:	83 e0 0f             	and    eax,0xf
c0022f70:	83 f8 02             	cmp    eax,0x2
c0022f73:	75 1b                	jne    c0022f90 <ATAPI::detectMedia()+0x9e>
c0022f75:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0022f7a:	75 2d                	jne    c0022fa9 <ATAPI::detectMedia()+0xb7>
c0022f7c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022f83:	74 24                	je     c0022fa9 <ATAPI::detectMedia()+0xb7>
c0022f85:	83 ec 0c             	sub    esp,0xc
c0022f88:	53                   	push   ebx
c0022f89:	e8 d6 fe ff ff       	call   c0022e64 <ATAPI::diskRemoved()>
c0022f8e:	eb 16                	jmp    c0022fa6 <ATAPI::detectMedia()+0xb4>
c0022f90:	85 c0                	test   eax,eax
c0022f92:	75 15                	jne    c0022fa9 <ATAPI::detectMedia()+0xb7>
c0022f94:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022f9b:	75 0c                	jne    c0022fa9 <ATAPI::detectMedia()+0xb7>
c0022f9d:	83 ec 0c             	sub    esp,0xc
c0022fa0:	53                   	push   ebx
c0022fa1:	e8 40 ff ff ff       	call   c0022ee6 <ATAPI::diskInserted()>
c0022fa6:	83 c4 10             	add    esp,0x10
c0022fa9:	83 c4 24             	add    esp,0x24
c0022fac:	5b                   	pop    ebx
c0022fad:	5e                   	pop    esi
c0022fae:	c3                   	ret    
c0022faf:	90                   	nop

c0022fb0 <ATAPI::open(int, int, void*)>:
c0022fb0:	56                   	push   esi
c0022fb1:	53                   	push   ebx
c0022fb2:	50                   	push   eax
c0022fb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022fb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022fbb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022fbf:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0022fc5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0022fcb:	c1 e0 06             	shl    eax,0x6
c0022fce:	01 d0                	add    eax,edx
c0022fd0:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0022fd7:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0022fdd:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0022fe4:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0022fee:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0022ff4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0022ffb:	6a 04                	push   0x4
c0022ffd:	6a 0c                	push   0xc
c0022fff:	51                   	push   ecx
c0023000:	52                   	push   edx
c0023001:	e8 0a e2 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023006:	90                   	nop
c0023007:	90                   	nop
c0023008:	6a 00                	push   0x0
c002300a:	6a 0c                	push   0xc
c002300c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023013:	50                   	push   eax
c0023014:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002301a:	e8 f1 e1 ff ff       	call   c0021210 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002301f:	83 c4 14             	add    esp,0x14
c0023022:	68 78 01 00 00       	push   0x178
c0023027:	e8 cb d2 fe ff       	call   c00102f7 <malloc>
c002302c:	83 c4 0c             	add    esp,0xc
c002302f:	89 c6                	mov    esi,eax
c0023031:	6a 00                	push   0x0
c0023033:	68 ff ff ff 7f       	push   0x7fffffff
c0023038:	6a 00                	push   0x0
c002303a:	6a 00                	push   0x0
c002303c:	53                   	push   ebx
c002303d:	68 8b e6 02 c0       	push   0xc002e68b
c0023042:	50                   	push   eax
c0023043:	e8 1a 82 fe ff       	call   c000b262 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0023048:	83 c4 14             	add    esp,0x14
c002304b:	56                   	push   esi
c002304c:	e8 d1 82 fe ff       	call   c000b322 <LogicalDisk::assignDriveLetter()>
c0023051:	5a                   	pop    edx
c0023052:	0f be c0             	movsx  eax,al
c0023055:	59                   	pop    ecx
c0023056:	50                   	push   eax
c0023057:	68 d0 e4 02 c0       	push   0xc002e4d0
c002305c:	e8 1b 3f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023061:	58                   	pop    eax
c0023062:	5a                   	pop    edx
c0023063:	56                   	push   esi
c0023064:	53                   	push   ebx
c0023065:	e8 16 74 fe ff       	call   c000a480 <Device::addChild(Device*)>
c002306a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0023070:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023073:	e8 52 78 fe ff       	call   c000a8ca <PhysicalDisk::startCache()>
c0023078:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002307f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023082:	e8 6b fe ff ff       	call   c0022ef2 <ATAPI::detectMedia()>
c0023087:	83 c4 14             	add    esp,0x14
c002308a:	31 c0                	xor    eax,eax
c002308c:	5b                   	pop    ebx
c002308d:	5e                   	pop    esi
c002308e:	c3                   	ret    
c002308f:	90                   	nop

c0023090 <ATAPI::read(unsigned long long, int, void*)>:
c0023090:	55                   	push   ebp
c0023091:	57                   	push   edi
c0023092:	56                   	push   esi
c0023093:	53                   	push   ebx
c0023094:	83 ec 1c             	sub    esp,0x1c
c0023097:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002309b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002309f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00230a3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00230aa:	74 3c                	je     c00230e8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c00230ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00230b0:	b9 03 00 00 00       	mov    ecx,0x3
c00230b5:	fc                   	cld    
c00230b6:	31 c0                	xor    eax,eax
c00230b8:	0f ce                	bswap  esi
c00230ba:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00230bc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00230c1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c00230c5:	89 e8                	mov    eax,ebp
c00230c7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00230cb:	50                   	push   eax
c00230cc:	50                   	push   eax
c00230cd:	55                   	push   ebp
c00230ce:	c1 e5 0b             	shl    ebp,0xb
c00230d1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00230d5:	6a 00                	push   0x0
c00230d7:	55                   	push   ebp
c00230d8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00230dc:	50                   	push   eax
c00230dd:	53                   	push   ebx
c00230de:	e8 b9 fa ff ff       	call   c0022b9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00230e3:	83 c4 20             	add    esp,0x20
c00230e6:	eb 1a                	jmp    c0023102 <ATAPI::read(unsigned long long, int, void*)+0x72>
c00230e8:	83 ec 0c             	sub    esp,0xc
c00230eb:	53                   	push   ebx
c00230ec:	e8 01 fe ff ff       	call   c0022ef2 <ATAPI::detectMedia()>
c00230f1:	83 c4 10             	add    esp,0x10
c00230f4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00230fb:	75 af                	jne    c00230ac <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00230fd:	b8 02 00 00 00       	mov    eax,0x2
c0023102:	83 c4 1c             	add    esp,0x1c
c0023105:	5b                   	pop    ebx
c0023106:	5e                   	pop    esi
c0023107:	5f                   	pop    edi
c0023108:	5d                   	pop    ebp
c0023109:	c3                   	ret    

c002310a <SATA::close(int, int, void*)>:
c002310a:	83 ec 0c             	sub    esp,0xc
c002310d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023111:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023117:	85 c0                	test   eax,eax
c0023119:	74 0c                	je     c0023127 <SATA::close(int, int, void*)+0x1d>
c002311b:	83 ec 0c             	sub    esp,0xc
c002311e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023120:	50                   	push   eax
c0023121:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023124:	83 c4 10             	add    esp,0x10
c0023127:	31 c0                	xor    eax,eax
c0023129:	83 c4 0c             	add    esp,0xc
c002312c:	c3                   	ret    
c002312d:	90                   	nop

c002312e <SATA::powerSaving(PowerSavingLevel)>:
c002312e:	c3                   	ret    
c002312f:	90                   	nop

c0023130 <SATA::open(int, int, void*)>:
c0023130:	56                   	push   esi
c0023131:	53                   	push   ebx
c0023132:	83 ec 10             	sub    esp,0x10
c0023135:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023139:	68 18 e5 02 c0       	push   0xc002e518
c002313e:	e8 39 3e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023143:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023147:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023151:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023157:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0023161:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023165:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002316f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023175:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002317c:	e8 bf d7 fe ff       	call   c0010940 <Phys::allocatePage()>
c0023181:	89 c6                	mov    esi,eax
c0023183:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023189:	81 c6 00 10 00 00    	add    esi,0x1000
c002318f:	e8 ac d7 fe ff       	call   c0010940 <Phys::allocatePage()>
c0023194:	83 c4 10             	add    esp,0x10
c0023197:	39 c6                	cmp    esi,eax
c0023199:	74 10                	je     c00231ab <SATA::open(int, int, void*)+0x7b>
c002319b:	83 ec 0c             	sub    esp,0xc
c002319e:	68 24 e5 02 c0       	push   0xc002e524
c00231a3:	e8 a4 d5 fe ff       	call   c001074c <KePanic(char const*)>
c00231a8:	83 c4 10             	add    esp,0x10
c00231ab:	83 ec 0c             	sub    esp,0xc
c00231ae:	6a 02                	push   0x2
c00231b0:	e8 2e 0b ff ff       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c00231b5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00231bb:	6a 03                	push   0x3
c00231bd:	50                   	push   eax
c00231be:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00231c4:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c00231ca:	e8 f7 11 ff ff       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00231cf:	83 c4 14             	add    esp,0x14
c00231d2:	53                   	push   ebx
c00231d3:	e8 f2 76 fe ff       	call   c000a8ca <PhysicalDisk::startCache()>
c00231d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00231db:	e8 56 85 fe ff       	call   c000b736 <createPartitionsForDisk(PhysicalDisk*)>
c00231e0:	83 c4 14             	add    esp,0x14
c00231e3:	31 c0                	xor    eax,eax
c00231e5:	5b                   	pop    ebx
c00231e6:	5e                   	pop    esi
c00231e7:	c3                   	ret    

c00231e8 <SATA::SATA()>:
c00231e8:	83 ec 0c             	sub    esp,0xc
c00231eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231ef:	83 ec 04             	sub    esp,0x4
c00231f2:	68 00 02 00 00       	push   0x200
c00231f7:	68 38 e5 02 c0       	push   0xc002e538
c00231fc:	50                   	push   eax
c00231fd:	e8 60 76 fe ff       	call   c000a862 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023202:	83 c4 10             	add    esp,0x10
c0023205:	ba a8 e5 02 c0       	mov    edx,0xc002e5a8
c002320a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002320e:	89 10                	mov    DWORD PTR [eax],edx
c0023210:	90                   	nop
c0023211:	83 c4 0c             	add    esp,0xc
c0023214:	c3                   	ret    
c0023215:	90                   	nop

c0023216 <SATA::access(unsigned long long, int, void*, bool)>:
c0023216:	55                   	push   ebp
c0023217:	57                   	push   edi
c0023218:	56                   	push   esi
c0023219:	53                   	push   ebx
c002321a:	83 ec 2c             	sub    esp,0x2c
c002321d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0023221:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023225:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023229:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002322d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023235:	fa                   	cli    
c0023236:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c002323c:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0023241:	7e 10                	jle    c0023253 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c0023243:	83 ec 0c             	sub    esp,0xc
c0023246:	68 48 e5 02 c0       	push   0xc002e548
c002324b:	e8 fc d4 fe ff       	call   c001074c <KePanic(char const*)>
c0023250:	83 c4 10             	add    esp,0x10
c0023253:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023259:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002325f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023269:	89 d0                	mov    eax,edx
c002326b:	c1 e0 07             	shl    eax,0x7
c002326e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0023272:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002327c:	51                   	push   ecx
c002327d:	8d 42 02             	lea    eax,[edx+0x2]
c0023280:	51                   	push   ecx
c0023281:	c1 e0 07             	shl    eax,0x7
c0023284:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023288:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002328c:	50                   	push   eax
c002328d:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023293:	e8 fe ed ff ff       	call   c0022096 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023298:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002329c:	83 c4 10             	add    esp,0x10
c002329f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00232a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00232a8:	0f 84 a4 01 00 00    	je     c0023452 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c00232ae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00232b2:	c1 e0 09             	shl    eax,0x9
c00232b5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00232ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00232be:	74 0e                	je     c00232ce <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c00232c0:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00232c6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00232ca:	89 c1                	mov    ecx,eax
c00232cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00232ce:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00232d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00232d8:	8d 42 02             	lea    eax,[edx+0x2]
c00232db:	c1 e0 07             	shl    eax,0x7
c00232de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00232e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00232e4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00232ea:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00232f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00232f4:	c1 e1 05             	shl    ecx,0x5
c00232f7:	01 c8                	add    eax,ecx
c00232f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00232fd:	83 e1 01             	and    ecx,0x1
c0023300:	89 ce                	mov    esi,ecx
c0023302:	8a 08                	mov    cl,BYTE PTR [eax]
c0023304:	c1 e6 06             	shl    esi,0x6
c0023307:	83 e1 bf             	and    ecx,0xffffffbf
c002330a:	09 f1                	or     ecx,esi
c002330c:	88 08                	mov    BYTE PTR [eax],cl
c002330e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023310:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0023316:	81 c9 05 00 01 00    	or     ecx,0x10005
c002331c:	89 08                	mov    DWORD PTR [eax],ecx
c002331e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0023324:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002332a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0023330:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0023333:	50                   	push   eax
c0023334:	68 90 00 00 00       	push   0x90
c0023339:	6a 00                	push   0x0
c002333b:	56                   	push   esi
c002333c:	e8 af d1 fd ff       	call   c00004f0 <memset>
c0023341:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023347:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002334d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023351:	83 c4 10             	add    esp,0x10
c0023354:	48                   	dec    eax
c0023355:	25 ff ff 3f 00       	and    eax,0x3fffff
c002335a:	89 c1                	mov    ecx,eax
c002335c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0023362:	25 00 00 c0 ff       	and    eax,0xffc00000
c0023367:	09 c8                	or     eax,ecx
c0023369:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002336f:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0023375:	83 c8 80             	or     eax,0xffffff80
c0023378:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002337e:	66 8b 06             	mov    ax,WORD PTR [esi]
c0023381:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023385:	25 00 7f 00 00       	and    eax,0x7f00
c002338a:	0d 27 80 ff ff       	or     eax,0xffff8027
c002338f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0023394:	66 89 06             	mov    WORD PTR [esi],ax
c0023397:	b0 35                	mov    al,0x35
c0023399:	75 02                	jne    c002339d <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002339b:	b0 25                	mov    al,0x25
c002339d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00233a0:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00233a4:	89 e8                	mov    eax,ebp
c00233a6:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00233aa:	c1 e8 10             	shr    eax,0x10
c00233ad:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00233b0:	89 e8                	mov    eax,ebp
c00233b2:	c1 e8 18             	shr    eax,0x18
c00233b5:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00233b8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00233bc:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00233bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233c3:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00233c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00233ca:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00233ce:	89 d6                	mov    esi,edx
c00233d0:	31 c0                	xor    eax,eax
c00233d2:	c1 e6 07             	shl    esi,0x7
c00233d5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00233d9:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00233df:	80 e1 88             	and    cl,0x88
c00233e2:	74 0a                	je     c00233ee <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c00233e4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00233e9:	74 0a                	je     c00233f5 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00233eb:	40                   	inc    eax
c00233ec:	eb eb                	jmp    c00233d9 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c00233ee:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00233f3:	75 0a                	jne    c00233ff <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c00233f5:	83 ec 0c             	sub    esp,0xc
c00233f8:	68 81 e5 02 c0       	push   0xc002e581
c00233fd:	eb 36                	jmp    c0023435 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c00233ff:	b8 01 00 00 00       	mov    eax,0x1
c0023404:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0023408:	c1 e2 07             	shl    edx,0x7
c002340b:	d3 e0                	shl    eax,cl
c002340d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0023411:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0023417:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002341d:	85 c8                	test   eax,ecx
c002341f:	74 25                	je     c0023446 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0023421:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0023427:	0f ba e1 1e          	bt     ecx,0x1e
c002342b:	73 ea                	jae    c0023417 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002342d:	83 ec 0c             	sub    esp,0xc
c0023430:	68 8f e5 02 c0       	push   0xc002e58f
c0023435:	e8 42 3b fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c002343a:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0023441:	83 c4 10             	add    esp,0x10
c0023444:	eb 13                	jmp    c0023459 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c0023446:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002344c:	0f ba e0 1e          	bt     eax,0x1e
c0023450:	73 18                	jae    c002346a <SATA::access(unsigned long long, int, void*, bool)+0x254>
c0023452:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0023459:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0023460:	75 01                	jne    c0023463 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c0023462:	fb                   	sti    
c0023463:	b8 01 00 00 00       	mov    eax,0x1
c0023468:	eb 2c                	jmp    c0023496 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002346a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002346f:	75 10                	jne    c0023481 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c0023471:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0023477:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002347b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002347f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023481:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0023488:	a1 30 63 03 c0       	mov    eax,ds:0xc0036330
c002348d:	85 c0                	test   eax,eax
c002348f:	75 03                	jne    c0023494 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0023491:	fb                   	sti    
c0023492:	eb 02                	jmp    c0023496 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0023494:	31 c0                	xor    eax,eax
c0023496:	83 c4 2c             	add    esp,0x2c
c0023499:	5b                   	pop    ebx
c002349a:	5e                   	pop    esi
c002349b:	5f                   	pop    edi
c002349c:	5d                   	pop    ebp
c002349d:	c3                   	ret    

c002349e <SATA::read(unsigned long long, int, void*)>:
c002349e:	57                   	push   edi
c002349f:	b8 04 00 00 00       	mov    eax,0x4
c00234a4:	56                   	push   esi
c00234a5:	53                   	push   ebx
c00234a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00234aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00234ae:	8d 7a ff             	lea    edi,[edx-0x1]
c00234b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00234b5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00234b9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00234bf:	77 25                	ja     c00234e6 <SATA::read(unsigned long long, int, void*)+0x48>
c00234c1:	b8 06 00 00 00       	mov    eax,0x6
c00234c6:	85 f6                	test   esi,esi
c00234c8:	74 1c                	je     c00234e6 <SATA::read(unsigned long long, int, void*)+0x48>
c00234ca:	50                   	push   eax
c00234cb:	50                   	push   eax
c00234cc:	6a 00                	push   0x0
c00234ce:	56                   	push   esi
c00234cf:	52                   	push   edx
c00234d0:	53                   	push   ebx
c00234d1:	51                   	push   ecx
c00234d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00234d6:	e8 3b fd ff ff       	call   c0023216 <SATA::access(unsigned long long, int, void*, bool)>
c00234db:	83 c4 20             	add    esp,0x20
c00234de:	85 c0                	test   eax,eax
c00234e0:	0f 95 c0             	setne  al
c00234e3:	0f b6 c0             	movzx  eax,al
c00234e6:	5b                   	pop    ebx
c00234e7:	5e                   	pop    esi
c00234e8:	5f                   	pop    edi
c00234e9:	c3                   	ret    

c00234ea <SATA::write(unsigned long long, int, void*)>:
c00234ea:	55                   	push   ebp
c00234eb:	b8 04 00 00 00       	mov    eax,0x4
c00234f0:	57                   	push   edi
c00234f1:	56                   	push   esi
c00234f2:	53                   	push   ebx
c00234f3:	83 ec 0c             	sub    esp,0xc
c00234f6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00234fa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00234fe:	8d 73 ff             	lea    esi,[ebx-0x1]
c0023501:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0023505:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023509:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002350f:	77 3d                	ja     c002354e <SATA::write(unsigned long long, int, void*)+0x64>
c0023511:	b8 06 00 00 00       	mov    eax,0x6
c0023516:	85 ed                	test   ebp,ebp
c0023518:	74 34                	je     c002354e <SATA::write(unsigned long long, int, void*)+0x64>
c002351a:	c1 e3 09             	shl    ebx,0x9
c002351d:	01 eb                	add    ebx,ebp
c002351f:	89 d6                	mov    esi,edx
c0023521:	89 cf                	mov    edi,ecx
c0023523:	83 c6 01             	add    esi,0x1
c0023526:	83 d7 00             	adc    edi,0x0
c0023529:	50                   	push   eax
c002352a:	50                   	push   eax
c002352b:	6a 01                	push   0x1
c002352d:	55                   	push   ebp
c002352e:	81 c5 00 02 00 00    	add    ebp,0x200
c0023534:	6a 01                	push   0x1
c0023536:	51                   	push   ecx
c0023537:	52                   	push   edx
c0023538:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002353c:	e8 d5 fc ff ff       	call   c0023216 <SATA::access(unsigned long long, int, void*, bool)>
c0023541:	83 c4 20             	add    esp,0x20
c0023544:	89 f2                	mov    edx,esi
c0023546:	89 f9                	mov    ecx,edi
c0023548:	39 dd                	cmp    ebp,ebx
c002354a:	75 d3                	jne    c002351f <SATA::write(unsigned long long, int, void*)+0x35>
c002354c:	31 c0                	xor    eax,eax
c002354e:	83 c4 0c             	add    esp,0xc
c0023551:	5b                   	pop    ebx
c0023552:	5e                   	pop    esi
c0023553:	5f                   	pop    edi
c0023554:	5d                   	pop    ebp
c0023555:	c3                   	ret    

c0023556 <SATAPI::write(unsigned long long, int, void*)>:
c0023556:	b8 03 00 00 00       	mov    eax,0x3
c002355b:	c3                   	ret    

c002355c <SATAPI::close(int, int, void*)>:
c002355c:	83 ec 0c             	sub    esp,0xc
c002355f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023563:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023569:	85 c0                	test   eax,eax
c002356b:	74 0c                	je     c0023579 <SATAPI::close(int, int, void*)+0x1d>
c002356d:	83 ec 0c             	sub    esp,0xc
c0023570:	8b 10                	mov    edx,DWORD PTR [eax]
c0023572:	50                   	push   eax
c0023573:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023576:	83 c4 10             	add    esp,0x10
c0023579:	31 c0                	xor    eax,eax
c002357b:	83 c4 0c             	add    esp,0xc
c002357e:	c3                   	ret    
c002357f:	90                   	nop

c0023580 <SATAPI::SATAPI()>:
c0023580:	83 ec 0c             	sub    esp,0xc
c0023583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023587:	83 ec 04             	sub    esp,0x4
c002358a:	68 00 08 00 00       	push   0x800
c002358f:	68 d8 e5 02 c0       	push   0xc002e5d8
c0023594:	50                   	push   eax
c0023595:	e8 c8 72 fe ff       	call   c000a862 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002359a:	83 c4 10             	add    esp,0x10
c002359d:	ba cc e6 02 c0       	mov    edx,0xc002e6cc
c00235a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235a6:	89 10                	mov    DWORD PTR [eax],edx
c00235a8:	90                   	nop
c00235a9:	83 c4 0c             	add    esp,0xc
c00235ac:	c3                   	ret    
c00235ad:	90                   	nop

c00235ae <SATAPI::diskRemoved()>:
c00235ae:	c3                   	ret    
c00235af:	90                   	nop

c00235b0 <SATAPI::diskInserted()>:
c00235b0:	83 ec 18             	sub    esp,0x18
c00235b3:	68 e4 e5 02 c0       	push   0xc002e5e4
c00235b8:	e8 bf 39 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00235bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00235c1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00235c8:	83 c4 1c             	add    esp,0x1c
c00235cb:	c3                   	ret    

c00235cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00235cc:	55                   	push   ebp
c00235cd:	57                   	push   edi
c00235ce:	56                   	push   esi
c00235cf:	53                   	push   ebx
c00235d0:	83 ec 34             	sub    esp,0x34
c00235d3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00235d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00235db:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00235df:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00235e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00235e7:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00235ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00235f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00235f7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00235fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023601:	83 c0 02             	add    eax,0x2
c0023604:	c1 e0 07             	shl    eax,0x7
c0023607:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002360b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002360f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023613:	c1 e0 07             	shl    eax,0x7
c0023616:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002361a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002361e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023628:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002362c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0023632:	e8 5f ea ff ff       	call   c0022096 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023637:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002363b:	83 c4 10             	add    esp,0x10
c002363e:	b8 01 00 00 00       	mov    eax,0x1
c0023643:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0023648:	0f 84 57 02 00 00    	je     c00238a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c002364e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0023654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023658:	8b 00                	mov    eax,DWORD PTR [eax]
c002365a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0023660:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0023666:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002366a:	c1 e1 05             	shl    ecx,0x5
c002366d:	01 c8                	add    eax,ecx
c002366f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023671:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0023677:	81 c9 25 00 01 00    	or     ecx,0x10025
c002367d:	89 08                	mov    DWORD PTR [eax],ecx
c002367f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0023685:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002368b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0023691:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0023694:	8d 7b 40             	lea    edi,[ebx+0x40]
c0023697:	50                   	push   eax
c0023698:	68 90 00 00 00       	push   0x90
c002369d:	6a 00                	push   0x0
c002369f:	53                   	push   ebx
c00236a0:	e8 4b ce fd ff       	call   c00004f0 <memset>
c00236a5:	b9 0c 00 00 00       	mov    ecx,0xc
c00236aa:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00236ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00236b0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00236b6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00236ba:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00236c0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00236c4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00236c8:	48                   	dec    eax
c00236c9:	25 ff ff 3f 00       	and    eax,0x3fffff
c00236ce:	89 c1                	mov    ecx,eax
c00236d0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00236d6:	25 00 00 c0 ff       	and    eax,0xffc00000
c00236db:	09 c8                	or     eax,ecx
c00236dd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00236e3:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c00236e9:	83 c8 80             	or     eax,0xffffff80
c00236ec:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c00236f2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00236f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00236f9:	25 00 7f 00 00       	and    eax,0x7f00
c00236fe:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0023702:	0d 27 80 ff ff       	or     eax,0xffff8027
c0023707:	66 89 03             	mov    WORD PTR [ebx],ax
c002370a:	89 d0                	mov    eax,edx
c002370c:	c1 ea 18             	shr    edx,0x18
c002370f:	c1 e8 10             	shr    eax,0x10
c0023712:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0023715:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023718:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002371c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002371f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023723:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023726:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002372a:	83 c4 10             	add    esp,0x10
c002372d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0023731:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023735:	31 c0                	xor    eax,eax
c0023737:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002373d:	80 e1 88             	and    cl,0x88
c0023740:	74 0a                	je     c002374c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c0023742:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023747:	74 0a                	je     c0023753 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c0023749:	40                   	inc    eax
c002374a:	eb eb                	jmp    c0023737 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002374c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0023751:	75 43                	jne    c0023796 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0023753:	83 ec 0c             	sub    esp,0xc
c0023756:	68 fc e5 02 c0       	push   0xc002e5fc
c002375b:	e8 1c 38 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023760:	58                   	pop    eax
c0023761:	5a                   	pop    edx
c0023762:	68 11 e6 02 c0       	push   0xc002e611
c0023767:	ff 35 f4 61 03 c0    	push   DWORD PTR ds:0xc00361f4
c002376d:	e8 46 f9 fe ff       	call   c00130b8 <VgaText::puts(char const*)>
c0023772:	59                   	pop    ecx
c0023773:	5b                   	pop    ebx
c0023774:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0023778:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002377e:	e8 ad e9 ff ff       	call   c0022130 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023783:	5e                   	pop    esi
c0023784:	5f                   	pop    edi
c0023785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0023789:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002378f:	e8 7c e9 ff ff       	call   c0022110 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0023794:	eb 48                	jmp    c00237de <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c0023796:	be 01 00 00 00       	mov    esi,0x1
c002379b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002379f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00237a3:	d3 e6                	shl    esi,cl
c00237a5:	c1 e7 07             	shl    edi,0x7
c00237a8:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c00237ae:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c00237b3:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00237b7:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c00237bd:	85 c6                	test   esi,eax
c00237bf:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00237c5:	0f 84 a7 00 00 00    	je     c0023872 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c00237cb:	0f ba e0 1e          	bt     eax,0x1e
c00237cf:	73 1a                	jae    c00237eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c00237d1:	83 ec 0c             	sub    esp,0xc
c00237d4:	68 23 e6 02 c0       	push   0xc002e623
c00237d9:	e8 9e 37 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00237de:	83 c4 10             	add    esp,0x10
c00237e1:	b8 01 00 00 00       	mov    eax,0x1
c00237e6:	e9 ba 00 00 00       	jmp    c00238a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c00237eb:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c00237f1:	83 f8 0d             	cmp    eax,0xd
c00237f4:	77 0b                	ja     c0023801 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c00237f6:	50                   	push   eax
c00237f7:	50                   	push   eax
c00237f8:	6a 00                	push   0x0
c00237fa:	68 c8 00 00 00       	push   0xc8
c00237ff:	eb 2a                	jmp    c002382b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0023801:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c0023807:	83 f8 0d             	cmp    eax,0xd
c002380a:	77 0b                	ja     c0023817 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c002380c:	51                   	push   ecx
c002380d:	51                   	push   ecx
c002380e:	6a 00                	push   0x0
c0023810:	68 58 02 00 00       	push   0x258
c0023815:	eb 14                	jmp    c002382b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0023817:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002381d:	83 f8 06             	cmp    eax,0x6
c0023820:	77 11                	ja     c0023833 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0023822:	52                   	push   edx
c0023823:	52                   	push   edx
c0023824:	6a 00                	push   0x0
c0023826:	68 dc 05 00 00       	push   0x5dc
c002382b:	e8 a8 3c ff ff       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c0023830:	83 c4 10             	add    esp,0x10
c0023833:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0023837:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002383a:	75 06                	jne    c0023842 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c002383c:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0023840:	74 16                	je     c0023858 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0023842:	83 fb 06             	cmp    ebx,0x6
c0023845:	77 11                	ja     c0023858 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0023847:	50                   	push   eax
c0023848:	50                   	push   eax
c0023849:	6a 00                	push   0x0
c002384b:	68 c4 09 00 00       	push   0x9c4
c0023850:	e8 83 3c ff ff       	call   c00174d8 <milliTenthSleep(unsigned long long)>
c0023855:	83 c4 10             	add    esp,0x10
c0023858:	43                   	inc    ebx
c0023859:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002385f:	0f 85 52 ff ff ff    	jne    c00237b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c0023865:	83 ec 0c             	sub    esp,0xc
c0023868:	68 36 e6 02 c0       	push   0xc002e636
c002386d:	e9 67 ff ff ff       	jmp    c00237d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0023872:	0f ba e0 1e          	bt     eax,0x1e
c0023876:	73 0d                	jae    c0023885 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c0023878:	83 ec 0c             	sub    esp,0xc
c002387b:	68 4a e6 02 c0       	push   0xc002e64a
c0023880:	e9 54 ff ff ff       	jmp    c00237d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0023885:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002388a:	74 17                	je     c00238a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c002388c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0023891:	74 10                	je     c00238a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0023893:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0023899:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002389d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00238a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00238a3:	31 c0                	xor    eax,eax
c00238a5:	83 c4 2c             	add    esp,0x2c
c00238a8:	5b                   	pop    ebx
c00238a9:	5e                   	pop    esi
c00238aa:	5f                   	pop    edi
c00238ab:	5d                   	pop    ebp
c00238ac:	c3                   	ret    
c00238ad:	90                   	nop

c00238ae <SATAPI::eject()>:
c00238ae:	57                   	push   edi
c00238af:	b9 03 00 00 00       	mov    ecx,0x3
c00238b4:	83 ec 18             	sub    esp,0x18
c00238b7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00238bb:	fc                   	cld    
c00238bc:	31 c0                	xor    eax,eax
c00238be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00238c0:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00238c5:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00238ca:	50                   	push   eax
c00238cb:	6a 00                	push   0x0
c00238cd:	6a 00                	push   0x0
c00238cf:	6a 00                	push   0x0
c00238d1:	6a 00                	push   0x0
c00238d3:	6a 02                	push   0x2
c00238d5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00238d9:	50                   	push   eax
c00238da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00238de:	e8 e9 fc ff ff       	call   c00235cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00238e3:	31 c0                	xor    eax,eax
c00238e5:	83 c4 38             	add    esp,0x38
c00238e8:	5f                   	pop    edi
c00238e9:	c3                   	ret    

c00238ea <SATAPI::detectMedia()>:
c00238ea:	53                   	push   ebx
c00238eb:	83 ec 14             	sub    esp,0x14
c00238ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00238f2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00238f8:	e8 0f 85 fe ff       	call   c000be0c <VCache::writeWriteBuffer()>
c00238fd:	59                   	pop    ecx
c00238fe:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0023904:	e8 f3 84 fe ff       	call   c000bdfc <VCache::invalidateReadBuffer()>
c0023909:	c7 04 24 5f e6 02 c0 	mov    DWORD PTR [esp],0xc002e65f
c0023910:	e8 67 36 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023915:	83 c4 10             	add    esp,0x10
c0023918:	31 c0                	xor    eax,eax
c002391a:	8b 14 85 e0 5a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffca520]
c0023921:	85 d2                	test   edx,edx
c0023923:	74 0f                	je     c0023934 <SATAPI::detectMedia()+0x4a>
c0023925:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002392b:	75 07                	jne    c0023934 <SATAPI::detectMedia()+0x4a>
c002392d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0023934:	40                   	inc    eax
c0023935:	83 f8 1a             	cmp    eax,0x1a
c0023938:	75 e0                	jne    c002391a <SATAPI::detectMedia()+0x30>
c002393a:	83 c4 08             	add    esp,0x8
c002393d:	5b                   	pop    ebx
c002393e:	c3                   	ret    
c002393f:	90                   	nop

c0023940 <SATAPI::open(int, int, void*)>:
c0023940:	56                   	push   esi
c0023941:	53                   	push   ebx
c0023942:	51                   	push   ecx
c0023943:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023947:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002394b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0023955:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002395b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023965:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023969:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023973:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023979:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0023980:	e8 bb cf fe ff       	call   c0010940 <Phys::allocatePage()>
c0023985:	89 c6                	mov    esi,eax
c0023987:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002398d:	81 c6 00 10 00 00    	add    esi,0x1000
c0023993:	e8 a8 cf fe ff       	call   c0010940 <Phys::allocatePage()>
c0023998:	39 c6                	cmp    esi,eax
c002399a:	74 10                	je     c00239ac <SATAPI::open(int, int, void*)+0x6c>
c002399c:	83 ec 0c             	sub    esp,0xc
c002399f:	68 74 e6 02 c0       	push   0xc002e674
c00239a4:	e8 a3 cd fe ff       	call   c001074c <KePanic(char const*)>
c00239a9:	83 c4 10             	add    esp,0x10
c00239ac:	83 ec 0c             	sub    esp,0xc
c00239af:	6a 02                	push   0x2
c00239b1:	e8 2d 03 ff ff       	call   c0013ce3 <Virt::allocateKernelVirtualPages(int)>
c00239b6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00239bc:	6a 03                	push   0x3
c00239be:	50                   	push   eax
c00239bf:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00239c5:	ff 35 90 62 03 c0    	push   DWORD PTR ds:0xc0036290
c00239cb:	e8 f6 09 ff ff       	call   c00143c6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00239d0:	83 c4 14             	add    esp,0x14
c00239d3:	68 78 01 00 00       	push   0x178
c00239d8:	e8 1a c9 fe ff       	call   c00102f7 <malloc>
c00239dd:	83 c4 0c             	add    esp,0xc
c00239e0:	89 c6                	mov    esi,eax
c00239e2:	6a 00                	push   0x0
c00239e4:	68 ff ff ff 7f       	push   0x7fffffff
c00239e9:	6a 00                	push   0x0
c00239eb:	6a 00                	push   0x0
c00239ed:	53                   	push   ebx
c00239ee:	68 8a e6 02 c0       	push   0xc002e68a
c00239f3:	50                   	push   eax
c00239f4:	e8 69 78 fe ff       	call   c000b262 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00239f9:	83 c4 14             	add    esp,0x14
c00239fc:	56                   	push   esi
c00239fd:	e8 20 79 fe ff       	call   c000b322 <LogicalDisk::assignDriveLetter()>
c0023a02:	5a                   	pop    edx
c0023a03:	0f be c0             	movsx  eax,al
c0023a06:	59                   	pop    ecx
c0023a07:	50                   	push   eax
c0023a08:	68 d0 e4 02 c0       	push   0xc002e4d0
c0023a0d:	e8 6a 35 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0023a12:	58                   	pop    eax
c0023a13:	5a                   	pop    edx
c0023a14:	56                   	push   esi
c0023a15:	53                   	push   ebx
c0023a16:	e8 65 6a fe ff       	call   c000a480 <Device::addChild(Device*)>
c0023a1b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0023a21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a24:	e8 a1 6e fe ff       	call   c000a8ca <PhysicalDisk::startCache()>
c0023a29:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0023a30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a33:	e8 b2 fe ff ff       	call   c00238ea <SATAPI::detectMedia()>
c0023a38:	83 c4 14             	add    esp,0x14
c0023a3b:	31 c0                	xor    eax,eax
c0023a3d:	5b                   	pop    ebx
c0023a3e:	5e                   	pop    esi
c0023a3f:	c3                   	ret    

c0023a40 <SATAPI::read(unsigned long long, int, void*)>:
c0023a40:	57                   	push   edi
c0023a41:	56                   	push   esi
c0023a42:	53                   	push   ebx
c0023a43:	83 ec 30             	sub    esp,0x30
c0023a46:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0023a4a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0023a4e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0023a52:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023a56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023a5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023a5e:	83 fe 04             	cmp    esi,0x4
c0023a61:	7e 10                	jle    c0023a73 <SATAPI::read(unsigned long long, int, void*)+0x33>
c0023a63:	83 ec 0c             	sub    esp,0xc
c0023a66:	68 98 e6 02 c0       	push   0xc002e698
c0023a6b:	e8 dc cc fe ff       	call   c001074c <KePanic(char const*)>
c0023a70:	83 c4 10             	add    esp,0x10
c0023a73:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023a79:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023a7f:	51                   	push   ecx
c0023a80:	50                   	push   eax
c0023a81:	83 c0 02             	add    eax,0x2
c0023a84:	c1 e0 07             	shl    eax,0x7
c0023a87:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0023a8d:	50                   	push   eax
c0023a8e:	52                   	push   edx
c0023a8f:	e8 c6 e6 ff ff       	call   c002215a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023a94:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0023a98:	b9 03 00 00 00       	mov    ecx,0x3
c0023a9d:	fc                   	cld    
c0023a9e:	31 c0                	xor    eax,eax
c0023aa0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023aa2:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0023aa7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0023aac:	83 c4 0c             	add    esp,0xc
c0023aaf:	6a 00                	push   0x0
c0023ab1:	6a 00                	push   0x0
c0023ab3:	6a 00                	push   0x0
c0023ab5:	6a 00                	push   0x0
c0023ab7:	6a 02                	push   0x2
c0023ab9:	8d 44 24 30          	lea    eax,[esp+0x30]
c0023abd:	50                   	push   eax
c0023abe:	53                   	push   ebx
c0023abf:	e8 08 fb ff ff       	call   c00235cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0023ac4:	83 c4 20             	add    esp,0x20
c0023ac7:	85 c0                	test   eax,eax
c0023ac9:	75 44                	jne    c0023b0f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c0023acb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0023acf:	b9 03 00 00 00       	mov    ecx,0x3
c0023ad4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023ad6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023ada:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0023adf:	0f c8                	bswap  eax
c0023ae1:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0023ae5:	89 f0                	mov    eax,esi
c0023ae7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0023aeb:	50                   	push   eax
c0023aec:	56                   	push   esi
c0023aed:	c1 e6 0b             	shl    esi,0xb
c0023af0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0023af4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023af8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023afc:	56                   	push   esi
c0023afd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0023b01:	50                   	push   eax
c0023b02:	53                   	push   ebx
c0023b03:	e8 c4 fa ff ff       	call   c00235cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0023b08:	83 c4 20             	add    esp,0x20
c0023b0b:	85 c0                	test   eax,eax
c0023b0d:	74 14                	je     c0023b23 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c0023b0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023b13:	83 ec 0c             	sub    esp,0xc
c0023b16:	53                   	push   ebx
c0023b17:	e8 ce fd ff ff       	call   c00238ea <SATAPI::detectMedia()>
c0023b1c:	83 c4 10             	add    esp,0x10
c0023b1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b23:	83 c4 30             	add    esp,0x30
c0023b26:	5b                   	pop    ebx
c0023b27:	5e                   	pop    esi
c0023b28:	5f                   	pop    edi
c0023b29:	c3                   	ret    
c0023b2a:	66 90                	xchg   ax,ax

c0023b2c <APICTimer::close(int, int, void*)>:
c0023b2c:	b8 00 00 00 00       	mov    eax,0x0
c0023b31:	c3                   	ret    
c0023b32:	66 90                	xchg   ax,ax

c0023b34 <apicTimerHandler(regs*, void*)>:
c0023b34:	83 ec 0c             	sub    esp,0xc
c0023b37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b3b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023b3d:	b8 10 27 00 00       	mov    eax,0x2710
c0023b42:	ba 00 00 00 00       	mov    edx,0x0
c0023b47:	f7 f1                	div    ecx
c0023b49:	83 ec 0c             	sub    esp,0xc
c0023b4c:	50                   	push   eax
c0023b4d:	e8 ce 7f fe ff       	call   c000bb20 <timerHandler(unsigned int)>
c0023b52:	83 c4 10             	add    esp,0x10
c0023b55:	90                   	nop
c0023b56:	83 c4 0c             	add    esp,0xc
c0023b59:	c3                   	ret    
c0023b5a:	66 90                	xchg   ax,ax

c0023b5c <APICTimer::open(int, int, void*)>:
c0023b5c:	83 ec 0c             	sub    esp,0xc
c0023b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0023b65:	83 c0 24             	add    eax,0x24
c0023b68:	8b 00                	mov    eax,DWORD PTR [eax]
c0023b6a:	83 ec 08             	sub    esp,0x8
c0023b6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b75:	ff d0                	call   eax
c0023b77:	83 c4 10             	add    esp,0x10
c0023b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b7e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0023b82:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b90:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0023b96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b9a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023ba0:	83 ec 0c             	sub    esp,0xc
c0023ba3:	51                   	push   ecx
c0023ba4:	6a 01                	push   0x1
c0023ba6:	68 34 3b 02 c0       	push   0xc0023b34
c0023bab:	52                   	push   edx
c0023bac:	50                   	push   eax
c0023bad:	e8 7a 68 fe ff       	call   c000a42c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023bb2:	83 c4 20             	add    esp,0x20
c0023bb5:	89 c2                	mov    edx,eax
c0023bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bbb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0023bc1:	b8 00 00 00 00       	mov    eax,0x0
c0023bc6:	83 c4 0c             	add    esp,0xc
c0023bc9:	c3                   	ret    
c0023bca:	66 90                	xchg   ax,ax

c0023bcc <APICTimer::write(int)>:
c0023bcc:	83 ec 0c             	sub    esp,0xc
c0023bcf:	83 ec 0c             	sub    esp,0xc
c0023bd2:	68 fc e6 02 c0       	push   0xc002e6fc
c0023bd7:	e8 70 cb fe ff       	call   c001074c <KePanic(char const*)>
c0023bdc:	83 c4 10             	add    esp,0x10
c0023bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023be3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023be7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023bed:	90                   	nop
c0023bee:	83 c4 0c             	add    esp,0xc
c0023bf1:	c3                   	ret    
c0023bf2:	66 90                	xchg   ax,ax

c0023bf4 <APICTimer::APICTimer()>:
c0023bf4:	83 ec 0c             	sub    esp,0xc
c0023bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bfb:	83 ec 08             	sub    esp,0x8
c0023bfe:	68 0c e7 02 c0       	push   0xc002e70c
c0023c03:	50                   	push   eax
c0023c04:	e8 4b 7e fe ff       	call   c000ba54 <Timer::Timer(char const*)>
c0023c09:	83 c4 10             	add    esp,0x10
c0023c0c:	ba 20 e7 02 c0       	mov    edx,0xc002e720
c0023c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c15:	89 10                	mov    DWORD PTR [eax],edx
c0023c17:	90                   	nop
c0023c18:	83 c4 0c             	add    esp,0xc
c0023c1b:	c3                   	ret    

c0023c1c <PIT::write(int)>:
c0023c1c:	83 ec 10             	sub    esp,0x10
c0023c1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c23:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0023c27:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c31:	a3 b8 8d 03 c0       	mov    ds:0xc0038db8,eax
c0023c36:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0023c3b:	89 c2                	mov    edx,eax
c0023c3d:	c1 fa 1f             	sar    edx,0x1f
c0023c40:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0023c44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023c48:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0023c4f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0023c54:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0023c58:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0023c5d:	ee                   	out    dx,al
c0023c5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c62:	0f b6 c0             	movzx  eax,al
c0023c65:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0023c6c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0023c70:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0023c74:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0023c79:	ee                   	out    dx,al
c0023c7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c7e:	c1 f8 08             	sar    eax,0x8
c0023c81:	0f b6 c0             	movzx  eax,al
c0023c84:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0023c8b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0023c8f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0023c93:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0023c98:	ee                   	out    dx,al
c0023c99:	90                   	nop
c0023c9a:	83 c4 10             	add    esp,0x10
c0023c9d:	c3                   	ret    
c0023c9e:	66 90                	xchg   ax,ax

c0023ca0 <pitHandler(regs*, void*)>:
c0023ca0:	83 ec 0c             	sub    esp,0xc
c0023ca3:	8b 0d b8 8d 03 c0    	mov    ecx,DWORD PTR ds:0xc0038db8
c0023ca9:	b8 10 27 00 00       	mov    eax,0x2710
c0023cae:	89 c2                	mov    edx,eax
c0023cb0:	c1 fa 1f             	sar    edx,0x1f
c0023cb3:	f7 f9                	idiv   ecx
c0023cb5:	83 ec 0c             	sub    esp,0xc
c0023cb8:	50                   	push   eax
c0023cb9:	e8 62 7e fe ff       	call   c000bb20 <timerHandler(unsigned int)>
c0023cbe:	83 c4 10             	add    esp,0x10
c0023cc1:	90                   	nop
c0023cc2:	83 c4 0c             	add    esp,0xc
c0023cc5:	c3                   	ret    
c0023cc6:	66 90                	xchg   ax,ax

c0023cc8 <PIT::open(int, int, void*)>:
c0023cc8:	83 ec 0c             	sub    esp,0xc
c0023ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0023cd1:	83 c0 24             	add    eax,0x24
c0023cd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0023cd6:	83 ec 08             	sub    esp,0x8
c0023cd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ce1:	ff d0                	call   eax
c0023ce3:	83 c4 10             	add    esp,0x10
c0023ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cea:	83 ec 0c             	sub    esp,0xc
c0023ced:	6a 00                	push   0x0
c0023cef:	6a 01                	push   0x1
c0023cf1:	68 a0 3c 02 c0       	push   0xc0023ca0
c0023cf6:	6a 00                	push   0x0
c0023cf8:	50                   	push   eax
c0023cf9:	e8 2e 67 fe ff       	call   c000a42c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023cfe:	83 c4 20             	add    esp,0x20
c0023d01:	89 c2                	mov    edx,eax
c0023d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d07:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0023d0d:	b8 00 00 00 00       	mov    eax,0x0
c0023d12:	83 c4 0c             	add    esp,0xc
c0023d15:	c3                   	ret    
c0023d16:	66 90                	xchg   ax,ax

c0023d18 <PIT::close(int, int, void*)>:
c0023d18:	83 ec 0c             	sub    esp,0xc
c0023d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d1f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0023d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d2d:	6a 01                	push   0x1
c0023d2f:	68 a0 3c 02 c0       	push   0xc0023ca0
c0023d34:	6a 00                	push   0x0
c0023d36:	50                   	push   eax
c0023d37:	e8 26 67 fe ff       	call   c000a462 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0023d3c:	83 c4 10             	add    esp,0x10
c0023d3f:	b8 00 00 00 00       	mov    eax,0x0
c0023d44:	83 c4 0c             	add    esp,0xc
c0023d47:	c3                   	ret    

c0023d48 <PIT::PIT()>:
c0023d48:	83 ec 0c             	sub    esp,0xc
c0023d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d4f:	83 ec 08             	sub    esp,0x8
c0023d52:	68 48 e7 02 c0       	push   0xc002e748
c0023d57:	50                   	push   eax
c0023d58:	e8 f7 7c fe ff       	call   c000ba54 <Timer::Timer(char const*)>
c0023d5d:	83 c4 10             	add    esp,0x10
c0023d60:	ba 70 e7 02 c0       	mov    edx,0xc002e770
c0023d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d69:	89 10                	mov    DWORD PTR [eax],edx
c0023d6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d6f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023d75:	0f b6 d0             	movzx  edx,al
c0023d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d7c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0023d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d87:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023d8d:	0f b6 d0             	movzx  edx,al
c0023d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d94:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0023d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d9d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023da3:	8d 50 01             	lea    edx,[eax+0x1]
c0023da6:	88 d1                	mov    cl,dl
c0023da8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023dac:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0023db2:	0f b6 d0             	movzx  edx,al
c0023db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023db9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023dbd:	83 e1 3f             	and    ecx,0x3f
c0023dc0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023dc4:	90                   	nop
c0023dc5:	83 c4 0c             	add    esp,0xc
c0023dc8:	c3                   	ret    
c0023dc9:	66 90                	xchg   ax,ax
c0023dcb:	66 90                	xchg   ax,ax
c0023dcd:	66 90                	xchg   ax,ax
c0023dcf:	90                   	nop

c0023dd0 <avxDetect>:
c0023dd0:	b8 01 00 00 00       	mov    eax,0x1
c0023dd5:	0f a2                	cpuid  
c0023dd7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0023ddd:	74 15                	je     c0023df4 <avxDetect.noAVX>
c0023ddf:	b8 01 00 00 00       	mov    eax,0x1
c0023de4:	0f a2                	cpuid  
c0023de6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0023dec:	74 06                	je     c0023df4 <avxDetect.noAVX>
c0023dee:	b8 01 00 00 00       	mov    eax,0x1
c0023df3:	c3                   	ret    

c0023df4 <avxDetect.noAVX>:
c0023df4:	b8 00 00 00 00       	mov    eax,0x0
c0023df9:	c3                   	ret    

c0023dfa <avxSave>:
c0023dfa:	53                   	push   ebx
c0023dfb:	52                   	push   edx
c0023dfc:	31 c0                	xor    eax,eax
c0023dfe:	48                   	dec    eax
c0023dff:	89 c2                	mov    edx,eax
c0023e01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023e05:	0f ae 23             	xsave  [ebx]
c0023e08:	5a                   	pop    edx
c0023e09:	5b                   	pop    ebx
c0023e0a:	c3                   	ret    

c0023e0b <avxLoad>:
c0023e0b:	53                   	push   ebx
c0023e0c:	52                   	push   edx
c0023e0d:	31 c0                	xor    eax,eax
c0023e0f:	48                   	dec    eax
c0023e10:	89 c2                	mov    edx,eax
c0023e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023e16:	0f ae 2b             	xrstor [ebx]
c0023e19:	5a                   	pop    edx
c0023e1a:	5b                   	pop    ebx
c0023e1b:	c3                   	ret    

c0023e1c <avxInit>:
c0023e1c:	e8 17 03 00 00       	call   c0024138 <sseInit>
c0023e21:	50                   	push   eax
c0023e22:	51                   	push   ecx
c0023e23:	0f 20 e0             	mov    eax,cr4
c0023e26:	0d 00 00 04 00       	or     eax,0x40000
c0023e2b:	0f 22 e0             	mov    cr4,eax
c0023e2e:	31 c9                	xor    ecx,ecx
c0023e30:	0f 01 d0             	xgetbv 
c0023e33:	0d 07 00 00 00       	or     eax,0x7
c0023e38:	0f 01 d1             	xsetbv 
c0023e3b:	59                   	pop    ecx
c0023e3c:	58                   	pop    eax
c0023e3d:	c3                   	ret    

c0023e3e <avxClose>:
c0023e3e:	c3                   	ret    
c0023e3f:	90                   	nop

c0023e40 <isr0>:
c0023e40:	fa                   	cli    
c0023e41:	68 00 00 00 00       	push   0x0
c0023e46:	68 00 00 00 00       	push   0x0
c0023e4b:	e9 56 01 00 00       	jmp    c0023fa6 <int_common_stub>

c0023e50 <isr1>:
c0023e50:	fa                   	cli    
c0023e51:	6a 00                	push   0x0
c0023e53:	6a 01                	push   0x1
c0023e55:	e9 4c 01 00 00       	jmp    c0023fa6 <int_common_stub>

c0023e5a <isr2>:
c0023e5a:	fa                   	cli    
c0023e5b:	6a 00                	push   0x0
c0023e5d:	6a 02                	push   0x2
c0023e5f:	e9 42 01 00 00       	jmp    c0023fa6 <int_common_stub>

c0023e64 <isr3>:
c0023e64:	fa                   	cli    
c0023e65:	6a 00                	push   0x0
c0023e67:	6a 03                	push   0x3
c0023e69:	e9 38 01 00 00       	jmp    c0023fa6 <int_common_stub>

c0023e6e <isr4>:
c0023e6e:	fa                   	cli    
c0023e6f:	6a 00                	push   0x0
c0023e71:	6a 04                	push   0x4
c0023e73:	e9 2e 01 00 00       	jmp    c0023fa6 <int_common_stub>

c0023e78 <isr5>:
c0023e78:	fa                   	cli    
c0023e79:	6a 00                	push   0x0
c0023e7b:	6a 05                	push   0x5
c0023e7d:	e9 24 01 00 00       	jmp    c0023fa6 <int_common_stub>

c0023e82 <isr6>:
c0023e82:	fa                   	cli    
c0023e83:	6a 00                	push   0x0
c0023e85:	6a 06                	push   0x6
c0023e87:	e9 1a 01 00 00       	jmp    c0023fa6 <int_common_stub>

c0023e8c <isr7>:
c0023e8c:	fa                   	cli    
c0023e8d:	6a 00                	push   0x0
c0023e8f:	6a 07                	push   0x7
c0023e91:	e9 10 01 00 00       	jmp    c0023fa6 <int_common_stub>

c0023e96 <isr8>:
c0023e96:	fa                   	cli    
c0023e97:	6a 08                	push   0x8
c0023e99:	e9 08 01 00 00       	jmp    c0023fa6 <int_common_stub>

c0023e9e <isr9>:
c0023e9e:	fa                   	cli    
c0023e9f:	6a 00                	push   0x0
c0023ea1:	6a 09                	push   0x9
c0023ea3:	e9 fe 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023ea8 <isr10>:
c0023ea8:	fa                   	cli    
c0023ea9:	6a 0a                	push   0xa
c0023eab:	e9 f6 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023eb0 <isr11>:
c0023eb0:	fa                   	cli    
c0023eb1:	6a 0b                	push   0xb
c0023eb3:	e9 ee 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023eb8 <isr12>:
c0023eb8:	fa                   	cli    
c0023eb9:	6a 0c                	push   0xc
c0023ebb:	e9 e6 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023ec0 <isr13>:
c0023ec0:	fa                   	cli    
c0023ec1:	6a 0d                	push   0xd
c0023ec3:	53                   	push   ebx
c0023ec4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023ec8:	81 fb 6b 40 02 c0    	cmp    ebx,0xc002406b
c0023ece:	5b                   	pop    ebx
c0023ecf:	0f 84 98 01 00 00    	je     c002406d <finishSignal2>
c0023ed5:	e9 cc 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023eda <isr14>:
c0023eda:	fa                   	cli    
c0023edb:	6a 0e                	push   0xe
c0023edd:	e9 c4 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023ee2 <isr15>:
c0023ee2:	fa                   	cli    
c0023ee3:	6a 00                	push   0x0
c0023ee5:	6a 0f                	push   0xf
c0023ee7:	e9 ba 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023eec <isr16>:
c0023eec:	fa                   	cli    
c0023eed:	6a 00                	push   0x0
c0023eef:	6a 10                	push   0x10
c0023ef1:	e9 b0 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023ef6 <isr17>:
c0023ef6:	fa                   	cli    
c0023ef7:	6a 00                	push   0x0
c0023ef9:	6a 11                	push   0x11
c0023efb:	e9 a6 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f00 <isr18>:
c0023f00:	fa                   	cli    
c0023f01:	6a 00                	push   0x0
c0023f03:	6a 12                	push   0x12
c0023f05:	e9 9c 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f0a <irq3>:
c0023f0a:	fa                   	cli    
c0023f0b:	6a 00                	push   0x0
c0023f0d:	6a 23                	push   0x23
c0023f0f:	e9 92 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f14 <irq4>:
c0023f14:	fa                   	cli    
c0023f15:	6a 00                	push   0x0
c0023f17:	6a 24                	push   0x24
c0023f19:	e9 88 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f1e <irq5>:
c0023f1e:	fa                   	cli    
c0023f1f:	6a 00                	push   0x0
c0023f21:	6a 25                	push   0x25
c0023f23:	e9 7e 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f28 <irq6>:
c0023f28:	fa                   	cli    
c0023f29:	6a 00                	push   0x0
c0023f2b:	6a 26                	push   0x26
c0023f2d:	e9 74 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f32 <irq7>:
c0023f32:	fa                   	cli    
c0023f33:	6a 00                	push   0x0
c0023f35:	6a 27                	push   0x27
c0023f37:	e9 6a 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f3c <irq8>:
c0023f3c:	fa                   	cli    
c0023f3d:	6a 00                	push   0x0
c0023f3f:	6a 28                	push   0x28
c0023f41:	e9 60 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f46 <irq9>:
c0023f46:	fa                   	cli    
c0023f47:	6a 00                	push   0x0
c0023f49:	6a 29                	push   0x29
c0023f4b:	e9 56 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f50 <irq10>:
c0023f50:	fa                   	cli    
c0023f51:	6a 00                	push   0x0
c0023f53:	6a 2a                	push   0x2a
c0023f55:	e9 4c 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f5a <irq11>:
c0023f5a:	fa                   	cli    
c0023f5b:	6a 00                	push   0x0
c0023f5d:	6a 2b                	push   0x2b
c0023f5f:	e9 42 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f64 <irq12>:
c0023f64:	fa                   	cli    
c0023f65:	6a 00                	push   0x0
c0023f67:	6a 2c                	push   0x2c
c0023f69:	e9 38 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f6e <irq13>:
c0023f6e:	fa                   	cli    
c0023f6f:	6a 00                	push   0x0
c0023f71:	6a 2d                	push   0x2d
c0023f73:	e9 2e 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f78 <irq14>:
c0023f78:	fa                   	cli    
c0023f79:	6a 00                	push   0x0
c0023f7b:	6a 2e                	push   0x2e
c0023f7d:	e9 24 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f82 <irq15>:
c0023f82:	fa                   	cli    
c0023f83:	6a 00                	push   0x0
c0023f85:	6a 2f                	push   0x2f
c0023f87:	e9 1a 00 00 00       	jmp    c0023fa6 <int_common_stub>

c0023f8c <irq1>:
c0023f8c:	fa                   	cli    
c0023f8d:	6a 00                	push   0x0
c0023f8f:	6a 21                	push   0x21
c0023f91:	eb 13                	jmp    c0023fa6 <int_common_stub>

c0023f93 <irq2>:
c0023f93:	fa                   	cli    
c0023f94:	6a 00                	push   0x0
c0023f96:	6a 22                	push   0x22
c0023f98:	eb 0c                	jmp    c0023fa6 <int_common_stub>

c0023f9a <isr96>:
c0023f9a:	6a 00                	push   0x0
c0023f9c:	6a 60                	push   0x60
c0023f9e:	fb                   	sti    
c0023f9f:	eb 05                	jmp    c0023fa6 <int_common_stub>

c0023fa1 <irq0>:
c0023fa1:	fa                   	cli    
c0023fa2:	6a 00                	push   0x0
c0023fa4:	6a 20                	push   0x20

c0023fa6 <int_common_stub>:
c0023fa6:	60                   	pusha  
c0023fa7:	1e                   	push   ds
c0023fa8:	06                   	push   es
c0023fa9:	0f a0                	push   fs
c0023fab:	0f a8                	push   gs
c0023fad:	66 b8 10 00          	mov    ax,0x10
c0023fb1:	66 8e d8             	mov    ds,ax
c0023fb4:	66 8e c0             	mov    es,ax
c0023fb7:	66 8e e0             	mov    fs,ax
c0023fba:	66 8e e8             	mov    gs,ax
c0023fbd:	54                   	push   esp
c0023fbe:	fc                   	cld    
c0023fbf:	e8 00 7a ff ff       	call   c001b9c4 <int_handler>
c0023fc4:	81 c4 04 00 00 00    	add    esp,0x4
c0023fca:	e8 48 db fe ff       	call   c0011b17 <KiCheckSignalZ>
c0023fcf:	85 c0                	test   eax,eax
c0023fd1:	75 0e                	jne    c0023fe1 <doSignals>
c0023fd3:	0f a9                	pop    gs
c0023fd5:	0f a1                	pop    fs
c0023fd7:	07                   	pop    es
c0023fd8:	1f                   	pop    ds
c0023fd9:	61                   	popa   
c0023fda:	81 c4 08 00 00 00    	add    esp,0x8
c0023fe0:	cf                   	iret   

c0023fe1 <doSignals>:
c0023fe1:	0f a9                	pop    gs
c0023fe3:	0f a1                	pop    fs
c0023fe5:	07                   	pop    es
c0023fe6:	1f                   	pop    ds
c0023fe7:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0023fec:	61                   	popa   
c0023fed:	53                   	push   ebx
c0023fee:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c0023ff4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0023ff7:	5b                   	pop    ebx
c0023ff8:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0023ffd:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c0024000:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c0024003:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024006:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0024009:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002400c:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002400f:	81 c4 08 00 00 00    	add    esp,0x8
c0024015:	5e                   	pop    esi
c0024016:	5b                   	pop    ebx
c0024017:	59                   	pop    ecx
c0024018:	5a                   	pop    edx
c0024019:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002401c:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002401f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0024022:	52                   	push   edx
c0024023:	51                   	push   ecx
c0024024:	53                   	push   ebx
c0024025:	56                   	push   esi
c0024026:	81 ec 08 00 00 00    	sub    esp,0x8
c002402c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002402f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0024032:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0024035:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024038:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002403b:	60                   	pusha  
c002403c:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c0024042:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0024045:	89 e3                	mov    ebx,esp
c0024047:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002404a:	52                   	push   edx
c002404b:	68 6b 40 02 c0       	push   0xc002406b
c0024050:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c0024053:	89 dc                	mov    esp,ebx
c0024055:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0024058:	68 23 00 00 00       	push   0x23
c002405d:	51                   	push   ecx
c002405e:	68 02 02 00 00       	push   0x202
c0024063:	68 1b 00 00 00       	push   0x1b
c0024068:	ff 36                	push   DWORD PTR [esi]
c002406a:	cf                   	iret   

c002406b <finishSignal>:
c002406b:	cd 0f                	int    0xf

c002406d <finishSignal2>:
c002406d:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c0024073:	e8 2b db fe ff       	call   c0011ba3 <KiFinishSignalZ>
c0024078:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002407e:	68 23 00 00 00       	push   0x23
c0024083:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0024086:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0024089:	68 1b 00 00 00       	push   0x1b
c002408e:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c0024091:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024094:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024097:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002409a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002409d:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c00240a0:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00240a3:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c00240a6:	cf                   	iret   
c00240a7:	90                   	nop

c00240a8 <irq16>:
c00240a8:	fa                   	cli    
c00240a9:	6a 00                	push   0x0
c00240ab:	6a 30                	push   0x30
c00240ad:	e9 f4 fe ff ff       	jmp    c0023fa6 <int_common_stub>

c00240b2 <irq17>:
c00240b2:	fa                   	cli    
c00240b3:	6a 00                	push   0x0
c00240b5:	6a 31                	push   0x31
c00240b7:	e9 ea fe ff ff       	jmp    c0023fa6 <int_common_stub>

c00240bc <irq18>:
c00240bc:	fa                   	cli    
c00240bd:	6a 00                	push   0x0
c00240bf:	6a 32                	push   0x32
c00240c1:	e9 e0 fe ff ff       	jmp    c0023fa6 <int_common_stub>

c00240c6 <irq19>:
c00240c6:	fa                   	cli    
c00240c7:	6a 00                	push   0x0
c00240c9:	6a 33                	push   0x33
c00240cb:	e9 d6 fe ff ff       	jmp    c0023fa6 <int_common_stub>

c00240d0 <irq20>:
c00240d0:	fa                   	cli    
c00240d1:	6a 00                	push   0x0
c00240d3:	6a 34                	push   0x34
c00240d5:	e9 cc fe ff ff       	jmp    c0023fa6 <int_common_stub>

c00240da <irq21>:
c00240da:	fa                   	cli    
c00240db:	6a 00                	push   0x0
c00240dd:	6a 35                	push   0x35
c00240df:	e9 c2 fe ff ff       	jmp    c0023fa6 <int_common_stub>

c00240e4 <irq22>:
c00240e4:	fa                   	cli    
c00240e5:	6a 00                	push   0x0
c00240e7:	6a 36                	push   0x36
c00240e9:	e9 b8 fe ff ff       	jmp    c0023fa6 <int_common_stub>

c00240ee <irq23>:
c00240ee:	fa                   	cli    
c00240ef:	6a 00                	push   0x0
c00240f1:	6a 37                	push   0x37
c00240f3:	e9 ae fe ff ff       	jmp    c0023fa6 <int_common_stub>
c00240f8:	66 90                	xchg   ax,ax
c00240fa:	66 90                	xchg   ax,ax
c00240fc:	66 90                	xchg   ax,ax
c00240fe:	66 90                	xchg   ax,ax

c0024100 <i386GetRDRAND>:
c0024100:	b9 64 00 00 00       	mov    ecx,0x64

c0024105 <retry>:
c0024105:	0f c7 f0             	rdrand eax
c0024108:	72 05                	jb     c002410f <retry.done>
c002410a:	e2 f9                	loop   c0024105 <retry>

c002410c <retry.fail>:
c002410c:	31 c0                	xor    eax,eax
c002410e:	c3                   	ret    

c002410f <retry.done>:
c002410f:	c3                   	ret    

c0024110 <sseDetect>:
c0024110:	b8 01 00 00 00       	mov    eax,0x1
c0024115:	0f a2                	cpuid  
c0024117:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002411d:	74 06                	je     c0024125 <sseDetect.noSSE>
c002411f:	b8 01 00 00 00       	mov    eax,0x1
c0024124:	c3                   	ret    

c0024125 <sseDetect.noSSE>:
c0024125:	31 c0                	xor    eax,eax
c0024127:	c3                   	ret    

c0024128 <sseSave>:
c0024128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002412c:	0f ae 00             	fxsave [eax]
c002412f:	c3                   	ret    

c0024130 <sseLoad>:
c0024130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024134:	0f ae 08             	fxrstor [eax]
c0024137:	c3                   	ret    

c0024138 <sseInit>:
c0024138:	e8 48 00 00 00       	call   c0024185 <x87Init>
c002413d:	0f 20 e0             	mov    eax,cr4
c0024140:	66 0d 00 06          	or     ax,0x600
c0024144:	0f 22 e0             	mov    cr4,eax
c0024147:	c3                   	ret    

c0024148 <sseClose>:
c0024148:	c3                   	ret    
c0024149:	66 90                	xchg   ax,ax
c002414b:	66 90                	xchg   ax,ax
c002414d:	66 90                	xchg   ax,ax
c002414f:	90                   	nop

c0024150 <value_37F>:
c0024150:	7f 03                	jg     c0024155 <value_37A+0x1>

c0024152 <value_37E>:
c0024152:	7e 03                	jle    c0024157 <x87Detect+0x1>

c0024154 <value_37A>:
c0024154:	7a 03                	jp     c0024159 <x87Detect+0x3>

c0024156 <x87Detect>:
c0024156:	53                   	push   ebx
c0024157:	51                   	push   ecx
c0024158:	52                   	push   edx
c0024159:	b8 01 00 00 00       	mov    eax,0x1
c002415e:	0f a2                	cpuid  
c0024160:	f7 c2 01 00 00 00    	test   edx,0x1
c0024166:	74 06                	je     c002416e <x87Detect.nox87>
c0024168:	b8 01 00 00 00       	mov    eax,0x1
c002416d:	c3                   	ret    

c002416e <x87Detect.nox87>:
c002416e:	b8 00 00 00 00       	mov    eax,0x0
c0024173:	5a                   	pop    edx
c0024174:	59                   	pop    ecx
c0024175:	5b                   	pop    ebx
c0024176:	c3                   	ret    

c0024177 <x87Save>:
c0024177:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002417b:	dd 30                	fnsave [eax]
c002417d:	c3                   	ret    

c002417e <x87Load>:
c002417e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024182:	dd 20                	frstor [eax]
c0024184:	c3                   	ret    

c0024185 <x87Init>:
c0024185:	0f 20 c0             	mov    eax,cr0
c0024188:	66 25 fb ff          	and    ax,0xfffb
c002418c:	66 0d 22 00          	or     ax,0x22
c0024190:	0f 22 c0             	mov    cr0,eax
c0024193:	db e3                	fninit 
c0024195:	0f 06                	clts   
c0024197:	d9 2d 54 41 02 c0    	fldcw  WORD PTR ds:0xc0024154
c002419d:	c3                   	ret    

c002419e <x87Close>:
c002419e:	c3                   	ret    
c002419f:	90                   	nop

c00241a0 <__do_global_ctors_aux>:
c00241a0:	a1 ec 9a 02 c0       	mov    eax,ds:0xc0029aec
c00241a5:	83 f8 ff             	cmp    eax,0xffffffff
c00241a8:	74 1a                	je     c00241c4 <__do_global_ctors_aux+0x24>
c00241aa:	55                   	push   ebp
c00241ab:	89 e5                	mov    ebp,esp
c00241ad:	53                   	push   ebx
c00241ae:	52                   	push   edx
c00241af:	bb ec 9a 02 c0       	mov    ebx,0xc0029aec
c00241b4:	ff d0                	call   eax
c00241b6:	83 eb 04             	sub    ebx,0x4
c00241b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00241bb:	83 f8 ff             	cmp    eax,0xffffffff
c00241be:	75 f4                	jne    c00241b4 <__do_global_ctors_aux+0x14>
c00241c0:	58                   	pop    eax
c00241c1:	5b                   	pop    ebx
c00241c2:	5d                   	pop    ebp
c00241c3:	c3                   	ret    
c00241c4:	c3                   	ret    
c00241c5:	66 90                	xchg   ax,ax
c00241c7:	90                   	nop

c00241c8 <__divdi3>:
c00241c8:	55                   	push   ebp
c00241c9:	57                   	push   edi
c00241ca:	56                   	push   esi
c00241cb:	53                   	push   ebx
c00241cc:	83 ec 1c             	sub    esp,0x1c
c00241cf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00241d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00241d7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00241da:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00241de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00241e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00241e6:	85 db                	test   ebx,ebx
c00241e8:	0f 88 8e 00 00 00    	js     c002427c <__divdi3+0xb4>
c00241ee:	89 dd                	mov    ebp,ebx
c00241f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00241f8:	89 d3                	mov    ebx,edx
c00241fa:	85 d2                	test   edx,edx
c00241fc:	79 0d                	jns    c002420b <__divdi3+0x43>
c00241fe:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0024202:	f7 d8                	neg    eax
c0024204:	83 d2 00             	adc    edx,0x0
c0024207:	f7 da                	neg    edx
c0024209:	89 d3                	mov    ebx,edx
c002420b:	89 c7                	mov    edi,eax
c002420d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024210:	85 db                	test   ebx,ebx
c0024212:	75 48                	jne    c002425c <__divdi3+0x94>
c0024214:	39 ef                	cmp    edi,ebp
c0024216:	76 24                	jbe    c002423c <__divdi3+0x74>
c0024218:	89 ea                	mov    edx,ebp
c002421a:	f7 f7                	div    edi
c002421c:	89 c1                	mov    ecx,eax
c002421e:	31 f6                	xor    esi,esi
c0024220:	89 c8                	mov    eax,ecx
c0024222:	89 f2                	mov    edx,esi
c0024224:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024228:	85 c9                	test   ecx,ecx
c002422a:	74 07                	je     c0024233 <__divdi3+0x6b>
c002422c:	f7 d8                	neg    eax
c002422e:	83 d2 00             	adc    edx,0x0
c0024231:	f7 da                	neg    edx
c0024233:	83 c4 1c             	add    esp,0x1c
c0024236:	5b                   	pop    ebx
c0024237:	5e                   	pop    esi
c0024238:	5f                   	pop    edi
c0024239:	5d                   	pop    ebp
c002423a:	c3                   	ret    
c002423b:	90                   	nop
c002423c:	85 ff                	test   edi,edi
c002423e:	75 0b                	jne    c002424b <__divdi3+0x83>
c0024240:	b8 01 00 00 00       	mov    eax,0x1
c0024245:	31 d2                	xor    edx,edx
c0024247:	f7 f3                	div    ebx
c0024249:	89 c7                	mov    edi,eax
c002424b:	31 d2                	xor    edx,edx
c002424d:	89 e8                	mov    eax,ebp
c002424f:	f7 f7                	div    edi
c0024251:	89 c6                	mov    esi,eax
c0024253:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024256:	f7 f7                	div    edi
c0024258:	89 c1                	mov    ecx,eax
c002425a:	eb c4                	jmp    c0024220 <__divdi3+0x58>
c002425c:	39 eb                	cmp    ebx,ebp
c002425e:	77 3c                	ja     c002429c <__divdi3+0xd4>
c0024260:	0f bd f3             	bsr    esi,ebx
c0024263:	83 f6 1f             	xor    esi,0x1f
c0024266:	75 40                	jne    c00242a8 <__divdi3+0xe0>
c0024268:	39 eb                	cmp    ebx,ebp
c002426a:	72 09                	jb     c0024275 <__divdi3+0xad>
c002426c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002426f:	0f 87 97 00 00 00    	ja     c002430c <__divdi3+0x144>
c0024275:	b9 01 00 00 00       	mov    ecx,0x1
c002427a:	eb a4                	jmp    c0024220 <__divdi3+0x58>
c002427c:	f7 d9                	neg    ecx
c002427e:	83 d3 00             	adc    ebx,0x0
c0024281:	f7 db                	neg    ebx
c0024283:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0024286:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002428a:	89 dd                	mov    ebp,ebx
c002428c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0024294:	e9 5f ff ff ff       	jmp    c00241f8 <__divdi3+0x30>
c0024299:	8d 76 00             	lea    esi,[esi+0x0]
c002429c:	31 f6                	xor    esi,esi
c002429e:	31 c9                	xor    ecx,ecx
c00242a0:	e9 7b ff ff ff       	jmp    c0024220 <__divdi3+0x58>
c00242a5:	8d 76 00             	lea    esi,[esi+0x0]
c00242a8:	b8 20 00 00 00       	mov    eax,0x20
c00242ad:	29 f0                	sub    eax,esi
c00242af:	89 f1                	mov    ecx,esi
c00242b1:	d3 e3                	shl    ebx,cl
c00242b3:	89 fa                	mov    edx,edi
c00242b5:	88 c1                	mov    cl,al
c00242b7:	d3 ea                	shr    edx,cl
c00242b9:	09 da                	or     edx,ebx
c00242bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00242bf:	89 f1                	mov    ecx,esi
c00242c1:	d3 e7                	shl    edi,cl
c00242c3:	89 eb                	mov    ebx,ebp
c00242c5:	88 c1                	mov    cl,al
c00242c7:	d3 eb                	shr    ebx,cl
c00242c9:	89 f1                	mov    ecx,esi
c00242cb:	d3 e5                	shl    ebp,cl
c00242cd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00242d0:	88 c1                	mov    cl,al
c00242d2:	d3 ea                	shr    edx,cl
c00242d4:	09 d5                	or     ebp,edx
c00242d6:	89 e8                	mov    eax,ebp
c00242d8:	89 da                	mov    edx,ebx
c00242da:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00242de:	89 d3                	mov    ebx,edx
c00242e0:	89 c5                	mov    ebp,eax
c00242e2:	f7 e7                	mul    edi
c00242e4:	39 d3                	cmp    ebx,edx
c00242e6:	72 18                	jb     c0024300 <__divdi3+0x138>
c00242e8:	74 0a                	je     c00242f4 <__divdi3+0x12c>
c00242ea:	89 e9                	mov    ecx,ebp
c00242ec:	31 f6                	xor    esi,esi
c00242ee:	e9 2d ff ff ff       	jmp    c0024220 <__divdi3+0x58>
c00242f3:	90                   	nop
c00242f4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00242f7:	89 f1                	mov    ecx,esi
c00242f9:	d3 e7                	shl    edi,cl
c00242fb:	39 c7                	cmp    edi,eax
c00242fd:	73 eb                	jae    c00242ea <__divdi3+0x122>
c00242ff:	90                   	nop
c0024300:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0024303:	31 f6                	xor    esi,esi
c0024305:	e9 16 ff ff ff       	jmp    c0024220 <__divdi3+0x58>
c002430a:	66 90                	xchg   ax,ax
c002430c:	31 c9                	xor    ecx,ecx
c002430e:	e9 0d ff ff ff       	jmp    c0024220 <__divdi3+0x58>
c0024313:	90                   	nop

c0024314 <__moddi3>:
c0024314:	55                   	push   ebp
c0024315:	57                   	push   edi
c0024316:	56                   	push   esi
c0024317:	53                   	push   ebx
c0024318:	83 ec 2c             	sub    esp,0x2c
c002431b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002431f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0024323:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024327:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002432b:	85 db                	test   ebx,ebx
c002432d:	0f 88 85 00 00 00    	js     c00243b8 <__moddi3+0xa4>
c0024333:	89 de                	mov    esi,ebx
c0024335:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002433d:	89 d7                	mov    edi,edx
c002433f:	85 d2                	test   edx,edx
c0024341:	79 09                	jns    c002434c <__moddi3+0x38>
c0024343:	f7 d8                	neg    eax
c0024345:	83 d2 00             	adc    edx,0x0
c0024348:	f7 da                	neg    edx
c002434a:	89 d7                	mov    edi,edx
c002434c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024350:	89 cd                	mov    ebp,ecx
c0024352:	85 ff                	test   edi,edi
c0024354:	75 52                	jne    c00243a8 <__moddi3+0x94>
c0024356:	89 c3                	mov    ebx,eax
c0024358:	39 f0                	cmp    eax,esi
c002435a:	76 24                	jbe    c0024380 <__moddi3+0x6c>
c002435c:	89 c8                	mov    eax,ecx
c002435e:	89 f2                	mov    edx,esi
c0024360:	f7 f3                	div    ebx
c0024362:	89 d6                	mov    esi,edx
c0024364:	89 f0                	mov    eax,esi
c0024366:	31 d2                	xor    edx,edx
c0024368:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002436c:	85 c9                	test   ecx,ecx
c002436e:	74 07                	je     c0024377 <__moddi3+0x63>
c0024370:	f7 d8                	neg    eax
c0024372:	83 d2 00             	adc    edx,0x0
c0024375:	f7 da                	neg    edx
c0024377:	83 c4 2c             	add    esp,0x2c
c002437a:	5b                   	pop    ebx
c002437b:	5e                   	pop    esi
c002437c:	5f                   	pop    edi
c002437d:	5d                   	pop    ebp
c002437e:	c3                   	ret    
c002437f:	90                   	nop
c0024380:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0024384:	85 db                	test   ebx,ebx
c0024386:	75 0d                	jne    c0024395 <__moddi3+0x81>
c0024388:	b8 01 00 00 00       	mov    eax,0x1
c002438d:	31 d2                	xor    edx,edx
c002438f:	f7 f7                	div    edi
c0024391:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024395:	89 f0                	mov    eax,esi
c0024397:	31 d2                	xor    edx,edx
c0024399:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002439d:	f7 f7                	div    edi
c002439f:	89 e8                	mov    eax,ebp
c00243a1:	f7 f7                	div    edi
c00243a3:	89 d6                	mov    esi,edx
c00243a5:	eb bd                	jmp    c0024364 <__moddi3+0x50>
c00243a7:	90                   	nop
c00243a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00243ac:	39 f7                	cmp    edi,esi
c00243ae:	76 20                	jbe    c00243d0 <__moddi3+0xbc>
c00243b0:	89 c8                	mov    eax,ecx
c00243b2:	89 f2                	mov    edx,esi
c00243b4:	eb b2                	jmp    c0024368 <__moddi3+0x54>
c00243b6:	66 90                	xchg   ax,ax
c00243b8:	f7 d9                	neg    ecx
c00243ba:	83 d3 00             	adc    ebx,0x0
c00243bd:	f7 db                	neg    ebx
c00243bf:	89 de                	mov    esi,ebx
c00243c1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00243c9:	e9 6f ff ff ff       	jmp    c002433d <__moddi3+0x29>
c00243ce:	66 90                	xchg   ax,ax
c00243d0:	0f bd c7             	bsr    eax,edi
c00243d3:	83 f0 1f             	xor    eax,0x1f
c00243d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00243da:	75 24                	jne    c0024400 <__moddi3+0xec>
c00243dc:	39 f7                	cmp    edi,esi
c00243de:	72 06                	jb     c00243e6 <__moddi3+0xd2>
c00243e0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00243e4:	77 0c                	ja     c00243f2 <__moddi3+0xde>
c00243e6:	89 e9                	mov    ecx,ebp
c00243e8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00243ec:	19 fe                	sbb    esi,edi
c00243ee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00243f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00243f6:	89 f2                	mov    edx,esi
c00243f8:	e9 6b ff ff ff       	jmp    c0024368 <__moddi3+0x54>
c00243fd:	8d 76 00             	lea    esi,[esi+0x0]
c0024400:	b8 20 00 00 00       	mov    eax,0x20
c0024405:	89 c2                	mov    edx,eax
c0024407:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002440b:	29 da                	sub    edx,ebx
c002440d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024411:	88 d9                	mov    cl,bl
c0024413:	d3 e7                	shl    edi,cl
c0024415:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024419:	88 d1                	mov    cl,dl
c002441b:	d3 e8                	shr    eax,cl
c002441d:	09 c7                	or     edi,eax
c002441f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0024423:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024427:	89 d8                	mov    eax,ebx
c0024429:	88 d9                	mov    cl,bl
c002442b:	d3 e7                	shl    edi,cl
c002442d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024431:	89 f3                	mov    ebx,esi
c0024433:	88 d1                	mov    cl,dl
c0024435:	d3 eb                	shr    ebx,cl
c0024437:	89 c7                	mov    edi,eax
c0024439:	88 c1                	mov    cl,al
c002443b:	d3 e6                	shl    esi,cl
c002443d:	89 e8                	mov    eax,ebp
c002443f:	88 d1                	mov    cl,dl
c0024441:	d3 e8                	shr    eax,cl
c0024443:	09 f0                	or     eax,esi
c0024445:	89 f9                	mov    ecx,edi
c0024447:	d3 e5                	shl    ebp,cl
c0024449:	89 da                	mov    edx,ebx
c002444b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002444f:	89 d3                	mov    ebx,edx
c0024451:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024455:	89 c6                	mov    esi,eax
c0024457:	89 d1                	mov    ecx,edx
c0024459:	39 d3                	cmp    ebx,edx
c002445b:	72 27                	jb     c0024484 <__moddi3+0x170>
c002445d:	74 21                	je     c0024480 <__moddi3+0x16c>
c002445f:	29 f5                	sub    ebp,esi
c0024461:	19 cb                	sbb    ebx,ecx
c0024463:	89 de                	mov    esi,ebx
c0024465:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0024469:	d3 e6                	shl    esi,cl
c002446b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002446f:	89 f9                	mov    ecx,edi
c0024471:	d3 ed                	shr    ebp,cl
c0024473:	09 ee                	or     esi,ebp
c0024475:	89 f0                	mov    eax,esi
c0024477:	d3 eb                	shr    ebx,cl
c0024479:	89 da                	mov    edx,ebx
c002447b:	e9 e8 fe ff ff       	jmp    c0024368 <__moddi3+0x54>
c0024480:	39 c5                	cmp    ebp,eax
c0024482:	73 db                	jae    c002445f <__moddi3+0x14b>
c0024484:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0024488:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002448c:	89 d1                	mov    ecx,edx
c002448e:	89 c6                	mov    esi,eax
c0024490:	eb cd                	jmp    c002445f <__moddi3+0x14b>
c0024492:	66 90                	xchg   ax,ax

c0024494 <__udivdi3>:
c0024494:	55                   	push   ebp
c0024495:	57                   	push   edi
c0024496:	56                   	push   esi
c0024497:	53                   	push   ebx
c0024498:	83 ec 1c             	sub    esp,0x1c
c002449b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002449f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00244a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00244a7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00244ab:	85 d2                	test   edx,edx
c00244ad:	75 41                	jne    c00244f0 <__udivdi3+0x5c>
c00244af:	39 f7                	cmp    edi,esi
c00244b1:	76 15                	jbe    c00244c8 <__udivdi3+0x34>
c00244b3:	89 e8                	mov    eax,ebp
c00244b5:	89 f2                	mov    edx,esi
c00244b7:	f7 f7                	div    edi
c00244b9:	31 db                	xor    ebx,ebx
c00244bb:	89 da                	mov    edx,ebx
c00244bd:	83 c4 1c             	add    esp,0x1c
c00244c0:	5b                   	pop    ebx
c00244c1:	5e                   	pop    esi
c00244c2:	5f                   	pop    edi
c00244c3:	5d                   	pop    ebp
c00244c4:	c3                   	ret    
c00244c5:	8d 76 00             	lea    esi,[esi+0x0]
c00244c8:	89 f9                	mov    ecx,edi
c00244ca:	85 ff                	test   edi,edi
c00244cc:	75 0b                	jne    c00244d9 <__udivdi3+0x45>
c00244ce:	b8 01 00 00 00       	mov    eax,0x1
c00244d3:	31 d2                	xor    edx,edx
c00244d5:	f7 f7                	div    edi
c00244d7:	89 c1                	mov    ecx,eax
c00244d9:	31 d2                	xor    edx,edx
c00244db:	89 f0                	mov    eax,esi
c00244dd:	f7 f1                	div    ecx
c00244df:	89 c3                	mov    ebx,eax
c00244e1:	89 e8                	mov    eax,ebp
c00244e3:	f7 f1                	div    ecx
c00244e5:	89 da                	mov    edx,ebx
c00244e7:	83 c4 1c             	add    esp,0x1c
c00244ea:	5b                   	pop    ebx
c00244eb:	5e                   	pop    esi
c00244ec:	5f                   	pop    edi
c00244ed:	5d                   	pop    ebp
c00244ee:	c3                   	ret    
c00244ef:	90                   	nop
c00244f0:	39 f2                	cmp    edx,esi
c00244f2:	77 1c                	ja     c0024510 <__udivdi3+0x7c>
c00244f4:	0f bd da             	bsr    ebx,edx
c00244f7:	83 f3 1f             	xor    ebx,0x1f
c00244fa:	75 24                	jne    c0024520 <__udivdi3+0x8c>
c00244fc:	39 f2                	cmp    edx,esi
c00244fe:	72 08                	jb     c0024508 <__udivdi3+0x74>
c0024500:	39 ef                	cmp    edi,ebp
c0024502:	0f 87 84 00 00 00    	ja     c002458c <__udivdi3+0xf8>
c0024508:	b8 01 00 00 00       	mov    eax,0x1
c002450d:	eb ac                	jmp    c00244bb <__udivdi3+0x27>
c002450f:	90                   	nop
c0024510:	31 db                	xor    ebx,ebx
c0024512:	31 c0                	xor    eax,eax
c0024514:	89 da                	mov    edx,ebx
c0024516:	83 c4 1c             	add    esp,0x1c
c0024519:	5b                   	pop    ebx
c002451a:	5e                   	pop    esi
c002451b:	5f                   	pop    edi
c002451c:	5d                   	pop    ebp
c002451d:	c3                   	ret    
c002451e:	66 90                	xchg   ax,ax
c0024520:	b8 20 00 00 00       	mov    eax,0x20
c0024525:	29 d8                	sub    eax,ebx
c0024527:	88 d9                	mov    cl,bl
c0024529:	d3 e2                	shl    edx,cl
c002452b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002452f:	89 fa                	mov    edx,edi
c0024531:	88 c1                	mov    cl,al
c0024533:	d3 ea                	shr    edx,cl
c0024535:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024539:	09 d1                	or     ecx,edx
c002453b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002453f:	88 d9                	mov    cl,bl
c0024541:	d3 e7                	shl    edi,cl
c0024543:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024547:	89 f7                	mov    edi,esi
c0024549:	88 c1                	mov    cl,al
c002454b:	d3 ef                	shr    edi,cl
c002454d:	88 d9                	mov    cl,bl
c002454f:	d3 e6                	shl    esi,cl
c0024551:	89 ea                	mov    edx,ebp
c0024553:	88 c1                	mov    cl,al
c0024555:	d3 ea                	shr    edx,cl
c0024557:	09 d6                	or     esi,edx
c0024559:	89 f0                	mov    eax,esi
c002455b:	89 fa                	mov    edx,edi
c002455d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0024561:	89 d7                	mov    edi,edx
c0024563:	89 c6                	mov    esi,eax
c0024565:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024569:	39 d7                	cmp    edi,edx
c002456b:	72 13                	jb     c0024580 <__udivdi3+0xec>
c002456d:	74 09                	je     c0024578 <__udivdi3+0xe4>
c002456f:	89 f0                	mov    eax,esi
c0024571:	31 db                	xor    ebx,ebx
c0024573:	e9 43 ff ff ff       	jmp    c00244bb <__udivdi3+0x27>
c0024578:	88 d9                	mov    cl,bl
c002457a:	d3 e5                	shl    ebp,cl
c002457c:	39 c5                	cmp    ebp,eax
c002457e:	73 ef                	jae    c002456f <__udivdi3+0xdb>
c0024580:	8d 46 ff             	lea    eax,[esi-0x1]
c0024583:	31 db                	xor    ebx,ebx
c0024585:	e9 31 ff ff ff       	jmp    c00244bb <__udivdi3+0x27>
c002458a:	66 90                	xchg   ax,ax
c002458c:	31 c0                	xor    eax,eax
c002458e:	e9 28 ff ff ff       	jmp    c00244bb <__udivdi3+0x27>
c0024593:	90                   	nop

c0024594 <__umoddi3>:
c0024594:	55                   	push   ebp
c0024595:	57                   	push   edi
c0024596:	56                   	push   esi
c0024597:	53                   	push   ebx
c0024598:	83 ec 1c             	sub    esp,0x1c
c002459b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002459f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00245a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00245a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00245ab:	89 da                	mov    edx,ebx
c00245ad:	85 c0                	test   eax,eax
c00245af:	75 37                	jne    c00245e8 <__umoddi3+0x54>
c00245b1:	39 df                	cmp    edi,ebx
c00245b3:	76 13                	jbe    c00245c8 <__umoddi3+0x34>
c00245b5:	89 f0                	mov    eax,esi
c00245b7:	f7 f7                	div    edi
c00245b9:	89 d0                	mov    eax,edx
c00245bb:	31 d2                	xor    edx,edx
c00245bd:	83 c4 1c             	add    esp,0x1c
c00245c0:	5b                   	pop    ebx
c00245c1:	5e                   	pop    esi
c00245c2:	5f                   	pop    edi
c00245c3:	5d                   	pop    ebp
c00245c4:	c3                   	ret    
c00245c5:	8d 76 00             	lea    esi,[esi+0x0]
c00245c8:	89 fd                	mov    ebp,edi
c00245ca:	85 ff                	test   edi,edi
c00245cc:	75 0b                	jne    c00245d9 <__umoddi3+0x45>
c00245ce:	b8 01 00 00 00       	mov    eax,0x1
c00245d3:	31 d2                	xor    edx,edx
c00245d5:	f7 f7                	div    edi
c00245d7:	89 c5                	mov    ebp,eax
c00245d9:	89 d8                	mov    eax,ebx
c00245db:	31 d2                	xor    edx,edx
c00245dd:	f7 f5                	div    ebp
c00245df:	89 f0                	mov    eax,esi
c00245e1:	f7 f5                	div    ebp
c00245e3:	89 d0                	mov    eax,edx
c00245e5:	eb d4                	jmp    c00245bb <__umoddi3+0x27>
c00245e7:	90                   	nop
c00245e8:	89 f1                	mov    ecx,esi
c00245ea:	39 d8                	cmp    eax,ebx
c00245ec:	76 0a                	jbe    c00245f8 <__umoddi3+0x64>
c00245ee:	89 f0                	mov    eax,esi
c00245f0:	83 c4 1c             	add    esp,0x1c
c00245f3:	5b                   	pop    ebx
c00245f4:	5e                   	pop    esi
c00245f5:	5f                   	pop    edi
c00245f6:	5d                   	pop    ebp
c00245f7:	c3                   	ret    
c00245f8:	0f bd e8             	bsr    ebp,eax
c00245fb:	83 f5 1f             	xor    ebp,0x1f
c00245fe:	75 1c                	jne    c002461c <__umoddi3+0x88>
c0024600:	39 d8                	cmp    eax,ebx
c0024602:	72 04                	jb     c0024608 <__umoddi3+0x74>
c0024604:	39 f7                	cmp    edi,esi
c0024606:	77 08                	ja     c0024610 <__umoddi3+0x7c>
c0024608:	89 da                	mov    edx,ebx
c002460a:	29 fe                	sub    esi,edi
c002460c:	19 c2                	sbb    edx,eax
c002460e:	89 f1                	mov    ecx,esi
c0024610:	89 c8                	mov    eax,ecx
c0024612:	83 c4 1c             	add    esp,0x1c
c0024615:	5b                   	pop    ebx
c0024616:	5e                   	pop    esi
c0024617:	5f                   	pop    edi
c0024618:	5d                   	pop    ebp
c0024619:	c3                   	ret    
c002461a:	66 90                	xchg   ax,ax
c002461c:	ba 20 00 00 00       	mov    edx,0x20
c0024621:	29 ea                	sub    edx,ebp
c0024623:	89 e9                	mov    ecx,ebp
c0024625:	d3 e0                	shl    eax,cl
c0024627:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002462b:	89 f8                	mov    eax,edi
c002462d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024631:	88 d1                	mov    cl,dl
c0024633:	d3 e8                	shr    eax,cl
c0024635:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024639:	09 c1                	or     ecx,eax
c002463b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002463f:	89 e9                	mov    ecx,ebp
c0024641:	d3 e7                	shl    edi,cl
c0024643:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0024647:	89 d8                	mov    eax,ebx
c0024649:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002464d:	88 d1                	mov    cl,dl
c002464f:	d3 e8                	shr    eax,cl
c0024651:	89 c7                	mov    edi,eax
c0024653:	89 e9                	mov    ecx,ebp
c0024655:	d3 e3                	shl    ebx,cl
c0024657:	89 f0                	mov    eax,esi
c0024659:	88 d1                	mov    cl,dl
c002465b:	d3 e8                	shr    eax,cl
c002465d:	09 d8                	or     eax,ebx
c002465f:	89 e9                	mov    ecx,ebp
c0024661:	d3 e6                	shl    esi,cl
c0024663:	89 f3                	mov    ebx,esi
c0024665:	89 fa                	mov    edx,edi
c0024667:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002466b:	89 d1                	mov    ecx,edx
c002466d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024671:	89 c6                	mov    esi,eax
c0024673:	89 d7                	mov    edi,edx
c0024675:	39 d1                	cmp    ecx,edx
c0024677:	72 27                	jb     c00246a0 <__umoddi3+0x10c>
c0024679:	74 21                	je     c002469c <__umoddi3+0x108>
c002467b:	89 ca                	mov    edx,ecx
c002467d:	29 f3                	sub    ebx,esi
c002467f:	19 fa                	sbb    edx,edi
c0024681:	89 d0                	mov    eax,edx
c0024683:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024687:	d3 e0                	shl    eax,cl
c0024689:	89 e9                	mov    ecx,ebp
c002468b:	d3 eb                	shr    ebx,cl
c002468d:	09 d8                	or     eax,ebx
c002468f:	d3 ea                	shr    edx,cl
c0024691:	83 c4 1c             	add    esp,0x1c
c0024694:	5b                   	pop    ebx
c0024695:	5e                   	pop    esi
c0024696:	5f                   	pop    edi
c0024697:	5d                   	pop    ebp
c0024698:	c3                   	ret    
c0024699:	8d 76 00             	lea    esi,[esi+0x0]
c002469c:	39 c3                	cmp    ebx,eax
c002469e:	73 db                	jae    c002467b <__umoddi3+0xe7>
c00246a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00246a4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00246a8:	89 d7                	mov    edi,edx
c00246aa:	89 c6                	mov    esi,eax
c00246ac:	eb cd                	jmp    c002467b <__umoddi3+0xe7>
c00246ae:	66 90                	xchg   ax,ax

c00246b0 <acos>:
c00246b0:	83 ec 4c             	sub    esp,0x4c
c00246b3:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00246b7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00246bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00246bf:	89 d0                	mov    eax,edx
c00246c1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00246c6:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c00246cb:	7e 23                	jle    c00246f0 <acos+0x40>
c00246cd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00246d1:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c00246d6:	09 c8                	or     eax,ecx
c00246d8:	0f 85 32 01 00 00    	jne    c0024810 <acos+0x160>
c00246de:	85 d2                	test   edx,edx
c00246e0:	0f 8e 4a 01 00 00    	jle    c0024830 <acos+0x180>
c00246e6:	d9 ee                	fldz   
c00246e8:	83 c4 4c             	add    esp,0x4c
c00246eb:	c3                   	ret    
c00246ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00246f0:	3d ff ff df 3f       	cmp    eax,0x3fdfffff
c00246f5:	7f 29                	jg     c0024720 <acos+0x70>
c00246f7:	3d 00 00 60 3c       	cmp    eax,0x3c600000
c00246fc:	0f 8f 4e 01 00 00    	jg     c0024850 <acos+0x1a0>
c0024702:	dd 05 88 01 03 c0    	fld    QWORD PTR ds:0xc0030188
c0024708:	dc 05 a0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7a0
c002470e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024712:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024716:	83 c4 4c             	add    esp,0x4c
c0024719:	c3                   	ret    
c002471a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024720:	85 d2                	test   edx,edx
c0024722:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024726:	0f 88 d4 01 00 00    	js     c0024900 <acos+0x250>
c002472c:	d9 e8                	fld1   
c002472e:	de e1                	fsubrp st(1),st
c0024730:	d8 0d fc e7 02 c0    	fmul   DWORD PTR ds:0xc002e7fc
c0024736:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002473a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002473e:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0024742:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024745:	e8 36 27 00 00       	call   c0026e80 <sqrt>
c002474a:	31 c0                	xor    eax,eax
c002474c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0024750:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024754:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024758:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002475c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024760:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0024764:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024768:	d9 c1                	fld    st(1)
c002476a:	dc 0d a8 e7 02 c0    	fmul   QWORD PTR ds:0xc002e7a8
c0024770:	dc 05 b0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7b0
c0024776:	d8 ca                	fmul   st,st(2)
c0024778:	dc 25 b8 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7b8
c002477e:	d8 ca                	fmul   st,st(2)
c0024780:	dc 05 c0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7c0
c0024786:	d8 ca                	fmul   st,st(2)
c0024788:	dc 25 c8 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7c8
c002478e:	d8 ca                	fmul   st,st(2)
c0024790:	dc 05 d0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7d0
c0024796:	d8 ca                	fmul   st,st(2)
c0024798:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002479c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00247a0:	d9 c2                	fld    st(2)
c00247a2:	dc 0d d8 e7 02 c0    	fmul   QWORD PTR ds:0xc002e7d8
c00247a8:	dc 25 e0 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7e0
c00247ae:	d8 cb                	fmul   st,st(3)
c00247b0:	dc 05 e8 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7e8
c00247b6:	d8 cb                	fmul   st,st(3)
c00247b8:	dc 25 f0 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7f0
c00247be:	d8 cb                	fmul   st,st(3)
c00247c0:	d9 e8                	fld1   
c00247c2:	de c1                	faddp  st(1),st
c00247c4:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00247c8:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00247cc:	de f9                	fdivp  st(1),st
c00247ce:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00247d2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00247d6:	d8 c9                	fmul   st,st(1)
c00247d8:	d9 c3                	fld    st(3)
c00247da:	d8 cc                	fmul   st,st(4)
c00247dc:	de eb                	fsubp  st(3),st
c00247de:	d9 c9                	fxch   st(1)
c00247e0:	d8 c3                	fadd   st,st(3)
c00247e2:	de fa                	fdivp  st(2),st
c00247e4:	d9 c9                	fxch   st(1)
c00247e6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00247ea:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00247ee:	de c1                	faddp  st(1),st
c00247f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00247f4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00247f8:	de c1                	faddp  st(1),st
c00247fa:	d8 c0                	fadd   st,st(0)
c00247fc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024800:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024804:	83 c4 4c             	add    esp,0x4c
c0024807:	c3                   	ret    
c0024808:	90                   	nop
c0024809:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024810:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024814:	d8 e0                	fsub   st,st(0)
c0024816:	d8 f0                	fdiv   st,st(0)
c0024818:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002481c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024820:	83 c4 4c             	add    esp,0x4c
c0024823:	c3                   	ret    
c0024824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002482a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024830:	dd 05 88 01 03 c0    	fld    QWORD PTR ds:0xc0030188
c0024836:	d8 c0                	fadd   st,st(0)
c0024838:	dc 05 98 e7 02 c0    	fadd   QWORD PTR ds:0xc002e798
c002483e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024842:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024846:	83 c4 4c             	add    esp,0x4c
c0024849:	c3                   	ret    
c002484a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024850:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024854:	d9 c0                	fld    st(0)
c0024856:	d8 c9                	fmul   st,st(1)
c0024858:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002485c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024860:	dd 05 88 01 03 c0    	fld    QWORD PTR ds:0xc0030188
c0024866:	d9 c1                	fld    st(1)
c0024868:	dc 0d a8 e7 02 c0    	fmul   QWORD PTR ds:0xc002e7a8
c002486e:	dc 05 b0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7b0
c0024874:	d8 ca                	fmul   st,st(2)
c0024876:	dc 25 b8 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7b8
c002487c:	d8 ca                	fmul   st,st(2)
c002487e:	dc 05 c0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7c0
c0024884:	d8 ca                	fmul   st,st(2)
c0024886:	dc 25 c8 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7c8
c002488c:	d8 ca                	fmul   st,st(2)
c002488e:	dc 05 d0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7d0
c0024894:	d8 ca                	fmul   st,st(2)
c0024896:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002489a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002489e:	d9 c2                	fld    st(2)
c00248a0:	dc 0d d8 e7 02 c0    	fmul   QWORD PTR ds:0xc002e7d8
c00248a6:	dc 25 e0 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7e0
c00248ac:	d8 cb                	fmul   st,st(3)
c00248ae:	dc 05 e8 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7e8
c00248b4:	d8 cb                	fmul   st,st(3)
c00248b6:	dc 25 f0 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7f0
c00248bc:	de cb                	fmulp  st(3),st
c00248be:	d9 ca                	fxch   st(2)
c00248c0:	d8 05 f8 e7 02 c0    	fadd   DWORD PTR ds:0xc002e7f8
c00248c6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00248ca:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00248ce:	de fa                	fdivp  st(2),st
c00248d0:	d9 c9                	fxch   st(1)
c00248d2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00248d6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00248da:	d8 ca                	fmul   st,st(2)
c00248dc:	de e9                	fsubp  st(1),st
c00248de:	de e9                	fsubp  st(1),st
c00248e0:	dc 2d a0 e7 02 c0    	fsubr  QWORD PTR ds:0xc002e7a0
c00248e6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00248ea:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00248ee:	83 c4 4c             	add    esp,0x4c
c00248f1:	c3                   	ret    
c00248f2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00248f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024900:	d9 e8                	fld1   
c0024902:	de c1                	faddp  st(1),st
c0024904:	d8 0d fc e7 02 c0    	fmul   DWORD PTR ds:0xc002e7fc
c002490a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002490e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024912:	d9 c0                	fld    st(0)
c0024914:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0024918:	dd 1c 24             	fstp   QWORD PTR [esp]
c002491b:	e8 60 25 00 00       	call   c0026e80 <sqrt>
c0024920:	dd 05 88 01 03 c0    	fld    QWORD PTR ds:0xc0030188
c0024926:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c002492a:	d9 c0                	fld    st(0)
c002492c:	dc 0d a8 e7 02 c0    	fmul   QWORD PTR ds:0xc002e7a8
c0024932:	dc 05 b0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7b0
c0024938:	d8 c9                	fmul   st,st(1)
c002493a:	dc 25 b8 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7b8
c0024940:	d8 c9                	fmul   st,st(1)
c0024942:	dc 05 c0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7c0
c0024948:	d8 c9                	fmul   st,st(1)
c002494a:	dc 25 c8 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7c8
c0024950:	d8 c9                	fmul   st,st(1)
c0024952:	dc 05 d0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7d0
c0024958:	d8 c9                	fmul   st,st(1)
c002495a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002495e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024962:	d9 c1                	fld    st(1)
c0024964:	dc 0d d8 e7 02 c0    	fmul   QWORD PTR ds:0xc002e7d8
c002496a:	dc 25 e0 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7e0
c0024970:	d8 ca                	fmul   st,st(2)
c0024972:	dc 05 e8 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7e8
c0024978:	d8 ca                	fmul   st,st(2)
c002497a:	dc 25 f0 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7f0
c0024980:	de ca                	fmulp  st(2),st
c0024982:	d9 e8                	fld1   
c0024984:	de c2                	faddp  st(2),st
c0024986:	d9 c9                	fxch   st(1)
c0024988:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002498c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024990:	de f9                	fdivp  st(1),st
c0024992:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024996:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002499a:	d8 ca                	fmul   st,st(2)
c002499c:	de e1                	fsubrp st(1),st
c002499e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00249a2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00249a6:	de c1                	faddp  st(1),st
c00249a8:	d8 c0                	fadd   st,st(0)
c00249aa:	dc 2d 98 e7 02 c0    	fsubr  QWORD PTR ds:0xc002e798
c00249b0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00249b4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00249b8:	83 c4 4c             	add    esp,0x4c
c00249bb:	c3                   	ret    
c00249bc:	66 90                	xchg   ax,ax
c00249be:	66 90                	xchg   ax,ax

c00249c0 <asin>:
c00249c0:	56                   	push   esi
c00249c1:	53                   	push   ebx
c00249c2:	83 ec 44             	sub    esp,0x44
c00249c5:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00249c9:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00249cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00249d1:	89 f3                	mov    ebx,esi
c00249d3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00249d9:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c00249df:	7e 4f                	jle    c0024a30 <asin+0x70>
c00249e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249e5:	81 eb 00 00 f0 3f    	sub    ebx,0x3ff00000
c00249eb:	09 c3                	or     ebx,eax
c00249ed:	74 21                	je     c0024a10 <asin+0x50>
c00249ef:	d8 e0                	fsub   st,st(0)
c00249f1:	d8 f0                	fdiv   st,st(0)
c00249f3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00249f7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00249fb:	eb 05                	jmp    c0024a02 <asin+0x42>
c00249fd:	8d 76 00             	lea    esi,[esi+0x0]
c0024a00:	dd d9                	fstp   st(1)
c0024a02:	83 c4 44             	add    esp,0x44
c0024a05:	5b                   	pop    ebx
c0024a06:	5e                   	pop    esi
c0024a07:	c3                   	ret    
c0024a08:	90                   	nop
c0024a09:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024a10:	d9 c0                	fld    st(0)
c0024a12:	dc 0d a0 e7 02 c0    	fmul   QWORD PTR ds:0xc002e7a0
c0024a18:	d9 c9                	fxch   st(1)
c0024a1a:	dc 0d 00 e8 02 c0    	fmul   QWORD PTR ds:0xc002e800
c0024a20:	de c1                	faddp  st(1),st
c0024a22:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a26:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a2a:	83 c4 44             	add    esp,0x44
c0024a2d:	5b                   	pop    ebx
c0024a2e:	5e                   	pop    esi
c0024a2f:	c3                   	ret    
c0024a30:	dd d8                	fstp   st(0)
c0024a32:	81 fb ff ff df 3f    	cmp    ebx,0x3fdfffff
c0024a38:	0f 8f b2 00 00 00    	jg     c0024af0 <asin+0x130>
c0024a3e:	81 fb ff ff 4f 3e    	cmp    ebx,0x3e4fffff
c0024a44:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024a48:	7f 16                	jg     c0024a60 <asin+0xa0>
c0024a4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024a4e:	d9 e8                	fld1   
c0024a50:	d9 c2                	fld    st(2)
c0024a52:	dc 05 08 e8 02 c0    	fadd   QWORD PTR ds:0xc002e808
c0024a58:	df f1                	fcomip st,st(1)
c0024a5a:	dd d8                	fstp   st(0)
c0024a5c:	77 a2                	ja     c0024a00 <asin+0x40>
c0024a5e:	dd d8                	fstp   st(0)
c0024a60:	d9 c0                	fld    st(0)
c0024a62:	d8 c9                	fmul   st,st(1)
c0024a64:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a68:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a6c:	d9 c0                	fld    st(0)
c0024a6e:	dc 0d a8 e7 02 c0    	fmul   QWORD PTR ds:0xc002e7a8
c0024a74:	dc 05 b0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7b0
c0024a7a:	d8 c9                	fmul   st,st(1)
c0024a7c:	dc 25 b8 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7b8
c0024a82:	d8 c9                	fmul   st,st(1)
c0024a84:	dc 05 c0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7c0
c0024a8a:	d8 c9                	fmul   st,st(1)
c0024a8c:	dc 25 c8 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7c8
c0024a92:	d8 c9                	fmul   st,st(1)
c0024a94:	dc 05 d0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7d0
c0024a9a:	d8 c9                	fmul   st,st(1)
c0024a9c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024aa0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024aa4:	d9 c1                	fld    st(1)
c0024aa6:	dc 0d d8 e7 02 c0    	fmul   QWORD PTR ds:0xc002e7d8
c0024aac:	dc 25 e0 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7e0
c0024ab2:	d8 ca                	fmul   st,st(2)
c0024ab4:	dc 05 e8 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7e8
c0024aba:	d8 ca                	fmul   st,st(2)
c0024abc:	dc 25 f0 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7f0
c0024ac2:	de ca                	fmulp  st(2),st
c0024ac4:	d9 c9                	fxch   st(1)
c0024ac6:	d8 05 f8 e7 02 c0    	fadd   DWORD PTR ds:0xc002e7f8
c0024acc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024ad0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024ad4:	de f9                	fdivp  st(1),st
c0024ad6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024ada:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024ade:	d8 c9                	fmul   st,st(1)
c0024ae0:	de c1                	faddp  st(1),st
c0024ae2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024ae6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024aea:	83 c4 44             	add    esp,0x44
c0024aed:	5b                   	pop    ebx
c0024aee:	5e                   	pop    esi
c0024aef:	c3                   	ret    
c0024af0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024af4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024af7:	e8 34 1d 00 00       	call   c0026830 <fabs>
c0024afc:	d9 e8                	fld1   
c0024afe:	dc e1                	fsubr  st(1),st
c0024b00:	d9 c9                	fxch   st(1)
c0024b02:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024b06:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024b0a:	d9 05 fc e7 02 c0    	fld    DWORD PTR ds:0xc002e7fc
c0024b10:	de c9                	fmulp  st(1),st
c0024b12:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024b16:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024b1a:	d9 c0                	fld    st(0)
c0024b1c:	d9 c0                	fld    st(0)
c0024b1e:	dc 0d a8 e7 02 c0    	fmul   QWORD PTR ds:0xc002e7a8
c0024b24:	dc 05 b0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7b0
c0024b2a:	d8 c9                	fmul   st,st(1)
c0024b2c:	dc 25 b8 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7b8
c0024b32:	d8 c9                	fmul   st,st(1)
c0024b34:	dc 05 c0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7c0
c0024b3a:	d8 c9                	fmul   st,st(1)
c0024b3c:	dc 25 c8 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7c8
c0024b42:	d8 c9                	fmul   st,st(1)
c0024b44:	dc 05 d0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7d0
c0024b4a:	d8 c9                	fmul   st,st(1)
c0024b4c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024b50:	d9 c0                	fld    st(0)
c0024b52:	dc 0d d8 e7 02 c0    	fmul   QWORD PTR ds:0xc002e7d8
c0024b58:	dc 25 e0 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7e0
c0024b5e:	d8 c9                	fmul   st,st(1)
c0024b60:	dc 05 e8 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7e8
c0024b66:	d8 c9                	fmul   st,st(1)
c0024b68:	dc 25 f0 e7 02 c0    	fsub   QWORD PTR ds:0xc002e7f0
c0024b6e:	d8 c9                	fmul   st,st(1)
c0024b70:	d9 c9                	fxch   st(1)
c0024b72:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0024b76:	de c2                	faddp  st(2),st
c0024b78:	d9 c9                	fxch   st(1)
c0024b7a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0024b7e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024b81:	e8 fa 22 00 00       	call   c0026e80 <sqrt>
c0024b86:	81 fb 32 33 ef 3f    	cmp    ebx,0x3fef3332
c0024b8c:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0024b90:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0024b94:	7e 4a                	jle    c0024be0 <asin+0x220>
c0024b96:	dd d8                	fstp   st(0)
c0024b98:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024b9c:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0024ba0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024ba4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024ba8:	d8 c9                	fmul   st,st(1)
c0024baa:	de c1                	faddp  st(1),st
c0024bac:	d8 c0                	fadd   st,st(0)
c0024bae:	dc 25 00 e8 02 c0    	fsub   QWORD PTR ds:0xc002e800
c0024bb4:	dc 2d a0 e7 02 c0    	fsubr  QWORD PTR ds:0xc002e7a0
c0024bba:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024bbe:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024bc2:	85 f6                	test   esi,esi
c0024bc4:	0f 8f 38 fe ff ff    	jg     c0024a02 <asin+0x42>
c0024bca:	d9 e0                	fchs   
c0024bcc:	e9 31 fe ff ff       	jmp    c0024a02 <asin+0x42>
c0024bd1:	eb 0d                	jmp    c0024be0 <asin+0x220>
c0024bd3:	90                   	nop
c0024bd4:	90                   	nop
c0024bd5:	90                   	nop
c0024bd6:	90                   	nop
c0024bd7:	90                   	nop
c0024bd8:	90                   	nop
c0024bd9:	90                   	nop
c0024bda:	90                   	nop
c0024bdb:	90                   	nop
c0024bdc:	90                   	nop
c0024bdd:	90                   	nop
c0024bde:	90                   	nop
c0024bdf:	90                   	nop
c0024be0:	dd d9                	fstp   st(1)
c0024be2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024be6:	31 c0                	xor    eax,eax
c0024be8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024bec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024bf0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024bf4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024bf8:	d9 c0                	fld    st(0)
c0024bfa:	d8 c1                	fadd   st,st(1)
c0024bfc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024c00:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0024c04:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c08:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c0c:	de c9                	fmulp  st(1),st
c0024c0e:	d9 c2                	fld    st(2)
c0024c10:	d8 cb                	fmul   st,st(3)
c0024c12:	de ec                	fsubp  st(4),st
c0024c14:	d9 c9                	fxch   st(1)
c0024c16:	d8 c2                	fadd   st,st(2)
c0024c18:	de fb                	fdivp  st(3),st
c0024c1a:	d9 ca                	fxch   st(2)
c0024c1c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c20:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c24:	d8 c0                	fadd   st,st(0)
c0024c26:	dc 2d 00 e8 02 c0    	fsubr  QWORD PTR ds:0xc002e800
c0024c2c:	de ea                	fsubp  st(2),st
c0024c2e:	d9 c9                	fxch   st(1)
c0024c30:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c34:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c38:	d9 c9                	fxch   st(1)
c0024c3a:	d8 c0                	fadd   st,st(0)
c0024c3c:	dd 05 10 e8 02 c0    	fld    QWORD PTR ds:0xc002e810
c0024c42:	dc e1                	fsubr  st(1),st
c0024c44:	d9 c9                	fxch   st(1)
c0024c46:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c4a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c4e:	de ea                	fsubp  st(2),st
c0024c50:	de e1                	fsubrp st(1),st
c0024c52:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c56:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c5a:	e9 63 ff ff ff       	jmp    c0024bc2 <asin+0x202>
c0024c5f:	90                   	nop

c0024c60 <atan2>:
c0024c60:	83 ec 4c             	sub    esp,0x4c
c0024c63:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0024c67:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0024c6b:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0024c6f:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0024c73:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024c77:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c0024c7b:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0024c7f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0024c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c87:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024c8b:	89 c1                	mov    ecx,eax
c0024c8d:	f7 d9                	neg    ecx
c0024c8f:	89 d3                	mov    ebx,edx
c0024c91:	09 c1                	or     ecx,eax
c0024c93:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024c99:	c1 e9 1f             	shr    ecx,0x1f
c0024c9c:	09 d9                	or     ecx,ebx
c0024c9e:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0024ca4:	77 7a                	ja     c0024d20 <atan2+0xc0>
c0024ca6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0024caa:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0024cae:	89 f1                	mov    ecx,esi
c0024cb0:	f7 d9                	neg    ecx
c0024cb2:	89 ef                	mov    edi,ebp
c0024cb4:	09 f1                	or     ecx,esi
c0024cb6:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
c0024cbc:	c1 e9 1f             	shr    ecx,0x1f
c0024cbf:	09 f9                	or     ecx,edi
c0024cc1:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c0024cc7:	77 57                	ja     c0024d20 <atan2+0xc0>
c0024cc9:	81 fa 00 00 f0 3f    	cmp    edx,0x3ff00000
c0024ccf:	75 08                	jne    c0024cd9 <atan2+0x79>
c0024cd1:	85 c0                	test   eax,eax
c0024cd3:	0f 84 f7 00 00 00    	je     c0024dd0 <atan2+0x170>
c0024cd9:	89 d1                	mov    ecx,edx
c0024cdb:	c1 f9 1e             	sar    ecx,0x1e
c0024cde:	83 e1 02             	and    ecx,0x2
c0024ce1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0024ce5:	89 e9                	mov    ecx,ebp
c0024ce7:	c1 e9 1f             	shr    ecx,0x1f
c0024cea:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0024cee:	09 fe                	or     esi,edi
c0024cf0:	75 5e                	jne    c0024d50 <atan2+0xf0>
c0024cf2:	83 f9 02             	cmp    ecx,0x2
c0024cf5:	0f 84 65 01 00 00    	je     c0024e60 <atan2+0x200>
c0024cfb:	83 f9 03             	cmp    ecx,0x3
c0024cfe:	0f 85 1c 01 00 00    	jne    c0024e20 <atan2+0x1c0>
c0024d04:	dd 05 98 01 03 c0    	fld    QWORD PTR ds:0xc0030198
c0024d0a:	dd 05 18 e8 02 c0    	fld    QWORD PTR ds:0xc002e818
c0024d10:	de e1                	fsubrp st(1),st
c0024d12:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024d16:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024d1a:	eb 14                	jmp    c0024d30 <atan2+0xd0>
c0024d1c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024d20:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024d24:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0024d28:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024d2c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024d30:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024d34:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0024d38:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d3c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024d40:	83 c4 4c             	add    esp,0x4c
c0024d43:	c3                   	ret    
c0024d44:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024d4a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024d50:	09 d8                	or     eax,ebx
c0024d52:	0f 84 98 00 00 00    	je     c0024df0 <atan2+0x190>
c0024d58:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0024d5e:	0f 84 1c 01 00 00    	je     c0024e80 <atan2+0x220>
c0024d64:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0024d6a:	0f 84 80 00 00 00    	je     c0024df0 <atan2+0x190>
c0024d70:	29 df                	sub    edi,ebx
c0024d72:	c1 ff 14             	sar    edi,0x14
c0024d75:	83 ff 3c             	cmp    edi,0x3c
c0024d78:	0f 8f b2 00 00 00    	jg     c0024e30 <atan2+0x1d0>
c0024d7e:	c1 ea 1f             	shr    edx,0x1f
c0024d81:	84 d2                	test   dl,dl
c0024d83:	0f 84 97 01 00 00    	je     c0024f20 <atan2+0x2c0>
c0024d89:	83 ff c4             	cmp    edi,0xffffffc4
c0024d8c:	0f 8d 8e 01 00 00    	jge    c0024f20 <atan2+0x2c0>
c0024d92:	d9 ee                	fldz   
c0024d94:	83 f9 01             	cmp    ecx,0x1
c0024d97:	0f 84 02 01 00 00    	je     c0024e9f <atan2+0x23f>
c0024d9d:	83 f9 02             	cmp    ecx,0x2
c0024da0:	0f 84 2a 01 00 00    	je     c0024ed0 <atan2+0x270>
c0024da6:	85 c9                	test   ecx,ecx
c0024da8:	74 86                	je     c0024d30 <atan2+0xd0>
c0024daa:	dd 05 90 01 03 c0    	fld    QWORD PTR ds:0xc0030190
c0024db0:	de e9                	fsubp  st(1),st
c0024db2:	dc 25 98 e7 02 c0    	fsub   QWORD PTR ds:0xc002e798
c0024db8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024dbc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024dc0:	e9 6b ff ff ff       	jmp    c0024d30 <atan2+0xd0>
c0024dc5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024dc9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024dd0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024dd4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0024dd8:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024ddc:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024de0:	83 c4 4c             	add    esp,0x4c
c0024de3:	e9 a8 11 00 00       	jmp    c0025f90 <atan>
c0024de8:	90                   	nop
c0024de9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024df0:	85 ed                	test   ebp,ebp
c0024df2:	0f 88 b8 00 00 00    	js     c0024eb0 <atan2+0x250>
c0024df8:	dd 05 98 01 03 c0    	fld    QWORD PTR ds:0xc0030198
c0024dfe:	dc 05 a0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7a0
c0024e04:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024e08:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024e0c:	e9 1f ff ff ff       	jmp    c0024d30 <atan2+0xd0>
c0024e11:	eb 0d                	jmp    c0024e20 <atan2+0x1c0>
c0024e13:	90                   	nop
c0024e14:	90                   	nop
c0024e15:	90                   	nop
c0024e16:	90                   	nop
c0024e17:	90                   	nop
c0024e18:	90                   	nop
c0024e19:	90                   	nop
c0024e1a:	90                   	nop
c0024e1b:	90                   	nop
c0024e1c:	90                   	nop
c0024e1d:	90                   	nop
c0024e1e:	90                   	nop
c0024e1f:	90                   	nop
c0024e20:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024e24:	e9 07 ff ff ff       	jmp    c0024d30 <atan2+0xd0>
c0024e29:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024e30:	dd 05 90 01 03 c0    	fld    QWORD PTR ds:0xc0030190
c0024e36:	83 e1 01             	and    ecx,0x1
c0024e39:	d9 05 fc e7 02 c0    	fld    DWORD PTR ds:0xc002e7fc
c0024e3f:	de c9                	fmulp  st(1),st
c0024e41:	dc 05 a0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7a0
c0024e47:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024e4b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024e4f:	e9 40 ff ff ff       	jmp    c0024d94 <atan2+0x134>
c0024e54:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024e5a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024e60:	dd 05 98 01 03 c0    	fld    QWORD PTR ds:0xc0030198
c0024e66:	dc 05 98 e7 02 c0    	fadd   QWORD PTR ds:0xc002e798
c0024e6c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024e70:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024e74:	e9 b7 fe ff ff       	jmp    c0024d30 <atan2+0xd0>
c0024e79:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024e80:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c0024e86:	74 68                	je     c0024ef0 <atan2+0x290>
c0024e88:	83 f9 02             	cmp    ecx,0x2
c0024e8b:	74 d3                	je     c0024e60 <atan2+0x200>
c0024e8d:	83 f9 03             	cmp    ecx,0x3
c0024e90:	0f 84 6e fe ff ff    	je     c0024d04 <atan2+0xa4>
c0024e96:	d9 ee                	fldz   
c0024e98:	49                   	dec    ecx
c0024e99:	0f 85 91 fe ff ff    	jne    c0024d30 <atan2+0xd0>
c0024e9f:	d9 e0                	fchs   
c0024ea1:	e9 8a fe ff ff       	jmp    c0024d30 <atan2+0xd0>
c0024ea6:	8d 76 00             	lea    esi,[esi+0x0]
c0024ea9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024eb0:	dd 05 98 01 03 c0    	fld    QWORD PTR ds:0xc0030198
c0024eb6:	dd 05 20 e8 02 c0    	fld    QWORD PTR ds:0xc002e820
c0024ebc:	de e1                	fsubrp st(1),st
c0024ebe:	e9 41 ff ff ff       	jmp    c0024e04 <atan2+0x1a4>
c0024ec3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024ec9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024ed0:	dd 05 90 01 03 c0    	fld    QWORD PTR ds:0xc0030190
c0024ed6:	de e9                	fsubp  st(1),st
c0024ed8:	dc 2d 98 e7 02 c0    	fsubr  QWORD PTR ds:0xc002e798
c0024ede:	e9 21 ff ff ff       	jmp    c0024e04 <atan2+0x1a4>
c0024ee3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024ee9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024ef0:	83 f9 02             	cmp    ecx,0x2
c0024ef3:	0f 84 82 00 00 00    	je     c0024f7b <atan2+0x31b>
c0024ef9:	83 f9 03             	cmp    ecx,0x3
c0024efc:	74 62                	je     c0024f60 <atan2+0x300>
c0024efe:	49                   	dec    ecx
c0024eff:	90                   	nop
c0024f00:	74 43                	je     c0024f45 <atan2+0x2e5>
c0024f02:	dd 05 98 01 03 c0    	fld    QWORD PTR ds:0xc0030198
c0024f08:	dc 05 10 e8 02 c0    	fadd   QWORD PTR ds:0xc002e810
c0024f0e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024f12:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024f16:	e9 15 fe ff ff       	jmp    c0024d30 <atan2+0xd0>
c0024f1b:	90                   	nop
c0024f1c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024f20:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0024f24:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024f28:	dc 74 24 10          	fdiv   QWORD PTR [esp+0x10]
c0024f2c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024f2f:	e8 fc 18 00 00       	call   c0026830 <fabs>
c0024f34:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024f37:	e8 54 10 00 00       	call   c0025f90 <atan>
c0024f3c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024f40:	e9 4f fe ff ff       	jmp    c0024d94 <atan2+0x134>
c0024f45:	dd 05 98 01 03 c0    	fld    QWORD PTR ds:0xc0030198
c0024f4b:	dd 05 28 e8 02 c0    	fld    QWORD PTR ds:0xc002e828
c0024f51:	de e1                	fsubrp st(1),st
c0024f53:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024f57:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024f5b:	e9 d0 fd ff ff       	jmp    c0024d30 <atan2+0xd0>
c0024f60:	dd 05 98 01 03 c0    	fld    QWORD PTR ds:0xc0030198
c0024f66:	dd 05 38 e8 02 c0    	fld    QWORD PTR ds:0xc002e838
c0024f6c:	de e1                	fsubrp st(1),st
c0024f6e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024f72:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024f76:	e9 b5 fd ff ff       	jmp    c0024d30 <atan2+0xd0>
c0024f7b:	dd 05 98 01 03 c0    	fld    QWORD PTR ds:0xc0030198
c0024f81:	dc 05 30 e8 02 c0    	fadd   QWORD PTR ds:0xc002e830
c0024f87:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0024f8b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024f8f:	e9 9c fd ff ff       	jmp    c0024d30 <atan2+0xd0>
c0024f94:	66 90                	xchg   ax,ax
c0024f96:	66 90                	xchg   ax,ax
c0024f98:	66 90                	xchg   ax,ax
c0024f9a:	66 90                	xchg   ax,ax
c0024f9c:	66 90                	xchg   ax,ax
c0024f9e:	66 90                	xchg   ax,ax

c0024fa0 <cosh>:
c0024fa0:	53                   	push   ebx
c0024fa1:	83 ec 28             	sub    esp,0x28
c0024fa4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0024fa8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0024fac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024fb0:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024fb6:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c0024fbc:	0f 8f 9e 00 00 00    	jg     c0025060 <cosh+0xc0>
c0024fc2:	dd d8                	fstp   st(0)
c0024fc4:	81 fb 42 2e d6 3f    	cmp    ebx,0x3fd62e42
c0024fca:	7e 44                	jle    c0025010 <cosh+0x70>
c0024fcc:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0024fd2:	0f 8e a8 00 00 00    	jle    c0025080 <cosh+0xe0>
c0024fd8:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c0024fde:	0f 8e dc 00 00 00    	jle    c00250c0 <cosh+0x120>
c0024fe4:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c0024fea:	0f 8e 00 01 00 00    	jle    c00250f0 <cosh+0x150>
c0024ff0:	d9 05 40 e8 02 c0    	fld    DWORD PTR ds:0xc002e840
c0024ff6:	eb 0c                	jmp    c0025004 <cosh+0x64>
c0024ff8:	90                   	nop
c0024ff9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025000:	dd d9                	fstp   st(1)
c0025002:	dd d9                	fstp   st(1)
c0025004:	83 c4 28             	add    esp,0x28
c0025007:	5b                   	pop    ebx
c0025008:	c3                   	ret    
c0025009:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025010:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025014:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025017:	e8 14 18 00 00       	call   c0026830 <fabs>
c002501c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002501f:	e8 7c 13 00 00       	call   c00263a0 <expm1>
c0025024:	81 fb ff ff 7f 3c    	cmp    ebx,0x3c7fffff
c002502a:	d9 e8                	fld1   
c002502c:	d9 c1                	fld    st(1)
c002502e:	d8 c1                	fadd   st,st(1)
c0025030:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025034:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025038:	7e c6                	jle    c0025000 <cosh+0x60>
c002503a:	d9 ca                	fxch   st(2)
c002503c:	d8 c8                	fmul   st,st(0)
c002503e:	d9 ca                	fxch   st(2)
c0025040:	d8 c0                	fadd   st,st(0)
c0025042:	de fa                	fdivp  st(2),st
c0025044:	de c1                	faddp  st(1),st
c0025046:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002504a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002504e:	83 c4 28             	add    esp,0x28
c0025051:	5b                   	pop    ebx
c0025052:	c3                   	ret    
c0025053:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025059:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025060:	d9 c0                	fld    st(0)
c0025062:	de c9                	fmulp  st(1),st
c0025064:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025068:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002506c:	83 c4 28             	add    esp,0x28
c002506f:	5b                   	pop    ebx
c0025070:	c3                   	ret    
c0025071:	eb 0d                	jmp    c0025080 <cosh+0xe0>
c0025073:	90                   	nop
c0025074:	90                   	nop
c0025075:	90                   	nop
c0025076:	90                   	nop
c0025077:	90                   	nop
c0025078:	90                   	nop
c0025079:	90                   	nop
c002507a:	90                   	nop
c002507b:	90                   	nop
c002507c:	90                   	nop
c002507d:	90                   	nop
c002507e:	90                   	nop
c002507f:	90                   	nop
c0025080:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025084:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025087:	e8 a4 17 00 00       	call   c0026830 <fabs>
c002508c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002508f:	e8 54 1d 00 00       	call   c0026de8 <exp>
c0025094:	d9 05 fc e7 02 c0    	fld    DWORD PTR ds:0xc002e7fc
c002509a:	d9 c1                	fld    st(1)
c002509c:	d8 c9                	fmul   st,st(1)
c002509e:	d9 c9                	fxch   st(1)
c00250a0:	de f2                	fdivrp st(2),st
c00250a2:	de c1                	faddp  st(1),st
c00250a4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00250a8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00250ac:	e9 53 ff ff ff       	jmp    c0025004 <cosh+0x64>
c00250b1:	eb 0d                	jmp    c00250c0 <cosh+0x120>
c00250b3:	90                   	nop
c00250b4:	90                   	nop
c00250b5:	90                   	nop
c00250b6:	90                   	nop
c00250b7:	90                   	nop
c00250b8:	90                   	nop
c00250b9:	90                   	nop
c00250ba:	90                   	nop
c00250bb:	90                   	nop
c00250bc:	90                   	nop
c00250bd:	90                   	nop
c00250be:	90                   	nop
c00250bf:	90                   	nop
c00250c0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00250c4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00250c7:	e8 64 17 00 00       	call   c0026830 <fabs>
c00250cc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00250cf:	e8 14 1d 00 00       	call   c0026de8 <exp>
c00250d4:	d9 05 fc e7 02 c0    	fld    DWORD PTR ds:0xc002e7fc
c00250da:	de c9                	fmulp  st(1),st
c00250dc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00250e0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00250e4:	e9 1b ff ff ff       	jmp    c0025004 <cosh+0x64>
c00250e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00250f0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00250f4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00250f7:	e8 34 17 00 00       	call   c0026830 <fabs>
c00250fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025101:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025105:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025108:	e8 d3 0c 00 00       	call   c0025de0 <__ldexp_exp>
c002510d:	e9 f2 fe ff ff       	jmp    c0025004 <cosh+0x64>
c0025112:	66 90                	xchg   ax,ax
c0025114:	66 90                	xchg   ax,ax
c0025116:	66 90                	xchg   ax,ax
c0025118:	66 90                	xchg   ax,ax
c002511a:	66 90                	xchg   ax,ax
c002511c:	66 90                	xchg   ax,ax
c002511e:	66 90                	xchg   ax,ax

c0025120 <pow>:
c0025120:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0025126:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
c002512d:	dd 84 24 a0 00 00 00 	fld    QWORD PTR [esp+0xa0]
c0025134:	89 9c 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],ebx
c002513b:	89 bc 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],edi
c0025142:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025146:	89 ac 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],ebp
c002514d:	dd 84 24 a8 00 00 00 	fld    QWORD PTR [esp+0xa8]
c0025154:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025158:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002515c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025160:	89 f3                	mov    ebx,esi
c0025162:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025168:	89 d9                	mov    ecx,ebx
c002516a:	09 c1                	or     ecx,eax
c002516c:	0f 84 9e 00 00 00    	je     c0025210 <pow+0xf0>
c0025172:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0025176:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002517a:	81 ff 00 00 f0 3f    	cmp    edi,0x3ff00000
c0025180:	75 3e                	jne    c00251c0 <pow+0xa0>
c0025182:	85 ed                	test   ebp,ebp
c0025184:	75 3a                	jne    c00251c0 <pow+0xa0>
c0025186:	d9 e8                	fld1   
c0025188:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002518c:	eb 02                	jmp    c0025190 <pow+0x70>
c002518e:	dd d8                	fstp   st(0)
c0025190:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025194:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c002519b:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c00251a2:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c00251a9:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c00251b0:	81 c4 9c 00 00 00    	add    esp,0x9c
c00251b6:	c3                   	ret    
c00251b7:	89 f6                	mov    esi,esi
c00251b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00251c0:	89 fa                	mov    edx,edi
c00251c2:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00251c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00251cc:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c00251d2:	7f 1c                	jg     c00251f0 <pow+0xd0>
c00251d4:	0f 94 c1             	sete   cl
c00251d7:	85 ed                	test   ebp,ebp
c00251d9:	0f 95 c2             	setne  dl
c00251dc:	84 ca                	test   dl,cl
c00251de:	75 10                	jne    c00251f0 <pow+0xd0>
c00251e0:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c00251e6:	7f 08                	jg     c00251f0 <pow+0xd0>
c00251e8:	75 36                	jne    c0025220 <pow+0x100>
c00251ea:	85 c0                	test   eax,eax
c00251ec:	74 32                	je     c0025220 <pow+0x100>
c00251ee:	66 90                	xchg   ax,ax
c00251f0:	d9 ee                	fldz   
c00251f2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00251f6:	d8 c1                	fadd   st,st(1)
c00251f8:	d9 c9                	fxch   st(1)
c00251fa:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00251fe:	de c1                	faddp  st(1),st
c0025200:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025204:	eb 8a                	jmp    c0025190 <pow+0x70>
c0025206:	8d 76 00             	lea    esi,[esi+0x0]
c0025209:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025210:	d9 e8                	fld1   
c0025212:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025216:	e9 75 ff ff ff       	jmp    c0025190 <pow+0x70>
c002521b:	90                   	nop
c002521c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025220:	31 c9                	xor    ecx,ecx
c0025222:	85 ff                	test   edi,edi
c0025224:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0025228:	0f 88 22 01 00 00    	js     c0025350 <pow+0x230>
c002522e:	85 c0                	test   eax,eax
c0025230:	75 5e                	jne    c0025290 <pow+0x170>
c0025232:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0025238:	0f 84 72 01 00 00    	je     c00253b0 <pow+0x290>
c002523e:	81 fb 00 00 f0 3f    	cmp    ebx,0x3ff00000
c0025244:	0f 84 b6 01 00 00    	je     c0025400 <pow+0x2e0>
c002524a:	81 fe 00 00 00 40    	cmp    esi,0x40000000
c0025250:	0f 84 38 07 00 00    	je     c002598e <pow+0x86e>
c0025256:	81 fe 00 00 08 40    	cmp    esi,0x40080000
c002525c:	0f 84 33 08 00 00    	je     c0025a95 <pow+0x975>
c0025262:	81 fe 00 00 10 40    	cmp    esi,0x40100000
c0025268:	0f 84 4f 08 00 00    	je     c0025abd <pow+0x99d>
c002526e:	81 fe 00 00 e0 3f    	cmp    esi,0x3fe00000
c0025274:	75 1a                	jne    c0025290 <pow+0x170>
c0025276:	89 f8                	mov    eax,edi
c0025278:	f7 d0                	not    eax
c002527a:	c1 e8 1f             	shr    eax,0x1f
c002527d:	84 c0                	test   al,al
c002527f:	0f 85 f1 08 00 00    	jne    c0025b76 <pow+0xa56>
c0025285:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0025289:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025290:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025294:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025297:	e8 94 15 00 00       	call   c0026830 <fabs>
c002529c:	85 ed                	test   ebp,ebp
c002529e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00252a2:	75 1e                	jne    c00252c2 <pow+0x1a2>
c00252a4:	89 f8                	mov    eax,edi
c00252a6:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00252ab:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c00252b0:	0f 84 33 06 00 00    	je     c00258e9 <pow+0x7c9>
c00252b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00252ba:	85 c0                	test   eax,eax
c00252bc:	0f 84 27 06 00 00    	je     c00258e9 <pow+0x7c9>
c00252c2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00252c6:	89 f8                	mov    eax,edi
c00252c8:	c1 e8 1f             	shr    eax,0x1f
c00252cb:	48                   	dec    eax
c00252cc:	09 c1                	or     ecx,eax
c00252ce:	0f 84 49 01 00 00    	je     c002541d <pow+0x2fd>
c00252d4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00252d8:	d9 ee                	fldz   
c00252da:	49                   	dec    ecx
c00252db:	09 c1                	or     ecx,eax
c00252dd:	0f 85 4b 01 00 00    	jne    c002542e <pow+0x30e>
c00252e3:	d9 e0                	fchs   
c00252e5:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00252e9:	d9 05 44 e8 02 c0    	fld    DWORD PTR ds:0xc002e844
c00252ef:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00252f3:	db 2d 90 e8 02 c0    	fld    TBYTE PTR ds:0xc002e890
c00252f9:	db 2d a0 e8 02 c0    	fld    TBYTE PTR ds:0xc002e8a0
c00252ff:	d9 e8                	fld1   
c0025301:	d9 e0                	fchs   
c0025303:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0025307:	81 fb 00 00 e0 41    	cmp    ebx,0x41e00000
c002530d:	0f 8e 40 01 00 00    	jle    c0025453 <pow+0x333>
c0025313:	81 fb 00 00 f0 43    	cmp    ebx,0x43f00000
c0025319:	0f 8e 93 06 00 00    	jle    c00259b2 <pow+0x892>
c002531f:	dd d8                	fstp   st(0)
c0025321:	dd d8                	fstp   st(0)
c0025323:	81 7c 24 30 ff ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3fefffff
c002532b:	0f 8f c9 07 00 00    	jg     c0025afa <pow+0x9da>
c0025331:	85 f6                	test   esi,esi
c0025333:	0f 88 94 08 00 00    	js     c0025bcd <pow+0xaad>
c0025339:	d9 ee                	fldz   
c002533b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002533f:	e9 4c fe ff ff       	jmp    c0025190 <pow+0x70>
c0025344:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002534a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0025350:	81 fb ff ff 3f 43    	cmp    ebx,0x433fffff
c0025356:	0f 8f 94 00 00 00    	jg     c00253f0 <pow+0x2d0>
c002535c:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c0025362:	0f 8e c6 fe ff ff    	jle    c002522e <pow+0x10e>
c0025368:	89 d9                	mov    ecx,ebx
c002536a:	c1 f9 14             	sar    ecx,0x14
c002536d:	81 e9 ff 03 00 00    	sub    ecx,0x3ff
c0025373:	83 f9 14             	cmp    ecx,0x14
c0025376:	0f 8e e5 06 00 00    	jle    c0025a61 <pow+0x941>
c002537c:	ba 34 00 00 00       	mov    edx,0x34
c0025381:	29 ca                	sub    edx,ecx
c0025383:	89 d1                	mov    ecx,edx
c0025385:	89 c2                	mov    edx,eax
c0025387:	d3 ea                	shr    edx,cl
c0025389:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002538d:	d3 e2                	shl    edx,cl
c002538f:	39 c2                	cmp    edx,eax
c0025391:	0f 85 97 fe ff ff    	jne    c002522e <pow+0x10e>
c0025397:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002539b:	b9 02 00 00 00       	mov    ecx,0x2
c00253a0:	83 e2 01             	and    edx,0x1
c00253a3:	29 d1                	sub    ecx,edx
c00253a5:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00253a9:	e9 80 fe ff ff       	jmp    c002522e <pow+0x10e>
c00253ae:	66 90                	xchg   ax,ax
c00253b0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00253b4:	8d 87 00 00 10 c0    	lea    eax,[edi-0x3ff00000]
c00253ba:	09 e8                	or     eax,ebp
c00253bc:	0f 84 61 05 00 00    	je     c0025923 <pow+0x803>
c00253c2:	81 ff ff ff ef 3f    	cmp    edi,0x3fefffff
c00253c8:	0f 8e 60 05 00 00    	jle    c002592e <pow+0x80e>
c00253ce:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00253d2:	85 f6                	test   esi,esi
c00253d4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00253d8:	0f 89 b2 fd ff ff    	jns    c0025190 <pow+0x70>
c00253de:	e9 56 ff ff ff       	jmp    c0025339 <pow+0x219>
c00253e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00253e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00253f0:	ba 02 00 00 00       	mov    edx,0x2
c00253f5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00253f9:	e9 30 fe ff ff       	jmp    c002522e <pow+0x10e>
c00253fe:	66 90                	xchg   ax,ax
c0025400:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025404:	85 f6                	test   esi,esi
c0025406:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002540a:	0f 89 7e fd ff ff    	jns    c002518e <pow+0x6e>
c0025410:	d9 e8                	fld1   
c0025412:	de f1                	fdivrp st(1),st
c0025414:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025418:	e9 73 fd ff ff       	jmp    c0025190 <pow+0x70>
c002541d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025421:	d8 e0                	fsub   st,st(0)
c0025423:	d8 f0                	fdiv   st,st(0)
c0025425:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025429:	e9 62 fd ff ff       	jmp    c0025190 <pow+0x70>
c002542e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0025432:	d9 05 40 e8 02 c0    	fld    DWORD PTR ds:0xc002e840
c0025438:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002543c:	db 2d 70 e8 02 c0    	fld    TBYTE PTR ds:0xc002e870
c0025442:	db 2d 80 e8 02 c0    	fld    TBYTE PTR ds:0xc002e880
c0025448:	d9 e8                	fld1   
c002544a:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c002544e:	e9 b4 fe ff ff       	jmp    c0025307 <pow+0x1e7>
c0025453:	dd d8                	fstp   st(0)
c0025455:	dd d8                	fstp   st(0)
c0025457:	31 c0                	xor    eax,eax
c0025459:	81 e7 00 00 f0 7f    	and    edi,0x7ff00000
c002545f:	75 1b                	jne    c002547c <pow+0x35c>
c0025461:	d9 05 58 e8 02 c0    	fld    DWORD PTR ds:0xc002e858
c0025467:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c002546b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002546f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0025473:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0025477:	b8 cb ff ff ff       	mov    eax,0xffffffcb
c002547c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0025480:	89 f9                	mov    ecx,edi
c0025482:	81 e7 ff ff 0f 00    	and    edi,0xfffff
c0025488:	c1 f9 14             	sar    ecx,0x14
c002548b:	8d 8c 08 01 fc ff ff 	lea    ecx,[eax+ecx*1-0x3ff]
c0025492:	89 f8                	mov    eax,edi
c0025494:	0d 00 00 f0 3f       	or     eax,0x3ff00000
c0025499:	81 ff 8e 98 03 00    	cmp    edi,0x3988e
c002549f:	0f 8e f8 04 00 00    	jle    c002599d <pow+0x87d>
c00254a5:	81 ff 79 b6 0b 00    	cmp    edi,0xbb679
c00254ab:	0f 8e 25 06 00 00    	jle    c0025ad6 <pow+0x9b6>
c00254b1:	d9 ee                	fldz   
c00254b3:	41                   	inc    ecx
c00254b4:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00254b8:	2d 00 00 10 00       	sub    eax,0x100000
c00254bd:	31 d2                	xor    edx,edx
c00254bf:	d9 ee                	fldz   
c00254c1:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c00254c5:	d9 e8                	fld1   
c00254c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00254cb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00254cf:	d1 f8                	sar    eax,1
c00254d1:	31 f6                	xor    esi,esi
c00254d3:	0d 00 00 00 20       	or     eax,0x20000000
c00254d8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00254dc:	8d 84 02 00 00 08 00 	lea    eax,[edx+eax*1+0x80000]
c00254e3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00254e7:	31 ff                	xor    edi,edi
c00254e9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00254ed:	d9 c0                	fld    st(0)
c00254ef:	d8 e2                	fsub   st,st(2)
c00254f1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00254f5:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00254f9:	d9 c1                	fld    st(1)
c00254fb:	d8 c3                	fadd   st,st(3)
c00254fd:	d8 3d f8 e7 02 c0    	fdivr  DWORD PTR ds:0xc002e7f8
c0025503:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025507:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002550b:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c002550f:	d9 c0                	fld    st(0)
c0025511:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025515:	de ca                	fmulp  st(2),st
c0025517:	d9 c9                	fxch   st(1)
c0025519:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002551d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0025521:	89 6c 24 34          	mov    DWORD PTR [esp+0x34],ebp
c0025525:	31 ed                	xor    ebp,ebp
c0025527:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c002552b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c002552f:	31 c0                	xor    eax,eax
c0025531:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0025535:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025539:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002553d:	d9 c0                	fld    st(0)
c002553f:	d8 c9                	fmul   st,st(1)
c0025541:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025545:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025549:	d9 c2                	fld    st(2)
c002554b:	d8 cc                	fmul   st,st(4)
c002554d:	de ed                	fsubp  st(5),st
c002554f:	d9 ca                	fxch   st(2)
c0025551:	de e6                	fsubrp st(6),st
c0025553:	d9 cc                	fxch   st(4)
c0025555:	de e5                	fsubrp st(5),st
c0025557:	d9 cc                	fxch   st(4)
c0025559:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002555d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025561:	d8 c9                	fmul   st,st(1)
c0025563:	de ea                	fsubp  st(2),st
c0025565:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025569:	de ca                	fmulp  st(2),st
c002556b:	d9 c9                	fxch   st(1)
c002556d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025571:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025575:	d9 c3                	fld    st(3)
c0025577:	dc 0d d8 e8 02 c0    	fmul   QWORD PTR ds:0xc002e8d8
c002557d:	dc 05 e0 e8 02 c0    	fadd   QWORD PTR ds:0xc002e8e0
c0025583:	d8 cc                	fmul   st,st(4)
c0025585:	dc 05 e8 e8 02 c0    	fadd   QWORD PTR ds:0xc002e8e8
c002558b:	d8 cc                	fmul   st,st(4)
c002558d:	dc 05 f0 e8 02 c0    	fadd   QWORD PTR ds:0xc002e8f0
c0025593:	d8 cc                	fmul   st,st(4)
c0025595:	dc 05 f8 e8 02 c0    	fadd   QWORD PTR ds:0xc002e8f8
c002559b:	d8 cc                	fmul   st,st(4)
c002559d:	dc 05 00 e9 02 c0    	fadd   QWORD PTR ds:0xc002e900
c00255a3:	d9 cc                	fxch   st(4)
c00255a5:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00255a9:	d8 c8                	fmul   st,st(0)
c00255ab:	de cc                	fmulp  st(4),st
c00255ad:	d9 cb                	fxch   st(3)
c00255af:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00255b3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00255b7:	d9 c1                	fld    st(1)
c00255b9:	d8 c3                	fadd   st,st(3)
c00255bb:	d8 cc                	fmul   st,st(4)
c00255bd:	de c1                	faddp  st(1),st
c00255bf:	d9 c1                	fld    st(1)
c00255c1:	d8 ca                	fmul   st,st(2)
c00255c3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00255c7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00255cb:	d9 c9                	fxch   st(1)
c00255cd:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00255d1:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00255d5:	d9 05 5c e8 02 c0    	fld    DWORD PTR ds:0xc002e85c
c00255db:	d9 c2                	fld    st(2)
c00255dd:	d8 c1                	fadd   st,st(1)
c00255df:	d8 c2                	fadd   st,st(2)
c00255e1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00255e5:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00255e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00255ed:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00255f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00255f5:	31 c0                	xor    eax,eax
c00255f7:	dc cc                	fmul   st(4),st
c00255f9:	d9 cc                	fxch   st(4)
c00255fb:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00255ff:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025603:	d9 c9                	fxch   st(1)
c0025605:	d8 ec                	fsubr  st,st(4)
c0025607:	de e3                	fsubrp st(3),st
c0025609:	d9 c9                	fxch   st(1)
c002560b:	de e2                	fsubrp st(2),st
c002560d:	d9 c9                	fxch   st(1)
c002560f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025613:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025617:	de cb                	fmulp  st(3),st
c0025619:	d9 cb                	fxch   st(3)
c002561b:	de c9                	fmulp  st(1),st
c002561d:	de c1                	faddp  st(1),st
c002561f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025623:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025627:	d9 c1                	fld    st(1)
c0025629:	d8 c1                	fadd   st,st(1)
c002562b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002562f:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025633:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025637:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002563b:	d9 c0                	fld    st(0)
c002563d:	d8 0d 60 e8 02 c0    	fmul   DWORD PTR ds:0xc002e860
c0025643:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025647:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002564b:	d9 cb                	fxch   st(3)
c002564d:	d8 e9                	fsubr  st,st(1)
c002564f:	de ea                	fsubp  st(2),st
c0025651:	d9 c9                	fxch   st(1)
c0025653:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025657:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002565b:	dc 0d 08 e9 02 c0    	fmul   QWORD PTR ds:0xc002e908
c0025661:	d9 c9                	fxch   st(1)
c0025663:	dc 0d 10 e9 02 c0    	fmul   QWORD PTR ds:0xc002e910
c0025669:	de c1                	faddp  st(1),st
c002566b:	db 6c 24 58          	fld    TBYTE PTR [esp+0x58]
c002566f:	de c1                	faddp  st(1),st
c0025671:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025675:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0025679:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002567d:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0025681:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025685:	d9 c2                	fld    st(2)
c0025687:	d8 c2                	fadd   st,st(2)
c0025689:	db 6c 24 68          	fld    TBYTE PTR [esp+0x68]
c002568d:	dc c1                	fadd   st(1),st
c002568f:	d9 c9                	fxch   st(1)
c0025691:	d8 c2                	fadd   st,st(2)
c0025693:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025697:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c002569b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002569f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00256a3:	dc e2                	fsubr  st(2),st
c00256a5:	d9 ca                	fxch   st(2)
c00256a7:	de e1                	fsubrp st(1),st
c00256a9:	de e3                	fsubrp st(3),st
c00256ab:	d9 ca                	fxch   st(2)
c00256ad:	de e9                	fsubp  st(1),st
c00256af:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00256b3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00256b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00256bb:	31 db                	xor    ebx,ebx
c00256bd:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00256c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00256c5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00256c9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00256cd:	d9 c0                	fld    st(0)
c00256cf:	d8 e2                	fsub   st,st(2)
c00256d1:	d8 cc                	fmul   st,st(4)
c00256d3:	d9 c9                	fxch   st(1)
c00256d5:	de cb                	fmulp  st(3),st
c00256d7:	de c2                	faddp  st(2),st
c00256d9:	d9 c9                	fxch   st(1)
c00256db:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00256df:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00256e3:	d9 ca                	fxch   st(2)
c00256e5:	de c9                	fmulp  st(1),st
c00256e7:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00256eb:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00256ef:	d9 c1                	fld    st(1)
c00256f1:	d8 c1                	fadd   st,st(1)
c00256f3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00256f7:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00256fb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00256ff:	81 fa ff ff 8f 40    	cmp    edx,0x408fffff
c0025705:	89 d3                	mov    ebx,edx
c0025707:	0f 8e 38 02 00 00    	jle    c0025945 <pow+0x825>
c002570d:	8d 8a 00 00 70 bf    	lea    ecx,[edx-0x40900000]
c0025713:	09 c1                	or     ecx,eax
c0025715:	0f 85 f6 03 00 00    	jne    c0025b11 <pow+0x9f1>
c002571b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002571f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025723:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025727:	d8 e1                	fsub   st,st(1)
c0025729:	d9 c2                	fld    st(2)
c002572b:	dc 05 18 e9 02 c0    	fadd   QWORD PTR ds:0xc002e918
c0025731:	df f1                	fcomip st,st(1)
c0025733:	dd d8                	fstp   st(0)
c0025735:	0f 87 2a 04 00 00    	ja     c0025b65 <pow+0xa45>
c002573b:	89 d9                	mov    ecx,ebx
c002573d:	c1 f9 14             	sar    ecx,0x14
c0025740:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025746:	81 e9 fe 03 00 00    	sub    ecx,0x3fe
c002574c:	b8 00 00 10 00       	mov    eax,0x100000
c0025751:	d3 f8                	sar    eax,cl
c0025753:	31 c9                	xor    ecx,ecx
c0025755:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0025759:	01 d8                	add    eax,ebx
c002575b:	be ff ff 0f 00       	mov    esi,0xfffff
c0025760:	89 c2                	mov    edx,eax
c0025762:	c1 fa 14             	sar    edx,0x14
c0025765:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002576b:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0025771:	88 d1                	mov    cl,dl
c0025773:	d3 fe                	sar    esi,cl
c0025775:	b9 14 00 00 00       	mov    ecx,0x14
c002577a:	f7 d6                	not    esi
c002577c:	29 d1                	sub    ecx,edx
c002577e:	21 c6                	and    esi,eax
c0025780:	25 ff ff 0f 00       	and    eax,0xfffff
c0025785:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025789:	0d 00 00 10 00       	or     eax,0x100000
c002578e:	d3 f8                	sar    eax,cl
c0025790:	85 db                	test   ebx,ebx
c0025792:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025796:	89 c1                	mov    ecx,eax
c0025798:	79 02                	jns    c002579c <pow+0x67c>
c002579a:	f7 d9                	neg    ecx
c002579c:	de e9                	fsubp  st(1),st
c002579e:	89 ce                	mov    esi,ecx
c00257a0:	c1 e6 14             	shl    esi,0x14
c00257a3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00257a7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00257ab:	d9 c1                	fld    st(1)
c00257ad:	d8 c1                	fadd   st,st(1)
c00257af:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00257b3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00257b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00257bb:	31 c0                	xor    eax,eax
c00257bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00257c1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00257c5:	d9 c0                	fld    st(0)
c00257c7:	d8 0d 64 e8 02 c0    	fmul   DWORD PTR ds:0xc002e864
c00257cd:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00257d1:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00257d5:	d9 ca                	fxch   st(2)
c00257d7:	d8 e9                	fsubr  st,st(1)
c00257d9:	de eb                	fsubp  st(3),st
c00257db:	d9 ca                	fxch   st(2)
c00257dd:	dc 0d 20 e9 02 c0    	fmul   QWORD PTR ds:0xc002e920
c00257e3:	d9 ca                	fxch   st(2)
c00257e5:	dc 0d 28 e9 02 c0    	fmul   QWORD PTR ds:0xc002e928
c00257eb:	de c2                	faddp  st(2),st
c00257ed:	d9 c9                	fxch   st(1)
c00257ef:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00257f3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00257f7:	d9 c1                	fld    st(1)
c00257f9:	d8 c1                	fadd   st,st(1)
c00257fb:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00257ff:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025803:	d9 c0                	fld    st(0)
c0025805:	d8 c9                	fmul   st,st(1)
c0025807:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002580b:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002580f:	d9 c0                	fld    st(0)
c0025811:	dc 0d 30 e9 02 c0    	fmul   QWORD PTR ds:0xc002e930
c0025817:	dc 25 38 e9 02 c0    	fsub   QWORD PTR ds:0xc002e938
c002581d:	d8 c9                	fmul   st,st(1)
c002581f:	dc 05 40 e9 02 c0    	fadd   QWORD PTR ds:0xc002e940
c0025825:	d8 c9                	fmul   st,st(1)
c0025827:	dc 25 48 e9 02 c0    	fsub   QWORD PTR ds:0xc002e948
c002582d:	d8 c9                	fmul   st,st(1)
c002582f:	dc 05 50 e9 02 c0    	fadd   QWORD PTR ds:0xc002e950
c0025835:	de c9                	fmulp  st(1),st
c0025837:	d8 e9                	fsubr  st,st(1)
c0025839:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002583d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025841:	d9 cb                	fxch   st(3)
c0025843:	d8 e9                	fsubr  st,st(1)
c0025845:	de ea                	fsubp  st(2),st
c0025847:	d9 c9                	fxch   st(1)
c0025849:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002584d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025851:	d9 c1                	fld    st(1)
c0025853:	d8 cb                	fmul   st,st(3)
c0025855:	d9 cb                	fxch   st(3)
c0025857:	d8 25 68 e8 02 c0    	fsub   DWORD PTR ds:0xc002e868
c002585d:	de fb                	fdivp  st(3),st
c002585f:	d9 c1                	fld    st(1)
c0025861:	d8 c9                	fmul   st,st(1)
c0025863:	de c1                	faddp  st(1),st
c0025865:	de ea                	fsubp  st(2),st
c0025867:	d9 c9                	fxch   st(1)
c0025869:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002586d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025871:	de e1                	fsubrp st(1),st
c0025873:	d8 2d f8 e7 02 c0    	fsubr  DWORD PTR ds:0xc002e7f8
c0025879:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002587d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025881:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0025885:	89 d3                	mov    ebx,edx
c0025887:	01 f3                	add    ebx,esi
c0025889:	81 fb ff ff 0f 00    	cmp    ebx,0xfffff
c002588f:	0f 8e a7 02 00 00    	jle    c0025b3c <pow+0xa1c>
c0025895:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025899:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002589d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00258a1:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c00258a5:	de c9                	fmulp  st(1),st
c00258a7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00258ab:	e9 e0 f8 ff ff       	jmp    c0025190 <pow+0x70>
c00258b0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00258b4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00258b7:	e8 74 0f 00 00       	call   c0026830 <fabs>
c00258bc:	85 ed                	test   ebp,ebp
c00258be:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00258c2:	0f 85 55 fb ff ff    	jne    c002541d <pow+0x2fd>
c00258c8:	89 f8                	mov    eax,edi
c00258ca:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00258cf:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c00258d4:	74 0b                	je     c00258e1 <pow+0x7c1>
c00258d6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00258db:	0f 85 3c fb ff ff    	jne    c002541d <pow+0x2fd>
c00258e1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00258e9:	85 f6                	test   esi,esi
c00258eb:	79 0a                	jns    c00258f7 <pow+0x7d7>
c00258ed:	d9 e8                	fld1   
c00258ef:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c00258f3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00258f7:	85 ff                	test   edi,edi
c00258f9:	0f 89 91 f8 ff ff    	jns    c0025190 <pow+0x70>
c00258ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025903:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0025908:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
c002590c:	0f 85 10 02 00 00    	jne    c0025b22 <pow+0xa02>
c0025912:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025916:	d8 e0                	fsub   st,st(0)
c0025918:	d8 f0                	fdiv   st,st(0)
c002591a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002591e:	e9 6d f8 ff ff       	jmp    c0025190 <pow+0x70>
c0025923:	d9 e8                	fld1   
c0025925:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025929:	e9 62 f8 ff ff       	jmp    c0025190 <pow+0x70>
c002592e:	85 f6                	test   esi,esi
c0025930:	0f 89 03 fa ff ff    	jns    c0025339 <pow+0x219>
c0025936:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002593a:	d9 e0                	fchs   
c002593c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025940:	e9 4b f8 ff ff       	jmp    c0025190 <pow+0x70>
c0025945:	89 d1                	mov    ecx,edx
c0025947:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
c002594d:	81 f9 ff cb 90 40    	cmp    ecx,0x4090cbff
c0025953:	0f 8e 4f 01 00 00    	jle    c0025aa8 <pow+0x988>
c0025959:	8d 8a 00 34 6f 3f    	lea    ecx,[edx+0x3f6f3400]
c002595f:	09 c1                	or     ecx,eax
c0025961:	0f 85 55 02 00 00    	jne    c0025bbc <pow+0xa9c>
c0025967:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002596b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002596f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025973:	d8 e1                	fsub   st,st(1)
c0025975:	df f2                	fcomip st,st(2)
c0025977:	0f 82 be fd ff ff    	jb     c002573b <pow+0x61b>
c002597d:	dd d8                	fstp   st(0)
c002597f:	dd d8                	fstp   st(0)
c0025981:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0025985:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025989:	e9 02 f8 ff ff       	jmp    c0025190 <pow+0x70>
c002598e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025992:	d8 c8                	fmul   st,st(0)
c0025994:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025998:	e9 f3 f7 ff ff       	jmp    c0025190 <pow+0x70>
c002599d:	d9 ee                	fldz   
c002599f:	31 d2                	xor    edx,edx
c00259a1:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00259a5:	d9 ee                	fldz   
c00259a7:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c00259ab:	d9 e8                	fld1   
c00259ad:	e9 15 fb ff ff       	jmp    c00254c7 <pow+0x3a7>
c00259b2:	81 7c 24 30 fe ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3feffffe
c00259ba:	0f 8e 91 01 00 00    	jle    c0025b51 <pow+0xa31>
c00259c0:	81 7c 24 30 00 00 f0 3f 	cmp    DWORD PTR [esp+0x30],0x3ff00000
c00259c8:	0f 8f da 01 00 00    	jg     c0025ba8 <pow+0xa88>
c00259ce:	dd d8                	fstp   st(0)
c00259d0:	dd d8                	fstp   st(0)
c00259d2:	d9 e8                	fld1   
c00259d4:	31 c0                	xor    eax,eax
c00259d6:	dc 6c 24 28          	fsubr  QWORD PTR [esp+0x28]
c00259da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00259de:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00259e2:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00259e6:	d9 c0                	fld    st(0)
c00259e8:	d8 0d 50 e8 02 c0    	fmul   DWORD PTR ds:0xc002e850
c00259ee:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00259f2:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00259f6:	d9 c1                	fld    st(1)
c00259f8:	dc 0d c8 e8 02 c0    	fmul   QWORD PTR ds:0xc002e8c8
c00259fe:	d9 c2                	fld    st(2)
c0025a00:	d8 0d 54 e8 02 c0    	fmul   DWORD PTR ds:0xc002e854
c0025a06:	db 2d b0 e8 02 c0    	fld    TBYTE PTR ds:0xc002e8b0
c0025a0c:	de e1                	fsubrp st(1),st
c0025a0e:	d8 cb                	fmul   st,st(3)
c0025a10:	d8 2d fc e7 02 c0    	fsubr  DWORD PTR ds:0xc002e7fc
c0025a16:	d9 cb                	fxch   st(3)
c0025a18:	d8 c8                	fmul   st,st(0)
c0025a1a:	de cb                	fmulp  st(3),st
c0025a1c:	d9 ca                	fxch   st(2)
c0025a1e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025a22:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025a26:	dc 0d d0 e8 02 c0    	fmul   QWORD PTR ds:0xc002e8d0
c0025a2c:	de ea                	fsubp  st(2),st
c0025a2e:	d9 c9                	fxch   st(1)
c0025a30:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025a34:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025a38:	d9 c1                	fld    st(1)
c0025a3a:	d8 c1                	fadd   st,st(1)
c0025a3c:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025a40:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0025a44:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025a48:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025a4c:	dc e2                	fsubr  st(2),st
c0025a4e:	d9 c9                	fxch   st(1)
c0025a50:	de e2                	fsubrp st(2),st
c0025a52:	d9 c9                	fxch   st(1)
c0025a54:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025a58:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025a5c:	e9 56 fc ff ff       	jmp    c00256b7 <pow+0x597>
c0025a61:	85 c0                	test   eax,eax
c0025a63:	0f 85 47 fe ff ff    	jne    c00258b0 <pow+0x790>
c0025a69:	b8 14 00 00 00       	mov    eax,0x14
c0025a6e:	29 c8                	sub    eax,ecx
c0025a70:	89 c1                	mov    ecx,eax
c0025a72:	89 d8                	mov    eax,ebx
c0025a74:	d3 f8                	sar    eax,cl
c0025a76:	89 c2                	mov    edx,eax
c0025a78:	d3 e2                	shl    edx,cl
c0025a7a:	39 da                	cmp    edx,ebx
c0025a7c:	0f 85 bc f7 ff ff    	jne    c002523e <pow+0x11e>
c0025a82:	83 e0 01             	and    eax,0x1
c0025a85:	b9 02 00 00 00       	mov    ecx,0x2
c0025a8a:	29 c1                	sub    ecx,eax
c0025a8c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0025a90:	e9 a9 f7 ff ff       	jmp    c002523e <pow+0x11e>
c0025a95:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025a99:	d9 c0                	fld    st(0)
c0025a9b:	d8 c9                	fmul   st,st(1)
c0025a9d:	de c9                	fmulp  st(1),st
c0025a9f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025aa3:	e9 e8 f6 ff ff       	jmp    c0025190 <pow+0x70>
c0025aa8:	81 f9 00 00 e0 3f    	cmp    ecx,0x3fe00000
c0025aae:	0f 8f 28 01 00 00    	jg     c0025bdc <pow+0xabc>
c0025ab4:	31 f6                	xor    esi,esi
c0025ab6:	31 c9                	xor    ecx,ecx
c0025ab8:	e9 fa fc ff ff       	jmp    c00257b7 <pow+0x697>
c0025abd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025ac1:	d8 c8                	fmul   st,st(0)
c0025ac3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0025ac7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0025acb:	d8 c8                	fmul   st,st(0)
c0025acd:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025ad1:	e9 ba f6 ff ff       	jmp    c0025190 <pow+0x70>
c0025ad6:	d9 05 48 e8 02 c0    	fld    DWORD PTR ds:0xc002e848
c0025adc:	ba 00 00 04 00       	mov    edx,0x40000
c0025ae1:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0025ae5:	dd 05 c0 e8 02 c0    	fld    QWORD PTR ds:0xc002e8c0
c0025aeb:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c0025aef:	d9 05 4c e8 02 c0    	fld    DWORD PTR ds:0xc002e84c
c0025af5:	e9 cd f9 ff ff       	jmp    c00254c7 <pow+0x3a7>
c0025afa:	85 f6                	test   esi,esi
c0025afc:	0f 8e 37 f8 ff ff    	jle    c0025339 <pow+0x219>
c0025b02:	d9 05 40 e8 02 c0    	fld    DWORD PTR ds:0xc002e840
c0025b08:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025b0c:	e9 7f f6 ff ff       	jmp    c0025190 <pow+0x70>
c0025b11:	dd d8                	fstp   st(0)
c0025b13:	dd d8                	fstp   st(0)
c0025b15:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025b19:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025b1d:	e9 6e f6 ff ff       	jmp    c0025190 <pow+0x70>
c0025b22:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0025b27:	0f 85 63 f6 ff ff    	jne    c0025190 <pow+0x70>
c0025b2d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025b31:	d9 e0                	fchs   
c0025b33:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025b37:	e9 54 f6 ff ff       	jmp    c0025190 <pow+0x70>
c0025b3c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025b40:	89 04 24             	mov    DWORD PTR [esp],eax
c0025b43:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025b47:	e8 c0 13 00 00       	call   c0026f0c <ldexp>
c0025b4c:	e9 50 fd ff ff       	jmp    c00258a1 <pow+0x781>
c0025b51:	85 f6                	test   esi,esi
c0025b53:	0f 99 c0             	setns  al
c0025b56:	84 c0                	test   al,al
c0025b58:	db c9                	fcmovne st,st(1)
c0025b5a:	dd d9                	fstp   st(1)
c0025b5c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025b60:	e9 2b f6 ff ff       	jmp    c0025190 <pow+0x70>
c0025b65:	dd d8                	fstp   st(0)
c0025b67:	dd d8                	fstp   st(0)
c0025b69:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025b6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025b71:	e9 1a f6 ff ff       	jmp    c0025190 <pow+0x70>
c0025b76:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0025b7d:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c0025b84:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c0025b8b:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c0025b92:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025b96:	dd 9c 24 a0 00 00 00 	fstp   QWORD PTR [esp+0xa0]
c0025b9d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0025ba3:	e9 d8 12 00 00       	jmp    c0026e80 <sqrt>
c0025ba8:	85 f6                	test   esi,esi
c0025baa:	0f 9e c0             	setle  al
c0025bad:	84 c0                	test   al,al
c0025baf:	db c9                	fcmovne st,st(1)
c0025bb1:	dd d9                	fstp   st(1)
c0025bb3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025bb7:	e9 d4 f5 ff ff       	jmp    c0025190 <pow+0x70>
c0025bbc:	dd d8                	fstp   st(0)
c0025bbe:	dd d8                	fstp   st(0)
c0025bc0:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0025bc4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025bc8:	e9 c3 f5 ff ff       	jmp    c0025190 <pow+0x70>
c0025bcd:	d9 05 40 e8 02 c0    	fld    DWORD PTR ds:0xc002e840
c0025bd3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025bd7:	e9 b4 f5 ff ff       	jmp    c0025190 <pow+0x70>
c0025bdc:	c1 f9 14             	sar    ecx,0x14
c0025bdf:	e9 62 fb ff ff       	jmp    c0025746 <pow+0x626>
c0025be4:	66 90                	xchg   ax,ax
c0025be6:	66 90                	xchg   ax,ax
c0025be8:	66 90                	xchg   ax,ax
c0025bea:	66 90                	xchg   ax,ax
c0025bec:	66 90                	xchg   ax,ax
c0025bee:	66 90                	xchg   ax,ax

c0025bf0 <sinh>:
c0025bf0:	53                   	push   ebx
c0025bf1:	83 ec 38             	sub    esp,0x38
c0025bf4:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0025bf8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0025bfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c00:	89 c3                	mov    ebx,eax
c0025c02:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025c08:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c0025c0e:	0f 8f ec 00 00 00    	jg     c0025d00 <sinh+0x110>
c0025c14:	dd d8                	fstp   st(0)
c0025c16:	d9 e8                	fld1   
c0025c18:	85 c0                	test   eax,eax
c0025c1a:	0f 88 90 00 00 00    	js     c0025cb0 <sinh+0xc0>
c0025c20:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0025c26:	d9 05 fc e7 02 c0    	fld    DWORD PTR ds:0xc002e7fc
c0025c2c:	0f 8f 8e 00 00 00    	jg     c0025cc0 <sinh+0xd0>
c0025c32:	dd d9                	fstp   st(1)
c0025c34:	eb 0c                	jmp    c0025c42 <sinh+0x52>
c0025c36:	8d 76 00             	lea    esi,[esi+0x0]
c0025c39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025c40:	dd d9                	fstp   st(1)
c0025c42:	81 fb ff ff 2f 3e    	cmp    ebx,0x3e2fffff
c0025c48:	0f 8f d2 00 00 00    	jg     c0025d20 <sinh+0x130>
c0025c4e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025c52:	d9 e8                	fld1   
c0025c54:	d9 c1                	fld    st(1)
c0025c56:	dc 05 60 e9 02 c0    	fadd   QWORD PTR ds:0xc002e960
c0025c5c:	df f1                	fcomip st,st(1)
c0025c5e:	dd d8                	fstp   st(0)
c0025c60:	77 3e                	ja     c0025ca0 <sinh+0xb0>
c0025c62:	dd d8                	fstp   st(0)
c0025c64:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0025c68:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025c6c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025c6f:	e8 bc 0b 00 00       	call   c0026830 <fabs>
c0025c74:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025c77:	e8 24 07 00 00       	call   c00263a0 <expm1>
c0025c7c:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025c80:	d9 c1                	fld    st(1)
c0025c82:	d8 c2                	fadd   st,st(2)
c0025c84:	d9 c2                	fld    st(2)
c0025c86:	d8 cb                	fmul   st,st(3)
c0025c88:	d9 cb                	fxch   st(3)
c0025c8a:	d8 05 f8 e7 02 c0    	fadd   DWORD PTR ds:0xc002e7f8
c0025c90:	de fb                	fdivp  st(3),st
c0025c92:	de e2                	fsubrp st(2),st
c0025c94:	de c9                	fmulp  st(1),st
c0025c96:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025c9a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025c9e:	eb 02                	jmp    c0025ca2 <sinh+0xb2>
c0025ca0:	dd d9                	fstp   st(1)
c0025ca2:	83 c4 38             	add    esp,0x38
c0025ca5:	5b                   	pop    ebx
c0025ca6:	c3                   	ret    
c0025ca7:	89 f6                	mov    esi,esi
c0025ca9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025cb0:	d9 e0                	fchs   
c0025cb2:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0025cb8:	d9 05 58 e9 02 c0    	fld    DWORD PTR ds:0xc002e958
c0025cbe:	7e 80                	jle    c0025c40 <sinh+0x50>
c0025cc0:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c0025cc6:	0f 8e a4 00 00 00    	jle    c0025d70 <sinh+0x180>
c0025ccc:	dd d8                	fstp   st(0)
c0025cce:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c0025cd4:	0f 8e c6 00 00 00    	jle    c0025da0 <sinh+0x1b0>
c0025cda:	dd d8                	fstp   st(0)
c0025cdc:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025ce0:	dc 0d 60 e9 02 c0    	fmul   QWORD PTR ds:0xc002e960
c0025ce6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025cea:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025cee:	83 c4 38             	add    esp,0x38
c0025cf1:	5b                   	pop    ebx
c0025cf2:	c3                   	ret    
c0025cf3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025cf9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025d00:	d9 c0                	fld    st(0)
c0025d02:	de c1                	faddp  st(1),st
c0025d04:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025d08:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025d0c:	83 c4 38             	add    esp,0x38
c0025d0f:	5b                   	pop    ebx
c0025d10:	c3                   	ret    
c0025d11:	eb 0d                	jmp    c0025d20 <sinh+0x130>
c0025d13:	90                   	nop
c0025d14:	90                   	nop
c0025d15:	90                   	nop
c0025d16:	90                   	nop
c0025d17:	90                   	nop
c0025d18:	90                   	nop
c0025d19:	90                   	nop
c0025d1a:	90                   	nop
c0025d1b:	90                   	nop
c0025d1c:	90                   	nop
c0025d1d:	90                   	nop
c0025d1e:	90                   	nop
c0025d1f:	90                   	nop
c0025d20:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0025d24:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025d28:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025d2b:	e8 00 0b 00 00       	call   c0026830 <fabs>
c0025d30:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025d33:	e8 68 06 00 00       	call   c00263a0 <expm1>
c0025d38:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c0025d3e:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025d42:	0f 8e 38 ff ff ff    	jle    c0025c80 <sinh+0x90>
c0025d48:	d9 c1                	fld    st(1)
c0025d4a:	d8 05 f8 e7 02 c0    	fadd   DWORD PTR ds:0xc002e7f8
c0025d50:	d8 fa                	fdivr  st,st(2)
c0025d52:	de c2                	faddp  st(2),st
c0025d54:	de c9                	fmulp  st(1),st
c0025d56:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025d5a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025d5e:	83 c4 38             	add    esp,0x38
c0025d61:	5b                   	pop    ebx
c0025d62:	c3                   	ret    
c0025d63:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025d69:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025d70:	dd d9                	fstp   st(1)
c0025d72:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0025d76:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025d7a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025d7d:	e8 ae 0a 00 00       	call   c0026830 <fabs>
c0025d82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025d85:	e8 5e 10 00 00       	call   c0026de8 <exp>
c0025d8a:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025d8e:	de c9                	fmulp  st(1),st
c0025d90:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025d94:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025d98:	e9 05 ff ff ff       	jmp    c0025ca2 <sinh+0xb2>
c0025d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0025da0:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0025da4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025da8:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025dab:	e8 80 0a 00 00       	call   c0026830 <fabs>
c0025db0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025db5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025db9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025dbc:	e8 1f 00 00 00       	call   c0025de0 <__ldexp_exp>
c0025dc1:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0025dc5:	de c9                	fmulp  st(1),st
c0025dc7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0025dcb:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0025dcf:	e9 ce fe ff ff       	jmp    c0025ca2 <sinh+0xb2>
c0025dd4:	66 90                	xchg   ax,ax
c0025dd6:	66 90                	xchg   ax,ax
c0025dd8:	66 90                	xchg   ax,ax
c0025dda:	66 90                	xchg   ax,ax
c0025ddc:	66 90                	xchg   ax,ax
c0025dde:	66 90                	xchg   ax,ax

c0025de0 <__ldexp_exp>:
c0025de0:	53                   	push   ebx
c0025de1:	83 ec 28             	sub    esp,0x28
c0025de4:	dd 05 68 e9 02 c0    	fld    QWORD PTR ds:0xc002e968
c0025dea:	dc 6c 24 30          	fsubr  QWORD PTR [esp+0x30]
c0025dee:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025df1:	e8 f2 0f 00 00       	call   c0026de8 <exp>
c0025df6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025dfa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025dfe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e02:	89 da                	mov    edx,ebx
c0025e04:	89 d8                	mov    eax,ebx
c0025e06:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0025e0a:	c1 e8 14             	shr    eax,0x14
c0025e0d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0025e13:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0025e19:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025e1d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0025e21:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025e25:	8d 84 02 08 03 00 00 	lea    eax,[edx+eax*1+0x308]
c0025e2c:	c1 e0 14             	shl    eax,0x14
c0025e2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025e33:	31 c0                	xor    eax,eax
c0025e35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025e39:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025e3d:	de c9                	fmulp  st(1),st
c0025e3f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025e43:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025e47:	83 c4 28             	add    esp,0x28
c0025e4a:	5b                   	pop    ebx
c0025e4b:	c3                   	ret    
c0025e4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0025e50 <__ldexp_cexp>:
c0025e50:	57                   	push   edi
c0025e51:	56                   	push   esi
c0025e52:	53                   	push   ebx
c0025e53:	83 ec 60             	sub    esp,0x60
c0025e56:	dd 44 24 7c          	fld    QWORD PTR [esp+0x7c]
c0025e5a:	dd 44 24 74          	fld    QWORD PTR [esp+0x74]
c0025e5e:	dd 14 24             	fst    QWORD PTR [esp]
c0025e61:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0025e65:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0025e69:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0025e6d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025e71:	e8 6a 0f 00 00       	call   c0026de0 <creal>
c0025e76:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025e7a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025e7e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025e81:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025e85:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0025e89:	e8 42 0f 00 00       	call   c0026dd0 <cimag>
c0025e8e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025e92:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025e96:	dc 25 68 e9 02 c0    	fsub   QWORD PTR ds:0xc002e968
c0025e9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025e9f:	e8 44 0f 00 00       	call   c0026de8 <exp>
c0025ea4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025ea8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025eac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025eb0:	89 fa                	mov    edx,edi
c0025eb2:	89 f8                	mov    eax,edi
c0025eb4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0025eb8:	c1 e8 14             	shr    eax,0x14
c0025ebb:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0025ec1:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0025ec7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025ecb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0025ed2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025ed6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0025eda:	8d 94 02 09 ff ff ff 	lea    edx,[edx+eax*1-0xf7]
c0025ee1:	89 d1                	mov    ecx,edx
c0025ee3:	c1 e9 1f             	shr    ecx,0x1f
c0025ee6:	01 d1                	add    ecx,edx
c0025ee8:	d1 f9                	sar    ecx,1
c0025eea:	8d 81 ff 03 00 00    	lea    eax,[ecx+0x3ff]
c0025ef0:	29 ca                	sub    edx,ecx
c0025ef2:	c1 e0 14             	shl    eax,0x14
c0025ef5:	81 c2 ff 03 00 00    	add    edx,0x3ff
c0025efb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025eff:	c1 e2 14             	shl    edx,0x14
c0025f02:	31 c0                	xor    eax,eax
c0025f04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025f08:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025f0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025f10:	31 d2                	xor    edx,edx
c0025f12:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0025f16:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0025f1a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025f1e:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0025f22:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025f26:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025f29:	e8 12 03 00 00       	call   c0026240 <cos>
c0025f2e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025f32:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025f36:	db 7c 24 48          	fstp   TBYTE PTR [esp+0x48]
c0025f3a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0025f3e:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0025f42:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025f46:	db 7c 24 20          	fstp   TBYTE PTR [esp+0x20]
c0025f4a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025f4e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025f51:	e8 fa 0b 00 00       	call   c0026b50 <sin>
c0025f56:	89 d8                	mov    eax,ebx
c0025f58:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025f5c:	db 6c 24 48          	fld    TBYTE PTR [esp+0x48]
c0025f60:	dc c9                	fmul   st(1),st
c0025f62:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0025f66:	dc ca                	fmul   st(2),st
c0025f68:	db 6c 24 20          	fld    TBYTE PTR [esp+0x20]
c0025f6c:	dc cb                	fmul   st(3),st
c0025f6e:	d9 cb                	fxch   st(3)
c0025f70:	dd 1b                	fstp   QWORD PTR [ebx]
c0025f72:	d9 cb                	fxch   st(3)
c0025f74:	de c9                	fmulp  st(1),st
c0025f76:	de ca                	fmulp  st(2),st
c0025f78:	de c9                	fmulp  st(1),st
c0025f7a:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0025f7d:	83 c4 60             	add    esp,0x60
c0025f80:	5b                   	pop    ebx
c0025f81:	5e                   	pop    esi
c0025f82:	5f                   	pop    edi
c0025f83:	c2 04 00             	ret    0x4
c0025f86:	66 90                	xchg   ax,ax
c0025f88:	66 90                	xchg   ax,ax
c0025f8a:	66 90                	xchg   ax,ax
c0025f8c:	66 90                	xchg   ax,ax
c0025f8e:	66 90                	xchg   ax,ax

c0025f90 <atan>:
c0025f90:	56                   	push   esi
c0025f91:	53                   	push   ebx
c0025f92:	83 ec 24             	sub    esp,0x24
c0025f95:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0025f99:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0025f9d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0025fa1:	89 f3                	mov    ebx,esi
c0025fa3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025fa9:	81 fb ff ff 0f 44    	cmp    ebx,0x440fffff
c0025faf:	7e 5f                	jle    c0026010 <atan+0x80>
c0025fb1:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0025fb7:	7f 0a                	jg     c0025fc3 <atan+0x33>
c0025fb9:	75 25                	jne    c0025fe0 <atan+0x50>
c0025fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fbf:	85 c0                	test   eax,eax
c0025fc1:	74 1d                	je     c0025fe0 <atan+0x50>
c0025fc3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0025fc7:	d8 c0                	fadd   st,st(0)
c0025fc9:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025fcd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025fd1:	83 c4 24             	add    esp,0x24
c0025fd4:	5b                   	pop    ebx
c0025fd5:	5e                   	pop    esi
c0025fd6:	c3                   	ret    
c0025fd7:	89 f6                	mov    esi,esi
c0025fd9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025fe0:	85 f6                	test   esi,esi
c0025fe2:	dd 05 98 e9 02 c0    	fld    QWORD PTR ds:0xc002e998
c0025fe8:	0f 8e 22 01 00 00    	jle    c0026110 <atan+0x180>
c0025fee:	dc 05 a0 e7 02 c0    	fadd   QWORD PTR ds:0xc002e7a0
c0025ff4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0025ff8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025ffc:	83 c4 24             	add    esp,0x24
c0025fff:	5b                   	pop    ebx
c0026000:	5e                   	pop    esi
c0026001:	c3                   	ret    
c0026002:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026009:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026010:	81 fb ff ff db 3f    	cmp    ebx,0x3fdbffff
c0026016:	0f 8f 34 01 00 00    	jg     c0026150 <atan+0x1c0>
c002601c:	81 fb ff ff 3f 3e    	cmp    ebx,0x3e3fffff
c0026022:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026026:	0f 8e c4 00 00 00    	jle    c00260f0 <atan+0x160>
c002602c:	eb 04                	jmp    c0026032 <atan+0xa2>
c002602e:	66 90                	xchg   ax,ax
c0026030:	dd d8                	fstp   st(0)
c0026032:	d9 ee                	fldz   
c0026034:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026039:	d9 ee                	fldz   
c002603b:	d9 c2                	fld    st(2)
c002603d:	40                   	inc    eax
c002603e:	d8 cb                	fmul   st,st(3)
c0026040:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026044:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026048:	d9 c0                	fld    st(0)
c002604a:	d8 c9                	fmul   st,st(1)
c002604c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026050:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026054:	d9 c0                	fld    st(0)
c0026056:	dc 0d c8 e9 02 c0    	fmul   QWORD PTR ds:0xc002e9c8
c002605c:	dc 05 d0 e9 02 c0    	fadd   QWORD PTR ds:0xc002e9d0
c0026062:	d8 c9                	fmul   st,st(1)
c0026064:	dc 05 d8 e9 02 c0    	fadd   QWORD PTR ds:0xc002e9d8
c002606a:	d8 c9                	fmul   st,st(1)
c002606c:	dc 05 e0 e9 02 c0    	fadd   QWORD PTR ds:0xc002e9e0
c0026072:	d8 c9                	fmul   st,st(1)
c0026074:	dc 05 e8 e9 02 c0    	fadd   QWORD PTR ds:0xc002e9e8
c002607a:	d8 c9                	fmul   st,st(1)
c002607c:	dc 05 f0 e9 02 c0    	fadd   QWORD PTR ds:0xc002e9f0
c0026082:	de ca                	fmulp  st(2),st
c0026084:	d9 c9                	fxch   st(1)
c0026086:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002608a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002608e:	d9 c1                	fld    st(1)
c0026090:	dc 0d f8 e9 02 c0    	fmul   QWORD PTR ds:0xc002e9f8
c0026096:	dc 25 00 ea 02 c0    	fsub   QWORD PTR ds:0xc002ea00
c002609c:	d8 ca                	fmul   st,st(2)
c002609e:	dc 25 08 ea 02 c0    	fsub   QWORD PTR ds:0xc002ea08
c00260a4:	d8 ca                	fmul   st,st(2)
c00260a6:	dc 25 10 ea 02 c0    	fsub   QWORD PTR ds:0xc002ea10
c00260ac:	d8 ca                	fmul   st,st(2)
c00260ae:	dc 25 18 ea 02 c0    	fsub   QWORD PTR ds:0xc002ea18
c00260b4:	de ca                	fmulp  st(2),st
c00260b6:	d9 c9                	fxch   st(1)
c00260b8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00260bc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00260c0:	de c1                	faddp  st(1),st
c00260c2:	d8 cb                	fmul   st,st(3)
c00260c4:	74 6a                	je     c0026130 <atan+0x1a0>
c00260c6:	85 f6                	test   esi,esi
c00260c8:	de e2                	fsubrp st(2),st
c00260ca:	d9 c9                	fxch   st(1)
c00260cc:	de e2                	fsubrp st(2),st
c00260ce:	de e1                	fsubrp st(1),st
c00260d0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00260d4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00260d8:	0f 89 f3 fe ff ff    	jns    c0025fd1 <atan+0x41>
c00260de:	d9 e0                	fchs   
c00260e0:	83 c4 24             	add    esp,0x24
c00260e3:	5b                   	pop    ebx
c00260e4:	5e                   	pop    esi
c00260e5:	c3                   	ret    
c00260e6:	8d 76 00             	lea    esi,[esi+0x0]
c00260e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00260f0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00260f4:	d9 e8                	fld1   
c00260f6:	d9 c2                	fld    st(2)
c00260f8:	dc 05 08 e8 02 c0    	fadd   QWORD PTR ds:0xc002e808
c00260fe:	df f1                	fcomip st,st(1)
c0026100:	dd d8                	fstp   st(0)
c0026102:	0f 86 28 ff ff ff    	jbe    c0026030 <atan+0xa0>
c0026108:	dd d9                	fstp   st(1)
c002610a:	e9 c2 fe ff ff       	jmp    c0025fd1 <atan+0x41>
c002610f:	90                   	nop
c0026110:	dd 05 20 e8 02 c0    	fld    QWORD PTR ds:0xc002e820
c0026116:	de e1                	fsubrp st(1),st
c0026118:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002611c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026120:	e9 ac fe ff ff       	jmp    c0025fd1 <atan+0x41>
c0026125:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026129:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026130:	dd da                	fstp   st(2)
c0026132:	dd d8                	fstp   st(0)
c0026134:	de e9                	fsubp  st(1),st
c0026136:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002613a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002613e:	83 c4 24             	add    esp,0x24
c0026141:	5b                   	pop    ebx
c0026142:	5e                   	pop    esi
c0026143:	c3                   	ret    
c0026144:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002614a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026150:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026154:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026157:	e8 d4 06 00 00       	call   c0026830 <fabs>
c002615c:	81 fb ff ff f2 3f    	cmp    ebx,0x3ff2ffff
c0026162:	7f 3c                	jg     c00261a0 <atan+0x210>
c0026164:	81 fb ff ff e5 3f    	cmp    ebx,0x3fe5ffff
c002616a:	0f 8f a0 00 00 00    	jg     c0026210 <atan+0x280>
c0026170:	d9 c0                	fld    st(0)
c0026172:	31 c0                	xor    eax,eax
c0026174:	d8 c1                	fadd   st,st(1)
c0026176:	d8 25 f8 e7 02 c0    	fsub   DWORD PTR ds:0xc002e7f8
c002617c:	d9 c9                	fxch   st(1)
c002617e:	d8 05 68 e8 02 c0    	fadd   DWORD PTR ds:0xc002e868
c0026184:	de f9                	fdivp  st(1),st
c0026186:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002618a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002618e:	dd 05 b8 e9 02 c0    	fld    QWORD PTR ds:0xc002e9b8
c0026194:	dd 05 c0 e9 02 c0    	fld    QWORD PTR ds:0xc002e9c0
c002619a:	e9 9c fe ff ff       	jmp    c002603b <atan+0xab>
c002619f:	90                   	nop
c00261a0:	81 fb ff 7f 03 40    	cmp    ebx,0x40037fff
c00261a6:	7f 38                	jg     c00261e0 <atan+0x250>
c00261a8:	d9 05 4c e8 02 c0    	fld    DWORD PTR ds:0xc002e84c
c00261ae:	b8 02 00 00 00       	mov    eax,0x2
c00261b3:	d9 c1                	fld    st(1)
c00261b5:	d8 e1                	fsub   st,st(1)
c00261b7:	d9 ca                	fxch   st(2)
c00261b9:	de c9                	fmulp  st(1),st
c00261bb:	d8 05 f8 e7 02 c0    	fadd   DWORD PTR ds:0xc002e7f8
c00261c1:	de f9                	fdivp  st(1),st
c00261c3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00261c7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00261cb:	dd 05 a8 e9 02 c0    	fld    QWORD PTR ds:0xc002e9a8
c00261d1:	dd 05 b0 e9 02 c0    	fld    QWORD PTR ds:0xc002e9b0
c00261d7:	e9 5f fe ff ff       	jmp    c002603b <atan+0xab>
c00261dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00261e0:	d8 3d 20 ea 02 c0    	fdivr  DWORD PTR ds:0xc002ea20
c00261e6:	b8 03 00 00 00       	mov    eax,0x3
c00261eb:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00261ef:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00261f3:	dd 05 00 e8 02 c0    	fld    QWORD PTR ds:0xc002e800
c00261f9:	dd 05 a0 e7 02 c0    	fld    QWORD PTR ds:0xc002e7a0
c00261ff:	e9 37 fe ff ff       	jmp    c002603b <atan+0xab>
c0026204:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002620a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026210:	d9 e8                	fld1   
c0026212:	b8 01 00 00 00       	mov    eax,0x1
c0026217:	d9 c1                	fld    st(1)
c0026219:	d8 e1                	fsub   st,st(1)
c002621b:	d9 ca                	fxch   st(2)
c002621d:	de c1                	faddp  st(1),st
c002621f:	de f9                	fdivp  st(1),st
c0026221:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026225:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026229:	dd 05 a0 e9 02 c0    	fld    QWORD PTR ds:0xc002e9a0
c002622f:	dd 05 10 e8 02 c0    	fld    QWORD PTR ds:0xc002e810
c0026235:	e9 01 fe ff ff       	jmp    c002603b <atan+0xab>
c002623a:	66 90                	xchg   ax,ax
c002623c:	66 90                	xchg   ax,ax
c002623e:	66 90                	xchg   ax,ax

c0026240 <cos>:
c0026240:	83 ec 5c             	sub    esp,0x5c
c0026243:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0026247:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002624b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002624f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026254:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0026259:	7f 55                	jg     c00262b0 <cos+0x70>
c002625b:	3d 9d a0 46 3e       	cmp    eax,0x3e46a09d
c0026260:	7f 2e                	jg     c0026290 <cos+0x50>
c0026262:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0026266:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002626b:	66 0d 00 0c          	or     ax,0xc00
c002626f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0026274:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0026278:	db 5c 24 30          	fistp  DWORD PTR [esp+0x30]
c002627c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0026280:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026284:	85 c0                	test   eax,eax
c0026286:	0f 84 94 00 00 00    	je     c0026320 <cos+0xe0>
c002628c:	eb 04                	jmp    c0026292 <cos+0x52>
c002628e:	66 90                	xchg   ax,ax
c0026290:	dd d8                	fstp   st(0)
c0026292:	d9 ee                	fldz   
c0026294:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026298:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002629c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002629f:	e8 ac 11 00 00       	call   c0027450 <__kernel_cos>
c00262a4:	83 c4 5c             	add    esp,0x5c
c00262a7:	c3                   	ret    
c00262a8:	90                   	nop
c00262a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00262b0:	dd d8                	fstp   st(0)
c00262b2:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c00262b7:	7e 17                	jle    c00262d0 <cos+0x90>
c00262b9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00262bd:	d8 e0                	fsub   st,st(0)
c00262bf:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00262c3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00262c7:	83 c4 5c             	add    esp,0x5c
c00262ca:	c3                   	ret    
c00262cb:	90                   	nop
c00262cc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00262d0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00262d4:	8d 44 24 40          	lea    eax,[esp+0x40]
c00262d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262dc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00262df:	e8 3c 0c 00 00       	call   c0026f20 <__ieee754_rem_pio2>
c00262e4:	83 e0 03             	and    eax,0x3
c00262e7:	83 f8 01             	cmp    eax,0x1
c00262ea:	0f 84 80 00 00 00    	je     c0026370 <cos+0x130>
c00262f0:	83 f8 02             	cmp    eax,0x2
c00262f3:	74 5b                	je     c0026350 <cos+0x110>
c00262f5:	85 c0                	test   eax,eax
c00262f7:	74 37                	je     c0026330 <cos+0xf0>
c00262f9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00262fd:	b8 01 00 00 00       	mov    eax,0x1
c0026302:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026306:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c002630a:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002630e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026311:	e8 ba 1b 00 00       	call   c0027ed0 <__kernel_sin>
c0026316:	eb 8c                	jmp    c00262a4 <cos+0x64>
c0026318:	90                   	nop
c0026319:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026320:	d9 e8                	fld1   
c0026322:	83 c4 5c             	add    esp,0x5c
c0026325:	c3                   	ret    
c0026326:	8d 76 00             	lea    esi,[esi+0x0]
c0026329:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026330:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026334:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026338:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002633c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002633f:	e8 0c 11 00 00       	call   c0027450 <__kernel_cos>
c0026344:	e9 5b ff ff ff       	jmp    c00262a4 <cos+0x64>
c0026349:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026350:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026354:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026358:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c002635c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002635f:	e8 ec 10 00 00       	call   c0027450 <__kernel_cos>
c0026364:	d9 e0                	fchs   
c0026366:	e9 39 ff ff ff       	jmp    c00262a4 <cos+0x64>
c002636b:	90                   	nop
c002636c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026370:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026374:	ba 01 00 00 00       	mov    edx,0x1
c0026379:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002637d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026381:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026385:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026388:	e8 43 1b 00 00       	call   c0027ed0 <__kernel_sin>
c002638d:	d9 e0                	fchs   
c002638f:	e9 10 ff ff ff       	jmp    c00262a4 <cos+0x64>
c0026394:	66 90                	xchg   ax,ax
c0026396:	66 90                	xchg   ax,ax
c0026398:	66 90                	xchg   ax,ax
c002639a:	66 90                	xchg   ax,ax
c002639c:	66 90                	xchg   ax,ax
c002639e:	66 90                	xchg   ax,ax

c00263a0 <expm1>:
c00263a0:	d9 05 30 ea 02 c0    	fld    DWORD PTR ds:0xc002ea30
c00263a6:	83 ec 24             	sub    esp,0x24
c00263a9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00263ad:	dd 14 24             	fst    QWORD PTR [esp]
c00263b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00263b4:	89 d0                	mov    eax,edx
c00263b6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00263bb:	3d 79 68 43 40       	cmp    eax,0x40436879
c00263c0:	0f 86 ea 00 00 00    	jbe    c00264b0 <expm1+0x110>
c00263c6:	dd d9                	fstp   st(1)
c00263c8:	3d 41 2e 86 40       	cmp    eax,0x40862e41
c00263cd:	76 51                	jbe    c0026420 <expm1+0x80>
c00263cf:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c00263d4:	76 2a                	jbe    c0026400 <expm1+0x60>
c00263d6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00263d9:	89 d1                	mov    ecx,edx
c00263db:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00263e1:	09 c1                	or     ecx,eax
c00263e3:	0f 84 b7 03 00 00    	je     c00267a0 <expm1+0x400>
c00263e9:	d9 c0                	fld    st(0)
c00263eb:	de c1                	faddp  st(1),st
c00263ed:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00263f1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00263f5:	e9 0a 02 00 00       	jmp    c0026604 <expm1+0x264>
c00263fa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026400:	dd d8                	fstp   st(0)
c0026402:	dd 05 48 ea 02 c0    	fld    QWORD PTR ds:0xc002ea48
c0026408:	dd 04 24             	fld    QWORD PTR [esp]
c002640b:	df f1                	fcomip st,st(1)
c002640d:	dd d8                	fstp   st(0)
c002640f:	0f 87 cb 03 00 00    	ja     c00267e0 <expm1+0x440>
c0026415:	eb 0b                	jmp    c0026422 <expm1+0x82>
c0026417:	89 f6                	mov    esi,esi
c0026419:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026420:	dd d8                	fstp   st(0)
c0026422:	85 d2                	test   edx,edx
c0026424:	dd 04 24             	fld    QWORD PTR [esp]
c0026427:	0f 88 e3 01 00 00    	js     c0026610 <expm1+0x270>
c002642d:	d9 c0                	fld    st(0)
c002642f:	dc 0d d0 e8 02 c0    	fmul   QWORD PTR ds:0xc002e8d0
c0026435:	d9 05 fc e7 02 c0    	fld    DWORD PTR ds:0xc002e7fc
c002643b:	d9 7c 24 16          	fnstcw WORD PTR [esp+0x16]
c002643f:	de c1                	faddp  st(1),st
c0026441:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0026446:	66 0d 00 0c          	or     ax,0xc00
c002644a:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002644f:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0026453:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0026457:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c002645b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002645f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026462:	db 04 24             	fild   DWORD PTR [esp]
c0026465:	d9 c0                	fld    st(0)
c0026467:	dc 0d 58 ea 02 c0    	fmul   QWORD PTR ds:0xc002ea58
c002646d:	de ea                	fsubp  st(2),st
c002646f:	d9 c9                	fxch   st(1)
c0026471:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026475:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026479:	d9 c9                	fxch   st(1)
c002647b:	dc 0d 40 ea 02 c0    	fmul   QWORD PTR ds:0xc002ea40
c0026481:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026485:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026489:	d9 c1                	fld    st(1)
c002648b:	d8 e1                	fsub   st,st(1)
c002648d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026490:	dd 04 24             	fld    QWORD PTR [esp]
c0026493:	dc ea                	fsub   st(2),st
c0026495:	d9 ca                	fxch   st(2)
c0026497:	de e1                	fsubrp st(1),st
c0026499:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002649d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00264a1:	eb 2c                	jmp    c00264cf <expm1+0x12f>
c00264a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00264a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00264b0:	dd d8                	fstp   st(0)
c00264b2:	3d 42 2e d6 3f       	cmp    eax,0x3fd62e42
c00264b7:	dd 04 24             	fld    QWORD PTR [esp]
c00264ba:	0f 87 c0 01 00 00    	ja     c0026680 <expm1+0x2e0>
c00264c0:	31 c9                	xor    ecx,ecx
c00264c2:	3d ff ff 8f 3c       	cmp    eax,0x3c8fffff
c00264c7:	0f 86 f3 01 00 00    	jbe    c00266c0 <expm1+0x320>
c00264cd:	d9 c9                	fxch   st(1)
c00264cf:	d9 05 fc e7 02 c0    	fld    DWORD PTR ds:0xc002e7fc
c00264d5:	85 c9                	test   ecx,ecx
c00264d7:	d9 c2                	fld    st(2)
c00264d9:	d8 c9                	fmul   st,st(1)
c00264db:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00264df:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00264e3:	d9 c0                	fld    st(0)
c00264e5:	d8 cc                	fmul   st,st(4)
c00264e7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00264eb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00264ef:	d9 c0                	fld    st(0)
c00264f1:	dc 0d 60 ea 02 c0    	fmul   QWORD PTR ds:0xc002ea60
c00264f7:	dc 05 68 ea 02 c0    	fadd   QWORD PTR ds:0xc002ea68
c00264fd:	d8 c9                	fmul   st,st(1)
c00264ff:	dc 25 70 ea 02 c0    	fsub   QWORD PTR ds:0xc002ea70
c0026505:	d8 c9                	fmul   st,st(1)
c0026507:	dc 05 78 ea 02 c0    	fadd   QWORD PTR ds:0xc002ea78
c002650d:	d8 c9                	fmul   st,st(1)
c002650f:	dc 25 80 ea 02 c0    	fsub   QWORD PTR ds:0xc002ea80
c0026515:	d8 c9                	fmul   st,st(1)
c0026517:	d9 e8                	fld1   
c0026519:	dc c1                	fadd   st(1),st
c002651b:	d9 c9                	fxch   st(1)
c002651d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026521:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026525:	dc cb                	fmul   st(3),st
c0026527:	d9 cb                	fxch   st(3)
c0026529:	d8 2d 5c e8 02 c0    	fsubr  DWORD PTR ds:0xc002e85c
c002652f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026533:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026537:	dc eb                	fsub   st(3),st
c0026539:	d8 ce                	fmul   st,st(6)
c002653b:	d8 2d 24 ea 02 c0    	fsubr  DWORD PTR ds:0xc002ea24
c0026541:	de fb                	fdivp  st(3),st
c0026543:	d9 ca                	fxch   st(2)
c0026545:	d8 c9                	fmul   st,st(1)
c0026547:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002654b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002654f:	0f 84 9b 00 00 00    	je     c00265f0 <expm1+0x250>
c0026555:	89 c8                	mov    eax,ecx
c0026557:	c1 e0 14             	shl    eax,0x14
c002655a:	05 00 00 f0 3f       	add    eax,0x3ff00000
c002655f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026563:	31 c0                	xor    eax,eax
c0026565:	83 f9 ff             	cmp    ecx,0xffffffff
c0026568:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002656c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0026570:	d9 c9                	fxch   st(1)
c0026572:	d8 e5                	fsub   st,st(5)
c0026574:	d8 ce                	fmul   st,st(6)
c0026576:	de e5                	fsubrp st(5),st
c0026578:	d9 cc                	fxch   st(4)
c002657a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002657e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026582:	de e1                	fsubrp st(1),st
c0026584:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026588:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002658c:	0f 84 9e 01 00 00    	je     c0026730 <expm1+0x390>
c0026592:	83 f9 01             	cmp    ecx,0x1
c0026595:	0f 84 55 01 00 00    	je     c00266f0 <expm1+0x350>
c002659b:	dd da                	fstp   st(2)
c002659d:	d9 c9                	fxch   st(1)
c002659f:	8d 41 01             	lea    eax,[ecx+0x1]
c00265a2:	83 f8 39             	cmp    eax,0x39
c00265a5:	0f 87 95 00 00 00    	ja     c0026640 <expm1+0x2a0>
c00265ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00265b2:	83 f9 13             	cmp    ecx,0x13
c00265b5:	0f 8f b5 01 00 00    	jg     c0026770 <expm1+0x3d0>
c00265bb:	dd d9                	fstp   st(1)
c00265bd:	b8 00 00 20 00       	mov    eax,0x200000
c00265c2:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c00265c7:	d3 f8                	sar    eax,cl
c00265c9:	29 c2                	sub    edx,eax
c00265cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00265cf:	dd 04 24             	fld    QWORD PTR [esp]
c00265d2:	d9 cb                	fxch   st(3)
c00265d4:	de e9                	fsubp  st(1),st
c00265d6:	de ea                	fsubp  st(2),st
c00265d8:	d9 c9                	fxch   st(1)
c00265da:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00265de:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00265e2:	de c9                	fmulp  st(1),st
c00265e4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00265e8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00265ec:	83 c4 24             	add    esp,0x24
c00265ef:	c3                   	ret    
c00265f0:	dd db                	fstp   st(3)
c00265f2:	dd db                	fstp   st(3)
c00265f4:	dd d8                	fstp   st(0)
c00265f6:	d8 ca                	fmul   st,st(2)
c00265f8:	de e1                	fsubrp st(1),st
c00265fa:	de e9                	fsubp  st(1),st
c00265fc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026600:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026604:	83 c4 24             	add    esp,0x24
c0026607:	c3                   	ret    
c0026608:	90                   	nop
c0026609:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026610:	d9 ee                	fldz   
c0026612:	d9 c1                	fld    st(1)
c0026614:	dc 05 50 ea 02 c0    	fadd   QWORD PTR ds:0xc002ea50
c002661a:	d9 c9                	fxch   st(1)
c002661c:	df f1                	fcomip st,st(1)
c002661e:	dd d8                	fstp   st(0)
c0026620:	0f 87 8a 01 00 00    	ja     c00267b0 <expm1+0x410>
c0026626:	d9 c0                	fld    st(0)
c0026628:	dc 0d d0 e8 02 c0    	fmul   QWORD PTR ds:0xc002e8d0
c002662e:	d9 05 58 e9 02 c0    	fld    DWORD PTR ds:0xc002e958
c0026634:	e9 02 fe ff ff       	jmp    c002643b <expm1+0x9b>
c0026639:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026640:	de e3                	fsubrp st(3),st
c0026642:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0026648:	de e2                	fsubrp st(2),st
c002664a:	d9 c9                	fxch   st(1)
c002664c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026650:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026654:	0f 84 96 01 00 00    	je     c00267f0 <expm1+0x450>
c002665a:	de c9                	fmulp  st(1),st
c002665c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026660:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026664:	d9 e8                	fld1   
c0026666:	de e9                	fsubp  st(1),st
c0026668:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002666c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026670:	eb 92                	jmp    c0026604 <expm1+0x264>
c0026672:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026680:	dd d9                	fstp   st(1)
c0026682:	3d b1 a2 f0 3f       	cmp    eax,0x3ff0a2b1
c0026687:	0f 87 7a 01 00 00    	ja     c0026807 <expm1+0x467>
c002668d:	85 d2                	test   edx,edx
c002668f:	0f 88 bb 00 00 00    	js     c0026750 <expm1+0x3b0>
c0026695:	dc 25 58 ea 02 c0    	fsub   QWORD PTR ds:0xc002ea58
c002669b:	b9 01 00 00 00       	mov    ecx,0x1
c00266a0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00266a4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00266a8:	dd 05 40 ea 02 c0    	fld    QWORD PTR ds:0xc002ea40
c00266ae:	e9 d6 fd ff ff       	jmp    c0026489 <expm1+0xe9>
c00266b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00266b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00266c0:	dd d9                	fstp   st(1)
c00266c2:	d9 c0                	fld    st(0)
c00266c4:	dc 05 08 e8 02 c0    	fadd   QWORD PTR ds:0xc002e808
c00266ca:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00266ce:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00266d2:	de e1                	fsubrp st(1),st
c00266d4:	de e9                	fsubp  st(1),st
c00266d6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00266da:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00266de:	83 c4 24             	add    esp,0x24
c00266e1:	c3                   	ret    
c00266e2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00266e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00266f0:	dd db                	fstp   st(3)
c00266f2:	d9 c9                	fxch   st(1)
c00266f4:	d9 ca                	fxch   st(2)
c00266f6:	dd 04 24             	fld    QWORD PTR [esp]
c00266f9:	d9 05 28 ea 02 c0    	fld    DWORD PTR ds:0xc002ea28
c00266ff:	df f1                	fcomip st,st(1)
c0026701:	dd d8                	fstp   st(0)
c0026703:	0f 86 b7 00 00 00    	jbe    c00267c0 <expm1+0x420>
c0026709:	dd d9                	fstp   st(1)
c002670b:	d9 ca                	fxch   st(2)
c002670d:	de c1                	faddp  st(1),st
c002670f:	de e9                	fsubp  st(1),st
c0026711:	d8 0d 2c ea 02 c0    	fmul   DWORD PTR ds:0xc002ea2c
c0026717:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002671b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002671f:	e9 e0 fe ff ff       	jmp    c0026604 <expm1+0x264>
c0026724:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002672a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026730:	dd db                	fstp   st(3)
c0026732:	dd d8                	fstp   st(0)
c0026734:	d9 c9                	fxch   st(1)
c0026736:	de ea                	fsubp  st(2),st
c0026738:	dc c9                	fmul   st(1),st
c002673a:	de e9                	fsubp  st(1),st
c002673c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026740:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026744:	e9 bb fe ff ff       	jmp    c0026604 <expm1+0x264>
c0026749:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026750:	dc 05 58 ea 02 c0    	fadd   QWORD PTR ds:0xc002ea58
c0026756:	b9 ff ff ff ff       	mov    ecx,0xffffffff
c002675b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002675f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026763:	dd 05 38 ea 02 c0    	fld    QWORD PTR ds:0xc002ea38
c0026769:	e9 1b fd ff ff       	jmp    c0026489 <expm1+0xe9>
c002676e:	66 90                	xchg   ax,ax
c0026770:	b8 ff 03 00 00       	mov    eax,0x3ff
c0026775:	29 c8                	sub    eax,ecx
c0026777:	c1 e0 14             	shl    eax,0x14
c002677a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002677e:	dd 04 24             	fld    QWORD PTR [esp]
c0026781:	de c1                	faddp  st(1),st
c0026783:	de eb                	fsubp  st(3),st
c0026785:	d9 ca                	fxch   st(2)
c0026787:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002678b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002678f:	de c2                	faddp  st(2),st
c0026791:	d9 c9                	fxch   st(1)
c0026793:	e9 42 fe ff ff       	jmp    c00265da <expm1+0x23a>
c0026798:	90                   	nop
c0026799:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00267a0:	dd d8                	fstp   st(0)
c00267a2:	85 d2                	test   edx,edx
c00267a4:	78 0c                	js     c00267b2 <expm1+0x412>
c00267a6:	dd 04 24             	fld    QWORD PTR [esp]
c00267a9:	e9 56 fe ff ff       	jmp    c0026604 <expm1+0x264>
c00267ae:	66 90                	xchg   ax,ax
c00267b0:	dd d8                	fstp   st(0)
c00267b2:	d9 e8                	fld1   
c00267b4:	d9 e0                	fchs   
c00267b6:	e9 49 fe ff ff       	jmp    c0026604 <expm1+0x264>
c00267bb:	90                   	nop
c00267bc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00267c0:	dd da                	fstp   st(2)
c00267c2:	d9 c9                	fxch   st(1)
c00267c4:	de ea                	fsubp  st(2),st
c00267c6:	d9 c9                	fxch   st(1)
c00267c8:	d8 c0                	fadd   st,st(0)
c00267ca:	de c1                	faddp  st(1),st
c00267cc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00267d0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00267d4:	e9 2b fe ff ff       	jmp    c0026604 <expm1+0x264>
c00267d9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00267e0:	d9 05 40 e8 02 c0    	fld    DWORD PTR ds:0xc002e840
c00267e6:	e9 19 fe ff ff       	jmp    c0026604 <expm1+0x264>
c00267eb:	90                   	nop
c00267ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00267f0:	dd d9                	fstp   st(1)
c00267f2:	d8 c0                	fadd   st,st(0)
c00267f4:	dc 0d 88 ea 02 c0    	fmul   QWORD PTR ds:0xc002ea88
c00267fa:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00267fe:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026802:	e9 5d fe ff ff       	jmp    c0026664 <expm1+0x2c4>
c0026807:	d9 c0                	fld    st(0)
c0026809:	85 d2                	test   edx,edx
c002680b:	dc 0d d0 e8 02 c0    	fmul   QWORD PTR ds:0xc002e8d0
c0026811:	0f 88 17 fe ff ff    	js     c002662e <expm1+0x28e>
c0026817:	d9 05 fc e7 02 c0    	fld    DWORD PTR ds:0xc002e7fc
c002681d:	e9 19 fc ff ff       	jmp    c002643b <expm1+0x9b>
c0026822:	66 90                	xchg   ax,ax
c0026824:	66 90                	xchg   ax,ax
c0026826:	66 90                	xchg   ax,ax
c0026828:	66 90                	xchg   ax,ax
c002682a:	66 90                	xchg   ax,ax
c002682c:	66 90                	xchg   ax,ax
c002682e:	66 90                	xchg   ax,ax

c0026830 <fabs>:
c0026830:	83 ec 0c             	sub    esp,0xc
c0026833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026837:	89 04 24             	mov    DWORD PTR [esp],eax
c002683a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002683e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026843:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026847:	dd 04 24             	fld    QWORD PTR [esp]
c002684a:	83 c4 0c             	add    esp,0xc
c002684d:	c3                   	ret    
c002684e:	66 90                	xchg   ax,ax

c0026850 <frexp>:
c0026850:	53                   	push   ebx
c0026851:	83 ec 10             	sub    esp,0x10
c0026854:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026858:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002685c:	dd 14 24             	fst    QWORD PTR [esp]
c002685f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026863:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c0026869:	89 d0                	mov    eax,edx
c002686b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026870:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0026875:	7f 59                	jg     c00268d0 <frexp+0x80>
c0026877:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c002687a:	09 c3                	or     ebx,eax
c002687c:	74 62                	je     c00268e0 <frexp+0x90>
c002687e:	31 db                	xor    ebx,ebx
c0026880:	f7 c2 00 00 f0 7f    	test   edx,0x7ff00000
c0026886:	75 28                	jne    c00268b0 <frexp+0x60>
c0026888:	d9 05 90 ea 02 c0    	fld    DWORD PTR ds:0xc002ea90
c002688e:	bb ca ff ff ff       	mov    ebx,0xffffffca
c0026893:	de c9                	fmulp  st(1),st
c0026895:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026898:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002689c:	89 d0                	mov    eax,edx
c002689e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00268a3:	eb 0d                	jmp    c00268b2 <frexp+0x62>
c00268a5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00268a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00268b0:	dd d8                	fstp   st(0)
c00268b2:	c1 f8 14             	sar    eax,0x14
c00268b5:	81 e2 ff ff 0f 80    	and    edx,0x800fffff
c00268bb:	8d 84 03 02 fc ff ff 	lea    eax,[ebx+eax*1-0x3fe]
c00268c2:	81 ca 00 00 e0 3f    	or     edx,0x3fe00000
c00268c8:	89 01                	mov    DWORD PTR [ecx],eax
c00268ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00268ce:	eb 12                	jmp    c00268e2 <frexp+0x92>
c00268d0:	dd d8                	fstp   st(0)
c00268d2:	eb 0e                	jmp    c00268e2 <frexp+0x92>
c00268d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00268da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00268e0:	dd d8                	fstp   st(0)
c00268e2:	dd 04 24             	fld    QWORD PTR [esp]
c00268e5:	83 c4 10             	add    esp,0x10
c00268e8:	5b                   	pop    ebx
c00268e9:	c3                   	ret    
c00268ea:	66 90                	xchg   ax,ax
c00268ec:	66 90                	xchg   ax,ax
c00268ee:	66 90                	xchg   ax,ax

c00268f0 <modf>:
c00268f0:	53                   	push   ebx
c00268f1:	83 ec 18             	sub    esp,0x18
c00268f4:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00268f8:	dd 14 24             	fst    QWORD PTR [esp]
c00268fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00268ff:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0026902:	89 d0                	mov    eax,edx
c0026904:	c1 f8 14             	sar    eax,0x14
c0026907:	25 ff 07 00 00       	and    eax,0x7ff
c002690c:	8d 88 01 fc ff ff    	lea    ecx,[eax-0x3ff]
c0026912:	83 f9 13             	cmp    ecx,0x13
c0026915:	7f 49                	jg     c0026960 <modf+0x70>
c0026917:	85 c9                	test   ecx,ecx
c0026919:	0f 88 f1 00 00 00    	js     c0026a10 <modf+0x120>
c002691f:	dd d8                	fstp   st(0)
c0026921:	b8 ff ff 0f 00       	mov    eax,0xfffff
c0026926:	d3 f8                	sar    eax,cl
c0026928:	89 d1                	mov    ecx,edx
c002692a:	21 c1                	and    ecx,eax
c002692c:	09 d9                	or     ecx,ebx
c002692e:	0f 84 ac 00 00 00    	je     c00269e0 <modf+0xf0>
c0026934:	f7 d0                	not    eax
c0026936:	21 d0                	and    eax,edx
c0026938:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002693c:	31 c0                	xor    eax,eax
c002693e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026942:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0026946:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c002694a:	dd 10                	fst    QWORD PTR [eax]
c002694c:	dd 04 24             	fld    QWORD PTR [esp]
c002694f:	de e1                	fsubrp st(1),st
c0026951:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0026955:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026959:	83 c4 18             	add    esp,0x18
c002695c:	5b                   	pop    ebx
c002695d:	c3                   	ret    
c002695e:	66 90                	xchg   ax,ax
c0026960:	dd d8                	fstp   st(0)
c0026962:	83 f9 33             	cmp    ecx,0x33
c0026965:	7e 39                	jle    c00269a0 <modf+0xb0>
c0026967:	81 f9 00 04 00 00    	cmp    ecx,0x400
c002696d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0026971:	0f 84 e9 00 00 00    	je     c0026a60 <modf+0x170>
c0026977:	dd 04 24             	fld    QWORD PTR [esp]
c002697a:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026980:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0026987:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002698b:	dd 18                	fstp   QWORD PTR [eax]
c002698d:	dd 04 24             	fld    QWORD PTR [esp]
c0026990:	83 c4 18             	add    esp,0x18
c0026993:	5b                   	pop    ebx
c0026994:	c3                   	ret    
c0026995:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026999:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00269a0:	8d 88 ed fb ff ff    	lea    ecx,[eax-0x413]
c00269a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00269ab:	d3 e8                	shr    eax,cl
c00269ad:	85 d8                	test   eax,ebx
c00269af:	75 7f                	jne    c0026a30 <modf+0x140>
c00269b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00269b5:	81 e2 00 00 00 80    	and    edx,0x80000000
c00269bb:	dd 04 24             	fld    QWORD PTR [esp]
c00269be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00269c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00269c9:	dd 18                	fstp   QWORD PTR [eax]
c00269cb:	dd 04 24             	fld    QWORD PTR [esp]
c00269ce:	83 c4 18             	add    esp,0x18
c00269d1:	5b                   	pop    ebx
c00269d2:	c3                   	ret    
c00269d3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00269d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00269e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00269e4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00269ea:	dd 04 24             	fld    QWORD PTR [esp]
c00269ed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00269f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00269f8:	dd 18                	fstp   QWORD PTR [eax]
c00269fa:	dd 04 24             	fld    QWORD PTR [esp]
c00269fd:	83 c4 18             	add    esp,0x18
c0026a00:	5b                   	pop    ebx
c0026a01:	c3                   	ret    
c0026a02:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026a09:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026a10:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026a16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0026a1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026a1e:	31 d2                	xor    edx,edx
c0026a20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a24:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0026a28:	dd 18                	fstp   QWORD PTR [eax]
c0026a2a:	83 c4 18             	add    esp,0x18
c0026a2d:	5b                   	pop    ebx
c0026a2e:	c3                   	ret    
c0026a2f:	90                   	nop
c0026a30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026a34:	f7 d0                	not    eax
c0026a36:	21 d8                	and    eax,ebx
c0026a38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0026a40:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0026a44:	dd 10                	fst    QWORD PTR [eax]
c0026a46:	dd 04 24             	fld    QWORD PTR [esp]
c0026a49:	de e1                	fsubrp st(1),st
c0026a4b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0026a4f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026a53:	83 c4 18             	add    esp,0x18
c0026a56:	5b                   	pop    ebx
c0026a57:	c3                   	ret    
c0026a58:	90                   	nop
c0026a59:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026a60:	dd 04 24             	fld    QWORD PTR [esp]
c0026a63:	dd 10                	fst    QWORD PTR [eax]
c0026a65:	d9 ee                	fldz   
c0026a67:	de f1                	fdivrp st(1),st
c0026a69:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0026a6d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026a71:	e9 e3 fe ff ff       	jmp    c0026959 <modf+0x69>
c0026a76:	66 90                	xchg   ax,ax
c0026a78:	66 90                	xchg   ax,ax
c0026a7a:	66 90                	xchg   ax,ax
c0026a7c:	66 90                	xchg   ax,ax
c0026a7e:	66 90                	xchg   ax,ax

c0026a80 <round>:
c0026a80:	83 ec 2c             	sub    esp,0x2c
c0026a83:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0026a87:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0026a8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a8f:	89 c2                	mov    edx,eax
c0026a91:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026a97:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c0026a9d:	0f 84 9d 00 00 00    	je     c0026b40 <round+0xc0>
c0026aa3:	dd d8                	fstp   st(0)
c0026aa5:	85 c0                	test   eax,eax
c0026aa7:	78 47                	js     c0026af0 <round+0x70>
c0026aa9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026aad:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026ab0:	e8 ff 03 00 00       	call   c0026eb4 <floor>
c0026ab5:	d9 c0                	fld    st(0)
c0026ab7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026abb:	d8 e9                	fsubr  st,st(1)
c0026abd:	d9 05 58 e9 02 c0    	fld    DWORD PTR ds:0xc002e958
c0026ac3:	df f1                	fcomip st,st(1)
c0026ac5:	dd d8                	fstp   st(0)
c0026ac7:	72 17                	jb     c0026ae0 <round+0x60>
c0026ac9:	dd d9                	fstp   st(1)
c0026acb:	d8 05 f8 e7 02 c0    	fadd   DWORD PTR ds:0xc002e7f8
c0026ad1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026ad5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026ad9:	eb 07                	jmp    c0026ae2 <round+0x62>
c0026adb:	90                   	nop
c0026adc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026ae0:	dd d8                	fstp   st(0)
c0026ae2:	83 c4 2c             	add    esp,0x2c
c0026ae5:	c3                   	ret    
c0026ae6:	8d 76 00             	lea    esi,[esi+0x0]
c0026ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026af0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026af4:	d9 e0                	fchs   
c0026af6:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026af9:	e8 b6 03 00 00       	call   c0026eb4 <floor>
c0026afe:	d9 c0                	fld    st(0)
c0026b00:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026b04:	d8 c1                	fadd   st,st(1)
c0026b06:	d9 05 58 e9 02 c0    	fld    DWORD PTR ds:0xc002e958
c0026b0c:	df f1                	fcomip st,st(1)
c0026b0e:	dd d8                	fstp   st(0)
c0026b10:	72 1e                	jb     c0026b30 <round+0xb0>
c0026b12:	dd d9                	fstp   st(1)
c0026b14:	d8 05 f8 e7 02 c0    	fadd   DWORD PTR ds:0xc002e7f8
c0026b1a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026b1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026b22:	eb 0e                	jmp    c0026b32 <round+0xb2>
c0026b24:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026b2a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026b30:	dd d8                	fstp   st(0)
c0026b32:	d9 e0                	fchs   
c0026b34:	83 c4 2c             	add    esp,0x2c
c0026b37:	c3                   	ret    
c0026b38:	90                   	nop
c0026b39:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026b40:	d9 c0                	fld    st(0)
c0026b42:	de c1                	faddp  st(1),st
c0026b44:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026b48:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026b4c:	83 c4 2c             	add    esp,0x2c
c0026b4f:	c3                   	ret    

c0026b50 <sin>:
c0026b50:	83 ec 5c             	sub    esp,0x5c
c0026b53:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0026b57:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0026b5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0026b5f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b64:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0026b69:	7f 65                	jg     c0026bd0 <sin+0x80>
c0026b6b:	3d ff ff 4f 3e       	cmp    eax,0x3e4fffff
c0026b70:	7f 2e                	jg     c0026ba0 <sin+0x50>
c0026b72:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0026b76:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0026b7b:	66 0d 00 0c          	or     ax,0xc00
c0026b7f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0026b84:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0026b88:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c0026b8c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0026b90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b94:	85 c0                	test   eax,eax
c0026b96:	75 18                	jne    c0026bb0 <sin+0x60>
c0026b98:	83 c4 5c             	add    esp,0x5c
c0026b9b:	c3                   	ret    
c0026b9c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026ba0:	dd d8                	fstp   st(0)
c0026ba2:	eb 0e                	jmp    c0026bb2 <sin+0x62>
c0026ba4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026baa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026bb0:	dd d8                	fstp   st(0)
c0026bb2:	d9 ee                	fldz   
c0026bb4:	31 c9                	xor    ecx,ecx
c0026bb6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0026bba:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026bbe:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026bc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026bc5:	e8 06 13 00 00       	call   c0027ed0 <__kernel_sin>
c0026bca:	83 c4 5c             	add    esp,0x5c
c0026bcd:	c3                   	ret    
c0026bce:	66 90                	xchg   ax,ax
c0026bd0:	dd d8                	fstp   st(0)
c0026bd2:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0026bd7:	7e 17                	jle    c0026bf0 <sin+0xa0>
c0026bd9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026bdd:	d8 e0                	fsub   st,st(0)
c0026bdf:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026be3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026be7:	83 c4 5c             	add    esp,0x5c
c0026bea:	c3                   	ret    
c0026beb:	90                   	nop
c0026bec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026bf0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0026bf4:	8d 44 24 40          	lea    eax,[esp+0x40]
c0026bf8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bfc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026bff:	e8 1c 03 00 00       	call   c0026f20 <__ieee754_rem_pio2>
c0026c04:	83 e0 03             	and    eax,0x3
c0026c07:	83 f8 01             	cmp    eax,0x1
c0026c0a:	0f 84 90 00 00 00    	je     c0026ca0 <sin+0x150>
c0026c10:	83 f8 02             	cmp    eax,0x2
c0026c13:	74 2b                	je     c0026c40 <sin+0xf0>
c0026c15:	85 c0                	test   eax,eax
c0026c17:	74 57                	je     c0026c70 <sin+0x120>
c0026c19:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026c1d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026c21:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026c25:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026c28:	e8 23 08 00 00       	call   c0027450 <__kernel_cos>
c0026c2d:	d9 e0                	fchs   
c0026c2f:	e9 64 ff ff ff       	jmp    c0026b98 <sin+0x48>
c0026c34:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026c3a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026c40:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026c44:	b8 01 00 00 00       	mov    eax,0x1
c0026c49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026c4d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026c51:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026c55:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026c58:	e8 73 12 00 00       	call   c0027ed0 <__kernel_sin>
c0026c5d:	d9 e0                	fchs   
c0026c5f:	e9 34 ff ff ff       	jmp    c0026b98 <sin+0x48>
c0026c64:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026c6a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0026c70:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026c74:	ba 01 00 00 00       	mov    edx,0x1
c0026c79:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0026c7d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026c81:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026c85:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026c88:	e8 43 12 00 00       	call   c0027ed0 <__kernel_sin>
c0026c8d:	e9 06 ff ff ff       	jmp    c0026b98 <sin+0x48>
c0026c92:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0026c99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026ca0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0026ca4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0026ca8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0026cac:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026caf:	e8 9c 07 00 00       	call   c0027450 <__kernel_cos>
c0026cb4:	e9 df fe ff ff       	jmp    c0026b98 <sin+0x48>
c0026cb9:	66 90                	xchg   ax,ax
c0026cbb:	66 90                	xchg   ax,ax
c0026cbd:	66 90                	xchg   ax,ax
c0026cbf:	90                   	nop

c0026cc0 <tanh>:
c0026cc0:	53                   	push   ebx
c0026cc1:	83 ec 28             	sub    esp,0x28
c0026cc4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0026cc8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0026ccc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0026cd0:	89 d8                	mov    eax,ebx
c0026cd2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026cd7:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0026cdc:	7e 32                	jle    c0026d10 <tanh+0x50>
c0026cde:	d9 e8                	fld1   
c0026ce0:	85 db                	test   ebx,ebx
c0026ce2:	dc f1                	fdivr  st(1),st
c0026ce4:	78 1a                	js     c0026d00 <tanh+0x40>
c0026ce6:	de c1                	faddp  st(1),st
c0026ce8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026cec:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026cf0:	83 c4 28             	add    esp,0x28
c0026cf3:	5b                   	pop    ebx
c0026cf4:	c3                   	ret    
c0026cf5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026cf9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026d00:	de e9                	fsubp  st(1),st
c0026d02:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026d06:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d0a:	83 c4 28             	add    esp,0x28
c0026d0d:	5b                   	pop    ebx
c0026d0e:	c3                   	ret    
c0026d0f:	90                   	nop
c0026d10:	dd d8                	fstp   st(0)
c0026d12:	3d ff ff 35 40       	cmp    eax,0x4035ffff
c0026d17:	7f 57                	jg     c0026d70 <tanh+0xb0>
c0026d19:	3d ff ff 2f 3e       	cmp    eax,0x3e2fffff
c0026d1e:	7f 70                	jg     c0026d90 <tanh+0xd0>
c0026d20:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026d24:	d9 e8                	fld1   
c0026d26:	d9 c1                	fld    st(1)
c0026d28:	dc 05 08 e8 02 c0    	fadd   QWORD PTR ds:0xc002e808
c0026d2e:	df f1                	fcomip st,st(1)
c0026d30:	dd d8                	fstp   st(0)
c0026d32:	77 bc                	ja     c0026cf0 <tanh+0x30>
c0026d34:	dd d8                	fstp   st(0)
c0026d36:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026d3a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026d3d:	e8 ee fa ff ff       	call   c0026830 <fabs>
c0026d42:	d9 05 2c ea 02 c0    	fld    DWORD PTR ds:0xc002ea2c
c0026d48:	de c9                	fmulp  st(1),st
c0026d4a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026d4d:	e8 4e f6 ff ff       	call   c00263a0 <expm1>
c0026d52:	d9 c0                	fld    st(0)
c0026d54:	d9 e0                	fchs   
c0026d56:	d9 05 68 e8 02 c0    	fld    DWORD PTR ds:0xc002e868
c0026d5c:	de c2                	faddp  st(2),st
c0026d5e:	de f1                	fdivrp st(1),st
c0026d60:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026d64:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026d68:	eb 08                	jmp    c0026d72 <tanh+0xb2>
c0026d6a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0026d70:	d9 e8                	fld1   
c0026d72:	85 db                	test   ebx,ebx
c0026d74:	0f 89 76 ff ff ff    	jns    c0026cf0 <tanh+0x30>
c0026d7a:	d9 e0                	fchs   
c0026d7c:	83 c4 28             	add    esp,0x28
c0026d7f:	5b                   	pop    ebx
c0026d80:	c3                   	ret    
c0026d81:	eb 0d                	jmp    c0026d90 <tanh+0xd0>
c0026d83:	90                   	nop
c0026d84:	90                   	nop
c0026d85:	90                   	nop
c0026d86:	90                   	nop
c0026d87:	90                   	nop
c0026d88:	90                   	nop
c0026d89:	90                   	nop
c0026d8a:	90                   	nop
c0026d8b:	90                   	nop
c0026d8c:	90                   	nop
c0026d8d:	90                   	nop
c0026d8e:	90                   	nop
c0026d8f:	90                   	nop
c0026d90:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c0026d95:	7e 9f                	jle    c0026d36 <tanh+0x76>
c0026d97:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0026d9b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026d9e:	e8 8d fa ff ff       	call   c0026830 <fabs>
c0026da3:	d8 c0                	fadd   st,st(0)
c0026da5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0026da8:	e8 f3 f5 ff ff       	call   c00263a0 <expm1>
c0026dad:	d9 05 68 e8 02 c0    	fld    DWORD PTR ds:0xc002e868
c0026db3:	dc c1                	fadd   st(1),st
c0026db5:	de f1                	fdivrp st(1),st
c0026db7:	d8 2d f8 e7 02 c0    	fsubr  DWORD PTR ds:0xc002e7f8
c0026dbd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0026dc1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0026dc5:	eb ab                	jmp    c0026d72 <tanh+0xb2>
c0026dc7:	66 90                	xchg   ax,ax
c0026dc9:	66 90                	xchg   ax,ax
c0026dcb:	66 90                	xchg   ax,ax
c0026dcd:	66 90                	xchg   ax,ax
c0026dcf:	90                   	nop

c0026dd0 <cimag>:
c0026dd0:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0026dd4:	c3                   	ret    
c0026dd5:	66 90                	xchg   ax,ax
c0026dd7:	66 90                	xchg   ax,ax
c0026dd9:	66 90                	xchg   ax,ax
c0026ddb:	66 90                	xchg   ax,ax
c0026ddd:	66 90                	xchg   ax,ax
c0026ddf:	90                   	nop

c0026de0 <creal>:
c0026de0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026de4:	c3                   	ret    
c0026de5:	66 90                	xchg   ax,ax
c0026de7:	90                   	nop

c0026de8 <exp>:
c0026de8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026dec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026df1:	3d 00 00 f0 7f       	cmp    eax,0x7ff00000
c0026df6:	73 42                	jae    c0026e3a <x_Inf_or_NaN>
c0026df8:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026dfc:	9b d9 7c 24 04       	fstcw  WORD PTR [esp+0x4]
c0026e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026e05:	25 00 03 00 00       	and    eax,0x300
c0026e0a:	3d 00 03 00 00       	cmp    eax,0x300
c0026e0f:	74 0c                	je     c0026e1d <exp+0x35>
c0026e11:	c7 44 24 08 7f 13 00 00 	mov    DWORD PTR [esp+0x8],0x137f
c0026e19:	d9 6c 24 08          	fldcw  WORD PTR [esp+0x8]
c0026e1d:	d9 ea                	fldl2e 
c0026e1f:	de c9                	fmulp  st(1),st
c0026e21:	dd d1                	fst    st(1)
c0026e23:	d9 fc                	frndint 
c0026e25:	dd d2                	fst    st(2)
c0026e27:	de e9                	fsubp  st(1),st
c0026e29:	d9 f0                	f2xm1  
c0026e2b:	d9 e8                	fld1   
c0026e2d:	de c1                	faddp  st(1),st
c0026e2f:	d9 fd                	fscale 
c0026e31:	dd d9                	fstp   st(1)
c0026e33:	74 04                	je     c0026e39 <exp+0x51>
c0026e35:	d9 6c 24 04          	fldcw  WORD PTR [esp+0x4]
c0026e39:	c3                   	ret    

c0026e3a <x_Inf_or_NaN>:
c0026e3a:	81 7c 24 08 00 00 f0 ff 	cmp    DWORD PTR [esp+0x8],0xfff00000
c0026e42:	75 0a                	jne    c0026e4e <x_not_minus_Inf>
c0026e44:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0026e49:	75 03                	jne    c0026e4e <x_not_minus_Inf>
c0026e4b:	d9 ee                	fldz   
c0026e4d:	c3                   	ret    

c0026e4e <x_not_minus_Inf>:
c0026e4e:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026e52:	c3                   	ret    
c0026e53:	90                   	nop

c0026e54 <fmod>:
c0026e54:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0026e58:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026e5c:	d9 f8                	fprem  
c0026e5e:	9b df e0             	fstsw  ax
c0026e61:	9e                   	sahf   
c0026e62:	7a f8                	jp     c0026e5c <fmod+0x8>
c0026e64:	dd d9                	fstp   st(1)
c0026e66:	c3                   	ret    
c0026e67:	90                   	nop

c0026e68 <log>:
c0026e68:	d9 ed                	fldln2 
c0026e6a:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026e6e:	d9 f1                	fyl2x  
c0026e70:	c3                   	ret    
c0026e71:	66 90                	xchg   ax,ax
c0026e73:	90                   	nop

c0026e74 <log10>:
c0026e74:	d9 ec                	fldlg2 
c0026e76:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026e7a:	d9 f1                	fyl2x  
c0026e7c:	c3                   	ret    
c0026e7d:	66 90                	xchg   ax,ax
c0026e7f:	90                   	nop

c0026e80 <sqrt>:
c0026e80:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026e84:	d9 fa                	fsqrt  
c0026e86:	c3                   	ret    
c0026e87:	90                   	nop

c0026e88 <ceil>:
c0026e88:	55                   	push   ebp
c0026e89:	89 e5                	mov    ebp,esp
c0026e8b:	83 ec 08             	sub    esp,0x8
c0026e8e:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c0026e92:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0026e96:	66 81 ca 00 08       	or     dx,0x800
c0026e9b:	66 81 e2 ff fb       	and    dx,0xfbff
c0026ea0:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0026ea4:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0026ea7:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c0026eaa:	d9 fc                	frndint 
c0026eac:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c0026eaf:	c9                   	leave  
c0026eb0:	c3                   	ret    
c0026eb1:	66 90                	xchg   ax,ax
c0026eb3:	90                   	nop

c0026eb4 <floor>:
c0026eb4:	55                   	push   ebp
c0026eb5:	89 e5                	mov    ebp,esp
c0026eb7:	83 ec 08             	sub    esp,0x8
c0026eba:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c0026ebe:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c0026ec2:	66 81 ca 00 04       	or     dx,0x400
c0026ec7:	66 81 e2 ff f7       	and    dx,0xf7ff
c0026ecc:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0026ed0:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0026ed3:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c0026ed6:	d9 fc                	frndint 
c0026ed8:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c0026edb:	c9                   	leave  
c0026edc:	c3                   	ret    
c0026edd:	66 90                	xchg   ax,ax
c0026edf:	90                   	nop

c0026ee0 <tan>:
c0026ee0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026ee4:	d9 f2                	fptan  
c0026ee6:	df e0                	fnstsw ax
c0026ee8:	66 25 00 04          	and    ax,0x400
c0026eec:	75 03                	jne    c0026ef1 <tan+0x11>
c0026eee:	dd d8                	fstp   st(0)
c0026ef0:	c3                   	ret    
c0026ef1:	d9 eb                	fldpi  
c0026ef3:	d8 c0                	fadd   st,st(0)
c0026ef5:	d9 c9                	fxch   st(1)
c0026ef7:	d9 f5                	fprem1 
c0026ef9:	9b df e0             	fstsw  ax
c0026efc:	66 25 00 04          	and    ax,0x400
c0026f00:	75 f5                	jne    c0026ef7 <tan+0x17>
c0026f02:	dd d9                	fstp   st(1)
c0026f04:	d9 f2                	fptan  
c0026f06:	dd d8                	fstp   st(0)
c0026f08:	c3                   	ret    
c0026f09:	66 90                	xchg   ax,ax
c0026f0b:	90                   	nop

c0026f0c <ldexp>:
c0026f0c:	db 44 24 0c          	fild   DWORD PTR [esp+0xc]
c0026f10:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026f14:	d9 fd                	fscale 
c0026f16:	dd d9                	fstp   st(1)
c0026f18:	c3                   	ret    
c0026f19:	66 90                	xchg   ax,ax
c0026f1b:	66 90                	xchg   ax,ax
c0026f1d:	66 90                	xchg   ax,ax
c0026f1f:	90                   	nop

c0026f20 <__ieee754_rem_pio2>:
c0026f20:	56                   	push   esi
c0026f21:	53                   	push   ebx
c0026f22:	83 ec 74             	sub    esp,0x74
c0026f25:	dd 84 24 80 00 00 00 	fld    QWORD PTR [esp+0x80]
c0026f2c:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0026f33:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c0026f37:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0026f3b:	89 f2                	mov    edx,esi
c0026f3d:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f43:	81 fa 7a 6a 0f 40    	cmp    edx,0x400f6a7a
c0026f49:	7f 65                	jg     c0026fb0 <__ieee754_rem_pio2+0x90>
c0026f4b:	89 f0                	mov    eax,esi
c0026f4d:	25 ff ff 0f 00       	and    eax,0xfffff
c0026f52:	3d fb 21 09 00       	cmp    eax,0x921fb
c0026f57:	0f 84 57 02 00 00    	je     c00271b4 <__ieee754_rem_pio2+0x294>
c0026f5d:	81 fa 7c d9 02 40    	cmp    edx,0x4002d97c
c0026f63:	0f 8f b7 01 00 00    	jg     c0027120 <__ieee754_rem_pio2+0x200>
c0026f69:	85 f6                	test   esi,esi
c0026f6b:	0f 8e 3a 04 00 00    	jle    c00273ab <__ieee754_rem_pio2+0x48b>
c0026f71:	dc 25 98 ea 02 c0    	fsub   QWORD PTR ds:0xc002ea98
c0026f77:	b8 01 00 00 00       	mov    eax,0x1
c0026f7c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026f80:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026f84:	dd 05 a0 ea 02 c0    	fld    QWORD PTR ds:0xc002eaa0
c0026f8a:	d9 c1                	fld    st(1)
c0026f8c:	d8 e1                	fsub   st,st(1)
c0026f8e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026f92:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026f96:	dd 13                	fst    QWORD PTR [ebx]
c0026f98:	de ea                	fsubp  st(2),st
c0026f9a:	de e9                	fsubp  st(1),st
c0026f9c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0026f9f:	83 c4 74             	add    esp,0x74
c0026fa2:	5b                   	pop    ebx
c0026fa3:	5e                   	pop    esi
c0026fa4:	c3                   	ret    
c0026fa5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0026fa9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0026fb0:	dd d8                	fstp   st(0)
c0026fb2:	81 fa 3b 46 1c 40    	cmp    edx,0x401c463b
c0026fb8:	7f 66                	jg     c0027020 <__ieee754_rem_pio2+0x100>
c0026fba:	81 fa bc fd 15 40    	cmp    edx,0x4015fdbc
c0026fc0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0026fc4:	0f 8f 96 01 00 00    	jg     c0027160 <__ieee754_rem_pio2+0x240>
c0026fca:	81 fa 7c d9 12 40    	cmp    edx,0x4012d97c
c0026fd0:	0f 84 de 01 00 00    	je     c00271b4 <__ieee754_rem_pio2+0x294>
c0026fd6:	85 f6                	test   esi,esi
c0026fd8:	0f 8e 00 04 00 00    	jle    c00273de <__ieee754_rem_pio2+0x4be>
c0026fde:	dc 25 b8 ea 02 c0    	fsub   QWORD PTR ds:0xc002eab8
c0026fe4:	b8 03 00 00 00       	mov    eax,0x3
c0026fe9:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026fed:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0026ff1:	db 2d 00 eb 02 c0    	fld    TBYTE PTR ds:0xc002eb00
c0026ff7:	d9 c1                	fld    st(1)
c0026ff9:	d8 e1                	fsub   st,st(1)
c0026ffb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0026fff:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027003:	dd 13                	fst    QWORD PTR [ebx]
c0027005:	de ea                	fsubp  st(2),st
c0027007:	de e9                	fsubp  st(1),st
c0027009:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002700c:	83 c4 74             	add    esp,0x74
c002700f:	5b                   	pop    ebx
c0027010:	5e                   	pop    esi
c0027011:	c3                   	ret    
c0027012:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027019:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027020:	81 fa fa 21 39 41    	cmp    edx,0x413921fa
c0027026:	0f 8e 84 01 00 00    	jle    c00271b0 <__ieee754_rem_pio2+0x290>
c002702c:	81 fa ff ff ef 7f    	cmp    edx,0x7fefffff
c0027032:	0f 8f d8 02 00 00    	jg     c0027310 <__ieee754_rem_pio2+0x3f0>
c0027038:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c002703c:	89 d1                	mov    ecx,edx
c002703e:	c1 f9 14             	sar    ecx,0x14
c0027041:	81 e9 16 04 00 00    	sub    ecx,0x416
c0027047:	89 c8                	mov    eax,ecx
c0027049:	c1 e0 14             	shl    eax,0x14
c002704c:	29 c2                	sub    edx,eax
c002704e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027052:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0027056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002705a:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002705f:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0027063:	66 0d 00 0c          	or     ax,0xc00
c0027067:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c002706c:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0027070:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c0027074:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0027078:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c002707c:	dd 54 24 58          	fst    QWORD PTR [esp+0x58]
c0027080:	de e9                	fsubp  st(1),st
c0027082:	d9 05 14 eb 02 c0    	fld    DWORD PTR ds:0xc002eb14
c0027088:	dc c9                	fmul   st(1),st
c002708a:	d9 c9                	fxch   st(1)
c002708c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027090:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027094:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0027098:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c002709c:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00270a0:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c00270a4:	dd 54 24 60          	fst    QWORD PTR [esp+0x60]
c00270a8:	de e9                	fsubp  st(1),st
c00270aa:	de c9                	fmulp  st(1),st
c00270ac:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00270b0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00270b4:	dd 54 24 68          	fst    QWORD PTR [esp+0x68]
c00270b8:	d9 ee                	fldz   
c00270ba:	d9 c9                	fxch   st(1)
c00270bc:	df e9                	fucomip st,st(1)
c00270be:	dd d8                	fstp   st(0)
c00270c0:	0f 8a 8a 02 00 00    	jp     c0027350 <__ieee754_rem_pio2+0x430>
c00270c6:	0f 85 84 02 00 00    	jne    c0027350 <__ieee754_rem_pio2+0x430>
c00270cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00270d0:	31 c0                	xor    eax,eax
c00270d2:	85 d2                	test   edx,edx
c00270d4:	0f 95 c0             	setne  al
c00270d7:	40                   	inc    eax
c00270d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270dc:	8d 44 24 48          	lea    eax,[esp+0x48]
c00270e0:	ba 01 00 00 00       	mov    edx,0x1
c00270e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00270e9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00270ed:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00270f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00270f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00270f8:	e8 f3 03 00 00       	call   c00274f0 <__kernel_rem_pio2>
c00270fd:	85 f6                	test   esi,esi
c00270ff:	0f 88 5b 02 00 00    	js     c0027360 <__ieee754_rem_pio2+0x440>
c0027105:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027109:	dd 1b                	fstp   QWORD PTR [ebx]
c002710b:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c002710f:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027112:	e9 88 fe ff ff       	jmp    c0026f9f <__ieee754_rem_pio2+0x7f>
c0027117:	89 f6                	mov    esi,esi
c0027119:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027120:	85 f6                	test   esi,esi
c0027122:	0f 8e 50 02 00 00    	jle    c0027378 <__ieee754_rem_pio2+0x458>
c0027128:	dc 25 a8 ea 02 c0    	fsub   QWORD PTR ds:0xc002eaa8
c002712e:	b8 02 00 00 00       	mov    eax,0x2
c0027133:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027137:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002713b:	dd 05 b0 ea 02 c0    	fld    QWORD PTR ds:0xc002eab0
c0027141:	d9 c1                	fld    st(1)
c0027143:	d8 e1                	fsub   st,st(1)
c0027145:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027149:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002714d:	dd 13                	fst    QWORD PTR [ebx]
c002714f:	de ea                	fsubp  st(2),st
c0027151:	de e9                	fsubp  st(1),st
c0027153:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027156:	83 c4 74             	add    esp,0x74
c0027159:	5b                   	pop    ebx
c002715a:	5e                   	pop    esi
c002715b:	c3                   	ret    
c002715c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027160:	81 fa fb 21 19 40    	cmp    edx,0x401921fb
c0027166:	74 4c                	je     c00271b4 <__ieee754_rem_pio2+0x294>
c0027168:	85 f6                	test   esi,esi
c002716a:	0f 8e a1 02 00 00    	jle    c0027411 <__ieee754_rem_pio2+0x4f1>
c0027170:	dc 25 c0 ea 02 c0    	fsub   QWORD PTR ds:0xc002eac0
c0027176:	b8 04 00 00 00       	mov    eax,0x4
c002717b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002717f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027183:	dd 05 c8 ea 02 c0    	fld    QWORD PTR ds:0xc002eac8
c0027189:	d9 c1                	fld    st(1)
c002718b:	d8 e1                	fsub   st,st(1)
c002718d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027191:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027195:	dd 13                	fst    QWORD PTR [ebx]
c0027197:	de ea                	fsubp  st(2),st
c0027199:	de e9                	fsubp  st(1),st
c002719b:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002719e:	83 c4 74             	add    esp,0x74
c00271a1:	5b                   	pop    ebx
c00271a2:	5e                   	pop    esi
c00271a3:	c3                   	ret    
c00271a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00271aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00271b0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00271b4:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00271b8:	d9 c0                	fld    st(0)
c00271ba:	dc 0d d0 ea 02 c0    	fmul   QWORD PTR ds:0xc002ead0
c00271c0:	c1 fa 14             	sar    edx,0x14
c00271c3:	89 d6                	mov    esi,edx
c00271c5:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c00271ca:	d9 05 10 eb 02 c0    	fld    DWORD PTR ds:0xc002eb10
c00271d0:	dc c1                	fadd   st(1),st
c00271d2:	d9 c9                	fxch   st(1)
c00271d4:	66 0d 00 0c          	or     ax,0xc00
c00271d8:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c00271dd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00271e1:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00271e5:	de e1                	fsubrp st(1),st
c00271e7:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00271eb:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00271ef:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c00271f3:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c00271f7:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00271fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00271ff:	d9 c0                	fld    st(0)
c0027201:	dc 0d 98 ea 02 c0    	fmul   QWORD PTR ds:0xc002ea98
c0027207:	de ea                	fsubp  st(2),st
c0027209:	d9 c9                	fxch   st(1)
c002720b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002720f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027213:	d9 c1                	fld    st(1)
c0027215:	dc 0d a0 ea 02 c0    	fmul   QWORD PTR ds:0xc002eaa0
c002721b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002721f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027223:	d9 c1                	fld    st(1)
c0027225:	d8 e1                	fsub   st,st(1)
c0027227:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c002722b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002722f:	c1 e9 14             	shr    ecx,0x14
c0027232:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027238:	29 ce                	sub    esi,ecx
c002723a:	83 fe 10             	cmp    esi,0x10
c002723d:	7f 21                	jg     c0027260 <__ieee754_rem_pio2+0x340>
c002723f:	dd da                	fstp   st(2)
c0027241:	d9 c9                	fxch   st(1)
c0027243:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027247:	dd 1b                	fstp   QWORD PTR [ebx]
c0027249:	d9 c9                	fxch   st(1)
c002724b:	dc 64 24 20          	fsub   QWORD PTR [esp+0x20]
c002724f:	de e1                	fsubrp st(1),st
c0027251:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027254:	83 c4 74             	add    esp,0x74
c0027257:	5b                   	pop    ebx
c0027258:	5e                   	pop    esi
c0027259:	c3                   	ret    
c002725a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027260:	dd d8                	fstp   st(0)
c0027262:	d9 c1                	fld    st(1)
c0027264:	dc 0d d8 ea 02 c0    	fmul   QWORD PTR ds:0xc002ead8
c002726a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002726e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027272:	d9 c1                	fld    st(1)
c0027274:	d8 e1                	fsub   st,st(1)
c0027276:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002727a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002727e:	d9 c0                	fld    st(0)
c0027280:	dc eb                	fsub   st(3),st
c0027282:	d9 cb                	fxch   st(3)
c0027284:	de e2                	fsubrp st(2),st
c0027286:	d9 c3                	fld    st(3)
c0027288:	dc 0d e0 ea 02 c0    	fmul   QWORD PTR ds:0xc002eae0
c002728e:	de e2                	fsubrp st(2),st
c0027290:	d9 c9                	fxch   st(1)
c0027292:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027296:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002729a:	d9 c2                	fld    st(2)
c002729c:	d8 e1                	fsub   st,st(1)
c002729e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00272a2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00272a6:	c1 e9 14             	shr    ecx,0x14
c00272a9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00272af:	29 ca                	sub    edx,ecx
c00272b1:	83 fa 31             	cmp    edx,0x31
c00272b4:	7e 7a                	jle    c0027330 <__ieee754_rem_pio2+0x410>
c00272b6:	dd d8                	fstp   st(0)
c00272b8:	dd d8                	fstp   st(0)
c00272ba:	d9 c1                	fld    st(1)
c00272bc:	dc 0d e8 ea 02 c0    	fmul   QWORD PTR ds:0xc002eae8
c00272c2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00272c6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00272ca:	d9 c1                	fld    st(1)
c00272cc:	d8 e1                	fsub   st,st(1)
c00272ce:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00272d2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00272d6:	d9 cb                	fxch   st(3)
c00272d8:	dc 0d f0 ea 02 c0    	fmul   QWORD PTR ds:0xc002eaf0
c00272de:	d9 ca                	fxch   st(2)
c00272e0:	d8 e3                	fsub   st,st(3)
c00272e2:	de e1                	fsubrp st(1),st
c00272e4:	de e9                	fsubp  st(1),st
c00272e6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00272ea:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00272ee:	d9 c1                	fld    st(1)
c00272f0:	d8 e1                	fsub   st,st(1)
c00272f2:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00272f6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00272fa:	dd 1b                	fstp   QWORD PTR [ebx]
c00272fc:	d9 c9                	fxch   st(1)
c00272fe:	e9 48 ff ff ff       	jmp    c002724b <__ieee754_rem_pio2+0x32b>
c0027303:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027309:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027310:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027314:	31 c0                	xor    eax,eax
c0027316:	d8 e0                	fsub   st,st(0)
c0027318:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002731c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027320:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0027323:	dd 1b                	fstp   QWORD PTR [ebx]
c0027325:	e9 75 fc ff ff       	jmp    c0026f9f <__ieee754_rem_pio2+0x7f>
c002732a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027330:	dd da                	fstp   st(2)
c0027332:	dd da                	fstp   st(2)
c0027334:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0027338:	dd 1b                	fstp   QWORD PTR [ebx]
c002733a:	d9 c9                	fxch   st(1)
c002733c:	e9 0a ff ff ff       	jmp    c002724b <__ieee754_rem_pio2+0x32b>
c0027341:	eb 0d                	jmp    c0027350 <__ieee754_rem_pio2+0x430>
c0027343:	90                   	nop
c0027344:	90                   	nop
c0027345:	90                   	nop
c0027346:	90                   	nop
c0027347:	90                   	nop
c0027348:	90                   	nop
c0027349:	90                   	nop
c002734a:	90                   	nop
c002734b:	90                   	nop
c002734c:	90                   	nop
c002734d:	90                   	nop
c002734e:	90                   	nop
c002734f:	90                   	nop
c0027350:	b8 03 00 00 00       	mov    eax,0x3
c0027355:	e9 7e fd ff ff       	jmp    c00270d8 <__ieee754_rem_pio2+0x1b8>
c002735a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027360:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027364:	f7 d8                	neg    eax
c0027366:	d9 e0                	fchs   
c0027368:	dd 1b                	fstp   QWORD PTR [ebx]
c002736a:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c002736e:	d9 e0                	fchs   
c0027370:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0027373:	e9 27 fc ff ff       	jmp    c0026f9f <__ieee754_rem_pio2+0x7f>
c0027378:	dc 05 a8 ea 02 c0    	fadd   QWORD PTR ds:0xc002eaa8
c002737e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0027383:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027387:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002738b:	dd 05 b0 ea 02 c0    	fld    QWORD PTR ds:0xc002eab0
c0027391:	d9 c1                	fld    st(1)
c0027393:	d8 c1                	fadd   st,st(1)
c0027395:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027399:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002739d:	dd 13                	fst    QWORD PTR [ebx]
c002739f:	de ea                	fsubp  st(2),st
c00273a1:	de c1                	faddp  st(1),st
c00273a3:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00273a6:	e9 f4 fb ff ff       	jmp    c0026f9f <__ieee754_rem_pio2+0x7f>
c00273ab:	dc 05 98 ea 02 c0    	fadd   QWORD PTR ds:0xc002ea98
c00273b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00273b6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00273ba:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00273be:	dd 05 a0 ea 02 c0    	fld    QWORD PTR ds:0xc002eaa0
c00273c4:	d9 c1                	fld    st(1)
c00273c6:	d8 c1                	fadd   st,st(1)
c00273c8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00273cc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00273d0:	dd 13                	fst    QWORD PTR [ebx]
c00273d2:	de ea                	fsubp  st(2),st
c00273d4:	de c1                	faddp  st(1),st
c00273d6:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00273d9:	e9 c1 fb ff ff       	jmp    c0026f9f <__ieee754_rem_pio2+0x7f>
c00273de:	dc 05 b8 ea 02 c0    	fadd   QWORD PTR ds:0xc002eab8
c00273e4:	b8 fd ff ff ff       	mov    eax,0xfffffffd
c00273e9:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00273ed:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00273f1:	db 2d 00 eb 02 c0    	fld    TBYTE PTR ds:0xc002eb00
c00273f7:	d9 c1                	fld    st(1)
c00273f9:	d8 c1                	fadd   st,st(1)
c00273fb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00273ff:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027403:	dd 13                	fst    QWORD PTR [ebx]
c0027405:	de ea                	fsubp  st(2),st
c0027407:	de c1                	faddp  st(1),st
c0027409:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002740c:	e9 8e fb ff ff       	jmp    c0026f9f <__ieee754_rem_pio2+0x7f>
c0027411:	dc 05 c0 ea 02 c0    	fadd   QWORD PTR ds:0xc002eac0
c0027417:	b8 fc ff ff ff       	mov    eax,0xfffffffc
c002741c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027420:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027424:	dd 05 c8 ea 02 c0    	fld    QWORD PTR ds:0xc002eac8
c002742a:	d9 c1                	fld    st(1)
c002742c:	d8 c1                	fadd   st,st(1)
c002742e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0027432:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027436:	dd 13                	fst    QWORD PTR [ebx]
c0027438:	de ea                	fsubp  st(2),st
c002743a:	de c1                	faddp  st(1),st
c002743c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002743f:	e9 5b fb ff ff       	jmp    c0026f9f <__ieee754_rem_pio2+0x7f>
c0027444:	66 90                	xchg   ax,ax
c0027446:	66 90                	xchg   ax,ax
c0027448:	66 90                	xchg   ax,ax
c002744a:	66 90                	xchg   ax,ax
c002744c:	66 90                	xchg   ax,ax
c002744e:	66 90                	xchg   ax,ax

c0027450 <__kernel_cos>:
c0027450:	83 ec 0c             	sub    esp,0xc
c0027453:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0027457:	d9 c0                	fld    st(0)
c0027459:	d8 c9                	fmul   st,st(1)
c002745b:	dd 1c 24             	fstp   QWORD PTR [esp]
c002745e:	dd 04 24             	fld    QWORD PTR [esp]
c0027461:	d9 c0                	fld    st(0)
c0027463:	d8 c9                	fmul   st,st(1)
c0027465:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027468:	dd 04 24             	fld    QWORD PTR [esp]
c002746b:	d9 c1                	fld    st(1)
c002746d:	d8 0d fc e7 02 c0    	fmul   DWORD PTR ds:0xc002e7fc
c0027473:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027476:	dd 04 24             	fld    QWORD PTR [esp]
c0027479:	d9 e8                	fld1   
c002747b:	d9 c0                	fld    st(0)
c002747d:	d8 e2                	fsub   st,st(2)
c002747f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027482:	dd 04 24             	fld    QWORD PTR [esp]
c0027485:	d9 c4                	fld    st(4)
c0027487:	dc 0d 18 eb 02 c0    	fmul   QWORD PTR ds:0xc002eb18
c002748d:	dc 05 20 eb 02 c0    	fadd   QWORD PTR ds:0xc002eb20
c0027493:	d8 cd                	fmul   st,st(5)
c0027495:	dc 25 28 eb 02 c0    	fsub   QWORD PTR ds:0xc002eb28
c002749b:	d9 cc                	fxch   st(4)
c002749d:	d8 c8                	fmul   st,st(0)
c002749f:	de cc                	fmulp  st(4),st
c00274a1:	d9 c4                	fld    st(4)
c00274a3:	dc 0d 30 eb 02 c0    	fmul   QWORD PTR ds:0xc002eb30
c00274a9:	dc 25 38 eb 02 c0    	fsub   QWORD PTR ds:0xc002eb38
c00274af:	d8 cd                	fmul   st,st(5)
c00274b1:	dc 05 40 eb 02 c0    	fadd   QWORD PTR ds:0xc002eb40
c00274b7:	d8 cd                	fmul   st,st(5)
c00274b9:	de c4                	faddp  st(4),st
c00274bb:	d9 cb                	fxch   st(3)
c00274bd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00274c0:	dd 04 24             	fld    QWORD PTR [esp]
c00274c3:	de cc                	fmulp  st(4),st
c00274c5:	d9 cc                	fxch   st(4)
c00274c7:	dc 4c 24 18          	fmul   QWORD PTR [esp+0x18]
c00274cb:	de eb                	fsubp  st(3),st
c00274cd:	d9 cb                	fxch   st(3)
c00274cf:	d8 e1                	fsub   st,st(1)
c00274d1:	de e3                	fsubrp st(3),st
c00274d3:	d9 c9                	fxch   st(1)
c00274d5:	de c2                	faddp  st(2),st
c00274d7:	de c1                	faddp  st(1),st
c00274d9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00274dc:	dd 04 24             	fld    QWORD PTR [esp]
c00274df:	83 c4 0c             	add    esp,0xc
c00274e2:	c3                   	ret    
c00274e3:	66 90                	xchg   ax,ax
c00274e5:	66 90                	xchg   ax,ax
c00274e7:	66 90                	xchg   ax,ax
c00274e9:	66 90                	xchg   ax,ax
c00274eb:	66 90                	xchg   ax,ax
c00274ed:	66 90                	xchg   ax,ax
c00274ef:	90                   	nop

c00274f0 <__kernel_rem_pio2>:
c00274f0:	55                   	push   ebp
c00274f1:	57                   	push   edi
c00274f2:	56                   	push   esi
c00274f3:	53                   	push   ebx
c00274f4:	81 ec 8c 02 00 00    	sub    esp,0x28c
c00274fa:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0027501:	8b 9c 24 a8 02 00 00 	mov    ebx,DWORD PTR [esp+0x2a8]
c0027508:	8b 04 85 28 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09d8]
c002750f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0027513:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c002751a:	48                   	dec    eax
c002751b:	83 fb ec             	cmp    ebx,0xffffffec
c002751e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0027522:	0f 8c 44 08 00 00    	jl     c0027d6c <__kernel_rem_pio2+0x87c>
c0027528:	8d 4b fd             	lea    ecx,[ebx-0x3]
c002752b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
c0027530:	89 c8                	mov    eax,ecx
c0027532:	f7 ea                	imul   edx
c0027534:	c1 f9 1f             	sar    ecx,0x1f
c0027537:	c1 fa 02             	sar    edx,0x2
c002753a:	29 ca                	sub    edx,ecx
c002753c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0027540:	8d 42 01             	lea    eax,[edx+0x1]
c0027543:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c002754a:	29 d0                	sub    eax,edx
c002754c:	c1 e0 03             	shl    eax,0x3
c002754f:	01 d8                	add    eax,ebx
c0027551:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027555:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0027559:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002755d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027561:	29 c2                	sub    edx,eax
c0027563:	01 c6                	add    esi,eax
c0027565:	78 58                	js     c00275bf <__kernel_rem_pio2+0xcf>
c0027567:	85 d2                	test   edx,edx
c0027569:	0f 89 f4 04 00 00    	jns    c0027a63 <__kernel_rem_pio2+0x573>
c002756f:	8d 5c 16 01          	lea    ebx,[esi+edx*1+0x1]
c0027573:	b8 00 00 00 00       	mov    eax,0x0
c0027578:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c002757f:	85 db                	test   ebx,ebx
c0027581:	0f 4f d8             	cmovg  ebx,eax
c0027584:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002758a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0027590:	d9 ee                	fldz   
c0027592:	42                   	inc    edx
c0027593:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0027596:	40                   	inc    eax
c0027597:	39 da                	cmp    edx,ebx
c0027599:	7c f5                	jl     c0027590 <__kernel_rem_pio2+0xa0>
c002759b:	39 c6                	cmp    esi,eax
c002759d:	7c 20                	jl     c00275bf <__kernel_rem_pio2+0xcf>
c002759f:	29 c2                	sub    edx,eax
c00275a1:	c1 e2 02             	shl    edx,0x2
c00275a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00275aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00275b0:	db 84 82 60 eb 02 c0 	fild   DWORD PTR [edx+eax*4-0x3ffd14a0]
c00275b7:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c00275ba:	40                   	inc    eax
c00275bb:	39 c6                	cmp    esi,eax
c00275bd:	7d f1                	jge    c00275b0 <__kernel_rem_pio2+0xc0>
c00275bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00275c3:	85 c0                	test   eax,eax
c00275c5:	78 7c                	js     c0027643 <__kernel_rem_pio2+0x153>
c00275c7:	8d 2c c5 08 00 00 00 	lea    ebp,[eax*8+0x8]
c00275ce:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c00275d5:	31 db                	xor    ebx,ebx
c00275d7:	8b 8c 24 a0 02 00 00 	mov    ecx,DWORD PTR [esp+0x2a0]
c00275de:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c00275e5:	c1 e0 03             	shl    eax,0x3
c00275e8:	8d bc 04 98 00 00 00 	lea    edi,[esp+eax*1+0x98]
c00275ef:	01 c1                	add    ecx,eax
c00275f1:	eb 0d                	jmp    c0027600 <__kernel_rem_pio2+0x110>
c00275f3:	90                   	nop
c00275f4:	90                   	nop
c00275f5:	90                   	nop
c00275f6:	90                   	nop
c00275f7:	90                   	nop
c00275f8:	90                   	nop
c00275f9:	90                   	nop
c00275fa:	90                   	nop
c00275fb:	90                   	nop
c00275fc:	90                   	nop
c00275fd:	90                   	nop
c00275fe:	90                   	nop
c00275ff:	90                   	nop
c0027600:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027604:	85 c0                	test   eax,eax
c0027606:	0f 88 65 04 00 00    	js     c0027a71 <__kernel_rem_pio2+0x581>
c002760c:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0027613:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0027616:	d9 ee                	fldz   
c0027618:	90                   	nop
c0027619:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027620:	dd 02                	fld    QWORD PTR [edx]
c0027622:	83 c0 08             	add    eax,0x8
c0027625:	83 ea 08             	sub    edx,0x8
c0027628:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c002762b:	39 c1                	cmp    ecx,eax
c002762d:	de c1                	faddp  st(1),st
c002762f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027633:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027637:	75 e7                	jne    c0027620 <__kernel_rem_pio2+0x130>
c0027639:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c002763c:	83 c3 08             	add    ebx,0x8
c002763f:	39 dd                	cmp    ebp,ebx
c0027641:	75 bd                	jne    c0027600 <__kernel_rem_pio2+0x110>
c0027643:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0027647:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002764b:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
c0027652:	8d 7c 04 4c          	lea    edi,[esp+eax*1+0x4c]
c0027656:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c002765a:	8d 44 04 48          	lea    eax,[esp+eax*1+0x48]
c002765e:	8b bc 24 ac 02 00 00 	mov    edi,DWORD PTR [esp+0x2ac]
c0027665:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0027669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002766d:	c1 e0 02             	shl    eax,0x2
c0027670:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0027674:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c002767b:	8d 1c f8             	lea    ebx,[eax+edi*8]
c002767e:	b8 18 00 00 00       	mov    eax,0x18
c0027683:	29 e8                	sub    eax,ebp
c0027685:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0027689:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0027690:	85 f6                	test   esi,esi
c0027692:	dd 84 f4 e0 01 00 00 	fld    QWORD PTR [esp+esi*8+0x1e0]
c0027699:	7e 6a                	jle    c0027705 <__kernel_rem_pio2+0x215>
c002769b:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c002769f:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c00276a6:	8d 44 f5 f8          	lea    eax,[ebp+esi*8-0x8]
c00276aa:	8d 54 24 50          	lea    edx,[esp+0x50]
c00276ae:	0f b7 4c 24 46       	movzx  ecx,WORD PTR [esp+0x46]
c00276b3:	66 81 c9 00 0c       	or     cx,0xc00
c00276b8:	66 89 4c 24 44       	mov    WORD PTR [esp+0x44],cx
c00276bd:	eb 03                	jmp    c00276c2 <__kernel_rem_pio2+0x1d2>
c00276bf:	90                   	nop
c00276c0:	89 c8                	mov    eax,ecx
c00276c2:	83 c2 04             	add    edx,0x4
c00276c5:	d9 c0                	fld    st(0)
c00276c7:	d8 0d 3c f6 02 c0    	fmul   DWORD PTR ds:0xc002f63c
c00276cd:	8d 48 f8             	lea    ecx,[eax-0x8]
c00276d0:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00276d4:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c00276d8:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00276dc:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c00276e0:	d9 c0                	fld    st(0)
c00276e2:	d8 0d 14 eb 02 c0    	fmul   DWORD PTR ds:0xc002eb14
c00276e8:	de ea                	fsubp  st(2),st
c00276ea:	d9 c9                	fxch   st(1)
c00276ec:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00276f0:	db 5a fc             	fistp  DWORD PTR [edx-0x4]
c00276f3:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00276f7:	39 c5                	cmp    ebp,eax
c00276f9:	dc 00                	fadd   QWORD PTR [eax]
c00276fb:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00276ff:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027703:	75 bb                	jne    c00276c0 <__kernel_rem_pio2+0x1d0>
c0027705:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0027709:	dd 1c 24             	fstp   QWORD PTR [esp]
c002770c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0027710:	e8 f7 f7 ff ff       	call   c0026f0c <ldexp>
c0027715:	d9 c0                	fld    st(0)
c0027717:	db 7c 24 10          	fstp   TBYTE PTR [esp+0x10]
c002771b:	d8 0d 40 f6 02 c0    	fmul   DWORD PTR ds:0xc002f640
c0027721:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027724:	e8 8b f7 ff ff       	call   c0026eb4 <floor>
c0027729:	d9 05 44 f6 02 c0    	fld    DWORD PTR ds:0xc002f644
c002772f:	de c9                	fmulp  st(1),st
c0027731:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0027735:	db 6c 24 10          	fld    TBYTE PTR [esp+0x10]
c0027739:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c002773e:	de e1                	fsubrp st(1),st
c0027740:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027744:	66 0d 00 0c          	or     ax,0xc00
c0027748:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c002774d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027751:	85 ff                	test   edi,edi
c0027753:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027757:	db 54 24 40          	fist   DWORD PTR [esp+0x40]
c002775b:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002775f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0027763:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027767:	db 44 24 24          	fild   DWORD PTR [esp+0x24]
c002776b:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c002776f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0027773:	de e9                	fsubp  st(1),st
c0027775:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027779:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002777d:	0f 8e 2d 01 00 00    	jle    c00278b0 <__kernel_rem_pio2+0x3c0>
c0027783:	8d 7e ff             	lea    edi,[esi-0x1]
c0027786:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c002778b:	8b 44 bc 50          	mov    eax,DWORD PTR [esp+edi*4+0x50]
c002778f:	89 c2                	mov    edx,eax
c0027791:	d3 fa                	sar    edx,cl
c0027793:	01 d5                	add    ebp,edx
c0027795:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0027799:	d3 e2                	shl    edx,cl
c002779b:	b9 17 00 00 00       	mov    ecx,0x17
c00277a0:	29 d0                	sub    eax,edx
c00277a2:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c00277a6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00277aa:	29 f9                	sub    ecx,edi
c00277ac:	d3 f8                	sar    eax,cl
c00277ae:	89 c5                	mov    ebp,eax
c00277b0:	85 ed                	test   ebp,ebp
c00277b2:	0f 8f 0e 01 00 00    	jg     c00278c6 <__kernel_rem_pio2+0x3d6>
c00277b8:	d9 ee                	fldz   
c00277ba:	d9 c9                	fxch   st(1)
c00277bc:	db e9                	fucomi st,st(1)
c00277be:	dd d9                	fstp   st(1)
c00277c0:	0f 8a a2 01 00 00    	jp     c0027968 <__kernel_rem_pio2+0x478>
c00277c6:	0f 85 9c 01 00 00    	jne    c0027968 <__kernel_rem_pio2+0x478>
c00277cc:	dd d8                	fstp   st(0)
c00277ce:	8d 7e ff             	lea    edi,[esi-0x1]
c00277d1:	39 7c 24 28          	cmp    DWORD PTR [esp+0x28],edi
c00277d5:	7f 2a                	jg     c0027801 <__kernel_rem_pio2+0x311>
c00277d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00277db:	8d 44 b4 4c          	lea    eax,[esp+esi*4+0x4c]
c00277df:	31 d2                	xor    edx,edx
c00277e1:	eb 0d                	jmp    c00277f0 <__kernel_rem_pio2+0x300>
c00277e3:	90                   	nop
c00277e4:	90                   	nop
c00277e5:	90                   	nop
c00277e6:	90                   	nop
c00277e7:	90                   	nop
c00277e8:	90                   	nop
c00277e9:	90                   	nop
c00277ea:	90                   	nop
c00277eb:	90                   	nop
c00277ec:	90                   	nop
c00277ed:	90                   	nop
c00277ee:	90                   	nop
c00277ef:	90                   	nop
c00277f0:	0b 10                	or     edx,DWORD PTR [eax]
c00277f2:	83 e8 04             	sub    eax,0x4
c00277f5:	39 c1                	cmp    ecx,eax
c00277f7:	75 f7                	jne    c00277f0 <__kernel_rem_pio2+0x300>
c00277f9:	85 d2                	test   edx,edx
c00277fb:	0f 85 85 02 00 00    	jne    c0027a86 <__kernel_rem_pio2+0x596>
c0027801:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027805:	8b 4c 84 4c          	mov    ecx,DWORD PTR [esp+eax*4+0x4c]
c0027809:	85 c9                	test   ecx,ecx
c002780b:	0f 85 48 02 00 00    	jne    c0027a59 <__kernel_rem_pio2+0x569>
c0027811:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0027815:	bf 01 00 00 00       	mov    edi,0x1
c002781a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0027820:	83 e8 04             	sub    eax,0x4
c0027823:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0027826:	47                   	inc    edi
c0027827:	85 d2                	test   edx,edx
c0027829:	74 f5                	je     c0027820 <__kernel_rem_pio2+0x330>
c002782b:	8d 4e 01             	lea    ecx,[esi+0x1]
c002782e:	01 f7                	add    edi,esi
c0027830:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0027837:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c002783e:	01 c6                	add    esi,eax
c0027840:	8d b4 f4 a0 00 00 00 	lea    esi,[esp+esi*8+0xa0]
c0027847:	89 f6                	mov    esi,esi
c0027849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027854:	db 84 88 60 eb 02 c0 	fild   DWORD PTR [eax+ecx*4-0x3ffd14a0]
c002785b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002785f:	85 c0                	test   eax,eax
c0027861:	dd 1e                	fstp   QWORD PTR [esi]
c0027863:	78 3b                	js     c00278a0 <__kernel_rem_pio2+0x3b0>
c0027865:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c002786c:	d9 ee                	fldz   
c002786e:	89 f2                	mov    edx,esi
c0027870:	dd 02                	fld    QWORD PTR [edx]
c0027872:	83 c0 08             	add    eax,0x8
c0027875:	83 ea 08             	sub    edx,0x8
c0027878:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c002787b:	39 c3                	cmp    ebx,eax
c002787d:	de c1                	faddp  st(1),st
c002787f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027883:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027887:	75 e7                	jne    c0027870 <__kernel_rem_pio2+0x380>
c0027889:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c002788d:	41                   	inc    ecx
c002788e:	83 c6 08             	add    esi,0x8
c0027891:	39 cf                	cmp    edi,ecx
c0027893:	7d bb                	jge    c0027850 <__kernel_rem_pio2+0x360>
c0027895:	89 fe                	mov    esi,edi
c0027897:	e9 f4 fd ff ff       	jmp    c0027690 <__kernel_rem_pio2+0x1a0>
c002789c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00278a0:	d9 ee                	fldz   
c00278a2:	83 c6 08             	add    esi,0x8
c00278a5:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c00278a9:	41                   	inc    ecx
c00278aa:	39 cf                	cmp    edi,ecx
c00278ac:	7d a2                	jge    c0027850 <__kernel_rem_pio2+0x360>
c00278ae:	eb e5                	jmp    c0027895 <__kernel_rem_pio2+0x3a5>
c00278b0:	0f 85 8a 01 00 00    	jne    c0027a40 <__kernel_rem_pio2+0x550>
c00278b6:	8b 6c b4 4c          	mov    ebp,DWORD PTR [esp+esi*4+0x4c]
c00278ba:	c1 fd 17             	sar    ebp,0x17
c00278bd:	85 ed                	test   ebp,ebp
c00278bf:	90                   	nop
c00278c0:	0f 8e f2 fe ff ff    	jle    c00277b8 <__kernel_rem_pio2+0x2c8>
c00278c6:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00278ca:	85 f6                	test   esi,esi
c00278cc:	0f 8e d3 04 00 00    	jle    c0027da5 <__kernel_rem_pio2+0x8b5>
c00278d2:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00278d6:	85 d2                	test   edx,edx
c00278d8:	0f 85 12 01 00 00    	jne    c00279f0 <__kernel_rem_pio2+0x500>
c00278de:	83 fe 01             	cmp    esi,0x1
c00278e1:	b9 01 00 00 00       	mov    ecx,0x1
c00278e6:	74 15                	je     c00278fd <__kernel_rem_pio2+0x40d>
c00278e8:	8b 54 8c 50          	mov    edx,DWORD PTR [esp+ecx*4+0x50]
c00278ec:	8d 41 01             	lea    eax,[ecx+0x1]
c00278ef:	85 d2                	test   edx,edx
c00278f1:	0f 85 00 01 00 00    	jne    c00279f7 <__kernel_rem_pio2+0x507>
c00278f7:	39 c6                	cmp    esi,eax
c00278f9:	89 c1                	mov    ecx,eax
c00278fb:	75 eb                	jne    c00278e8 <__kernel_rem_pio2+0x3f8>
c00278fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027901:	85 c0                	test   eax,eax
c0027903:	7e 16                	jle    c002791b <__kernel_rem_pio2+0x42b>
c0027905:	83 f8 01             	cmp    eax,0x1
c0027908:	0f 84 51 04 00 00    	je     c0027d5f <__kernel_rem_pio2+0x86f>
c002790e:	83 f8 02             	cmp    eax,0x2
c0027911:	75 08                	jne    c002791b <__kernel_rem_pio2+0x42b>
c0027913:	81 64 b4 4c ff ff 3f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x3fffff
c002791b:	83 fd 02             	cmp    ebp,0x2
c002791e:	0f 85 94 fe ff ff    	jne    c00277b8 <__kernel_rem_pio2+0x2c8>
c0027924:	d9 e8                	fld1   
c0027926:	85 d2                	test   edx,edx
c0027928:	de e1                	fsubrp st(1),st
c002792a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002792e:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027932:	0f 84 80 fe ff ff    	je     c00277b8 <__kernel_rem_pio2+0x2c8>
c0027938:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002793c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027940:	d9 e8                	fld1   
c0027942:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027945:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027949:	e8 be f5 ff ff       	call   c0026f0c <ldexp>
c002794e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0027952:	de e1                	fsubrp st(1),st
c0027954:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027958:	d9 ee                	fldz   
c002795a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002795e:	db e9                	fucomi st,st(1)
c0027960:	dd d9                	fstp   st(1)
c0027962:	0f 8b 5e fe ff ff    	jnp    c00277c6 <__kernel_rem_pio2+0x2d6>
c0027968:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002796c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002796f:	89 d8                	mov    eax,ebx
c0027971:	f7 d8                	neg    eax
c0027973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027977:	e8 90 f5 ff ff       	call   c0026f0c <ldexp>
c002797c:	d9 05 14 eb 02 c0    	fld    DWORD PTR ds:0xc002eb14
c0027982:	d9 c9                	fxch   st(1)
c0027984:	db f1                	fcomi  st,st(1)
c0027986:	dd d9                	fstp   st(1)
c0027988:	0f 82 94 04 00 00    	jb     c0027e22 <__kernel_rem_pio2+0x932>
c002798e:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0027992:	83 c3 18             	add    ebx,0x18
c0027995:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0027999:	d9 c0                	fld    st(0)
c002799b:	d8 0d 3c f6 02 c0    	fmul   DWORD PTR ds:0xc002f63c
c00279a1:	8d 7e 01             	lea    edi,[esi+0x1]
c00279a4:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c00279a9:	66 0d 00 0c          	or     ax,0xc00
c00279ad:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c00279b2:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00279b6:	db 5c 24 40          	fistp  DWORD PTR [esp+0x40]
c00279ba:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00279be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00279c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00279c6:	db 44 24 1c          	fild   DWORD PTR [esp+0x1c]
c00279ca:	d8 0d 14 eb 02 c0    	fmul   DWORD PTR ds:0xc002eb14
c00279d0:	de e9                	fsubp  st(1),st
c00279d2:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00279d6:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c00279da:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00279de:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c00279e2:	89 d8                	mov    eax,ebx
c00279e4:	e9 be 00 00 00       	jmp    c0027aa7 <__kernel_rem_pio2+0x5b7>
c00279e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00279f0:	b8 01 00 00 00       	mov    eax,0x1
c00279f5:	31 c9                	xor    ecx,ecx
c00279f7:	bf 00 00 00 01       	mov    edi,0x1000000
c00279fc:	29 d7                	sub    edi,edx
c00279fe:	39 c6                	cmp    esi,eax
c0027a00:	89 7c 8c 50          	mov    DWORD PTR [esp+ecx*4+0x50],edi
c0027a04:	7e 30                	jle    c0027a36 <__kernel_rem_pio2+0x546>
c0027a06:	8b 4c 84 50          	mov    ecx,DWORD PTR [esp+eax*4+0x50]
c0027a0a:	ba ff ff ff 00       	mov    edx,0xffffff
c0027a0f:	29 ca                	sub    edx,ecx
c0027a11:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0027a15:	40                   	inc    eax
c0027a16:	39 c6                	cmp    esi,eax
c0027a18:	7e 1c                	jle    c0027a36 <__kernel_rem_pio2+0x546>
c0027a1a:	8d 44 84 50          	lea    eax,[esp+eax*4+0x50]
c0027a1e:	b9 ff ff ff 00       	mov    ecx,0xffffff
c0027a23:	8d 7c b4 50          	lea    edi,[esp+esi*4+0x50]
c0027a27:	89 ca                	mov    edx,ecx
c0027a29:	83 c0 04             	add    eax,0x4
c0027a2c:	2b 50 fc             	sub    edx,DWORD PTR [eax-0x4]
c0027a2f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0027a32:	39 c7                	cmp    edi,eax
c0027a34:	75 f1                	jne    c0027a27 <__kernel_rem_pio2+0x537>
c0027a36:	ba 01 00 00 00       	mov    edx,0x1
c0027a3b:	e9 bd fe ff ff       	jmp    c00278fd <__kernel_rem_pio2+0x40d>
c0027a40:	d9 05 fc e7 02 c0    	fld    DWORD PTR ds:0xc002e7fc
c0027a46:	d9 c9                	fxch   st(1)
c0027a48:	db f1                	fcomi  st,st(1)
c0027a4a:	dd d9                	fstp   st(1)
c0027a4c:	0f 83 2a 03 00 00    	jae    c0027d7c <__kernel_rem_pio2+0x88c>
c0027a52:	31 ed                	xor    ebp,ebp
c0027a54:	e9 5f fd ff ff       	jmp    c00277b8 <__kernel_rem_pio2+0x2c8>
c0027a59:	8d 4e 01             	lea    ecx,[esi+0x1]
c0027a5c:	89 cf                	mov    edi,ecx
c0027a5e:	e9 cd fd ff ff       	jmp    c0027830 <__kernel_rem_pio2+0x340>
c0027a63:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c0027a6a:	31 c0                	xor    eax,eax
c0027a6c:	e9 2e fb ff ff       	jmp    c002759f <__kernel_rem_pio2+0xaf>
c0027a71:	d9 ee                	fldz   
c0027a73:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c0027a76:	83 c3 08             	add    ebx,0x8
c0027a79:	39 dd                	cmp    ebp,ebx
c0027a7b:	0f 85 7f fb ff ff    	jne    c0027600 <__kernel_rem_pio2+0x110>
c0027a81:	e9 bd fb ff ff       	jmp    c0027643 <__kernel_rem_pio2+0x153>
c0027a86:	8b 5c bc 50          	mov    ebx,DWORD PTR [esp+edi*4+0x50]
c0027a8a:	83 6c 24 24 18       	sub    DWORD PTR [esp+0x24],0x18
c0027a8f:	85 db                	test   ebx,ebx
c0027a91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027a95:	75 10                	jne    c0027aa7 <__kernel_rem_pio2+0x5b7>
c0027a97:	4f                   	dec    edi
c0027a98:	83 e8 18             	sub    eax,0x18
c0027a9b:	8b 4c bc 50          	mov    ecx,DWORD PTR [esp+edi*4+0x50]
c0027a9f:	85 c9                	test   ecx,ecx
c0027aa1:	74 f4                	je     c0027a97 <__kernel_rem_pio2+0x5a7>
c0027aa3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0027aa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027aab:	d9 e8                	fld1   
c0027aad:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027ab0:	e8 57 f4 ff ff       	call   c0026f0c <ldexp>
c0027ab5:	85 ff                	test   edi,edi
c0027ab7:	0f 88 d2 03 00 00    	js     c0027e8f <__kernel_rem_pio2+0x99f>
c0027abd:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0027ac4:	89 f8                	mov    eax,edi
c0027ac6:	8d 76 00             	lea    esi,[esi+0x0]
c0027ac9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0027ad0:	db 44 84 50          	fild   DWORD PTR [esp+eax*4+0x50]
c0027ad4:	d8 c9                	fmul   st,st(1)
c0027ad6:	dd 1c c6             	fstp   QWORD PTR [esi+eax*8]
c0027ad9:	48                   	dec    eax
c0027ada:	d8 0d 3c f6 02 c0    	fmul   DWORD PTR ds:0xc002f63c
c0027ae0:	83 f8 ff             	cmp    eax,0xffffffff
c0027ae3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027ae7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027aeb:	75 e3                	jne    c0027ad0 <__kernel_rem_pio2+0x5e0>
c0027aed:	dd d8                	fstp   st(0)
c0027aef:	8d 04 fd 00 00 00 00 	lea    eax,[edi*8+0x0]
c0027af6:	31 d2                	xor    edx,edx
c0027af8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0027afc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0027b00:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c0027b07:	01 f0                	add    eax,esi
c0027b09:	89 6c 24 20          	mov    DWORD PTR [esp+0x20],ebp
c0027b0d:	eb 03                	jmp    c0027b12 <__kernel_rem_pio2+0x622>
c0027b0f:	90                   	nop
c0027b10:	89 e8                	mov    eax,ebp
c0027b12:	85 db                	test   ebx,ebx
c0027b14:	0f 88 84 02 00 00    	js     c0027d9e <__kernel_rem_pio2+0x8ae>
c0027b1a:	d9 05 5c f6 02 c0    	fld    DWORD PTR ds:0xc002f65c
c0027b20:	dc 08                	fmul   QWORD PTR [eax]
c0027b22:	d8 05 38 f6 02 c0    	fadd   DWORD PTR ds:0xc002f638
c0027b28:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027b2c:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027b30:	0f 84 d9 00 00 00    	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027b36:	85 d2                	test   edx,edx
c0027b38:	0f 84 d1 00 00 00    	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027b3e:	d9 05 48 f6 02 c0    	fld    DWORD PTR ds:0xc002f648
c0027b44:	83 fb 01             	cmp    ebx,0x1
c0027b47:	dc 48 08             	fmul   QWORD PTR [eax+0x8]
c0027b4a:	de c1                	faddp  st(1),st
c0027b4c:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027b50:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027b54:	0f 84 b5 00 00 00    	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027b5a:	83 fa 01             	cmp    edx,0x1
c0027b5d:	0f 84 ac 00 00 00    	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027b63:	d9 05 4c f6 02 c0    	fld    DWORD PTR ds:0xc002f64c
c0027b69:	83 fb 02             	cmp    ebx,0x2
c0027b6c:	dc 48 10             	fmul   QWORD PTR [eax+0x10]
c0027b6f:	de c1                	faddp  st(1),st
c0027b71:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027b75:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027b79:	0f 84 90 00 00 00    	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027b7f:	83 fa 02             	cmp    edx,0x2
c0027b82:	0f 84 87 00 00 00    	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027b88:	d9 05 50 f6 02 c0    	fld    DWORD PTR ds:0xc002f650
c0027b8e:	83 fb 03             	cmp    ebx,0x3
c0027b91:	dc 48 18             	fmul   QWORD PTR [eax+0x18]
c0027b94:	de c1                	faddp  st(1),st
c0027b96:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027b9a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027b9e:	74 6f                	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027ba0:	83 fa 03             	cmp    edx,0x3
c0027ba3:	74 6a                	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027ba5:	d9 05 54 f6 02 c0    	fld    DWORD PTR ds:0xc002f654
c0027bab:	83 fb 04             	cmp    ebx,0x4
c0027bae:	dc 48 20             	fmul   QWORD PTR [eax+0x20]
c0027bb1:	de c1                	faddp  st(1),st
c0027bb3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027bb7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027bbb:	74 52                	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027bbd:	83 fa 04             	cmp    edx,0x4
c0027bc0:	74 4d                	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027bc2:	d9 05 58 f6 02 c0    	fld    DWORD PTR ds:0xc002f658
c0027bc8:	83 fb 05             	cmp    ebx,0x5
c0027bcb:	dc 48 28             	fmul   QWORD PTR [eax+0x28]
c0027bce:	de c1                	faddp  st(1),st
c0027bd0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027bd4:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027bd8:	74 35                	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027bda:	83 fa 05             	cmp    edx,0x5
c0027bdd:	74 30                	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027bdf:	dd 05 60 f6 02 c0    	fld    QWORD PTR ds:0xc002f660
c0027be5:	83 fb 06             	cmp    ebx,0x6
c0027be8:	dc 48 30             	fmul   QWORD PTR [eax+0x30]
c0027beb:	de c1                	faddp  st(1),st
c0027bed:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027bf1:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027bf5:	74 18                	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027bf7:	83 fa 06             	cmp    edx,0x6
c0027bfa:	74 13                	je     c0027c0f <__kernel_rem_pio2+0x71f>
c0027bfc:	dd 05 68 f6 02 c0    	fld    QWORD PTR ds:0xc002f668
c0027c02:	dc 48 38             	fmul   QWORD PTR [eax+0x38]
c0027c05:	de c1                	faddp  st(1),st
c0027c07:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027c0b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027c0f:	dd 1c d1             	fstp   QWORD PTR [ecx+edx*8]
c0027c12:	42                   	inc    edx
c0027c13:	8d 68 f8             	lea    ebp,[eax-0x8]
c0027c16:	39 c6                	cmp    esi,eax
c0027c18:	0f 85 f2 fe ff ff    	jne    c0027b10 <__kernel_rem_pio2+0x620>
c0027c1e:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0027c26:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0027c2a:	7f 4f                	jg     c0027c7b <__kernel_rem_pio2+0x78b>
c0027c2c:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0027c33:	85 c0                	test   eax,eax
c0027c35:	0f 8f 71 01 00 00    	jg     c0027dac <__kernel_rem_pio2+0x8bc>
c0027c3b:	75 2c                	jne    c0027c69 <__kernel_rem_pio2+0x779>
c0027c3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027c41:	d9 ee                	fldz   
c0027c43:	01 c8                	add    eax,ecx
c0027c45:	eb 02                	jmp    c0027c49 <__kernel_rem_pio2+0x759>
c0027c47:	89 d0                	mov    eax,edx
c0027c49:	39 c8                	cmp    eax,ecx
c0027c4b:	dc 00                	fadd   QWORD PTR [eax]
c0027c4d:	8d 50 f8             	lea    edx,[eax-0x8]
c0027c50:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027c54:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027c58:	75 ed                	jne    c0027c47 <__kernel_rem_pio2+0x757>
c0027c5a:	85 ed                	test   ebp,ebp
c0027c5c:	74 02                	je     c0027c60 <__kernel_rem_pio2+0x770>
c0027c5e:	d9 e0                	fchs   
c0027c60:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0027c67:	dd 18                	fstp   QWORD PTR [eax]
c0027c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c6d:	81 c4 8c 02 00 00    	add    esp,0x28c
c0027c73:	5b                   	pop    ebx
c0027c74:	5e                   	pop    esi
c0027c75:	83 e0 07             	and    eax,0x7
c0027c78:	5f                   	pop    edi
c0027c79:	5d                   	pop    ebp
c0027c7a:	c3                   	ret    
c0027c7b:	83 bc 24 b0 02 00 00 03 	cmp    DWORD PTR [esp+0x2b0],0x3
c0027c83:	75 e4                	jne    c0027c69 <__kernel_rem_pio2+0x779>
c0027c85:	85 ff                	test   edi,edi
c0027c87:	0f 8e 38 02 00 00    	jle    c0027ec5 <__kernel_rem_pio2+0x9d5>
c0027c8d:	8d 14 fd 00 00 00 00 	lea    edx,[edi*8+0x0]
c0027c94:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c0027c9b:	dd 84 14 40 01 00 00 	fld    QWORD PTR [esp+edx*1+0x140]
c0027ca2:	8d 44 11 f8          	lea    eax,[ecx+edx*1-0x8]
c0027ca6:	eb 02                	jmp    c0027caa <__kernel_rem_pio2+0x7ba>
c0027ca8:	89 d0                	mov    eax,edx
c0027caa:	dd 00                	fld    QWORD PTR [eax]
c0027cac:	8d 50 f8             	lea    edx,[eax-0x8]
c0027caf:	39 c1                	cmp    ecx,eax
c0027cb1:	d9 c1                	fld    st(1)
c0027cb3:	d9 c1                	fld    st(1)
c0027cb5:	de c3                	faddp  st(3),st
c0027cb7:	d9 ca                	fxch   st(2)
c0027cb9:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027cbd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027cc1:	d9 c0                	fld    st(0)
c0027cc3:	dc ea                	fsub   st(2),st
c0027cc5:	d9 ca                	fxch   st(2)
c0027cc7:	de c3                	faddp  st(3),st
c0027cc9:	d9 ca                	fxch   st(2)
c0027ccb:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0027cce:	d9 c9                	fxch   st(1)
c0027cd0:	dd 18                	fstp   QWORD PTR [eax]
c0027cd2:	75 d4                	jne    c0027ca8 <__kernel_rem_pio2+0x7b8>
c0027cd4:	dd d8                	fstp   st(0)
c0027cd6:	83 ff 01             	cmp    edi,0x1
c0027cd9:	0f 8e e6 01 00 00    	jle    c0027ec5 <__kernel_rem_pio2+0x9d5>
c0027cdf:	c1 e7 03             	shl    edi,0x3
c0027ce2:	8d 44 39 f8          	lea    eax,[ecx+edi*1-0x8]
c0027ce6:	dd 84 3c 40 01 00 00 	fld    QWORD PTR [esp+edi*1+0x140]
c0027ced:	eb 02                	jmp    c0027cf1 <__kernel_rem_pio2+0x801>
c0027cef:	89 d0                	mov    eax,edx
c0027cf1:	dd 00                	fld    QWORD PTR [eax]
c0027cf3:	8d 50 f8             	lea    edx,[eax-0x8]
c0027cf6:	d9 c1                	fld    st(1)
c0027cf8:	39 d1                	cmp    ecx,edx
c0027cfa:	d9 c1                	fld    st(1)
c0027cfc:	de c3                	faddp  st(3),st
c0027cfe:	d9 ca                	fxch   st(2)
c0027d00:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027d04:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027d08:	d9 c0                	fld    st(0)
c0027d0a:	dc ea                	fsub   st(2),st
c0027d0c:	d9 ca                	fxch   st(2)
c0027d0e:	de c3                	faddp  st(3),st
c0027d10:	d9 ca                	fxch   st(2)
c0027d12:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0027d15:	d9 c9                	fxch   st(1)
c0027d17:	dd 18                	fstp   QWORD PTR [eax]
c0027d19:	75 d4                	jne    c0027cef <__kernel_rem_pio2+0x7ff>
c0027d1b:	dd d8                	fstp   st(0)
c0027d1d:	d9 ee                	fldz   
c0027d1f:	01 f9                	add    ecx,edi
c0027d21:	83 e9 08             	sub    ecx,0x8
c0027d24:	dc 41 08             	fadd   QWORD PTR [ecx+0x8]
c0027d27:	39 c8                	cmp    eax,ecx
c0027d29:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027d2d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027d31:	75 ee                	jne    c0027d21 <__kernel_rem_pio2+0x831>
c0027d33:	dd 84 24 40 01 00 00 	fld    QWORD PTR [esp+0x140]
c0027d3a:	85 ed                	test   ebp,ebp
c0027d3c:	dd 84 24 48 01 00 00 	fld    QWORD PTR [esp+0x148]
c0027d43:	0f 85 02 01 00 00    	jne    c0027e4b <__kernel_rem_pio2+0x95b>
c0027d49:	d9 c9                	fxch   st(1)
c0027d4b:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0027d52:	dd 18                	fstp   QWORD PTR [eax]
c0027d54:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0027d57:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0027d5a:	e9 0a ff ff ff       	jmp    c0027c69 <__kernel_rem_pio2+0x779>
c0027d5f:	81 64 b4 4c ff ff 7f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x7fffff
c0027d67:	e9 af fb ff ff       	jmp    c002791b <__kernel_rem_pio2+0x42b>
c0027d6c:	31 d2                	xor    edx,edx
c0027d6e:	b8 e8 ff ff ff       	mov    eax,0xffffffe8
c0027d73:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0027d77:	e9 d3 f7 ff ff       	jmp    c002754f <__kernel_rem_pio2+0x5f>
c0027d7c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0027d80:	85 f6                	test   esi,esi
c0027d82:	bd 02 00 00 00       	mov    ebp,0x2
c0027d87:	0f 8f 45 fb ff ff    	jg     c00278d2 <__kernel_rem_pio2+0x3e2>
c0027d8d:	d9 e8                	fld1   
c0027d8f:	de e1                	fsubrp st(1),st
c0027d91:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027d95:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027d99:	e9 1a fa ff ff       	jmp    c00277b8 <__kernel_rem_pio2+0x2c8>
c0027d9e:	d9 ee                	fldz   
c0027da0:	e9 6a fe ff ff       	jmp    c0027c0f <__kernel_rem_pio2+0x71f>
c0027da5:	31 d2                	xor    edx,edx
c0027da7:	e9 51 fb ff ff       	jmp    c00278fd <__kernel_rem_pio2+0x40d>
c0027dac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027db0:	d9 ee                	fldz   
c0027db2:	01 c8                	add    eax,ecx
c0027db4:	eb 02                	jmp    c0027db8 <__kernel_rem_pio2+0x8c8>
c0027db6:	89 d0                	mov    eax,edx
c0027db8:	39 c8                	cmp    eax,ecx
c0027dba:	dc 00                	fadd   QWORD PTR [eax]
c0027dbc:	8d 50 f8             	lea    edx,[eax-0x8]
c0027dbf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027dc3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027dc7:	75 ed                	jne    c0027db6 <__kernel_rem_pio2+0x8c6>
c0027dc9:	d9 c0                	fld    st(0)
c0027dcb:	85 ed                	test   ebp,ebp
c0027dcd:	0f 85 94 00 00 00    	jne    c0027e67 <__kernel_rem_pio2+0x977>
c0027dd3:	d9 c9                	fxch   st(1)
c0027dd5:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0027ddc:	85 ff                	test   edi,edi
c0027dde:	dd 18                	fstp   QWORD PTR [eax]
c0027de0:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c0027de7:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027deb:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027def:	7e 22                	jle    c0027e13 <__kernel_rem_pio2+0x923>
c0027df1:	8d 84 24 48 01 00 00 	lea    eax,[esp+0x148]
c0027df8:	8d 14 f8             	lea    edx,[eax+edi*8]
c0027dfb:	83 c0 08             	add    eax,0x8
c0027dfe:	dc 40 f8             	fadd   QWORD PTR [eax-0x8]
c0027e01:	39 d0                	cmp    eax,edx
c0027e03:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027e07:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027e0b:	75 ee                	jne    c0027dfb <__kernel_rem_pio2+0x90b>
c0027e0d:	85 ed                	test   ebp,ebp
c0027e0f:	74 02                	je     c0027e13 <__kernel_rem_pio2+0x923>
c0027e11:	d9 e0                	fchs   
c0027e13:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0027e1a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0027e1d:	e9 47 fe ff ff       	jmp    c0027c69 <__kernel_rem_pio2+0x779>
c0027e22:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0027e26:	89 f7                	mov    edi,esi
c0027e28:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c0027e2d:	66 0d 00 0c          	or     ax,0xc00
c0027e31:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0027e36:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027e3a:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0027e3e:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c0027e42:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0027e46:	e9 5c fc ff ff       	jmp    c0027aa7 <__kernel_rem_pio2+0x5b7>
c0027e4b:	d9 c9                	fxch   st(1)
c0027e4d:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0027e54:	d9 e0                	fchs   
c0027e56:	dd 18                	fstp   QWORD PTR [eax]
c0027e58:	d9 e0                	fchs   
c0027e5a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0027e5d:	d9 e0                	fchs   
c0027e5f:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0027e62:	e9 02 fe ff ff       	jmp    c0027c69 <__kernel_rem_pio2+0x779>
c0027e67:	d9 c9                	fxch   st(1)
c0027e69:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0027e70:	d9 e0                	fchs   
c0027e72:	85 ff                	test   edi,edi
c0027e74:	dd 18                	fstp   QWORD PTR [eax]
c0027e76:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c0027e7d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0027e81:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0027e85:	0f 8f 66 ff ff ff    	jg     c0027df1 <__kernel_rem_pio2+0x901>
c0027e8b:	d9 e0                	fchs   
c0027e8d:	eb 84                	jmp    c0027e13 <__kernel_rem_pio2+0x923>
c0027e8f:	dd d8                	fstp   st(0)
c0027e91:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0027e99:	0f 8f dc fd ff ff    	jg     c0027c7b <__kernel_rem_pio2+0x78b>
c0027e9f:	8b 94 24 b0 02 00 00 	mov    edx,DWORD PTR [esp+0x2b0]
c0027ea6:	85 d2                	test   edx,edx
c0027ea8:	7f 0d                	jg     c0027eb7 <__kernel_rem_pio2+0x9c7>
c0027eaa:	0f 85 b9 fd ff ff    	jne    c0027c69 <__kernel_rem_pio2+0x779>
c0027eb0:	d9 ee                	fldz   
c0027eb2:	e9 a3 fd ff ff       	jmp    c0027c5a <__kernel_rem_pio2+0x76a>
c0027eb7:	d9 ee                	fldz   
c0027eb9:	d9 ee                	fldz   
c0027ebb:	90                   	nop
c0027ebc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0027ec0:	e9 06 ff ff ff       	jmp    c0027dcb <__kernel_rem_pio2+0x8db>
c0027ec5:	d9 ee                	fldz   
c0027ec7:	e9 67 fe ff ff       	jmp    c0027d33 <__kernel_rem_pio2+0x843>
c0027ecc:	66 90                	xchg   ax,ax
c0027ece:	66 90                	xchg   ax,ax

c0027ed0 <__kernel_sin>:
c0027ed0:	83 ec 0c             	sub    esp,0xc
c0027ed3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0027ed7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0027edb:	d9 c0                	fld    st(0)
c0027edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027ee1:	d8 c9                	fmul   st,st(1)
c0027ee3:	85 c0                	test   eax,eax
c0027ee5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027ee8:	dd 04 24             	fld    QWORD PTR [esp]
c0027eeb:	d9 c1                	fld    st(1)
c0027eed:	d8 c9                	fmul   st,st(1)
c0027eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027ef2:	dd 04 24             	fld    QWORD PTR [esp]
c0027ef5:	d9 c1                	fld    st(1)
c0027ef7:	d8 ca                	fmul   st,st(2)
c0027ef9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027efc:	dd 04 24             	fld    QWORD PTR [esp]
c0027eff:	d8 ca                	fmul   st,st(2)
c0027f01:	d9 c2                	fld    st(2)
c0027f03:	dc 0d 70 f6 02 c0    	fmul   QWORD PTR ds:0xc002f670
c0027f09:	dc 25 78 f6 02 c0    	fsub   QWORD PTR ds:0xc002f678
c0027f0f:	de c9                	fmulp  st(1),st
c0027f11:	d9 c2                	fld    st(2)
c0027f13:	dc 0d 80 f6 02 c0    	fmul   QWORD PTR ds:0xc002f680
c0027f19:	dc 25 88 f6 02 c0    	fsub   QWORD PTR ds:0xc002f688
c0027f1f:	d8 cb                	fmul   st,st(3)
c0027f21:	dc 05 90 f6 02 c0    	fadd   QWORD PTR ds:0xc002f690
c0027f27:	de c1                	faddp  st(1),st
c0027f29:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027f2c:	dd 04 24             	fld    QWORD PTR [esp]
c0027f2f:	75 2f                	jne    c0027f60 <__kernel_sin+0x90>
c0027f31:	dd dc                	fstp   st(4)
c0027f33:	d9 c9                	fxch   st(1)
c0027f35:	d9 ca                	fxch   st(2)
c0027f37:	d9 cb                	fxch   st(3)
c0027f39:	de ca                	fmulp  st(2),st
c0027f3b:	d9 c9                	fxch   st(1)
c0027f3d:	dc 25 98 f6 02 c0    	fsub   QWORD PTR ds:0xc002f698
c0027f43:	de c9                	fmulp  st(1),st
c0027f45:	de c1                	faddp  st(1),st
c0027f47:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027f4a:	dd 04 24             	fld    QWORD PTR [esp]
c0027f4d:	83 c4 0c             	add    esp,0xc
c0027f50:	c3                   	ret    
c0027f51:	eb 0d                	jmp    c0027f60 <__kernel_sin+0x90>
c0027f53:	90                   	nop
c0027f54:	90                   	nop
c0027f55:	90                   	nop
c0027f56:	90                   	nop
c0027f57:	90                   	nop
c0027f58:	90                   	nop
c0027f59:	90                   	nop
c0027f5a:	90                   	nop
c0027f5b:	90                   	nop
c0027f5c:	90                   	nop
c0027f5d:	90                   	nop
c0027f5e:	90                   	nop
c0027f5f:	90                   	nop
c0027f60:	d9 c4                	fld    st(4)
c0027f62:	d8 0d fc e7 02 c0    	fmul   DWORD PTR ds:0xc002e7fc
c0027f68:	d9 c9                	fxch   st(1)
c0027f6a:	d8 ca                	fmul   st,st(2)
c0027f6c:	de e9                	fsubp  st(1),st
c0027f6e:	de ca                	fmulp  st(2),st
c0027f70:	d9 c9                	fxch   st(1)
c0027f72:	de e3                	fsubrp st(3),st
c0027f74:	dc 0d 98 f6 02 c0    	fmul   QWORD PTR ds:0xc002f698
c0027f7a:	de c2                	faddp  st(2),st
c0027f7c:	de e1                	fsubrp st(1),st
c0027f7e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0027f81:	dd 04 24             	fld    QWORD PTR [esp]
c0027f84:	83 c4 0c             	add    esp,0xc
c0027f87:	c3                   	ret    

Disassembly of section .init:

c0027f88 <_init>:
c0027f88:	55                   	push   ebp
c0027f89:	89 e5                	mov    ebp,esp
c0027f8b:	e8 64 81 fd ff       	call   c00000f4 <frame_dummy>
c0027f90:	e8 0b c2 ff ff       	call   c00241a0 <__do_global_ctors_aux>
c0027f95:	5d                   	pop    ebp
c0027f96:	c3                   	ret    

Disassembly of section .fini:

c0027f97 <_fini>:
c0027f97:	55                   	push   ebp
c0027f98:	89 e5                	mov    ebp,esp
c0027f9a:	e8 e5 80 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0027f9f:	5d                   	pop    ebp
c0027fa0:	c3                   	ret    

Disassembly of section .text._ZN12RootHardware10_getDriverEv:

c0027fa4 <RootHardware::_getDriver()>:
c0027fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027fa8:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0027fae:	c3                   	ret    

Disassembly of section .text._ZN12RootHardware7getTypeEv:

c0027fb0 <RootHardware::getType()>:
c0027fb0:	b8 04 00 00 00       	mov    eax,0x4
c0027fb5:	c3                   	ret    

Disassembly of section .text._ZN6DriverC2Ev:

c0027fb8 <Driver::Driver()>:
c0027fb8:	ba bc a7 02 c0       	mov    edx,0xc002a7bc
c0027fbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027fc1:	89 10                	mov    DWORD PTR [eax],edx
c0027fc3:	90                   	nop
c0027fc4:	c3                   	ret    

Disassembly of section .text._ZN10RootDriverC2Ev:

c0027fc8 <RootDriver::RootDriver()>:
c0027fc8:	83 ec 0c             	sub    esp,0xc
c0027fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fcf:	83 ec 0c             	sub    esp,0xc
c0027fd2:	50                   	push   eax
c0027fd3:	e8 e0 ff ff ff       	call   c0027fb8 <Driver::Driver()>
c0027fd8:	83 c4 10             	add    esp,0x10
c0027fdb:	ba 54 a8 02 c0       	mov    edx,0xc002a854
c0027fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fe4:	89 10                	mov    DWORD PTR [eax],edx
c0027fe6:	90                   	nop
c0027fe7:	83 c4 0c             	add    esp,0xc
c0027fea:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorD2Ev:

c0027fec <std::vector<Hardware*>::iterator::~iterator()>:
c0027fec:	90                   	nop
c0027fed:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2ERKS3_:

c0027ff0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>:
c0027ff0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027ff4:	8b 10                	mov    edx,DWORD PTR [eax]
c0027ff6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ffa:	89 10                	mov    DWORD PTR [eax],edx
c0027ffc:	90                   	nop
c0027ffd:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratorneERKS3_:

c0028000 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>:
c0028000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028004:	8b 10                	mov    edx,DWORD PTR [eax]
c0028006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002800a:	8b 00                	mov    eax,DWORD PTR [eax]
c002800c:	39 c2                	cmp    edx,eax
c002800e:	0f 95 c0             	setne  al
c0028011:	c3                   	ret    

Disassembly of section .text._ZNKSt6vectorIP8HardwareE8iteratordeEv:

c0028014 <std::vector<Hardware*>::iterator::operator*() const>:
c0028014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028018:	8b 00                	mov    eax,DWORD PTR [eax]
c002801a:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeED2Ev:

c002801c <std::vector<DeviceMemoryRange>::~vector()>:
c002801c:	83 ec 0c             	sub    esp,0xc
c002801f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028023:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028026:	85 c0                	test   eax,eax
c0028028:	74 1e                	je     c0028048 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c002802a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002802e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028031:	85 c0                	test   eax,eax
c0028033:	74 13                	je     c0028048 <std::vector<DeviceMemoryRange>::~vector()+0x2c>
c0028035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028039:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002803c:	83 ec 0c             	sub    esp,0xc
c002803f:	50                   	push   eax
c0028040:	e8 c4 5d fe ff       	call   c000de09 <operator delete[](void*)>
c0028045:	83 c4 10             	add    esp,0x10
c0028048:	90                   	nop
c0028049:	83 c4 0c             	add    esp,0xc
c002804c:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeED2Ev:

c0028050 <std::vector<DevicePortRange>::~vector()>:
c0028050:	83 ec 0c             	sub    esp,0xc
c0028053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028057:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002805a:	85 c0                	test   eax,eax
c002805c:	74 1e                	je     c002807c <std::vector<DevicePortRange>::~vector()+0x2c>
c002805e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028062:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028065:	85 c0                	test   eax,eax
c0028067:	74 13                	je     c002807c <std::vector<DevicePortRange>::~vector()+0x2c>
c0028069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002806d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028070:	83 ec 0c             	sub    esp,0xc
c0028073:	50                   	push   eax
c0028074:	e8 90 5d fe ff       	call   c000de09 <operator delete[](void*)>
c0028079:	83 c4 10             	add    esp,0x10
c002807c:	90                   	nop
c002807d:	83 c4 0c             	add    esp,0xc
c0028080:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareED2Ev:

c0028084 <std::vector<Hardware*>::~vector()>:
c0028084:	83 ec 0c             	sub    esp,0xc
c0028087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002808b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002808e:	85 c0                	test   eax,eax
c0028090:	74 1e                	je     c00280b0 <std::vector<Hardware*>::~vector()+0x2c>
c0028092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028096:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028099:	85 c0                	test   eax,eax
c002809b:	74 13                	je     c00280b0 <std::vector<Hardware*>::~vector()+0x2c>
c002809d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00280a4:	83 ec 0c             	sub    esp,0xc
c00280a7:	50                   	push   eax
c00280a8:	e8 5c 5d fe ff       	call   c000de09 <operator delete[](void*)>
c00280ad:	83 c4 10             	add    esp,0x10
c00280b0:	90                   	nop
c00280b1:	83 c4 0c             	add    esp,0xc
c00280b4:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareD2Ev:

c00280b8 <RootHardware::~RootHardware()>:
c00280b8:	83 ec 0c             	sub    esp,0xc
c00280bb:	ba d8 a7 02 c0       	mov    edx,0xc002a7d8
c00280c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280c4:	89 10                	mov    DWORD PTR [eax],edx
c00280c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280ca:	83 ec 0c             	sub    esp,0xc
c00280cd:	50                   	push   eax
c00280ce:	e8 9d f3 fd ff       	call   c0007470 <Hardware::~Hardware()>
c00280d3:	83 c4 10             	add    esp,0x10
c00280d6:	90                   	nop
c00280d7:	83 c4 0c             	add    esp,0xc
c00280da:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareD0Ev:

c00280dc <RootHardware::~RootHardware()>:
c00280dc:	83 ec 0c             	sub    esp,0xc
c00280df:	83 ec 0c             	sub    esp,0xc
c00280e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280e6:	e8 cd ff ff ff       	call   c00280b8 <RootHardware::~RootHardware()>
c00280eb:	83 c4 10             	add    esp,0x10
c00280ee:	83 ec 08             	sub    esp,0x8
c00280f1:	68 8c 00 00 00       	push   0x8c
c00280f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280fa:	e8 05 5d fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c00280ff:	83 c4 10             	add    esp,0x10
c0028102:	83 c4 0c             	add    esp,0xc
c0028105:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeEC2Ev:

c0028108 <std::vector<DeviceMemoryRange>::vector()>:
c0028108:	83 ec 1c             	sub    esp,0x1c
c002810b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002810f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0028116:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c002811e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028122:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c0028127:	77 07                	ja     c0028130 <std::vector<DeviceMemoryRange>::vector()+0x28>
c0028129:	c1 e0 03             	shl    eax,0x3
c002812c:	eb 0a                	jmp    c0028138 <std::vector<DeviceMemoryRange>::vector()+0x30>
c002812e:	66 90                	xchg   ax,ax
c0028130:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028135:	8d 76 00             	lea    esi,[esi+0x0]
c0028138:	83 ec 0c             	sub    esp,0xc
c002813b:	50                   	push   eax
c002813c:	e8 be 5c fe ff       	call   c000ddff <operator new[](unsigned long)>
c0028141:	83 c4 10             	add    esp,0x10
c0028144:	89 c2                	mov    edx,eax
c0028146:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002814a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002814d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028151:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028154:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028158:	89 10                	mov    DWORD PTR [eax],edx
c002815a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002815e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028165:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028168:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002816c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0028173:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002817b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002817e:	90                   	nop
c002817f:	83 c4 1c             	add    esp,0x1c
c0028182:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeEC2Ev:

c0028184 <std::vector<DevicePortRange>::vector()>:
c0028184:	83 ec 1c             	sub    esp,0x1c
c0028187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002818b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0028192:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c002819a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002819e:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c00281a3:	77 07                	ja     c00281ac <std::vector<DevicePortRange>::vector()+0x28>
c00281a5:	c1 e0 02             	shl    eax,0x2
c00281a8:	eb 0a                	jmp    c00281b4 <std::vector<DevicePortRange>::vector()+0x30>
c00281aa:	66 90                	xchg   ax,ax
c00281ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00281b1:	8d 76 00             	lea    esi,[esi+0x0]
c00281b4:	83 ec 0c             	sub    esp,0xc
c00281b7:	50                   	push   eax
c00281b8:	e8 42 5c fe ff       	call   c000ddff <operator new[](unsigned long)>
c00281bd:	83 c4 10             	add    esp,0x10
c00281c0:	89 c2                	mov    edx,eax
c00281c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00281c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00281c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00281cd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00281d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00281d4:	89 10                	mov    DWORD PTR [eax],edx
c00281d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00281da:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00281dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00281e1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00281e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00281e8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00281ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00281f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00281f7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00281fa:	90                   	nop
c00281fb:	83 c4 1c             	add    esp,0x1c
c00281fe:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareEC2Ev:

c0028200 <std::vector<Hardware*>::vector()>:
c0028200:	83 ec 1c             	sub    esp,0x1c
c0028203:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028207:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002820e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0028216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002821a:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c002821f:	77 07                	ja     c0028228 <std::vector<Hardware*>::vector()+0x28>
c0028221:	c1 e0 02             	shl    eax,0x2
c0028224:	eb 0a                	jmp    c0028230 <std::vector<Hardware*>::vector()+0x30>
c0028226:	66 90                	xchg   ax,ax
c0028228:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002822d:	8d 76 00             	lea    esi,[esi+0x0]
c0028230:	83 ec 0c             	sub    esp,0xc
c0028233:	50                   	push   eax
c0028234:	e8 c6 5b fe ff       	call   c000ddff <operator new[](unsigned long)>
c0028239:	83 c4 10             	add    esp,0x10
c002823c:	89 c2                	mov    edx,eax
c002823e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028242:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028245:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028249:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002824c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028250:	89 10                	mov    DWORD PTR [eax],edx
c0028252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028256:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002825d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028264:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002826b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002826f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028273:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0028276:	90                   	nop
c0028277:	83 c4 1c             	add    esp,0x1c
c002827a:	c3                   	ret    

Disassembly of section .text._ZN12RootHardwareC2Ev:

c002827c <RootHardware::RootHardware()>:
c002827c:	53                   	push   ebx
c002827d:	83 ec 18             	sub    esp,0x18
c0028280:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028284:	83 ec 0c             	sub    esp,0xc
c0028287:	50                   	push   eax
c0028288:	e8 5b f2 fd ff       	call   c00074e8 <Hardware::Hardware()>
c002828d:	83 c4 10             	add    esp,0x10
c0028290:	ba d8 a7 02 c0       	mov    edx,0xc002a7d8
c0028295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028299:	89 10                	mov    DWORD PTR [eax],edx
c002829b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00282a3:	83 ec 0c             	sub    esp,0xc
c00282a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00282aa:	e8 48 80 fe ff       	call   c00102f7 <malloc>
c00282af:	83 c4 10             	add    esp,0x10
c00282b2:	89 c3                	mov    ebx,eax
c00282b4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00282ba:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00282c1:	83 ec 0c             	sub    esp,0xc
c00282c4:	53                   	push   ebx
c00282c5:	e8 fe fc ff ff       	call   c0027fc8 <RootDriver::RootDriver()>
c00282ca:	83 c4 10             	add    esp,0x10
c00282cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00282d1:	89 98 88 00 00 00    	mov    DWORD PTR [eax+0x88],ebx
c00282d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00282db:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c00282e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00282e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00282e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00282ec:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c00282f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00282f6:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c00282fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00282fe:	83 c0 04             	add    eax,0x4
c0028301:	8b 00                	mov    eax,DWORD PTR [eax]
c0028303:	83 ec 0c             	sub    esp,0xc
c0028306:	52                   	push   edx
c0028307:	ff d0                	call   eax
c0028309:	83 c4 10             	add    esp,0x10
c002830c:	90                   	nop
c002830d:	83 c4 18             	add    esp,0x18
c0028310:	5b                   	pop    ebx
c0028311:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorC2EPS1_:

c0028314 <std::vector<Hardware*>::iterator::iterator(Hardware**)>:
c0028314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028318:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002831c:	89 10                	mov    DWORD PTR [eax],edx
c002831e:	90                   	nop
c002831f:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5beginEv:

c0028320 <std::vector<Hardware*>::begin()>:
c0028320:	83 ec 0c             	sub    esp,0xc
c0028323:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028327:	8b 00                	mov    eax,DWORD PTR [eax]
c0028329:	83 ec 08             	sub    esp,0x8
c002832c:	50                   	push   eax
c002832d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028331:	e8 de ff ff ff       	call   c0028314 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028336:	83 c4 10             	add    esp,0x10
c0028339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002833d:	83 c4 0c             	add    esp,0xc
c0028340:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE3endEv:

c0028344 <std::vector<Hardware*>::end()>:
c0028344:	83 ec 0c             	sub    esp,0xc
c0028347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002834b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002834e:	83 ec 08             	sub    esp,0x8
c0028351:	50                   	push   eax
c0028352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028356:	e8 b9 ff ff ff       	call   c0028314 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002835b:	83 c4 10             	add    esp,0x10
c002835e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028362:	83 c4 0c             	add    esp,0xc
c0028365:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEv:

c0028368 <std::vector<Hardware*>::iterator::operator++()>:
c0028368:	83 ec 0c             	sub    esp,0xc
c002836b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002836f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028371:	8d 50 04             	lea    edx,[eax+0x4]
c0028374:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028378:	89 10                	mov    DWORD PTR [eax],edx
c002837a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002837e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028380:	83 ec 08             	sub    esp,0x8
c0028383:	50                   	push   eax
c0028384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028388:	e8 87 ff ff ff       	call   c0028314 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002838d:	83 c4 10             	add    esp,0x10
c0028390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028394:	83 c4 0c             	add    esp,0xc
c0028397:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4findINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c002839c <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c002839c:	83 ec 1c             	sub    esp,0x1c
c002839f:	90                   	nop
c00283a0:	83 ec 08             	sub    esp,0x8
c00283a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00283a7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00283ab:	e8 50 fc ff ff       	call   c0028000 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c00283b0:	83 c4 10             	add    esp,0x10
c00283b3:	0f b6 c0             	movzx  eax,al
c00283b6:	85 c0                	test   eax,eax
c00283b8:	74 62                	je     c002841c <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x80>
c00283ba:	83 ec 0c             	sub    esp,0xc
c00283bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00283c1:	e8 4e fc ff ff       	call   c0028014 <std::vector<Hardware*>::iterator::operator*() const>
c00283c6:	83 c4 10             	add    esp,0x10
c00283c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00283cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00283cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00283d1:	39 c2                	cmp    edx,eax
c00283d3:	0f 94 c0             	sete   al
c00283d6:	0f b6 c0             	movzx  eax,al
c00283d9:	85 c0                	test   eax,eax
c00283db:	74 17                	je     c00283f4 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x58>
c00283dd:	83 ec 08             	sub    esp,0x8
c00283e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00283e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00283e8:	e8 03 fc ff ff       	call   c0027ff0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c00283ed:	83 c4 10             	add    esp,0x10
c00283f0:	eb 3e                	jmp    c0028430 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x94>
c00283f2:	66 90                	xchg   ax,ax
c00283f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00283f8:	83 ec 08             	sub    esp,0x8
c00283fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00283ff:	50                   	push   eax
c0028400:	e8 63 ff ff ff       	call   c0028368 <std::vector<Hardware*>::iterator::operator++()>
c0028405:	83 c4 0c             	add    esp,0xc
c0028408:	83 ec 0c             	sub    esp,0xc
c002840b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002840f:	50                   	push   eax
c0028410:	e8 d7 fb ff ff       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0028415:	83 c4 10             	add    esp,0x10
c0028418:	eb 86                	jmp    c00283a0 <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x4>
c002841a:	66 90                	xchg   ax,ax
c002841c:	83 ec 08             	sub    esp,0x8
c002841f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028427:	e8 c4 fb ff ff       	call   c0027ff0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c002842c:	83 c4 10             	add    esp,0x10
c002842f:	90                   	nop
c0028430:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028434:	83 c4 1c             	add    esp,0x1c
c0028437:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratoraSERKS3_:

c002843c <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>:
c002843c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028440:	8b 10                	mov    edx,DWORD PTR [eax]
c0028442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028446:	89 10                	mov    DWORD PTR [eax],edx
c0028448:	90                   	nop
c0028449:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratorppEi:

c002844c <std::vector<Hardware*>::iterator::operator++(int)>:
c002844c:	83 ec 0c             	sub    esp,0xc
c002844f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028453:	8b 00                	mov    eax,DWORD PTR [eax]
c0028455:	8d 48 04             	lea    ecx,[eax+0x4]
c0028458:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002845c:	89 0a                	mov    DWORD PTR [edx],ecx
c002845e:	83 ec 08             	sub    esp,0x8
c0028461:	50                   	push   eax
c0028462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028466:	e8 a9 fe ff ff       	call   c0028314 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002846b:	83 c4 10             	add    esp,0x10
c002846e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028472:	83 c4 0c             	add    esp,0xc
c0028475:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4moveIRP8HardwareEONSt16remove_referenceIT_E4typeEOS4_:

c0028478 <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>:
c0028478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002847c:	c3                   	ret    

Disassembly of section .text._ZSt6removeINSt6vectorIP8HardwareE8iteratorES2_ET_S5_S5_RKT0_:

c0028480 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>:
c0028480:	53                   	push   ebx
c0028481:	83 ec 28             	sub    esp,0x28
c0028484:	83 ec 08             	sub    esp,0x8
c0028487:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002848b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002848f:	50                   	push   eax
c0028490:	e8 5b fb ff ff       	call   c0027ff0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028495:	83 c4 10             	add    esp,0x10
c0028498:	83 ec 08             	sub    esp,0x8
c002849b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002849f:	8d 44 24 20          	lea    eax,[esp+0x20]
c00284a3:	50                   	push   eax
c00284a4:	e8 47 fb ff ff       	call   c0027ff0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c00284a9:	83 c4 10             	add    esp,0x10
c00284ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00284b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00284b4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00284b8:	52                   	push   edx
c00284b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00284bd:	52                   	push   edx
c00284be:	50                   	push   eax
c00284bf:	e8 d8 fe ff ff       	call   c002839c <std::vector<Hardware*>::iterator std::find<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)>
c00284c4:	83 c4 0c             	add    esp,0xc
c00284c7:	83 ec 08             	sub    esp,0x8
c00284ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00284ce:	50                   	push   eax
c00284cf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00284d3:	e8 64 ff ff ff       	call   c002843c <std::vector<Hardware*>::iterator::operator=(std::vector<Hardware*>::iterator const&)>
c00284d8:	83 c4 10             	add    esp,0x10
c00284db:	83 ec 0c             	sub    esp,0xc
c00284de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00284e2:	50                   	push   eax
c00284e3:	e8 04 fb ff ff       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00284e8:	83 c4 10             	add    esp,0x10
c00284eb:	83 ec 0c             	sub    esp,0xc
c00284ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c00284f2:	50                   	push   eax
c00284f3:	e8 f4 fa ff ff       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00284f8:	83 c4 10             	add    esp,0x10
c00284fb:	83 ec 0c             	sub    esp,0xc
c00284fe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0028502:	50                   	push   eax
c0028503:	e8 e4 fa ff ff       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0028508:	83 c4 10             	add    esp,0x10
c002850b:	83 ec 08             	sub    esp,0x8
c002850e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028512:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028516:	e8 e5 fa ff ff       	call   c0028000 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c002851b:	83 c4 10             	add    esp,0x10
c002851e:	0f b6 c0             	movzx  eax,al
c0028521:	85 c0                	test   eax,eax
c0028523:	0f 84 ef 00 00 00    	je     c0028618 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x198>
c0028529:	83 ec 08             	sub    esp,0x8
c002852c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028530:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028534:	50                   	push   eax
c0028535:	e8 b6 fa ff ff       	call   c0027ff0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c002853a:	83 c4 10             	add    esp,0x10
c002853d:	8d 76 00             	lea    esi,[esi+0x0]
c0028540:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028544:	83 ec 08             	sub    esp,0x8
c0028547:	8d 54 24 10          	lea    edx,[esp+0x10]
c002854b:	52                   	push   edx
c002854c:	50                   	push   eax
c002854d:	e8 16 fe ff ff       	call   c0028368 <std::vector<Hardware*>::iterator::operator++()>
c0028552:	83 c4 0c             	add    esp,0xc
c0028555:	83 ec 08             	sub    esp,0x8
c0028558:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002855c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028560:	50                   	push   eax
c0028561:	e8 9a fa ff ff       	call   c0028000 <std::vector<Hardware*>::iterator::operator!=(std::vector<Hardware*>::iterator const&) const>
c0028566:	83 c4 10             	add    esp,0x10
c0028569:	88 c3                	mov    bl,al
c002856b:	83 ec 0c             	sub    esp,0xc
c002856e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028572:	50                   	push   eax
c0028573:	e8 74 fa ff ff       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0028578:	83 c4 10             	add    esp,0x10
c002857b:	0f b6 c3             	movzx  eax,bl
c002857e:	85 c0                	test   eax,eax
c0028580:	0f 84 82 00 00 00    	je     c0028608 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0x188>
c0028586:	83 ec 0c             	sub    esp,0xc
c0028589:	8d 44 24 14          	lea    eax,[esp+0x14]
c002858d:	50                   	push   eax
c002858e:	e8 81 fa ff ff       	call   c0028014 <std::vector<Hardware*>::iterator::operator*() const>
c0028593:	83 c4 10             	add    esp,0x10
c0028596:	8b 10                	mov    edx,DWORD PTR [eax]
c0028598:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002859c:	8b 00                	mov    eax,DWORD PTR [eax]
c002859e:	39 c2                	cmp    edx,eax
c00285a0:	0f 95 c0             	setne  al
c00285a3:	0f b6 c0             	movzx  eax,al
c00285a6:	85 c0                	test   eax,eax
c00285a8:	74 96                	je     c0028540 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xc0>
c00285aa:	83 ec 0c             	sub    esp,0xc
c00285ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c00285b1:	50                   	push   eax
c00285b2:	e8 5d fa ff ff       	call   c0028014 <std::vector<Hardware*>::iterator::operator*() const>
c00285b7:	83 c4 10             	add    esp,0x10
c00285ba:	83 ec 0c             	sub    esp,0xc
c00285bd:	50                   	push   eax
c00285be:	e8 b5 fe ff ff       	call   c0028478 <std::remove_reference<Hardware*&>::type&& std::move<Hardware*&>(Hardware*&)>
c00285c3:	83 c4 10             	add    esp,0x10
c00285c6:	89 c3                	mov    ebx,eax
c00285c8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00285cc:	83 ec 04             	sub    esp,0x4
c00285cf:	6a 00                	push   0x0
c00285d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00285d5:	50                   	push   eax
c00285d6:	e8 71 fe ff ff       	call   c002844c <std::vector<Hardware*>::iterator::operator++(int)>
c00285db:	83 c4 0c             	add    esp,0xc
c00285de:	83 ec 0c             	sub    esp,0xc
c00285e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00285e5:	50                   	push   eax
c00285e6:	e8 29 fa ff ff       	call   c0028014 <std::vector<Hardware*>::iterator::operator*() const>
c00285eb:	83 c4 10             	add    esp,0x10
c00285ee:	8b 13                	mov    edx,DWORD PTR [ebx]
c00285f0:	89 10                	mov    DWORD PTR [eax],edx
c00285f2:	83 ec 0c             	sub    esp,0xc
c00285f5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00285f9:	50                   	push   eax
c00285fa:	e8 ed f9 ff ff       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c00285ff:	83 c4 10             	add    esp,0x10
c0028602:	e9 39 ff ff ff       	jmp    c0028540 <std::vector<Hardware*>::iterator std::remove<std::vector<Hardware*>::iterator, Hardware*>(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator, Hardware* const&)+0xc0>
c0028607:	90                   	nop
c0028608:	83 ec 0c             	sub    esp,0xc
c002860b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002860f:	50                   	push   eax
c0028610:	e8 d7 f9 ff ff       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0028615:	83 c4 10             	add    esp,0x10
c0028618:	83 ec 08             	sub    esp,0x8
c002861b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002861f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0028623:	e8 c8 f9 ff ff       	call   c0027ff0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028628:	83 c4 10             	add    esp,0x10
c002862b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002862f:	83 c4 28             	add    esp,0x28
c0028632:	5b                   	pop    ebx
c0028633:	c2 04 00             	ret    0x4

Disassembly of section .text._ZNSt6vectorIP8HardwareE8iteratormiES3_:

c0028638 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>:
c0028638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002863c:	8b 10                	mov    edx,DWORD PTR [eax]
c002863e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028642:	8b 00                	mov    eax,DWORD PTR [eax]
c0028644:	29 c2                	sub    edx,eax
c0028646:	89 d0                	mov    eax,edx
c0028648:	c1 f8 02             	sar    eax,0x2
c002864b:	c3                   	ret    

Disassembly of section .text._ZSt4copyIPP8HardwareS2_ET0_T_S4_S3_:

c002864c <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>:
c002864c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028650:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0028654:	74 1a                	je     c0028670 <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)+0x24>
c0028656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002865a:	8b 10                	mov    edx,DWORD PTR [eax]
c002865c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028660:	89 10                	mov    DWORD PTR [eax],edx
c0028662:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c0028667:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c002866c:	eb de                	jmp    c002864c <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c002866e:	66 90                	xchg   ax,ax
c0028670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028674:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE7reserveEm:

c0028678 <std::vector<Hardware*>::reserve(unsigned long)>:
c0028678:	83 ec 1c             	sub    esp,0x1c
c002867b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002867f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028682:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0028686:	0f 86 d4 00 00 00    	jbe    c0028760 <std::vector<Hardware*>::reserve(unsigned long)+0xe8>
c002868c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028690:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028693:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0028697:	76 17                	jbe    c00286b0 <std::vector<Hardware*>::reserve(unsigned long)+0x38>
c0028699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002869d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00286a0:	01 c0                	add    eax,eax
c00286a2:	89 c2                	mov    edx,eax
c00286a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00286a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00286ab:	eb df                	jmp    c002868c <std::vector<Hardware*>::reserve(unsigned long)+0x14>
c00286ad:	8d 76 00             	lea    esi,[esi+0x0]
c00286b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00286b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00286b7:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c00286bc:	77 06                	ja     c00286c4 <std::vector<Hardware*>::reserve(unsigned long)+0x4c>
c00286be:	c1 e0 02             	shl    eax,0x2
c00286c1:	eb 09                	jmp    c00286cc <std::vector<Hardware*>::reserve(unsigned long)+0x54>
c00286c3:	90                   	nop
c00286c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00286c9:	8d 76 00             	lea    esi,[esi+0x0]
c00286cc:	83 ec 0c             	sub    esp,0xc
c00286cf:	50                   	push   eax
c00286d0:	e8 2a 57 fe ff       	call   c000ddff <operator new[](unsigned long)>
c00286d5:	83 c4 10             	add    esp,0x10
c00286d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00286dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00286e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00286e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00286e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286e9:	39 c2                	cmp    edx,eax
c00286eb:	74 1f                	je     c002870c <std::vector<Hardware*>::reserve(unsigned long)+0x94>
c00286ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00286f1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00286f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00286f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286fb:	83 ec 04             	sub    esp,0x4
c00286fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0028702:	52                   	push   edx
c0028703:	50                   	push   eax
c0028704:	e8 43 ff ff ff       	call   c002864c <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c0028709:	83 c4 10             	add    esp,0x10
c002870c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028710:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028713:	85 c0                	test   eax,eax
c0028715:	74 15                	je     c002872c <std::vector<Hardware*>::reserve(unsigned long)+0xb4>
c0028717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002871b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002871e:	83 ec 0c             	sub    esp,0xc
c0028721:	50                   	push   eax
c0028722:	e8 e2 56 fe ff       	call   c000de09 <operator delete[](void*)>
c0028727:	83 c4 10             	add    esp,0x10
c002872a:	66 90                	xchg   ax,ax
c002872c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028730:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028734:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002873b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002873e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028742:	89 10                	mov    DWORD PTR [eax],edx
c0028744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028748:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002874b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002874f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028752:	c1 e0 02             	shl    eax,0x2
c0028755:	01 c2                	add    edx,eax
c0028757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002875b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002875e:	66 90                	xchg   ax,ax
c0028760:	90                   	nop
c0028761:	83 c4 1c             	add    esp,0x1c
c0028764:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE9push_backERKS1_:

c0028768 <std::vector<Hardware*>::push_back(Hardware* const&)>:
c0028768:	83 ec 0c             	sub    esp,0xc
c002876b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0028772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028779:	39 c2                	cmp    edx,eax
c002877b:	73 2f                	jae    c00287ac <std::vector<Hardware*>::push_back(Hardware* const&)+0x44>
c002877d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028781:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028784:	8d 48 04             	lea    ecx,[eax+0x4]
c0028787:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002878b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c002878e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028792:	8b 12                	mov    edx,DWORD PTR [edx]
c0028794:	89 10                	mov    DWORD PTR [eax],edx
c0028796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002879d:	8d 50 01             	lea    edx,[eax+0x1]
c00287a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00287a7:	eb 47                	jmp    c00287f0 <std::vector<Hardware*>::push_back(Hardware* const&)+0x88>
c00287a9:	8d 76 00             	lea    esi,[esi+0x0]
c00287ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00287b3:	01 c0                	add    eax,eax
c00287b5:	83 ec 08             	sub    esp,0x8
c00287b8:	50                   	push   eax
c00287b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287bd:	e8 b6 fe ff ff       	call   c0028678 <std::vector<Hardware*>::reserve(unsigned long)>
c00287c2:	83 c4 10             	add    esp,0x10
c00287c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00287cc:	8d 50 01             	lea    edx,[eax+0x1]
c00287cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00287d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287dd:	8d 48 04             	lea    ecx,[eax+0x4]
c00287e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00287e4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00287e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287eb:	8b 12                	mov    edx,DWORD PTR [edx]
c00287ed:	89 10                	mov    DWORD PTR [eax],edx
c00287ef:	90                   	nop
c00287f0:	90                   	nop
c00287f1:	83 c4 0c             	add    esp,0xc
c00287f4:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorIP8HardwareE5eraseENS2_8iteratorES3_:

c00287f8 <std::vector<Hardware*>::erase(std::vector<Hardware*>::iterator, std::vector<Hardware*>::iterator)>:
c00287f8:	53                   	push   ebx
c00287f9:	83 ec 28             	sub    esp,0x28
c00287fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028800:	8b 00                	mov    eax,DWORD PTR [eax]
c0028802:	83 ec 08             	sub    esp,0x8
c0028805:	50                   	push   eax
c0028806:	8d 44 24 14          	lea    eax,[esp+0x14]
c002880a:	50                   	push   eax
c002880b:	e8 04 fb ff ff       	call   c0028314 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028810:	83 c4 10             	add    esp,0x10
c0028813:	83 ec 08             	sub    esp,0x8
c0028816:	8d 44 24 10          	lea    eax,[esp+0x10]
c002881a:	50                   	push   eax
c002881b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002881f:	e8 14 fe ff ff       	call   c0028638 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0028824:	83 c4 10             	add    esp,0x10
c0028827:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002882b:	83 ec 0c             	sub    esp,0xc
c002882e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028832:	50                   	push   eax
c0028833:	e8 b4 f7 ff ff       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0028838:	83 c4 10             	add    esp,0x10
c002883b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002883f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028841:	83 ec 08             	sub    esp,0x8
c0028844:	50                   	push   eax
c0028845:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028849:	50                   	push   eax
c002884a:	e8 c5 fa ff ff       	call   c0028314 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c002884f:	83 c4 10             	add    esp,0x10
c0028852:	83 ec 08             	sub    esp,0x8
c0028855:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028859:	50                   	push   eax
c002885a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002885e:	e8 d5 fd ff ff       	call   c0028638 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c0028863:	83 c4 10             	add    esp,0x10
c0028866:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002886a:	83 ec 0c             	sub    esp,0xc
c002886d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028871:	50                   	push   eax
c0028872:	e8 75 f7 ff ff       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0028877:	83 c4 10             	add    esp,0x10
c002887a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002887e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028881:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028885:	c1 e2 02             	shl    edx,0x2
c0028888:	8d 0c 10             	lea    ecx,[eax+edx*1]
c002888b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002888f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028892:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028896:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028899:	c1 e0 02             	shl    eax,0x2
c002889c:	01 c2                	add    edx,eax
c002889e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00288a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00288a9:	c1 e3 02             	shl    ebx,0x2
c00288ac:	01 d8                	add    eax,ebx
c00288ae:	83 ec 04             	sub    esp,0x4
c00288b1:	51                   	push   ecx
c00288b2:	52                   	push   edx
c00288b3:	50                   	push   eax
c00288b4:	e8 93 fd ff ff       	call   c002864c <Hardware** std::copy<Hardware**, Hardware**>(Hardware**, Hardware**, Hardware**)>
c00288b9:	83 c4 10             	add    esp,0x10
c00288bc:	83 ec 08             	sub    esp,0x8
c00288bf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00288c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00288c7:	50                   	push   eax
c00288c8:	e8 23 f7 ff ff       	call   c0027ff0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c00288cd:	83 c4 10             	add    esp,0x10
c00288d0:	83 ec 08             	sub    esp,0x8
c00288d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00288d7:	50                   	push   eax
c00288d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00288dc:	e8 57 fd ff ff       	call   c0028638 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c00288e1:	83 c4 10             	add    esp,0x10
c00288e4:	89 c2                	mov    edx,eax
c00288e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00288ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00288ed:	29 d0                	sub    eax,edx
c00288ef:	89 c2                	mov    edx,eax
c00288f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00288f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00288f8:	83 ec 0c             	sub    esp,0xc
c00288fb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00288ff:	50                   	push   eax
c0028900:	e8 e7 f6 ff ff       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0028905:	83 c4 10             	add    esp,0x10
c0028908:	83 ec 08             	sub    esp,0x8
c002890b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002890f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028913:	50                   	push   eax
c0028914:	e8 d7 f6 ff ff       	call   c0027ff0 <std::vector<Hardware*>::iterator::iterator(std::vector<Hardware*>::iterator const&)>
c0028919:	83 c4 10             	add    esp,0x10
c002891c:	83 ec 08             	sub    esp,0x8
c002891f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0028923:	50                   	push   eax
c0028924:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028928:	e8 0b fd ff ff       	call   c0028638 <std::vector<Hardware*>::iterator::operator-(std::vector<Hardware*>::iterator)>
c002892d:	83 c4 10             	add    esp,0x10
c0028930:	89 c2                	mov    edx,eax
c0028932:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028936:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028939:	c1 e2 02             	shl    edx,0x2
c002893c:	f7 da                	neg    edx
c002893e:	01 c2                	add    edx,eax
c0028940:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028944:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028947:	83 ec 0c             	sub    esp,0xc
c002894a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002894e:	50                   	push   eax
c002894f:	e8 98 f6 ff ff       	call   c0027fec <std::vector<Hardware*>::iterator::~iterator()>
c0028954:	83 c4 10             	add    esp,0x10
c0028957:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002895b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002895e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028962:	c1 e2 02             	shl    edx,0x2
c0028965:	01 d0                	add    eax,edx
c0028967:	83 ec 08             	sub    esp,0x8
c002896a:	50                   	push   eax
c002896b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002896f:	e8 a0 f9 ff ff       	call   c0028314 <std::vector<Hardware*>::iterator::iterator(Hardware**)>
c0028974:	83 c4 10             	add    esp,0x10
c0028977:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002897b:	83 c4 28             	add    esp,0x28
c002897e:	5b                   	pop    ebx
c002897f:	c2 04 00             	ret    0x4

Disassembly of section .text._ZSt4copyIP17DeviceMemoryRangeS1_ET0_T_S3_S2_:

c0028984 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>:
c0028984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028988:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c002898c:	74 1e                	je     c00289ac <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)+0x28>
c002898e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0028992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028996:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0028999:	8b 00                	mov    eax,DWORD PTR [eax]
c002899b:	89 01                	mov    DWORD PTR [ecx],eax
c002899d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00289a0:	83 44 24 04 08       	add    DWORD PTR [esp+0x4],0x8
c00289a5:	83 44 24 0c 08       	add    DWORD PTR [esp+0xc],0x8
c00289aa:	eb d8                	jmp    c0028984 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c00289ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00289b0:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE7reserveEm:

c00289b4 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>:
c00289b4:	83 ec 1c             	sub    esp,0x1c
c00289b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00289be:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00289c2:	0f 86 d4 00 00 00    	jbe    c0028a9c <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xe8>
c00289c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00289cf:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00289d3:	76 17                	jbe    c00289ec <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x38>
c00289d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00289dc:	01 c0                	add    eax,eax
c00289de:	89 c2                	mov    edx,eax
c00289e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289e4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00289e7:	eb df                	jmp    c00289c8 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x14>
c00289e9:	8d 76 00             	lea    esi,[esi+0x0]
c00289ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00289f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00289f3:	3d ff ff ff 0f       	cmp    eax,0xfffffff
c00289f8:	77 06                	ja     c0028a00 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x4c>
c00289fa:	c1 e0 03             	shl    eax,0x3
c00289fd:	eb 09                	jmp    c0028a08 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x54>
c00289ff:	90                   	nop
c0028a00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028a05:	8d 76 00             	lea    esi,[esi+0x0]
c0028a08:	83 ec 0c             	sub    esp,0xc
c0028a0b:	50                   	push   eax
c0028a0c:	e8 ee 53 fe ff       	call   c000ddff <operator new[](unsigned long)>
c0028a11:	83 c4 10             	add    esp,0x10
c0028a14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a1c:	8b 10                	mov    edx,DWORD PTR [eax]
c0028a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a25:	39 c2                	cmp    edx,eax
c0028a27:	74 1f                	je     c0028a48 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0x94>
c0028a29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a2d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0028a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a37:	83 ec 04             	sub    esp,0x4
c0028a3a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0028a3e:	52                   	push   edx
c0028a3f:	50                   	push   eax
c0028a40:	e8 3f ff ff ff       	call   c0028984 <DeviceMemoryRange* std::copy<DeviceMemoryRange*, DeviceMemoryRange*>(DeviceMemoryRange*, DeviceMemoryRange*, DeviceMemoryRange*)>
c0028a45:	83 c4 10             	add    esp,0x10
c0028a48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a4f:	85 c0                	test   eax,eax
c0028a51:	74 15                	je     c0028a68 <std::vector<DeviceMemoryRange>::reserve(unsigned long)+0xb4>
c0028a53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a5a:	83 ec 0c             	sub    esp,0xc
c0028a5d:	50                   	push   eax
c0028a5e:	e8 a6 53 fe ff       	call   c000de09 <operator delete[](void*)>
c0028a63:	83 c4 10             	add    esp,0x10
c0028a66:	66 90                	xchg   ax,ax
c0028a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028a70:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a77:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028a7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a7e:	89 10                	mov    DWORD PTR [eax],edx
c0028a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a84:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028a87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a8b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028a8e:	c1 e0 03             	shl    eax,0x3
c0028a91:	01 c2                	add    edx,eax
c0028a93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a9a:	66 90                	xchg   ax,ax
c0028a9c:	90                   	nop
c0028a9d:	83 c4 1c             	add    esp,0x1c
c0028aa0:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI17DeviceMemoryRangeE9push_backERKS0_:

c0028aa4 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)>:
c0028aa4:	83 ec 0c             	sub    esp,0xc
c0028aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aab:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0028aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028ab5:	39 c2                	cmp    edx,eax
c0028ab7:	73 33                	jae    c0028aec <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x48>
c0028ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abd:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0028ac0:	8d 51 08             	lea    edx,[ecx+0x8]
c0028ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028aca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028ace:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0028ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ad3:	89 01                	mov    DWORD PTR [ecx],eax
c0028ad5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028adc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028adf:	8d 50 01             	lea    edx,[eax+0x1]
c0028ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028ae9:	eb 4d                	jmp    c0028b38 <std::vector<DeviceMemoryRange>::push_back(DeviceMemoryRange const&)+0x94>
c0028aeb:	90                   	nop
c0028aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028af3:	01 c0                	add    eax,eax
c0028af5:	83 ec 08             	sub    esp,0x8
c0028af8:	50                   	push   eax
c0028af9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028afd:	e8 b2 fe ff ff       	call   c00289b4 <std::vector<DeviceMemoryRange>::reserve(unsigned long)>
c0028b02:	83 c4 10             	add    esp,0x10
c0028b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028b0c:	8d 50 01             	lea    edx,[eax+0x1]
c0028b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b13:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0028b1d:	8d 51 08             	lea    edx,[ecx+0x8]
c0028b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028b2b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0028b2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b30:	89 01                	mov    DWORD PTR [ecx],eax
c0028b32:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028b35:	8d 76 00             	lea    esi,[esi+0x0]
c0028b38:	90                   	nop
c0028b39:	83 c4 0c             	add    esp,0xc
c0028b3c:	c3                   	ret    

Disassembly of section .text._ZSt4copyIP15DevicePortRangeS1_ET0_T_S3_S2_:

c0028b40 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>:
c0028b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b44:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0028b48:	74 1a                	je     c0028b64 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)+0x24>
c0028b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028b4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0028b52:	8b 12                	mov    edx,DWORD PTR [edx]
c0028b54:	89 10                	mov    DWORD PTR [eax],edx
c0028b56:	83 44 24 04 04       	add    DWORD PTR [esp+0x4],0x4
c0028b5b:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0028b60:	eb de                	jmp    c0028b40 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c0028b62:	66 90                	xchg   ax,ax
c0028b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028b68:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE7reserveEm:

c0028b6c <std::vector<DevicePortRange>::reserve(unsigned long)>:
c0028b6c:	83 ec 1c             	sub    esp,0x1c
c0028b6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b73:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028b76:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0028b7a:	0f 86 d4 00 00 00    	jbe    c0028c54 <std::vector<DevicePortRange>::reserve(unsigned long)+0xe8>
c0028b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b84:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028b87:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0028b8b:	76 17                	jbe    c0028ba4 <std::vector<DevicePortRange>::reserve(unsigned long)+0x38>
c0028b8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b91:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028b94:	01 c0                	add    eax,eax
c0028b96:	89 c2                	mov    edx,eax
c0028b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b9c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0028b9f:	eb df                	jmp    c0028b80 <std::vector<DevicePortRange>::reserve(unsigned long)+0x14>
c0028ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028ba8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028bab:	3d ff ff ff 1f       	cmp    eax,0x1fffffff
c0028bb0:	77 06                	ja     c0028bb8 <std::vector<DevicePortRange>::reserve(unsigned long)+0x4c>
c0028bb2:	c1 e0 02             	shl    eax,0x2
c0028bb5:	eb 09                	jmp    c0028bc0 <std::vector<DevicePortRange>::reserve(unsigned long)+0x54>
c0028bb7:	90                   	nop
c0028bb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0028bc0:	83 ec 0c             	sub    esp,0xc
c0028bc3:	50                   	push   eax
c0028bc4:	e8 36 52 fe ff       	call   c000ddff <operator new[](unsigned long)>
c0028bc9:	83 c4 10             	add    esp,0x10
c0028bcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028bd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028bd4:	8b 10                	mov    edx,DWORD PTR [eax]
c0028bd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028bda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bdd:	39 c2                	cmp    edx,eax
c0028bdf:	74 1f                	je     c0028c00 <std::vector<DevicePortRange>::reserve(unsigned long)+0x94>
c0028be1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028be5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0028be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028bec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bef:	83 ec 04             	sub    esp,0x4
c0028bf2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0028bf6:	52                   	push   edx
c0028bf7:	50                   	push   eax
c0028bf8:	e8 43 ff ff ff       	call   c0028b40 <DevicePortRange* std::copy<DevicePortRange*, DevicePortRange*>(DevicePortRange*, DevicePortRange*, DevicePortRange*)>
c0028bfd:	83 c4 10             	add    esp,0x10
c0028c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c07:	85 c0                	test   eax,eax
c0028c09:	74 15                	je     c0028c20 <std::vector<DevicePortRange>::reserve(unsigned long)+0xb4>
c0028c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c12:	83 ec 0c             	sub    esp,0xc
c0028c15:	50                   	push   eax
c0028c16:	e8 ee 51 fe ff       	call   c000de09 <operator delete[](void*)>
c0028c1b:	83 c4 10             	add    esp,0x10
c0028c1e:	66 90                	xchg   ax,ax
c0028c20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028c28:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c2f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c36:	89 10                	mov    DWORD PTR [eax],edx
c0028c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c3c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028c3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028c46:	c1 e0 02             	shl    eax,0x2
c0028c49:	01 c2                	add    edx,eax
c0028c4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028c4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c52:	66 90                	xchg   ax,ax
c0028c54:	90                   	nop
c0028c55:	83 c4 1c             	add    esp,0x1c
c0028c58:	c3                   	ret    

Disassembly of section .text._ZNSt6vectorI15DevicePortRangeE9push_backERKS0_:

c0028c5c <std::vector<DevicePortRange>::push_back(DevicePortRange const&)>:
c0028c5c:	83 ec 0c             	sub    esp,0xc
c0028c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c63:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0028c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028c6d:	39 c2                	cmp    edx,eax
c0028c6f:	73 2f                	jae    c0028ca0 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x44>
c0028c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c78:	8d 48 04             	lea    ecx,[eax+0x4]
c0028c7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0028c7f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0028c82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c86:	8b 12                	mov    edx,DWORD PTR [edx]
c0028c88:	89 10                	mov    DWORD PTR [eax],edx
c0028c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028c91:	8d 50 01             	lea    edx,[eax+0x1]
c0028c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c98:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028c9b:	eb 47                	jmp    c0028ce4 <std::vector<DevicePortRange>::push_back(DevicePortRange const&)+0x88>
c0028c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0028ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0028ca7:	01 c0                	add    eax,eax
c0028ca9:	83 ec 08             	sub    esp,0x8
c0028cac:	50                   	push   eax
c0028cad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb1:	e8 b6 fe ff ff       	call   c0028b6c <std::vector<DevicePortRange>::reserve(unsigned long)>
c0028cb6:	83 c4 10             	add    esp,0x10
c0028cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028cc0:	8d 50 01             	lea    edx,[eax+0x1]
c0028cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0028cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028cd1:	8d 48 04             	lea    ecx,[eax+0x4]
c0028cd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0028cd8:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0028cdb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028cdf:	8b 12                	mov    edx,DWORD PTR [edx]
c0028ce1:	89 10                	mov    DWORD PTR [eax],edx
c0028ce3:	90                   	nop
c0028ce4:	90                   	nop
c0028ce5:	83 c4 0c             	add    esp,0xc
c0028ce8:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware10_getDriverEv:

c0028cec <BusHardware::_getDriver()>:
c0028cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cf0:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0028cf6:	c3                   	ret    

Disassembly of section .text._ZN11BusHardware7getTypeEv:

c0028cf8 <BusHardware::getType()>:
c0028cf8:	b8 01 00 00 00       	mov    eax,0x1
c0028cfd:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareD2Ev:

c0028d00 <BusHardware::~BusHardware()>:
c0028d00:	83 ec 0c             	sub    esp,0xc
c0028d03:	ba 38 a8 02 c0       	mov    edx,0xc002a838
c0028d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0c:	89 10                	mov    DWORD PTR [eax],edx
c0028d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d12:	83 ec 0c             	sub    esp,0xc
c0028d15:	50                   	push   eax
c0028d16:	e8 55 e7 fd ff       	call   c0007470 <Hardware::~Hardware()>
c0028d1b:	83 c4 10             	add    esp,0x10
c0028d1e:	90                   	nop
c0028d1f:	83 c4 0c             	add    esp,0xc
c0028d22:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareD0Ev:

c0028d24 <BusHardware::~BusHardware()>:
c0028d24:	83 ec 0c             	sub    esp,0xc
c0028d27:	83 ec 0c             	sub    esp,0xc
c0028d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d2e:	e8 cd ff ff ff       	call   c0028d00 <BusHardware::~BusHardware()>
c0028d33:	83 c4 10             	add    esp,0x10
c0028d36:	83 ec 08             	sub    esp,0x8
c0028d39:	68 8c 00 00 00       	push   0x8c
c0028d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d42:	e8 bd 50 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0028d47:	83 c4 10             	add    esp,0x10
c0028d4a:	83 c4 0c             	add    esp,0xc
c0028d4d:	c3                   	ret    

Disassembly of section .text._ZN9BusDriverC2Ev:

c0028d50 <BusDriver::BusDriver()>:
c0028d50:	83 ec 0c             	sub    esp,0xc
c0028d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d57:	83 ec 0c             	sub    esp,0xc
c0028d5a:	50                   	push   eax
c0028d5b:	e8 58 f2 ff ff       	call   c0027fb8 <Driver::Driver()>
c0028d60:	83 c4 10             	add    esp,0x10
c0028d63:	ba 1c a8 02 c0       	mov    edx,0xc002a81c
c0028d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6c:	89 10                	mov    DWORD PTR [eax],edx
c0028d6e:	90                   	nop
c0028d6f:	83 c4 0c             	add    esp,0xc
c0028d72:	c3                   	ret    

Disassembly of section .text._ZN11BusHardwareC2EP9BusDriver:

c0028d74 <BusHardware::BusHardware(BusDriver*)>:
c0028d74:	83 ec 0c             	sub    esp,0xc
c0028d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7b:	83 ec 0c             	sub    esp,0xc
c0028d7e:	50                   	push   eax
c0028d7f:	e8 64 e7 fd ff       	call   c00074e8 <Hardware::Hardware()>
c0028d84:	83 c4 10             	add    esp,0x10
c0028d87:	ba 38 a8 02 c0       	mov    edx,0xc002a838
c0028d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d90:	89 10                	mov    DWORD PTR [eax],edx
c0028d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d9a:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c0028da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da4:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0028daa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0028dae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db5:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0028dbb:	89 c2                	mov    edx,eax
c0028dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc1:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c0028dc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0028dc9:	83 c0 04             	add    eax,0x4
c0028dcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028dce:	83 ec 0c             	sub    esp,0xc
c0028dd1:	52                   	push   edx
c0028dd2:	ff d0                	call   eax
c0028dd4:	83 c4 10             	add    esp,0x10
c0028dd7:	90                   	nop
c0028dd8:	83 c4 0c             	add    esp,0xc
c0028ddb:	c3                   	ret    

Disassembly of section .text._ZN12ISAPnPDriverC2Ev:

c0028ddc <ISAPnPDriver::ISAPnPDriver()>:
c0028ddc:	83 ec 0c             	sub    esp,0xc
c0028ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de3:	83 ec 0c             	sub    esp,0xc
c0028de6:	50                   	push   eax
c0028de7:	e8 64 ff ff ff       	call   c0028d50 <BusDriver::BusDriver()>
c0028dec:	83 c4 10             	add    esp,0x10
c0028def:	ba e4 cf 02 c0       	mov    edx,0xc002cfe4
c0028df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df8:	89 10                	mov    DWORD PTR [eax],edx
c0028dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dfe:	66 c7 40 08 79 02    	mov    WORD PTR [eax+0x8],0x279
c0028e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e08:	66 c7 40 0a 79 0a    	mov    WORD PTR [eax+0xa],0xa79
c0028e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e12:	66 c7 40 0c 03 02    	mov    WORD PTR [eax+0xc],0x203
c0028e18:	90                   	nop
c0028e19:	83 c4 0c             	add    esp,0xc
c0028e1c:	c3                   	ret    

Disassembly of section .text._ZN10ACPIDriverC2Ev:

c0028e20 <ACPIDriver::ACPIDriver()>:
c0028e20:	83 ec 0c             	sub    esp,0xc
c0028e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e27:	83 ec 0c             	sub    esp,0xc
c0028e2a:	50                   	push   eax
c0028e2b:	e8 20 ff ff ff       	call   c0028d50 <BusDriver::BusDriver()>
c0028e30:	83 c4 10             	add    esp,0x10
c0028e33:	ba 04 ce 02 c0       	mov    edx,0xc002ce04
c0028e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3c:	89 10                	mov    DWORD PTR [eax],edx
c0028e3e:	90                   	nop
c0028e3f:	83 c4 0c             	add    esp,0xc
c0028e42:	c3                   	ret    

Disassembly of section .text._ZN9PCIDriverC2Ev:

c0028e44 <PCIDriver::PCIDriver()>:
c0028e44:	83 ec 0c             	sub    esp,0xc
c0028e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4b:	83 ec 0c             	sub    esp,0xc
c0028e4e:	50                   	push   eax
c0028e4f:	e8 fc fe ff ff       	call   c0028d50 <BusDriver::BusDriver()>
c0028e54:	83 c4 10             	add    esp,0x10
c0028e57:	ba 74 db 02 c0       	mov    edx,0xc002db74
c0028e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e60:	89 10                	mov    DWORD PTR [eax],edx
c0028e62:	90                   	nop
c0028e63:	83 c4 0c             	add    esp,0xc
c0028e66:	c3                   	ret    

Disassembly of section .text._ZN9ISADriverC2Ev:

c0028e68 <ISADriver::ISADriver()>:
c0028e68:	83 ec 0c             	sub    esp,0xc
c0028e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6f:	83 ec 0c             	sub    esp,0xc
c0028e72:	50                   	push   eax
c0028e73:	e8 40 f1 ff ff       	call   c0027fb8 <Driver::Driver()>
c0028e78:	83 c4 10             	add    esp,0x10
c0028e7b:	ba 20 ce 02 c0       	mov    edx,0xc002ce20
c0028e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e84:	89 10                	mov    DWORD PTR [eax],edx
c0028e86:	90                   	nop
c0028e87:	83 c4 0c             	add    esp,0xc
c0028e8a:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028e8c <DriverlessDevice::~DriverlessDevice()>:
c0028e8c:	ba 1c ad 02 c0       	mov    edx,0xc002ad1c
c0028e91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e95:	89 10                	mov    DWORD PTR [eax],edx
c0028e97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e9b:	50                   	push   eax
c0028e9c:	e8 e1 14 fe ff       	call   c000a382 <Device::~Device()>
c0028ea1:	83 c4 04             	add    esp,0x4
c0028ea4:	90                   	nop
c0028ea5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028ea6 <DriverlessDevice::~DriverlessDevice()>:
c0028ea6:	83 ec 0c             	sub    esp,0xc
c0028ea9:	83 ec 0c             	sub    esp,0xc
c0028eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb0:	e8 d7 ff ff ff       	call   c0028e8c <DriverlessDevice::~DriverlessDevice()>
c0028eb5:	83 c4 10             	add    esp,0x10
c0028eb8:	83 ec 08             	sub    esp,0x8
c0028ebb:	68 58 01 00 00       	push   0x158
c0028ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec4:	e8 3b 4f fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0028ec9:	83 c4 10             	add    esp,0x10
c0028ecc:	83 c4 0c             	add    esp,0xc
c0028ecf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028ed0 <LinkedList<Device>::addElement(Device*)>:
c0028ed0:	83 ec 0c             	sub    esp,0xc
c0028ed3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ed8:	75 10                	jne    c0028eea <LinkedList<Device>::addElement(Device*)+0x1a>
c0028eda:	83 ec 0c             	sub    esp,0xc
c0028edd:	68 b0 ac 02 c0       	push   0xc002acb0
c0028ee2:	e8 65 78 fe ff       	call   c001074c <KePanic(char const*)>
c0028ee7:	83 c4 10             	add    esp,0x10
c0028eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eee:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ef0:	85 c0                	test   eax,eax
c0028ef2:	74 3a                	je     c0028f2e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028efb:	85 c0                	test   eax,eax
c0028efd:	74 2f                	je     c0028f2e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f0a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f18:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f22:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028f2c:	eb 68                	jmp    c0028f96 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f32:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f34:	85 c0                	test   eax,eax
c0028f36:	75 4e                	jne    c0028f86 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f3f:	85 c0                	test   eax,eax
c0028f41:	75 43                	jne    c0028f86 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f4b:	89 10                	mov    DWORD PTR [eax],edx
c0028f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f5f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f70:	85 c0                	test   eax,eax
c0028f72:	74 22                	je     c0028f96 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028f74:	83 ec 0c             	sub    esp,0xc
c0028f77:	68 d2 ac 02 c0       	push   0xc002acd2
c0028f7c:	e8 cb 77 fe ff       	call   c001074c <KePanic(char const*)>
c0028f81:	83 c4 10             	add    esp,0x10
c0028f84:	eb 10                	jmp    c0028f96 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028f86:	83 ec 0c             	sub    esp,0xc
c0028f89:	68 dc ac 02 c0       	push   0xc002acdc
c0028f8e:	e8 b9 77 fe ff       	call   c001074c <KePanic(char const*)>
c0028f93:	83 c4 10             	add    esp,0x10
c0028f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f9d:	8d 50 01             	lea    edx,[eax+0x1]
c0028fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028fa7:	90                   	nop
c0028fa8:	83 c4 0c             	add    esp,0xc
c0028fab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028fac <LinkedList<Device>::LinkedList()>:
c0028fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028fc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fc5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028fd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fda:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028fe1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028fe5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fec:	90                   	nop
c0028fed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028ff0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028ff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ff4:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ff6:	85 c0                	test   eax,eax
c0028ff8:	75 0e                	jne    c0029008 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028ffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029001:	85 c0                	test   eax,eax
c0029003:	75 03                	jne    c0029008 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029005:	b0 01                	mov    al,0x1
c0029007:	c3                   	ret    
c0029008:	b0 00                	mov    al,0x0
c002900a:	90                   	nop
c002900b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002900c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002900c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029010:	8b 00                	mov    eax,DWORD PTR [eax]
c0029012:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0029014 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0029014:	83 ec 0c             	sub    esp,0xc
c0029017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901b:	8b 00                	mov    eax,DWORD PTR [eax]
c002901d:	85 c0                	test   eax,eax
c002901f:	75 17                	jne    c0029038 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0029021:	83 ec 0c             	sub    esp,0xc
c0029024:	68 4c af 02 c0       	push   0xc002af4c
c0029029:	e8 1e 77 fe ff       	call   c001074c <KePanic(char const*)>
c002902e:	83 c4 10             	add    esp,0x10
c0029031:	e9 96 00 00 00       	jmp    c00290cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0029036:	66 90                	xchg   ax,ax
c0029038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002903f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029042:	85 c0                	test   eax,eax
c0029044:	0f 95 c0             	setne  al
c0029047:	0f b6 c0             	movzx  eax,al
c002904a:	85 c0                	test   eax,eax
c002904c:	74 12                	je     c0029060 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002904e:	83 ec 0c             	sub    esp,0xc
c0029051:	68 97 af 02 c0       	push   0xc002af97
c0029056:	e8 f1 76 fe ff       	call   c001074c <KePanic(char const*)>
c002905b:	83 c4 10             	add    esp,0x10
c002905e:	66 90                	xchg   ax,ax
c0029060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029064:	8b 00                	mov    eax,DWORD PTR [eax]
c0029066:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029069:	85 c0                	test   eax,eax
c002906b:	0f 94 c0             	sete   al
c002906e:	0f b6 c0             	movzx  eax,al
c0029071:	85 c0                	test   eax,eax
c0029073:	74 33                	je     c00290a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0029075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029079:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002907f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029083:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002908a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029091:	83 f8 01             	cmp    eax,0x1
c0029094:	74 22                	je     c00290b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0029096:	83 ec 0c             	sub    esp,0xc
c0029099:	68 70 af 02 c0       	push   0xc002af70
c002909e:	e8 a9 76 fe ff       	call   c001074c <KePanic(char const*)>
c00290a3:	83 c4 10             	add    esp,0x10
c00290a6:	eb 10                	jmp    c00290b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00290a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00290ae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00290b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b5:	89 10                	mov    DWORD PTR [eax],edx
c00290b7:	90                   	nop
c00290b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290bf:	8d 50 ff             	lea    edx,[eax-0x1]
c00290c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290c9:	8d 76 00             	lea    esi,[esi+0x0]
c00290cc:	83 c4 0c             	add    esp,0xc
c00290cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00290d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00290d0:	83 ec 0c             	sub    esp,0xc
c00290d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00290d8:	75 12                	jne    c00290ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00290da:	83 ec 0c             	sub    esp,0xc
c00290dd:	68 b0 ac 02 c0       	push   0xc002acb0
c00290e2:	e8 65 76 fe ff       	call   c001074c <KePanic(char const*)>
c00290e7:	83 c4 10             	add    esp,0x10
c00290ea:	66 90                	xchg   ax,ax
c00290ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00290f2:	85 c0                	test   eax,eax
c00290f4:	74 36                	je     c002912c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00290f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290fd:	85 c0                	test   eax,eax
c00290ff:	74 2b                	je     c002912c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0029101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029105:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029108:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002910c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002910f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029113:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029117:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029121:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029128:	eb 6a                	jmp    c0029194 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002912a:	66 90                	xchg   ax,ax
c002912c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029130:	8b 00                	mov    eax,DWORD PTR [eax]
c0029132:	85 c0                	test   eax,eax
c0029134:	75 4e                	jne    c0029184 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0029136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002913d:	85 c0                	test   eax,eax
c002913f:	75 43                	jne    c0029184 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0029141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029145:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029149:	89 10                	mov    DWORD PTR [eax],edx
c002914b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002914f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029153:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002915d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029168:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002916b:	85 c0                	test   eax,eax
c002916d:	74 25                	je     c0029194 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002916f:	83 ec 0c             	sub    esp,0xc
c0029172:	68 d2 ac 02 c0       	push   0xc002acd2
c0029177:	e8 d0 75 fe ff       	call   c001074c <KePanic(char const*)>
c002917c:	83 c4 10             	add    esp,0x10
c002917f:	eb 13                	jmp    c0029194 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0029181:	8d 76 00             	lea    esi,[esi+0x0]
c0029184:	83 ec 0c             	sub    esp,0xc
c0029187:	68 dc ac 02 c0       	push   0xc002acdc
c002918c:	e8 bb 75 fe ff       	call   c001074c <KePanic(char const*)>
c0029191:	83 c4 10             	add    esp,0x10
c0029194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029198:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002919b:	8d 50 01             	lea    edx,[eax+0x1]
c002919e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291a5:	90                   	nop
c00291a6:	83 c4 0c             	add    esp,0xc
c00291a9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00291ac <ACPI::~ACPI()>:
c00291ac:	83 ec 0c             	sub    esp,0xc
c00291af:	ba b4 b3 02 c0       	mov    edx,0xc002b3b4
c00291b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b8:	89 10                	mov    DWORD PTR [eax],edx
c00291ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291be:	83 ec 0c             	sub    esp,0xc
c00291c1:	50                   	push   eax
c00291c2:	e8 bb 11 fe ff       	call   c000a382 <Device::~Device()>
c00291c7:	83 c4 10             	add    esp,0x10
c00291ca:	90                   	nop
c00291cb:	83 c4 0c             	add    esp,0xc
c00291ce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00291d0 <ACPI::~ACPI()>:
c00291d0:	83 ec 0c             	sub    esp,0xc
c00291d3:	83 ec 0c             	sub    esp,0xc
c00291d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291da:	e8 cd ff ff ff       	call   c00291ac <ACPI::~ACPI()>
c00291df:	83 c4 10             	add    esp,0x10
c00291e2:	83 ec 08             	sub    esp,0x8
c00291e5:	68 64 12 00 00       	push   0x1264
c00291ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ee:	e8 11 4c fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c00291f3:	83 c4 10             	add    esp,0x10
c00291f6:	83 c4 0c             	add    esp,0xc
c00291f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00291fc <LinkedList<Device>::~LinkedList()>:
c00291fc:	90                   	nop
c00291fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029200 <LinkedList<Device>::isEmpty()>:
c0029200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029204:	8b 00                	mov    eax,DWORD PTR [eax]
c0029206:	85 c0                	test   eax,eax
c0029208:	75 0e                	jne    c0029218 <LinkedList<Device>::isEmpty()+0x18>
c002920a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002920e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029211:	85 c0                	test   eax,eax
c0029213:	75 03                	jne    c0029218 <LinkedList<Device>::isEmpty()+0x18>
c0029215:	b0 01                	mov    al,0x1
c0029217:	c3                   	ret    
c0029218:	b0 00                	mov    al,0x0
c002921a:	90                   	nop
c002921b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002921c <LinkedList<Device>::getFirstElement()>:
c002921c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029220:	8b 00                	mov    eax,DWORD PTR [eax]
c0029222:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029224 <LinkedList<Device>::removeFirst()>:
c0029224:	83 ec 0c             	sub    esp,0xc
c0029227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922b:	8b 00                	mov    eax,DWORD PTR [eax]
c002922d:	85 c0                	test   eax,eax
c002922f:	75 17                	jne    c0029248 <LinkedList<Device>::removeFirst()+0x24>
c0029231:	83 ec 0c             	sub    esp,0xc
c0029234:	68 4c af 02 c0       	push   0xc002af4c
c0029239:	e8 0e 75 fe ff       	call   c001074c <KePanic(char const*)>
c002923e:	83 c4 10             	add    esp,0x10
c0029241:	e9 92 00 00 00       	jmp    c00292d8 <LinkedList<Device>::removeFirst()+0xb4>
c0029246:	66 90                	xchg   ax,ax
c0029248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002924f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029255:	85 c0                	test   eax,eax
c0029257:	74 13                	je     c002926c <LinkedList<Device>::removeFirst()+0x48>
c0029259:	83 ec 0c             	sub    esp,0xc
c002925c:	68 97 af 02 c0       	push   0xc002af97
c0029261:	e8 e6 74 fe ff       	call   c001074c <KePanic(char const*)>
c0029266:	83 c4 10             	add    esp,0x10
c0029269:	8d 76 00             	lea    esi,[esi+0x0]
c002926c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029270:	8b 00                	mov    eax,DWORD PTR [eax]
c0029272:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029278:	85 c0                	test   eax,eax
c002927a:	75 34                	jne    c00292b0 <LinkedList<Device>::removeFirst()+0x8c>
c002927c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029280:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002928a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029295:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029298:	83 f8 01             	cmp    eax,0x1
c002929b:	74 27                	je     c00292c4 <LinkedList<Device>::removeFirst()+0xa0>
c002929d:	83 ec 0c             	sub    esp,0xc
c00292a0:	68 70 af 02 c0       	push   0xc002af70
c00292a5:	e8 a2 74 fe ff       	call   c001074c <KePanic(char const*)>
c00292aa:	83 c4 10             	add    esp,0x10
c00292ad:	eb 15                	jmp    c00292c4 <LinkedList<Device>::removeFirst()+0xa0>
c00292af:	90                   	nop
c00292b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00292b6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00292bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c0:	89 10                	mov    DWORD PTR [eax],edx
c00292c2:	66 90                	xchg   ax,ax
c00292c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00292ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00292d5:	8d 76 00             	lea    esi,[esi+0x0]
c00292d8:	83 c4 0c             	add    esp,0xc
c00292db:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00292dc <Computer::~Computer()>:
c00292dc:	83 ec 0c             	sub    esp,0xc
c00292df:	ba 20 b5 02 c0       	mov    edx,0xc002b520
c00292e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e8:	89 10                	mov    DWORD PTR [eax],edx
c00292ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ee:	83 ec 0c             	sub    esp,0xc
c00292f1:	50                   	push   eax
c00292f2:	e8 8b 10 fe ff       	call   c000a382 <Device::~Device()>
c00292f7:	83 c4 10             	add    esp,0x10
c00292fa:	90                   	nop
c00292fb:	83 c4 0c             	add    esp,0xc
c00292fe:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0029300 <Computer::~Computer()>:
c0029300:	83 ec 0c             	sub    esp,0xc
c0029303:	83 ec 0c             	sub    esp,0xc
c0029306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002930a:	e8 cd ff ff ff       	call   c00292dc <Computer::~Computer()>
c002930f:	83 c4 10             	add    esp,0x10
c0029312:	83 ec 08             	sub    esp,0x8
c0029315:	68 68 01 00 00       	push   0x168
c002931a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002931e:	e8 e1 4a fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0029323:	83 c4 10             	add    esp,0x10
c0029326:	83 c4 0c             	add    esp,0xc
c0029329:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002932a <idleCommon()>:
c002932a:	83 ec 0c             	sub    esp,0xc
c002932d:	fa                   	cli    
c002932e:	ff 05 30 63 03 c0    	inc    DWORD PTR ds:0xc0036330
c0029334:	e8 ab df fe ff       	call   c00172e4 <schedule()>
c0029339:	f0 ff 0d 30 63 03 c0 	lock dec DWORD PTR ds:0xc0036330
c0029340:	83 3d 30 63 03 c0 00 	cmp    DWORD PTR ds:0xc0036330,0x0
c0029347:	75 01                	jne    c002934a <idleCommon()+0x20>
c0029349:	fb                   	sti    
c002934a:	83 c4 0c             	add    esp,0xc
c002934d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002934e <LinkedList<UnixFile>::~LinkedList()>:
c002934e:	90                   	nop
c002934f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029350 <LinkedList<UnixFile>::LinkedList()>:
c0029350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029354:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002935a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002935e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029369:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029374:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002937a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002937e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029385:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029389:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029390:	90                   	nop
c0029391:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0029392 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0029392:	83 ec 0c             	sub    esp,0xc
c0029395:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002939a:	75 10                	jne    c00293ac <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002939c:	83 ec 0c             	sub    esp,0xc
c002939f:	68 b0 ac 02 c0       	push   0xc002acb0
c00293a4:	e8 a3 73 fe ff       	call   c001074c <KePanic(char const*)>
c00293a9:	83 c4 10             	add    esp,0x10
c00293ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00293b2:	85 c0                	test   eax,eax
c00293b4:	74 34                	je     c00293ea <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00293b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293bd:	85 c0                	test   eax,eax
c00293bf:	74 29                	je     c00293ea <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00293c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293cc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00293e8:	eb 65                	jmp    c002944f <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00293ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00293f0:	85 c0                	test   eax,eax
c00293f2:	75 4b                	jne    c002943f <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00293f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293fb:	85 c0                	test   eax,eax
c00293fd:	75 40                	jne    c002943f <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00293ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029407:	89 10                	mov    DWORD PTR [eax],edx
c0029409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002940d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029411:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002941b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029426:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029429:	85 c0                	test   eax,eax
c002942b:	74 22                	je     c002944f <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002942d:	83 ec 0c             	sub    esp,0xc
c0029430:	68 d2 ac 02 c0       	push   0xc002acd2
c0029435:	e8 12 73 fe ff       	call   c001074c <KePanic(char const*)>
c002943a:	83 c4 10             	add    esp,0x10
c002943d:	eb 10                	jmp    c002944f <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002943f:	83 ec 0c             	sub    esp,0xc
c0029442:	68 dc ac 02 c0       	push   0xc002acdc
c0029447:	e8 00 73 fe ff       	call   c001074c <KePanic(char const*)>
c002944c:	83 c4 10             	add    esp,0x10
c002944f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029453:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029456:	8d 50 01             	lea    edx,[eax+0x1]
c0029459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029460:	90                   	nop
c0029461:	83 c4 0c             	add    esp,0xc
c0029464:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029466 <LinkedList<UnixFile>::getFirstElement()>:
c0029466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002946a:	8b 00                	mov    eax,DWORD PTR [eax]
c002946c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002946e <LinkedList<UnixFile>::removeFirst()>:
c002946e:	83 ec 0c             	sub    esp,0xc
c0029471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029475:	8b 00                	mov    eax,DWORD PTR [eax]
c0029477:	85 c0                	test   eax,eax
c0029479:	75 12                	jne    c002948d <LinkedList<UnixFile>::removeFirst()+0x1f>
c002947b:	83 ec 0c             	sub    esp,0xc
c002947e:	68 4c af 02 c0       	push   0xc002af4c
c0029483:	e8 c4 72 fe ff       	call   c001074c <KePanic(char const*)>
c0029488:	83 c4 10             	add    esp,0x10
c002948b:	eb 7e                	jmp    c002950b <LinkedList<UnixFile>::removeFirst()+0x9d>
c002948d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029491:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029494:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029497:	85 c0                	test   eax,eax
c0029499:	74 10                	je     c00294ab <LinkedList<UnixFile>::removeFirst()+0x3d>
c002949b:	83 ec 0c             	sub    esp,0xc
c002949e:	68 97 af 02 c0       	push   0xc002af97
c00294a3:	e8 a4 72 fe ff       	call   c001074c <KePanic(char const*)>
c00294a8:	83 c4 10             	add    esp,0x10
c00294ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294af:	8b 00                	mov    eax,DWORD PTR [eax]
c00294b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294b4:	85 c0                	test   eax,eax
c00294b6:	75 33                	jne    c00294eb <LinkedList<UnixFile>::removeFirst()+0x7d>
c00294b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294d4:	83 f8 01             	cmp    eax,0x1
c00294d7:	74 21                	je     c00294fa <LinkedList<UnixFile>::removeFirst()+0x8c>
c00294d9:	83 ec 0c             	sub    esp,0xc
c00294dc:	68 70 af 02 c0       	push   0xc002af70
c00294e1:	e8 66 72 fe ff       	call   c001074c <KePanic(char const*)>
c00294e6:	83 c4 10             	add    esp,0x10
c00294e9:	eb 0f                	jmp    c00294fa <LinkedList<UnixFile>::removeFirst()+0x8c>
c00294eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00294f1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00294f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f8:	89 10                	mov    DWORD PTR [eax],edx
c00294fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029501:	8d 50 ff             	lea    edx,[eax-0x1]
c0029504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029508:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002950b:	83 c4 0c             	add    esp,0xc
c002950e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0029510 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0029510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029514:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029517:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029518 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002951c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002951f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029520 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029520:	90                   	nop
c0029521:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029524 <ThreadControlBlock::ThreadControlBlock()>:
c0029524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029528:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002952f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029533:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002953a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002953e:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029549:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0029550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029554:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c002955b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002955f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029567:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002956b:	90                   	nop
c002956c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0029570 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0029570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029574:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002957a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002957e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029585:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029589:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029594:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002959a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002959e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295b0:	90                   	nop
c00295b1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00295b2 <IOAPIC::~IOAPIC()>:
c00295b2:	83 ec 0c             	sub    esp,0xc
c00295b5:	ba 60 c9 02 c0       	mov    edx,0xc002c960
c00295ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295be:	89 10                	mov    DWORD PTR [eax],edx
c00295c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c4:	83 ec 0c             	sub    esp,0xc
c00295c7:	50                   	push   eax
c00295c8:	e8 b5 0d fe ff       	call   c000a382 <Device::~Device()>
c00295cd:	83 c4 10             	add    esp,0x10
c00295d0:	90                   	nop
c00295d1:	83 c4 0c             	add    esp,0xc
c00295d4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00295d6 <IOAPIC::~IOAPIC()>:
c00295d6:	83 ec 0c             	sub    esp,0xc
c00295d9:	83 ec 0c             	sub    esp,0xc
c00295dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295e0:	e8 cd ff ff ff       	call   c00295b2 <IOAPIC::~IOAPIC()>
c00295e5:	83 c4 10             	add    esp,0x10
c00295e8:	83 ec 08             	sub    esp,0x8
c00295eb:	68 68 01 00 00       	push   0x168
c00295f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295f4:	e8 0b 48 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c00295f9:	83 c4 10             	add    esp,0x10
c00295fc:	83 c4 0c             	add    esp,0xc
c00295ff:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029600 <CPU::~CPU()>:
c0029600:	83 ec 0c             	sub    esp,0xc
c0029603:	ba e8 cc 02 c0       	mov    edx,0xc002cce8
c0029608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960c:	89 10                	mov    DWORD PTR [eax],edx
c002960e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029612:	83 ec 0c             	sub    esp,0xc
c0029615:	50                   	push   eax
c0029616:	e8 67 0d fe ff       	call   c000a382 <Device::~Device()>
c002961b:	83 c4 10             	add    esp,0x10
c002961e:	90                   	nop
c002961f:	83 c4 0c             	add    esp,0xc
c0029622:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029624 <CPU::~CPU()>:
c0029624:	83 ec 0c             	sub    esp,0xc
c0029627:	83 ec 0c             	sub    esp,0xc
c002962a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002962e:	e8 cd ff ff ff       	call   c0029600 <CPU::~CPU()>
c0029633:	83 c4 10             	add    esp,0x10
c0029636:	83 ec 08             	sub    esp,0x8
c0029639:	68 78 11 00 00       	push   0x1178
c002963e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029642:	e8 bd 47 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0029647:	83 c4 10             	add    esp,0x10
c002964a:	83 c4 0c             	add    esp,0xc
c002964d:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware10_getDriverEv:

c0029650 <UnknownHardware::_getDriver()>:
c0029650:	b8 00 00 00 00       	mov    eax,0x0
c0029655:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware7getTypeEv:

c0029658 <UnknownHardware::getType()>:
c0029658:	b8 00 00 00 00       	mov    eax,0x0
c002965d:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareD2Ev:

c0029660 <UnknownHardware::~UnknownHardware()>:
c0029660:	83 ec 0c             	sub    esp,0xc
c0029663:	ba c8 cf 02 c0       	mov    edx,0xc002cfc8
c0029668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002966c:	89 10                	mov    DWORD PTR [eax],edx
c002966e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029672:	83 ec 0c             	sub    esp,0xc
c0029675:	50                   	push   eax
c0029676:	e8 f5 dd fd ff       	call   c0007470 <Hardware::~Hardware()>
c002967b:	83 c4 10             	add    esp,0x10
c002967e:	90                   	nop
c002967f:	83 c4 0c             	add    esp,0xc
c0029682:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareD0Ev:

c0029684 <UnknownHardware::~UnknownHardware()>:
c0029684:	83 ec 0c             	sub    esp,0xc
c0029687:	83 ec 0c             	sub    esp,0xc
c002968a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002968e:	e8 cd ff ff ff       	call   c0029660 <UnknownHardware::~UnknownHardware()>
c0029693:	83 c4 10             	add    esp,0x10
c0029696:	83 ec 08             	sub    esp,0x8
c0029699:	68 88 01 00 00       	push   0x188
c002969e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296a2:	e8 5d 47 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c00296a7:	83 c4 10             	add    esp,0x10
c00296aa:	83 c4 0c             	add    esp,0xc
c00296ad:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareC2Ev:

c00296b0 <UnknownHardware::UnknownHardware()>:
c00296b0:	83 ec 0c             	sub    esp,0xc
c00296b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b7:	83 ec 0c             	sub    esp,0xc
c00296ba:	50                   	push   eax
c00296bb:	e8 28 de fd ff       	call   c00074e8 <Hardware::Hardware()>
c00296c0:	83 c4 10             	add    esp,0x10
c00296c3:	ba c8 cf 02 c0       	mov    edx,0xc002cfc8
c00296c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296cc:	89 10                	mov    DWORD PTR [eax],edx
c00296ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296d2:	c7 40 70 04 00 00 00 	mov    DWORD PTR [eax+0x70],0x4
c00296d9:	90                   	nop
c00296da:	83 c4 0c             	add    esp,0xc
c00296dd:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware18setISAPnPDetectionEhy:

c00296e0 <UnknownHardware::setISAPnPDetection(unsigned char, unsigned long long)>:
c00296e0:	53                   	push   ebx
c00296e1:	83 ec 10             	sub    esp,0x10
c00296e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00296e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00296ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00296f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00296f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00296f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00296fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00296ff:	c7 40 70 01 00 00 00 	mov    DWORD PTR [eax+0x70],0x1
c0029706:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002970a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c002970e:	88 50 40             	mov    BYTE PTR [eax+0x40],dl
c0029711:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0029714:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0029718:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c002971b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002971e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029722:	89 d0                	mov    eax,edx
c0029724:	31 d2                	xor    edx,edx
c0029726:	89 c1                	mov    ecx,eax
c0029728:	89 d3                	mov    ebx,edx
c002972a:	89 ca                	mov    edx,ecx
c002972c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0029730:	89 50 48             	mov    DWORD PTR [eax+0x48],edx
c0029733:	90                   	nop
c0029734:	83 c4 10             	add    esp,0x10
c0029737:	5b                   	pop    ebx
c0029738:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardware20getHumanReadableNameEv:

c002973c <UnknownHardware::getHumanReadableName()>:
c002973c:	83 ec 0c             	sub    esp,0xc
c002973f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029743:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0029746:	83 f8 02             	cmp    eax,0x2
c0029749:	75 0d                	jne    c0029758 <UnknownHardware::getHumanReadableName()+0x1c>
c002974b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002974f:	05 88 00 00 00       	add    eax,0x88
c0029754:	eb 2a                	jmp    c0029780 <UnknownHardware::getHumanReadableName()+0x44>
c0029756:	66 90                	xchg   ax,ax
c0029758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002975c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c002975f:	83 f8 01             	cmp    eax,0x1
c0029762:	75 08                	jne    c002976c <UnknownHardware::getHumanReadableName()+0x30>
c0029764:	b8 a0 cf 02 c0       	mov    eax,0xc002cfa0
c0029769:	eb 15                	jmp    c0029780 <UnknownHardware::getHumanReadableName()+0x44>
c002976b:	90                   	nop
c002976c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029770:	83 ec 0c             	sub    esp,0xc
c0029773:	50                   	push   eax
c0029774:	e8 4f dc fd ff       	call   c00073c8 <Hardware::getHumanReadableName()>
c0029779:	83 c4 10             	add    esp,0x10
c002977c:	90                   	nop
c002977d:	8d 76 00             	lea    esi,[esi+0x0]
c0029780:	83 c4 0c             	add    esp,0xc
c0029783:	c3                   	ret    

Disassembly of section .text._ZN15UnknownHardwareC2E23DevicePCIConnectionInfo:

c0029784 <UnknownHardware::UnknownHardware(DevicePCIConnectionInfo)>:
c0029784:	57                   	push   edi
c0029785:	56                   	push   esi
c0029786:	53                   	push   ebx
c0029787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002978b:	83 ec 0c             	sub    esp,0xc
c002978e:	50                   	push   eax
c002978f:	e8 54 dd fd ff       	call   c00074e8 <Hardware::Hardware()>
c0029794:	83 c4 10             	add    esp,0x10
c0029797:	ba c8 cf 02 c0       	mov    edx,0xc002cfc8
c002979c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297a0:	89 10                	mov    DWORD PTR [eax],edx
c00297a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297a6:	c7 40 70 02 00 00 00 	mov    DWORD PTR [eax+0x70],0x2
c00297ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b1:	8d 58 40             	lea    ebx,[eax+0x40]
c00297b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00297b8:	ba 09 00 00 00       	mov    edx,0x9
c00297bd:	fc                   	cld    
c00297be:	89 df                	mov    edi,ebx
c00297c0:	89 c6                	mov    esi,eax
c00297c2:	89 d1                	mov    ecx,edx
c00297c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00297c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ca:	05 88 00 00 00       	add    eax,0x88
c00297cf:	83 ec 08             	sub    esp,0x8
c00297d2:	68 60 db 02 c0       	push   0xc002db60
c00297d7:	50                   	push   eax
c00297d8:	e8 63 6e fd ff       	call   c0000640 <strcpy>
c00297dd:	83 c4 10             	add    esp,0x10
c00297e0:	83 ec 0c             	sub    esp,0xc
c00297e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00297e7:	83 ec 24             	sub    esp,0x24
c00297ea:	89 e2                	mov    edx,esp
c00297ec:	8d 58 40             	lea    ebx,[eax+0x40]
c00297ef:	b8 09 00 00 00       	mov    eax,0x9
c00297f4:	89 d7                	mov    edi,edx
c00297f6:	89 de                	mov    esi,ebx
c00297f8:	89 c1                	mov    ecx,eax
c00297fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00297fc:	e8 93 3c ff ff       	call   c001d494 <PCIDriver::lookupDeviceName(DevicePCIConnectionInfo)>
c0029801:	83 c4 30             	add    esp,0x30
c0029804:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029808:	81 c2 88 00 00 00    	add    edx,0x88
c002980e:	83 ec 08             	sub    esp,0x8
c0029811:	50                   	push   eax
c0029812:	52                   	push   edx
c0029813:	e8 28 70 fd ff       	call   c0000840 <strcat>
c0029818:	83 c4 10             	add    esp,0x10
c002981b:	90                   	nop
c002981c:	5b                   	pop    ebx
c002981d:	5e                   	pop    esi
c002981e:	5f                   	pop    edi
c002981f:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0029820 <PCI::~PCI()>:
c0029820:	83 ec 0c             	sub    esp,0xc
c0029823:	ba 18 e2 02 c0       	mov    edx,0xc002e218
c0029828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002982c:	89 10                	mov    DWORD PTR [eax],edx
c002982e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029832:	83 ec 0c             	sub    esp,0xc
c0029835:	50                   	push   eax
c0029836:	e8 8d fb fd ff       	call   c00093c8 <Bus::~Bus()>
c002983b:	83 c4 10             	add    esp,0x10
c002983e:	90                   	nop
c002983f:	83 c4 0c             	add    esp,0xc
c0029842:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0029844 <PCI::~PCI()>:
c0029844:	83 ec 0c             	sub    esp,0xc
c0029847:	83 ec 0c             	sub    esp,0xc
c002984a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002984e:	e8 cd ff ff ff       	call   c0029820 <PCI::~PCI()>
c0029853:	83 c4 10             	add    esp,0x10
c0029856:	83 ec 08             	sub    esp,0x8
c0029859:	68 5c 01 00 00       	push   0x15c
c002985e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029862:	e8 9d 45 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0029867:	83 c4 10             	add    esp,0x10
c002986a:	83 c4 0c             	add    esp,0xc
c002986d:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002986e <IDE::~IDE()>:
c002986e:	83 ec 0c             	sub    esp,0xc
c0029871:	ba 68 e3 02 c0       	mov    edx,0xc002e368
c0029876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002987a:	89 10                	mov    DWORD PTR [eax],edx
c002987c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029880:	83 ec 0c             	sub    esp,0xc
c0029883:	50                   	push   eax
c0029884:	e8 87 0f fe ff       	call   c000a810 <HardDiskController::~HardDiskController()>
c0029889:	83 c4 10             	add    esp,0x10
c002988c:	90                   	nop
c002988d:	83 c4 0c             	add    esp,0xc
c0029890:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0029892 <IDE::~IDE()>:
c0029892:	83 ec 0c             	sub    esp,0xc
c0029895:	83 ec 0c             	sub    esp,0xc
c0029898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002989c:	e8 cd ff ff ff       	call   c002986e <IDE::~IDE()>
c00298a1:	83 c4 10             	add    esp,0x10
c00298a4:	83 ec 08             	sub    esp,0x8
c00298a7:	68 70 02 00 00       	push   0x270
c00298ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298b0:	e8 4f 45 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c00298b5:	83 c4 10             	add    esp,0x10
c00298b8:	83 c4 0c             	add    esp,0xc
c00298bb:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00298bc <SATABus::~SATABus()>:
c00298bc:	83 ec 0c             	sub    esp,0xc
c00298bf:	ba b8 e3 02 c0       	mov    edx,0xc002e3b8
c00298c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c8:	89 10                	mov    DWORD PTR [eax],edx
c00298ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ce:	83 ec 0c             	sub    esp,0xc
c00298d1:	50                   	push   eax
c00298d2:	e8 39 0f fe ff       	call   c000a810 <HardDiskController::~HardDiskController()>
c00298d7:	83 c4 10             	add    esp,0x10
c00298da:	90                   	nop
c00298db:	83 c4 0c             	add    esp,0xc
c00298de:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00298e0 <SATABus::~SATABus()>:
c00298e0:	83 ec 0c             	sub    esp,0xc
c00298e3:	83 ec 0c             	sub    esp,0xc
c00298e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ea:	e8 cd ff ff ff       	call   c00298bc <SATABus::~SATABus()>
c00298ef:	83 c4 10             	add    esp,0x10
c00298f2:	83 ec 08             	sub    esp,0x8
c00298f5:	68 64 01 00 00       	push   0x164
c00298fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298fe:	e8 01 45 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0029903:	83 c4 10             	add    esp,0x10
c0029906:	83 c4 0c             	add    esp,0xc
c0029909:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002990a <ATA::~ATA()>:
c002990a:	83 ec 0c             	sub    esp,0xc
c002990d:	ba a0 e4 02 c0       	mov    edx,0xc002e4a0
c0029912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029916:	89 10                	mov    DWORD PTR [eax],edx
c0029918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002991c:	83 ec 0c             	sub    esp,0xc
c002991f:	50                   	push   eax
c0029920:	e8 cd 0f fe ff       	call   c000a8f2 <PhysicalDisk::~PhysicalDisk()>
c0029925:	83 c4 10             	add    esp,0x10
c0029928:	90                   	nop
c0029929:	83 c4 0c             	add    esp,0xc
c002992c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002992e <ATA::~ATA()>:
c002992e:	83 ec 0c             	sub    esp,0xc
c0029931:	83 ec 0c             	sub    esp,0xc
c0029934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029938:	e8 cd ff ff ff       	call   c002990a <ATA::~ATA()>
c002993d:	83 c4 10             	add    esp,0x10
c0029940:	83 ec 08             	sub    esp,0x8
c0029943:	68 8c 01 00 00       	push   0x18c
c0029948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002994c:	e8 b3 44 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0029951:	83 c4 10             	add    esp,0x10
c0029954:	83 c4 0c             	add    esp,0xc
c0029957:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029958 <ATAPI::~ATAPI()>:
c0029958:	83 ec 0c             	sub    esp,0xc
c002995b:	ba e8 e4 02 c0       	mov    edx,0xc002e4e8
c0029960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029964:	89 10                	mov    DWORD PTR [eax],edx
c0029966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002996a:	83 ec 0c             	sub    esp,0xc
c002996d:	50                   	push   eax
c002996e:	e8 7f 0f fe ff       	call   c000a8f2 <PhysicalDisk::~PhysicalDisk()>
c0029973:	83 c4 10             	add    esp,0x10
c0029976:	90                   	nop
c0029977:	83 c4 0c             	add    esp,0xc
c002997a:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002997c <ATAPI::~ATAPI()>:
c002997c:	83 ec 0c             	sub    esp,0xc
c002997f:	83 ec 0c             	sub    esp,0xc
c0029982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029986:	e8 cd ff ff ff       	call   c0029958 <ATAPI::~ATAPI()>
c002998b:	83 c4 10             	add    esp,0x10
c002998e:	83 ec 08             	sub    esp,0x8
c0029991:	68 84 01 00 00       	push   0x184
c0029996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002999a:	e8 65 44 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c002999f:	83 c4 10             	add    esp,0x10
c00299a2:	83 c4 0c             	add    esp,0xc
c00299a5:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00299a6 <SATA::~SATA()>:
c00299a6:	83 ec 0c             	sub    esp,0xc
c00299a9:	ba a8 e5 02 c0       	mov    edx,0xc002e5a8
c00299ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b2:	89 10                	mov    DWORD PTR [eax],edx
c00299b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b8:	83 ec 0c             	sub    esp,0xc
c00299bb:	50                   	push   eax
c00299bc:	e8 31 0f fe ff       	call   c000a8f2 <PhysicalDisk::~PhysicalDisk()>
c00299c1:	83 c4 10             	add    esp,0x10
c00299c4:	90                   	nop
c00299c5:	83 c4 0c             	add    esp,0xc
c00299c8:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00299ca <SATA::~SATA()>:
c00299ca:	83 ec 0c             	sub    esp,0xc
c00299cd:	83 ec 0c             	sub    esp,0xc
c00299d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299d4:	e8 cd ff ff ff       	call   c00299a6 <SATA::~SATA()>
c00299d9:	83 c4 10             	add    esp,0x10
c00299dc:	83 ec 08             	sub    esp,0x8
c00299df:	68 7c 01 00 00       	push   0x17c
c00299e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e8:	e8 17 44 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c00299ed:	83 c4 10             	add    esp,0x10
c00299f0:	83 c4 0c             	add    esp,0xc
c00299f3:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00299f4 <SATAPI::~SATAPI()>:
c00299f4:	83 ec 0c             	sub    esp,0xc
c00299f7:	ba cc e6 02 c0       	mov    edx,0xc002e6cc
c00299fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a00:	89 10                	mov    DWORD PTR [eax],edx
c0029a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a06:	83 ec 0c             	sub    esp,0xc
c0029a09:	50                   	push   eax
c0029a0a:	e8 e3 0e fe ff       	call   c000a8f2 <PhysicalDisk::~PhysicalDisk()>
c0029a0f:	83 c4 10             	add    esp,0x10
c0029a12:	90                   	nop
c0029a13:	83 c4 0c             	add    esp,0xc
c0029a16:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029a18 <SATAPI::~SATAPI()>:
c0029a18:	83 ec 0c             	sub    esp,0xc
c0029a1b:	83 ec 0c             	sub    esp,0xc
c0029a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a22:	e8 cd ff ff ff       	call   c00299f4 <SATAPI::~SATAPI()>
c0029a27:	83 c4 10             	add    esp,0x10
c0029a2a:	83 ec 08             	sub    esp,0x8
c0029a2d:	68 84 01 00 00       	push   0x184
c0029a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a36:	e8 c9 43 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0029a3b:	83 c4 10             	add    esp,0x10
c0029a3e:	83 c4 0c             	add    esp,0xc
c0029a41:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029a44 <APICTimer::~APICTimer()>:
c0029a44:	83 ec 0c             	sub    esp,0xc
c0029a47:	ba 20 e7 02 c0       	mov    edx,0xc002e720
c0029a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a50:	89 10                	mov    DWORD PTR [eax],edx
c0029a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a56:	83 ec 0c             	sub    esp,0xc
c0029a59:	50                   	push   eax
c0029a5a:	e8 2d 20 fe ff       	call   c000ba8c <Timer::~Timer()>
c0029a5f:	83 c4 10             	add    esp,0x10
c0029a62:	90                   	nop
c0029a63:	83 c4 0c             	add    esp,0xc
c0029a66:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029a68 <APICTimer::~APICTimer()>:
c0029a68:	83 ec 0c             	sub    esp,0xc
c0029a6b:	83 ec 0c             	sub    esp,0xc
c0029a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a72:	e8 cd ff ff ff       	call   c0029a44 <APICTimer::~APICTimer()>
c0029a77:	83 c4 10             	add    esp,0x10
c0029a7a:	83 ec 08             	sub    esp,0x8
c0029a7d:	68 60 01 00 00       	push   0x160
c0029a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a86:	e8 79 43 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0029a8b:	83 c4 10             	add    esp,0x10
c0029a8e:	83 c4 0c             	add    esp,0xc
c0029a91:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029a94 <PIT::~PIT()>:
c0029a94:	83 ec 0c             	sub    esp,0xc
c0029a97:	ba 70 e7 02 c0       	mov    edx,0xc002e770
c0029a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aa0:	89 10                	mov    DWORD PTR [eax],edx
c0029aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aa6:	83 ec 0c             	sub    esp,0xc
c0029aa9:	50                   	push   eax
c0029aaa:	e8 dd 1f fe ff       	call   c000ba8c <Timer::~Timer()>
c0029aaf:	83 c4 10             	add    esp,0x10
c0029ab2:	90                   	nop
c0029ab3:	83 c4 0c             	add    esp,0xc
c0029ab6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029ab8 <PIT::~PIT()>:
c0029ab8:	83 ec 0c             	sub    esp,0xc
c0029abb:	83 ec 0c             	sub    esp,0xc
c0029abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ac2:	e8 cd ff ff ff       	call   c0029a94 <PIT::~PIT()>
c0029ac7:	83 c4 10             	add    esp,0x10
c0029aca:	83 ec 08             	sub    esp,0x8
c0029acd:	68 5c 01 00 00       	push   0x15c
c0029ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ad6:	e8 29 43 fe ff       	call   c000de04 <operator delete(void*, unsigned long)>
c0029adb:	83 c4 10             	add    esp,0x10
c0029ade:	83 c4 0c             	add    esp,0xc
c0029ae1:	c3                   	ret    

Disassembly of section userkernel:

c0031000 <KiDefaultSignalHandlerAbort(int)>:
c0031000:	57                   	push   edi
c0031001:	b9 07 00 00 00       	mov    ecx,0x7
c0031006:	56                   	push   esi
c0031007:	be 07 ba 02 c0       	mov    esi,0xc002ba07
c003100c:	83 ec 24             	sub    esp,0x24
c003100f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0031013:	fc                   	cld    
c0031014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0031016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003101a:	50                   	push   eax
c003101b:	6a 00                	push   0x0
c003101d:	6a 38                	push   0x38
c003101f:	6a 01                	push   0x1
c0031021:	e8 2c 00 00 00       	call   c0031052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0031026:	83 c4 34             	add    esp,0x34
c0031029:	5e                   	pop    esi
c003102a:	5f                   	pop    edi
c003102b:	c3                   	ret    

c003102c <KiDefaultSignalHandlerTerminate(int)>:
c003102c:	57                   	push   edi
c003102d:	b9 08 00 00 00       	mov    ecx,0x8
c0031032:	56                   	push   esi
c0031033:	be 23 ba 02 c0       	mov    esi,0xc002ba23
c0031038:	83 ec 24             	sub    esp,0x24
c003103b:	89 e7                	mov    edi,esp
c003103d:	fc                   	cld    
c003103e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0031040:	54                   	push   esp
c0031041:	6a 00                	push   0x0
c0031043:	6a 37                	push   0x37
c0031045:	6a 01                	push   0x1
c0031047:	e8 06 00 00 00       	call   c0031052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003104c:	83 c4 34             	add    esp,0x34
c003104f:	5e                   	pop    esi
c0031050:	5f                   	pop    edi
c0031051:	c3                   	ret    

c0031052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0031052:	53                   	push   ebx
c0031053:	83 ec 10             	sub    esp,0x10
c0031056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003105a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003105e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0031062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0031066:	cd 60                	int    0x60
c0031068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003106c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0031070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0031074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0031078:	83 c4 10             	add    esp,0x10
c003107b:	5b                   	pop    ebx
c003107c:	c3                   	ret    

Disassembly of section align_previous:

c0032000 <DO_NOT_DELETE()>:
c0032000:	c3                   	ret    
